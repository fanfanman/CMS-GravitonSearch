 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1445269957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243963 +/- 0.00229327 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.243963 @ 95%CL (1 toyMC)
median expected limit: r < 0.243963 @ 95%CL (1 toyMC)
   68% expected band : 0.243963 < r < 0.243963
   95% expected band : 0.243963 < r < 0.243963
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1310659255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.287917 +/- 0.00297756 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.287917 @ 95%CL (1 toyMC)
median expected limit: r < 0.287917 @ 95%CL (1 toyMC)
   68% expected band : 0.287917 < r < 0.287917
   95% expected band : 0.287917 < r < 0.287917
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1180857776
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.277395 +/- 0.00228648 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.277395 @ 95%CL (1 toyMC)
median expected limit: r < 0.277395 @ 95%CL (1 toyMC)
   68% expected band : 0.277395 < r < 0.277395
   95% expected band : 0.277395 < r < 0.277395
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 899757246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.374565 +/- 0.00227583 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.374565 @ 95%CL (1 toyMC)
median expected limit: r < 0.374565 @ 95%CL (1 toyMC)
   68% expected band : 0.374565 < r < 0.374565
   95% expected band : 0.374565 < r < 0.374565
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 739516616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.201135 +/- 0.0046736 @ 95% CL (87 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.201135 @ 95%CL (1 toyMC)
median expected limit: r < 0.201135 @ 95%CL (1 toyMC)
   68% expected band : 0.201135 < r < 0.201135
   95% expected band : 0.201135 < r < 0.201135
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1030849686
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.289623 +/- 0.00225484 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.289623 @ 95%CL (1 toyMC)
median expected limit: r < 0.289623 @ 95%CL (1 toyMC)
   68% expected band : 0.289623 < r < 0.289623
   95% expected band : 0.289623 < r < 0.289623
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 797830046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.257455 +/- 0.00253674 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.257455 @ 95%CL (1 toyMC)
median expected limit: r < 0.257455 @ 95%CL (1 toyMC)
   68% expected band : 0.257455 < r < 0.257455
   95% expected band : 0.257455 < r < 0.257455
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1809164485
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.276946 +/- 0.00301365 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.276946 @ 95%CL (1 toyMC)
median expected limit: r < 0.276946 @ 95%CL (1 toyMC)
   68% expected band : 0.276946 < r < 0.276946
   95% expected band : 0.276946 < r < 0.276946
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -708867409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226997 +/- 0.0035835 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.226997 @ 95%CL (1 toyMC)
median expected limit: r < 0.226997 @ 95%CL (1 toyMC)
   68% expected band : 0.226997 < r < 0.226997
   95% expected band : 0.226997 < r < 0.226997
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 636892121
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263293 +/- 0.00248144 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.263293 @ 95%CL (1 toyMC)
median expected limit: r < 0.263293 @ 95%CL (1 toyMC)
   68% expected band : 0.263293 < r < 0.263293
   95% expected band : 0.263293 < r < 0.263293
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1028124836
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251326 +/- 0.00263849 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.251326 @ 95%CL (1 toyMC)
median expected limit: r < 0.251326 @ 95%CL (1 toyMC)
   68% expected band : 0.251326 < r < 0.251326
   95% expected band : 0.251326 < r < 0.251326
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 767379597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361593 +/- 0.00244926 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.361593 @ 95%CL (1 toyMC)
median expected limit: r < 0.361593 @ 95%CL (1 toyMC)
   68% expected band : 0.361593 < r < 0.361593
   95% expected band : 0.361593 < r < 0.361593
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 271476890
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.275252 +/- 0.00346788 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.275252 @ 95%CL (1 toyMC)
median expected limit: r < 0.275252 @ 95%CL (1 toyMC)
   68% expected band : 0.275252 < r < 0.275252
   95% expected band : 0.275252 < r < 0.275252
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1684305800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.487432 +/- 0.00175946 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.487432 @ 95%CL (1 toyMC)
median expected limit: r < 0.487432 @ 95%CL (1 toyMC)
   68% expected band : 0.487432 < r < 0.487432
   95% expected band : 0.487432 < r < 0.487432
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -259409483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206876 +/- 0.0042948 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.206876 @ 95%CL (1 toyMC)
median expected limit: r < 0.206876 @ 95%CL (1 toyMC)
   68% expected band : 0.206876 < r < 0.206876
   95% expected band : 0.206876 < r < 0.206876
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 314849042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.349985 +/- 0.00299169 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.349985 @ 95%CL (1 toyMC)
median expected limit: r < 0.349985 @ 95%CL (1 toyMC)
   68% expected band : 0.349985 < r < 0.349985
   95% expected band : 0.349985 < r < 0.349985
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1106210786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260577 +/- 0.00224825 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.260577 @ 95%CL (1 toyMC)
median expected limit: r < 0.260577 @ 95%CL (1 toyMC)
   68% expected band : 0.260577 < r < 0.260577
   95% expected band : 0.260577 < r < 0.260577
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 389771712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313598 +/- 0.00286836 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.313598 @ 95%CL (1 toyMC)
median expected limit: r < 0.313598 @ 95%CL (1 toyMC)
   68% expected band : 0.313598 < r < 0.313598
   95% expected band : 0.313598 < r < 0.313598
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -12734330
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.205557 +/- 0.00341414 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.205557 @ 95%CL (1 toyMC)
median expected limit: r < 0.205557 @ 95%CL (1 toyMC)
   68% expected band : 0.205557 < r < 0.205557
   95% expected band : 0.205557 < r < 0.205557
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 870723799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260726 +/- 0.00292116 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.260726 @ 95%CL (1 toyMC)
median expected limit: r < 0.260726 @ 95%CL (1 toyMC)
   68% expected band : 0.260726 < r < 0.260726
   95% expected band : 0.260726 < r < 0.260726
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1579521127
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.222098 +/- 0.00361219 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.222098 @ 95%CL (1 toyMC)
median expected limit: r < 0.222098 @ 95%CL (1 toyMC)
   68% expected band : 0.222098 < r < 0.222098
   95% expected band : 0.222098 < r < 0.222098
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2135685198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.466432 +/- 0.00242849 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.466432 @ 95%CL (1 toyMC)
median expected limit: r < 0.466432 @ 95%CL (1 toyMC)
   68% expected band : 0.466432 < r < 0.466432
   95% expected band : 0.466432 < r < 0.466432
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1752819385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28962 +/- 0.00240838 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.28962 @ 95%CL (1 toyMC)
median expected limit: r < 0.28962 @ 95%CL (1 toyMC)
   68% expected band : 0.28962 < r < 0.28962
   95% expected band : 0.28962 < r < 0.28962
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1882789931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.269602 +/- 0.00317497 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.269602 @ 95%CL (1 toyMC)
median expected limit: r < 0.269602 @ 95%CL (1 toyMC)
   68% expected band : 0.269602 < r < 0.269602
   95% expected band : 0.269602 < r < 0.269602
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 856026112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.233389 +/- 0.00356907 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.233389 @ 95%CL (1 toyMC)
median expected limit: r < 0.233389 @ 95%CL (1 toyMC)
   68% expected band : 0.233389 < r < 0.233389
   95% expected band : 0.233389 < r < 0.233389
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -168224765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29478 +/- 0.00229975 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.29478 @ 95%CL (1 toyMC)
median expected limit: r < 0.29478 @ 95%CL (1 toyMC)
   68% expected band : 0.29478 < r < 0.29478
   95% expected band : 0.29478 < r < 0.29478
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -660342665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.197004 +/- 0.00520042 @ 95% CL (84 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 0.197004 @ 95%CL (1 toyMC)
median expected limit: r < 0.197004 @ 95%CL (1 toyMC)
   68% expected band : 0.197004 < r < 0.197004
   95% expected band : 0.197004 < r < 0.197004
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -897112005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332031 +/- 0.00202936 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.332031 @ 95%CL (1 toyMC)
median expected limit: r < 0.332031 @ 95%CL (1 toyMC)
   68% expected band : 0.332031 < r < 0.332031
   95% expected band : 0.332031 < r < 0.332031
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -669455897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.311891 +/- 0.00251005 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.311891 @ 95%CL (1 toyMC)
median expected limit: r < 0.311891 @ 95%CL (1 toyMC)
   68% expected band : 0.311891 < r < 0.311891
   95% expected band : 0.311891 < r < 0.311891
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1148207837
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248923 +/- 0.00211768 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.248923 @ 95%CL (1 toyMC)
median expected limit: r < 0.248923 @ 95%CL (1 toyMC)
   68% expected band : 0.248923 < r < 0.248923
   95% expected band : 0.248923 < r < 0.248923
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 954452065
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.193883 +/- 0.00680016 @ 95% CL (78 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 0.193883 @ 95%CL (1 toyMC)
median expected limit: r < 0.193883 @ 95%CL (1 toyMC)
   68% expected band : 0.193883 < r < 0.193883
   95% expected band : 0.193883 < r < 0.193883
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2097115845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186724 +/- 0.00417508 @ 95% CL (89 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 0.186724 @ 95%CL (1 toyMC)
median expected limit: r < 0.186724 @ 95%CL (1 toyMC)
   68% expected band : 0.186724 < r < 0.186724
   95% expected band : 0.186724 < r < 0.186724
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 665870952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.215936 +/- 0.00384495 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.215936 @ 95%CL (1 toyMC)
median expected limit: r < 0.215936 @ 95%CL (1 toyMC)
   68% expected band : 0.215936 < r < 0.215936
   95% expected band : 0.215936 < r < 0.215936
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1101978244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231212 +/- 0.00250221 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.231212 @ 95%CL (1 toyMC)
median expected limit: r < 0.231212 @ 95%CL (1 toyMC)
   68% expected band : 0.231212 < r < 0.231212
   95% expected band : 0.231212 < r < 0.231212
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1639091299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.225536 +/- 0.00316871 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.225536 @ 95%CL (1 toyMC)
median expected limit: r < 0.225536 @ 95%CL (1 toyMC)
   68% expected band : 0.225536 < r < 0.225536
   95% expected band : 0.225536 < r < 0.225536
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1683157857
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387267 +/- 0.00190249 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.387267 @ 95%CL (1 toyMC)
median expected limit: r < 0.387267 @ 95%CL (1 toyMC)
   68% expected band : 0.387267 < r < 0.387267
   95% expected band : 0.387267 < r < 0.387267
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1716395551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204523 +/- 0.00410886 @ 95% CL (98 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.204523 @ 95%CL (1 toyMC)
median expected limit: r < 0.204523 @ 95%CL (1 toyMC)
   68% expected band : 0.204523 < r < 0.204523
   95% expected band : 0.204523 < r < 0.204523
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1037628392
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28259 +/- 0.00247085 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.28259 @ 95%CL (1 toyMC)
median expected limit: r < 0.28259 @ 95%CL (1 toyMC)
   68% expected band : 0.28259 < r < 0.28259
   95% expected band : 0.28259 < r < 0.28259
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 234108385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200108 +/- 0.00361392 @ 95% CL (98 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.200108 @ 95%CL (1 toyMC)
median expected limit: r < 0.200108 @ 95%CL (1 toyMC)
   68% expected band : 0.200108 < r < 0.200108
   95% expected band : 0.200108 < r < 0.200108
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1082176142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229468 +/- 0.00317735 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.229468 @ 95%CL (1 toyMC)
median expected limit: r < 0.229468 @ 95%CL (1 toyMC)
   68% expected band : 0.229468 < r < 0.229468
   95% expected band : 0.229468 < r < 0.229468
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2042200731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.256178 +/- 0.00194872 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.256178 @ 95%CL (1 toyMC)
median expected limit: r < 0.256178 @ 95%CL (1 toyMC)
   68% expected band : 0.256178 < r < 0.256178
   95% expected band : 0.256178 < r < 0.256178
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1567742697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.172522 +/- 0.010013 @ 95% CL (61 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 0.172522 @ 95%CL (1 toyMC)
median expected limit: r < 0.172522 @ 95%CL (1 toyMC)
   68% expected band : 0.172522 < r < 0.172522
   95% expected band : 0.172522 < r < 0.172522
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1776644571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208871 +/- 0.00309028 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.208871 @ 95%CL (1 toyMC)
median expected limit: r < 0.208871 @ 95%CL (1 toyMC)
   68% expected band : 0.208871 < r < 0.208871
   95% expected band : 0.208871 < r < 0.208871
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 620093339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.374032 +/- 0.00219624 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.374032 @ 95%CL (1 toyMC)
median expected limit: r < 0.374032 @ 95%CL (1 toyMC)
   68% expected band : 0.374032 < r < 0.374032
   95% expected band : 0.374032 < r < 0.374032
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1143332761
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.275162 +/- 0.00281792 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.275162 @ 95%CL (1 toyMC)
median expected limit: r < 0.275162 @ 95%CL (1 toyMC)
   68% expected band : 0.275162 < r < 0.275162
   95% expected band : 0.275162 < r < 0.275162
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1070783841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232984 +/- 0.00315797 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.232984 @ 95%CL (1 toyMC)
median expected limit: r < 0.232984 @ 95%CL (1 toyMC)
   68% expected band : 0.232984 < r < 0.232984
   95% expected band : 0.232984 < r < 0.232984
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1436498557
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.381825 +/- 0.00194224 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.381825 @ 95%CL (1 toyMC)
median expected limit: r < 0.381825 @ 95%CL (1 toyMC)
   68% expected band : 0.381825 < r < 0.381825
   95% expected band : 0.381825 < r < 0.381825
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1269890569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.277915 +/- 0.00260503 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.277915 @ 95%CL (1 toyMC)
median expected limit: r < 0.277915 @ 95%CL (1 toyMC)
   68% expected band : 0.277915 < r < 0.277915
   95% expected band : 0.277915 < r < 0.277915
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1441491120
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.276579 +/- 0.0020504 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.276579 @ 95%CL (1 toyMC)
median expected limit: r < 0.276579 @ 95%CL (1 toyMC)
   68% expected band : 0.276579 < r < 0.276579
   95% expected band : 0.276579 < r < 0.276579
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1858092238
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210862 +/- 0.00324389 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.210862 @ 95%CL (1 toyMC)
median expected limit: r < 0.210862 @ 95%CL (1 toyMC)
   68% expected band : 0.210862 < r < 0.210862
   95% expected band : 0.210862 < r < 0.210862
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1133259731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0883 +/- 4.43267 @ 95% CL (6 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 10.0883 @ 95%CL (1 toyMC)
median expected limit: r < 10.0883 @ 95%CL (1 toyMC)
   68% expected band : 10.0883 < r < 10.0883
   95% expected band : 10.0883 < r < 10.0883
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1369097636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.311259 +/- 0.00211223 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.311259 @ 95%CL (1 toyMC)
median expected limit: r < 0.311259 @ 95%CL (1 toyMC)
   68% expected band : 0.311259 < r < 0.311259
   95% expected band : 0.311259 < r < 0.311259
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 177982759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263399 +/- 0.00318385 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.263399 @ 95%CL (1 toyMC)
median expected limit: r < 0.263399 @ 95%CL (1 toyMC)
   68% expected band : 0.263399 < r < 0.263399
   95% expected band : 0.263399 < r < 0.263399
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 708654888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221446 +/- 0.00395931 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.221446 @ 95%CL (1 toyMC)
median expected limit: r < 0.221446 @ 95%CL (1 toyMC)
   68% expected band : 0.221446 < r < 0.221446
   95% expected band : 0.221446 < r < 0.221446
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1308737647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229892 +/- 0.00309308 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.229892 @ 95%CL (1 toyMC)
median expected limit: r < 0.229892 @ 95%CL (1 toyMC)
   68% expected band : 0.229892 < r < 0.229892
   95% expected band : 0.229892 < r < 0.229892
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -307240909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221675 +/- 0.00323428 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.221675 @ 95%CL (1 toyMC)
median expected limit: r < 0.221675 @ 95%CL (1 toyMC)
   68% expected band : 0.221675 < r < 0.221675
   95% expected band : 0.221675 < r < 0.221675
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 48518603
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.201457 +/- 0.00339117 @ 95% CL (98 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.201457 @ 95%CL (1 toyMC)
median expected limit: r < 0.201457 @ 95%CL (1 toyMC)
   68% expected band : 0.201457 < r < 0.201457
   95% expected band : 0.201457 < r < 0.201457
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 864536093
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.379782 +/- 0.00219779 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.379782 @ 95%CL (1 toyMC)
median expected limit: r < 0.379782 @ 95%CL (1 toyMC)
   68% expected band : 0.379782 < r < 0.379782
   95% expected band : 0.379782 < r < 0.379782
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1727140411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284661 +/- 0.00249346 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.284661 @ 95%CL (1 toyMC)
median expected limit: r < 0.284661 @ 95%CL (1 toyMC)
   68% expected band : 0.284661 < r < 0.284661
   95% expected band : 0.284661 < r < 0.284661
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 155828046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.296678 +/- 0.00171737 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.296678 @ 95%CL (1 toyMC)
median expected limit: r < 0.296678 @ 95%CL (1 toyMC)
   68% expected band : 0.296678 < r < 0.296678
   95% expected band : 0.296678 < r < 0.296678
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 853492935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.254977 +/- 0.00344975 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.254977 @ 95%CL (1 toyMC)
median expected limit: r < 0.254977 @ 95%CL (1 toyMC)
   68% expected band : 0.254977 < r < 0.254977
   95% expected band : 0.254977 < r < 0.254977
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -720585454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.258926 +/- 0.00274391 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.258926 @ 95%CL (1 toyMC)
median expected limit: r < 0.258926 @ 95%CL (1 toyMC)
   68% expected band : 0.258926 < r < 0.258926
   95% expected band : 0.258926 < r < 0.258926
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -992552645
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.21758 +/- 0.00355597 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.21758 @ 95%CL (1 toyMC)
median expected limit: r < 0.21758 @ 95%CL (1 toyMC)
   68% expected band : 0.21758 < r < 0.21758
   95% expected band : 0.21758 < r < 0.21758
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -214388348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217881 +/- 0.00335812 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.217881 @ 95%CL (1 toyMC)
median expected limit: r < 0.217881 @ 95%CL (1 toyMC)
   68% expected band : 0.217881 < r < 0.217881
   95% expected band : 0.217881 < r < 0.217881
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -179677905
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.245809 +/- 0.0030282 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.245809 @ 95%CL (1 toyMC)
median expected limit: r < 0.245809 @ 95%CL (1 toyMC)
   68% expected band : 0.245809 < r < 0.245809
   95% expected band : 0.245809 < r < 0.245809
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1686824638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216232 +/- 0.00259551 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.216232 @ 95%CL (1 toyMC)
median expected limit: r < 0.216232 @ 95%CL (1 toyMC)
   68% expected band : 0.216232 < r < 0.216232
   95% expected band : 0.216232 < r < 0.216232
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1961255536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.215648 +/- 0.00263223 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.215648 @ 95%CL (1 toyMC)
median expected limit: r < 0.215648 @ 95%CL (1 toyMC)
   68% expected band : 0.215648 < r < 0.215648
   95% expected band : 0.215648 < r < 0.215648
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 238712730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.265908 +/- 0.00352297 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.265908 @ 95%CL (1 toyMC)
median expected limit: r < 0.265908 @ 95%CL (1 toyMC)
   68% expected band : 0.265908 < r < 0.265908
   95% expected band : 0.265908 < r < 0.265908
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1318147741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.201071 +/- 0.00577786 @ 95% CL (98 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.201071 @ 95%CL (1 toyMC)
median expected limit: r < 0.201071 @ 95%CL (1 toyMC)
   68% expected band : 0.201071 < r < 0.201071
   95% expected band : 0.201071 < r < 0.201071
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1855366454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.296013 +/- 0.0022978 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.296013 @ 95%CL (1 toyMC)
median expected limit: r < 0.296013 @ 95%CL (1 toyMC)
   68% expected band : 0.296013 < r < 0.296013
   95% expected band : 0.296013 < r < 0.296013
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1268548985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.520546 +/- 0.00177866 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.520546 @ 95%CL (1 toyMC)
median expected limit: r < 0.520546 @ 95%CL (1 toyMC)
   68% expected band : 0.520546 < r < 0.520546
   95% expected band : 0.520546 < r < 0.520546
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1326277716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.359769 +/- 0.00275061 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.359769 @ 95%CL (1 toyMC)
median expected limit: r < 0.359769 @ 95%CL (1 toyMC)
   68% expected band : 0.359769 < r < 0.359769
   95% expected band : 0.359769 < r < 0.359769
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2143808574
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300965 +/- 0.00212618 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.300965 @ 95%CL (1 toyMC)
median expected limit: r < 0.300965 @ 95%CL (1 toyMC)
   68% expected band : 0.300965 < r < 0.300965
   95% expected band : 0.300965 < r < 0.300965
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1906373868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.310416 +/- 0.0021296 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.310416 @ 95%CL (1 toyMC)
median expected limit: r < 0.310416 @ 95%CL (1 toyMC)
   68% expected band : 0.310416 < r < 0.310416
   95% expected band : 0.310416 < r < 0.310416
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1633893763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.297685 +/- 0.00238456 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.297685 @ 95%CL (1 toyMC)
median expected limit: r < 0.297685 @ 95%CL (1 toyMC)
   68% expected band : 0.297685 < r < 0.297685
   95% expected band : 0.297685 < r < 0.297685
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -679830804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.202871 +/- 0.003173 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.202871 @ 95%CL (1 toyMC)
median expected limit: r < 0.202871 @ 95%CL (1 toyMC)
   68% expected band : 0.202871 < r < 0.202871
   95% expected band : 0.202871 < r < 0.202871
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1972606518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.178728 +/- 0.00522437 @ 95% CL (83 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 0.178728 @ 95%CL (1 toyMC)
median expected limit: r < 0.178728 @ 95%CL (1 toyMC)
   68% expected band : 0.178728 < r < 0.178728
   95% expected band : 0.178728 < r < 0.178728
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1078527897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.478332 +/- 0.00241043 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.478332 @ 95%CL (1 toyMC)
median expected limit: r < 0.478332 @ 95%CL (1 toyMC)
   68% expected band : 0.478332 < r < 0.478332
   95% expected band : 0.478332 < r < 0.478332
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1039243929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231642 +/- 0.00361749 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.231642 @ 95%CL (1 toyMC)
median expected limit: r < 0.231642 @ 95%CL (1 toyMC)
   68% expected band : 0.231642 < r < 0.231642
   95% expected band : 0.231642 < r < 0.231642
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1045834538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232318 +/- 0.00386403 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.232318 @ 95%CL (1 toyMC)
median expected limit: r < 0.232318 @ 95%CL (1 toyMC)
   68% expected band : 0.232318 < r < 0.232318
   95% expected band : 0.232318 < r < 0.232318
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1433434178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.207188 +/- 0.00321583 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.207188 @ 95%CL (1 toyMC)
median expected limit: r < 0.207188 @ 95%CL (1 toyMC)
   68% expected band : 0.207188 < r < 0.207188
   95% expected band : 0.207188 < r < 0.207188
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1205234951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253713 +/- 0.00271508 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.253713 @ 95%CL (1 toyMC)
median expected limit: r < 0.253713 @ 95%CL (1 toyMC)
   68% expected band : 0.253713 < r < 0.253713
   95% expected band : 0.253713 < r < 0.253713
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 640291331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212438 +/- 0.00255234 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.212438 @ 95%CL (1 toyMC)
median expected limit: r < 0.212438 @ 95%CL (1 toyMC)
   68% expected band : 0.212438 < r < 0.212438
   95% expected band : 0.212438 < r < 0.212438
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1104505703
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226052 +/- 0.00442674 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.226052 @ 95%CL (1 toyMC)
median expected limit: r < 0.226052 @ 95%CL (1 toyMC)
   68% expected band : 0.226052 < r < 0.226052
   95% expected band : 0.226052 < r < 0.226052
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 987092841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.192133 +/- 0.00322335 @ 95% CL (88 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 0.192133 @ 95%CL (1 toyMC)
median expected limit: r < 0.192133 @ 95%CL (1 toyMC)
   68% expected band : 0.192133 < r < 0.192133
   95% expected band : 0.192133 < r < 0.192133
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -557397487
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212734 +/- 0.00316847 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.212734 @ 95%CL (1 toyMC)
median expected limit: r < 0.212734 @ 95%CL (1 toyMC)
   68% expected band : 0.212734 < r < 0.212734
   95% expected band : 0.212734 < r < 0.212734
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -15612429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260852 +/- 0.00238766 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.260852 @ 95%CL (1 toyMC)
median expected limit: r < 0.260852 @ 95%CL (1 toyMC)
   68% expected band : 0.260852 < r < 0.260852
   95% expected band : 0.260852 < r < 0.260852
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1201568532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.2933 +/- 0.00240199 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.2933 @ 95%CL (1 toyMC)
median expected limit: r < 0.2933 @ 95%CL (1 toyMC)
   68% expected band : 0.2933 < r < 0.2933
   95% expected band : 0.2933 < r < 0.2933
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -87276367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.245303 +/- 0.00255758 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.245303 @ 95%CL (1 toyMC)
median expected limit: r < 0.245303 @ 95%CL (1 toyMC)
   68% expected band : 0.245303 < r < 0.245303
   95% expected band : 0.245303 < r < 0.245303
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 360541264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272721 +/- 0.002502 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.272721 @ 95%CL (1 toyMC)
median expected limit: r < 0.272721 @ 95%CL (1 toyMC)
   68% expected band : 0.272721 < r < 0.272721
   95% expected band : 0.272721 < r < 0.272721
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1831712057
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.405377 +/- 0.0023592 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.405377 @ 95%CL (1 toyMC)
median expected limit: r < 0.405377 @ 95%CL (1 toyMC)
   68% expected band : 0.405377 < r < 0.405377
   95% expected band : 0.405377 < r < 0.405377
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 964903653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.227199 +/- 0.00226885 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.227199 @ 95%CL (1 toyMC)
median expected limit: r < 0.227199 @ 95%CL (1 toyMC)
   68% expected band : 0.227199 < r < 0.227199
   95% expected band : 0.227199 < r < 0.227199
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 11098175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195667 +/- 0.00476458 @ 95% CL (94 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.195667 @ 95%CL (1 toyMC)
median expected limit: r < 0.195667 @ 95%CL (1 toyMC)
   68% expected band : 0.195667 < r < 0.195667
   95% expected band : 0.195667 < r < 0.195667
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1642937021
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.230857 +/- 0.00313789 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.230857 @ 95%CL (1 toyMC)
median expected limit: r < 0.230857 @ 95%CL (1 toyMC)
   68% expected band : 0.230857 < r < 0.230857
   95% expected band : 0.230857 < r < 0.230857
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2055083340
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232531 +/- 0.00292368 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.232531 @ 95%CL (1 toyMC)
median expected limit: r < 0.232531 @ 95%CL (1 toyMC)
   68% expected band : 0.232531 < r < 0.232531
   95% expected band : 0.232531 < r < 0.232531
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1931850984
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237965 +/- 0.00325419 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.237965 @ 95%CL (1 toyMC)
median expected limit: r < 0.237965 @ 95%CL (1 toyMC)
   68% expected band : 0.237965 < r < 0.237965
   95% expected band : 0.237965 < r < 0.237965
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -471948302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.227919 +/- 0.00365602 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.227919 @ 95%CL (1 toyMC)
median expected limit: r < 0.227919 @ 95%CL (1 toyMC)
   68% expected band : 0.227919 < r < 0.227919
   95% expected band : 0.227919 < r < 0.227919
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1305295770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.241797 +/- 0.00383816 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.241797 @ 95%CL (1 toyMC)
median expected limit: r < 0.241797 @ 95%CL (1 toyMC)
   68% expected band : 0.241797 < r < 0.241797
   95% expected band : 0.241797 < r < 0.241797
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1524141815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.32192 +/- 0.00245813 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.32192 @ 95%CL (1 toyMC)
median expected limit: r < 0.32192 @ 95%CL (1 toyMC)
   68% expected band : 0.32192 < r < 0.32192
   95% expected band : 0.32192 < r < 0.32192
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 658619046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246864 +/- 0.00329748 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.246864 @ 95%CL (1 toyMC)
median expected limit: r < 0.246864 @ 95%CL (1 toyMC)
   68% expected band : 0.246864 < r < 0.246864
   95% expected band : 0.246864 < r < 0.246864
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1028124836.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1030849686.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1039243929.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1045834538.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1078527897.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1082176142.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1101978244.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1104505703.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1133259731.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1180857776.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1205234951.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1269890569.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-12734330.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1308737647.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1310659255.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1318147741.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1326277716.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1369097636.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1445269957.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1524141815.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-15612429.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1579521127.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1639091299.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-168224765.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-1684305800.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1686824638.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-1716395551.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-1727140411.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-179677905.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-1809164485.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-1831712057.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-1906373868.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-1972606518.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-2042200731.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-2097115845.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-214388348.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-259409483.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-307240909.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-471948302.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-557397487.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-660342665.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-669455897.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-679830804.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-708867409.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-720585454.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-87276367.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-897112005.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-992552645.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.1037628392.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.1070783841.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.1106210786.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.11098175.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1143332761.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1148207837.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1201568532.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1268548985.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1305295770.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1433434178.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1436498557.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1441491120.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.155828046.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1567742697.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1633893763.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1642937021.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1683157857.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1752819385.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1776644571.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.177982759.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1855366454.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1858092238.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1882789931.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1931850984.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1961255536.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.2055083340.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.2135685198.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.2143808574.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.234108385.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.238712730.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.271476890.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.314849042.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.360541264.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.389771712.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.48518603.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.620093339.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.636892121.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.640291331.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.658619046.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.665870952.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.708654888.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.739516616.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.767379597.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.797830046.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.853492935.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.856026112.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.864536093.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.870723799.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.899757246.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.954452065.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.964903653.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.987092841.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 16849858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.315855 +/- 0.00235149 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.315855 @ 95%CL (1 toyMC)
median expected limit: r < 0.315855 @ 95%CL (1 toyMC)
   68% expected band : 0.315855 < r < 0.315855
   95% expected band : 0.315855 < r < 0.315855
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1466833388
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210096 +/- 0.00357299 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.210096 @ 95%CL (1 toyMC)
median expected limit: r < 0.210096 @ 95%CL (1 toyMC)
   68% expected band : 0.210096 < r < 0.210096
   95% expected band : 0.210096 < r < 0.210096
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 156935199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.197851 +/- 0.00304378 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.197851 @ 95%CL (1 toyMC)
median expected limit: r < 0.197851 @ 95%CL (1 toyMC)
   68% expected band : 0.197851 < r < 0.197851
   95% expected band : 0.197851 < r < 0.197851
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -777655924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.297981 +/- 0.00229814 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.297981 @ 95%CL (1 toyMC)
median expected limit: r < 0.297981 @ 95%CL (1 toyMC)
   68% expected band : 0.297981 < r < 0.297981
   95% expected band : 0.297981 < r < 0.297981
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1746921766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.3576 +/- 0.00268148 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.3576 @ 95%CL (1 toyMC)
median expected limit: r < 0.3576 @ 95%CL (1 toyMC)
   68% expected band : 0.3576 < r < 0.3576
   95% expected band : 0.3576 < r < 0.3576
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1383654114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.180237 +/- 0.00644243 @ 95% CL (81 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 0.180237 @ 95%CL (1 toyMC)
median expected limit: r < 0.180237 @ 95%CL (1 toyMC)
   68% expected band : 0.180237 < r < 0.180237
   95% expected band : 0.180237 < r < 0.180237
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1258118806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253766 +/- 0.00233002 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.253766 @ 95%CL (1 toyMC)
median expected limit: r < 0.253766 @ 95%CL (1 toyMC)
   68% expected band : 0.253766 < r < 0.253766
   95% expected band : 0.253766 < r < 0.253766
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -519432048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.196874 +/- 0.00343192 @ 95% CL (98 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.196874 @ 95%CL (1 toyMC)
median expected limit: r < 0.196874 @ 95%CL (1 toyMC)
   68% expected band : 0.196874 < r < 0.196874
   95% expected band : 0.196874 < r < 0.196874
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -265400419
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200376 +/- 0.00505301 @ 95% CL (96 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.200376 @ 95%CL (1 toyMC)
median expected limit: r < 0.200376 @ 95%CL (1 toyMC)
   68% expected band : 0.200376 < r < 0.200376
   95% expected band : 0.200376 < r < 0.200376
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 133412058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189997 +/- 0.00393344 @ 95% CL (91 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 0.189997 @ 95%CL (1 toyMC)
median expected limit: r < 0.189997 @ 95%CL (1 toyMC)
   68% expected band : 0.189997 < r < 0.189997
   95% expected band : 0.189997 < r < 0.189997
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 793639567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260706 +/- 0.00297552 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.260706 @ 95%CL (1 toyMC)
median expected limit: r < 0.260706 @ 95%CL (1 toyMC)
   68% expected band : 0.260706 < r < 0.260706
   95% expected band : 0.260706 < r < 0.260706
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2070349511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.266252 +/- 0.00329296 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.266252 @ 95%CL (1 toyMC)
median expected limit: r < 0.266252 @ 95%CL (1 toyMC)
   68% expected band : 0.266252 < r < 0.266252
   95% expected band : 0.266252 < r < 0.266252
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1472909385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25898 +/- 0.00312235 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.25898 @ 95%CL (1 toyMC)
median expected limit: r < 0.25898 @ 95%CL (1 toyMC)
   68% expected band : 0.25898 < r < 0.25898
   95% expected band : 0.25898 < r < 0.25898
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -801610157
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.215937 +/- 0.0040616 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.215937 @ 95%CL (1 toyMC)
median expected limit: r < 0.215937 @ 95%CL (1 toyMC)
   68% expected band : 0.215937 < r < 0.215937
   95% expected band : 0.215937 < r < 0.215937
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -158997800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312886 +/- 0.00210792 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.312886 @ 95%CL (1 toyMC)
median expected limit: r < 0.312886 @ 95%CL (1 toyMC)
   68% expected band : 0.312886 < r < 0.312886
   95% expected band : 0.312886 < r < 0.312886
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 94170159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.279294 +/- 0.00211242 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.279294 @ 95%CL (1 toyMC)
median expected limit: r < 0.279294 @ 95%CL (1 toyMC)
   68% expected band : 0.279294 < r < 0.279294
   95% expected band : 0.279294 < r < 0.279294
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1970334016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186585 +/- 0.00490968 @ 95% CL (89 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 0.186585 @ 95%CL (1 toyMC)
median expected limit: r < 0.186585 @ 95%CL (1 toyMC)
   68% expected band : 0.186585 < r < 0.186585
   95% expected band : 0.186585 < r < 0.186585
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1601229311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.21087 +/- 0.00349324 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.21087 @ 95%CL (1 toyMC)
median expected limit: r < 0.21087 @ 95%CL (1 toyMC)
   68% expected band : 0.21087 < r < 0.21087
   95% expected band : 0.21087 < r < 0.21087
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1948604235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.465499 +/- 0.00197596 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.465499 @ 95%CL (1 toyMC)
median expected limit: r < 0.465499 @ 95%CL (1 toyMC)
   68% expected band : 0.465499 < r < 0.465499
   95% expected band : 0.465499 < r < 0.465499
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 661331795
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26957 +/- 0.00180586 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.26957 @ 95%CL (1 toyMC)
median expected limit: r < 0.26957 @ 95%CL (1 toyMC)
   68% expected band : 0.26957 < r < 0.26957
   95% expected band : 0.26957 < r < 0.26957
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2032990516
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.1786 +/- 0.00508881 @ 95% CL (75 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 0.1786 @ 95%CL (1 toyMC)
median expected limit: r < 0.1786 @ 95%CL (1 toyMC)
   68% expected band : 0.1786 < r < 0.1786
   95% expected band : 0.1786 < r < 0.1786
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -835581325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.220347 +/- 0.00235968 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.220347 @ 95%CL (1 toyMC)
median expected limit: r < 0.220347 @ 95%CL (1 toyMC)
   68% expected band : 0.220347 < r < 0.220347
   95% expected band : 0.220347 < r < 0.220347
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1848234706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212141 +/- 0.0040131 @ 95% CL (97 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.212141 @ 95%CL (1 toyMC)
median expected limit: r < 0.212141 @ 95%CL (1 toyMC)
   68% expected band : 0.212141 < r < 0.212141
   95% expected band : 0.212141 < r < 0.212141
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1599228484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.227389 +/- 0.00285699 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.227389 @ 95%CL (1 toyMC)
median expected limit: r < 0.227389 @ 95%CL (1 toyMC)
   68% expected band : 0.227389 < r < 0.227389
   95% expected band : 0.227389 < r < 0.227389
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -229638823
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.249802 +/- 0.00253577 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.249802 @ 95%CL (1 toyMC)
median expected limit: r < 0.249802 @ 95%CL (1 toyMC)
   68% expected band : 0.249802 < r < 0.249802
   95% expected band : 0.249802 < r < 0.249802
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2125716209
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242431 +/- 0.00197929 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.242431 @ 95%CL (1 toyMC)
median expected limit: r < 0.242431 @ 95%CL (1 toyMC)
   68% expected band : 0.242431 < r < 0.242431
   95% expected band : 0.242431 < r < 0.242431
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2112359454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.19355 +/- 0.0032586 @ 95% CL (98 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.19355 @ 95%CL (1 toyMC)
median expected limit: r < 0.19355 @ 95%CL (1 toyMC)
   68% expected band : 0.19355 < r < 0.19355
   95% expected band : 0.19355 < r < 0.19355
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1195335234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195066 +/- 0.00404722 @ 95% CL (97 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.195066 @ 95%CL (1 toyMC)
median expected limit: r < 0.195066 @ 95%CL (1 toyMC)
   68% expected band : 0.195066 < r < 0.195066
   95% expected band : 0.195066 < r < 0.195066
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 172528678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263073 +/- 0.00246076 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.263073 @ 95%CL (1 toyMC)
median expected limit: r < 0.263073 @ 95%CL (1 toyMC)
   68% expected band : 0.263073 < r < 0.263073
   95% expected band : 0.263073 < r < 0.263073
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1137908290
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.395062 +/- 0.00254132 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.395062 @ 95%CL (1 toyMC)
median expected limit: r < 0.395062 @ 95%CL (1 toyMC)
   68% expected band : 0.395062 < r < 0.395062
   95% expected band : 0.395062 < r < 0.395062
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1853305885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.287817 +/- 0.00292772 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.287817 @ 95%CL (1 toyMC)
median expected limit: r < 0.287817 @ 95%CL (1 toyMC)
   68% expected band : 0.287817 < r < 0.287817
   95% expected band : 0.287817 < r < 0.287817
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1389640934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.3044 +/- 0.00296867 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.3044 @ 95%CL (1 toyMC)
median expected limit: r < 0.3044 @ 95%CL (1 toyMC)
   68% expected band : 0.3044 < r < 0.3044
   95% expected band : 0.3044 < r < 0.3044
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2031728614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325053 +/- 0.00251382 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.325053 @ 95%CL (1 toyMC)
median expected limit: r < 0.325053 @ 95%CL (1 toyMC)
   68% expected band : 0.325053 < r < 0.325053
   95% expected band : 0.325053 < r < 0.325053
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 138373330
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.340888 +/- 0.0027939 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.340888 @ 95%CL (1 toyMC)
median expected limit: r < 0.340888 @ 95%CL (1 toyMC)
   68% expected band : 0.340888 < r < 0.340888
   95% expected band : 0.340888 < r < 0.340888
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1018199846
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210905 +/- 0.00308857 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.210905 @ 95%CL (1 toyMC)
median expected limit: r < 0.210905 @ 95%CL (1 toyMC)
   68% expected band : 0.210905 < r < 0.210905
   95% expected band : 0.210905 < r < 0.210905
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1726747141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.343673 +/- 0.00253575 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.343673 @ 95%CL (1 toyMC)
median expected limit: r < 0.343673 @ 95%CL (1 toyMC)
   68% expected band : 0.343673 < r < 0.343673
   95% expected band : 0.343673 < r < 0.343673
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1555973792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240519 +/- 0.00270892 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.240519 @ 95%CL (1 toyMC)
median expected limit: r < 0.240519 @ 95%CL (1 toyMC)
   68% expected band : 0.240519 < r < 0.240519
   95% expected band : 0.240519 < r < 0.240519
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 461163020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260436 +/- 0.00261862 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.260436 @ 95%CL (1 toyMC)
median expected limit: r < 0.260436 @ 95%CL (1 toyMC)
   68% expected band : 0.260436 < r < 0.260436
   95% expected band : 0.260436 < r < 0.260436
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1839502573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20596 +/- 0.00351308 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.20596 @ 95%CL (1 toyMC)
median expected limit: r < 0.20596 @ 95%CL (1 toyMC)
   68% expected band : 0.20596 < r < 0.20596
   95% expected band : 0.20596 < r < 0.20596
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -207065126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.24678 +/- 0.00397056 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.24678 @ 95%CL (1 toyMC)
median expected limit: r < 0.24678 @ 95%CL (1 toyMC)
   68% expected band : 0.24678 < r < 0.24678
   95% expected band : 0.24678 < r < 0.24678
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1762318390
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.548319 +/- 0.00177844 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.548319 @ 95%CL (1 toyMC)
median expected limit: r < 0.548319 @ 95%CL (1 toyMC)
   68% expected band : 0.548319 < r < 0.548319
   95% expected band : 0.548319 < r < 0.548319
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1629828622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.19037 +/- 0.00521756 @ 95% CL (89 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 0.19037 @ 95%CL (1 toyMC)
median expected limit: r < 0.19037 @ 95%CL (1 toyMC)
   68% expected band : 0.19037 < r < 0.19037
   95% expected band : 0.19037 < r < 0.19037
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1174353298
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.412327 +/- 0.00245859 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.412327 @ 95%CL (1 toyMC)
median expected limit: r < 0.412327 @ 95%CL (1 toyMC)
   68% expected band : 0.412327 < r < 0.412327
   95% expected band : 0.412327 < r < 0.412327
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1755050756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.289272 +/- 0.00286391 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.289272 @ 95%CL (1 toyMC)
median expected limit: r < 0.289272 @ 95%CL (1 toyMC)
   68% expected band : 0.289272 < r < 0.289272
   95% expected band : 0.289272 < r < 0.289272
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1959482839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.384335 +/- 0.00205775 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.384335 @ 95%CL (1 toyMC)
median expected limit: r < 0.384335 @ 95%CL (1 toyMC)
   68% expected band : 0.384335 < r < 0.384335
   95% expected band : 0.384335 < r < 0.384335
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1738357120
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243684 +/- 0.00283281 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.243684 @ 95%CL (1 toyMC)
median expected limit: r < 0.243684 @ 95%CL (1 toyMC)
   68% expected band : 0.243684 < r < 0.243684
   95% expected band : 0.243684 < r < 0.243684
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 829483769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281741 +/- 0.00272498 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.281741 @ 95%CL (1 toyMC)
median expected limit: r < 0.281741 @ 95%CL (1 toyMC)
   68% expected band : 0.281741 < r < 0.281741
   95% expected band : 0.281741 < r < 0.281741
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1083708055
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.275534 +/- 0.00287841 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.275534 @ 95%CL (1 toyMC)
median expected limit: r < 0.275534 @ 95%CL (1 toyMC)
   68% expected band : 0.275534 < r < 0.275534
   95% expected band : 0.275534 < r < 0.275534
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -251702339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.498595 +/- 0.0017184 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.498595 @ 95%CL (1 toyMC)
median expected limit: r < 0.498595 @ 95%CL (1 toyMC)
   68% expected band : 0.498595 < r < 0.498595
   95% expected band : 0.498595 < r < 0.498595
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1961987661
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284565 +/- 0.00291032 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.284565 @ 95%CL (1 toyMC)
median expected limit: r < 0.284565 @ 95%CL (1 toyMC)
   68% expected band : 0.284565 < r < 0.284565
   95% expected band : 0.284565 < r < 0.284565
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1962392866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.430982 +/- 0.0022361 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.430982 @ 95%CL (1 toyMC)
median expected limit: r < 0.430982 @ 95%CL (1 toyMC)
   68% expected band : 0.430982 < r < 0.430982
   95% expected band : 0.430982 < r < 0.430982
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 101303699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.378742 +/- 0.00190099 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.378742 @ 95%CL (1 toyMC)
median expected limit: r < 0.378742 @ 95%CL (1 toyMC)
   68% expected band : 0.378742 < r < 0.378742
   95% expected band : 0.378742 < r < 0.378742
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1909966652
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.356202 +/- 0.00205523 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.356202 @ 95%CL (1 toyMC)
median expected limit: r < 0.356202 @ 95%CL (1 toyMC)
   68% expected band : 0.356202 < r < 0.356202
   95% expected band : 0.356202 < r < 0.356202
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1350587109
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224217 +/- 0.00320814 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.224217 @ 95%CL (1 toyMC)
median expected limit: r < 0.224217 @ 95%CL (1 toyMC)
   68% expected band : 0.224217 < r < 0.224217
   95% expected band : 0.224217 < r < 0.224217
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2136774077
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.352587 +/- 0.00239623 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.352587 @ 95%CL (1 toyMC)
median expected limit: r < 0.352587 @ 95%CL (1 toyMC)
   68% expected band : 0.352587 < r < 0.352587
   95% expected band : 0.352587 < r < 0.352587
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -482122876
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.487053 +/- 0.00246219 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.487053 @ 95%CL (1 toyMC)
median expected limit: r < 0.487053 @ 95%CL (1 toyMC)
   68% expected band : 0.487053 < r < 0.487053
   95% expected band : 0.487053 < r < 0.487053
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1462385647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231736 +/- 0.00343905 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.231736 @ 95%CL (1 toyMC)
median expected limit: r < 0.231736 @ 95%CL (1 toyMC)
   68% expected band : 0.231736 < r < 0.231736
   95% expected band : 0.231736 < r < 0.231736
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1628594635
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237037 +/- 0.00333065 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.237037 @ 95%CL (1 toyMC)
median expected limit: r < 0.237037 @ 95%CL (1 toyMC)
   68% expected band : 0.237037 < r < 0.237037
   95% expected band : 0.237037 < r < 0.237037
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 449193507
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234645 +/- 0.00307937 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.234645 @ 95%CL (1 toyMC)
median expected limit: r < 0.234645 @ 95%CL (1 toyMC)
   68% expected band : 0.234645 < r < 0.234645
   95% expected band : 0.234645 < r < 0.234645
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1842350154
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.394871 +/- 0.00262512 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.394871 @ 95%CL (1 toyMC)
median expected limit: r < 0.394871 @ 95%CL (1 toyMC)
   68% expected band : 0.394871 < r < 0.394871
   95% expected band : 0.394871 < r < 0.394871
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -901182200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243251 +/- 0.0024022 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.243251 @ 95%CL (1 toyMC)
median expected limit: r < 0.243251 @ 95%CL (1 toyMC)
   68% expected band : 0.243251 < r < 0.243251
   95% expected band : 0.243251 < r < 0.243251
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1289441168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204558 +/- 0.00447547 @ 95% CL (98 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.204558 @ 95%CL (1 toyMC)
median expected limit: r < 0.204558 @ 95%CL (1 toyMC)
   68% expected band : 0.204558 < r < 0.204558
   95% expected band : 0.204558 < r < 0.204558
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -860952296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.241086 +/- 0.00335196 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.241086 @ 95%CL (1 toyMC)
median expected limit: r < 0.241086 @ 95%CL (1 toyMC)
   68% expected band : 0.241086 < r < 0.241086
   95% expected band : 0.241086 < r < 0.241086
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -892738669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.457107 +/- 0.00236477 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.457107 @ 95%CL (1 toyMC)
median expected limit: r < 0.457107 @ 95%CL (1 toyMC)
   68% expected band : 0.457107 < r < 0.457107
   95% expected band : 0.457107 < r < 0.457107
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1710559594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387002 +/- 0.0021982 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.387002 @ 95%CL (1 toyMC)
median expected limit: r < 0.387002 @ 95%CL (1 toyMC)
   68% expected band : 0.387002 < r < 0.387002
   95% expected band : 0.387002 < r < 0.387002
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2027534913
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.271434 +/- 0.00259091 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.271434 @ 95%CL (1 toyMC)
median expected limit: r < 0.271434 @ 95%CL (1 toyMC)
   68% expected band : 0.271434 < r < 0.271434
   95% expected band : 0.271434 < r < 0.271434
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1501036499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189247 +/- 0.00642436 @ 95% CL (66 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 0.189247 @ 95%CL (1 toyMC)
median expected limit: r < 0.189247 @ 95%CL (1 toyMC)
   68% expected band : 0.189247 < r < 0.189247
   95% expected band : 0.189247 < r < 0.189247
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 829674145
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.197502 +/- 0.00382686 @ 95% CL (98 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.197502 @ 95%CL (1 toyMC)
median expected limit: r < 0.197502 @ 95%CL (1 toyMC)
   68% expected band : 0.197502 < r < 0.197502
   95% expected band : 0.197502 < r < 0.197502
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 507191754
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195552 +/- 0.00299838 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.195552 @ 95%CL (1 toyMC)
median expected limit: r < 0.195552 @ 95%CL (1 toyMC)
   68% expected band : 0.195552 < r < 0.195552
   95% expected band : 0.195552 < r < 0.195552
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2128360764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.218556 +/- 0.00335168 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.218556 @ 95%CL (1 toyMC)
median expected limit: r < 0.218556 @ 95%CL (1 toyMC)
   68% expected band : 0.218556 < r < 0.218556
   95% expected band : 0.218556 < r < 0.218556
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2083670325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.225684 +/- 0.0026103 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.225684 @ 95%CL (1 toyMC)
median expected limit: r < 0.225684 @ 95%CL (1 toyMC)
   68% expected band : 0.225684 < r < 0.225684
   95% expected band : 0.225684 < r < 0.225684
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1322243336
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248155 +/- 0.00346682 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.248155 @ 95%CL (1 toyMC)
median expected limit: r < 0.248155 @ 95%CL (1 toyMC)
   68% expected band : 0.248155 < r < 0.248155
   95% expected band : 0.248155 < r < 0.248155
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 260527544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242764 +/- 0.00290003 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.242764 @ 95%CL (1 toyMC)
median expected limit: r < 0.242764 @ 95%CL (1 toyMC)
   68% expected band : 0.242764 < r < 0.242764
   95% expected band : 0.242764 < r < 0.242764
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1524400872
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335102 +/- 0.00218615 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.335102 @ 95%CL (1 toyMC)
median expected limit: r < 0.335102 @ 95%CL (1 toyMC)
   68% expected band : 0.335102 < r < 0.335102
   95% expected band : 0.335102 < r < 0.335102
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 328134558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.254474 +/- 0.00299067 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.254474 @ 95%CL (1 toyMC)
median expected limit: r < 0.254474 @ 95%CL (1 toyMC)
   68% expected band : 0.254474 < r < 0.254474
   95% expected band : 0.254474 < r < 0.254474
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1337970097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206751 +/- 0.00299703 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.206751 @ 95%CL (1 toyMC)
median expected limit: r < 0.206751 @ 95%CL (1 toyMC)
   68% expected band : 0.206751 < r < 0.206751
   95% expected band : 0.206751 < r < 0.206751
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -753439054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.245835 +/- 0.00329487 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.245835 @ 95%CL (1 toyMC)
median expected limit: r < 0.245835 @ 95%CL (1 toyMC)
   68% expected band : 0.245835 < r < 0.245835
   95% expected band : 0.245835 < r < 0.245835
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1378277486
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246689 +/- 0.00295034 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.246689 @ 95%CL (1 toyMC)
median expected limit: r < 0.246689 @ 95%CL (1 toyMC)
   68% expected band : 0.246689 < r < 0.246689
   95% expected band : 0.246689 < r < 0.246689
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1101348063
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.205501 +/- 0.00429841 @ 95% CL (95 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.205501 @ 95%CL (1 toyMC)
median expected limit: r < 0.205501 @ 95%CL (1 toyMC)
   68% expected band : 0.205501 < r < 0.205501
   95% expected band : 0.205501 < r < 0.205501
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -656575738
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.441002 +/- 0.00215192 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.441002 @ 95%CL (1 toyMC)
median expected limit: r < 0.441002 @ 95%CL (1 toyMC)
   68% expected band : 0.441002 < r < 0.441002
   95% expected band : 0.441002 < r < 0.441002
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1797540225
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.239337 +/- 0.00291486 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.239337 @ 95%CL (1 toyMC)
median expected limit: r < 0.239337 @ 95%CL (1 toyMC)
   68% expected band : 0.239337 < r < 0.239337
   95% expected band : 0.239337 < r < 0.239337
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -344912161
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255747 +/- 0.00279974 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.255747 @ 95%CL (1 toyMC)
median expected limit: r < 0.255747 @ 95%CL (1 toyMC)
   68% expected band : 0.255747 < r < 0.255747
   95% expected band : 0.255747 < r < 0.255747
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1715121759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.319544 +/- 0.00197486 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.319544 @ 95%CL (1 toyMC)
median expected limit: r < 0.319544 @ 95%CL (1 toyMC)
   68% expected band : 0.319544 < r < 0.319544
   95% expected band : 0.319544 < r < 0.319544
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 471854411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.349335 +/- 0.00182425 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.349335 @ 95%CL (1 toyMC)
median expected limit: r < 0.349335 @ 95%CL (1 toyMC)
   68% expected band : 0.349335 < r < 0.349335
   95% expected band : 0.349335 < r < 0.349335
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1136284070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.446552 +/- 0.00203553 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.446552 @ 95%CL (1 toyMC)
median expected limit: r < 0.446552 @ 95%CL (1 toyMC)
   68% expected band : 0.446552 < r < 0.446552
   95% expected band : 0.446552 < r < 0.446552
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1592674672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.245105 +/- 0.00263641 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.245105 @ 95%CL (1 toyMC)
median expected limit: r < 0.245105 @ 95%CL (1 toyMC)
   68% expected band : 0.245105 < r < 0.245105
   95% expected band : 0.245105 < r < 0.245105
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -41452881
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.215349 +/- 0.00285832 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.215349 @ 95%CL (1 toyMC)
median expected limit: r < 0.215349 @ 95%CL (1 toyMC)
   68% expected band : 0.215349 < r < 0.215349
   95% expected band : 0.215349 < r < 0.215349
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -313260833
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236741 +/- 0.00229034 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.236741 @ 95%CL (1 toyMC)
median expected limit: r < 0.236741 @ 95%CL (1 toyMC)
   68% expected band : 0.236741 < r < 0.236741
   95% expected band : 0.236741 < r < 0.236741
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 602624737
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272773 +/- 0.0031726 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.272773 @ 95%CL (1 toyMC)
median expected limit: r < 0.272773 @ 95%CL (1 toyMC)
   68% expected band : 0.272773 < r < 0.272773
   95% expected band : 0.272773 < r < 0.272773
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1721765414
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.317536 +/- 0.0020563 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.317536 @ 95%CL (1 toyMC)
median expected limit: r < 0.317536 @ 95%CL (1 toyMC)
   68% expected band : 0.317536 < r < 0.317536
   95% expected band : 0.317536 < r < 0.317536
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -496676335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.519836 +/- 0.00218072 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.519836 @ 95%CL (1 toyMC)
median expected limit: r < 0.519836 @ 95%CL (1 toyMC)
   68% expected band : 0.519836 < r < 0.519836
   95% expected band : 0.519836 < r < 0.519836
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1410049377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.299637 +/- 0.00203274 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.299637 @ 95%CL (1 toyMC)
median expected limit: r < 0.299637 @ 95%CL (1 toyMC)
   68% expected band : 0.299637 < r < 0.299637
   95% expected band : 0.299637 < r < 0.299637
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1633861140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.12751 +/- 1.65251 @ 95% CL (29 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 5.12751 @ 95%CL (1 toyMC)
median expected limit: r < 5.12751 @ 95%CL (1 toyMC)
   68% expected band : 5.12751 < r < 5.12751
   95% expected band : 5.12751 < r < 5.12751
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1229367144
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.214279 +/- 0.003357 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.214279 @ 95%CL (1 toyMC)
median expected limit: r < 0.214279 @ 95%CL (1 toyMC)
   68% expected band : 0.214279 < r < 0.214279
   95% expected band : 0.214279 < r < 0.214279
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -311032891
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.220842 +/- 0.00381894 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.220842 @ 95%CL (1 toyMC)
median expected limit: r < 0.220842 @ 95%CL (1 toyMC)
   68% expected band : 0.220842 < r < 0.220842
   95% expected band : 0.220842 < r < 0.220842
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1629527828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.256692 +/- 0.00239784 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.256692 @ 95%CL (1 toyMC)
median expected limit: r < 0.256692 @ 95%CL (1 toyMC)
   68% expected band : 0.256692 < r < 0.256692
   95% expected band : 0.256692 < r < 0.256692
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1117557395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.292965 +/- 0.00253484 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.292965 @ 95%CL (1 toyMC)
median expected limit: r < 0.292965 @ 95%CL (1 toyMC)
   68% expected band : 0.292965 < r < 0.292965
   95% expected band : 0.292965 < r < 0.292965
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1025910686
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335946 +/- 0.00215556 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.335946 @ 95%CL (1 toyMC)
median expected limit: r < 0.335946 @ 95%CL (1 toyMC)
   68% expected band : 0.335946 < r < 0.335946
   95% expected band : 0.335946 < r < 0.335946
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -362225939
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288821 +/- 0.0025306 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.288821 @ 95%CL (1 toyMC)
median expected limit: r < 0.288821 @ 95%CL (1 toyMC)
   68% expected band : 0.288821 < r < 0.288821
   95% expected band : 0.288821 < r < 0.288821
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 751929819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.184323 +/- 0.00507887 @ 95% CL (84 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 0.184323 @ 95%CL (1 toyMC)
median expected limit: r < 0.184323 @ 95%CL (1 toyMC)
   68% expected band : 0.184323 < r < 0.184323
   95% expected band : 0.184323 < r < 0.184323
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1025910686.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1137908290.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1174353298.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1195335234.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1258118806.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1289441168.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1322243336.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1383654114.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1410049377.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1466833388.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1501036499.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1555973792.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-158997800.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1599228484.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1629527828.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1629828622.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1715121759.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1746921766.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1755050756.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1797540225.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1839502573.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1842350154.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1853305885.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-1948604235.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-1959482839.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1962392866.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-1970334016.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-2031728614.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-2032990516.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-207065126.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-2083670325.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-2136774077.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-229638823.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-251702339.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-265400419.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-311032891.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-313260833.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-344912161.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-362225939.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-41452881.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-482122876.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-496676335.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-519432048.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-656575738.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-753439054.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-777655924.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-801610157.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-835581325.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-860952296.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.-892738669.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.-901182200.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.101303699.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1018199846.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1083708055.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1101348063.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1117557395.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1136284070.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1229367144.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.133412058.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1337970097.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1350587109.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1378277486.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.138373330.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1389640934.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1462385647.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1472909385.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1524400872.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.156935199.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1592674672.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1601229311.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1628594635.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1633861140.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.16849858.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1710559594.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1721765414.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.172528678.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.1726747141.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.1738357120.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.1762318390.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.1848234706.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.1909966652.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.1961987661.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.2027534913.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.2070349511.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.2112359454.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.2125716209.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.2128360764.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.260527544.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.328134558.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.449193507.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.461163020.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.471854411.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.507191754.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.602624737.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.661331795.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.751929819.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.793639567.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.829483769.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.829674145.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.94170159.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 578786354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.175236 +/- 0.00523257 @ 95% CL (90 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 0.175236 @ 95%CL (1 toyMC)
median expected limit: r < 0.175236 @ 95%CL (1 toyMC)
   68% expected band : 0.175236 < r < 0.175236
   95% expected band : 0.175236 < r < 0.175236
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 91224147
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.333001 +/- 0.00218589 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.333001 @ 95%CL (1 toyMC)
median expected limit: r < 0.333001 @ 95%CL (1 toyMC)
   68% expected band : 0.333001 < r < 0.333001
   95% expected band : 0.333001 < r < 0.333001
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1119046716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.214526 +/- 0.00322076 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.214526 @ 95%CL (1 toyMC)
median expected limit: r < 0.214526 @ 95%CL (1 toyMC)
   68% expected band : 0.214526 < r < 0.214526
   95% expected band : 0.214526 < r < 0.214526
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 762778458
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.174226 +/- 0.00516829 @ 95% CL (84 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 0.174226 @ 95%CL (1 toyMC)
median expected limit: r < 0.174226 @ 95%CL (1 toyMC)
   68% expected band : 0.174226 < r < 0.174226
   95% expected band : 0.174226 < r < 0.174226
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1861671051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228338 +/- 0.00294939 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.228338 @ 95%CL (1 toyMC)
median expected limit: r < 0.228338 @ 95%CL (1 toyMC)
   68% expected band : 0.228338 < r < 0.228338
   95% expected band : 0.228338 < r < 0.228338
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2036016211
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224984 +/- 0.00338258 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.224984 @ 95%CL (1 toyMC)
median expected limit: r < 0.224984 @ 95%CL (1 toyMC)
   68% expected band : 0.224984 < r < 0.224984
   95% expected band : 0.224984 < r < 0.224984
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1081686965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247178 +/- 0.00275602 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.247178 @ 95%CL (1 toyMC)
median expected limit: r < 0.247178 @ 95%CL (1 toyMC)
   68% expected band : 0.247178 < r < 0.247178
   95% expected band : 0.247178 < r < 0.247178
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1211429424
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.269454 +/- 0.00245043 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.269454 @ 95%CL (1 toyMC)
median expected limit: r < 0.269454 @ 95%CL (1 toyMC)
   68% expected band : 0.269454 < r < 0.269454
   95% expected band : 0.269454 < r < 0.269454
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 705963240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31115 +/- 0.00237935 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.31115 @ 95%CL (1 toyMC)
median expected limit: r < 0.31115 @ 95%CL (1 toyMC)
   68% expected band : 0.31115 < r < 0.31115
   95% expected band : 0.31115 < r < 0.31115
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -727004751
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234735 +/- 0.00285031 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.234735 @ 95%CL (1 toyMC)
median expected limit: r < 0.234735 @ 95%CL (1 toyMC)
   68% expected band : 0.234735 < r < 0.234735
   95% expected band : 0.234735 < r < 0.234735
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 857558672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246653 +/- 0.00282455 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.246653 @ 95%CL (1 toyMC)
median expected limit: r < 0.246653 @ 95%CL (1 toyMC)
   68% expected band : 0.246653 < r < 0.246653
   95% expected band : 0.246653 < r < 0.246653
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1749625958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.88573 +/- 1.31955 @ 95% CL (43 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 4.88573 @ 95%CL (1 toyMC)
median expected limit: r < 4.88573 @ 95%CL (1 toyMC)
   68% expected band : 4.88573 < r < 4.88573
   95% expected band : 4.88573 < r < 4.88573
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1965394508
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.470077 +/- 0.00217622 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.470077 @ 95%CL (1 toyMC)
median expected limit: r < 0.470077 @ 95%CL (1 toyMC)
   68% expected band : 0.470077 < r < 0.470077
   95% expected band : 0.470077 < r < 0.470077
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1846994956
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234957 +/- 0.00321337 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.234957 @ 95%CL (1 toyMC)
median expected limit: r < 0.234957 @ 95%CL (1 toyMC)
   68% expected band : 0.234957 < r < 0.234957
   95% expected band : 0.234957 < r < 0.234957
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 831749021
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244354 +/- 0.00272778 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.244354 @ 95%CL (1 toyMC)
median expected limit: r < 0.244354 @ 95%CL (1 toyMC)
   68% expected band : 0.244354 < r < 0.244354
   95% expected band : 0.244354 < r < 0.244354
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -452360045
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.266321 +/- 0.00229929 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.266321 @ 95%CL (1 toyMC)
median expected limit: r < 0.266321 @ 95%CL (1 toyMC)
   68% expected band : 0.266321 < r < 0.266321
   95% expected band : 0.266321 < r < 0.266321
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 232938706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.273268 +/- 0.00291586 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.273268 @ 95%CL (1 toyMC)
median expected limit: r < 0.273268 @ 95%CL (1 toyMC)
   68% expected band : 0.273268 < r < 0.273268
   95% expected band : 0.273268 < r < 0.273268
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 208976984
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.185246 +/- 0.00330244 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.185246 @ 95%CL (1 toyMC)
median expected limit: r < 0.185246 @ 95%CL (1 toyMC)
   68% expected band : 0.185246 < r < 0.185246
   95% expected band : 0.185246 < r < 0.185246
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2011074729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.404069 +/- 0.0030459 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.404069 @ 95%CL (1 toyMC)
median expected limit: r < 0.404069 @ 95%CL (1 toyMC)
   68% expected band : 0.404069 < r < 0.404069
   95% expected band : 0.404069 < r < 0.404069
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -226311082
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330503 +/- 0.0030813 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.330503 @ 95%CL (1 toyMC)
median expected limit: r < 0.330503 @ 95%CL (1 toyMC)
   68% expected band : 0.330503 < r < 0.330503
   95% expected band : 0.330503 < r < 0.330503
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -28983405
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.503215 +/- 0.00232848 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.503215 @ 95%CL (1 toyMC)
median expected limit: r < 0.503215 @ 95%CL (1 toyMC)
   68% expected band : 0.503215 < r < 0.503215
   95% expected band : 0.503215 < r < 0.503215
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1444837117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263173 +/- 0.00291135 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.263173 @ 95%CL (1 toyMC)
median expected limit: r < 0.263173 @ 95%CL (1 toyMC)
   68% expected band : 0.263173 < r < 0.263173
   95% expected band : 0.263173 < r < 0.263173
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1095497036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.273795 +/- 0.00273899 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.273795 @ 95%CL (1 toyMC)
median expected limit: r < 0.273795 @ 95%CL (1 toyMC)
   68% expected band : 0.273795 < r < 0.273795
   95% expected band : 0.273795 < r < 0.273795
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -343540393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325066 +/- 0.00275648 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.325066 @ 95%CL (1 toyMC)
median expected limit: r < 0.325066 @ 95%CL (1 toyMC)
   68% expected band : 0.325066 < r < 0.325066
   95% expected band : 0.325066 < r < 0.325066
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 145521439
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332372 +/- 0.00249927 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.332372 @ 95%CL (1 toyMC)
median expected limit: r < 0.332372 @ 95%CL (1 toyMC)
   68% expected band : 0.332372 < r < 0.332372
   95% expected band : 0.332372 < r < 0.332372
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 790705570
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.173705 +/- 0.00559756 @ 95% CL (81 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 0.173705 @ 95%CL (1 toyMC)
median expected limit: r < 0.173705 @ 95%CL (1 toyMC)
   68% expected band : 0.173705 < r < 0.173705
   95% expected band : 0.173705 < r < 0.173705
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1157295850
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.482012 +/- 0.00183664 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.482012 @ 95%CL (1 toyMC)
median expected limit: r < 0.482012 @ 95%CL (1 toyMC)
   68% expected band : 0.482012 < r < 0.482012
   95% expected band : 0.482012 < r < 0.482012
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -790302616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.3523 +/- 0.00320279 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.3523 @ 95%CL (1 toyMC)
median expected limit: r < 0.3523 @ 95%CL (1 toyMC)
   68% expected band : 0.3523 < r < 0.3523
   95% expected band : 0.3523 < r < 0.3523
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1268223012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.351221 +/- 0.00232538 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.351221 @ 95%CL (1 toyMC)
median expected limit: r < 0.351221 @ 95%CL (1 toyMC)
   68% expected band : 0.351221 < r < 0.351221
   95% expected band : 0.351221 < r < 0.351221
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -745355170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.432288 +/- 0.00259033 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.432288 @ 95%CL (1 toyMC)
median expected limit: r < 0.432288 @ 95%CL (1 toyMC)
   68% expected band : 0.432288 < r < 0.432288
   95% expected band : 0.432288 < r < 0.432288
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1681145736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270926 +/- 0.00290902 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.270926 @ 95%CL (1 toyMC)
median expected limit: r < 0.270926 @ 95%CL (1 toyMC)
   68% expected band : 0.270926 < r < 0.270926
   95% expected band : 0.270926 < r < 0.270926
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -718658411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189284 +/- 0.0045633 @ 95% CL (94 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.189284 @ 95%CL (1 toyMC)
median expected limit: r < 0.189284 @ 95%CL (1 toyMC)
   68% expected band : 0.189284 < r < 0.189284
   95% expected band : 0.189284 < r < 0.189284
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 380734098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.336911 +/- 0.00218924 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.336911 @ 95%CL (1 toyMC)
median expected limit: r < 0.336911 @ 95%CL (1 toyMC)
   68% expected band : 0.336911 < r < 0.336911
   95% expected band : 0.336911 < r < 0.336911
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -729548679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235852 +/- 0.00294439 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.235852 @ 95%CL (1 toyMC)
median expected limit: r < 0.235852 @ 95%CL (1 toyMC)
   68% expected band : 0.235852 < r < 0.235852
   95% expected band : 0.235852 < r < 0.235852
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1251474334
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.21909 +/- 0.00314909 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.21909 @ 95%CL (1 toyMC)
median expected limit: r < 0.21909 @ 95%CL (1 toyMC)
   68% expected band : 0.21909 < r < 0.21909
   95% expected band : 0.21909 < r < 0.21909
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1525887086
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.391995 +/- 0.00136772 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.391995 @ 95%CL (1 toyMC)
median expected limit: r < 0.391995 @ 95%CL (1 toyMC)
   68% expected band : 0.391995 < r < 0.391995
   95% expected band : 0.391995 < r < 0.391995
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -219692011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229175 +/- 0.00245579 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.229175 @ 95%CL (1 toyMC)
median expected limit: r < 0.229175 @ 95%CL (1 toyMC)
   68% expected band : 0.229175 < r < 0.229175
   95% expected band : 0.229175 < r < 0.229175
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -72671595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.267945 +/- 0.00313271 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.267945 @ 95%CL (1 toyMC)
median expected limit: r < 0.267945 @ 95%CL (1 toyMC)
   68% expected band : 0.267945 < r < 0.267945
   95% expected band : 0.267945 < r < 0.267945
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2109688814
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.259265 +/- 0.00272536 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.259265 @ 95%CL (1 toyMC)
median expected limit: r < 0.259265 @ 95%CL (1 toyMC)
   68% expected band : 0.259265 < r < 0.259265
   95% expected band : 0.259265 < r < 0.259265
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 237463519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.256794 +/- 0.00188467 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.256794 @ 95%CL (1 toyMC)
median expected limit: r < 0.256794 @ 95%CL (1 toyMC)
   68% expected band : 0.256794 < r < 0.256794
   95% expected band : 0.256794 < r < 0.256794
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1958619630
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189554 +/- 0.00385041 @ 95% CL (98 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.189554 @ 95%CL (1 toyMC)
median expected limit: r < 0.189554 @ 95%CL (1 toyMC)
   68% expected band : 0.189554 < r < 0.189554
   95% expected band : 0.189554 < r < 0.189554
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -549344333
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.373893 +/- 0.00223174 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.373893 @ 95%CL (1 toyMC)
median expected limit: r < 0.373893 @ 95%CL (1 toyMC)
   68% expected band : 0.373893 < r < 0.373893
   95% expected band : 0.373893 < r < 0.373893
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1509326292
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.333904 +/- 0.00187504 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.333904 @ 95%CL (1 toyMC)
median expected limit: r < 0.333904 @ 95%CL (1 toyMC)
   68% expected band : 0.333904 < r < 0.333904
   95% expected band : 0.333904 < r < 0.333904
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1218925061
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244834 +/- 0.00335871 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.244834 @ 95%CL (1 toyMC)
median expected limit: r < 0.244834 @ 95%CL (1 toyMC)
   68% expected band : 0.244834 < r < 0.244834
   95% expected band : 0.244834 < r < 0.244834
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -228214997
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268784 +/- 0.00281798 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.268784 @ 95%CL (1 toyMC)
median expected limit: r < 0.268784 @ 95%CL (1 toyMC)
   68% expected band : 0.268784 < r < 0.268784
   95% expected band : 0.268784 < r < 0.268784
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -432728924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216019 +/- 0.00363183 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.216019 @ 95%CL (1 toyMC)
median expected limit: r < 0.216019 @ 95%CL (1 toyMC)
   68% expected band : 0.216019 < r < 0.216019
   95% expected band : 0.216019 < r < 0.216019
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1688735757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22315 +/- 0.00275405 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.22315 @ 95%CL (1 toyMC)
median expected limit: r < 0.22315 @ 95%CL (1 toyMC)
   68% expected band : 0.22315 < r < 0.22315
   95% expected band : 0.22315 < r < 0.22315
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 966914342
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234315 +/- 0.0025784 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.234315 @ 95%CL (1 toyMC)
median expected limit: r < 0.234315 @ 95%CL (1 toyMC)
   68% expected band : 0.234315 < r < 0.234315
   95% expected band : 0.234315 < r < 0.234315
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2011414121
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240533 +/- 0.00346792 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.240533 @ 95%CL (1 toyMC)
median expected limit: r < 0.240533 @ 95%CL (1 toyMC)
   68% expected band : 0.240533 < r < 0.240533
   95% expected band : 0.240533 < r < 0.240533
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1358698073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.187906 +/- 0.00437321 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.187906 @ 95%CL (1 toyMC)
median expected limit: r < 0.187906 @ 95%CL (1 toyMC)
   68% expected band : 0.187906 < r < 0.187906
   95% expected band : 0.187906 < r < 0.187906
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1636276464
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213739 +/- 0.00353884 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.213739 @ 95%CL (1 toyMC)
median expected limit: r < 0.213739 @ 95%CL (1 toyMC)
   68% expected band : 0.213739 < r < 0.213739
   95% expected band : 0.213739 < r < 0.213739
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1822500782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.254122 +/- 0.00300484 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.254122 @ 95%CL (1 toyMC)
median expected limit: r < 0.254122 @ 95%CL (1 toyMC)
   68% expected band : 0.254122 < r < 0.254122
   95% expected band : 0.254122 < r < 0.254122
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -300038677
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.337095 +/- 0.00300915 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.337095 @ 95%CL (1 toyMC)
median expected limit: r < 0.337095 @ 95%CL (1 toyMC)
   68% expected band : 0.337095 < r < 0.337095
   95% expected band : 0.337095 < r < 0.337095
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -81774136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330282 +/- 0.00226878 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.330282 @ 95%CL (1 toyMC)
median expected limit: r < 0.330282 @ 95%CL (1 toyMC)
   68% expected band : 0.330282 < r < 0.330282
   95% expected band : 0.330282 < r < 0.330282
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2104338774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.377607 +/- 0.00202567 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.377607 @ 95%CL (1 toyMC)
median expected limit: r < 0.377607 @ 95%CL (1 toyMC)
   68% expected band : 0.377607 < r < 0.377607
   95% expected band : 0.377607 < r < 0.377607
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1857816714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.377832 +/- 0.0020168 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.377832 @ 95%CL (1 toyMC)
median expected limit: r < 0.377832 @ 95%CL (1 toyMC)
   68% expected band : 0.377832 < r < 0.377832
   95% expected band : 0.377832 < r < 0.377832
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1677444103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221025 +/- 0.0034342 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.221025 @ 95%CL (1 toyMC)
median expected limit: r < 0.221025 @ 95%CL (1 toyMC)
   68% expected band : 0.221025 < r < 0.221025
   95% expected band : 0.221025 < r < 0.221025
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 515623732
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.182271 +/- 0.00484832 @ 95% CL (96 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.182271 @ 95%CL (1 toyMC)
median expected limit: r < 0.182271 @ 95%CL (1 toyMC)
   68% expected band : 0.182271 < r < 0.182271
   95% expected band : 0.182271 < r < 0.182271
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 208369554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282747 +/- 0.00283404 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.282747 @ 95%CL (1 toyMC)
median expected limit: r < 0.282747 @ 95%CL (1 toyMC)
   68% expected band : 0.282747 < r < 0.282747
   95% expected band : 0.282747 < r < 0.282747
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1068065961
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.430161 +/- 0.00279151 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.430161 @ 95%CL (1 toyMC)
median expected limit: r < 0.430161 @ 95%CL (1 toyMC)
   68% expected band : 0.430161 < r < 0.430161
   95% expected band : 0.430161 < r < 0.430161
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1206611056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.1825 +/- 0.00383552 @ 95% CL (93 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.1825 @ 95%CL (1 toyMC)
median expected limit: r < 0.1825 @ 95%CL (1 toyMC)
   68% expected band : 0.1825 < r < 0.1825
   95% expected band : 0.1825 < r < 0.1825
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 547174580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224438 +/- 0.00342671 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.224438 @ 95%CL (1 toyMC)
median expected limit: r < 0.224438 @ 95%CL (1 toyMC)
   68% expected band : 0.224438 < r < 0.224438
   95% expected band : 0.224438 < r < 0.224438
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1408173448
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31576 +/- 0.0023148 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.31576 @ 95%CL (1 toyMC)
median expected limit: r < 0.31576 @ 95%CL (1 toyMC)
   68% expected band : 0.31576 < r < 0.31576
   95% expected band : 0.31576 < r < 0.31576
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 666351661
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.198085 +/- 0.00424127 @ 95% CL (98 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.198085 @ 95%CL (1 toyMC)
median expected limit: r < 0.198085 @ 95%CL (1 toyMC)
   68% expected band : 0.198085 < r < 0.198085
   95% expected band : 0.198085 < r < 0.198085
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 511826150
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206543 +/- 0.00312811 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.206543 @ 95%CL (1 toyMC)
median expected limit: r < 0.206543 @ 95%CL (1 toyMC)
   68% expected band : 0.206543 < r < 0.206543
   95% expected band : 0.206543 < r < 0.206543
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1834647890
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22962 +/- 0.00277492 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.22962 @ 95%CL (1 toyMC)
median expected limit: r < 0.22962 @ 95%CL (1 toyMC)
   68% expected band : 0.22962 < r < 0.22962
   95% expected band : 0.22962 < r < 0.22962
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 321703039
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208129 +/- 0.00304421 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.208129 @ 95%CL (1 toyMC)
median expected limit: r < 0.208129 @ 95%CL (1 toyMC)
   68% expected band : 0.208129 < r < 0.208129
   95% expected band : 0.208129 < r < 0.208129
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1978696811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.418025 +/- 0.00219202 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.418025 @ 95%CL (1 toyMC)
median expected limit: r < 0.418025 @ 95%CL (1 toyMC)
   68% expected band : 0.418025 < r < 0.418025
   95% expected band : 0.418025 < r < 0.418025
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1237032450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.176322 +/- 0.00649997 @ 95% CL (83 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 0.176322 @ 95%CL (1 toyMC)
median expected limit: r < 0.176322 @ 95%CL (1 toyMC)
   68% expected band : 0.176322 < r < 0.176322
   95% expected band : 0.176322 < r < 0.176322
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1136802783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.209936 +/- 0.00315952 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.209936 @ 95%CL (1 toyMC)
median expected limit: r < 0.209936 @ 95%CL (1 toyMC)
   68% expected band : 0.209936 < r < 0.209936
   95% expected band : 0.209936 < r < 0.209936
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 205623396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186533 +/- 0.00491869 @ 95% CL (93 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.186533 @ 95%CL (1 toyMC)
median expected limit: r < 0.186533 @ 95%CL (1 toyMC)
   68% expected band : 0.186533 < r < 0.186533
   95% expected band : 0.186533 < r < 0.186533
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 8822529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20085 +/- 0.00352871 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.20085 @ 95%CL (1 toyMC)
median expected limit: r < 0.20085 @ 95%CL (1 toyMC)
   68% expected band : 0.20085 < r < 0.20085
   95% expected band : 0.20085 < r < 0.20085
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2065333293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25478 +/- 0.00253706 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.25478 @ 95%CL (1 toyMC)
median expected limit: r < 0.25478 @ 95%CL (1 toyMC)
   68% expected band : 0.25478 < r < 0.25478
   95% expected band : 0.25478 < r < 0.25478
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -45963807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22403 +/- 0.00370354 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.22403 @ 95%CL (1 toyMC)
median expected limit: r < 0.22403 @ 95%CL (1 toyMC)
   68% expected band : 0.22403 < r < 0.22403
   95% expected band : 0.22403 < r < 0.22403
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1779562566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288248 +/- 0.00289502 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.288248 @ 95%CL (1 toyMC)
median expected limit: r < 0.288248 @ 95%CL (1 toyMC)
   68% expected band : 0.288248 < r < 0.288248
   95% expected band : 0.288248 < r < 0.288248
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1233042865
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229532 +/- 0.00313161 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.229532 @ 95%CL (1 toyMC)
median expected limit: r < 0.229532 @ 95%CL (1 toyMC)
   68% expected band : 0.229532 < r < 0.229532
   95% expected band : 0.229532 < r < 0.229532
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1127705936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.185952 +/- 0.00346505 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.185952 @ 95%CL (1 toyMC)
median expected limit: r < 0.185952 @ 95%CL (1 toyMC)
   68% expected band : 0.185952 < r < 0.185952
   95% expected band : 0.185952 < r < 0.185952
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1973167633
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.188512 +/- 0.00409417 @ 95% CL (93 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.188512 @ 95%CL (1 toyMC)
median expected limit: r < 0.188512 @ 95%CL (1 toyMC)
   68% expected band : 0.188512 < r < 0.188512
   95% expected band : 0.188512 < r < 0.188512
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 579231217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.438987 +/- 0.00224384 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.438987 @ 95%CL (1 toyMC)
median expected limit: r < 0.438987 @ 95%CL (1 toyMC)
   68% expected band : 0.438987 < r < 0.438987
   95% expected band : 0.438987 < r < 0.438987
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 778293102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.351795 +/- 0.00197408 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.351795 @ 95%CL (1 toyMC)
median expected limit: r < 0.351795 @ 95%CL (1 toyMC)
   68% expected band : 0.351795 < r < 0.351795
   95% expected band : 0.351795 < r < 0.351795
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1118926043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194619 +/- 0.00383918 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.194619 @ 95%CL (1 toyMC)
median expected limit: r < 0.194619 @ 95%CL (1 toyMC)
   68% expected band : 0.194619 < r < 0.194619
   95% expected band : 0.194619 < r < 0.194619
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 862745135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.363293 +/- 0.00235775 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.363293 @ 95%CL (1 toyMC)
median expected limit: r < 0.363293 @ 95%CL (1 toyMC)
   68% expected band : 0.363293 < r < 0.363293
   95% expected band : 0.363293 < r < 0.363293
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1664146759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270116 +/- 0.00244489 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.270116 @ 95%CL (1 toyMC)
median expected limit: r < 0.270116 @ 95%CL (1 toyMC)
   68% expected band : 0.270116 < r < 0.270116
   95% expected band : 0.270116 < r < 0.270116
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 751609115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232786 +/- 0.00338194 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.232786 @ 95%CL (1 toyMC)
median expected limit: r < 0.232786 @ 95%CL (1 toyMC)
   68% expected band : 0.232786 < r < 0.232786
   95% expected band : 0.232786 < r < 0.232786
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1591534511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.233878 +/- 0.00288582 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.233878 @ 95%CL (1 toyMC)
median expected limit: r < 0.233878 @ 95%CL (1 toyMC)
   68% expected band : 0.233878 < r < 0.233878
   95% expected band : 0.233878 < r < 0.233878
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2030571309
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229831 +/- 0.00319213 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.229831 @ 95%CL (1 toyMC)
median expected limit: r < 0.229831 @ 95%CL (1 toyMC)
   68% expected band : 0.229831 < r < 0.229831
   95% expected band : 0.229831 < r < 0.229831
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -842559510
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189091 +/- 0.00491347 @ 95% CL (88 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.189091 @ 95%CL (1 toyMC)
median expected limit: r < 0.189091 @ 95%CL (1 toyMC)
   68% expected band : 0.189091 < r < 0.189091
   95% expected band : 0.189091 < r < 0.189091
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -394229846
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.465473 +/- 0.00240665 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.465473 @ 95%CL (1 toyMC)
median expected limit: r < 0.465473 @ 95%CL (1 toyMC)
   68% expected band : 0.465473 < r < 0.465473
   95% expected band : 0.465473 < r < 0.465473
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1587909529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195993 +/- 0.00249082 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.195993 @ 95%CL (1 toyMC)
median expected limit: r < 0.195993 @ 95%CL (1 toyMC)
   68% expected band : 0.195993 < r < 0.195993
   95% expected band : 0.195993 < r < 0.195993
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1310841807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.352219 +/- 0.00243243 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.352219 @ 95%CL (1 toyMC)
median expected limit: r < 0.352219 @ 95%CL (1 toyMC)
   68% expected band : 0.352219 < r < 0.352219
   95% expected band : 0.352219 < r < 0.352219
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 85941865
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309644 +/- 0.00231632 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.309644 @ 95%CL (1 toyMC)
median expected limit: r < 0.309644 @ 95%CL (1 toyMC)
   68% expected band : 0.309644 < r < 0.309644
   95% expected band : 0.309644 < r < 0.309644
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -214031584
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213578 +/- 0.0032227 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.213578 @ 95%CL (1 toyMC)
median expected limit: r < 0.213578 @ 95%CL (1 toyMC)
   68% expected band : 0.213578 < r < 0.213578
   95% expected band : 0.213578 < r < 0.213578
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -952014786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206073 +/- 0.00328542 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.206073 @ 95%CL (1 toyMC)
median expected limit: r < 0.206073 @ 95%CL (1 toyMC)
   68% expected band : 0.206073 < r < 0.206073
   95% expected band : 0.206073 < r < 0.206073
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -510836825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388847 +/- 0.00233922 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.388847 @ 95%CL (1 toyMC)
median expected limit: r < 0.388847 @ 95%CL (1 toyMC)
   68% expected band : 0.388847 < r < 0.388847
   95% expected band : 0.388847 < r < 0.388847
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 499678880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.351915 +/- 0.00190359 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.351915 @ 95%CL (1 toyMC)
median expected limit: r < 0.351915 @ 95%CL (1 toyMC)
   68% expected band : 0.351915 < r < 0.351915
   95% expected band : 0.351915 < r < 0.351915
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 638644971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226515 +/- 0.00278187 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.226515 @ 95%CL (1 toyMC)
median expected limit: r < 0.226515 @ 95%CL (1 toyMC)
   68% expected band : 0.226515 < r < 0.226515
   95% expected band : 0.226515 < r < 0.226515
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 138628948
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.184698 +/- 0.0048815 @ 95% CL (89 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 0.184698 @ 95%CL (1 toyMC)
median expected limit: r < 0.184698 @ 95%CL (1 toyMC)
   68% expected band : 0.184698 < r < 0.184698
   95% expected band : 0.184698 < r < 0.184698
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 563098396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228402 +/- 0.00262473 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.228402 @ 95%CL (1 toyMC)
median expected limit: r < 0.228402 @ 95%CL (1 toyMC)
   68% expected band : 0.228402 < r < 0.228402
   95% expected band : 0.228402 < r < 0.228402
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1788394946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.203514 +/- 0.00392686 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.203514 @ 95%CL (1 toyMC)
median expected limit: r < 0.203514 @ 95%CL (1 toyMC)
   68% expected band : 0.203514 < r < 0.203514
   95% expected band : 0.203514 < r < 0.203514
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -380679078
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.269332 +/- 0.00276877 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.269332 @ 95%CL (1 toyMC)
median expected limit: r < 0.269332 @ 95%CL (1 toyMC)
   68% expected band : 0.269332 < r < 0.269332
   95% expected band : 0.269332 < r < 0.269332
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1081686965.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1118926043.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1157295850.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1251474334.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1268223012.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1310841807.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1358698073.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1444837117.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1509326292.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1587909529.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1681145736.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1779562566.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1822500782.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1834647890.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1846994956.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1861671051.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1958619630.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1965394508.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1973167633.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-2030571309.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-2065333293.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-214031584.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-219692011.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-226311082.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-228214997.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-28983405.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-300038677.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-343540393.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-380679078.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-394229846.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-432728924.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-452360045.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-45963807.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-510836825.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-549344333.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-718658411.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-72671595.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-727004751.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-729548679.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-745355170.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-790302616.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-81774136.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-842559510.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-952014786.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.1068065961.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.1095497036.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.1119046716.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.1127705936.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.1136802783.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.1206611056.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.1211429424.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.1218925061.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1233042865.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1237032450.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.138628948.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1408173448.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.145521439.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1525887086.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1591534511.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1636276464.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1664146759.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1677444103.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1688735757.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1749625958.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1788394946.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1857816714.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1978696811.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.2011074729.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.2011414121.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.2036016211.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.205623396.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.208369554.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.208976984.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.2104338774.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.2109688814.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.232938706.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.237463519.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.321703039.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.380734098.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.499678880.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.511826150.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.515623732.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.547174580.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.563098396.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.578786354.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.579231217.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.638644971.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.666351661.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.705963240.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.751609115.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.762778458.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.778293102.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.790705570.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.831749021.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.857558672.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.85941865.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.862745135.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.8822529.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.91224147.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.966914342.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -545000201
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.354206 +/- 0.00225337 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.354206 @ 95%CL (1 toyMC)
median expected limit: r < 0.354206 @ 95%CL (1 toyMC)
   68% expected band : 0.354206 < r < 0.354206
   95% expected band : 0.354206 < r < 0.354206
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -970799361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.225249 +/- 0.00269966 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.225249 @ 95%CL (1 toyMC)
median expected limit: r < 0.225249 @ 95%CL (1 toyMC)
   68% expected band : 0.225249 < r < 0.225249
   95% expected band : 0.225249 < r < 0.225249
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1649676674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25537 +/- 0.00303857 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.25537 @ 95%CL (1 toyMC)
median expected limit: r < 0.25537 @ 95%CL (1 toyMC)
   68% expected band : 0.25537 < r < 0.25537
   95% expected band : 0.25537 < r < 0.25537
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1460110940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.171159 +/- 0.00434433 @ 95% CL (96 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.171159 @ 95%CL (1 toyMC)
median expected limit: r < 0.171159 @ 95%CL (1 toyMC)
   68% expected band : 0.171159 < r < 0.171159
   95% expected band : 0.171159 < r < 0.171159
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1584196261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.187708 +/- 0.00382859 @ 95% CL (93 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.187708 @ 95%CL (1 toyMC)
median expected limit: r < 0.187708 @ 95%CL (1 toyMC)
   68% expected band : 0.187708 < r < 0.187708
   95% expected band : 0.187708 < r < 0.187708
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 114819218
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.453876 +/- 0.00220989 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.453876 @ 95%CL (1 toyMC)
median expected limit: r < 0.453876 @ 95%CL (1 toyMC)
   68% expected band : 0.453876 < r < 0.453876
   95% expected band : 0.453876 < r < 0.453876
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 50019222
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.266792 +/- 0.00215827 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.266792 @ 95%CL (1 toyMC)
median expected limit: r < 0.266792 @ 95%CL (1 toyMC)
   68% expected band : 0.266792 < r < 0.266792
   95% expected band : 0.266792 < r < 0.266792
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1323929329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.225943 +/- 0.00289536 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.225943 @ 95%CL (1 toyMC)
median expected limit: r < 0.225943 @ 95%CL (1 toyMC)
   68% expected band : 0.225943 < r < 0.225943
   95% expected band : 0.225943 < r < 0.225943
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1061132300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388592 +/- 0.00209329 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.388592 @ 95%CL (1 toyMC)
median expected limit: r < 0.388592 @ 95%CL (1 toyMC)
   68% expected band : 0.388592 < r < 0.388592
   95% expected band : 0.388592 < r < 0.388592
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -388924808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226322 +/- 0.00308866 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.226322 @ 95%CL (1 toyMC)
median expected limit: r < 0.226322 @ 95%CL (1 toyMC)
   68% expected band : 0.226322 < r < 0.226322
   95% expected band : 0.226322 < r < 0.226322
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -332358825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387407 +/- 0.00181135 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.387407 @ 95%CL (1 toyMC)
median expected limit: r < 0.387407 @ 95%CL (1 toyMC)
   68% expected band : 0.387407 < r < 0.387407
   95% expected band : 0.387407 < r < 0.387407
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -585010078
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204573 +/- 0.00337439 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.204573 @ 95%CL (1 toyMC)
median expected limit: r < 0.204573 @ 95%CL (1 toyMC)
   68% expected band : 0.204573 < r < 0.204573
   95% expected band : 0.204573 < r < 0.204573
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -232240287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240269 +/- 0.00305914 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.240269 @ 95%CL (1 toyMC)
median expected limit: r < 0.240269 @ 95%CL (1 toyMC)
   68% expected band : 0.240269 < r < 0.240269
   95% expected band : 0.240269 < r < 0.240269
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 671910616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.351398 +/- 0.00304226 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.351398 @ 95%CL (1 toyMC)
median expected limit: r < 0.351398 @ 95%CL (1 toyMC)
   68% expected band : 0.351398 < r < 0.351398
   95% expected band : 0.351398 < r < 0.351398
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1140987758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.587724 +/- 0.00211155 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.587724 @ 95%CL (1 toyMC)
median expected limit: r < 0.587724 @ 95%CL (1 toyMC)
   68% expected band : 0.587724 < r < 0.587724
   95% expected band : 0.587724 < r < 0.587724
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -175046511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.196892 +/- 0.00359478 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.196892 @ 95%CL (1 toyMC)
median expected limit: r < 0.196892 @ 95%CL (1 toyMC)
   68% expected band : 0.196892 < r < 0.196892
   95% expected band : 0.196892 < r < 0.196892
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1206108394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.199437 +/- 0.00410205 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.199437 @ 95%CL (1 toyMC)
median expected limit: r < 0.199437 @ 95%CL (1 toyMC)
   68% expected band : 0.199437 < r < 0.199437
   95% expected band : 0.199437 < r < 0.199437
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -788947117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.258008 +/- 0.00278068 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.258008 @ 95%CL (1 toyMC)
median expected limit: r < 0.258008 @ 95%CL (1 toyMC)
   68% expected band : 0.258008 < r < 0.258008
   95% expected band : 0.258008 < r < 0.258008
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1377080977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.187977 +/- 0.00383841 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.187977 @ 95%CL (1 toyMC)
median expected limit: r < 0.187977 @ 95%CL (1 toyMC)
   68% expected band : 0.187977 < r < 0.187977
   95% expected band : 0.187977 < r < 0.187977
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1134710034
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.440095 +/- 0.00257637 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.440095 @ 95%CL (1 toyMC)
median expected limit: r < 0.440095 @ 95%CL (1 toyMC)
   68% expected band : 0.440095 < r < 0.440095
   95% expected band : 0.440095 < r < 0.440095
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1771173714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.19972 +/- 0.00374408 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.19972 @ 95%CL (1 toyMC)
median expected limit: r < 0.19972 @ 95%CL (1 toyMC)
   68% expected band : 0.19972 < r < 0.19972
   95% expected band : 0.19972 < r < 0.19972
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1140022572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200846 +/- 0.0030042 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.200846 @ 95%CL (1 toyMC)
median expected limit: r < 0.200846 @ 95%CL (1 toyMC)
   68% expected band : 0.200846 < r < 0.200846
   95% expected band : 0.200846 < r < 0.200846
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1024828005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208077 +/- 0.00261037 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.208077 @ 95%CL (1 toyMC)
median expected limit: r < 0.208077 @ 95%CL (1 toyMC)
   68% expected band : 0.208077 < r < 0.208077
   95% expected band : 0.208077 < r < 0.208077
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -920689768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.269649 +/- 0.00203447 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.269649 @ 95%CL (1 toyMC)
median expected limit: r < 0.269649 @ 95%CL (1 toyMC)
   68% expected band : 0.269649 < r < 0.269649
   95% expected band : 0.269649 < r < 0.269649
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1134447315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.185966 +/- 0.0042787 @ 95% CL (96 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.185966 @ 95%CL (1 toyMC)
median expected limit: r < 0.185966 @ 95%CL (1 toyMC)
   68% expected band : 0.185966 < r < 0.185966
   95% expected band : 0.185966 < r < 0.185966
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1015207554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36609 +/- 0.00202226 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.36609 @ 95%CL (1 toyMC)
median expected limit: r < 0.36609 @ 95%CL (1 toyMC)
   68% expected band : 0.36609 < r < 0.36609
   95% expected band : 0.36609 < r < 0.36609
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -782715730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246931 +/- 0.00316249 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.246931 @ 95%CL (1 toyMC)
median expected limit: r < 0.246931 @ 95%CL (1 toyMC)
   68% expected band : 0.246931 < r < 0.246931
   95% expected band : 0.246931 < r < 0.246931
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1153992586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.181233 +/- 0.00394491 @ 95% CL (95 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.181233 @ 95%CL (1 toyMC)
median expected limit: r < 0.181233 @ 95%CL (1 toyMC)
   68% expected band : 0.181233 < r < 0.181233
   95% expected band : 0.181233 < r < 0.181233
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1697076596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280169 +/- 0.00322809 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.280169 @ 95%CL (1 toyMC)
median expected limit: r < 0.280169 @ 95%CL (1 toyMC)
   68% expected band : 0.280169 < r < 0.280169
   95% expected band : 0.280169 < r < 0.280169
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1210201081
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.322106 +/- 0.00188108 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.322106 @ 95%CL (1 toyMC)
median expected limit: r < 0.322106 @ 95%CL (1 toyMC)
   68% expected band : 0.322106 < r < 0.322106
   95% expected band : 0.322106 < r < 0.322106
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -558410922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195844 +/- 0.00362872 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.195844 @ 95%CL (1 toyMC)
median expected limit: r < 0.195844 @ 95%CL (1 toyMC)
   68% expected band : 0.195844 < r < 0.195844
   95% expected band : 0.195844 < r < 0.195844
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1608682963
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253303 +/- 0.00332645 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.253303 @ 95%CL (1 toyMC)
median expected limit: r < 0.253303 @ 95%CL (1 toyMC)
   68% expected band : 0.253303 < r < 0.253303
   95% expected band : 0.253303 < r < 0.253303
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 724415112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.265449 +/- 0.00305538 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.265449 @ 95%CL (1 toyMC)
median expected limit: r < 0.265449 @ 95%CL (1 toyMC)
   68% expected band : 0.265449 < r < 0.265449
   95% expected band : 0.265449 < r < 0.265449
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1193983880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.327633 +/- 0.00212051 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.327633 @ 95%CL (1 toyMC)
median expected limit: r < 0.327633 @ 95%CL (1 toyMC)
   68% expected band : 0.327633 < r < 0.327633
   95% expected band : 0.327633 < r < 0.327633
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 68951868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248602 +/- 0.00269168 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.248602 @ 95%CL (1 toyMC)
median expected limit: r < 0.248602 @ 95%CL (1 toyMC)
   68% expected band : 0.248602 < r < 0.248602
   95% expected band : 0.248602 < r < 0.248602
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2141486277
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.192936 +/- 0.00377517 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.192936 @ 95%CL (1 toyMC)
median expected limit: r < 0.192936 @ 95%CL (1 toyMC)
   68% expected band : 0.192936 < r < 0.192936
   95% expected band : 0.192936 < r < 0.192936
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1463416567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.352008 +/- 0.00238316 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.352008 @ 95%CL (1 toyMC)
median expected limit: r < 0.352008 @ 95%CL (1 toyMC)
   68% expected band : 0.352008 < r < 0.352008
   95% expected band : 0.352008 < r < 0.352008
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -585812843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.225457 +/- 0.00301248 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.225457 @ 95%CL (1 toyMC)
median expected limit: r < 0.225457 @ 95%CL (1 toyMC)
   68% expected band : 0.225457 < r < 0.225457
   95% expected band : 0.225457 < r < 0.225457
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 708894138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.180285 +/- 0.00479354 @ 95% CL (95 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.180285 @ 95%CL (1 toyMC)
median expected limit: r < 0.180285 @ 95%CL (1 toyMC)
   68% expected band : 0.180285 < r < 0.180285
   95% expected band : 0.180285 < r < 0.180285
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -798253787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.191025 +/- 0.00296535 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.191025 @ 95%CL (1 toyMC)
median expected limit: r < 0.191025 @ 95%CL (1 toyMC)
   68% expected band : 0.191025 < r < 0.191025
   95% expected band : 0.191025 < r < 0.191025
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -717421808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.380064 +/- 0.00211838 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.380064 @ 95%CL (1 toyMC)
median expected limit: r < 0.380064 @ 95%CL (1 toyMC)
   68% expected band : 0.380064 < r < 0.380064
   95% expected band : 0.380064 < r < 0.380064
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2057626669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286475 +/- 0.00248113 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.286475 @ 95%CL (1 toyMC)
median expected limit: r < 0.286475 @ 95%CL (1 toyMC)
   68% expected band : 0.286475 < r < 0.286475
   95% expected band : 0.286475 < r < 0.286475
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 978621299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261868 +/- 0.00248709 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.261868 @ 95%CL (1 toyMC)
median expected limit: r < 0.261868 @ 95%CL (1 toyMC)
   68% expected band : 0.261868 < r < 0.261868
   95% expected band : 0.261868 < r < 0.261868
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 831071200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.299365 +/- 0.00284667 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.299365 @ 95%CL (1 toyMC)
median expected limit: r < 0.299365 @ 95%CL (1 toyMC)
   68% expected band : 0.299365 < r < 0.299365
   95% expected band : 0.299365 < r < 0.299365
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1329502716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.187209 +/- 0.003875 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.187209 @ 95%CL (1 toyMC)
median expected limit: r < 0.187209 @ 95%CL (1 toyMC)
   68% expected band : 0.187209 < r < 0.187209
   95% expected band : 0.187209 < r < 0.187209
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -582281601
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.218121 +/- 0.00240977 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.218121 @ 95%CL (1 toyMC)
median expected limit: r < 0.218121 @ 95%CL (1 toyMC)
   68% expected band : 0.218121 < r < 0.218121
   95% expected band : 0.218121 < r < 0.218121
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -282962633
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.222434 +/- 0.0026901 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.222434 @ 95%CL (1 toyMC)
median expected limit: r < 0.222434 @ 95%CL (1 toyMC)
   68% expected band : 0.222434 < r < 0.222434
   95% expected band : 0.222434 < r < 0.222434
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 172162302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190928 +/- 0.00374508 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.190928 @ 95%CL (1 toyMC)
median expected limit: r < 0.190928 @ 95%CL (1 toyMC)
   68% expected band : 0.190928 < r < 0.190928
   95% expected band : 0.190928 < r < 0.190928
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 613421602
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.298492 +/- 0.00245712 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.298492 @ 95%CL (1 toyMC)
median expected limit: r < 0.298492 @ 95%CL (1 toyMC)
   68% expected band : 0.298492 < r < 0.298492
   95% expected band : 0.298492 < r < 0.298492
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -363480955
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.24118 +/- 0.00323112 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.24118 @ 95%CL (1 toyMC)
median expected limit: r < 0.24118 @ 95%CL (1 toyMC)
   68% expected band : 0.24118 < r < 0.24118
   95% expected band : 0.24118 < r < 0.24118
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -751195998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.21508 +/- 0.00261322 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.21508 @ 95%CL (1 toyMC)
median expected limit: r < 0.21508 @ 95%CL (1 toyMC)
   68% expected band : 0.21508 < r < 0.21508
   95% expected band : 0.21508 < r < 0.21508
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1503729196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.291535 +/- 0.00232946 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.291535 @ 95%CL (1 toyMC)
median expected limit: r < 0.291535 @ 95%CL (1 toyMC)
   68% expected band : 0.291535 < r < 0.291535
   95% expected band : 0.291535 < r < 0.291535
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 732830711
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.177807 +/- 0.00352774 @ 95% CL (90 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.177807 @ 95%CL (1 toyMC)
median expected limit: r < 0.177807 @ 95%CL (1 toyMC)
   68% expected band : 0.177807 < r < 0.177807
   95% expected band : 0.177807 < r < 0.177807
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -350374871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210193 +/- 0.00377677 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.210193 @ 95%CL (1 toyMC)
median expected limit: r < 0.210193 @ 95%CL (1 toyMC)
   68% expected band : 0.210193 < r < 0.210193
   95% expected band : 0.210193 < r < 0.210193
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2120089887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.19016 +/- 0.00395754 @ 95% CL (94 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.19016 @ 95%CL (1 toyMC)
median expected limit: r < 0.19016 @ 95%CL (1 toyMC)
   68% expected band : 0.19016 < r < 0.19016
   95% expected band : 0.19016 < r < 0.19016
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1810257406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.342562 +/- 0.0023781 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.342562 @ 95%CL (1 toyMC)
median expected limit: r < 0.342562 @ 95%CL (1 toyMC)
   68% expected band : 0.342562 < r < 0.342562
   95% expected band : 0.342562 < r < 0.342562
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1081029026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236424 +/- 0.00307902 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.236424 @ 95%CL (1 toyMC)
median expected limit: r < 0.236424 @ 95%CL (1 toyMC)
   68% expected band : 0.236424 < r < 0.236424
   95% expected band : 0.236424 < r < 0.236424
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1867104260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224673 +/- 0.00263613 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.224673 @ 95%CL (1 toyMC)
median expected limit: r < 0.224673 @ 95%CL (1 toyMC)
   68% expected band : 0.224673 < r < 0.224673
   95% expected band : 0.224673 < r < 0.224673
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 689766531
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217666 +/- 0.00324717 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.217666 @ 95%CL (1 toyMC)
median expected limit: r < 0.217666 @ 95%CL (1 toyMC)
   68% expected band : 0.217666 < r < 0.217666
   95% expected band : 0.217666 < r < 0.217666
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1962552985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.405191 +/- 0.00248347 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.405191 @ 95%CL (1 toyMC)
median expected limit: r < 0.405191 @ 95%CL (1 toyMC)
   68% expected band : 0.405191 < r < 0.405191
   95% expected band : 0.405191 < r < 0.405191
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1564330393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186544 +/- 0.00427445 @ 95% CL (84 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 0.186544 @ 95%CL (1 toyMC)
median expected limit: r < 0.186544 @ 95%CL (1 toyMC)
   68% expected band : 0.186544 < r < 0.186544
   95% expected band : 0.186544 < r < 0.186544
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1250207531
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.167607 +/- 0.00522175 @ 95% CL (89 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 0.167607 @ 95%CL (1 toyMC)
median expected limit: r < 0.167607 @ 95%CL (1 toyMC)
   68% expected band : 0.167607 < r < 0.167607
   95% expected band : 0.167607 < r < 0.167607
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -140758033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.278978 +/- 0.00229344 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.278978 @ 95%CL (1 toyMC)
median expected limit: r < 0.278978 @ 95%CL (1 toyMC)
   68% expected band : 0.278978 < r < 0.278978
   95% expected band : 0.278978 < r < 0.278978
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -29342342
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.24268 +/- 0.00281673 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.24268 @ 95%CL (1 toyMC)
median expected limit: r < 0.24268 @ 95%CL (1 toyMC)
   68% expected band : 0.24268 < r < 0.24268
   95% expected band : 0.24268 < r < 0.24268
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 404391320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.177551 +/- 0.00381759 @ 95% CL (97 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.177551 @ 95%CL (1 toyMC)
median expected limit: r < 0.177551 @ 95%CL (1 toyMC)
   68% expected band : 0.177551 < r < 0.177551
   95% expected band : 0.177551 < r < 0.177551
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1911145614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248054 +/- 0.00255818 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.248054 @ 95%CL (1 toyMC)
median expected limit: r < 0.248054 @ 95%CL (1 toyMC)
   68% expected band : 0.248054 < r < 0.248054
   95% expected band : 0.248054 < r < 0.248054
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1489760389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.187817 +/- 0.00283238 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.187817 @ 95%CL (1 toyMC)
median expected limit: r < 0.187817 @ 95%CL (1 toyMC)
   68% expected band : 0.187817 < r < 0.187817
   95% expected band : 0.187817 < r < 0.187817
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1345561513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.42394 +/- 0.00205921 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.42394 @ 95%CL (1 toyMC)
median expected limit: r < 0.42394 @ 95%CL (1 toyMC)
   68% expected band : 0.42394 < r < 0.42394
   95% expected band : 0.42394 < r < 0.42394
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -203062618
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.233377 +/- 0.00247138 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.233377 @ 95%CL (1 toyMC)
median expected limit: r < 0.233377 @ 95%CL (1 toyMC)
   68% expected band : 0.233377 < r < 0.233377
   95% expected band : 0.233377 < r < 0.233377
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1715797248
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.323426 +/- 0.00300353 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.323426 @ 95%CL (1 toyMC)
median expected limit: r < 0.323426 @ 95%CL (1 toyMC)
   68% expected band : 0.323426 < r < 0.323426
   95% expected band : 0.323426 < r < 0.323426
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1929897771
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244516 +/- 0.00241694 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.244516 @ 95%CL (1 toyMC)
median expected limit: r < 0.244516 @ 95%CL (1 toyMC)
   68% expected band : 0.244516 < r < 0.244516
   95% expected band : 0.244516 < r < 0.244516
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 720828452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255138 +/- 0.00314892 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.255138 @ 95%CL (1 toyMC)
median expected limit: r < 0.255138 @ 95%CL (1 toyMC)
   68% expected band : 0.255138 < r < 0.255138
   95% expected band : 0.255138 < r < 0.255138
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 669879289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.182575 +/- 0.005224 @ 95% CL (94 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.182575 @ 95%CL (1 toyMC)
median expected limit: r < 0.182575 @ 95%CL (1 toyMC)
   68% expected band : 0.182575 < r < 0.182575
   95% expected band : 0.182575 < r < 0.182575
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 272902015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.179965 +/- 0.00398697 @ 95% CL (85 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 0.179965 @ 95%CL (1 toyMC)
median expected limit: r < 0.179965 @ 95%CL (1 toyMC)
   68% expected band : 0.179965 < r < 0.179965
   95% expected band : 0.179965 < r < 0.179965
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1689413053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263034 +/- 0.00306251 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.263034 @ 95%CL (1 toyMC)
median expected limit: r < 0.263034 @ 95%CL (1 toyMC)
   68% expected band : 0.263034 < r < 0.263034
   95% expected band : 0.263034 < r < 0.263034
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -878744667
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244383 +/- 0.00280592 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.244383 @ 95%CL (1 toyMC)
median expected limit: r < 0.244383 @ 95%CL (1 toyMC)
   68% expected band : 0.244383 < r < 0.244383
   95% expected band : 0.244383 < r < 0.244383
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1778738774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261022 +/- 0.00258476 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.261022 @ 95%CL (1 toyMC)
median expected limit: r < 0.261022 @ 95%CL (1 toyMC)
   68% expected band : 0.261022 < r < 0.261022
   95% expected band : 0.261022 < r < 0.261022
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 625606188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.205421 +/- 0.00322248 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.205421 @ 95%CL (1 toyMC)
median expected limit: r < 0.205421 @ 95%CL (1 toyMC)
   68% expected band : 0.205421 < r < 0.205421
   95% expected band : 0.205421 < r < 0.205421
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1228268436
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.292508 +/- 0.00236777 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.292508 @ 95%CL (1 toyMC)
median expected limit: r < 0.292508 @ 95%CL (1 toyMC)
   68% expected band : 0.292508 < r < 0.292508
   95% expected band : 0.292508 < r < 0.292508
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -387522193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.306091 +/- 0.00283082 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.306091 @ 95%CL (1 toyMC)
median expected limit: r < 0.306091 @ 95%CL (1 toyMC)
   68% expected band : 0.306091 < r < 0.306091
   95% expected band : 0.306091 < r < 0.306091
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1037629851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.252036 +/- 0.00278114 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.252036 @ 95%CL (1 toyMC)
median expected limit: r < 0.252036 @ 95%CL (1 toyMC)
   68% expected band : 0.252036 < r < 0.252036
   95% expected band : 0.252036 < r < 0.252036
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1403157732
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.245691 +/- 0.00306073 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.245691 @ 95%CL (1 toyMC)
median expected limit: r < 0.245691 @ 95%CL (1 toyMC)
   68% expected band : 0.245691 < r < 0.245691
   95% expected band : 0.245691 < r < 0.245691
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2092971656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.283189 +/- 0.00239721 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.283189 @ 95%CL (1 toyMC)
median expected limit: r < 0.283189 @ 95%CL (1 toyMC)
   68% expected band : 0.283189 < r < 0.283189
   95% expected band : 0.283189 < r < 0.283189
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1376722230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281789 +/- 0.00260167 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.281789 @ 95%CL (1 toyMC)
median expected limit: r < 0.281789 @ 95%CL (1 toyMC)
   68% expected band : 0.281789 < r < 0.281789
   95% expected band : 0.281789 < r < 0.281789
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1489549307
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.369151 +/- 0.00194125 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.369151 @ 95%CL (1 toyMC)
median expected limit: r < 0.369151 @ 95%CL (1 toyMC)
   68% expected band : 0.369151 < r < 0.369151
   95% expected band : 0.369151 < r < 0.369151
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -167477369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.292773 +/- 0.00221533 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.292773 @ 95%CL (1 toyMC)
median expected limit: r < 0.292773 @ 95%CL (1 toyMC)
   68% expected band : 0.292773 < r < 0.292773
   95% expected band : 0.292773 < r < 0.292773
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1697404765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255605 +/- 0.00270466 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.255605 @ 95%CL (1 toyMC)
median expected limit: r < 0.255605 @ 95%CL (1 toyMC)
   68% expected band : 0.255605 < r < 0.255605
   95% expected band : 0.255605 < r < 0.255605
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1717912357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.215208 +/- 0.00354683 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.215208 @ 95%CL (1 toyMC)
median expected limit: r < 0.215208 @ 95%CL (1 toyMC)
   68% expected band : 0.215208 < r < 0.215208
   95% expected band : 0.215208 < r < 0.215208
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1794493372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.219227 +/- 0.00298217 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.219227 @ 95%CL (1 toyMC)
median expected limit: r < 0.219227 @ 95%CL (1 toyMC)
   68% expected band : 0.219227 < r < 0.219227
   95% expected band : 0.219227 < r < 0.219227
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -950326573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246421 +/- 0.00281717 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.246421 @ 95%CL (1 toyMC)
median expected limit: r < 0.246421 @ 95%CL (1 toyMC)
   68% expected band : 0.246421 < r < 0.246421
   95% expected band : 0.246421 < r < 0.246421
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 292339991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.34488 +/- 0.002394 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.34488 @ 95%CL (1 toyMC)
median expected limit: r < 0.34488 @ 95%CL (1 toyMC)
   68% expected band : 0.34488 < r < 0.34488
   95% expected band : 0.34488 < r < 0.34488
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -969302305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286509 +/- 0.00224263 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.286509 @ 95%CL (1 toyMC)
median expected limit: r < 0.286509 @ 95%CL (1 toyMC)
   68% expected band : 0.286509 < r < 0.286509
   95% expected band : 0.286509 < r < 0.286509
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 201493653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.167061 +/- 0.00501508 @ 95% CL (69 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 0.167061 @ 95%CL (1 toyMC)
median expected limit: r < 0.167061 @ 95%CL (1 toyMC)
   68% expected band : 0.167061 < r < 0.167061
   95% expected band : 0.167061 < r < 0.167061
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1674765836
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228092 +/- 0.00330144 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.228092 @ 95%CL (1 toyMC)
median expected limit: r < 0.228092 @ 95%CL (1 toyMC)
   68% expected band : 0.228092 < r < 0.228092
   95% expected band : 0.228092 < r < 0.228092
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -821263989
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.377612 +/- 0.00211105 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.377612 @ 95%CL (1 toyMC)
median expected limit: r < 0.377612 @ 95%CL (1 toyMC)
   68% expected band : 0.377612 < r < 0.377612
   95% expected band : 0.377612 < r < 0.377612
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -603634538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.227385 +/- 0.00273554 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.227385 @ 95%CL (1 toyMC)
median expected limit: r < 0.227385 @ 95%CL (1 toyMC)
   68% expected band : 0.227385 < r < 0.227385
   95% expected band : 0.227385 < r < 0.227385
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1751391817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.168596 +/- 0.00740941 @ 95% CL (76 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 0.168596 @ 95%CL (1 toyMC)
median expected limit: r < 0.168596 @ 95%CL (1 toyMC)
   68% expected band : 0.168596 < r < 0.168596
   95% expected band : 0.168596 < r < 0.168596
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1186161957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.322137 +/- 0.00224511 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.322137 @ 95%CL (1 toyMC)
median expected limit: r < 0.322137 @ 95%CL (1 toyMC)
   68% expected band : 0.322137 < r < 0.322137
   95% expected band : 0.322137 < r < 0.322137
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -619686571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210539 +/- 0.00268488 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.210539 @ 95%CL (1 toyMC)
median expected limit: r < 0.210539 @ 95%CL (1 toyMC)
   68% expected band : 0.210539 < r < 0.210539
   95% expected band : 0.210539 < r < 0.210539
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1562001033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22358 +/- 0.00412651 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.22358 @ 95%CL (1 toyMC)
median expected limit: r < 0.22358 @ 95%CL (1 toyMC)
   68% expected band : 0.22358 < r < 0.22358
   95% expected band : 0.22358 < r < 0.22358
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1015207554.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1024828005.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1037629851.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1061132300.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1081029026.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1134447315.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1134710034.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1140987758.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1153992586.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1193983880.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1250207531.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1323929329.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1329502716.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1345561513.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1377080977.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1403157732.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-140758033.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1460110940.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1463416567.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1489549307.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1489760389.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1564330393.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1584196261.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-1649676674.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-167477369.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1689413053.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-1717912357.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-175046511.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-1751391817.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-1771173714.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-1778738774.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-1794493372.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-1867104260.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-1911145614.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-1962552985.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-203062618.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-2092971656.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-2120089887.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-232240287.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-282962633.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-29342342.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-332358825.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-350374871.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-363480955.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-387522193.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-388924808.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-545000201.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-558410922.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-582281601.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.-585010078.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.-585812843.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.-603634538.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.-619686571.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.-717421808.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.-751195998.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.-782715730.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.-788947117.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.-798253787.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.-821263989.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.-878744667.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.-920689768.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.-950326573.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.-969302305.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.-970799361.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1140022572.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.114819218.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1186161957.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1206108394.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1210201081.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1228268436.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1376722230.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1503729196.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1562001033.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1608682963.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1674765836.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.1697076596.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.1697404765.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.1715797248.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.172162302.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.1810257406.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.1929897771.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.201493653.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.2057626669.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.2141486277.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.272902015.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.292339991.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.404391320.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.50019222.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.613421602.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.625606188.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.669879289.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.671910616.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.68951868.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.689766531.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.708894138.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.720828452.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.724415112.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.732830711.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.831071200.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.978621299.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1329234434
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206429 +/- 0.0036702 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.206429 @ 95%CL (1 toyMC)
median expected limit: r < 0.206429 @ 95%CL (1 toyMC)
   68% expected band : 0.206429 < r < 0.206429
   95% expected band : 0.206429 < r < 0.206429
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1671784468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325559 +/- 0.00215543 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.325559 @ 95%CL (1 toyMC)
median expected limit: r < 0.325559 @ 95%CL (1 toyMC)
   68% expected band : 0.325559 < r < 0.325559
   95% expected band : 0.325559 < r < 0.325559
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 819892108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216941 +/- 0.00327715 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.216941 @ 95%CL (1 toyMC)
median expected limit: r < 0.216941 @ 95%CL (1 toyMC)
   68% expected band : 0.216941 < r < 0.216941
   95% expected band : 0.216941 < r < 0.216941
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -509890779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262358 +/- 0.00234031 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.262358 @ 95%CL (1 toyMC)
median expected limit: r < 0.262358 @ 95%CL (1 toyMC)
   68% expected band : 0.262358 < r < 0.262358
   95% expected band : 0.262358 < r < 0.262358
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 691600140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.249448 +/- 0.00205393 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.249448 @ 95%CL (1 toyMC)
median expected limit: r < 0.249448 @ 95%CL (1 toyMC)
   68% expected band : 0.249448 < r < 0.249448
   95% expected band : 0.249448 < r < 0.249448
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1262235561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.306041 +/- 0.00311471 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.306041 @ 95%CL (1 toyMC)
median expected limit: r < 0.306041 @ 95%CL (1 toyMC)
   68% expected band : 0.306041 < r < 0.306041
   95% expected band : 0.306041 < r < 0.306041
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2040283841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.202358 +/- 0.00346545 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.202358 @ 95%CL (1 toyMC)
median expected limit: r < 0.202358 @ 95%CL (1 toyMC)
   68% expected band : 0.202358 < r < 0.202358
   95% expected band : 0.202358 < r < 0.202358
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1746577445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.321538 +/- 0.00273123 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.321538 @ 95%CL (1 toyMC)
median expected limit: r < 0.321538 @ 95%CL (1 toyMC)
   68% expected band : 0.321538 < r < 0.321538
   95% expected band : 0.321538 < r < 0.321538
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -12846098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.296675 +/- 0.00260623 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.296675 @ 95%CL (1 toyMC)
median expected limit: r < 0.296675 @ 95%CL (1 toyMC)
   68% expected band : 0.296675 < r < 0.296675
   95% expected band : 0.296675 < r < 0.296675
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2110677467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.431926 +/- 0.00214049 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.431926 @ 95%CL (1 toyMC)
median expected limit: r < 0.431926 @ 95%CL (1 toyMC)
   68% expected band : 0.431926 < r < 0.431926
   95% expected band : 0.431926 < r < 0.431926
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1892522222
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255718 +/- 0.00233624 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.255718 @ 95%CL (1 toyMC)
median expected limit: r < 0.255718 @ 95%CL (1 toyMC)
   68% expected band : 0.255718 < r < 0.255718
   95% expected band : 0.255718 < r < 0.255718
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -544890813
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.176642 +/- 0.00435191 @ 95% CL (97 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.176642 @ 95%CL (1 toyMC)
median expected limit: r < 0.176642 @ 95%CL (1 toyMC)
   68% expected band : 0.176642 < r < 0.176642
   95% expected band : 0.176642 < r < 0.176642
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 299877256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.394755 +/- 0.00195659 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.394755 @ 95%CL (1 toyMC)
median expected limit: r < 0.394755 @ 95%CL (1 toyMC)
   68% expected band : 0.394755 < r < 0.394755
   95% expected band : 0.394755 < r < 0.394755
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1019349782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.181349 +/- 0.00430128 @ 95% CL (98 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.181349 @ 95%CL (1 toyMC)
median expected limit: r < 0.181349 @ 95%CL (1 toyMC)
   68% expected band : 0.181349 < r < 0.181349
   95% expected band : 0.181349 < r < 0.181349
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1741658297
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.392813 +/- 0.00218259 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.392813 @ 95%CL (1 toyMC)
median expected limit: r < 0.392813 @ 95%CL (1 toyMC)
   68% expected band : 0.392813 < r < 0.392813
   95% expected band : 0.392813 < r < 0.392813
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -619602123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247811 +/- 0.00202198 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.247811 @ 95%CL (1 toyMC)
median expected limit: r < 0.247811 @ 95%CL (1 toyMC)
   68% expected band : 0.247811 < r < 0.247811
   95% expected band : 0.247811 < r < 0.247811
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 634583961
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.219218 +/- 0.00304171 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.219218 @ 95%CL (1 toyMC)
median expected limit: r < 0.219218 @ 95%CL (1 toyMC)
   68% expected band : 0.219218 < r < 0.219218
   95% expected band : 0.219218 < r < 0.219218
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2078190466
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235509 +/- 0.00213367 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.235509 @ 95%CL (1 toyMC)
median expected limit: r < 0.235509 @ 95%CL (1 toyMC)
   68% expected band : 0.235509 < r < 0.235509
   95% expected band : 0.235509 < r < 0.235509
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -872131326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206178 +/- 0.00299146 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.206178 @ 95%CL (1 toyMC)
median expected limit: r < 0.206178 @ 95%CL (1 toyMC)
   68% expected band : 0.206178 < r < 0.206178
   95% expected band : 0.206178 < r < 0.206178
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 696373967
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.16947 +/- 0.00504922 @ 95% CL (91 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.16947 @ 95%CL (1 toyMC)
median expected limit: r < 0.16947 @ 95%CL (1 toyMC)
   68% expected band : 0.16947 < r < 0.16947
   95% expected band : 0.16947 < r < 0.16947
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 249113944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.334711 +/- 0.00175774 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.334711 @ 95%CL (1 toyMC)
median expected limit: r < 0.334711 @ 95%CL (1 toyMC)
   68% expected band : 0.334711 < r < 0.334711
   95% expected band : 0.334711 < r < 0.334711
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 646920186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301675 +/- 0.00225671 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.301675 @ 95%CL (1 toyMC)
median expected limit: r < 0.301675 @ 95%CL (1 toyMC)
   68% expected band : 0.301675 < r < 0.301675
   95% expected band : 0.301675 < r < 0.301675
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -474055427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.193274 +/- 0.00256697 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.193274 @ 95%CL (1 toyMC)
median expected limit: r < 0.193274 @ 95%CL (1 toyMC)
   68% expected band : 0.193274 < r < 0.193274
   95% expected band : 0.193274 < r < 0.193274
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -561319792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224112 +/- 0.00296706 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.224112 @ 95%CL (1 toyMC)
median expected limit: r < 0.224112 @ 95%CL (1 toyMC)
   68% expected band : 0.224112 < r < 0.224112
   95% expected band : 0.224112 < r < 0.224112
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 349195894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.466345 +/- 0.00184383 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.466345 @ 95%CL (1 toyMC)
median expected limit: r < 0.466345 @ 95%CL (1 toyMC)
   68% expected band : 0.466345 < r < 0.466345
   95% expected band : 0.466345 < r < 0.466345
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1672812331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.366829 +/- 0.00165621 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.366829 @ 95%CL (1 toyMC)
median expected limit: r < 0.366829 @ 95%CL (1 toyMC)
   68% expected band : 0.366829 < r < 0.366829
   95% expected band : 0.366829 < r < 0.366829
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1818244637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.495895 +/- 0.00192048 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.495895 @ 95%CL (1 toyMC)
median expected limit: r < 0.495895 @ 95%CL (1 toyMC)
   68% expected band : 0.495895 < r < 0.495895
   95% expected band : 0.495895 < r < 0.495895
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1945614831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286664 +/- 0.00202515 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.286664 @ 95%CL (1 toyMC)
median expected limit: r < 0.286664 @ 95%CL (1 toyMC)
   68% expected band : 0.286664 < r < 0.286664
   95% expected band : 0.286664 < r < 0.286664
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2018944712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.381503 +/- 0.00164792 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.381503 @ 95%CL (1 toyMC)
median expected limit: r < 0.381503 @ 95%CL (1 toyMC)
   68% expected band : 0.381503 < r < 0.381503
   95% expected band : 0.381503 < r < 0.381503
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1648983811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.225118 +/- 0.00266563 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.225118 @ 95%CL (1 toyMC)
median expected limit: r < 0.225118 @ 95%CL (1 toyMC)
   68% expected band : 0.225118 < r < 0.225118
   95% expected band : 0.225118 < r < 0.225118
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 766858909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195745 +/- 0.00302582 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.195745 @ 95%CL (1 toyMC)
median expected limit: r < 0.195745 @ 95%CL (1 toyMC)
   68% expected band : 0.195745 < r < 0.195745
   95% expected band : 0.195745 < r < 0.195745
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 223078138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.353722 +/- 0.00207136 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.353722 @ 95%CL (1 toyMC)
median expected limit: r < 0.353722 @ 95%CL (1 toyMC)
   68% expected band : 0.353722 < r < 0.353722
   95% expected band : 0.353722 < r < 0.353722
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 450436150
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.30019 +/- 0.00319199 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.30019 @ 95%CL (1 toyMC)
median expected limit: r < 0.30019 @ 95%CL (1 toyMC)
   68% expected band : 0.30019 < r < 0.30019
   95% expected band : 0.30019 < r < 0.30019
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 958661585
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.267882 +/- 0.00276163 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.267882 @ 95%CL (1 toyMC)
median expected limit: r < 0.267882 @ 95%CL (1 toyMC)
   68% expected band : 0.267882 < r < 0.267882
   95% expected band : 0.267882 < r < 0.267882
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1253518479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.307208 +/- 0.00251476 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.307208 @ 95%CL (1 toyMC)
median expected limit: r < 0.307208 @ 95%CL (1 toyMC)
   68% expected band : 0.307208 < r < 0.307208
   95% expected band : 0.307208 < r < 0.307208
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 271574108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213526 +/- 0.00294247 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.213526 @ 95%CL (1 toyMC)
median expected limit: r < 0.213526 @ 95%CL (1 toyMC)
   68% expected band : 0.213526 < r < 0.213526
   95% expected band : 0.213526 < r < 0.213526
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -701329689
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313997 +/- 0.00259861 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.313997 @ 95%CL (1 toyMC)
median expected limit: r < 0.313997 @ 95%CL (1 toyMC)
   68% expected band : 0.313997 < r < 0.313997
   95% expected band : 0.313997 < r < 0.313997
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 160464569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313173 +/- 0.0024977 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.313173 @ 95%CL (1 toyMC)
median expected limit: r < 0.313173 @ 95%CL (1 toyMC)
   68% expected band : 0.313173 < r < 0.313173
   95% expected band : 0.313173 < r < 0.313173
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1486538399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.252156 +/- 0.00210165 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.252156 @ 95%CL (1 toyMC)
median expected limit: r < 0.252156 @ 95%CL (1 toyMC)
   68% expected band : 0.252156 < r < 0.252156
   95% expected band : 0.252156 < r < 0.252156
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 438254238
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248511 +/- 0.00214975 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.248511 @ 95%CL (1 toyMC)
median expected limit: r < 0.248511 @ 95%CL (1 toyMC)
   68% expected band : 0.248511 < r < 0.248511
   95% expected band : 0.248511 < r < 0.248511
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1367152775
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.176287 +/- 0.00394367 @ 95% CL (95 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.176287 @ 95%CL (1 toyMC)
median expected limit: r < 0.176287 @ 95%CL (1 toyMC)
   68% expected band : 0.176287 < r < 0.176287
   95% expected band : 0.176287 < r < 0.176287
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 747678095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270113 +/- 0.00261176 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.270113 @ 95%CL (1 toyMC)
median expected limit: r < 0.270113 @ 95%CL (1 toyMC)
   68% expected band : 0.270113 < r < 0.270113
   95% expected band : 0.270113 < r < 0.270113
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 151473569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284083 +/- 0.00273374 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.284083 @ 95%CL (1 toyMC)
median expected limit: r < 0.284083 @ 95%CL (1 toyMC)
   68% expected band : 0.284083 < r < 0.284083
   95% expected band : 0.284083 < r < 0.284083
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1911076186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282055 +/- 0.00266879 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.282055 @ 95%CL (1 toyMC)
median expected limit: r < 0.282055 @ 95%CL (1 toyMC)
   68% expected band : 0.282055 < r < 0.282055
   95% expected band : 0.282055 < r < 0.282055
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -956000823
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.314902 +/- 0.00145022 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.314902 @ 95%CL (1 toyMC)
median expected limit: r < 0.314902 @ 95%CL (1 toyMC)
   68% expected band : 0.314902 < r < 0.314902
   95% expected band : 0.314902 < r < 0.314902
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 879258369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.19438 +/- 0.0026132 @ 95% CL (98 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.19438 @ 95%CL (1 toyMC)
median expected limit: r < 0.19438 @ 95%CL (1 toyMC)
   68% expected band : 0.19438 < r < 0.19438
   95% expected band : 0.19438 < r < 0.19438
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1256769979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.324231 +/- 0.00223475 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.324231 @ 95%CL (1 toyMC)
median expected limit: r < 0.324231 @ 95%CL (1 toyMC)
   68% expected band : 0.324231 < r < 0.324231
   95% expected band : 0.324231 < r < 0.324231
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1746749650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204098 +/- 0.00290256 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.204098 @ 95%CL (1 toyMC)
median expected limit: r < 0.204098 @ 95%CL (1 toyMC)
   68% expected band : 0.204098 < r < 0.204098
   95% expected band : 0.204098 < r < 0.204098
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 876427347
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.257413 +/- 0.00255017 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.257413 @ 95%CL (1 toyMC)
median expected limit: r < 0.257413 @ 95%CL (1 toyMC)
   68% expected band : 0.257413 < r < 0.257413
   95% expected band : 0.257413 < r < 0.257413
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 961746532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212977 +/- 0.00299114 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.212977 @ 95%CL (1 toyMC)
median expected limit: r < 0.212977 @ 95%CL (1 toyMC)
   68% expected band : 0.212977 < r < 0.212977
   95% expected band : 0.212977 < r < 0.212977
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 612975756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.406851 +/- 0.00190293 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.406851 @ 95%CL (1 toyMC)
median expected limit: r < 0.406851 @ 95%CL (1 toyMC)
   68% expected band : 0.406851 < r < 0.406851
   95% expected band : 0.406851 < r < 0.406851
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1196066313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210441 +/- 0.00363084 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.210441 @ 95%CL (1 toyMC)
median expected limit: r < 0.210441 @ 95%CL (1 toyMC)
   68% expected band : 0.210441 < r < 0.210441
   95% expected band : 0.210441 < r < 0.210441
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1599688900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.211726 +/- 0.00349205 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.211726 @ 95%CL (1 toyMC)
median expected limit: r < 0.211726 @ 95%CL (1 toyMC)
   68% expected band : 0.211726 < r < 0.211726
   95% expected band : 0.211726 < r < 0.211726
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 516416353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304292 +/- 0.00206706 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.304292 @ 95%CL (1 toyMC)
median expected limit: r < 0.304292 @ 95%CL (1 toyMC)
   68% expected band : 0.304292 < r < 0.304292
   95% expected band : 0.304292 < r < 0.304292
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1993945623
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.193897 +/- 0.00315118 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.193897 @ 95%CL (1 toyMC)
median expected limit: r < 0.193897 @ 95%CL (1 toyMC)
   68% expected band : 0.193897 < r < 0.193897
   95% expected band : 0.193897 < r < 0.193897
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1231491384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.273115 +/- 0.00206963 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.273115 @ 95%CL (1 toyMC)
median expected limit: r < 0.273115 @ 95%CL (1 toyMC)
   68% expected band : 0.273115 < r < 0.273115
   95% expected band : 0.273115 < r < 0.273115
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1700891924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.334005 +/- 0.00300899 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.334005 @ 95%CL (1 toyMC)
median expected limit: r < 0.334005 @ 95%CL (1 toyMC)
   68% expected band : 0.334005 < r < 0.334005
   95% expected band : 0.334005 < r < 0.334005
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 394407038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.395417 +/- 0.00216753 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.395417 @ 95%CL (1 toyMC)
median expected limit: r < 0.395417 @ 95%CL (1 toyMC)
   68% expected band : 0.395417 < r < 0.395417
   95% expected band : 0.395417 < r < 0.395417
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1525798548
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.193578 +/- 0.00283529 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.193578 @ 95%CL (1 toyMC)
median expected limit: r < 0.193578 @ 95%CL (1 toyMC)
   68% expected band : 0.193578 < r < 0.193578
   95% expected band : 0.193578 < r < 0.193578
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 479569416
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242776 +/- 0.00306774 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.242776 @ 95%CL (1 toyMC)
median expected limit: r < 0.242776 @ 95%CL (1 toyMC)
   68% expected band : 0.242776 < r < 0.242776
   95% expected band : 0.242776 < r < 0.242776
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -444725372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.184134 +/- 0.00341239 @ 95% CL (97 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.184134 @ 95%CL (1 toyMC)
median expected limit: r < 0.184134 @ 95%CL (1 toyMC)
   68% expected band : 0.184134 < r < 0.184134
   95% expected band : 0.184134 < r < 0.184134
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1967530986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.188529 +/- 0.00345322 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.188529 @ 95%CL (1 toyMC)
median expected limit: r < 0.188529 @ 95%CL (1 toyMC)
   68% expected band : 0.188529 < r < 0.188529
   95% expected band : 0.188529 < r < 0.188529
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -142653860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20618 +/- 0.0035266 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.20618 @ 95%CL (1 toyMC)
median expected limit: r < 0.20618 @ 95%CL (1 toyMC)
   68% expected band : 0.20618 < r < 0.20618
   95% expected band : 0.20618 < r < 0.20618
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -235508514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186988 +/- 0.00327837 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.186988 @ 95%CL (1 toyMC)
median expected limit: r < 0.186988 @ 95%CL (1 toyMC)
   68% expected band : 0.186988 < r < 0.186988
   95% expected band : 0.186988 < r < 0.186988
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -140959630
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.354236 +/- 0.00216627 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.354236 @ 95%CL (1 toyMC)
median expected limit: r < 0.354236 @ 95%CL (1 toyMC)
   68% expected band : 0.354236 < r < 0.354236
   95% expected band : 0.354236 < r < 0.354236
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1783315160
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.259161 +/- 0.00199291 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.259161 @ 95%CL (1 toyMC)
median expected limit: r < 0.259161 @ 95%CL (1 toyMC)
   68% expected band : 0.259161 < r < 0.259161
   95% expected band : 0.259161 < r < 0.259161
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1459941988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251847 +/- 0.00284691 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.251847 @ 95%CL (1 toyMC)
median expected limit: r < 0.251847 @ 95%CL (1 toyMC)
   68% expected band : 0.251847 < r < 0.251847
   95% expected band : 0.251847 < r < 0.251847
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2107051113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253445 +/- 0.00241438 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.253445 @ 95%CL (1 toyMC)
median expected limit: r < 0.253445 @ 95%CL (1 toyMC)
   68% expected band : 0.253445 < r < 0.253445
   95% expected band : 0.253445 < r < 0.253445
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1506921537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261857 +/- 0.00228038 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.261857 @ 95%CL (1 toyMC)
median expected limit: r < 0.261857 @ 95%CL (1 toyMC)
   68% expected band : 0.261857 < r < 0.261857
   95% expected band : 0.261857 < r < 0.261857
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1963991335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.414116 +/- 0.00175177 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.414116 @ 95%CL (1 toyMC)
median expected limit: r < 0.414116 @ 95%CL (1 toyMC)
   68% expected band : 0.414116 < r < 0.414116
   95% expected band : 0.414116 < r < 0.414116
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -641277739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.328618 +/- 0.00211825 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.328618 @ 95%CL (1 toyMC)
median expected limit: r < 0.328618 @ 95%CL (1 toyMC)
   68% expected band : 0.328618 < r < 0.328618
   95% expected band : 0.328618 < r < 0.328618
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1775165151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.18638 +/- 0.00406237 @ 95% CL (98 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.18638 @ 95%CL (1 toyMC)
median expected limit: r < 0.18638 @ 95%CL (1 toyMC)
   68% expected band : 0.18638 < r < 0.18638
   95% expected band : 0.18638 < r < 0.18638
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1095963311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.340723 +/- 0.00180488 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.340723 @ 95%CL (1 toyMC)
median expected limit: r < 0.340723 @ 95%CL (1 toyMC)
   68% expected band : 0.340723 < r < 0.340723
   95% expected band : 0.340723 < r < 0.340723
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2026760971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.30369 +/- 0.00243897 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.30369 @ 95%CL (1 toyMC)
median expected limit: r < 0.30369 @ 95%CL (1 toyMC)
   68% expected band : 0.30369 < r < 0.30369
   95% expected band : 0.30369 < r < 0.30369
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -978217180
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.42147 +/- 0.00225277 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.42147 @ 95%CL (1 toyMC)
median expected limit: r < 0.42147 @ 95%CL (1 toyMC)
   68% expected band : 0.42147 < r < 0.42147
   95% expected band : 0.42147 < r < 0.42147
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1834345700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.347428 +/- 0.00236151 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.347428 @ 95%CL (1 toyMC)
median expected limit: r < 0.347428 @ 95%CL (1 toyMC)
   68% expected band : 0.347428 < r < 0.347428
   95% expected band : 0.347428 < r < 0.347428
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -819977897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.314461 +/- 0.00223268 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.314461 @ 95%CL (1 toyMC)
median expected limit: r < 0.314461 @ 95%CL (1 toyMC)
   68% expected band : 0.314461 < r < 0.314461
   95% expected band : 0.314461 < r < 0.314461
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -36653286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244797 +/- 0.00255476 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.244797 @ 95%CL (1 toyMC)
median expected limit: r < 0.244797 @ 95%CL (1 toyMC)
   68% expected band : 0.244797 < r < 0.244797
   95% expected band : 0.244797 < r < 0.244797
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1383470699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.265101 +/- 0.0023955 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.265101 @ 95%CL (1 toyMC)
median expected limit: r < 0.265101 @ 95%CL (1 toyMC)
   68% expected band : 0.265101 < r < 0.265101
   95% expected band : 0.265101 < r < 0.265101
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -433166012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251073 +/- 0.00272206 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.251073 @ 95%CL (1 toyMC)
median expected limit: r < 0.251073 @ 95%CL (1 toyMC)
   68% expected band : 0.251073 < r < 0.251073
   95% expected band : 0.251073 < r < 0.251073
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1097150524
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.188638 +/- 0.00293539 @ 95% CL (99 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.188638 @ 95%CL (1 toyMC)
median expected limit: r < 0.188638 @ 95%CL (1 toyMC)
   68% expected band : 0.188638 < r < 0.188638
   95% expected band : 0.188638 < r < 0.188638
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 149746456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.296678 +/- 0.00252055 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.296678 @ 95%CL (1 toyMC)
median expected limit: r < 0.296678 @ 95%CL (1 toyMC)
   68% expected band : 0.296678 < r < 0.296678
   95% expected band : 0.296678 < r < 0.296678
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1220528694
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226899 +/- 0.00257295 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.226899 @ 95%CL (1 toyMC)
median expected limit: r < 0.226899 @ 95%CL (1 toyMC)
   68% expected band : 0.226899 < r < 0.226899
   95% expected band : 0.226899 < r < 0.226899
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1263017357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20989 +/- 0.00260232 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.20989 @ 95%CL (1 toyMC)
median expected limit: r < 0.20989 @ 95%CL (1 toyMC)
   68% expected band : 0.20989 < r < 0.20989
   95% expected band : 0.20989 < r < 0.20989
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1230413509
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212294 +/- 0.00334988 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.212294 @ 95%CL (1 toyMC)
median expected limit: r < 0.212294 @ 95%CL (1 toyMC)
   68% expected band : 0.212294 < r < 0.212294
   95% expected band : 0.212294 < r < 0.212294
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2053601566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.295433 +/- 0.00252411 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.295433 @ 95%CL (1 toyMC)
median expected limit: r < 0.295433 @ 95%CL (1 toyMC)
   68% expected band : 0.295433 < r < 0.295433
   95% expected band : 0.295433 < r < 0.295433
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -425504969
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.336786 +/- 0.0023418 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.336786 @ 95%CL (1 toyMC)
median expected limit: r < 0.336786 @ 95%CL (1 toyMC)
   68% expected band : 0.336786 < r < 0.336786
   95% expected band : 0.336786 < r < 0.336786
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1201933438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.258837 +/- 0.00230583 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.258837 @ 95%CL (1 toyMC)
median expected limit: r < 0.258837 @ 95%CL (1 toyMC)
   68% expected band : 0.258837 < r < 0.258837
   95% expected band : 0.258837 < r < 0.258837
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2094431684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238005 +/- 0.00230228 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.238005 @ 95%CL (1 toyMC)
median expected limit: r < 0.238005 @ 95%CL (1 toyMC)
   68% expected band : 0.238005 < r < 0.238005
   95% expected band : 0.238005 < r < 0.238005
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -89181726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.405405 +/- 0.00222093 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.405405 @ 95%CL (1 toyMC)
median expected limit: r < 0.405405 @ 95%CL (1 toyMC)
   68% expected band : 0.405405 < r < 0.405405
   95% expected band : 0.405405 < r < 0.405405
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 288472674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.366229 +/- 0.0026203 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.366229 @ 95%CL (1 toyMC)
median expected limit: r < 0.366229 @ 95%CL (1 toyMC)
   68% expected band : 0.366229 < r < 0.366229
   95% expected band : 0.366229 < r < 0.366229
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 498975988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210323 +/- 0.00324382 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.210323 @ 95%CL (1 toyMC)
median expected limit: r < 0.210323 @ 95%CL (1 toyMC)
   68% expected band : 0.210323 < r < 0.210323
   95% expected band : 0.210323 < r < 0.210323
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1789660217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20291 +/- 0.00275221 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.20291 @ 95%CL (1 toyMC)
median expected limit: r < 0.20291 @ 95%CL (1 toyMC)
   68% expected band : 0.20291 < r < 0.20291
   95% expected band : 0.20291 < r < 0.20291
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -797442189
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190006 +/- 0.00318407 @ 95% CL (98 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.190006 @ 95%CL (1 toyMC)
median expected limit: r < 0.190006 @ 95%CL (1 toyMC)
   68% expected band : 0.190006 < r < 0.190006
   95% expected band : 0.190006 < r < 0.190006
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1818977072
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248721 +/- 0.00262315 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.248721 @ 95%CL (1 toyMC)
median expected limit: r < 0.248721 @ 95%CL (1 toyMC)
   68% expected band : 0.248721 < r < 0.248721
   95% expected band : 0.248721 < r < 0.248721
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1294876217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.257885 +/- 0.00193344 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.257885 @ 95%CL (1 toyMC)
median expected limit: r < 0.257885 @ 95%CL (1 toyMC)
   68% expected band : 0.257885 < r < 0.257885
   95% expected band : 0.257885 < r < 0.257885
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2138966107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.351235 +/- 0.00153324 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.351235 @ 95%CL (1 toyMC)
median expected limit: r < 0.351235 @ 95%CL (1 toyMC)
   68% expected band : 0.351235 < r < 0.351235
   95% expected band : 0.351235 < r < 0.351235
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1803044393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212909 +/- 0.00344187 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.212909 @ 95%CL (1 toyMC)
median expected limit: r < 0.212909 @ 95%CL (1 toyMC)
   68% expected band : 0.212909 < r < 0.212909
   95% expected band : 0.212909 < r < 0.212909
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1494696601
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.205913 +/- 0.00322848 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.205913 @ 95%CL (1 toyMC)
median expected limit: r < 0.205913 @ 95%CL (1 toyMC)
   68% expected band : 0.205913 < r < 0.205913
   95% expected band : 0.205913 < r < 0.205913
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 694945258
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.21564 +/- 0.00300557 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.21564 @ 95%CL (1 toyMC)
median expected limit: r < 0.21564 @ 95%CL (1 toyMC)
   68% expected band : 0.21564 < r < 0.21564
   95% expected band : 0.21564 < r < 0.21564
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1095963311.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1097150524.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1201933438.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1220528694.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1230413509.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1231491384.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1253518479.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1262235561.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-12846098.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1329234434.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1383470699.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-140959630.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-142653860.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1525798548.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1671784468.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1672812331.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1741658297.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1789660217.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1803044393.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1818244637.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1945614831.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1967530986.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1993945623.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-2018944712.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-2094431684.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-2107051113.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-2110677467.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-2138966107.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-235508514.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-36653286.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-425504969.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-433166012.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-444725372.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-474055427.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-509890779.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-544890813.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-561319792.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-619602123.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-641277739.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-701329689.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-797442189.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-819977897.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-872131326.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-89181726.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-956000823.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-978217180.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.1019349782.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.1196066313.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.1256769979.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.1263017357.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.1294876217.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.1367152775.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1459941988.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1486538399.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1494696601.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.149746456.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1506921537.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.151473569.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1599688900.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.160464569.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1648983811.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1700891924.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1746577445.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1746749650.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1775165151.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1783315160.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1818977072.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1834345700.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1892522222.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1911076186.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1963991335.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.2026760971.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.2040283841.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.2053601566.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.2078190466.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.223078138.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.249113944.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.271574108.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.288472674.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.299877256.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.349195894.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.394407038.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.438254238.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.450436150.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.479569416.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.498975988.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.516416353.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.612975756.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.634583961.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.646920186.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.691600140.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.694945258.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.696373967.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.747678095.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.766858909.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.819892108.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.876427347.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.879258369.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.958661585.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.961746532.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1827879347
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25226 +/- 0.00209981 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.25226 @ 95%CL (1 toyMC)
median expected limit: r < 0.25226 @ 95%CL (1 toyMC)
   68% expected band : 0.25226 < r < 0.25226
   95% expected band : 0.25226 < r < 0.25226
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1139238240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300952 +/- 0.0020245 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.300952 @ 95%CL (1 toyMC)
median expected limit: r < 0.300952 @ 95%CL (1 toyMC)
   68% expected band : 0.300952 < r < 0.300952
   95% expected band : 0.300952 < r < 0.300952
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2006074164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.327196 +/- 0.00288643 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.327196 @ 95%CL (1 toyMC)
median expected limit: r < 0.327196 @ 95%CL (1 toyMC)
   68% expected band : 0.327196 < r < 0.327196
   95% expected band : 0.327196 < r < 0.327196
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1295508512
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.175148 +/- 0.00390467 @ 95% CL (98 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.175148 @ 95%CL (1 toyMC)
median expected limit: r < 0.175148 @ 95%CL (1 toyMC)
   68% expected band : 0.175148 < r < 0.175148
   95% expected band : 0.175148 < r < 0.175148
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -434959566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.265143 +/- 0.00291566 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.265143 @ 95%CL (1 toyMC)
median expected limit: r < 0.265143 @ 95%CL (1 toyMC)
   68% expected band : 0.265143 < r < 0.265143
   95% expected band : 0.265143 < r < 0.265143
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 846060481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272489 +/- 0.00204798 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.272489 @ 95%CL (1 toyMC)
median expected limit: r < 0.272489 @ 95%CL (1 toyMC)
   68% expected band : 0.272489 < r < 0.272489
   95% expected band : 0.272489 < r < 0.272489
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1978378711
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.181541 +/- 0.0031621 @ 95% CL (99 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.181541 @ 95%CL (1 toyMC)
median expected limit: r < 0.181541 @ 95%CL (1 toyMC)
   68% expected band : 0.181541 < r < 0.181541
   95% expected band : 0.181541 < r < 0.181541
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1055302102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240765 +/- 0.00319924 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.240765 @ 95%CL (1 toyMC)
median expected limit: r < 0.240765 @ 95%CL (1 toyMC)
   68% expected band : 0.240765 < r < 0.240765
   95% expected band : 0.240765 < r < 0.240765
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -547271375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.347557 +/- 0.00185223 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.347557 @ 95%CL (1 toyMC)
median expected limit: r < 0.347557 @ 95%CL (1 toyMC)
   68% expected band : 0.347557 < r < 0.347557
   95% expected band : 0.347557 < r < 0.347557
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -880236238
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226096 +/- 0.00296297 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.226096 @ 95%CL (1 toyMC)
median expected limit: r < 0.226096 @ 95%CL (1 toyMC)
   68% expected band : 0.226096 < r < 0.226096
   95% expected band : 0.226096 < r < 0.226096
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 306004009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.202412 +/- 0.00268485 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.202412 @ 95%CL (1 toyMC)
median expected limit: r < 0.202412 @ 95%CL (1 toyMC)
   68% expected band : 0.202412 < r < 0.202412
   95% expected band : 0.202412 < r < 0.202412
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -168804333
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.331977 +/- 0.00215326 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.331977 @ 95%CL (1 toyMC)
median expected limit: r < 0.331977 @ 95%CL (1 toyMC)
   68% expected band : 0.331977 < r < 0.331977
   95% expected band : 0.331977 < r < 0.331977
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1666253697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234727 +/- 0.00290573 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.234727 @ 95%CL (1 toyMC)
median expected limit: r < 0.234727 @ 95%CL (1 toyMC)
   68% expected band : 0.234727 < r < 0.234727
   95% expected band : 0.234727 < r < 0.234727
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1257478181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.339458 +/- 0.00192965 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.339458 @ 95%CL (1 toyMC)
median expected limit: r < 0.339458 @ 95%CL (1 toyMC)
   68% expected band : 0.339458 < r < 0.339458
   95% expected band : 0.339458 < r < 0.339458
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2085958216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189064 +/- 0.00361577 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.189064 @ 95%CL (1 toyMC)
median expected limit: r < 0.189064 @ 95%CL (1 toyMC)
   68% expected band : 0.189064 < r < 0.189064
   95% expected band : 0.189064 < r < 0.189064
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -582194013
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.370766 +/- 0.00201028 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.370766 @ 95%CL (1 toyMC)
median expected limit: r < 0.370766 @ 95%CL (1 toyMC)
   68% expected band : 0.370766 < r < 0.370766
   95% expected band : 0.370766 < r < 0.370766
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 152918156
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.209335 +/- 0.00256236 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.209335 @ 95%CL (1 toyMC)
median expected limit: r < 0.209335 @ 95%CL (1 toyMC)
   68% expected band : 0.209335 < r < 0.209335
   95% expected band : 0.209335 < r < 0.209335
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1882869588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210192 +/- 0.00248626 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.210192 @ 95%CL (1 toyMC)
median expected limit: r < 0.210192 @ 95%CL (1 toyMC)
   68% expected band : 0.210192 < r < 0.210192
   95% expected band : 0.210192 < r < 0.210192
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1452750781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224108 +/- 0.00248049 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.224108 @ 95%CL (1 toyMC)
median expected limit: r < 0.224108 @ 95%CL (1 toyMC)
   68% expected band : 0.224108 < r < 0.224108
   95% expected band : 0.224108 < r < 0.224108
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2036224521
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216387 +/- 0.00303881 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.216387 @ 95%CL (1 toyMC)
median expected limit: r < 0.216387 @ 95%CL (1 toyMC)
   68% expected band : 0.216387 < r < 0.216387
   95% expected band : 0.216387 < r < 0.216387
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 339151887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261541 +/- 0.00238089 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.261541 @ 95%CL (1 toyMC)
median expected limit: r < 0.261541 @ 95%CL (1 toyMC)
   68% expected band : 0.261541 < r < 0.261541
   95% expected band : 0.261541 < r < 0.261541
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1271669916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.178171 +/- 0.00346887 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.178171 @ 95%CL (1 toyMC)
median expected limit: r < 0.178171 @ 95%CL (1 toyMC)
   68% expected band : 0.178171 < r < 0.178171
   95% expected band : 0.178171 < r < 0.178171
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 465113655
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189608 +/- 0.00352554 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.189608 @ 95%CL (1 toyMC)
median expected limit: r < 0.189608 @ 95%CL (1 toyMC)
   68% expected band : 0.189608 < r < 0.189608
   95% expected band : 0.189608 < r < 0.189608
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1340285242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226628 +/- 0.00283023 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.226628 @ 95%CL (1 toyMC)
median expected limit: r < 0.226628 @ 95%CL (1 toyMC)
   68% expected band : 0.226628 < r < 0.226628
   95% expected band : 0.226628 < r < 0.226628
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1104239771
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.273424 +/- 0.00248479 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.273424 @ 95%CL (1 toyMC)
median expected limit: r < 0.273424 @ 95%CL (1 toyMC)
   68% expected band : 0.273424 < r < 0.273424
   95% expected band : 0.273424 < r < 0.273424
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1662862945
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.348297 +/- 0.0023297 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.348297 @ 95%CL (1 toyMC)
median expected limit: r < 0.348297 @ 95%CL (1 toyMC)
   68% expected band : 0.348297 < r < 0.348297
   95% expected band : 0.348297 < r < 0.348297
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 916077838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.17455 +/- 0.00531309 @ 95% CL (89 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.17455 @ 95%CL (1 toyMC)
median expected limit: r < 0.17455 @ 95%CL (1 toyMC)
   68% expected band : 0.17455 < r < 0.17455
   95% expected band : 0.17455 < r < 0.17455
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -555085232
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.201376 +/- 0.00332194 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.201376 @ 95%CL (1 toyMC)
median expected limit: r < 0.201376 @ 95%CL (1 toyMC)
   68% expected band : 0.201376 < r < 0.201376
   95% expected band : 0.201376 < r < 0.201376
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1752243491
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304477 +/- 0.00237145 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.304477 @ 95%CL (1 toyMC)
median expected limit: r < 0.304477 @ 95%CL (1 toyMC)
   68% expected band : 0.304477 < r < 0.304477
   95% expected band : 0.304477 < r < 0.304477
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1980014005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.183395 +/- 0.00278826 @ 95% CL (97 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.183395 @ 95%CL (1 toyMC)
median expected limit: r < 0.183395 @ 95%CL (1 toyMC)
   68% expected band : 0.183395 < r < 0.183395
   95% expected band : 0.183395 < r < 0.183395
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1381393736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.211608 +/- 0.00344667 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.211608 @ 95%CL (1 toyMC)
median expected limit: r < 0.211608 @ 95%CL (1 toyMC)
   68% expected band : 0.211608 < r < 0.211608
   95% expected band : 0.211608 < r < 0.211608
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -936723360
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260791 +/- 0.00238114 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.260791 @ 95%CL (1 toyMC)
median expected limit: r < 0.260791 @ 95%CL (1 toyMC)
   68% expected band : 0.260791 < r < 0.260791
   95% expected band : 0.260791 < r < 0.260791
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -740663186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.205448 +/- 0.00309489 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.205448 @ 95%CL (1 toyMC)
median expected limit: r < 0.205448 @ 95%CL (1 toyMC)
   68% expected band : 0.205448 < r < 0.205448
   95% expected band : 0.205448 < r < 0.205448
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1309462335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.318046 +/- 0.00284312 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.318046 @ 95%CL (1 toyMC)
median expected limit: r < 0.318046 @ 95%CL (1 toyMC)
   68% expected band : 0.318046 < r < 0.318046
   95% expected band : 0.318046 < r < 0.318046
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -192898938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247832 +/- 0.0031824 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.247832 @ 95%CL (1 toyMC)
median expected limit: r < 0.247832 @ 95%CL (1 toyMC)
   68% expected band : 0.247832 < r < 0.247832
   95% expected band : 0.247832 < r < 0.247832
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1052077927
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224372 +/- 0.00291426 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.224372 @ 95%CL (1 toyMC)
median expected limit: r < 0.224372 @ 95%CL (1 toyMC)
   68% expected band : 0.224372 < r < 0.224372
   95% expected band : 0.224372 < r < 0.224372
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 825461135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.159631 +/- 0.00448488 @ 95% CL (87 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 0.159631 @ 95%CL (1 toyMC)
median expected limit: r < 0.159631 @ 95%CL (1 toyMC)
   68% expected band : 0.159631 < r < 0.159631
   95% expected band : 0.159631 < r < 0.159631
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -582188810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.366037 +/- 0.00291318 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.366037 @ 95%CL (1 toyMC)
median expected limit: r < 0.366037 @ 95%CL (1 toyMC)
   68% expected band : 0.366037 < r < 0.366037
   95% expected band : 0.366037 < r < 0.366037
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 41107264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216108 +/- 0.00287996 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.216108 @ 95%CL (1 toyMC)
median expected limit: r < 0.216108 @ 95%CL (1 toyMC)
   68% expected band : 0.216108 < r < 0.216108
   95% expected band : 0.216108 < r < 0.216108
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -728436266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.193778 +/- 0.00348102 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.193778 @ 95%CL (1 toyMC)
median expected limit: r < 0.193778 @ 95%CL (1 toyMC)
   68% expected band : 0.193778 < r < 0.193778
   95% expected band : 0.193778 < r < 0.193778
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 315905484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248727 +/- 0.0026351 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.248727 @ 95%CL (1 toyMC)
median expected limit: r < 0.248727 @ 95%CL (1 toyMC)
   68% expected band : 0.248727 < r < 0.248727
   95% expected band : 0.248727 < r < 0.248727
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 507024834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28426 +/- 0.00240854 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.28426 @ 95%CL (1 toyMC)
median expected limit: r < 0.28426 @ 95%CL (1 toyMC)
   68% expected band : 0.28426 < r < 0.28426
   95% expected band : 0.28426 < r < 0.28426
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1626021519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.267036 +/- 0.00268295 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.267036 @ 95%CL (1 toyMC)
median expected limit: r < 0.267036 @ 95%CL (1 toyMC)
   68% expected band : 0.267036 < r < 0.267036
   95% expected band : 0.267036 < r < 0.267036
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 712139231
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.267926 +/- 0.00210528 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.267926 @ 95%CL (1 toyMC)
median expected limit: r < 0.267926 @ 95%CL (1 toyMC)
   68% expected band : 0.267926 < r < 0.267926
   95% expected band : 0.267926 < r < 0.267926
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 820241811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.207971 +/- 0.00299645 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.207971 @ 95%CL (1 toyMC)
median expected limit: r < 0.207971 @ 95%CL (1 toyMC)
   68% expected band : 0.207971 < r < 0.207971
   95% expected band : 0.207971 < r < 0.207971
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -560669084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.203039 +/- 0.00301612 @ 95% CL (98 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.203039 @ 95%CL (1 toyMC)
median expected limit: r < 0.203039 @ 95%CL (1 toyMC)
   68% expected band : 0.203039 < r < 0.203039
   95% expected band : 0.203039 < r < 0.203039
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1140667656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284917 +/- 0.00246802 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.284917 @ 95%CL (1 toyMC)
median expected limit: r < 0.284917 @ 95%CL (1 toyMC)
   68% expected band : 0.284917 < r < 0.284917
   95% expected band : 0.284917 < r < 0.284917
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -186214535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189769 +/- 0.00285496 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.189769 @ 95%CL (1 toyMC)
median expected limit: r < 0.189769 @ 95%CL (1 toyMC)
   68% expected band : 0.189769 < r < 0.189769
   95% expected band : 0.189769 < r < 0.189769
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -795846492
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.274202 +/- 0.00247023 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.274202 @ 95%CL (1 toyMC)
median expected limit: r < 0.274202 @ 95%CL (1 toyMC)
   68% expected band : 0.274202 < r < 0.274202
   95% expected band : 0.274202 < r < 0.274202
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1918756407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268346 +/- 0.00218772 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.268346 @ 95%CL (1 toyMC)
median expected limit: r < 0.268346 @ 95%CL (1 toyMC)
   68% expected band : 0.268346 < r < 0.268346
   95% expected band : 0.268346 < r < 0.268346
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1519575170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.290178 +/- 0.00222155 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.290178 @ 95%CL (1 toyMC)
median expected limit: r < 0.290178 @ 95%CL (1 toyMC)
   68% expected band : 0.290178 < r < 0.290178
   95% expected band : 0.290178 < r < 0.290178
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -153482924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.324474 +/- 0.00243217 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.324474 @ 95%CL (1 toyMC)
median expected limit: r < 0.324474 @ 95%CL (1 toyMC)
   68% expected band : 0.324474 < r < 0.324474
   95% expected band : 0.324474 < r < 0.324474
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1300699570
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.271802 +/- 0.00266206 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.271802 @ 95%CL (1 toyMC)
median expected limit: r < 0.271802 @ 95%CL (1 toyMC)
   68% expected band : 0.271802 < r < 0.271802
   95% expected band : 0.271802 < r < 0.271802
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2079640700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.256984 +/- 0.0030348 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.256984 @ 95%CL (1 toyMC)
median expected limit: r < 0.256984 @ 95%CL (1 toyMC)
   68% expected band : 0.256984 < r < 0.256984
   95% expected band : 0.256984 < r < 0.256984
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 349293828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.302105 +/- 0.00222666 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.302105 @ 95%CL (1 toyMC)
median expected limit: r < 0.302105 @ 95%CL (1 toyMC)
   68% expected band : 0.302105 < r < 0.302105
   95% expected band : 0.302105 < r < 0.302105
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1014689880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.367689 +/- 0.00261386 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.367689 @ 95%CL (1 toyMC)
median expected limit: r < 0.367689 @ 95%CL (1 toyMC)
   68% expected band : 0.367689 < r < 0.367689
   95% expected band : 0.367689 < r < 0.367689
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -488792541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.396526 +/- 0.00244179 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.396526 @ 95%CL (1 toyMC)
median expected limit: r < 0.396526 @ 95%CL (1 toyMC)
   68% expected band : 0.396526 < r < 0.396526
   95% expected band : 0.396526 < r < 0.396526
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -967112126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.454114 +/- 0.0020256 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.454114 @ 95%CL (1 toyMC)
median expected limit: r < 0.454114 @ 95%CL (1 toyMC)
   68% expected band : 0.454114 < r < 0.454114
   95% expected band : 0.454114 < r < 0.454114
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 734192452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.410527 +/- 0.00254623 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.410527 @ 95%CL (1 toyMC)
median expected limit: r < 0.410527 @ 95%CL (1 toyMC)
   68% expected band : 0.410527 < r < 0.410527
   95% expected band : 0.410527 < r < 0.410527
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 879978752
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22961 +/- 0.00300025 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.22961 @ 95%CL (1 toyMC)
median expected limit: r < 0.22961 @ 95%CL (1 toyMC)
   68% expected band : 0.22961 < r < 0.22961
   95% expected band : 0.22961 < r < 0.22961
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1792362692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.185721 +/- 0.00308381 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.185721 @ 95%CL (1 toyMC)
median expected limit: r < 0.185721 @ 95%CL (1 toyMC)
   68% expected band : 0.185721 < r < 0.185721
   95% expected band : 0.185721 < r < 0.185721
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -95658355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.256942 +/- 0.00231036 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.256942 @ 95%CL (1 toyMC)
median expected limit: r < 0.256942 @ 95%CL (1 toyMC)
   68% expected band : 0.256942 < r < 0.256942
   95% expected band : 0.256942 < r < 0.256942
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -841339378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39418 +/- 0.00223998 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.39418 @ 95%CL (1 toyMC)
median expected limit: r < 0.39418 @ 95%CL (1 toyMC)
   68% expected band : 0.39418 < r < 0.39418
   95% expected band : 0.39418 < r < 0.39418
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 684167415
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388222 +/- 0.001696 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.388222 @ 95%CL (1 toyMC)
median expected limit: r < 0.388222 @ 95%CL (1 toyMC)
   68% expected band : 0.388222 < r < 0.388222
   95% expected band : 0.388222 < r < 0.388222
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1295940993
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236928 +/- 0.00299349 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.236928 @ 95%CL (1 toyMC)
median expected limit: r < 0.236928 @ 95%CL (1 toyMC)
   68% expected band : 0.236928 < r < 0.236928
   95% expected band : 0.236928 < r < 0.236928
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -245392838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.308696 +/- 0.00220075 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.308696 @ 95%CL (1 toyMC)
median expected limit: r < 0.308696 @ 95%CL (1 toyMC)
   68% expected band : 0.308696 < r < 0.308696
   95% expected band : 0.308696 < r < 0.308696
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1610851367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242914 +/- 0.00261007 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.242914 @ 95%CL (1 toyMC)
median expected limit: r < 0.242914 @ 95%CL (1 toyMC)
   68% expected band : 0.242914 < r < 0.242914
   95% expected band : 0.242914 < r < 0.242914
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1425471638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.181733 +/- 0.00399294 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.181733 @ 95%CL (1 toyMC)
median expected limit: r < 0.181733 @ 95%CL (1 toyMC)
   68% expected band : 0.181733 < r < 0.181733
   95% expected band : 0.181733 < r < 0.181733
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 571387694
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.310871 +/- 0.00276828 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.310871 @ 95%CL (1 toyMC)
median expected limit: r < 0.310871 @ 95%CL (1 toyMC)
   68% expected band : 0.310871 < r < 0.310871
   95% expected band : 0.310871 < r < 0.310871
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1592281849
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.203171 +/- 0.00347061 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.203171 @ 95%CL (1 toyMC)
median expected limit: r < 0.203171 @ 95%CL (1 toyMC)
   68% expected band : 0.203171 < r < 0.203171
   95% expected band : 0.203171 < r < 0.203171
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1744503947
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22455 +/- 0.00293289 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.22455 @ 95%CL (1 toyMC)
median expected limit: r < 0.22455 @ 95%CL (1 toyMC)
   68% expected band : 0.22455 < r < 0.22455
   95% expected band : 0.22455 < r < 0.22455
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2000052620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.254502 +/- 0.0027316 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.254502 @ 95%CL (1 toyMC)
median expected limit: r < 0.254502 @ 95%CL (1 toyMC)
   68% expected band : 0.254502 < r < 0.254502
   95% expected band : 0.254502 < r < 0.254502
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2071731994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.528143 +/- 0.0020488 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.528143 @ 95%CL (1 toyMC)
median expected limit: r < 0.528143 @ 95%CL (1 toyMC)
   68% expected band : 0.528143 < r < 0.528143
   95% expected band : 0.528143 < r < 0.528143
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1017126537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.275963 +/- 0.00252222 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.275963 @ 95%CL (1 toyMC)
median expected limit: r < 0.275963 @ 95%CL (1 toyMC)
   68% expected band : 0.275963 < r < 0.275963
   95% expected band : 0.275963 < r < 0.275963
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1543979915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194614 +/- 0.00321546 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.194614 @ 95%CL (1 toyMC)
median expected limit: r < 0.194614 @ 95%CL (1 toyMC)
   68% expected band : 0.194614 < r < 0.194614
   95% expected band : 0.194614 < r < 0.194614
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -46770979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.19377 +/- 0.00288978 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.19377 @ 95%CL (1 toyMC)
median expected limit: r < 0.19377 @ 95%CL (1 toyMC)
   68% expected band : 0.19377 < r < 0.19377
   95% expected band : 0.19377 < r < 0.19377
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 98849985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.333837 +/- 0.00210354 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.333837 @ 95%CL (1 toyMC)
median expected limit: r < 0.333837 @ 95%CL (1 toyMC)
   68% expected band : 0.333837 < r < 0.333837
   95% expected band : 0.333837 < r < 0.333837
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 176271940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.203539 +/- 0.00300965 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.203539 @ 95%CL (1 toyMC)
median expected limit: r < 0.203539 @ 95%CL (1 toyMC)
   68% expected band : 0.203539 < r < 0.203539
   95% expected band : 0.203539 < r < 0.203539
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 25222620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.198386 +/- 0.00373859 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.198386 @ 95%CL (1 toyMC)
median expected limit: r < 0.198386 @ 95%CL (1 toyMC)
   68% expected band : 0.198386 < r < 0.198386
   95% expected band : 0.198386 < r < 0.198386
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1087895511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.355772 +/- 0.00205954 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.355772 @ 95%CL (1 toyMC)
median expected limit: r < 0.355772 @ 95%CL (1 toyMC)
   68% expected band : 0.355772 < r < 0.355772
   95% expected band : 0.355772 < r < 0.355772
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -504799472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.322299 +/- 0.00174879 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.322299 @ 95%CL (1 toyMC)
median expected limit: r < 0.322299 @ 95%CL (1 toyMC)
   68% expected band : 0.322299 < r < 0.322299
   95% expected band : 0.322299 < r < 0.322299
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1768164871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260511 +/- 0.00238005 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.260511 @ 95%CL (1 toyMC)
median expected limit: r < 0.260511 @ 95%CL (1 toyMC)
   68% expected band : 0.260511 < r < 0.260511
   95% expected band : 0.260511 < r < 0.260511
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 524585133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.308836 +/- 0.00190608 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.308836 @ 95%CL (1 toyMC)
median expected limit: r < 0.308836 @ 95%CL (1 toyMC)
   68% expected band : 0.308836 < r < 0.308836
   95% expected band : 0.308836 < r < 0.308836
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1147075800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.333888 +/- 0.00205725 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.333888 @ 95%CL (1 toyMC)
median expected limit: r < 0.333888 @ 95%CL (1 toyMC)
   68% expected band : 0.333888 < r < 0.333888
   95% expected band : 0.333888 < r < 0.333888
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -567518174
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.173289 +/- 0.00289694 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.173289 @ 95%CL (1 toyMC)
median expected limit: r < 0.173289 @ 95%CL (1 toyMC)
   68% expected band : 0.173289 < r < 0.173289
   95% expected band : 0.173289 < r < 0.173289
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -354443534
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.363087 +/- 0.0027899 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.363087 @ 95%CL (1 toyMC)
median expected limit: r < 0.363087 @ 95%CL (1 toyMC)
   68% expected band : 0.363087 < r < 0.363087
   95% expected band : 0.363087 < r < 0.363087
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1315107776
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280505 +/- 0.00244473 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.280505 @ 95%CL (1 toyMC)
median expected limit: r < 0.280505 @ 95%CL (1 toyMC)
   68% expected band : 0.280505 < r < 0.280505
   95% expected band : 0.280505 < r < 0.280505
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2084607526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248762 +/- 0.00197118 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.248762 @ 95%CL (1 toyMC)
median expected limit: r < 0.248762 @ 95%CL (1 toyMC)
   68% expected band : 0.248762 < r < 0.248762
   95% expected band : 0.248762 < r < 0.248762
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 54253593
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224217 +/- 0.00300947 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.224217 @ 95%CL (1 toyMC)
median expected limit: r < 0.224217 @ 95%CL (1 toyMC)
   68% expected band : 0.224217 < r < 0.224217
   95% expected band : 0.224217 < r < 0.224217
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1022607311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.266764 +/- 0.0024912 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.266764 @ 95%CL (1 toyMC)
median expected limit: r < 0.266764 @ 95%CL (1 toyMC)
   68% expected band : 0.266764 < r < 0.266764
   95% expected band : 0.266764 < r < 0.266764
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1259888614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.797257 +/- 0.00244346 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.797257 @ 95%CL (1 toyMC)
median expected limit: r < 0.797257 @ 95%CL (1 toyMC)
   68% expected band : 0.797257 < r < 0.797257
   95% expected band : 0.797257 < r < 0.797257
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1487141426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212401 +/- 0.00240225 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.212401 @ 95%CL (1 toyMC)
median expected limit: r < 0.212401 @ 95%CL (1 toyMC)
   68% expected band : 0.212401 < r < 0.212401
   95% expected band : 0.212401 < r < 0.212401
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 606380680
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186059 +/- 0.00361772 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.186059 @ 95%CL (1 toyMC)
median expected limit: r < 0.186059 @ 95%CL (1 toyMC)
   68% expected band : 0.186059 < r < 0.186059
   95% expected band : 0.186059 < r < 0.186059
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -742757453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.41034 +/- 0.00209155 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.41034 @ 95%CL (1 toyMC)
median expected limit: r < 0.41034 @ 95%CL (1 toyMC)
   68% expected band : 0.41034 < r < 0.41034
   95% expected band : 0.41034 < r < 0.41034
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1071461784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288364 +/- 0.00274434 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.288364 @ 95%CL (1 toyMC)
median expected limit: r < 0.288364 @ 95%CL (1 toyMC)
   68% expected band : 0.288364 < r < 0.288364
   95% expected band : 0.288364 < r < 0.288364
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -114691529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226783 +/- 0.00200952 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.226783 @ 95%CL (1 toyMC)
median expected limit: r < 0.226783 @ 95%CL (1 toyMC)
   68% expected band : 0.226783 < r < 0.226783
   95% expected band : 0.226783 < r < 0.226783
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -533744963
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.275509 +/- 0.0022178 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.275509 @ 95%CL (1 toyMC)
median expected limit: r < 0.275509 @ 95%CL (1 toyMC)
   68% expected band : 0.275509 < r < 0.275509
   95% expected band : 0.275509 < r < 0.275509
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 162984321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.197592 +/- 0.0030713 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.197592 @ 95%CL (1 toyMC)
median expected limit: r < 0.197592 @ 95%CL (1 toyMC)
   68% expected band : 0.197592 < r < 0.197592
   95% expected band : 0.197592 < r < 0.197592
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1341084941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.375708 +/- 0.00208308 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.375708 @ 95%CL (1 toyMC)
median expected limit: r < 0.375708 @ 95%CL (1 toyMC)
   68% expected band : 0.375708 < r < 0.375708
   95% expected band : 0.375708 < r < 0.375708
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1365058300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.326934 +/- 0.00242799 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.326934 @ 95%CL (1 toyMC)
median expected limit: r < 0.326934 @ 95%CL (1 toyMC)
   68% expected band : 0.326934 < r < 0.326934
   95% expected band : 0.326934 < r < 0.326934
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1022607311.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1052077927.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1071461784.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1087895511.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-114691529.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1147075800.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1257478181.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1271669916.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1315107776.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1381393736.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1487141426.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-153482924.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1662862945.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1666253697.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-168804333.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1792362692.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-186214535.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1882869588.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1918756407.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-192898938.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-2000052620.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-2006074164.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-2079640700.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-2084607526.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-2085958216.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-245392838.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-354443534.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-434959566.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-46770979.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-488792541.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-504799472.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-533744963.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-547271375.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-555085232.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-560669084.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-567518174.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-582188810.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-582194013.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-728436266.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-740663186.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-742757453.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-795846492.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-841339378.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-880236238.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-936723360.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-95658355.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-967112126.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.1014689880.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.1017126537.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.1055302102.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.1104239771.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.1139238240.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1140667656.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1259888614.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1295508512.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1295940993.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1300699570.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1309462335.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1340285242.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1341084941.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1365058300.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1425471638.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1452750781.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1519575170.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.152918156.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1543979915.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1592281849.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1610851367.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1626021519.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.162984321.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1744503947.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1752243491.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.176271940.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1768164871.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1827879347.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.1978378711.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.1980014005.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.2036224521.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.2071731994.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.25222620.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.306004009.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.315905484.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.339151887.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.349293828.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.41107264.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.465113655.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.507024834.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.524585133.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.54253593.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.571387694.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.606380680.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.684167415.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.712139231.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.734192452.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.820241811.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.825461135.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.846060481.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.879978752.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.916077838.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.98849985.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 526082960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.33305 +/- 0.00174314 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.33305 @ 95%CL (1 toyMC)
median expected limit: r < 0.33305 @ 95%CL (1 toyMC)
   68% expected band : 0.33305 < r < 0.33305
   95% expected band : 0.33305 < r < 0.33305
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1683108765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255669 +/- 0.00233169 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.255669 @ 95%CL (1 toyMC)
median expected limit: r < 0.255669 @ 95%CL (1 toyMC)
   68% expected band : 0.255669 < r < 0.255669
   95% expected band : 0.255669 < r < 0.255669
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -103477917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.428377 +/- 0.00199958 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.428377 @ 95%CL (1 toyMC)
median expected limit: r < 0.428377 @ 95%CL (1 toyMC)
   68% expected band : 0.428377 < r < 0.428377
   95% expected band : 0.428377 < r < 0.428377
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1481435479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206454 +/- 0.00237455 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.206454 @ 95%CL (1 toyMC)
median expected limit: r < 0.206454 @ 95%CL (1 toyMC)
   68% expected band : 0.206454 < r < 0.206454
   95% expected band : 0.206454 < r < 0.206454
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 202184959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.292046 +/- 0.00277904 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.292046 @ 95%CL (1 toyMC)
median expected limit: r < 0.292046 @ 95%CL (1 toyMC)
   68% expected band : 0.292046 < r < 0.292046
   95% expected band : 0.292046 < r < 0.292046
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -238753152
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226184 +/- 0.00295532 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.226184 @ 95%CL (1 toyMC)
median expected limit: r < 0.226184 @ 95%CL (1 toyMC)
   68% expected band : 0.226184 < r < 0.226184
   95% expected band : 0.226184 < r < 0.226184
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 645453281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.526285 +/- 0.00255844 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.526285 @ 95%CL (1 toyMC)
median expected limit: r < 0.526285 @ 95%CL (1 toyMC)
   68% expected band : 0.526285 < r < 0.526285
   95% expected band : 0.526285 < r < 0.526285
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1109948475
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.227246 +/- 0.00272508 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.227246 @ 95%CL (1 toyMC)
median expected limit: r < 0.227246 @ 95%CL (1 toyMC)
   68% expected band : 0.227246 < r < 0.227246
   95% expected band : 0.227246 < r < 0.227246
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -265641370
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.49259 +/- 0.00215057 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.49259 @ 95%CL (1 toyMC)
median expected limit: r < 0.49259 @ 95%CL (1 toyMC)
   68% expected band : 0.49259 < r < 0.49259
   95% expected band : 0.49259 < r < 0.49259
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -462784293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.187695 +/- 0.00430026 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.187695 @ 95%CL (1 toyMC)
median expected limit: r < 0.187695 @ 95%CL (1 toyMC)
   68% expected band : 0.187695 < r < 0.187695
   95% expected band : 0.187695 < r < 0.187695
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1798622217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235643 +/- 0.00288348 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.235643 @ 95%CL (1 toyMC)
median expected limit: r < 0.235643 @ 95%CL (1 toyMC)
   68% expected band : 0.235643 < r < 0.235643
   95% expected band : 0.235643 < r < 0.235643
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 17982888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.207058 +/- 0.00343425 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.207058 @ 95%CL (1 toyMC)
median expected limit: r < 0.207058 @ 95%CL (1 toyMC)
   68% expected band : 0.207058 < r < 0.207058
   95% expected band : 0.207058 < r < 0.207058
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -290543111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.175131 +/- 0.00400731 @ 95% CL (96 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.175131 @ 95%CL (1 toyMC)
median expected limit: r < 0.175131 @ 95%CL (1 toyMC)
   68% expected band : 0.175131 < r < 0.175131
   95% expected band : 0.175131 < r < 0.175131
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2115087152
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.339964 +/- 0.00238034 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.339964 @ 95%CL (1 toyMC)
median expected limit: r < 0.339964 @ 95%CL (1 toyMC)
   68% expected band : 0.339964 < r < 0.339964
   95% expected band : 0.339964 < r < 0.339964
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1725537424
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.34634 +/- 0.00206417 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.34634 @ 95%CL (1 toyMC)
median expected limit: r < 0.34634 @ 95%CL (1 toyMC)
   68% expected band : 0.34634 < r < 0.34634
   95% expected band : 0.34634 < r < 0.34634
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1370275858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.185925 +/- 0.00376627 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.185925 @ 95%CL (1 toyMC)
median expected limit: r < 0.185925 @ 95%CL (1 toyMC)
   68% expected band : 0.185925 < r < 0.185925
   95% expected band : 0.185925 < r < 0.185925
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -633539610
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.698996 +/- 0.00203165 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.698996 @ 95%CL (1 toyMC)
median expected limit: r < 0.698996 @ 95%CL (1 toyMC)
   68% expected band : 0.698996 < r < 0.698996
   95% expected band : 0.698996 < r < 0.698996
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1342040864
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.35916 +/- 0.00248775 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.35916 @ 95%CL (1 toyMC)
median expected limit: r < 0.35916 @ 95%CL (1 toyMC)
   68% expected band : 0.35916 < r < 0.35916
   95% expected band : 0.35916 < r < 0.35916
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -283274584
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.415854 +/- 0.00173113 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.415854 @ 95%CL (1 toyMC)
median expected limit: r < 0.415854 @ 95%CL (1 toyMC)
   68% expected band : 0.415854 < r < 0.415854
   95% expected band : 0.415854 < r < 0.415854
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1967927115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.197758 +/- 0.00417736 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.197758 @ 95%CL (1 toyMC)
median expected limit: r < 0.197758 @ 95%CL (1 toyMC)
   68% expected band : 0.197758 < r < 0.197758
   95% expected band : 0.197758 < r < 0.197758
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1206032597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.183463 +/- 0.00510151 @ 95% CL (93 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.183463 @ 95%CL (1 toyMC)
median expected limit: r < 0.183463 @ 95%CL (1 toyMC)
   68% expected band : 0.183463 < r < 0.183463
   95% expected band : 0.183463 < r < 0.183463
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 932714042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.365975 +/- 0.00175392 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.365975 @ 95%CL (1 toyMC)
median expected limit: r < 0.365975 @ 95%CL (1 toyMC)
   68% expected band : 0.365975 < r < 0.365975
   95% expected band : 0.365975 < r < 0.365975
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1981433725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190942 +/- 0.00273775 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.190942 @ 95%CL (1 toyMC)
median expected limit: r < 0.190942 @ 95%CL (1 toyMC)
   68% expected band : 0.190942 < r < 0.190942
   95% expected band : 0.190942 < r < 0.190942
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -393089383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31718 +/- 0.00189068 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.31718 @ 95%CL (1 toyMC)
median expected limit: r < 0.31718 @ 95%CL (1 toyMC)
   68% expected band : 0.31718 < r < 0.31718
   95% expected band : 0.31718 < r < 0.31718
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1920498505
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204879 +/- 0.00337523 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.204879 @ 95%CL (1 toyMC)
median expected limit: r < 0.204879 @ 95%CL (1 toyMC)
   68% expected band : 0.204879 < r < 0.204879
   95% expected band : 0.204879 < r < 0.204879
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2035567739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.214527 +/- 0.00296179 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.214527 @ 95%CL (1 toyMC)
median expected limit: r < 0.214527 @ 95%CL (1 toyMC)
   68% expected band : 0.214527 < r < 0.214527
   95% expected band : 0.214527 < r < 0.214527
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2081785235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20626 +/- 0.0034445 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.20626 @ 95%CL (1 toyMC)
median expected limit: r < 0.20626 @ 95%CL (1 toyMC)
   68% expected band : 0.20626 < r < 0.20626
   95% expected band : 0.20626 < r < 0.20626
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2044660252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.259331 +/- 0.00222658 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.259331 @ 95%CL (1 toyMC)
median expected limit: r < 0.259331 @ 95%CL (1 toyMC)
   68% expected band : 0.259331 < r < 0.259331
   95% expected band : 0.259331 < r < 0.259331
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -808489617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.222829 +/- 0.00250378 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.222829 @ 95%CL (1 toyMC)
median expected limit: r < 0.222829 @ 95%CL (1 toyMC)
   68% expected band : 0.222829 < r < 0.222829
   95% expected band : 0.222829 < r < 0.222829
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 582972351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20349 +/- 0.00314136 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.20349 @ 95%CL (1 toyMC)
median expected limit: r < 0.20349 @ 95%CL (1 toyMC)
   68% expected band : 0.20349 < r < 0.20349
   95% expected band : 0.20349 < r < 0.20349
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1074101246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.193709 +/- 0.00350697 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.193709 @ 95%CL (1 toyMC)
median expected limit: r < 0.193709 @ 95%CL (1 toyMC)
   68% expected band : 0.193709 < r < 0.193709
   95% expected band : 0.193709 < r < 0.193709
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2039131270
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.239791 +/- 0.00239803 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.239791 @ 95%CL (1 toyMC)
median expected limit: r < 0.239791 @ 95%CL (1 toyMC)
   68% expected band : 0.239791 < r < 0.239791
   95% expected band : 0.239791 < r < 0.239791
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -278253518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.269098 +/- 0.00231808 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.269098 @ 95%CL (1 toyMC)
median expected limit: r < 0.269098 @ 95%CL (1 toyMC)
   68% expected band : 0.269098 < r < 0.269098
   95% expected band : 0.269098 < r < 0.269098
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -668500468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.202448 +/- 0.00314797 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.202448 @ 95%CL (1 toyMC)
median expected limit: r < 0.202448 @ 95%CL (1 toyMC)
   68% expected band : 0.202448 < r < 0.202448
   95% expected band : 0.202448 < r < 0.202448
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1377729665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280175 +/- 0.00243335 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.280175 @ 95%CL (1 toyMC)
median expected limit: r < 0.280175 @ 95%CL (1 toyMC)
   68% expected band : 0.280175 < r < 0.280175
   95% expected band : 0.280175 < r < 0.280175
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1212491893
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.202258 +/- 0.00350121 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.202258 @ 95%CL (1 toyMC)
median expected limit: r < 0.202258 @ 95%CL (1 toyMC)
   68% expected band : 0.202258 < r < 0.202258
   95% expected band : 0.202258 < r < 0.202258
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 410625560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.202034 +/- 0.00274155 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.202034 @ 95%CL (1 toyMC)
median expected limit: r < 0.202034 @ 95%CL (1 toyMC)
   68% expected band : 0.202034 < r < 0.202034
   95% expected band : 0.202034 < r < 0.202034
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1533537296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.375014 +/- 0.00282963 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.375014 @ 95%CL (1 toyMC)
median expected limit: r < 0.375014 @ 95%CL (1 toyMC)
   68% expected band : 0.375014 < r < 0.375014
   95% expected band : 0.375014 < r < 0.375014
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 267841409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.179432 +/- 0.00396713 @ 95% CL (98 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.179432 @ 95%CL (1 toyMC)
median expected limit: r < 0.179432 @ 95%CL (1 toyMC)
   68% expected band : 0.179432 < r < 0.179432
   95% expected band : 0.179432 < r < 0.179432
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1663278551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224265 +/- 0.00239471 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.224265 @ 95%CL (1 toyMC)
median expected limit: r < 0.224265 @ 95%CL (1 toyMC)
   68% expected band : 0.224265 < r < 0.224265
   95% expected band : 0.224265 < r < 0.224265
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1922846251
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.184001 +/- 0.00319582 @ 95% CL (97 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.184001 @ 95%CL (1 toyMC)
median expected limit: r < 0.184001 @ 95%CL (1 toyMC)
   68% expected band : 0.184001 < r < 0.184001
   95% expected band : 0.184001 < r < 0.184001
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1537705226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190442 +/- 0.00380433 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.190442 @ 95%CL (1 toyMC)
median expected limit: r < 0.190442 @ 95%CL (1 toyMC)
   68% expected band : 0.190442 < r < 0.190442
   95% expected band : 0.190442 < r < 0.190442
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2054949976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280603 +/- 0.00223672 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.280603 @ 95%CL (1 toyMC)
median expected limit: r < 0.280603 @ 95%CL (1 toyMC)
   68% expected band : 0.280603 < r < 0.280603
   95% expected band : 0.280603 < r < 0.280603
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1029395210
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190269 +/- 0.002881 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.190269 @ 95%CL (1 toyMC)
median expected limit: r < 0.190269 @ 95%CL (1 toyMC)
   68% expected band : 0.190269 < r < 0.190269
   95% expected band : 0.190269 < r < 0.190269
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1851257940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.203256 +/- 0.00306496 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.203256 @ 95%CL (1 toyMC)
median expected limit: r < 0.203256 @ 95%CL (1 toyMC)
   68% expected band : 0.203256 < r < 0.203256
   95% expected band : 0.203256 < r < 0.203256
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1401360512
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.202004 +/- 0.00389091 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.202004 @ 95%CL (1 toyMC)
median expected limit: r < 0.202004 @ 95%CL (1 toyMC)
   68% expected band : 0.202004 < r < 0.202004
   95% expected band : 0.202004 < r < 0.202004
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1374960316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251844 +/- 0.00237874 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.251844 @ 95%CL (1 toyMC)
median expected limit: r < 0.251844 @ 95%CL (1 toyMC)
   68% expected band : 0.251844 < r < 0.251844
   95% expected band : 0.251844 < r < 0.251844
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1256986683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.225978 +/- 0.00261592 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.225978 @ 95%CL (1 toyMC)
median expected limit: r < 0.225978 @ 95%CL (1 toyMC)
   68% expected band : 0.225978 < r < 0.225978
   95% expected band : 0.225978 < r < 0.225978
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 325041177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231591 +/- 0.00256297 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.231591 @ 95%CL (1 toyMC)
median expected limit: r < 0.231591 @ 95%CL (1 toyMC)
   68% expected band : 0.231591 < r < 0.231591
   95% expected band : 0.231591 < r < 0.231591
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -661343445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.193817 +/- 0.00285722 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.193817 @ 95%CL (1 toyMC)
median expected limit: r < 0.193817 @ 95%CL (1 toyMC)
   68% expected band : 0.193817 < r < 0.193817
   95% expected band : 0.193817 < r < 0.193817
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -210857206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335867 +/- 0.00239106 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.335867 @ 95%CL (1 toyMC)
median expected limit: r < 0.335867 @ 95%CL (1 toyMC)
   68% expected band : 0.335867 < r < 0.335867
   95% expected band : 0.335867 < r < 0.335867
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1292678102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.265192 +/- 0.00296514 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.265192 @ 95%CL (1 toyMC)
median expected limit: r < 0.265192 @ 95%CL (1 toyMC)
   68% expected band : 0.265192 < r < 0.265192
   95% expected band : 0.265192 < r < 0.265192
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1281509182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238891 +/- 0.00233984 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.238891 @ 95%CL (1 toyMC)
median expected limit: r < 0.238891 @ 95%CL (1 toyMC)
   68% expected band : 0.238891 < r < 0.238891
   95% expected band : 0.238891 < r < 0.238891
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 446051499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31719 +/- 0.00258089 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.31719 @ 95%CL (1 toyMC)
median expected limit: r < 0.31719 @ 95%CL (1 toyMC)
   68% expected band : 0.31719 < r < 0.31719
   95% expected band : 0.31719 < r < 0.31719
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -865444369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.321385 +/- 0.0028308 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.321385 @ 95%CL (1 toyMC)
median expected limit: r < 0.321385 @ 95%CL (1 toyMC)
   68% expected band : 0.321385 < r < 0.321385
   95% expected band : 0.321385 < r < 0.321385
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1286049032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.191933 +/- 0.0038187 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.191933 @ 95%CL (1 toyMC)
median expected limit: r < 0.191933 @ 95%CL (1 toyMC)
   68% expected band : 0.191933 < r < 0.191933
   95% expected band : 0.191933 < r < 0.191933
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 612366015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.327499 +/- 0.00266727 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.327499 @ 95%CL (1 toyMC)
median expected limit: r < 0.327499 @ 95%CL (1 toyMC)
   68% expected band : 0.327499 < r < 0.327499
   95% expected band : 0.327499 < r < 0.327499
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 617399319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312399 +/- 0.00259908 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.312399 @ 95%CL (1 toyMC)
median expected limit: r < 0.312399 @ 95%CL (1 toyMC)
   68% expected band : 0.312399 < r < 0.312399
   95% expected band : 0.312399 < r < 0.312399
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1849076310
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.418068 +/- 0.00174227 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.418068 @ 95%CL (1 toyMC)
median expected limit: r < 0.418068 @ 95%CL (1 toyMC)
   68% expected band : 0.418068 < r < 0.418068
   95% expected band : 0.418068 < r < 0.418068
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -331358871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.359726 +/- 0.00242702 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.359726 @ 95%CL (1 toyMC)
median expected limit: r < 0.359726 @ 95%CL (1 toyMC)
   68% expected band : 0.359726 < r < 0.359726
   95% expected band : 0.359726 < r < 0.359726
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2068722102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270477 +/- 0.00305824 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.270477 @ 95%CL (1 toyMC)
median expected limit: r < 0.270477 @ 95%CL (1 toyMC)
   68% expected band : 0.270477 < r < 0.270477
   95% expected band : 0.270477 < r < 0.270477
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1050269375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232837 +/- 0.00259853 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.232837 @ 95%CL (1 toyMC)
median expected limit: r < 0.232837 @ 95%CL (1 toyMC)
   68% expected band : 0.232837 < r < 0.232837
   95% expected band : 0.232837 < r < 0.232837
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -575659911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200496 +/- 0.00238934 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.200496 @ 95%CL (1 toyMC)
median expected limit: r < 0.200496 @ 95%CL (1 toyMC)
   68% expected band : 0.200496 < r < 0.200496
   95% expected band : 0.200496 < r < 0.200496
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1728039658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242324 +/- 0.00196162 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.242324 @ 95%CL (1 toyMC)
median expected limit: r < 0.242324 @ 95%CL (1 toyMC)
   68% expected band : 0.242324 < r < 0.242324
   95% expected band : 0.242324 < r < 0.242324
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1634559375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237852 +/- 0.00248685 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.237852 @ 95%CL (1 toyMC)
median expected limit: r < 0.237852 @ 95%CL (1 toyMC)
   68% expected band : 0.237852 < r < 0.237852
   95% expected band : 0.237852 < r < 0.237852
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1228379188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305295 +/- 0.00233469 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.305295 @ 95%CL (1 toyMC)
median expected limit: r < 0.305295 @ 95%CL (1 toyMC)
   68% expected band : 0.305295 < r < 0.305295
   95% expected band : 0.305295 < r < 0.305295
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1346010549
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270747 +/- 0.00250873 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.270747 @ 95%CL (1 toyMC)
median expected limit: r < 0.270747 @ 95%CL (1 toyMC)
   68% expected band : 0.270747 < r < 0.270747
   95% expected band : 0.270747 < r < 0.270747
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1666227137
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.203462 +/- 0.00323584 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.203462 @ 95%CL (1 toyMC)
median expected limit: r < 0.203462 @ 95%CL (1 toyMC)
   68% expected band : 0.203462 < r < 0.203462
   95% expected band : 0.203462 < r < 0.203462
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -966633793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.333607 +/- 0.00200217 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.333607 @ 95%CL (1 toyMC)
median expected limit: r < 0.333607 @ 95%CL (1 toyMC)
   68% expected band : 0.333607 < r < 0.333607
   95% expected band : 0.333607 < r < 0.333607
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 984337229
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.233219 +/- 0.00230564 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.233219 @ 95%CL (1 toyMC)
median expected limit: r < 0.233219 @ 95%CL (1 toyMC)
   68% expected band : 0.233219 < r < 0.233219
   95% expected band : 0.233219 < r < 0.233219
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -759427453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313301 +/- 0.00224223 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.313301 @ 95%CL (1 toyMC)
median expected limit: r < 0.313301 @ 95%CL (1 toyMC)
   68% expected band : 0.313301 < r < 0.313301
   95% expected band : 0.313301 < r < 0.313301
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -18672173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253338 +/- 0.00244857 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.253338 @ 95%CL (1 toyMC)
median expected limit: r < 0.253338 @ 95%CL (1 toyMC)
   68% expected band : 0.253338 < r < 0.253338
   95% expected band : 0.253338 < r < 0.253338
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 318740844
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204124 +/- 0.0030552 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.204124 @ 95%CL (1 toyMC)
median expected limit: r < 0.204124 @ 95%CL (1 toyMC)
   68% expected band : 0.204124 < r < 0.204124
   95% expected band : 0.204124 < r < 0.204124
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -589943011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.220066 +/- 0.00291516 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.220066 @ 95%CL (1 toyMC)
median expected limit: r < 0.220066 @ 95%CL (1 toyMC)
   68% expected band : 0.220066 < r < 0.220066
   95% expected band : 0.220066 < r < 0.220066
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1632284455
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.289089 +/- 0.00247851 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.289089 @ 95%CL (1 toyMC)
median expected limit: r < 0.289089 @ 95%CL (1 toyMC)
   68% expected band : 0.289089 < r < 0.289089
   95% expected band : 0.289089 < r < 0.289089
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1953202240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200615 +/- 0.00318682 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.200615 @ 95%CL (1 toyMC)
median expected limit: r < 0.200615 @ 95%CL (1 toyMC)
   68% expected band : 0.200615 < r < 0.200615
   95% expected band : 0.200615 < r < 0.200615
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1781715619
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.382 +/- 0.00229283 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.382 @ 95%CL (1 toyMC)
median expected limit: r < 0.382 @ 95%CL (1 toyMC)
   68% expected band : 0.382 < r < 0.382
   95% expected band : 0.382 < r < 0.382
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1154020641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234655 +/- 0.00293879 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.234655 @ 95%CL (1 toyMC)
median expected limit: r < 0.234655 @ 95%CL (1 toyMC)
   68% expected band : 0.234655 < r < 0.234655
   95% expected band : 0.234655 < r < 0.234655
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -255442504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240567 +/- 0.00228954 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.240567 @ 95%CL (1 toyMC)
median expected limit: r < 0.240567 @ 95%CL (1 toyMC)
   68% expected band : 0.240567 < r < 0.240567
   95% expected band : 0.240567 < r < 0.240567
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 722154030
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388404 +/- 0.00188458 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.388404 @ 95%CL (1 toyMC)
median expected limit: r < 0.388404 @ 95%CL (1 toyMC)
   68% expected band : 0.388404 < r < 0.388404
   95% expected band : 0.388404 < r < 0.388404
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1612509246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.203469 +/- 0.00324302 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.203469 @ 95%CL (1 toyMC)
median expected limit: r < 0.203469 @ 95%CL (1 toyMC)
   68% expected band : 0.203469 < r < 0.203469
   95% expected band : 0.203469 < r < 0.203469
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -40826980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217389 +/- 0.00258326 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.217389 @ 95%CL (1 toyMC)
median expected limit: r < 0.217389 @ 95%CL (1 toyMC)
   68% expected band : 0.217389 < r < 0.217389
   95% expected band : 0.217389 < r < 0.217389
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 176230988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.375315 +/- 0.00197902 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.375315 @ 95%CL (1 toyMC)
median expected limit: r < 0.375315 @ 95%CL (1 toyMC)
   68% expected band : 0.375315 < r < 0.375315
   95% expected band : 0.375315 < r < 0.375315
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1838299279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.32689 +/- 0.00162518 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.32689 @ 95%CL (1 toyMC)
median expected limit: r < 0.32689 @ 95%CL (1 toyMC)
   68% expected band : 0.32689 < r < 0.32689
   95% expected band : 0.32689 < r < 0.32689
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -356185020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329244 +/- 0.00197065 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.329244 @ 95%CL (1 toyMC)
median expected limit: r < 0.329244 @ 95%CL (1 toyMC)
   68% expected band : 0.329244 < r < 0.329244
   95% expected band : 0.329244 < r < 0.329244
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -631901697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.343668 +/- 0.0019289 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.343668 @ 95%CL (1 toyMC)
median expected limit: r < 0.343668 @ 95%CL (1 toyMC)
   68% expected band : 0.343668 < r < 0.343668
   95% expected band : 0.343668 < r < 0.343668
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1561976573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284512 +/- 0.00254889 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.284512 @ 95%CL (1 toyMC)
median expected limit: r < 0.284512 @ 95%CL (1 toyMC)
   68% expected band : 0.284512 < r < 0.284512
   95% expected band : 0.284512 < r < 0.284512
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 395407737
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.259672 +/- 0.00270398 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.259672 @ 95%CL (1 toyMC)
median expected limit: r < 0.259672 @ 95%CL (1 toyMC)
   68% expected band : 0.259672 < r < 0.259672
   95% expected band : 0.259672 < r < 0.259672
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1009901507
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301935 +/- 0.00224345 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.301935 @ 95%CL (1 toyMC)
median expected limit: r < 0.301935 @ 95%CL (1 toyMC)
   68% expected band : 0.301935 < r < 0.301935
   95% expected band : 0.301935 < r < 0.301935
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2106186756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.23281 +/- 0.00243972 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.23281 @ 95%CL (1 toyMC)
median expected limit: r < 0.23281 @ 95%CL (1 toyMC)
   68% expected band : 0.23281 < r < 0.23281
   95% expected band : 0.23281 < r < 0.23281
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1287907608
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.289336 +/- 0.00224076 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.289336 @ 95%CL (1 toyMC)
median expected limit: r < 0.289336 @ 95%CL (1 toyMC)
   68% expected band : 0.289336 < r < 0.289336
   95% expected band : 0.289336 < r < 0.289336
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1968906665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.478325 +/- 0.00257365 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.478325 @ 95%CL (1 toyMC)
median expected limit: r < 0.478325 @ 95%CL (1 toyMC)
   68% expected band : 0.478325 < r < 0.478325
   95% expected band : 0.478325 < r < 0.478325
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1260087433
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232342 +/- 0.00232195 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.232342 @ 95%CL (1 toyMC)
median expected limit: r < 0.232342 @ 95%CL (1 toyMC)
   68% expected band : 0.232342 < r < 0.232342
   95% expected band : 0.232342 < r < 0.232342
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -716312700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253431 +/- 0.00197217 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.253431 @ 95%CL (1 toyMC)
median expected limit: r < 0.253431 @ 95%CL (1 toyMC)
   68% expected band : 0.253431 < r < 0.253431
   95% expected band : 0.253431 < r < 0.253431
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -21153800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.317364 +/- 0.00225345 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.317364 @ 95%CL (1 toyMC)
median expected limit: r < 0.317364 @ 95%CL (1 toyMC)
   68% expected band : 0.317364 < r < 0.317364
   95% expected band : 0.317364 < r < 0.317364
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1930887940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.277806 +/- 0.00265392 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.277806 @ 95%CL (1 toyMC)
median expected limit: r < 0.277806 @ 95%CL (1 toyMC)
   68% expected band : 0.277806 < r < 0.277806
   95% expected band : 0.277806 < r < 0.277806
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2039962187
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260677 +/- 0.00250757 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.260677 @ 95%CL (1 toyMC)
median expected limit: r < 0.260677 @ 95%CL (1 toyMC)
   68% expected band : 0.260677 < r < 0.260677
   95% expected band : 0.260677 < r < 0.260677
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1280580672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.449079 +/- 0.00194929 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.449079 @ 95%CL (1 toyMC)
median expected limit: r < 0.449079 @ 95%CL (1 toyMC)
   68% expected band : 0.449079 < r < 0.449079
   95% expected band : 0.449079 < r < 0.449079
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1912806517
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.174117 +/- 0.00370107 @ 95% CL (98 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.174117 @ 95%CL (1 toyMC)
median expected limit: r < 0.174117 @ 95%CL (1 toyMC)
   68% expected band : 0.174117 < r < 0.174117
   95% expected band : 0.174117 < r < 0.174117
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1314575944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.256364 +/- 0.00249279 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.256364 @ 95%CL (1 toyMC)
median expected limit: r < 0.256364 @ 95%CL (1 toyMC)
   68% expected band : 0.256364 < r < 0.256364
   95% expected band : 0.256364 < r < 0.256364
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1009901507.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-103477917.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1154020641.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1228379188.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1256986683.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1286049032.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1287907608.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1292678102.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1314575944.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1374960316.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1401360512.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1533537296.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1537705226.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1612509246.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1632284455.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1634559375.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1663278551.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1666227137.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1725537424.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1849076310.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-18672173.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1912806517.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1922846251.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-1953202240.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-1967927115.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1968906665.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-1981433725.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-2035567739.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-2039962187.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-2044660252.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-2054949976.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-210857206.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-2115087152.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-21153800.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-238753152.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-255442504.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-265641370.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-278253518.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-283274584.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-290543111.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-331358871.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-356185020.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-393089383.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-40826980.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-462784293.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-575659911.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-589943011.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-631901697.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-633539610.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.-661343445.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.-668500468.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.-716312700.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.-759427453.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.-808489617.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.-865444369.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.-966633793.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1029395210.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1050269375.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1074101246.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1109948475.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1206032597.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1212491893.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1260087433.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1280580672.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1281509182.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1342040864.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1346010549.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1370275858.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1377729665.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1481435479.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1561976573.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1683108765.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1728039658.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.176230988.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1781715619.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.17982888.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.1798622217.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.1838299279.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.1851257940.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.1920498505.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.1930887940.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.202184959.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.2039131270.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.2068722102.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.2081785235.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.2106186756.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.267841409.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.318740844.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.325041177.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.395407737.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.410625560.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.446051499.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.526082960.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.582972351.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.612366015.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.617399319.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.645453281.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.722154030.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.932714042.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.984337229.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 917059390
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231071 +/- 0.00315316 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.231071 @ 95%CL (1 toyMC)
median expected limit: r < 0.231071 @ 95%CL (1 toyMC)
   68% expected band : 0.231071 < r < 0.231071
   95% expected band : 0.231071 < r < 0.231071
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -312802376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.239981 +/- 0.00250771 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.239981 @ 95%CL (1 toyMC)
median expected limit: r < 0.239981 @ 95%CL (1 toyMC)
   68% expected band : 0.239981 < r < 0.239981
   95% expected band : 0.239981 < r < 0.239981
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1501793973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.449585 +/- 0.00179163 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.449585 @ 95%CL (1 toyMC)
median expected limit: r < 0.449585 @ 95%CL (1 toyMC)
   68% expected band : 0.449585 < r < 0.449585
   95% expected band : 0.449585 < r < 0.449585
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1350229748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.2576 +/- 0.00316447 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.2576 @ 95%CL (1 toyMC)
median expected limit: r < 0.2576 @ 95%CL (1 toyMC)
   68% expected band : 0.2576 < r < 0.2576
   95% expected band : 0.2576 < r < 0.2576
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1706013753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251197 +/- 0.00272229 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.251197 @ 95%CL (1 toyMC)
median expected limit: r < 0.251197 @ 95%CL (1 toyMC)
   68% expected band : 0.251197 < r < 0.251197
   95% expected band : 0.251197 < r < 0.251197
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -295832729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284712 +/- 0.00238096 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.284712 @ 95%CL (1 toyMC)
median expected limit: r < 0.284712 @ 95%CL (1 toyMC)
   68% expected band : 0.284712 < r < 0.284712
   95% expected band : 0.284712 < r < 0.284712
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -67839210
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.408371 +/- 0.00226807 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.408371 @ 95%CL (1 toyMC)
median expected limit: r < 0.408371 @ 95%CL (1 toyMC)
   68% expected band : 0.408371 < r < 0.408371
   95% expected band : 0.408371 < r < 0.408371
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1528814444
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.299024 +/- 0.00244745 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.299024 @ 95%CL (1 toyMC)
median expected limit: r < 0.299024 @ 95%CL (1 toyMC)
   68% expected band : 0.299024 < r < 0.299024
   95% expected band : 0.299024 < r < 0.299024
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -182575692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.278099 +/- 0.00240936 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.278099 @ 95%CL (1 toyMC)
median expected limit: r < 0.278099 @ 95%CL (1 toyMC)
   68% expected band : 0.278099 < r < 0.278099
   95% expected band : 0.278099 < r < 0.278099
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1457617587
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305256 +/- 0.0019358 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.305256 @ 95%CL (1 toyMC)
median expected limit: r < 0.305256 @ 95%CL (1 toyMC)
   68% expected band : 0.305256 < r < 0.305256
   95% expected band : 0.305256 < r < 0.305256
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1530488599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294989 +/- 0.00225161 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.294989 @ 95%CL (1 toyMC)
median expected limit: r < 0.294989 @ 95%CL (1 toyMC)
   68% expected band : 0.294989 < r < 0.294989
   95% expected band : 0.294989 < r < 0.294989
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1407588881
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282994 +/- 0.00228485 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.282994 @ 95%CL (1 toyMC)
median expected limit: r < 0.282994 @ 95%CL (1 toyMC)
   68% expected band : 0.282994 < r < 0.282994
   95% expected band : 0.282994 < r < 0.282994
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2009377059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.273487 +/- 0.00282436 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.273487 @ 95%CL (1 toyMC)
median expected limit: r < 0.273487 @ 95%CL (1 toyMC)
   68% expected band : 0.273487 < r < 0.273487
   95% expected band : 0.273487 < r < 0.273487
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 220364182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300996 +/- 0.0018497 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.300996 @ 95%CL (1 toyMC)
median expected limit: r < 0.300996 @ 95%CL (1 toyMC)
   68% expected band : 0.300996 < r < 0.300996
   95% expected band : 0.300996 < r < 0.300996
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1312933410
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.418912 +/- 0.00213114 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.418912 @ 95%CL (1 toyMC)
median expected limit: r < 0.418912 @ 95%CL (1 toyMC)
   68% expected band : 0.418912 < r < 0.418912
   95% expected band : 0.418912 < r < 0.418912
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2121310786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.342741 +/- 0.00274488 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.342741 @ 95%CL (1 toyMC)
median expected limit: r < 0.342741 @ 95%CL (1 toyMC)
   68% expected band : 0.342741 < r < 0.342741
   95% expected band : 0.342741 < r < 0.342741
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1864693737
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.302928 +/- 0.00203053 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.302928 @ 95%CL (1 toyMC)
median expected limit: r < 0.302928 @ 95%CL (1 toyMC)
   68% expected band : 0.302928 < r < 0.302928
   95% expected band : 0.302928 < r < 0.302928
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1998368237
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288651 +/- 0.00260947 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.288651 @ 95%CL (1 toyMC)
median expected limit: r < 0.288651 @ 95%CL (1 toyMC)
   68% expected band : 0.288651 < r < 0.288651
   95% expected band : 0.288651 < r < 0.288651
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 280049012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.391076 +/- 0.00197565 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.391076 @ 95%CL (1 toyMC)
median expected limit: r < 0.391076 @ 95%CL (1 toyMC)
   68% expected band : 0.391076 < r < 0.391076
   95% expected band : 0.391076 < r < 0.391076
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1552715662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.394508 +/- 0.00191314 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.394508 @ 95%CL (1 toyMC)
median expected limit: r < 0.394508 @ 95%CL (1 toyMC)
   68% expected band : 0.394508 < r < 0.394508
   95% expected band : 0.394508 < r < 0.394508
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -346364139
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231055 +/- 0.00292524 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.231055 @ 95%CL (1 toyMC)
median expected limit: r < 0.231055 @ 95%CL (1 toyMC)
   68% expected band : 0.231055 < r < 0.231055
   95% expected band : 0.231055 < r < 0.231055
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 967862437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.35148 +/- 0.00234727 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.35148 @ 95%CL (1 toyMC)
median expected limit: r < 0.35148 @ 95%CL (1 toyMC)
   68% expected band : 0.35148 < r < 0.35148
   95% expected band : 0.35148 < r < 0.35148
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -273763500
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261189 +/- 0.00231273 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.261189 @ 95%CL (1 toyMC)
median expected limit: r < 0.261189 @ 95%CL (1 toyMC)
   68% expected band : 0.261189 < r < 0.261189
   95% expected band : 0.261189 < r < 0.261189
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 278183476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.334581 +/- 0.00210482 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.334581 @ 95%CL (1 toyMC)
median expected limit: r < 0.334581 @ 95%CL (1 toyMC)
   68% expected band : 0.334581 < r < 0.334581
   95% expected band : 0.334581 < r < 0.334581
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 437126140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.17314 +/- 0.0039373 @ 95% CL (98 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.17314 @ 95%CL (1 toyMC)
median expected limit: r < 0.17314 @ 95%CL (1 toyMC)
   68% expected band : 0.17314 < r < 0.17314
   95% expected band : 0.17314 < r < 0.17314
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1994420910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.293724 +/- 0.00228408 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.293724 @ 95%CL (1 toyMC)
median expected limit: r < 0.293724 @ 95%CL (1 toyMC)
   68% expected band : 0.293724 < r < 0.293724
   95% expected band : 0.293724 < r < 0.293724
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1107021908
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.278865 +/- 0.00220595 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.278865 @ 95%CL (1 toyMC)
median expected limit: r < 0.278865 @ 95%CL (1 toyMC)
   68% expected band : 0.278865 < r < 0.278865
   95% expected band : 0.278865 < r < 0.278865
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1990583855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.266142 +/- 0.00270059 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.266142 @ 95%CL (1 toyMC)
median expected limit: r < 0.266142 @ 95%CL (1 toyMC)
   68% expected band : 0.266142 < r < 0.266142
   95% expected band : 0.266142 < r < 0.266142
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 14934226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.368593 +/- 0.00228464 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.368593 @ 95%CL (1 toyMC)
median expected limit: r < 0.368593 @ 95%CL (1 toyMC)
   68% expected band : 0.368593 < r < 0.368593
   95% expected band : 0.368593 < r < 0.368593
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2033466098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260814 +/- 0.00280972 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.260814 @ 95%CL (1 toyMC)
median expected limit: r < 0.260814 @ 95%CL (1 toyMC)
   68% expected band : 0.260814 < r < 0.260814
   95% expected band : 0.260814 < r < 0.260814
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -22291184
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190506 +/- 0.00342082 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.190506 @ 95%CL (1 toyMC)
median expected limit: r < 0.190506 @ 95%CL (1 toyMC)
   68% expected band : 0.190506 < r < 0.190506
   95% expected band : 0.190506 < r < 0.190506
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2072338830
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238379 +/- 0.00298373 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.238379 @ 95%CL (1 toyMC)
median expected limit: r < 0.238379 @ 95%CL (1 toyMC)
   68% expected band : 0.238379 < r < 0.238379
   95% expected band : 0.238379 < r < 0.238379
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -656156640
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294037 +/- 0.00191895 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.294037 @ 95%CL (1 toyMC)
median expected limit: r < 0.294037 @ 95%CL (1 toyMC)
   68% expected band : 0.294037 < r < 0.294037
   95% expected band : 0.294037 < r < 0.294037
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1705381687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29048 +/- 0.00249395 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.29048 @ 95%CL (1 toyMC)
median expected limit: r < 0.29048 @ 95%CL (1 toyMC)
   68% expected band : 0.29048 < r < 0.29048
   95% expected band : 0.29048 < r < 0.29048
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1883908486
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.2313 +/- 0.00325842 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.2313 @ 95%CL (1 toyMC)
median expected limit: r < 0.2313 @ 95%CL (1 toyMC)
   68% expected band : 0.2313 < r < 0.2313
   95% expected band : 0.2313 < r < 0.2313
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1240059449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.196127 +/- 0.00356147 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.196127 @ 95%CL (1 toyMC)
median expected limit: r < 0.196127 @ 95%CL (1 toyMC)
   68% expected band : 0.196127 < r < 0.196127
   95% expected band : 0.196127 < r < 0.196127
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -923729111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232726 +/- 0.00262825 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.232726 @ 95%CL (1 toyMC)
median expected limit: r < 0.232726 @ 95%CL (1 toyMC)
   68% expected band : 0.232726 < r < 0.232726
   95% expected band : 0.232726 < r < 0.232726
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -445125181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.38717 +/- 0.0024797 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.38717 @ 95%CL (1 toyMC)
median expected limit: r < 0.38717 @ 95%CL (1 toyMC)
   68% expected band : 0.38717 < r < 0.38717
   95% expected band : 0.38717 < r < 0.38717
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 891665076
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.279076 +/- 0.00235437 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.279076 @ 95%CL (1 toyMC)
median expected limit: r < 0.279076 @ 95%CL (1 toyMC)
   68% expected band : 0.279076 < r < 0.279076
   95% expected band : 0.279076 < r < 0.279076
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 522061408
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.315509 +/- 0.00221691 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.315509 @ 95%CL (1 toyMC)
median expected limit: r < 0.315509 @ 95%CL (1 toyMC)
   68% expected band : 0.315509 < r < 0.315509
   95% expected band : 0.315509 < r < 0.315509
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1008524616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.337537 +/- 0.00234893 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.337537 @ 95%CL (1 toyMC)
median expected limit: r < 0.337537 @ 95%CL (1 toyMC)
   68% expected band : 0.337537 < r < 0.337537
   95% expected band : 0.337537 < r < 0.337537
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 843994781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.220677 +/- 0.00412234 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.220677 @ 95%CL (1 toyMC)
median expected limit: r < 0.220677 @ 95%CL (1 toyMC)
   68% expected band : 0.220677 < r < 0.220677
   95% expected band : 0.220677 < r < 0.220677
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -62603960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.274542 +/- 0.00208921 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.274542 @ 95%CL (1 toyMC)
median expected limit: r < 0.274542 @ 95%CL (1 toyMC)
   68% expected band : 0.274542 < r < 0.274542
   95% expected band : 0.274542 < r < 0.274542
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2067424652
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228158 +/- 0.00273349 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.228158 @ 95%CL (1 toyMC)
median expected limit: r < 0.228158 @ 95%CL (1 toyMC)
   68% expected band : 0.228158 < r < 0.228158
   95% expected band : 0.228158 < r < 0.228158
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 556058387
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.377027 +/- 0.00207116 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.377027 @ 95%CL (1 toyMC)
median expected limit: r < 0.377027 @ 95%CL (1 toyMC)
   68% expected band : 0.377027 < r < 0.377027
   95% expected band : 0.377027 < r < 0.377027
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2003974216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.27504 +/- 0.00240727 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.27504 @ 95%CL (1 toyMC)
median expected limit: r < 0.27504 @ 95%CL (1 toyMC)
   68% expected band : 0.27504 < r < 0.27504
   95% expected band : 0.27504 < r < 0.27504
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -797344228
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.233511 +/- 0.00248051 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.233511 @ 95%CL (1 toyMC)
median expected limit: r < 0.233511 @ 95%CL (1 toyMC)
   68% expected band : 0.233511 < r < 0.233511
   95% expected band : 0.233511 < r < 0.233511
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1733964426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272794 +/- 0.00182436 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.272794 @ 95%CL (1 toyMC)
median expected limit: r < 0.272794 @ 95%CL (1 toyMC)
   68% expected band : 0.272794 < r < 0.272794
   95% expected band : 0.272794 < r < 0.272794
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2076838603
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247607 +/- 0.00286968 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.247607 @ 95%CL (1 toyMC)
median expected limit: r < 0.247607 @ 95%CL (1 toyMC)
   68% expected band : 0.247607 < r < 0.247607
   95% expected band : 0.247607 < r < 0.247607
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 118727263
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236109 +/- 0.0029818 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.236109 @ 95%CL (1 toyMC)
median expected limit: r < 0.236109 @ 95%CL (1 toyMC)
   68% expected band : 0.236109 < r < 0.236109
   95% expected band : 0.236109 < r < 0.236109
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -446527401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22217 +/- 0.00275302 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.22217 @ 95%CL (1 toyMC)
median expected limit: r < 0.22217 @ 95%CL (1 toyMC)
   68% expected band : 0.22217 < r < 0.22217
   95% expected band : 0.22217 < r < 0.22217
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1218220866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.214903 +/- 0.00330669 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.214903 @ 95%CL (1 toyMC)
median expected limit: r < 0.214903 @ 95%CL (1 toyMC)
   68% expected band : 0.214903 < r < 0.214903
   95% expected band : 0.214903 < r < 0.214903
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -71510145
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.424305 +/- 0.00249098 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.424305 @ 95%CL (1 toyMC)
median expected limit: r < 0.424305 @ 95%CL (1 toyMC)
   68% expected band : 0.424305 < r < 0.424305
   95% expected band : 0.424305 < r < 0.424305
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 602054681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272869 +/- 0.00221152 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.272869 @ 95%CL (1 toyMC)
median expected limit: r < 0.272869 @ 95%CL (1 toyMC)
   68% expected band : 0.272869 < r < 0.272869
   95% expected band : 0.272869 < r < 0.272869
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -87311046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335705 +/- 0.00243799 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.335705 @ 95%CL (1 toyMC)
median expected limit: r < 0.335705 @ 95%CL (1 toyMC)
   68% expected band : 0.335705 < r < 0.335705
   95% expected band : 0.335705 < r < 0.335705
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2064493671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240668 +/- 0.00292265 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.240668 @ 95%CL (1 toyMC)
median expected limit: r < 0.240668 @ 95%CL (1 toyMC)
   68% expected band : 0.240668 < r < 0.240668
   95% expected band : 0.240668 < r < 0.240668
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -790541634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237913 +/- 0.00269261 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.237913 @ 95%CL (1 toyMC)
median expected limit: r < 0.237913 @ 95%CL (1 toyMC)
   68% expected band : 0.237913 < r < 0.237913
   95% expected band : 0.237913 < r < 0.237913
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1936946769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.620116 +/- 0.00209599 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.620116 @ 95%CL (1 toyMC)
median expected limit: r < 0.620116 @ 95%CL (1 toyMC)
   68% expected band : 0.620116 < r < 0.620116
   95% expected band : 0.620116 < r < 0.620116
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 199627814
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282236 +/- 0.0024067 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.282236 @ 95%CL (1 toyMC)
median expected limit: r < 0.282236 @ 95%CL (1 toyMC)
   68% expected band : 0.282236 < r < 0.282236
   95% expected band : 0.282236 < r < 0.282236
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1041030001
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31222 +/- 0.00207639 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.31222 @ 95%CL (1 toyMC)
median expected limit: r < 0.31222 @ 95%CL (1 toyMC)
   68% expected band : 0.31222 < r < 0.31222
   95% expected band : 0.31222 < r < 0.31222
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1231112325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.185316 +/- 0.00390703 @ 95% CL (98 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.185316 @ 95%CL (1 toyMC)
median expected limit: r < 0.185316 @ 95%CL (1 toyMC)
   68% expected band : 0.185316 < r < 0.185316
   95% expected band : 0.185316 < r < 0.185316
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1752897717
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200254 +/- 0.00319956 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.200254 @ 95%CL (1 toyMC)
median expected limit: r < 0.200254 @ 95%CL (1 toyMC)
   68% expected band : 0.200254 < r < 0.200254
   95% expected band : 0.200254 < r < 0.200254
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 350697730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28259 +/- 0.00215472 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.28259 @ 95%CL (1 toyMC)
median expected limit: r < 0.28259 @ 95%CL (1 toyMC)
   68% expected band : 0.28259 < r < 0.28259
   95% expected band : 0.28259 < r < 0.28259
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 730050541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.306989 +/- 0.00245249 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.306989 @ 95%CL (1 toyMC)
median expected limit: r < 0.306989 @ 95%CL (1 toyMC)
   68% expected band : 0.306989 < r < 0.306989
   95% expected band : 0.306989 < r < 0.306989
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 44613238
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236838 +/- 0.00265726 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.236838 @ 95%CL (1 toyMC)
median expected limit: r < 0.236838 @ 95%CL (1 toyMC)
   68% expected band : 0.236838 < r < 0.236838
   95% expected band : 0.236838 < r < 0.236838
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1508470742
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.207477 +/- 0.00310466 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.207477 @ 95%CL (1 toyMC)
median expected limit: r < 0.207477 @ 95%CL (1 toyMC)
   68% expected band : 0.207477 < r < 0.207477
   95% expected band : 0.207477 < r < 0.207477
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1664093997
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213663 +/- 0.00329363 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.213663 @ 95%CL (1 toyMC)
median expected limit: r < 0.213663 @ 95%CL (1 toyMC)
   68% expected band : 0.213663 < r < 0.213663
   95% expected band : 0.213663 < r < 0.213663
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2049475291
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.264423 +/- 0.00241945 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.264423 @ 95%CL (1 toyMC)
median expected limit: r < 0.264423 @ 95%CL (1 toyMC)
   68% expected band : 0.264423 < r < 0.264423
   95% expected band : 0.264423 < r < 0.264423
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -394162929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238875 +/- 0.00214234 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.238875 @ 95%CL (1 toyMC)
median expected limit: r < 0.238875 @ 95%CL (1 toyMC)
   68% expected band : 0.238875 < r < 0.238875
   95% expected band : 0.238875 < r < 0.238875
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1494181337
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.336751 +/- 0.00179944 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.336751 @ 95%CL (1 toyMC)
median expected limit: r < 0.336751 @ 95%CL (1 toyMC)
   68% expected band : 0.336751 < r < 0.336751
   95% expected band : 0.336751 < r < 0.336751
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1391900715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237177 +/- 0.00261361 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.237177 @ 95%CL (1 toyMC)
median expected limit: r < 0.237177 @ 95%CL (1 toyMC)
   68% expected band : 0.237177 < r < 0.237177
   95% expected band : 0.237177 < r < 0.237177
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2003225091
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288434 +/- 0.00256551 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.288434 @ 95%CL (1 toyMC)
median expected limit: r < 0.288434 @ 95%CL (1 toyMC)
   68% expected band : 0.288434 < r < 0.288434
   95% expected band : 0.288434 < r < 0.288434
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1623191929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.485908 +/- 0.00215935 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.485908 @ 95%CL (1 toyMC)
median expected limit: r < 0.485908 @ 95%CL (1 toyMC)
   68% expected band : 0.485908 < r < 0.485908
   95% expected band : 0.485908 < r < 0.485908
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1793488451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.296941 +/- 0.00218359 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.296941 @ 95%CL (1 toyMC)
median expected limit: r < 0.296941 @ 95%CL (1 toyMC)
   68% expected band : 0.296941 < r < 0.296941
   95% expected band : 0.296941 < r < 0.296941
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1687340414
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.183568 +/- 0.00298351 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.183568 @ 95%CL (1 toyMC)
median expected limit: r < 0.183568 @ 95%CL (1 toyMC)
   68% expected band : 0.183568 < r < 0.183568
   95% expected band : 0.183568 < r < 0.183568
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -214337073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238714 +/- 0.00315496 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.238714 @ 95%CL (1 toyMC)
median expected limit: r < 0.238714 @ 95%CL (1 toyMC)
   68% expected band : 0.238714 < r < 0.238714
   95% expected band : 0.238714 < r < 0.238714
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 486399599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194029 +/- 0.0026645 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.194029 @ 95%CL (1 toyMC)
median expected limit: r < 0.194029 @ 95%CL (1 toyMC)
   68% expected band : 0.194029 < r < 0.194029
   95% expected band : 0.194029 < r < 0.194029
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 437598010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.298891 +/- 0.00299261 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.298891 @ 95%CL (1 toyMC)
median expected limit: r < 0.298891 @ 95%CL (1 toyMC)
   68% expected band : 0.298891 < r < 0.298891
   95% expected band : 0.298891 < r < 0.298891
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1852396108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240319 +/- 0.00320137 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.240319 @ 95%CL (1 toyMC)
median expected limit: r < 0.240319 @ 95%CL (1 toyMC)
   68% expected band : 0.240319 < r < 0.240319
   95% expected band : 0.240319 < r < 0.240319
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -215626340
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253058 +/- 0.00258029 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.253058 @ 95%CL (1 toyMC)
median expected limit: r < 0.253058 @ 95%CL (1 toyMC)
   68% expected band : 0.253058 < r < 0.253058
   95% expected band : 0.253058 < r < 0.253058
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1439044350
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.377716 +/- 0.00219518 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.377716 @ 95%CL (1 toyMC)
median expected limit: r < 0.377716 @ 95%CL (1 toyMC)
   68% expected band : 0.377716 < r < 0.377716
   95% expected band : 0.377716 < r < 0.377716
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 944246456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.171912 +/- 0.00448995 @ 95% CL (93 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.171912 @ 95%CL (1 toyMC)
median expected limit: r < 0.171912 @ 95%CL (1 toyMC)
   68% expected band : 0.171912 < r < 0.171912
   95% expected band : 0.171912 < r < 0.171912
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -651570726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.423081 +/- 0.00211009 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.423081 @ 95%CL (1 toyMC)
median expected limit: r < 0.423081 @ 95%CL (1 toyMC)
   68% expected band : 0.423081 < r < 0.423081
   95% expected band : 0.423081 < r < 0.423081
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -689261316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.432931 +/- 0.00170751 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.432931 @ 95%CL (1 toyMC)
median expected limit: r < 0.432931 @ 95%CL (1 toyMC)
   68% expected band : 0.432931 < r < 0.432931
   95% expected band : 0.432931 < r < 0.432931
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2013787178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31598 +/- 0.00242796 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.31598 @ 95%CL (1 toyMC)
median expected limit: r < 0.31598 @ 95%CL (1 toyMC)
   68% expected band : 0.31598 < r < 0.31598
   95% expected band : 0.31598 < r < 0.31598
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 856582152
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25831 +/- 0.00234199 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.25831 @ 95%CL (1 toyMC)
median expected limit: r < 0.25831 @ 95%CL (1 toyMC)
   68% expected band : 0.25831 < r < 0.25831
   95% expected band : 0.25831 < r < 0.25831
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -713571338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.368058 +/- 0.00284321 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.368058 @ 95%CL (1 toyMC)
median expected limit: r < 0.368058 @ 95%CL (1 toyMC)
   68% expected band : 0.368058 < r < 0.368058
   95% expected band : 0.368058 < r < 0.368058
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1450583098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244183 +/- 0.00279133 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.244183 @ 95%CL (1 toyMC)
median expected limit: r < 0.244183 @ 95%CL (1 toyMC)
   68% expected band : 0.244183 < r < 0.244183
   95% expected band : 0.244183 < r < 0.244183
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2095148063
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.2082 +/- 0.00386303 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.2082 @ 95%CL (1 toyMC)
median expected limit: r < 0.2082 @ 95%CL (1 toyMC)
   68% expected band : 0.2082 < r < 0.2082
   95% expected band : 0.2082 < r < 0.2082
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -201982100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.426929 +/- 0.00217665 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.426929 @ 95%CL (1 toyMC)
median expected limit: r < 0.426929 @ 95%CL (1 toyMC)
   68% expected band : 0.426929 < r < 0.426929
   95% expected band : 0.426929 < r < 0.426929
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 353831463
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204065 +/- 0.00256148 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.204065 @ 95%CL (1 toyMC)
median expected limit: r < 0.204065 @ 95%CL (1 toyMC)
   68% expected band : 0.204065 < r < 0.204065
   95% expected band : 0.204065 < r < 0.204065
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -73724530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.269985 +/- 0.00279605 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.269985 @ 95%CL (1 toyMC)
median expected limit: r < 0.269985 @ 95%CL (1 toyMC)
   68% expected band : 0.269985 < r < 0.269985
   95% expected band : 0.269985 < r < 0.269985
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1859371707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234406 +/- 0.00255524 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.234406 @ 95%CL (1 toyMC)
median expected limit: r < 0.234406 @ 95%CL (1 toyMC)
   68% expected band : 0.234406 < r < 0.234406
   95% expected band : 0.234406 < r < 0.234406
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1124871151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.524724 +/- 0.00234935 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.524724 @ 95%CL (1 toyMC)
median expected limit: r < 0.524724 @ 95%CL (1 toyMC)
   68% expected band : 0.524724 < r < 0.524724
   95% expected band : 0.524724 < r < 0.524724
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 96918741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304219 +/- 0.00262825 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.304219 @ 95%CL (1 toyMC)
median expected limit: r < 0.304219 @ 95%CL (1 toyMC)
   68% expected band : 0.304219 < r < 0.304219
   95% expected band : 0.304219 < r < 0.304219
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1767050259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.271234 +/- 0.00325549 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.271234 @ 95%CL (1 toyMC)
median expected limit: r < 0.271234 @ 95%CL (1 toyMC)
   68% expected band : 0.271234 < r < 0.271234
   95% expected band : 0.271234 < r < 0.271234
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -68083884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.267701 +/- 0.00292885 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.267701 @ 95%CL (1 toyMC)
median expected limit: r < 0.267701 @ 95%CL (1 toyMC)
   68% expected band : 0.267701 < r < 0.267701
   95% expected band : 0.267701 < r < 0.267701
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1634999207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.713853 +/- 0.00252911 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.713853 @ 95%CL (1 toyMC)
median expected limit: r < 0.713853 @ 95%CL (1 toyMC)
   68% expected band : 0.713853 < r < 0.713853
   95% expected band : 0.713853 < r < 0.713853
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 203526214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.30687 +/- 0.00202306 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.30687 @ 95%CL (1 toyMC)
median expected limit: r < 0.30687 @ 95%CL (1 toyMC)
   68% expected band : 0.30687 < r < 0.30687
   95% expected band : 0.30687 < r < 0.30687
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1737767718
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.400032 +/- 0.00197656 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.400032 @ 95%CL (1 toyMC)
median expected limit: r < 0.400032 @ 95%CL (1 toyMC)
   68% expected band : 0.400032 < r < 0.400032
   95% expected band : 0.400032 < r < 0.400032
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1041030001.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1124871151.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1218220866.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1240059449.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1350229748.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1391900715.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1450583098.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1508470742.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1530488599.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1623191929.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1634999207.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1664093997.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1705381687.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1706013753.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1733964426.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1737767718.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1752897717.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1767050259.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1793488451.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-182575692.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1883908486.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1936946769.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1990583855.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-2003225091.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-2009377059.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-2013787178.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-201982100.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-2033466098.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-2049475291.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-2064493671.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-2067424652.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-2121310786.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-214337073.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-215626340.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-22291184.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-273763500.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-295832729.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-312802376.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-346364139.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-394162929.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-445125181.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-446527401.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-62603960.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-651570726.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-656156640.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-67839210.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-68083884.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-689261316.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-713571338.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.-71510145.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.-73724530.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.-790541634.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.-797344228.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.-87311046.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.-923729111.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1008524616.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1107021908.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.118727263.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1231112325.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1312933410.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1407588881.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1439044350.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1457617587.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.14934226.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1494181337.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1501793973.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1528814444.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1552715662.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1687340414.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1852396108.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1859371707.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1864693737.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1994420910.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.199627814.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1998368237.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.2003974216.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.203526214.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.2072338830.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.2076838603.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.2095148063.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.220364182.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.278183476.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.280049012.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.350697730.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.353831463.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.437126140.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.437598010.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.44613238.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.486399599.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.522061408.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.556058387.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.602054681.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.730050541.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.843994781.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.856582152.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.891665076.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.917059390.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.944246456.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.967862437.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.96918741.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1525996222
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235271 +/- 0.00261965 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.235271 @ 95%CL (1 toyMC)
median expected limit: r < 0.235271 @ 95%CL (1 toyMC)
   68% expected band : 0.235271 < r < 0.235271
   95% expected band : 0.235271 < r < 0.235271
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1029779247
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.66274 +/- 0.00234729 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.66274 @ 95%CL (1 toyMC)
median expected limit: r < 0.66274 @ 95%CL (1 toyMC)
   68% expected band : 0.66274 < r < 0.66274
   95% expected band : 0.66274 < r < 0.66274
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1006013514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.181119 +/- 0.00394859 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.181119 @ 95%CL (1 toyMC)
median expected limit: r < 0.181119 @ 95%CL (1 toyMC)
   68% expected band : 0.181119 < r < 0.181119
   95% expected band : 0.181119 < r < 0.181119
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 325724611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255544 +/- 0.00251136 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.255544 @ 95%CL (1 toyMC)
median expected limit: r < 0.255544 @ 95%CL (1 toyMC)
   68% expected band : 0.255544 < r < 0.255544
   95% expected band : 0.255544 < r < 0.255544
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -831797572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.250496 +/- 0.00321874 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.250496 @ 95%CL (1 toyMC)
median expected limit: r < 0.250496 @ 95%CL (1 toyMC)
   68% expected band : 0.250496 < r < 0.250496
   95% expected band : 0.250496 < r < 0.250496
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1762691571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.184003 +/- 0.00308539 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.184003 @ 95%CL (1 toyMC)
median expected limit: r < 0.184003 @ 95%CL (1 toyMC)
   68% expected band : 0.184003 < r < 0.184003
   95% expected band : 0.184003 < r < 0.184003
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 942183589
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.357946 +/- 0.00203348 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.357946 @ 95%CL (1 toyMC)
median expected limit: r < 0.357946 @ 95%CL (1 toyMC)
   68% expected band : 0.357946 < r < 0.357946
   95% expected band : 0.357946 < r < 0.357946
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1004277949
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.584995 +/- 0.00191837 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.584995 @ 95%CL (1 toyMC)
median expected limit: r < 0.584995 @ 95%CL (1 toyMC)
   68% expected band : 0.584995 < r < 0.584995
   95% expected band : 0.584995 < r < 0.584995
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1949428426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.258799 +/- 0.00205706 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.258799 @ 95%CL (1 toyMC)
median expected limit: r < 0.258799 @ 95%CL (1 toyMC)
   68% expected band : 0.258799 < r < 0.258799
   95% expected band : 0.258799 < r < 0.258799
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1471703612
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.563206 +/- 0.00190101 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.563206 @ 95%CL (1 toyMC)
median expected limit: r < 0.563206 @ 95%CL (1 toyMC)
   68% expected band : 0.563206 < r < 0.563206
   95% expected band : 0.563206 < r < 0.563206
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -551903547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300204 +/- 0.00189299 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.300204 @ 95%CL (1 toyMC)
median expected limit: r < 0.300204 @ 95%CL (1 toyMC)
   68% expected band : 0.300204 < r < 0.300204
   95% expected band : 0.300204 < r < 0.300204
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1668835911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217816 +/- 0.00283921 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.217816 @ 95%CL (1 toyMC)
median expected limit: r < 0.217816 @ 95%CL (1 toyMC)
   68% expected band : 0.217816 < r < 0.217816
   95% expected band : 0.217816 < r < 0.217816
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1610033195
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262461 +/- 0.00241385 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.262461 @ 95%CL (1 toyMC)
median expected limit: r < 0.262461 @ 95%CL (1 toyMC)
   68% expected band : 0.262461 < r < 0.262461
   95% expected band : 0.262461 < r < 0.262461
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1476291999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.19468 +/- 0.00297542 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.19468 @ 95%CL (1 toyMC)
median expected limit: r < 0.19468 @ 95%CL (1 toyMC)
   68% expected band : 0.19468 < r < 0.19468
   95% expected band : 0.19468 < r < 0.19468
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -924122230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.556508 +/- 0.00205119 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.556508 @ 95%CL (1 toyMC)
median expected limit: r < 0.556508 @ 95%CL (1 toyMC)
   68% expected band : 0.556508 < r < 0.556508
   95% expected band : 0.556508 < r < 0.556508
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1487823071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.233668 +/- 0.00210621 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.233668 @ 95%CL (1 toyMC)
median expected limit: r < 0.233668 @ 95%CL (1 toyMC)
   68% expected band : 0.233668 < r < 0.233668
   95% expected band : 0.233668 < r < 0.233668
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1608454198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.223292 +/- 0.00253685 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.223292 @ 95%CL (1 toyMC)
median expected limit: r < 0.223292 @ 95%CL (1 toyMC)
   68% expected band : 0.223292 < r < 0.223292
   95% expected band : 0.223292 < r < 0.223292
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1300626762
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.333728 +/- 0.00249119 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.333728 @ 95%CL (1 toyMC)
median expected limit: r < 0.333728 @ 95%CL (1 toyMC)
   68% expected band : 0.333728 < r < 0.333728
   95% expected band : 0.333728 < r < 0.333728
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -282224741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268742 +/- 0.00208823 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.268742 @ 95%CL (1 toyMC)
median expected limit: r < 0.268742 @ 95%CL (1 toyMC)
   68% expected band : 0.268742 < r < 0.268742
   95% expected band : 0.268742 < r < 0.268742
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 335963754
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221079 +/- 0.00284916 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.221079 @ 95%CL (1 toyMC)
median expected limit: r < 0.221079 @ 95%CL (1 toyMC)
   68% expected band : 0.221079 < r < 0.221079
   95% expected band : 0.221079 < r < 0.221079
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 298200887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255272 +/- 0.00287336 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.255272 @ 95%CL (1 toyMC)
median expected limit: r < 0.255272 @ 95%CL (1 toyMC)
   68% expected band : 0.255272 < r < 0.255272
   95% expected band : 0.255272 < r < 0.255272
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1974815256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.1838 +/- 0.00343265 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.1838 @ 95%CL (1 toyMC)
median expected limit: r < 0.1838 @ 95%CL (1 toyMC)
   68% expected band : 0.1838 < r < 0.1838
   95% expected band : 0.1838 < r < 0.1838
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1555594698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.223607 +/- 0.00286385 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.223607 @ 95%CL (1 toyMC)
median expected limit: r < 0.223607 @ 95%CL (1 toyMC)
   68% expected band : 0.223607 < r < 0.223607
   95% expected band : 0.223607 < r < 0.223607
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 190794060
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.211189 +/- 0.00308028 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.211189 @ 95%CL (1 toyMC)
median expected limit: r < 0.211189 @ 95%CL (1 toyMC)
   68% expected band : 0.211189 < r < 0.211189
   95% expected band : 0.211189 < r < 0.211189
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -891163262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.303394 +/- 0.0022018 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.303394 @ 95%CL (1 toyMC)
median expected limit: r < 0.303394 @ 95%CL (1 toyMC)
   68% expected band : 0.303394 < r < 0.303394
   95% expected band : 0.303394 < r < 0.303394
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2116220037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.302366 +/- 0.0023469 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.302366 @ 95%CL (1 toyMC)
median expected limit: r < 0.302366 @ 95%CL (1 toyMC)
   68% expected band : 0.302366 < r < 0.302366
   95% expected band : 0.302366 < r < 0.302366
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1226564527
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.250138 +/- 0.00239665 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.250138 @ 95%CL (1 toyMC)
median expected limit: r < 0.250138 @ 95%CL (1 toyMC)
   68% expected band : 0.250138 < r < 0.250138
   95% expected band : 0.250138 < r < 0.250138
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 26414107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.297264 +/- 0.00190538 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.297264 @ 95%CL (1 toyMC)
median expected limit: r < 0.297264 @ 95%CL (1 toyMC)
   68% expected band : 0.297264 < r < 0.297264
   95% expected band : 0.297264 < r < 0.297264
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1751656546
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.252937 +/- 0.00185281 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.252937 @ 95%CL (1 toyMC)
median expected limit: r < 0.252937 @ 95%CL (1 toyMC)
   68% expected band : 0.252937 < r < 0.252937
   95% expected band : 0.252937 < r < 0.252937
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1061062530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244931 +/- 0.00263254 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.244931 @ 95%CL (1 toyMC)
median expected limit: r < 0.244931 @ 95%CL (1 toyMC)
   68% expected band : 0.244931 < r < 0.244931
   95% expected band : 0.244931 < r < 0.244931
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1856013201
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.283222 +/- 0.00236963 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.283222 @ 95%CL (1 toyMC)
median expected limit: r < 0.283222 @ 95%CL (1 toyMC)
   68% expected band : 0.283222 < r < 0.283222
   95% expected band : 0.283222 < r < 0.283222
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1805857024
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.296561 +/- 0.00209877 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.296561 @ 95%CL (1 toyMC)
median expected limit: r < 0.296561 @ 95%CL (1 toyMC)
   68% expected band : 0.296561 < r < 0.296561
   95% expected band : 0.296561 < r < 0.296561
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -346657057
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.198583 +/- 0.00332389 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.198583 @ 95%CL (1 toyMC)
median expected limit: r < 0.198583 @ 95%CL (1 toyMC)
   68% expected band : 0.198583 < r < 0.198583
   95% expected band : 0.198583 < r < 0.198583
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1222963748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.49433 +/- 0.00195392 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.49433 @ 95%CL (1 toyMC)
median expected limit: r < 0.49433 @ 95%CL (1 toyMC)
   68% expected band : 0.49433 < r < 0.49433
   95% expected band : 0.49433 < r < 0.49433
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1815804443
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.233061 +/- 0.00299604 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.233061 @ 95%CL (1 toyMC)
median expected limit: r < 0.233061 @ 95%CL (1 toyMC)
   68% expected band : 0.233061 < r < 0.233061
   95% expected band : 0.233061 < r < 0.233061
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1596715806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25714 +/- 0.00217403 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.25714 @ 95%CL (1 toyMC)
median expected limit: r < 0.25714 @ 95%CL (1 toyMC)
   68% expected band : 0.25714 < r < 0.25714
   95% expected band : 0.25714 < r < 0.25714
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -828402205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305203 +/- 0.00157586 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.305203 @ 95%CL (1 toyMC)
median expected limit: r < 0.305203 @ 95%CL (1 toyMC)
   68% expected band : 0.305203 < r < 0.305203
   95% expected band : 0.305203 < r < 0.305203
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2138537097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.258728 +/- 0.00233261 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.258728 @ 95%CL (1 toyMC)
median expected limit: r < 0.258728 @ 95%CL (1 toyMC)
   68% expected band : 0.258728 < r < 0.258728
   95% expected band : 0.258728 < r < 0.258728
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -458144589
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305701 +/- 0.00222914 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.305701 @ 95%CL (1 toyMC)
median expected limit: r < 0.305701 @ 95%CL (1 toyMC)
   68% expected band : 0.305701 < r < 0.305701
   95% expected band : 0.305701 < r < 0.305701
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 230402518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294936 +/- 0.00207571 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.294936 @ 95%CL (1 toyMC)
median expected limit: r < 0.294936 @ 95%CL (1 toyMC)
   68% expected band : 0.294936 < r < 0.294936
   95% expected band : 0.294936 < r < 0.294936
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -252107586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221106 +/- 0.00294634 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.221106 @ 95%CL (1 toyMC)
median expected limit: r < 0.221106 @ 95%CL (1 toyMC)
   68% expected band : 0.221106 < r < 0.221106
   95% expected band : 0.221106 < r < 0.221106
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 167960996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217917 +/- 0.00236314 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.217917 @ 95%CL (1 toyMC)
median expected limit: r < 0.217917 @ 95%CL (1 toyMC)
   68% expected band : 0.217917 < r < 0.217917
   95% expected band : 0.217917 < r < 0.217917
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 927809217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186644 +/- 0.00345812 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.186644 @ 95%CL (1 toyMC)
median expected limit: r < 0.186644 @ 95%CL (1 toyMC)
   68% expected band : 0.186644 < r < 0.186644
   95% expected band : 0.186644 < r < 0.186644
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -445315914
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.267101 +/- 0.00272477 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.267101 @ 95%CL (1 toyMC)
median expected limit: r < 0.267101 @ 95%CL (1 toyMC)
   68% expected band : 0.267101 < r < 0.267101
   95% expected band : 0.267101 < r < 0.267101
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -167063942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247885 +/- 0.00234937 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.247885 @ 95%CL (1 toyMC)
median expected limit: r < 0.247885 @ 95%CL (1 toyMC)
   68% expected band : 0.247885 < r < 0.247885
   95% expected band : 0.247885 < r < 0.247885
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1684994460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.176015 +/- 0.00500748 @ 95% CL (95 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.176015 @ 95%CL (1 toyMC)
median expected limit: r < 0.176015 @ 95%CL (1 toyMC)
   68% expected band : 0.176015 < r < 0.176015
   95% expected band : 0.176015 < r < 0.176015
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2028742845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.24111 +/- 0.00243311 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.24111 @ 95%CL (1 toyMC)
median expected limit: r < 0.24111 @ 95%CL (1 toyMC)
   68% expected band : 0.24111 < r < 0.24111
   95% expected band : 0.24111 < r < 0.24111
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1317269958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.218089 +/- 0.00297244 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.218089 @ 95%CL (1 toyMC)
median expected limit: r < 0.218089 @ 95%CL (1 toyMC)
   68% expected band : 0.218089 < r < 0.218089
   95% expected band : 0.218089 < r < 0.218089
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1361545260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.489475 +/- 0.00187651 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.489475 @ 95%CL (1 toyMC)
median expected limit: r < 0.489475 @ 95%CL (1 toyMC)
   68% expected band : 0.489475 < r < 0.489475
   95% expected band : 0.489475 < r < 0.489475
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1211388940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.233687 +/- 0.00288144 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.233687 @ 95%CL (1 toyMC)
median expected limit: r < 0.233687 @ 95%CL (1 toyMC)
   68% expected band : 0.233687 < r < 0.233687
   95% expected band : 0.233687 < r < 0.233687
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1042974302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.534924 +/- 0.00212234 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.534924 @ 95%CL (1 toyMC)
median expected limit: r < 0.534924 @ 95%CL (1 toyMC)
   68% expected band : 0.534924 < r < 0.534924
   95% expected band : 0.534924 < r < 0.534924
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 400760802
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.19253 +/- 0.003271 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.19253 @ 95%CL (1 toyMC)
median expected limit: r < 0.19253 @ 95%CL (1 toyMC)
   68% expected band : 0.19253 < r < 0.19253
   95% expected band : 0.19253 < r < 0.19253
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1083440718
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.277638 +/- 0.00239662 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.277638 @ 95%CL (1 toyMC)
median expected limit: r < 0.277638 @ 95%CL (1 toyMC)
   68% expected band : 0.277638 < r < 0.277638
   95% expected band : 0.277638 < r < 0.277638
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 688211122
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.265712 +/- 0.00278449 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.265712 @ 95%CL (1 toyMC)
median expected limit: r < 0.265712 @ 95%CL (1 toyMC)
   68% expected band : 0.265712 < r < 0.265712
   95% expected band : 0.265712 < r < 0.265712
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 822667894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.468271 +/- 0.00176769 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.468271 @ 95%CL (1 toyMC)
median expected limit: r < 0.468271 @ 95%CL (1 toyMC)
   68% expected band : 0.468271 < r < 0.468271
   95% expected band : 0.468271 < r < 0.468271
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -508748378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237704 +/- 0.00293886 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.237704 @ 95%CL (1 toyMC)
median expected limit: r < 0.237704 @ 95%CL (1 toyMC)
   68% expected band : 0.237704 < r < 0.237704
   95% expected band : 0.237704 < r < 0.237704
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 537808499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.34875 +/- 0.00186067 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.34875 @ 95%CL (1 toyMC)
median expected limit: r < 0.34875 @ 95%CL (1 toyMC)
   68% expected band : 0.34875 < r < 0.34875
   95% expected band : 0.34875 < r < 0.34875
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -975226655
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.357586 +/- 0.00221828 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.357586 @ 95%CL (1 toyMC)
median expected limit: r < 0.357586 @ 95%CL (1 toyMC)
   68% expected band : 0.357586 < r < 0.357586
   95% expected band : 0.357586 < r < 0.357586
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1758528643
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.44464 +/- 0.00210374 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.44464 @ 95%CL (1 toyMC)
median expected limit: r < 0.44464 @ 95%CL (1 toyMC)
   68% expected band : 0.44464 < r < 0.44464
   95% expected band : 0.44464 < r < 0.44464
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1844448604
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234421 +/- 0.0032266 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.234421 @ 95%CL (1 toyMC)
median expected limit: r < 0.234421 @ 95%CL (1 toyMC)
   68% expected band : 0.234421 < r < 0.234421
   95% expected band : 0.234421 < r < 0.234421
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 856400739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.291062 +/- 0.00183665 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.291062 @ 95%CL (1 toyMC)
median expected limit: r < 0.291062 @ 95%CL (1 toyMC)
   68% expected band : 0.291062 < r < 0.291062
   95% expected band : 0.291062 < r < 0.291062
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1777017573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.343581 +/- 0.00207348 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.343581 @ 95%CL (1 toyMC)
median expected limit: r < 0.343581 @ 95%CL (1 toyMC)
   68% expected band : 0.343581 < r < 0.343581
   95% expected band : 0.343581 < r < 0.343581
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -678171889
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.220711 +/- 0.00261376 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.220711 @ 95%CL (1 toyMC)
median expected limit: r < 0.220711 @ 95%CL (1 toyMC)
   68% expected band : 0.220711 < r < 0.220711
   95% expected band : 0.220711 < r < 0.220711
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1239170907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.223076 +/- 0.00240373 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.223076 @ 95%CL (1 toyMC)
median expected limit: r < 0.223076 @ 95%CL (1 toyMC)
   68% expected band : 0.223076 < r < 0.223076
   95% expected band : 0.223076 < r < 0.223076
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 791388054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29576 +/- 0.00190196 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.29576 @ 95%CL (1 toyMC)
median expected limit: r < 0.29576 @ 95%CL (1 toyMC)
   68% expected band : 0.29576 < r < 0.29576
   95% expected band : 0.29576 < r < 0.29576
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -990522164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204729 +/- 0.00289204 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.204729 @ 95%CL (1 toyMC)
median expected limit: r < 0.204729 @ 95%CL (1 toyMC)
   68% expected band : 0.204729 < r < 0.204729
   95% expected band : 0.204729 < r < 0.204729
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -975284694
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.362932 +/- 0.002102 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.362932 @ 95%CL (1 toyMC)
median expected limit: r < 0.362932 @ 95%CL (1 toyMC)
   68% expected band : 0.362932 < r < 0.362932
   95% expected band : 0.362932 < r < 0.362932
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -136573432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286477 +/- 0.00183521 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.286477 @ 95%CL (1 toyMC)
median expected limit: r < 0.286477 @ 95%CL (1 toyMC)
   68% expected band : 0.286477 < r < 0.286477
   95% expected band : 0.286477 < r < 0.286477
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1650390781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.196312 +/- 0.00307418 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.196312 @ 95%CL (1 toyMC)
median expected limit: r < 0.196312 @ 95%CL (1 toyMC)
   68% expected band : 0.196312 < r < 0.196312
   95% expected band : 0.196312 < r < 0.196312
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1845382577
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29979 +/- 0.00242918 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.29979 @ 95%CL (1 toyMC)
median expected limit: r < 0.29979 @ 95%CL (1 toyMC)
   68% expected band : 0.29979 < r < 0.29979
   95% expected band : 0.29979 < r < 0.29979
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1642659351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.386454 +/- 0.00165932 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.386454 @ 95%CL (1 toyMC)
median expected limit: r < 0.386454 @ 95%CL (1 toyMC)
   68% expected band : 0.386454 < r < 0.386454
   95% expected band : 0.386454 < r < 0.386454
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 372122558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.188432 +/- 0.00309098 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.188432 @ 95%CL (1 toyMC)
median expected limit: r < 0.188432 @ 95%CL (1 toyMC)
   68% expected band : 0.188432 < r < 0.188432
   95% expected band : 0.188432 < r < 0.188432
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1204951743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232005 +/- 0.00244578 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.232005 @ 95%CL (1 toyMC)
median expected limit: r < 0.232005 @ 95%CL (1 toyMC)
   68% expected band : 0.232005 < r < 0.232005
   95% expected band : 0.232005 < r < 0.232005
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1871377763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.289816 +/- 0.00203271 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.289816 @ 95%CL (1 toyMC)
median expected limit: r < 0.289816 @ 95%CL (1 toyMC)
   68% expected band : 0.289816 < r < 0.289816
   95% expected band : 0.289816 < r < 0.289816
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1666042753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.430353 +/- 0.00189438 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.430353 @ 95%CL (1 toyMC)
median expected limit: r < 0.430353 @ 95%CL (1 toyMC)
   68% expected band : 0.430353 < r < 0.430353
   95% expected band : 0.430353 < r < 0.430353
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 467372138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.33355 +/- 0.00191516 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.33355 @ 95%CL (1 toyMC)
median expected limit: r < 0.33355 @ 95%CL (1 toyMC)
   68% expected band : 0.33355 < r < 0.33355
   95% expected band : 0.33355 < r < 0.33355
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1227578199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216522 +/- 0.00225587 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.216522 @ 95%CL (1 toyMC)
median expected limit: r < 0.216522 @ 95%CL (1 toyMC)
   68% expected band : 0.216522 < r < 0.216522
   95% expected band : 0.216522 < r < 0.216522
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -112591587
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.18446 +/- 0.00415359 @ 95% CL (96 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.18446 @ 95%CL (1 toyMC)
median expected limit: r < 0.18446 @ 95%CL (1 toyMC)
   68% expected band : 0.18446 < r < 0.18446
   95% expected band : 0.18446 < r < 0.18446
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -629213825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26467 +/- 0.00232303 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.26467 @ 95%CL (1 toyMC)
median expected limit: r < 0.26467 @ 95%CL (1 toyMC)
   68% expected band : 0.26467 < r < 0.26467
   95% expected band : 0.26467 < r < 0.26467
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1329616443
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.298081 +/- 0.00232194 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.298081 @ 95%CL (1 toyMC)
median expected limit: r < 0.298081 @ 95%CL (1 toyMC)
   68% expected band : 0.298081 < r < 0.298081
   95% expected band : 0.298081 < r < 0.298081
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2017801979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.436864 +/- 0.00168244 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.436864 @ 95%CL (1 toyMC)
median expected limit: r < 0.436864 @ 95%CL (1 toyMC)
   68% expected band : 0.436864 < r < 0.436864
   95% expected band : 0.436864 < r < 0.436864
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1489371172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.400139 +/- 0.00198618 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.400139 @ 95%CL (1 toyMC)
median expected limit: r < 0.400139 @ 95%CL (1 toyMC)
   68% expected band : 0.400139 < r < 0.400139
   95% expected band : 0.400139 < r < 0.400139
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1823701818
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338136 +/- 0.00148578 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.338136 @ 95%CL (1 toyMC)
median expected limit: r < 0.338136 @ 95%CL (1 toyMC)
   68% expected band : 0.338136 < r < 0.338136
   95% expected band : 0.338136 < r < 0.338136
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1450304246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217239 +/- 0.00265321 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.217239 @ 95%CL (1 toyMC)
median expected limit: r < 0.217239 @ 95%CL (1 toyMC)
   68% expected band : 0.217239 < r < 0.217239
   95% expected band : 0.217239 < r < 0.217239
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2117510504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.215624 +/- 0.00323452 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.215624 @ 95%CL (1 toyMC)
median expected limit: r < 0.215624 @ 95%CL (1 toyMC)
   68% expected band : 0.215624 < r < 0.215624
   95% expected band : 0.215624 < r < 0.215624
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1580586421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270674 +/- 0.00219271 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.270674 @ 95%CL (1 toyMC)
median expected limit: r < 0.270674 @ 95%CL (1 toyMC)
   68% expected band : 0.270674 < r < 0.270674
   95% expected band : 0.270674 < r < 0.270674
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -923691793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.320597 +/- 0.00172919 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.320597 @ 95%CL (1 toyMC)
median expected limit: r < 0.320597 @ 95%CL (1 toyMC)
   68% expected band : 0.320597 < r < 0.320597
   95% expected band : 0.320597 < r < 0.320597
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1571553436
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304238 +/- 0.00301399 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.304238 @ 95%CL (1 toyMC)
median expected limit: r < 0.304238 @ 95%CL (1 toyMC)
   68% expected band : 0.304238 < r < 0.304238
   95% expected band : 0.304238 < r < 0.304238
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2017937556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255868 +/- 0.00233492 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.255868 @ 95%CL (1 toyMC)
median expected limit: r < 0.255868 @ 95%CL (1 toyMC)
   68% expected band : 0.255868 < r < 0.255868
   95% expected band : 0.255868 < r < 0.255868
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 243244285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.273137 +/- 0.00180501 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.273137 @ 95%CL (1 toyMC)
median expected limit: r < 0.273137 @ 95%CL (1 toyMC)
   68% expected band : 0.273137 < r < 0.273137
   95% expected band : 0.273137 < r < 0.273137
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1178937553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212888 +/- 0.00256586 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.212888 @ 95%CL (1 toyMC)
median expected limit: r < 0.212888 @ 95%CL (1 toyMC)
   68% expected band : 0.212888 < r < 0.212888
   95% expected band : 0.212888 < r < 0.212888
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1400007081
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236222 +/- 0.00311257 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.236222 @ 95%CL (1 toyMC)
median expected limit: r < 0.236222 @ 95%CL (1 toyMC)
   68% expected band : 0.236222 < r < 0.236222
   95% expected band : 0.236222 < r < 0.236222
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 985332476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261393 +/- 0.00261143 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.261393 @ 95%CL (1 toyMC)
median expected limit: r < 0.261393 @ 95%CL (1 toyMC)
   68% expected band : 0.261393 < r < 0.261393
   95% expected band : 0.261393 < r < 0.261393
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1103750770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.180454 +/- 0.00375602 @ 95% CL (98 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.180454 @ 95%CL (1 toyMC)
median expected limit: r < 0.180454 @ 95%CL (1 toyMC)
   68% expected band : 0.180454 < r < 0.180454
   95% expected band : 0.180454 < r < 0.180454
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1337839465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224066 +/- 0.00266049 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.224066 @ 95%CL (1 toyMC)
median expected limit: r < 0.224066 @ 95%CL (1 toyMC)
   68% expected band : 0.224066 < r < 0.224066
   95% expected band : 0.224066 < r < 0.224066
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 920805237
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262121 +/- 0.00181418 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.262121 @ 95%CL (1 toyMC)
median expected limit: r < 0.262121 @ 95%CL (1 toyMC)
   68% expected band : 0.262121 < r < 0.262121
   95% expected band : 0.262121 < r < 0.262121
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1387875925
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.174142 +/- 0.00258659 @ 95% CL (98 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.174142 @ 95%CL (1 toyMC)
median expected limit: r < 0.174142 @ 95%CL (1 toyMC)
   68% expected band : 0.174142 < r < 0.174142
   95% expected band : 0.174142 < r < 0.174142
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -498877827
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.168893 +/- 0.00301334 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.168893 @ 95%CL (1 toyMC)
median expected limit: r < 0.168893 @ 95%CL (1 toyMC)
   68% expected band : 0.168893 < r < 0.168893
   95% expected band : 0.168893 < r < 0.168893
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1517711314
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.376719 +/- 0.00250538 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.376719 @ 95%CL (1 toyMC)
median expected limit: r < 0.376719 @ 95%CL (1 toyMC)
   68% expected band : 0.376719 < r < 0.376719
   95% expected band : 0.376719 < r < 0.376719
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2132247524
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.378595 +/- 0.00180145 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.378595 @ 95%CL (1 toyMC)
median expected limit: r < 0.378595 @ 95%CL (1 toyMC)
   68% expected band : 0.378595 < r < 0.378595
   95% expected band : 0.378595 < r < 0.378595
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1004277949.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1006013514.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1029779247.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1042974302.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1083440718.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-112591587.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1211388940.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1227578199.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1337839465.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-136573432.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1400007081.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1450304246.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1471703612.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1487823071.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1489371172.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1517711314.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1525996222.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1571553436.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1580586421.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1596715806.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1608454198.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1610033195.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1650390781.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-167063942.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-1758528643.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1762691571.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-1777017573.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-1805857024.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-1815804443.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-1844448604.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-1871377763.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-1974815256.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-2017937556.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-2116220037.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-2117510504.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-2132247524.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-252107586.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-282224741.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-346657057.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-445315914.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-458144589.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-498877827.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-508748378.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-551903547.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-629213825.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-678171889.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-828402205.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-831797572.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-891163262.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.-923691793.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.-924122230.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.-975226655.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.-975284694.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.-990522164.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1061062530.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1103750770.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1178937553.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1204951743.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1222963748.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1226564527.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1239170907.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1300626762.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1317269958.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1329616443.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1361545260.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1387875925.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1476291999.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1555594698.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1642659351.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1666042753.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1668835911.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.167960996.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1684994460.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1751656546.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1823701818.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.1845382577.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.1856013201.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.190794060.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.1949428426.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.2017801979.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.2028742845.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.2138537097.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.230402518.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.243244285.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.26414107.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.298200887.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.325724611.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.335963754.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.372122558.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.400760802.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.467372138.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.537808499.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.688211122.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.791388054.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.822667894.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.856400739.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.920805237.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.927809217.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.942183589.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.985332476.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1095400594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238202 +/- 0.00258475 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.238202 @ 95%CL (1 toyMC)
median expected limit: r < 0.238202 @ 95%CL (1 toyMC)
   68% expected band : 0.238202 < r < 0.238202
   95% expected band : 0.238202 < r < 0.238202
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 286493537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216848 +/- 0.0026071 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.216848 @ 95%CL (1 toyMC)
median expected limit: r < 0.216848 @ 95%CL (1 toyMC)
   68% expected band : 0.216848 < r < 0.216848
   95% expected band : 0.216848 < r < 0.216848
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1217644763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242939 +/- 0.00248543 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.242939 @ 95%CL (1 toyMC)
median expected limit: r < 0.242939 @ 95%CL (1 toyMC)
   68% expected band : 0.242939 < r < 0.242939
   95% expected band : 0.242939 < r < 0.242939
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -856243133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.184654 +/- 0.00342568 @ 95% CL (98 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.184654 @ 95%CL (1 toyMC)
median expected limit: r < 0.184654 @ 95%CL (1 toyMC)
   68% expected band : 0.184654 < r < 0.184654
   95% expected band : 0.184654 < r < 0.184654
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 422625256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268516 +/- 0.00218839 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.268516 @ 95%CL (1 toyMC)
median expected limit: r < 0.268516 @ 95%CL (1 toyMC)
   68% expected band : 0.268516 < r < 0.268516
   95% expected band : 0.268516 < r < 0.268516
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1221229032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.203586 +/- 0.00290486 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.203586 @ 95%CL (1 toyMC)
median expected limit: r < 0.203586 @ 95%CL (1 toyMC)
   68% expected band : 0.203586 < r < 0.203586
   95% expected band : 0.203586 < r < 0.203586
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2144193184
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247719 +/- 0.00222295 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.247719 @ 95%CL (1 toyMC)
median expected limit: r < 0.247719 @ 95%CL (1 toyMC)
   68% expected band : 0.247719 < r < 0.247719
   95% expected band : 0.247719 < r < 0.247719
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1134451605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.182062 +/- 0.00266149 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.182062 @ 95%CL (1 toyMC)
median expected limit: r < 0.182062 @ 95%CL (1 toyMC)
   68% expected band : 0.182062 < r < 0.182062
   95% expected band : 0.182062 < r < 0.182062
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -731659895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.561975 +/- 0.00175513 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.561975 @ 95%CL (1 toyMC)
median expected limit: r < 0.561975 @ 95%CL (1 toyMC)
   68% expected band : 0.561975 < r < 0.561975
   95% expected band : 0.561975 < r < 0.561975
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 916891066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.227402 +/- 0.00246119 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.227402 @ 95%CL (1 toyMC)
median expected limit: r < 0.227402 @ 95%CL (1 toyMC)
   68% expected band : 0.227402 < r < 0.227402
   95% expected band : 0.227402 < r < 0.227402
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 890637051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224839 +/- 0.00278724 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.224839 @ 95%CL (1 toyMC)
median expected limit: r < 0.224839 @ 95%CL (1 toyMC)
   68% expected band : 0.224839 < r < 0.224839
   95% expected band : 0.224839 < r < 0.224839
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1476435706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.458386 +/- 0.00216233 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.458386 @ 95%CL (1 toyMC)
median expected limit: r < 0.458386 @ 95%CL (1 toyMC)
   68% expected band : 0.458386 < r < 0.458386
   95% expected band : 0.458386 < r < 0.458386
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 509214749
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195898 +/- 0.00279004 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.195898 @ 95%CL (1 toyMC)
median expected limit: r < 0.195898 @ 95%CL (1 toyMC)
   68% expected band : 0.195898 < r < 0.195898
   95% expected band : 0.195898 < r < 0.195898
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1730866925
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.239282 +/- 0.00279508 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.239282 @ 95%CL (1 toyMC)
median expected limit: r < 0.239282 @ 95%CL (1 toyMC)
   68% expected band : 0.239282 < r < 0.239282
   95% expected band : 0.239282 < r < 0.239282
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1320772475
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.196851 +/- 0.00274112 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.196851 @ 95%CL (1 toyMC)
median expected limit: r < 0.196851 @ 95%CL (1 toyMC)
   68% expected band : 0.196851 < r < 0.196851
   95% expected band : 0.196851 < r < 0.196851
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -711595657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.381663 +/- 0.0024555 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.381663 @ 95%CL (1 toyMC)
median expected limit: r < 0.381663 @ 95%CL (1 toyMC)
   68% expected band : 0.381663 < r < 0.381663
   95% expected band : 0.381663 < r < 0.381663
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1608414156
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282402 +/- 0.00294152 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.282402 @ 95%CL (1 toyMC)
median expected limit: r < 0.282402 @ 95%CL (1 toyMC)
   68% expected band : 0.282402 < r < 0.282402
   95% expected band : 0.282402 < r < 0.282402
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1007646561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.296155 +/- 0.00188653 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.296155 @ 95%CL (1 toyMC)
median expected limit: r < 0.296155 @ 95%CL (1 toyMC)
   68% expected band : 0.296155 < r < 0.296155
   95% expected band : 0.296155 < r < 0.296155
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2143908697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194523 +/- 0.0028113 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.194523 @ 95%CL (1 toyMC)
median expected limit: r < 0.194523 @ 95%CL (1 toyMC)
   68% expected band : 0.194523 < r < 0.194523
   95% expected band : 0.194523 < r < 0.194523
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1648434402
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253362 +/- 0.00249058 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.253362 @ 95%CL (1 toyMC)
median expected limit: r < 0.253362 @ 95%CL (1 toyMC)
   68% expected band : 0.253362 < r < 0.253362
   95% expected band : 0.253362 < r < 0.253362
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1620792514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.23565 +/- 0.00247009 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.23565 @ 95%CL (1 toyMC)
median expected limit: r < 0.23565 @ 95%CL (1 toyMC)
   68% expected band : 0.23565 < r < 0.23565
   95% expected band : 0.23565 < r < 0.23565
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -415734600
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226379 +/- 0.00276927 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.226379 @ 95%CL (1 toyMC)
median expected limit: r < 0.226379 @ 95%CL (1 toyMC)
   68% expected band : 0.226379 < r < 0.226379
   95% expected band : 0.226379 < r < 0.226379
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1813072635
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.264521 +/- 0.0025779 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.264521 @ 95%CL (1 toyMC)
median expected limit: r < 0.264521 @ 95%CL (1 toyMC)
   68% expected band : 0.264521 < r < 0.264521
   95% expected band : 0.264521 < r < 0.264521
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1965940608
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.458912 +/- 0.00174271 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.458912 @ 95%CL (1 toyMC)
median expected limit: r < 0.458912 @ 95%CL (1 toyMC)
   68% expected band : 0.458912 < r < 0.458912
   95% expected band : 0.458912 < r < 0.458912
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1081575213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.27221 +/- 0.00238074 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.27221 @ 95%CL (1 toyMC)
median expected limit: r < 0.27221 @ 95%CL (1 toyMC)
   68% expected band : 0.27221 < r < 0.27221
   95% expected band : 0.27221 < r < 0.27221
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1581806881
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246766 +/- 0.00201921 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.246766 @ 95%CL (1 toyMC)
median expected limit: r < 0.246766 @ 95%CL (1 toyMC)
   68% expected band : 0.246766 < r < 0.246766
   95% expected band : 0.246766 < r < 0.246766
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1209108373
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.303042 +/- 0.00251522 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.303042 @ 95%CL (1 toyMC)
median expected limit: r < 0.303042 @ 95%CL (1 toyMC)
   68% expected band : 0.303042 < r < 0.303042
   95% expected band : 0.303042 < r < 0.303042
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2091154654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.297836 +/- 0.0020124 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.297836 @ 95%CL (1 toyMC)
median expected limit: r < 0.297836 @ 95%CL (1 toyMC)
   68% expected band : 0.297836 < r < 0.297836
   95% expected band : 0.297836 < r < 0.297836
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -886865747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.211628 +/- 0.00353505 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.211628 @ 95%CL (1 toyMC)
median expected limit: r < 0.211628 @ 95%CL (1 toyMC)
   68% expected band : 0.211628 < r < 0.211628
   95% expected band : 0.211628 < r < 0.211628
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -566889632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206286 +/- 0.00273507 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.206286 @ 95%CL (1 toyMC)
median expected limit: r < 0.206286 @ 95%CL (1 toyMC)
   68% expected band : 0.206286 < r < 0.206286
   95% expected band : 0.206286 < r < 0.206286
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1500353056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.296307 +/- 0.00214426 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.296307 @ 95%CL (1 toyMC)
median expected limit: r < 0.296307 @ 95%CL (1 toyMC)
   68% expected band : 0.296307 < r < 0.296307
   95% expected band : 0.296307 < r < 0.296307
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1090309154
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.278346 +/- 0.00251477 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.278346 @ 95%CL (1 toyMC)
median expected limit: r < 0.278346 @ 95%CL (1 toyMC)
   68% expected band : 0.278346 < r < 0.278346
   95% expected band : 0.278346 < r < 0.278346
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 48132587
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.34188 +/- 0.0019986 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.34188 @ 95%CL (1 toyMC)
median expected limit: r < 0.34188 @ 95%CL (1 toyMC)
   68% expected band : 0.34188 < r < 0.34188
   95% expected band : 0.34188 < r < 0.34188
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1581992493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232815 +/- 0.00265518 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.232815 @ 95%CL (1 toyMC)
median expected limit: r < 0.232815 @ 95%CL (1 toyMC)
   68% expected band : 0.232815 < r < 0.232815
   95% expected band : 0.232815 < r < 0.232815
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 839558158
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.498057 +/- 0.0020644 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.498057 @ 95%CL (1 toyMC)
median expected limit: r < 0.498057 @ 95%CL (1 toyMC)
   68% expected band : 0.498057 < r < 0.498057
   95% expected band : 0.498057 < r < 0.498057
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1884797007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204997 +/- 0.00215844 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.204997 @ 95%CL (1 toyMC)
median expected limit: r < 0.204997 @ 95%CL (1 toyMC)
   68% expected band : 0.204997 < r < 0.204997
   95% expected band : 0.204997 < r < 0.204997
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -425352934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208201 +/- 0.00247409 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.208201 @ 95%CL (1 toyMC)
median expected limit: r < 0.208201 @ 95%CL (1 toyMC)
   68% expected band : 0.208201 < r < 0.208201
   95% expected band : 0.208201 < r < 0.208201
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1224583344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.315543 +/- 0.0026084 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.315543 @ 95%CL (1 toyMC)
median expected limit: r < 0.315543 @ 95%CL (1 toyMC)
   68% expected band : 0.315543 < r < 0.315543
   95% expected band : 0.315543 < r < 0.315543
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1826195097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.456248 +/- 0.0019433 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.456248 @ 95%CL (1 toyMC)
median expected limit: r < 0.456248 @ 95%CL (1 toyMC)
   68% expected band : 0.456248 < r < 0.456248
   95% expected band : 0.456248 < r < 0.456248
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1281201753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.34666 +/- 0.0023557 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.34666 @ 95%CL (1 toyMC)
median expected limit: r < 0.34666 @ 95%CL (1 toyMC)
   68% expected band : 0.34666 < r < 0.34666
   95% expected band : 0.34666 < r < 0.34666
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1752221870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.214096 +/- 0.00329814 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.214096 @ 95%CL (1 toyMC)
median expected limit: r < 0.214096 @ 95%CL (1 toyMC)
   68% expected band : 0.214096 < r < 0.214096
   95% expected band : 0.214096 < r < 0.214096
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1870506888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325127 +/- 0.00222231 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.325127 @ 95%CL (1 toyMC)
median expected limit: r < 0.325127 @ 95%CL (1 toyMC)
   68% expected band : 0.325127 < r < 0.325127
   95% expected band : 0.325127 < r < 0.325127
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1882540952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246936 +/- 0.00269165 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.246936 @ 95%CL (1 toyMC)
median expected limit: r < 0.246936 @ 95%CL (1 toyMC)
   68% expected band : 0.246936 < r < 0.246936
   95% expected band : 0.246936 < r < 0.246936
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -66980108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361568 +/- 0.00268283 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.361568 @ 95%CL (1 toyMC)
median expected limit: r < 0.361568 @ 95%CL (1 toyMC)
   68% expected band : 0.361568 < r < 0.361568
   95% expected band : 0.361568 < r < 0.361568
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1196406591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246084 +/- 0.00280956 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.246084 @ 95%CL (1 toyMC)
median expected limit: r < 0.246084 @ 95%CL (1 toyMC)
   68% expected band : 0.246084 < r < 0.246084
   95% expected band : 0.246084 < r < 0.246084
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 394978474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329125 +/- 0.00230129 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.329125 @ 95%CL (1 toyMC)
median expected limit: r < 0.329125 @ 95%CL (1 toyMC)
   68% expected band : 0.329125 < r < 0.329125
   95% expected band : 0.329125 < r < 0.329125
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -895617363
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36583 +/- 0.00237888 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.36583 @ 95%CL (1 toyMC)
median expected limit: r < 0.36583 @ 95%CL (1 toyMC)
   68% expected band : 0.36583 < r < 0.36583
   95% expected band : 0.36583 < r < 0.36583
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 312255504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237018 +/- 0.00254624 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.237018 @ 95%CL (1 toyMC)
median expected limit: r < 0.237018 @ 95%CL (1 toyMC)
   68% expected band : 0.237018 < r < 0.237018
   95% expected band : 0.237018 < r < 0.237018
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 811958425
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.252471 +/- 0.00276723 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.252471 @ 95%CL (1 toyMC)
median expected limit: r < 0.252471 @ 95%CL (1 toyMC)
   68% expected band : 0.252471 < r < 0.252471
   95% expected band : 0.252471 < r < 0.252471
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -563344372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237163 +/- 0.00276832 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.237163 @ 95%CL (1 toyMC)
median expected limit: r < 0.237163 @ 95%CL (1 toyMC)
   68% expected band : 0.237163 < r < 0.237163
   95% expected band : 0.237163 < r < 0.237163
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1379568644
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312476 +/- 0.00200812 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.312476 @ 95%CL (1 toyMC)
median expected limit: r < 0.312476 @ 95%CL (1 toyMC)
   68% expected band : 0.312476 < r < 0.312476
   95% expected band : 0.312476 < r < 0.312476
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 182958489
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.256818 +/- 0.00239458 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.256818 @ 95%CL (1 toyMC)
median expected limit: r < 0.256818 @ 95%CL (1 toyMC)
   68% expected band : 0.256818 < r < 0.256818
   95% expected band : 0.256818 < r < 0.256818
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -144658938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255749 +/- 0.00219344 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.255749 @ 95%CL (1 toyMC)
median expected limit: r < 0.255749 @ 95%CL (1 toyMC)
   68% expected band : 0.255749 < r < 0.255749
   95% expected band : 0.255749 < r < 0.255749
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1641435276
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.437537 +/- 0.00211032 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.437537 @ 95%CL (1 toyMC)
median expected limit: r < 0.437537 @ 95%CL (1 toyMC)
   68% expected band : 0.437537 < r < 0.437537
   95% expected band : 0.437537 < r < 0.437537
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 845100834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217628 +/- 0.00300263 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.217628 @ 95%CL (1 toyMC)
median expected limit: r < 0.217628 @ 95%CL (1 toyMC)
   68% expected band : 0.217628 < r < 0.217628
   95% expected band : 0.217628 < r < 0.217628
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1482012216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247545 +/- 0.00218778 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.247545 @ 95%CL (1 toyMC)
median expected limit: r < 0.247545 @ 95%CL (1 toyMC)
   68% expected band : 0.247545 < r < 0.247545
   95% expected band : 0.247545 < r < 0.247545
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 913759852
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.181599 +/- 0.00336123 @ 95% CL (97 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.181599 @ 95%CL (1 toyMC)
median expected limit: r < 0.181599 @ 95%CL (1 toyMC)
   68% expected band : 0.181599 < r < 0.181599
   95% expected band : 0.181599 < r < 0.181599
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1870256599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286144 +/- 0.0025799 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.286144 @ 95%CL (1 toyMC)
median expected limit: r < 0.286144 @ 95%CL (1 toyMC)
   68% expected band : 0.286144 < r < 0.286144
   95% expected band : 0.286144 < r < 0.286144
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1153476609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.307709 +/- 0.00215674 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.307709 @ 95%CL (1 toyMC)
median expected limit: r < 0.307709 @ 95%CL (1 toyMC)
   68% expected band : 0.307709 < r < 0.307709
   95% expected band : 0.307709 < r < 0.307709
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1042245559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.373436 +/- 0.00227179 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.373436 @ 95%CL (1 toyMC)
median expected limit: r < 0.373436 @ 95%CL (1 toyMC)
   68% expected band : 0.373436 < r < 0.373436
   95% expected band : 0.373436 < r < 0.373436
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -491066565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.267181 +/- 0.00256579 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.267181 @ 95%CL (1 toyMC)
median expected limit: r < 0.267181 @ 95%CL (1 toyMC)
   68% expected band : 0.267181 < r < 0.267181
   95% expected band : 0.267181 < r < 0.267181
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1479775891
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.306492 +/- 0.00233054 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.306492 @ 95%CL (1 toyMC)
median expected limit: r < 0.306492 @ 95%CL (1 toyMC)
   68% expected band : 0.306492 < r < 0.306492
   95% expected band : 0.306492 < r < 0.306492
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1947087831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195793 +/- 0.0034104 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.195793 @ 95%CL (1 toyMC)
median expected limit: r < 0.195793 @ 95%CL (1 toyMC)
   68% expected band : 0.195793 < r < 0.195793
   95% expected band : 0.195793 < r < 0.195793
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1741822124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.463339 +/- 0.00221946 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.463339 @ 95%CL (1 toyMC)
median expected limit: r < 0.463339 @ 95%CL (1 toyMC)
   68% expected band : 0.463339 < r < 0.463339
   95% expected band : 0.463339 < r < 0.463339
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1466817759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.283173 +/- 0.00185449 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.283173 @ 95%CL (1 toyMC)
median expected limit: r < 0.283173 @ 95%CL (1 toyMC)
   68% expected band : 0.283173 < r < 0.283173
   95% expected band : 0.283173 < r < 0.283173
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1928649569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25933 +/- 0.00267133 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.25933 @ 95%CL (1 toyMC)
median expected limit: r < 0.25933 @ 95%CL (1 toyMC)
   68% expected band : 0.25933 < r < 0.25933
   95% expected band : 0.25933 < r < 0.25933
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 463308629
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216842 +/- 0.00303471 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.216842 @ 95%CL (1 toyMC)
median expected limit: r < 0.216842 @ 95%CL (1 toyMC)
   68% expected band : 0.216842 < r < 0.216842
   95% expected band : 0.216842 < r < 0.216842
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2083120489
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281847 +/- 0.0023688 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.281847 @ 95%CL (1 toyMC)
median expected limit: r < 0.281847 @ 95%CL (1 toyMC)
   68% expected band : 0.281847 < r < 0.281847
   95% expected band : 0.281847 < r < 0.281847
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -717118066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.187657 +/- 0.00261798 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.187657 @ 95%CL (1 toyMC)
median expected limit: r < 0.187657 @ 95%CL (1 toyMC)
   68% expected band : 0.187657 < r < 0.187657
   95% expected band : 0.187657 < r < 0.187657
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1600415993
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204256 +/- 0.00347411 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.204256 @ 95%CL (1 toyMC)
median expected limit: r < 0.204256 @ 95%CL (1 toyMC)
   68% expected band : 0.204256 < r < 0.204256
   95% expected band : 0.204256 < r < 0.204256
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2057628421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.164564 +/- 0.0029674 @ 95% CL (97 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.164564 @ 95%CL (1 toyMC)
median expected limit: r < 0.164564 @ 95%CL (1 toyMC)
   68% expected band : 0.164564 < r < 0.164564
   95% expected band : 0.164564 < r < 0.164564
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1489716807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.459805 +/- 0.00166289 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.459805 @ 95%CL (1 toyMC)
median expected limit: r < 0.459805 @ 95%CL (1 toyMC)
   68% expected band : 0.459805 < r < 0.459805
   95% expected band : 0.459805 < r < 0.459805
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1300019330
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.199398 +/- 0.0031229 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.199398 @ 95%CL (1 toyMC)
median expected limit: r < 0.199398 @ 95%CL (1 toyMC)
   68% expected band : 0.199398 < r < 0.199398
   95% expected band : 0.199398 < r < 0.199398
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -533955226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.317218 +/- 0.0022613 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.317218 @ 95%CL (1 toyMC)
median expected limit: r < 0.317218 @ 95%CL (1 toyMC)
   68% expected band : 0.317218 < r < 0.317218
   95% expected band : 0.317218 < r < 0.317218
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1976675085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286294 +/- 0.00181012 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.286294 @ 95%CL (1 toyMC)
median expected limit: r < 0.286294 @ 95%CL (1 toyMC)
   68% expected band : 0.286294 < r < 0.286294
   95% expected band : 0.286294 < r < 0.286294
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -347308154
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.233929 +/- 0.00279718 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.233929 @ 95%CL (1 toyMC)
median expected limit: r < 0.233929 @ 95%CL (1 toyMC)
   68% expected band : 0.233929 < r < 0.233929
   95% expected band : 0.233929 < r < 0.233929
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2089172579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.19077 +/- 0.00325827 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.19077 @ 95%CL (1 toyMC)
median expected limit: r < 0.19077 @ 95%CL (1 toyMC)
   68% expected band : 0.19077 < r < 0.19077
   95% expected band : 0.19077 < r < 0.19077
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1365610572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39228 +/- 0.00212841 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.39228 @ 95%CL (1 toyMC)
median expected limit: r < 0.39228 @ 95%CL (1 toyMC)
   68% expected band : 0.39228 < r < 0.39228
   95% expected band : 0.39228 < r < 0.39228
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1433561020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.222738 +/- 0.00292203 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.222738 @ 95%CL (1 toyMC)
median expected limit: r < 0.222738 @ 95%CL (1 toyMC)
   68% expected band : 0.222738 < r < 0.222738
   95% expected band : 0.222738 < r < 0.222738
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2065665617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.352767 +/- 0.00168668 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.352767 @ 95%CL (1 toyMC)
median expected limit: r < 0.352767 @ 95%CL (1 toyMC)
   68% expected band : 0.352767 < r < 0.352767
   95% expected band : 0.352767 < r < 0.352767
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -640192250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.276771 +/- 0.00203196 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.276771 @ 95%CL (1 toyMC)
median expected limit: r < 0.276771 @ 95%CL (1 toyMC)
   68% expected band : 0.276771 < r < 0.276771
   95% expected band : 0.276771 < r < 0.276771
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -209780102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.250723 +/- 0.00254509 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.250723 @ 95%CL (1 toyMC)
median expected limit: r < 0.250723 @ 95%CL (1 toyMC)
   68% expected band : 0.250723 < r < 0.250723
   95% expected band : 0.250723 < r < 0.250723
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1374167700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189526 +/- 0.00315117 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.189526 @ 95%CL (1 toyMC)
median expected limit: r < 0.189526 @ 95%CL (1 toyMC)
   68% expected band : 0.189526 < r < 0.189526
   95% expected band : 0.189526 < r < 0.189526
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1764993713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.222234 +/- 0.00260604 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.222234 @ 95%CL (1 toyMC)
median expected limit: r < 0.222234 @ 95%CL (1 toyMC)
   68% expected band : 0.222234 < r < 0.222234
   95% expected band : 0.222234 < r < 0.222234
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1456724094
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217512 +/- 0.00304557 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.217512 @ 95%CL (1 toyMC)
median expected limit: r < 0.217512 @ 95%CL (1 toyMC)
   68% expected band : 0.217512 < r < 0.217512
   95% expected band : 0.217512 < r < 0.217512
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1661516965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.45116 +/- 0.00217372 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.45116 @ 95%CL (1 toyMC)
median expected limit: r < 0.45116 @ 95%CL (1 toyMC)
   68% expected band : 0.45116 < r < 0.45116
   95% expected band : 0.45116 < r < 0.45116
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 14743058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.299984 +/- 0.00244785 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.299984 @ 95%CL (1 toyMC)
median expected limit: r < 0.299984 @ 95%CL (1 toyMC)
   68% expected band : 0.299984 < r < 0.299984
   95% expected band : 0.299984 < r < 0.299984
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -714682811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26821 +/- 0.00242776 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.26821 @ 95%CL (1 toyMC)
median expected limit: r < 0.26821 @ 95%CL (1 toyMC)
   68% expected band : 0.26821 < r < 0.26821
   95% expected band : 0.26821 < r < 0.26821
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1643676780
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.222349 +/- 0.0031964 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.222349 @ 95%CL (1 toyMC)
median expected limit: r < 0.222349 @ 95%CL (1 toyMC)
   68% expected band : 0.222349 < r < 0.222349
   95% expected band : 0.222349 < r < 0.222349
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -887647942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.223179 +/- 0.00272578 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.223179 @ 95%CL (1 toyMC)
median expected limit: r < 0.223179 @ 95%CL (1 toyMC)
   68% expected band : 0.223179 < r < 0.223179
   95% expected band : 0.223179 < r < 0.223179
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1502635212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.372474 +/- 0.00187824 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.372474 @ 95%CL (1 toyMC)
median expected limit: r < 0.372474 @ 95%CL (1 toyMC)
   68% expected band : 0.372474 < r < 0.372474
   95% expected band : 0.372474 < r < 0.372474
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 597655883
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190056 +/- 0.00323286 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.190056 @ 95%CL (1 toyMC)
median expected limit: r < 0.190056 @ 95%CL (1 toyMC)
   68% expected band : 0.190056 < r < 0.190056
   95% expected band : 0.190056 < r < 0.190056
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1395803866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260718 +/- 0.00237631 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.260718 @ 95%CL (1 toyMC)
median expected limit: r < 0.260718 @ 95%CL (1 toyMC)
   68% expected band : 0.260718 < r < 0.260718
   95% expected band : 0.260718 < r < 0.260718
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1751469068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.450889 +/- 0.0019538 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.450889 @ 95%CL (1 toyMC)
median expected limit: r < 0.450889 @ 95%CL (1 toyMC)
   68% expected band : 0.450889 < r < 0.450889
   95% expected band : 0.450889 < r < 0.450889
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1040099931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.400665 +/- 0.00184458 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.400665 @ 95%CL (1 toyMC)
median expected limit: r < 0.400665 @ 95%CL (1 toyMC)
   68% expected band : 0.400665 < r < 0.400665
   95% expected band : 0.400665 < r < 0.400665
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1830767264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300232 +/- 0.00239135 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.300232 @ 95%CL (1 toyMC)
median expected limit: r < 0.300232 @ 95%CL (1 toyMC)
   68% expected band : 0.300232 < r < 0.300232
   95% expected band : 0.300232 < r < 0.300232
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1757008295
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281653 +/- 0.00223298 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.281653 @ 95%CL (1 toyMC)
median expected limit: r < 0.281653 @ 95%CL (1 toyMC)
   68% expected band : 0.281653 < r < 0.281653
   95% expected band : 0.281653 < r < 0.281653
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1278312162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242306 +/- 0.00336414 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.242306 @ 95%CL (1 toyMC)
median expected limit: r < 0.242306 @ 95%CL (1 toyMC)
   68% expected band : 0.242306 < r < 0.242306
   95% expected band : 0.242306 < r < 0.242306
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1888999108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224605 +/- 0.00297366 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.224605 @ 95%CL (1 toyMC)
median expected limit: r < 0.224605 @ 95%CL (1 toyMC)
   68% expected band : 0.224605 < r < 0.224605
   95% expected band : 0.224605 < r < 0.224605
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1442451088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.4333 +/- 0.00198255 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.4333 @ 95%CL (1 toyMC)
median expected limit: r < 0.4333 @ 95%CL (1 toyMC)
   68% expected band : 0.4333 < r < 0.4333
   95% expected band : 0.4333 < r < 0.4333
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1007646561.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1040099931.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1081575213.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1090309154.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1095400594.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1209108373.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1217644763.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1224583344.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1300019330.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1320772475.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1365610572.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1379568644.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-144658938.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1466817759.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1479775891.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1482012216.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1500353056.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1502635212.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1600415993.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1641435276.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1643676780.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1648434402.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1661516965.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-1730866925.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-1741822124.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1751469068.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-1757008295.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-1764993713.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-1870256599.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-1870506888.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-1882540952.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-1884797007.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-1888999108.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-1928649569.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-1965940608.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-1976675085.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-2083120489.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-209780102.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-2143908697.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-347308154.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-415734600.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-425352934.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-491066565.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-533955226.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-563344372.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-566889632.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-640192250.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-66980108.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-711595657.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.-714682811.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.-717118066.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.-731659895.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.-856243133.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.-886865747.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.-887647942.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.-895617363.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1042245559.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1134451605.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1153476609.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1196406591.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1221229032.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1278312162.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1281201753.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1374167700.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1395803866.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1433561020.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1442451088.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1456724094.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.14743058.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1476435706.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1489716807.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1581806881.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1581992493.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1608414156.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1620792514.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.1752221870.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.1813072635.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.1826195097.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.182958489.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.1830767264.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.1947087831.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.2057628421.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.2065665617.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.2089172579.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.2091154654.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.2144193184.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.286493537.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.312255504.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.394978474.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.422625256.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.463308629.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.48132587.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.509214749.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.597655883.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.811958425.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.839558158.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.845100834.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.890637051.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.913759852.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.916891066.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 171059520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.41019 +/- 0.00282391 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.41019 @ 95%CL (1 toyMC)
median expected limit: r < 0.41019 @ 95%CL (1 toyMC)
   68% expected band : 0.41019 < r < 0.41019
   95% expected band : 0.41019 < r < 0.41019
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1751632598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.207467 +/- 0.00291903 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.207467 @ 95%CL (1 toyMC)
median expected limit: r < 0.207467 @ 95%CL (1 toyMC)
   68% expected band : 0.207467 < r < 0.207467
   95% expected band : 0.207467 < r < 0.207467
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -85633923
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.290043 +/- 0.00205523 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.290043 @ 95%CL (1 toyMC)
median expected limit: r < 0.290043 @ 95%CL (1 toyMC)
   68% expected band : 0.290043 < r < 0.290043
   95% expected band : 0.290043 < r < 0.290043
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1552908448
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270745 +/- 0.00252946 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.270745 @ 95%CL (1 toyMC)
median expected limit: r < 0.270745 @ 95%CL (1 toyMC)
   68% expected band : 0.270745 < r < 0.270745
   95% expected band : 0.270745 < r < 0.270745
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2006479395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.183006 +/- 0.00463297 @ 95% CL (96 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.183006 @ 95%CL (1 toyMC)
median expected limit: r < 0.183006 @ 95%CL (1 toyMC)
   68% expected band : 0.183006 < r < 0.183006
   95% expected band : 0.183006 < r < 0.183006
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 326833133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.354307 +/- 0.00236801 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.354307 @ 95%CL (1 toyMC)
median expected limit: r < 0.354307 @ 95%CL (1 toyMC)
   68% expected band : 0.354307 < r < 0.354307
   95% expected band : 0.354307 < r < 0.354307
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2063122316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268927 +/- 0.00230478 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.268927 @ 95%CL (1 toyMC)
median expected limit: r < 0.268927 @ 95%CL (1 toyMC)
   68% expected band : 0.268927 < r < 0.268927
   95% expected band : 0.268927 < r < 0.268927
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1888996789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20806 +/- 0.00252968 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.20806 @ 95%CL (1 toyMC)
median expected limit: r < 0.20806 @ 95%CL (1 toyMC)
   68% expected band : 0.20806 < r < 0.20806
   95% expected band : 0.20806 < r < 0.20806
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -525776088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208266 +/- 0.00271847 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.208266 @ 95%CL (1 toyMC)
median expected limit: r < 0.208266 @ 95%CL (1 toyMC)
   68% expected band : 0.208266 < r < 0.208266
   95% expected band : 0.208266 < r < 0.208266
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1894217533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.178086 +/- 0.00377503 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.178086 @ 95%CL (1 toyMC)
median expected limit: r < 0.178086 @ 95%CL (1 toyMC)
   68% expected band : 0.178086 < r < 0.178086
   95% expected band : 0.178086 < r < 0.178086
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1857038465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228711 +/- 0.00249254 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.228711 @ 95%CL (1 toyMC)
median expected limit: r < 0.228711 @ 95%CL (1 toyMC)
   68% expected band : 0.228711 < r < 0.228711
   95% expected band : 0.228711 < r < 0.228711
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1398167795
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.177807 +/- 0.00326665 @ 95% CL (96 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.177807 @ 95%CL (1 toyMC)
median expected limit: r < 0.177807 @ 95%CL (1 toyMC)
   68% expected band : 0.177807 < r < 0.177807
   95% expected band : 0.177807 < r < 0.177807
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2068717927
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280327 +/- 0.00301258 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.280327 @ 95%CL (1 toyMC)
median expected limit: r < 0.280327 @ 95%CL (1 toyMC)
   68% expected band : 0.280327 < r < 0.280327
   95% expected band : 0.280327 < r < 0.280327
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1160501541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204258 +/- 0.00350395 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.204258 @ 95%CL (1 toyMC)
median expected limit: r < 0.204258 @ 95%CL (1 toyMC)
   68% expected band : 0.204258 < r < 0.204258
   95% expected band : 0.204258 < r < 0.204258
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 649516584
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186009 +/- 0.00313513 @ 95% CL (98 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.186009 @ 95%CL (1 toyMC)
median expected limit: r < 0.186009 @ 95%CL (1 toyMC)
   68% expected band : 0.186009 < r < 0.186009
   95% expected band : 0.186009 < r < 0.186009
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1325155812
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237512 +/- 0.00216257 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.237512 @ 95%CL (1 toyMC)
median expected limit: r < 0.237512 @ 95%CL (1 toyMC)
   68% expected band : 0.237512 < r < 0.237512
   95% expected band : 0.237512 < r < 0.237512
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -733149328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246171 +/- 0.00191201 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.246171 @ 95%CL (1 toyMC)
median expected limit: r < 0.246171 @ 95%CL (1 toyMC)
   68% expected band : 0.246171 < r < 0.246171
   95% expected band : 0.246171 < r < 0.246171
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1112118479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.4305 +/- 0.00202718 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.4305 @ 95%CL (1 toyMC)
median expected limit: r < 0.4305 @ 95%CL (1 toyMC)
   68% expected band : 0.4305 < r < 0.4305
   95% expected band : 0.4305 < r < 0.4305
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 994981698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.297153 +/- 0.00268025 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.297153 @ 95%CL (1 toyMC)
median expected limit: r < 0.297153 @ 95%CL (1 toyMC)
   68% expected band : 0.297153 < r < 0.297153
   95% expected band : 0.297153 < r < 0.297153
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1120929989
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.501565 +/- 0.00205153 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.501565 @ 95%CL (1 toyMC)
median expected limit: r < 0.501565 @ 95%CL (1 toyMC)
   68% expected band : 0.501565 < r < 0.501565
   95% expected band : 0.501565 < r < 0.501565
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -462454715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.324813 +/- 0.00177372 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.324813 @ 95%CL (1 toyMC)
median expected limit: r < 0.324813 @ 95%CL (1 toyMC)
   68% expected band : 0.324813 < r < 0.324813
   95% expected band : 0.324813 < r < 0.324813
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 131480409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261069 +/- 0.00308343 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.261069 @ 95%CL (1 toyMC)
median expected limit: r < 0.261069 @ 95%CL (1 toyMC)
   68% expected band : 0.261069 < r < 0.261069
   95% expected band : 0.261069 < r < 0.261069
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -601563101
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189126 +/- 0.00329047 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.189126 @ 95%CL (1 toyMC)
median expected limit: r < 0.189126 @ 95%CL (1 toyMC)
   68% expected band : 0.189126 < r < 0.189126
   95% expected band : 0.189126 < r < 0.189126
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 925290699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186518 +/- 0.00303131 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.186518 @ 95%CL (1 toyMC)
median expected limit: r < 0.186518 @ 95%CL (1 toyMC)
   68% expected band : 0.186518 < r < 0.186518
   95% expected band : 0.186518 < r < 0.186518
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1353005883
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231276 +/- 0.00199396 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.231276 @ 95%CL (1 toyMC)
median expected limit: r < 0.231276 @ 95%CL (1 toyMC)
   68% expected band : 0.231276 < r < 0.231276
   95% expected band : 0.231276 < r < 0.231276
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -995701507
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190001 +/- 0.00230994 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.190001 @ 95%CL (1 toyMC)
median expected limit: r < 0.190001 @ 95%CL (1 toyMC)
   68% expected band : 0.190001 < r < 0.190001
   95% expected band : 0.190001 < r < 0.190001
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -645107745
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.182422 +/- 0.00345364 @ 95% CL (98 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.182422 @ 95%CL (1 toyMC)
median expected limit: r < 0.182422 @ 95%CL (1 toyMC)
   68% expected band : 0.182422 < r < 0.182422
   95% expected band : 0.182422 < r < 0.182422
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1820008647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393407 +/- 0.00169776 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.393407 @ 95%CL (1 toyMC)
median expected limit: r < 0.393407 @ 95%CL (1 toyMC)
   68% expected band : 0.393407 < r < 0.393407
   95% expected band : 0.393407 < r < 0.393407
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -798661382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.207488 +/- 0.00278122 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.207488 @ 95%CL (1 toyMC)
median expected limit: r < 0.207488 @ 95%CL (1 toyMC)
   68% expected band : 0.207488 < r < 0.207488
   95% expected band : 0.207488 < r < 0.207488
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 97383183
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.50557 +/- 0.00212759 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.50557 @ 95%CL (1 toyMC)
median expected limit: r < 0.50557 @ 95%CL (1 toyMC)
   68% expected band : 0.50557 < r < 0.50557
   95% expected band : 0.50557 < r < 0.50557
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1090250070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228527 +/- 0.00306452 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.228527 @ 95%CL (1 toyMC)
median expected limit: r < 0.228527 @ 95%CL (1 toyMC)
   68% expected band : 0.228527 < r < 0.228527
   95% expected band : 0.228527 < r < 0.228527
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -652799599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.386184 +/- 0.00226801 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.386184 @ 95%CL (1 toyMC)
median expected limit: r < 0.386184 @ 95%CL (1 toyMC)
   68% expected band : 0.386184 < r < 0.386184
   95% expected band : 0.386184 < r < 0.386184
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 719729422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226142 +/- 0.00254633 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.226142 @ 95%CL (1 toyMC)
median expected limit: r < 0.226142 @ 95%CL (1 toyMC)
   68% expected band : 0.226142 < r < 0.226142
   95% expected band : 0.226142 < r < 0.226142
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1017235146
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.395207 +/- 0.0023943 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.395207 @ 95%CL (1 toyMC)
median expected limit: r < 0.395207 @ 95%CL (1 toyMC)
   68% expected band : 0.395207 < r < 0.395207
   95% expected band : 0.395207 < r < 0.395207
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -430301442
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229991 +/- 0.00209884 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.229991 @ 95%CL (1 toyMC)
median expected limit: r < 0.229991 @ 95%CL (1 toyMC)
   68% expected band : 0.229991 < r < 0.229991
   95% expected band : 0.229991 < r < 0.229991
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2006777747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.211638 +/- 0.0024507 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.211638 @ 95%CL (1 toyMC)
median expected limit: r < 0.211638 @ 95%CL (1 toyMC)
   68% expected band : 0.211638 < r < 0.211638
   95% expected band : 0.211638 < r < 0.211638
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -155815223
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.348531 +/- 0.00244515 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.348531 @ 95%CL (1 toyMC)
median expected limit: r < 0.348531 @ 95%CL (1 toyMC)
   68% expected band : 0.348531 < r < 0.348531
   95% expected band : 0.348531 < r < 0.348531
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1365502565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.311634 +/- 0.0021649 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.311634 @ 95%CL (1 toyMC)
median expected limit: r < 0.311634 @ 95%CL (1 toyMC)
   68% expected band : 0.311634 < r < 0.311634
   95% expected band : 0.311634 < r < 0.311634
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -841111995
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.324661 +/- 0.00202674 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.324661 @ 95%CL (1 toyMC)
median expected limit: r < 0.324661 @ 95%CL (1 toyMC)
   68% expected band : 0.324661 < r < 0.324661
   95% expected band : 0.324661 < r < 0.324661
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -359360186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228466 +/- 0.00286533 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.228466 @ 95%CL (1 toyMC)
median expected limit: r < 0.228466 @ 95%CL (1 toyMC)
   68% expected band : 0.228466 < r < 0.228466
   95% expected band : 0.228466 < r < 0.228466
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1052970643
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194213 +/- 0.00287231 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.194213 @ 95%CL (1 toyMC)
median expected limit: r < 0.194213 @ 95%CL (1 toyMC)
   68% expected band : 0.194213 < r < 0.194213
   95% expected band : 0.194213 < r < 0.194213
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -995722932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186255 +/- 0.00343235 @ 95% CL (97 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.186255 @ 95%CL (1 toyMC)
median expected limit: r < 0.186255 @ 95%CL (1 toyMC)
   68% expected band : 0.186255 < r < 0.186255
   95% expected band : 0.186255 < r < 0.186255
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 724502876
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.383928 +/- 0.00150267 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.383928 @ 95%CL (1 toyMC)
median expected limit: r < 0.383928 @ 95%CL (1 toyMC)
   68% expected band : 0.383928 < r < 0.383928
   95% expected band : 0.383928 < r < 0.383928
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1646293715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36182 +/- 0.00169159 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.36182 @ 95%CL (1 toyMC)
median expected limit: r < 0.36182 @ 95%CL (1 toyMC)
   68% expected band : 0.36182 < r < 0.36182
   95% expected band : 0.36182 < r < 0.36182
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1745737465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237403 +/- 0.0023917 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.237403 @ 95%CL (1 toyMC)
median expected limit: r < 0.237403 @ 95%CL (1 toyMC)
   68% expected band : 0.237403 < r < 0.237403
   95% expected band : 0.237403 < r < 0.237403
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1206165453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.292283 +/- 0.00281303 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.292283 @ 95%CL (1 toyMC)
median expected limit: r < 0.292283 @ 95%CL (1 toyMC)
   68% expected band : 0.292283 < r < 0.292283
   95% expected band : 0.292283 < r < 0.292283
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -889063207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.384054 +/- 0.00259646 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.384054 @ 95%CL (1 toyMC)
median expected limit: r < 0.384054 @ 95%CL (1 toyMC)
   68% expected band : 0.384054 < r < 0.384054
   95% expected band : 0.384054 < r < 0.384054
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1583971357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194656 +/- 0.00237995 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.194656 @ 95%CL (1 toyMC)
median expected limit: r < 0.194656 @ 95%CL (1 toyMC)
   68% expected band : 0.194656 < r < 0.194656
   95% expected band : 0.194656 < r < 0.194656
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1717937372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.254225 +/- 0.0028539 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.254225 @ 95%CL (1 toyMC)
median expected limit: r < 0.254225 @ 95%CL (1 toyMC)
   68% expected band : 0.254225 < r < 0.254225
   95% expected band : 0.254225 < r < 0.254225
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1599718966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335954 +/- 0.00153422 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.335954 @ 95%CL (1 toyMC)
median expected limit: r < 0.335954 @ 95%CL (1 toyMC)
   68% expected band : 0.335954 < r < 0.335954
   95% expected band : 0.335954 < r < 0.335954
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -643330246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.203108 +/- 0.00288696 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.203108 @ 95%CL (1 toyMC)
median expected limit: r < 0.203108 @ 95%CL (1 toyMC)
   68% expected band : 0.203108 < r < 0.203108
   95% expected band : 0.203108 < r < 0.203108
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -231991517
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301009 +/- 0.00226193 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.301009 @ 95%CL (1 toyMC)
median expected limit: r < 0.301009 @ 95%CL (1 toyMC)
   68% expected band : 0.301009 < r < 0.301009
   95% expected band : 0.301009 < r < 0.301009
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -110707242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.303851 +/- 0.00267432 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.303851 @ 95%CL (1 toyMC)
median expected limit: r < 0.303851 @ 95%CL (1 toyMC)
   68% expected band : 0.303851 < r < 0.303851
   95% expected band : 0.303851 < r < 0.303851
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1355054133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.230081 +/- 0.00304282 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.230081 @ 95%CL (1 toyMC)
median expected limit: r < 0.230081 @ 95%CL (1 toyMC)
   68% expected band : 0.230081 < r < 0.230081
   95% expected band : 0.230081 < r < 0.230081
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -544128551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217325 +/- 0.00295768 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.217325 @ 95%CL (1 toyMC)
median expected limit: r < 0.217325 @ 95%CL (1 toyMC)
   68% expected band : 0.217325 < r < 0.217325
   95% expected band : 0.217325 < r < 0.217325
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -906528015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190933 +/- 0.00302155 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.190933 @ 95%CL (1 toyMC)
median expected limit: r < 0.190933 @ 95%CL (1 toyMC)
   68% expected band : 0.190933 < r < 0.190933
   95% expected band : 0.190933 < r < 0.190933
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -219465619
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231727 +/- 0.00269811 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.231727 @ 95%CL (1 toyMC)
median expected limit: r < 0.231727 @ 95%CL (1 toyMC)
   68% expected band : 0.231727 < r < 0.231727
   95% expected band : 0.231727 < r < 0.231727
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1924816602
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243082 +/- 0.00304464 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.243082 @ 95%CL (1 toyMC)
median expected limit: r < 0.243082 @ 95%CL (1 toyMC)
   68% expected band : 0.243082 < r < 0.243082
   95% expected band : 0.243082 < r < 0.243082
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1592321677
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31882 +/- 0.00215614 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.31882 @ 95%CL (1 toyMC)
median expected limit: r < 0.31882 @ 95%CL (1 toyMC)
   68% expected band : 0.31882 < r < 0.31882
   95% expected band : 0.31882 < r < 0.31882
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1170751147
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.275406 +/- 0.00203465 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.275406 @ 95%CL (1 toyMC)
median expected limit: r < 0.275406 @ 95%CL (1 toyMC)
   68% expected band : 0.275406 < r < 0.275406
   95% expected band : 0.275406 < r < 0.275406
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1154379242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.180403 +/- 0.00394559 @ 95% CL (96 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.180403 @ 95%CL (1 toyMC)
median expected limit: r < 0.180403 @ 95%CL (1 toyMC)
   68% expected band : 0.180403 < r < 0.180403
   95% expected band : 0.180403 < r < 0.180403
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 166939407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332367 +/- 0.00183334 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.332367 @ 95%CL (1 toyMC)
median expected limit: r < 0.332367 @ 95%CL (1 toyMC)
   68% expected band : 0.332367 < r < 0.332367
   95% expected band : 0.332367 < r < 0.332367
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1054156628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234361 +/- 0.00234175 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.234361 @ 95%CL (1 toyMC)
median expected limit: r < 0.234361 @ 95%CL (1 toyMC)
   68% expected band : 0.234361 < r < 0.234361
   95% expected band : 0.234361 < r < 0.234361
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1240512427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.409559 +/- 0.00195533 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.409559 @ 95%CL (1 toyMC)
median expected limit: r < 0.409559 @ 95%CL (1 toyMC)
   68% expected band : 0.409559 < r < 0.409559
   95% expected band : 0.409559 < r < 0.409559
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1598908078
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.357016 +/- 0.00253791 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.357016 @ 95%CL (1 toyMC)
median expected limit: r < 0.357016 @ 95%CL (1 toyMC)
   68% expected band : 0.357016 < r < 0.357016
   95% expected band : 0.357016 < r < 0.357016
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2109540606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.223124 +/- 0.00236845 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.223124 @ 95%CL (1 toyMC)
median expected limit: r < 0.223124 @ 95%CL (1 toyMC)
   68% expected band : 0.223124 < r < 0.223124
   95% expected band : 0.223124 < r < 0.223124
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -98115148
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.27498 +/- 0.00215883 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.27498 @ 95%CL (1 toyMC)
median expected limit: r < 0.27498 @ 95%CL (1 toyMC)
   68% expected band : 0.27498 < r < 0.27498
   95% expected band : 0.27498 < r < 0.27498
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -155712194
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.199026 +/- 0.00351496 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.199026 @ 95%CL (1 toyMC)
median expected limit: r < 0.199026 @ 95%CL (1 toyMC)
   68% expected band : 0.199026 < r < 0.199026
   95% expected band : 0.199026 < r < 0.199026
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1336635974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.19756 +/- 0.00268198 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.19756 @ 95%CL (1 toyMC)
median expected limit: r < 0.19756 @ 95%CL (1 toyMC)
   68% expected band : 0.19756 < r < 0.19756
   95% expected band : 0.19756 < r < 0.19756
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1727463976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.175837 +/- 0.00354733 @ 95% CL (99 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.175837 @ 95%CL (1 toyMC)
median expected limit: r < 0.175837 @ 95%CL (1 toyMC)
   68% expected band : 0.175837 < r < 0.175837
   95% expected band : 0.175837 < r < 0.175837
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1771652415
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.220123 +/- 0.00235644 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.220123 @ 95%CL (1 toyMC)
median expected limit: r < 0.220123 @ 95%CL (1 toyMC)
   68% expected band : 0.220123 < r < 0.220123
   95% expected band : 0.220123 < r < 0.220123
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2043511646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.299279 +/- 0.00184158 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.299279 @ 95%CL (1 toyMC)
median expected limit: r < 0.299279 @ 95%CL (1 toyMC)
   68% expected band : 0.299279 < r < 0.299279
   95% expected band : 0.299279 < r < 0.299279
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -223113620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.23949 +/- 0.00303798 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.23949 @ 95%CL (1 toyMC)
median expected limit: r < 0.23949 @ 95%CL (1 toyMC)
   68% expected band : 0.23949 < r < 0.23949
   95% expected band : 0.23949 < r < 0.23949
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -504779006
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213889 +/- 0.00223371 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.213889 @ 95%CL (1 toyMC)
median expected limit: r < 0.213889 @ 95%CL (1 toyMC)
   68% expected band : 0.213889 < r < 0.213889
   95% expected band : 0.213889 < r < 0.213889
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 643059178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272734 +/- 0.0019869 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.272734 @ 95%CL (1 toyMC)
median expected limit: r < 0.272734 @ 95%CL (1 toyMC)
   68% expected band : 0.272734 < r < 0.272734
   95% expected band : 0.272734 < r < 0.272734
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 813093780
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.257582 +/- 0.00275037 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.257582 @ 95%CL (1 toyMC)
median expected limit: r < 0.257582 @ 95%CL (1 toyMC)
   68% expected band : 0.257582 < r < 0.257582
   95% expected band : 0.257582 < r < 0.257582
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2059527281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.230423 +/- 0.00205062 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.230423 @ 95%CL (1 toyMC)
median expected limit: r < 0.230423 @ 95%CL (1 toyMC)
   68% expected band : 0.230423 < r < 0.230423
   95% expected band : 0.230423 < r < 0.230423
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1685721207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236856 +/- 0.00230964 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.236856 @ 95%CL (1 toyMC)
median expected limit: r < 0.236856 @ 95%CL (1 toyMC)
   68% expected band : 0.236856 < r < 0.236856
   95% expected band : 0.236856 < r < 0.236856
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 879513385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305133 +/- 0.00165724 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.305133 @ 95%CL (1 toyMC)
median expected limit: r < 0.305133 @ 95%CL (1 toyMC)
   68% expected band : 0.305133 < r < 0.305133
   95% expected band : 0.305133 < r < 0.305133
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 340687623
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240198 +/- 0.00198566 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.240198 @ 95%CL (1 toyMC)
median expected limit: r < 0.240198 @ 95%CL (1 toyMC)
   68% expected band : 0.240198 < r < 0.240198
   95% expected band : 0.240198 < r < 0.240198
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -973253579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.241606 +/- 0.00220983 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.241606 @ 95%CL (1 toyMC)
median expected limit: r < 0.241606 @ 95%CL (1 toyMC)
   68% expected band : 0.241606 < r < 0.241606
   95% expected band : 0.241606 < r < 0.241606
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1696282724
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.326923 +/- 0.00196677 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.326923 @ 95%CL (1 toyMC)
median expected limit: r < 0.326923 @ 95%CL (1 toyMC)
   68% expected band : 0.326923 < r < 0.326923
   95% expected band : 0.326923 < r < 0.326923
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1378483250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194866 +/- 0.00375047 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.194866 @ 95%CL (1 toyMC)
median expected limit: r < 0.194866 @ 95%CL (1 toyMC)
   68% expected band : 0.194866 < r < 0.194866
   95% expected band : 0.194866 < r < 0.194866
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 930010874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.289476 +/- 0.00238706 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.289476 @ 95%CL (1 toyMC)
median expected limit: r < 0.289476 @ 95%CL (1 toyMC)
   68% expected band : 0.289476 < r < 0.289476
   95% expected band : 0.289476 < r < 0.289476
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1111226621
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26903 +/- 0.00288541 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.26903 @ 95%CL (1 toyMC)
median expected limit: r < 0.26903 @ 95%CL (1 toyMC)
   68% expected band : 0.26903 < r < 0.26903
   95% expected band : 0.26903 < r < 0.26903
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -416886259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194787 +/- 0.0024555 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.194787 @ 95%CL (1 toyMC)
median expected limit: r < 0.194787 @ 95%CL (1 toyMC)
   68% expected band : 0.194787 < r < 0.194787
   95% expected band : 0.194787 < r < 0.194787
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -595160274
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28043 +/- 0.00270089 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.28043 @ 95%CL (1 toyMC)
median expected limit: r < 0.28043 @ 95%CL (1 toyMC)
   68% expected band : 0.28043 < r < 0.28043
   95% expected band : 0.28043 < r < 0.28043
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1656456147
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281316 +/- 0.00239769 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.281316 @ 95%CL (1 toyMC)
median expected limit: r < 0.281316 @ 95%CL (1 toyMC)
   68% expected band : 0.281316 < r < 0.281316
   95% expected band : 0.281316 < r < 0.281316
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 998300560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.209993 +/- 0.00235242 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.209993 @ 95%CL (1 toyMC)
median expected limit: r < 0.209993 @ 95%CL (1 toyMC)
   68% expected band : 0.209993 < r < 0.209993
   95% expected band : 0.209993 < r < 0.209993
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2112893591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260709 +/- 0.00317553 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.260709 @ 95%CL (1 toyMC)
median expected limit: r < 0.260709 @ 95%CL (1 toyMC)
   68% expected band : 0.260709 < r < 0.260709
   95% expected band : 0.260709 < r < 0.260709
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2090458135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.220142 +/- 0.00293509 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.220142 @ 95%CL (1 toyMC)
median expected limit: r < 0.220142 @ 95%CL (1 toyMC)
   68% expected band : 0.220142 < r < 0.220142
   95% expected band : 0.220142 < r < 0.220142
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -442712970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.172182 +/- 0.00394179 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.172182 @ 95%CL (1 toyMC)
median expected limit: r < 0.172182 @ 95%CL (1 toyMC)
   68% expected band : 0.172182 < r < 0.172182
   95% expected band : 0.172182 < r < 0.172182
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 692766709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212295 +/- 0.00188614 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.212295 @ 95%CL (1 toyMC)
median expected limit: r < 0.212295 @ 95%CL (1 toyMC)
   68% expected band : 0.212295 < r < 0.212295
   95% expected band : 0.212295 < r < 0.212295
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 603708723
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.303604 +/- 0.00248796 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.303604 @ 95%CL (1 toyMC)
median expected limit: r < 0.303604 @ 95%CL (1 toyMC)
   68% expected band : 0.303604 < r < 0.303604
   95% expected band : 0.303604 < r < 0.303604
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1801593917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189136 +/- 0.00278312 @ 95% CL (98 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.189136 @ 95%CL (1 toyMC)
median expected limit: r < 0.189136 @ 95%CL (1 toyMC)
   68% expected band : 0.189136 < r < 0.189136
   95% expected band : 0.189136 < r < 0.189136
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -300242254
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206551 +/- 0.00294316 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.206551 @ 95%CL (1 toyMC)
median expected limit: r < 0.206551 @ 95%CL (1 toyMC)
   68% expected band : 0.206551 < r < 0.206551
   95% expected band : 0.206551 < r < 0.206551
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -425535268
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312763 +/- 0.00268518 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.312763 @ 95%CL (1 toyMC)
median expected limit: r < 0.312763 @ 95%CL (1 toyMC)
   68% expected band : 0.312763 < r < 0.312763
   95% expected band : 0.312763 < r < 0.312763
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -786007413
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.385103 +/- 0.00229773 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.385103 @ 95%CL (1 toyMC)
median expected limit: r < 0.385103 @ 95%CL (1 toyMC)
   68% expected band : 0.385103 < r < 0.385103
   95% expected band : 0.385103 < r < 0.385103
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 440482047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.354204 +/- 0.00197686 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.354204 @ 95%CL (1 toyMC)
median expected limit: r < 0.354204 @ 95%CL (1 toyMC)
   68% expected band : 0.354204 < r < 0.354204
   95% expected band : 0.354204 < r < 0.354204
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1414648895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.215546 +/- 0.00288293 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.215546 @ 95%CL (1 toyMC)
median expected limit: r < 0.215546 @ 95%CL (1 toyMC)
   68% expected band : 0.215546 < r < 0.215546
   95% expected band : 0.215546 < r < 0.215546
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-110707242.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1154379242.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1170751147.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1206165453.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1325155812.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1355054133.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1365502565.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1398167795.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1414648895.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1552908448.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-155712194.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-155815223.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1592321677.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1646293715.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1656456147.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1685721207.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1717937372.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1727463976.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1801593917.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1820008647.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1857038465.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1888996789.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1894217533.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-2006777747.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-2059527281.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-2068717927.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-2090458135.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-2109540606.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-219465619.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-223113620.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-231991517.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-300242254.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-359360186.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-416886259.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-425535268.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-430301442.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-442712970.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-462454715.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-504779006.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-525776088.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-544128551.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-595160274.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-601563101.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-643330246.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-645107745.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-652799599.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-733149328.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-786007413.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-798661382.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.-841111995.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.-85633923.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.-889063207.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.-906528015.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.-973253579.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.-98115148.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.-995701507.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.-995722932.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1017235146.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1052970643.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1054156628.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1090250070.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1111226621.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1112118479.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1120929989.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1160501541.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1240512427.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.131480409.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1336635974.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1353005883.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1378483250.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1583971357.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1598908078.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1599718966.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.166939407.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1696282724.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.171059520.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.1745737465.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.1751632598.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.1771652415.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.1924816602.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.2006479395.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.2043511646.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.2063122316.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.2112893591.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.326833133.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.340687623.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.440482047.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.603708723.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.643059178.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.649516584.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.692766709.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.719729422.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.724502876.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.813093780.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.879513385.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.925290699.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.930010874.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.97383183.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.994981698.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.998300560.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 753084428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.191335 +/- 0.00325559 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.191335 @ 95%CL (1 toyMC)
median expected limit: r < 0.191335 @ 95%CL (1 toyMC)
   68% expected band : 0.191335 < r < 0.191335
   95% expected band : 0.191335 < r < 0.191335
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1032578941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.417266 +/- 0.00189177 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.417266 @ 95%CL (1 toyMC)
median expected limit: r < 0.417266 @ 95%CL (1 toyMC)
   68% expected band : 0.417266 < r < 0.417266
   95% expected band : 0.417266 < r < 0.417266
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1402913713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244489 +/- 0.00212263 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.244489 @ 95%CL (1 toyMC)
median expected limit: r < 0.244489 @ 95%CL (1 toyMC)
   68% expected band : 0.244489 < r < 0.244489
   95% expected band : 0.244489 < r < 0.244489
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1442718215
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.490195 +/- 0.00199177 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.490195 @ 95%CL (1 toyMC)
median expected limit: r < 0.490195 @ 95%CL (1 toyMC)
   68% expected band : 0.490195 < r < 0.490195
   95% expected band : 0.490195 < r < 0.490195
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 857175032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.252811 +/- 0.00286128 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.252811 @ 95%CL (1 toyMC)
median expected limit: r < 0.252811 @ 95%CL (1 toyMC)
   68% expected band : 0.252811 < r < 0.252811
   95% expected band : 0.252811 < r < 0.252811
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1574605337
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255318 +/- 0.00263358 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.255318 @ 95%CL (1 toyMC)
median expected limit: r < 0.255318 @ 95%CL (1 toyMC)
   68% expected band : 0.255318 < r < 0.255318
   95% expected band : 0.255318 < r < 0.255318
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 922355667
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.211671 +/- 0.00293351 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.211671 @ 95%CL (1 toyMC)
median expected limit: r < 0.211671 @ 95%CL (1 toyMC)
   68% expected band : 0.211671 < r < 0.211671
   95% expected band : 0.211671 < r < 0.211671
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1057608582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253001 +/- 0.00271482 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.253001 @ 95%CL (1 toyMC)
median expected limit: r < 0.253001 @ 95%CL (1 toyMC)
   68% expected band : 0.253001 < r < 0.253001
   95% expected band : 0.253001 < r < 0.253001
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2026279786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.211833 +/- 0.00293189 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.211833 @ 95%CL (1 toyMC)
median expected limit: r < 0.211833 @ 95%CL (1 toyMC)
   68% expected band : 0.211833 < r < 0.211833
   95% expected band : 0.211833 < r < 0.211833
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1358608983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.266442 +/- 0.0018398 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.266442 @ 95%CL (1 toyMC)
median expected limit: r < 0.266442 @ 95%CL (1 toyMC)
   68% expected band : 0.266442 < r < 0.266442
   95% expected band : 0.266442 < r < 0.266442
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1813702198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22434 +/- 0.0028862 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.22434 @ 95%CL (1 toyMC)
median expected limit: r < 0.22434 @ 95%CL (1 toyMC)
   68% expected band : 0.22434 < r < 0.22434
   95% expected band : 0.22434 < r < 0.22434
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1579497608
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.297405 +/- 0.00222561 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.297405 @ 95%CL (1 toyMC)
median expected limit: r < 0.297405 @ 95%CL (1 toyMC)
   68% expected band : 0.297405 < r < 0.297405
   95% expected band : 0.297405 < r < 0.297405
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 445909424
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.207237 +/- 0.00267672 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.207237 @ 95%CL (1 toyMC)
median expected limit: r < 0.207237 @ 95%CL (1 toyMC)
   68% expected band : 0.207237 < r < 0.207237
   95% expected band : 0.207237 < r < 0.207237
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -594770808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.266948 +/- 0.00233634 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.266948 @ 95%CL (1 toyMC)
median expected limit: r < 0.266948 @ 95%CL (1 toyMC)
   68% expected band : 0.266948 < r < 0.266948
   95% expected band : 0.266948 < r < 0.266948
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 543373953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.205833 +/- 0.0022382 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.205833 @ 95%CL (1 toyMC)
median expected limit: r < 0.205833 @ 95%CL (1 toyMC)
   68% expected band : 0.205833 < r < 0.205833
   95% expected band : 0.205833 < r < 0.205833
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 388956592
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.193768 +/- 0.0032742 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.193768 @ 95%CL (1 toyMC)
median expected limit: r < 0.193768 @ 95%CL (1 toyMC)
   68% expected band : 0.193768 < r < 0.193768
   95% expected band : 0.193768 < r < 0.193768
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -845165391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251262 +/- 0.00241506 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.251262 @ 95%CL (1 toyMC)
median expected limit: r < 0.251262 @ 95%CL (1 toyMC)
   68% expected band : 0.251262 < r < 0.251262
   95% expected band : 0.251262 < r < 0.251262
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1118064418
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210287 +/- 0.00315189 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.210287 @ 95%CL (1 toyMC)
median expected limit: r < 0.210287 @ 95%CL (1 toyMC)
   68% expected band : 0.210287 < r < 0.210287
   95% expected band : 0.210287 < r < 0.210287
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2123034951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243939 +/- 0.00272148 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.243939 @ 95%CL (1 toyMC)
median expected limit: r < 0.243939 @ 95%CL (1 toyMC)
   68% expected band : 0.243939 < r < 0.243939
   95% expected band : 0.243939 < r < 0.243939
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1361144352
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.196093 +/- 0.00240669 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.196093 @ 95%CL (1 toyMC)
median expected limit: r < 0.196093 @ 95%CL (1 toyMC)
   68% expected band : 0.196093 < r < 0.196093
   95% expected band : 0.196093 < r < 0.196093
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1330370074
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.390024 +/- 0.00191671 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.390024 @ 95%CL (1 toyMC)
median expected limit: r < 0.390024 @ 95%CL (1 toyMC)
   68% expected band : 0.390024 < r < 0.390024
   95% expected band : 0.390024 < r < 0.390024
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1791638709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329492 +/- 0.00231353 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.329492 @ 95%CL (1 toyMC)
median expected limit: r < 0.329492 @ 95%CL (1 toyMC)
   68% expected band : 0.329492 < r < 0.329492
   95% expected band : 0.329492 < r < 0.329492
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2039304304
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282146 +/- 0.00177946 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.282146 @ 95%CL (1 toyMC)
median expected limit: r < 0.282146 @ 95%CL (1 toyMC)
   68% expected band : 0.282146 < r < 0.282146
   95% expected band : 0.282146 < r < 0.282146
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1750866963
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.463743 +/- 0.00180502 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.463743 @ 95%CL (1 toyMC)
median expected limit: r < 0.463743 @ 95%CL (1 toyMC)
   68% expected band : 0.463743 < r < 0.463743
   95% expected band : 0.463743 < r < 0.463743
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1731765918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.435951 +/- 0.0024727 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.435951 @ 95%CL (1 toyMC)
median expected limit: r < 0.435951 @ 95%CL (1 toyMC)
   68% expected band : 0.435951 < r < 0.435951
   95% expected band : 0.435951 < r < 0.435951
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -352003369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.299801 +/- 0.00253868 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.299801 @ 95%CL (1 toyMC)
median expected limit: r < 0.299801 @ 95%CL (1 toyMC)
   68% expected band : 0.299801 < r < 0.299801
   95% expected band : 0.299801 < r < 0.299801
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1359425672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.201625 +/- 0.00246638 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.201625 @ 95%CL (1 toyMC)
median expected limit: r < 0.201625 @ 95%CL (1 toyMC)
   68% expected band : 0.201625 < r < 0.201625
   95% expected band : 0.201625 < r < 0.201625
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1052840742
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195387 +/- 0.00349059 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.195387 @ 95%CL (1 toyMC)
median expected limit: r < 0.195387 @ 95%CL (1 toyMC)
   68% expected band : 0.195387 < r < 0.195387
   95% expected band : 0.195387 < r < 0.195387
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2011514917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240082 +/- 0.00269606 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.240082 @ 95%CL (1 toyMC)
median expected limit: r < 0.240082 @ 95%CL (1 toyMC)
   68% expected band : 0.240082 < r < 0.240082
   95% expected band : 0.240082 < r < 0.240082
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1126473319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.430893 +/- 0.00185762 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.430893 @ 95%CL (1 toyMC)
median expected limit: r < 0.430893 @ 95%CL (1 toyMC)
   68% expected band : 0.430893 < r < 0.430893
   95% expected band : 0.430893 < r < 0.430893
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 784363434
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189906 +/- 0.00235042 @ 95% CL (99 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.189906 @ 95%CL (1 toyMC)
median expected limit: r < 0.189906 @ 95%CL (1 toyMC)
   68% expected band : 0.189906 < r < 0.189906
   95% expected band : 0.189906 < r < 0.189906
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1231703588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226628 +/- 0.00251842 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.226628 @ 95%CL (1 toyMC)
median expected limit: r < 0.226628 @ 95%CL (1 toyMC)
   68% expected band : 0.226628 < r < 0.226628
   95% expected band : 0.226628 < r < 0.226628
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1050109693
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.205366 +/- 0.00312332 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.205366 @ 95%CL (1 toyMC)
median expected limit: r < 0.205366 @ 95%CL (1 toyMC)
   68% expected band : 0.205366 < r < 0.205366
   95% expected band : 0.205366 < r < 0.205366
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -897923599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.299872 +/- 0.00288116 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.299872 @ 95%CL (1 toyMC)
median expected limit: r < 0.299872 @ 95%CL (1 toyMC)
   68% expected band : 0.299872 < r < 0.299872
   95% expected band : 0.299872 < r < 0.299872
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -903631299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.258314 +/- 0.00266232 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.258314 @ 95%CL (1 toyMC)
median expected limit: r < 0.258314 @ 95%CL (1 toyMC)
   68% expected band : 0.258314 < r < 0.258314
   95% expected band : 0.258314 < r < 0.258314
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1569819128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200504 +/- 0.00269704 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.200504 @ 95%CL (1 toyMC)
median expected limit: r < 0.200504 @ 95%CL (1 toyMC)
   68% expected band : 0.200504 < r < 0.200504
   95% expected band : 0.200504 < r < 0.200504
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2136354475
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.185612 +/- 0.00301956 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.185612 @ 95%CL (1 toyMC)
median expected limit: r < 0.185612 @ 95%CL (1 toyMC)
   68% expected band : 0.185612 < r < 0.185612
   95% expected band : 0.185612 < r < 0.185612
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1466881462
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232305 +/- 0.00232463 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.232305 @ 95%CL (1 toyMC)
median expected limit: r < 0.232305 @ 95%CL (1 toyMC)
   68% expected band : 0.232305 < r < 0.232305
   95% expected band : 0.232305 < r < 0.232305
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1038030032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.259153 +/- 0.00300198 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.259153 @ 95%CL (1 toyMC)
median expected limit: r < 0.259153 @ 95%CL (1 toyMC)
   68% expected band : 0.259153 < r < 0.259153
   95% expected band : 0.259153 < r < 0.259153
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1483246300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208584 +/- 0.00296398 @ 95% CL (99 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.208584 @ 95%CL (1 toyMC)
median expected limit: r < 0.208584 @ 95%CL (1 toyMC)
   68% expected band : 0.208584 < r < 0.208584
   95% expected band : 0.208584 < r < 0.208584
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1870808017
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.223052 +/- 0.00279224 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.223052 @ 95%CL (1 toyMC)
median expected limit: r < 0.223052 @ 95%CL (1 toyMC)
   68% expected band : 0.223052 < r < 0.223052
   95% expected band : 0.223052 < r < 0.223052
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 132874974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.354118 +/- 0.00251415 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.354118 @ 95%CL (1 toyMC)
median expected limit: r < 0.354118 @ 95%CL (1 toyMC)
   68% expected band : 0.354118 < r < 0.354118
   95% expected band : 0.354118 < r < 0.354118
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -535605586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.351805 +/- 0.00204689 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.351805 @ 95%CL (1 toyMC)
median expected limit: r < 0.351805 @ 95%CL (1 toyMC)
   68% expected band : 0.351805 < r < 0.351805
   95% expected band : 0.351805 < r < 0.351805
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1850993250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285498 +/- 0.00237726 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.285498 @ 95%CL (1 toyMC)
median expected limit: r < 0.285498 @ 95%CL (1 toyMC)
   68% expected band : 0.285498 < r < 0.285498
   95% expected band : 0.285498 < r < 0.285498
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -864375978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332945 +/- 0.00177862 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.332945 @ 95%CL (1 toyMC)
median expected limit: r < 0.332945 @ 95%CL (1 toyMC)
   68% expected band : 0.332945 < r < 0.332945
   95% expected band : 0.332945 < r < 0.332945
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -840701111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268887 +/- 0.00251048 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.268887 @ 95%CL (1 toyMC)
median expected limit: r < 0.268887 @ 95%CL (1 toyMC)
   68% expected band : 0.268887 < r < 0.268887
   95% expected band : 0.268887 < r < 0.268887
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -271118281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221096 +/- 0.00259825 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.221096 @ 95%CL (1 toyMC)
median expected limit: r < 0.221096 @ 95%CL (1 toyMC)
   68% expected band : 0.221096 < r < 0.221096
   95% expected band : 0.221096 < r < 0.221096
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1792780278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313535 +/- 0.00224245 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.313535 @ 95%CL (1 toyMC)
median expected limit: r < 0.313535 @ 95%CL (1 toyMC)
   68% expected band : 0.313535 < r < 0.313535
   95% expected band : 0.313535 < r < 0.313535
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 65944482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.352898 +/- 0.00209645 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.352898 @ 95%CL (1 toyMC)
median expected limit: r < 0.352898 @ 95%CL (1 toyMC)
   68% expected band : 0.352898 < r < 0.352898
   95% expected band : 0.352898 < r < 0.352898
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1606093550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285699 +/- 0.00271736 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.285699 @ 95%CL (1 toyMC)
median expected limit: r < 0.285699 @ 95%CL (1 toyMC)
   68% expected band : 0.285699 < r < 0.285699
   95% expected band : 0.285699 < r < 0.285699
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1613512529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.256674 +/- 0.00271451 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.256674 @ 95%CL (1 toyMC)
median expected limit: r < 0.256674 @ 95%CL (1 toyMC)
   68% expected band : 0.256674 < r < 0.256674
   95% expected band : 0.256674 < r < 0.256674
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 699543559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.192711 +/- 0.00318969 @ 95% CL (99 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.192711 @ 95%CL (1 toyMC)
median expected limit: r < 0.192711 @ 95%CL (1 toyMC)
   68% expected band : 0.192711 < r < 0.192711
   95% expected band : 0.192711 < r < 0.192711
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1903134731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.314414 +/- 0.00287239 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.314414 @ 95%CL (1 toyMC)
median expected limit: r < 0.314414 @ 95%CL (1 toyMC)
   68% expected band : 0.314414 < r < 0.314414
   95% expected band : 0.314414 < r < 0.314414
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -105588369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.256182 +/- 0.00279804 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.256182 @ 95%CL (1 toyMC)
median expected limit: r < 0.256182 @ 95%CL (1 toyMC)
   68% expected band : 0.256182 < r < 0.256182
   95% expected band : 0.256182 < r < 0.256182
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1966389359
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.439839 +/- 0.00162263 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.439839 @ 95%CL (1 toyMC)
median expected limit: r < 0.439839 @ 95%CL (1 toyMC)
   68% expected band : 0.439839 < r < 0.439839
   95% expected band : 0.439839 < r < 0.439839
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 949972564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.277709 +/- 0.00249439 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.277709 @ 95%CL (1 toyMC)
median expected limit: r < 0.277709 @ 95%CL (1 toyMC)
   68% expected band : 0.277709 < r < 0.277709
   95% expected band : 0.277709 < r < 0.277709
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1181581788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.259011 +/- 0.00263778 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.259011 @ 95%CL (1 toyMC)
median expected limit: r < 0.259011 @ 95%CL (1 toyMC)
   68% expected band : 0.259011 < r < 0.259011
   95% expected band : 0.259011 < r < 0.259011
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 403538213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285389 +/- 0.00213169 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.285389 @ 95%CL (1 toyMC)
median expected limit: r < 0.285389 @ 95%CL (1 toyMC)
   68% expected band : 0.285389 < r < 0.285389
   95% expected band : 0.285389 < r < 0.285389
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 628329125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.184226 +/- 0.00385287 @ 95% CL (98 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.184226 @ 95%CL (1 toyMC)
median expected limit: r < 0.184226 @ 95%CL (1 toyMC)
   68% expected band : 0.184226 < r < 0.184226
   95% expected band : 0.184226 < r < 0.184226
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1091788849
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.311258 +/- 0.00188902 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.311258 @ 95%CL (1 toyMC)
median expected limit: r < 0.311258 @ 95%CL (1 toyMC)
   68% expected band : 0.311258 < r < 0.311258
   95% expected band : 0.311258 < r < 0.311258
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1835478760
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20051 +/- 0.00285679 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.20051 @ 95%CL (1 toyMC)
median expected limit: r < 0.20051 @ 95%CL (1 toyMC)
   68% expected band : 0.20051 < r < 0.20051
   95% expected band : 0.20051 < r < 0.20051
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1860586482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.21393 +/- 0.0029357 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.21393 @ 95%CL (1 toyMC)
median expected limit: r < 0.21393 @ 95%CL (1 toyMC)
   68% expected band : 0.21393 < r < 0.21393
   95% expected band : 0.21393 < r < 0.21393
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 386003225
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.529504 +/- 0.00235295 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.529504 @ 95%CL (1 toyMC)
median expected limit: r < 0.529504 @ 95%CL (1 toyMC)
   68% expected band : 0.529504 < r < 0.529504
   95% expected band : 0.529504 < r < 0.529504
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 181709181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210221 +/- 0.00311275 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.210221 @ 95%CL (1 toyMC)
median expected limit: r < 0.210221 @ 95%CL (1 toyMC)
   68% expected band : 0.210221 < r < 0.210221
   95% expected band : 0.210221 < r < 0.210221
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1773580040
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312596 +/- 0.00229434 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.312596 @ 95%CL (1 toyMC)
median expected limit: r < 0.312596 @ 95%CL (1 toyMC)
   68% expected band : 0.312596 < r < 0.312596
   95% expected band : 0.312596 < r < 0.312596
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -955265023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280168 +/- 0.00239674 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.280168 @ 95%CL (1 toyMC)
median expected limit: r < 0.280168 @ 95%CL (1 toyMC)
   68% expected band : 0.280168 < r < 0.280168
   95% expected band : 0.280168 < r < 0.280168
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1473500983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.290396 +/- 0.00247655 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.290396 @ 95%CL (1 toyMC)
median expected limit: r < 0.290396 @ 95%CL (1 toyMC)
   68% expected band : 0.290396 < r < 0.290396
   95% expected band : 0.290396 < r < 0.290396
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1682868068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301143 +/- 0.00249394 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.301143 @ 95%CL (1 toyMC)
median expected limit: r < 0.301143 @ 95%CL (1 toyMC)
   68% expected band : 0.301143 < r < 0.301143
   95% expected band : 0.301143 < r < 0.301143
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 756063430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.339094 +/- 0.00188964 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.339094 @ 95%CL (1 toyMC)
median expected limit: r < 0.339094 @ 95%CL (1 toyMC)
   68% expected band : 0.339094 < r < 0.339094
   95% expected band : 0.339094 < r < 0.339094
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1327477890
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263646 +/- 0.0029292 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.263646 @ 95%CL (1 toyMC)
median expected limit: r < 0.263646 @ 95%CL (1 toyMC)
   68% expected band : 0.263646 < r < 0.263646
   95% expected band : 0.263646 < r < 0.263646
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1662881359
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190603 +/- 0.00311999 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.190603 @ 95%CL (1 toyMC)
median expected limit: r < 0.190603 @ 95%CL (1 toyMC)
   68% expected band : 0.190603 < r < 0.190603
   95% expected band : 0.190603 < r < 0.190603
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 232515850
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.373183 +/- 0.00194948 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.373183 @ 95%CL (1 toyMC)
median expected limit: r < 0.373183 @ 95%CL (1 toyMC)
   68% expected band : 0.373183 < r < 0.373183
   95% expected band : 0.373183 < r < 0.373183
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1857582483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231481 +/- 0.00245732 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.231481 @ 95%CL (1 toyMC)
median expected limit: r < 0.231481 @ 95%CL (1 toyMC)
   68% expected band : 0.231481 < r < 0.231481
   95% expected band : 0.231481 < r < 0.231481
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1241060860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.188145 +/- 0.00341976 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.188145 @ 95%CL (1 toyMC)
median expected limit: r < 0.188145 @ 95%CL (1 toyMC)
   68% expected band : 0.188145 < r < 0.188145
   95% expected band : 0.188145 < r < 0.188145
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 315499209
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.333101 +/- 0.00275027 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.333101 @ 95%CL (1 toyMC)
median expected limit: r < 0.333101 @ 95%CL (1 toyMC)
   68% expected band : 0.333101 < r < 0.333101
   95% expected band : 0.333101 < r < 0.333101
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 664758263
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.318762 +/- 0.00166448 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.318762 @ 95%CL (1 toyMC)
median expected limit: r < 0.318762 @ 95%CL (1 toyMC)
   68% expected band : 0.318762 < r < 0.318762
   95% expected band : 0.318762 < r < 0.318762
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1208985674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.211362 +/- 0.00298603 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.211362 @ 95%CL (1 toyMC)
median expected limit: r < 0.211362 @ 95%CL (1 toyMC)
   68% expected band : 0.211362 < r < 0.211362
   95% expected band : 0.211362 < r < 0.211362
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -954225956
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.360041 +/- 0.00167683 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.360041 @ 95%CL (1 toyMC)
median expected limit: r < 0.360041 @ 95%CL (1 toyMC)
   68% expected band : 0.360041 < r < 0.360041
   95% expected band : 0.360041 < r < 0.360041
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -606575593
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.254698 +/- 0.00270972 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.254698 @ 95%CL (1 toyMC)
median expected limit: r < 0.254698 @ 95%CL (1 toyMC)
   68% expected band : 0.254698 < r < 0.254698
   95% expected band : 0.254698 < r < 0.254698
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 322821623
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.21272 +/- 0.00268208 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.21272 @ 95%CL (1 toyMC)
median expected limit: r < 0.21272 @ 95%CL (1 toyMC)
   68% expected band : 0.21272 < r < 0.21272
   95% expected band : 0.21272 < r < 0.21272
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1405926017
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.171008 +/- 0.00402669 @ 95% CL (97 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.171008 @ 95%CL (1 toyMC)
median expected limit: r < 0.171008 @ 95%CL (1 toyMC)
   68% expected band : 0.171008 < r < 0.171008
   95% expected band : 0.171008 < r < 0.171008
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1003006237
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253475 +/- 0.00221525 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.253475 @ 95%CL (1 toyMC)
median expected limit: r < 0.253475 @ 95%CL (1 toyMC)
   68% expected band : 0.253475 < r < 0.253475
   95% expected band : 0.253475 < r < 0.253475
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 334216603
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304275 +/- 0.00228537 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.304275 @ 95%CL (1 toyMC)
median expected limit: r < 0.304275 @ 95%CL (1 toyMC)
   68% expected band : 0.304275 < r < 0.304275
   95% expected band : 0.304275 < r < 0.304275
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 409211125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361812 +/- 0.00203713 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.361812 @ 95%CL (1 toyMC)
median expected limit: r < 0.361812 @ 95%CL (1 toyMC)
   68% expected band : 0.361812 < r < 0.361812
   95% expected band : 0.361812 < r < 0.361812
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1818887601
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.362976 +/- 0.00205234 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.362976 @ 95%CL (1 toyMC)
median expected limit: r < 0.362976 @ 95%CL (1 toyMC)
   68% expected band : 0.362976 < r < 0.362976
   95% expected band : 0.362976 < r < 0.362976
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1944149302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.293459 +/- 0.00239154 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.293459 @ 95%CL (1 toyMC)
median expected limit: r < 0.293459 @ 95%CL (1 toyMC)
   68% expected band : 0.293459 < r < 0.293459
   95% expected band : 0.293459 < r < 0.293459
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2029643068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228377 +/- 0.00255527 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.228377 @ 95%CL (1 toyMC)
median expected limit: r < 0.228377 @ 95%CL (1 toyMC)
   68% expected band : 0.228377 < r < 0.228377
   95% expected band : 0.228377 < r < 0.228377
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -234206757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.258577 +/- 0.00249677 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.258577 @ 95%CL (1 toyMC)
median expected limit: r < 0.258577 @ 95%CL (1 toyMC)
   68% expected band : 0.258577 < r < 0.258577
   95% expected band : 0.258577 < r < 0.258577
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1211730453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.289483 +/- 0.00241422 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.289483 @ 95%CL (1 toyMC)
median expected limit: r < 0.289483 @ 95%CL (1 toyMC)
   68% expected band : 0.289483 < r < 0.289483
   95% expected band : 0.289483 < r < 0.289483
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1892392515
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.357588 +/- 0.00180752 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.357588 @ 95%CL (1 toyMC)
median expected limit: r < 0.357588 @ 95%CL (1 toyMC)
   68% expected band : 0.357588 < r < 0.357588
   95% expected band : 0.357588 < r < 0.357588
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1386658337
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.277198 +/- 0.0019536 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.277198 @ 95%CL (1 toyMC)
median expected limit: r < 0.277198 @ 95%CL (1 toyMC)
   68% expected band : 0.277198 < r < 0.277198
   95% expected band : 0.277198 < r < 0.277198
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1072228395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.215674 +/- 0.00349656 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.215674 @ 95%CL (1 toyMC)
median expected limit: r < 0.215674 @ 95%CL (1 toyMC)
   68% expected band : 0.215674 < r < 0.215674
   95% expected band : 0.215674 < r < 0.215674
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1812244015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246585 +/- 0.00254938 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.246585 @ 95%CL (1 toyMC)
median expected limit: r < 0.246585 @ 95%CL (1 toyMC)
   68% expected band : 0.246585 < r < 0.246585
   95% expected band : 0.246585 < r < 0.246585
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -846387584
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.318787 +/- 0.00242404 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.318787 @ 95%CL (1 toyMC)
median expected limit: r < 0.318787 @ 95%CL (1 toyMC)
   68% expected band : 0.318787 < r < 0.318787
   95% expected band : 0.318787 < r < 0.318787
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1535070480
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.37383 +/- 0.00177211 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.37383 @ 95%CL (1 toyMC)
median expected limit: r < 0.37383 @ 95%CL (1 toyMC)
   68% expected band : 0.37383 < r < 0.37383
   95% expected band : 0.37383 < r < 0.37383
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -394646204
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.197464 +/- 0.00296359 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.197464 @ 95%CL (1 toyMC)
median expected limit: r < 0.197464 @ 95%CL (1 toyMC)
   68% expected band : 0.197464 < r < 0.197464
   95% expected band : 0.197464 < r < 0.197464
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 164767749
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.211274 +/- 0.00283653 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.211274 @ 95%CL (1 toyMC)
median expected limit: r < 0.211274 @ 95%CL (1 toyMC)
   68% expected band : 0.211274 < r < 0.211274
   95% expected band : 0.211274 < r < 0.211274
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1815941324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.283345 +/- 0.00213142 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.283345 @ 95%CL (1 toyMC)
median expected limit: r < 0.283345 @ 95%CL (1 toyMC)
   68% expected band : 0.283345 < r < 0.283345
   95% expected band : 0.283345 < r < 0.283345
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1506696626
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238401 +/- 0.0025903 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.238401 @ 95%CL (1 toyMC)
median expected limit: r < 0.238401 @ 95%CL (1 toyMC)
   68% expected band : 0.238401 < r < 0.238401
   95% expected band : 0.238401 < r < 0.238401
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 61068810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.274976 +/- 0.00206347 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.274976 @ 95%CL (1 toyMC)
median expected limit: r < 0.274976 @ 95%CL (1 toyMC)
   68% expected band : 0.274976 < r < 0.274976
   95% expected band : 0.274976 < r < 0.274976
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1032578941.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1038030032.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1050109693.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1052840742.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-105588369.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1057608582.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1091788849.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1181581788.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1211730453.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1231703588.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1241060860.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1327477890.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1358608983.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1359425672.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1402913713.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1405926017.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1442718215.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1466881462.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1535070480.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1574605337.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1579497608.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1606093550.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1613512529.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-1662881359.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-1731765918.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1773580040.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-1813702198.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-1815941324.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-1818887601.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-1835478760.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-1857582483.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-1870808017.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-1892392515.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-1903134731.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-1966389359.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-2026279786.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-2123034951.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-234206757.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-271118281.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-352003369.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-394646204.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-535605586.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-594770808.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-606575593.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-840701111.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-845165391.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-846387584.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-864375978.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-897923599.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.-903631299.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.-954225956.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.-955265023.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1003006237.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1072228395.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1118064418.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1126473319.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1208985674.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.132874974.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1330370074.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1361144352.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1386658337.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1473500983.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1483246300.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1506696626.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1569819128.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.164767749.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1682868068.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1750866963.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1791638709.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1792780278.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1812244015.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.181709181.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1850993250.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1860586482.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1944149302.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.2011514917.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.2029643068.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.2039304304.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.2136354475.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.232515850.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.315499209.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.322821623.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.334216603.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.386003225.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.388956592.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.403538213.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.409211125.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.445909424.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.543373953.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.61068810.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.628329125.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.65944482.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.664758263.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.699543559.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.753084428.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.756063430.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.784363434.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.857175032.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.922355667.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.949972564.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1616924948
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.420058 +/- 0.00200685 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.420058 @ 95%CL (1 toyMC)
median expected limit: r < 0.420058 @ 95%CL (1 toyMC)
   68% expected band : 0.420058 < r < 0.420058
   95% expected band : 0.420058 < r < 0.420058
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1979376225
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.199383 +/- 0.0025926 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.199383 @ 95%CL (1 toyMC)
median expected limit: r < 0.199383 @ 95%CL (1 toyMC)
   68% expected band : 0.199383 < r < 0.199383
   95% expected band : 0.199383 < r < 0.199383
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 433755977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262172 +/- 0.00184602 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.262172 @ 95%CL (1 toyMC)
median expected limit: r < 0.262172 @ 95%CL (1 toyMC)
   68% expected band : 0.262172 < r < 0.262172
   95% expected band : 0.262172 < r < 0.262172
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -20385040
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.279152 +/- 0.00257226 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.279152 @ 95%CL (1 toyMC)
median expected limit: r < 0.279152 @ 95%CL (1 toyMC)
   68% expected band : 0.279152 < r < 0.279152
   95% expected band : 0.279152 < r < 0.279152
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1406252758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.488243 +/- 0.0018825 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.488243 @ 95%CL (1 toyMC)
median expected limit: r < 0.488243 @ 95%CL (1 toyMC)
   68% expected band : 0.488243 < r < 0.488243
   95% expected band : 0.488243 < r < 0.488243
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 554510146
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.182649 +/- 0.00411794 @ 95% CL (99 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.182649 @ 95%CL (1 toyMC)
median expected limit: r < 0.182649 @ 95%CL (1 toyMC)
   68% expected band : 0.182649 < r < 0.182649
   95% expected band : 0.182649 < r < 0.182649
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2097679840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272346 +/- 0.00279751 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.272346 @ 95%CL (1 toyMC)
median expected limit: r < 0.272346 @ 95%CL (1 toyMC)
   68% expected band : 0.272346 < r < 0.272346
   95% expected band : 0.272346 < r < 0.272346
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1573380167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247932 +/- 0.00220186 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.247932 @ 95%CL (1 toyMC)
median expected limit: r < 0.247932 @ 95%CL (1 toyMC)
   68% expected band : 0.247932 < r < 0.247932
   95% expected band : 0.247932 < r < 0.247932
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -164812818
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.287347 +/- 0.00206304 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.287347 @ 95%CL (1 toyMC)
median expected limit: r < 0.287347 @ 95%CL (1 toyMC)
   68% expected band : 0.287347 < r < 0.287347
   95% expected band : 0.287347 < r < 0.287347
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1286345144
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238712 +/- 0.0023411 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.238712 @ 95%CL (1 toyMC)
median expected limit: r < 0.238712 @ 95%CL (1 toyMC)
   68% expected band : 0.238712 < r < 0.238712
   95% expected band : 0.238712 < r < 0.238712
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1028802909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270112 +/- 0.00249161 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.270112 @ 95%CL (1 toyMC)
median expected limit: r < 0.270112 @ 95%CL (1 toyMC)
   68% expected band : 0.270112 < r < 0.270112
   95% expected band : 0.270112 < r < 0.270112
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2003024042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.256596 +/- 0.00303306 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.256596 @ 95%CL (1 toyMC)
median expected limit: r < 0.256596 @ 95%CL (1 toyMC)
   68% expected band : 0.256596 < r < 0.256596
   95% expected band : 0.256596 < r < 0.256596
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -679898108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.275001 +/- 0.00234356 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.275001 @ 95%CL (1 toyMC)
median expected limit: r < 0.275001 @ 95%CL (1 toyMC)
   68% expected band : 0.275001 < r < 0.275001
   95% expected band : 0.275001 < r < 0.275001
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 160545946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332781 +/- 0.00202144 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.332781 @ 95%CL (1 toyMC)
median expected limit: r < 0.332781 @ 95%CL (1 toyMC)
   68% expected band : 0.332781 < r < 0.332781
   95% expected band : 0.332781 < r < 0.332781
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 589883695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288149 +/- 0.00279489 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.288149 @ 95%CL (1 toyMC)
median expected limit: r < 0.288149 @ 95%CL (1 toyMC)
   68% expected band : 0.288149 < r < 0.288149
   95% expected band : 0.288149 < r < 0.288149
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -777550999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238482 +/- 0.00299835 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.238482 @ 95%CL (1 toyMC)
median expected limit: r < 0.238482 @ 95%CL (1 toyMC)
   68% expected band : 0.238482 < r < 0.238482
   95% expected band : 0.238482 < r < 0.238482
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -938058967
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243036 +/- 0.00231097 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.243036 @ 95%CL (1 toyMC)
median expected limit: r < 0.243036 @ 95%CL (1 toyMC)
   68% expected band : 0.243036 < r < 0.243036
   95% expected band : 0.243036 < r < 0.243036
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1615868516
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237736 +/- 0.00290886 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.237736 @ 95%CL (1 toyMC)
median expected limit: r < 0.237736 @ 95%CL (1 toyMC)
   68% expected band : 0.237736 < r < 0.237736
   95% expected band : 0.237736 < r < 0.237736
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1696684664
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.428049 +/- 0.00238947 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.428049 @ 95%CL (1 toyMC)
median expected limit: r < 0.428049 @ 95%CL (1 toyMC)
   68% expected band : 0.428049 < r < 0.428049
   95% expected band : 0.428049 < r < 0.428049
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1447749684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284796 +/- 0.00251489 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.284796 @ 95%CL (1 toyMC)
median expected limit: r < 0.284796 @ 95%CL (1 toyMC)
   68% expected band : 0.284796 < r < 0.284796
   95% expected band : 0.284796 < r < 0.284796
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2121575567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231228 +/- 0.00273571 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.231228 @ 95%CL (1 toyMC)
median expected limit: r < 0.231228 @ 95%CL (1 toyMC)
   68% expected band : 0.231228 < r < 0.231228
   95% expected band : 0.231228 < r < 0.231228
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1883572739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237877 +/- 0.00269108 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.237877 @ 95%CL (1 toyMC)
median expected limit: r < 0.237877 @ 95%CL (1 toyMC)
   68% expected band : 0.237877 < r < 0.237877
   95% expected band : 0.237877 < r < 0.237877
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 285684589
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.416167 +/- 0.00207966 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.416167 @ 95%CL (1 toyMC)
median expected limit: r < 0.416167 @ 95%CL (1 toyMC)
   68% expected band : 0.416167 < r < 0.416167
   95% expected band : 0.416167 < r < 0.416167
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1944323380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.183123 +/- 0.003622 @ 95% CL (98 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.183123 @ 95%CL (1 toyMC)
median expected limit: r < 0.183123 @ 95%CL (1 toyMC)
   68% expected band : 0.183123 < r < 0.183123
   95% expected band : 0.183123 < r < 0.183123
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 700556129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.239202 +/- 0.00224341 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.239202 @ 95%CL (1 toyMC)
median expected limit: r < 0.239202 @ 95%CL (1 toyMC)
   68% expected band : 0.239202 < r < 0.239202
   95% expected band : 0.239202 < r < 0.239202
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 571785235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.302402 +/- 0.00232754 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.302402 @ 95%CL (1 toyMC)
median expected limit: r < 0.302402 @ 95%CL (1 toyMC)
   68% expected band : 0.302402 < r < 0.302402
   95% expected band : 0.302402 < r < 0.302402
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1590105883
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213665 +/- 0.00315156 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.213665 @ 95%CL (1 toyMC)
median expected limit: r < 0.213665 @ 95%CL (1 toyMC)
   68% expected band : 0.213665 < r < 0.213665
   95% expected band : 0.213665 < r < 0.213665
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -442881198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234314 +/- 0.00267281 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.234314 @ 95%CL (1 toyMC)
median expected limit: r < 0.234314 @ 95%CL (1 toyMC)
   68% expected band : 0.234314 < r < 0.234314
   95% expected band : 0.234314 < r < 0.234314
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1121771224
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.336832 +/- 0.00205443 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.336832 @ 95%CL (1 toyMC)
median expected limit: r < 0.336832 @ 95%CL (1 toyMC)
   68% expected band : 0.336832 < r < 0.336832
   95% expected band : 0.336832 < r < 0.336832
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -608862707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240156 +/- 0.00244163 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.240156 @ 95%CL (1 toyMC)
median expected limit: r < 0.240156 @ 95%CL (1 toyMC)
   68% expected band : 0.240156 < r < 0.240156
   95% expected band : 0.240156 < r < 0.240156
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1518165023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.331484 +/- 0.00203706 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.331484 @ 95%CL (1 toyMC)
median expected limit: r < 0.331484 @ 95%CL (1 toyMC)
   68% expected band : 0.331484 < r < 0.331484
   95% expected band : 0.331484 < r < 0.331484
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 235386409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232942 +/- 0.00298003 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.232942 @ 95%CL (1 toyMC)
median expected limit: r < 0.232942 @ 95%CL (1 toyMC)
   68% expected band : 0.232942 < r < 0.232942
   95% expected band : 0.232942 < r < 0.232942
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -175641703
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.290193 +/- 0.0022394 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.290193 @ 95%CL (1 toyMC)
median expected limit: r < 0.290193 @ 95%CL (1 toyMC)
   68% expected band : 0.290193 < r < 0.290193
   95% expected band : 0.290193 < r < 0.290193
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1522469547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.271861 +/- 0.00265553 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.271861 @ 95%CL (1 toyMC)
median expected limit: r < 0.271861 @ 95%CL (1 toyMC)
   68% expected band : 0.271861 < r < 0.271861
   95% expected band : 0.271861 < r < 0.271861
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2020021469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200089 +/- 0.00272501 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.200089 @ 95%CL (1 toyMC)
median expected limit: r < 0.200089 @ 95%CL (1 toyMC)
   68% expected band : 0.200089 < r < 0.200089
   95% expected band : 0.200089 < r < 0.200089
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1217833001
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29425 +/- 0.00181683 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.29425 @ 95%CL (1 toyMC)
median expected limit: r < 0.29425 @ 95%CL (1 toyMC)
   68% expected band : 0.29425 < r < 0.29425
   95% expected band : 0.29425 < r < 0.29425
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1842341595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.295013 +/- 0.00206707 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.295013 @ 95%CL (1 toyMC)
median expected limit: r < 0.295013 @ 95%CL (1 toyMC)
   68% expected band : 0.295013 < r < 0.295013
   95% expected band : 0.295013 < r < 0.295013
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 668952340
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.191176 +/- 0.00287732 @ 95% CL (98 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.191176 @ 95%CL (1 toyMC)
median expected limit: r < 0.191176 @ 95%CL (1 toyMC)
   68% expected band : 0.191176 < r < 0.191176
   95% expected band : 0.191176 < r < 0.191176
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1606316945
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.180715 +/- 0.00330206 @ 95% CL (99 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.180715 @ 95%CL (1 toyMC)
median expected limit: r < 0.180715 @ 95%CL (1 toyMC)
   68% expected band : 0.180715 < r < 0.180715
   95% expected band : 0.180715 < r < 0.180715
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1594840185
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329758 +/- 0.00184195 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.329758 @ 95%CL (1 toyMC)
median expected limit: r < 0.329758 @ 95%CL (1 toyMC)
   68% expected band : 0.329758 < r < 0.329758
   95% expected band : 0.329758 < r < 0.329758
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1631468438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.209881 +/- 0.00226475 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.209881 @ 95%CL (1 toyMC)
median expected limit: r < 0.209881 @ 95%CL (1 toyMC)
   68% expected band : 0.209881 < r < 0.209881
   95% expected band : 0.209881 < r < 0.209881
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1216066681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.252372 +/- 0.00245349 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.252372 @ 95%CL (1 toyMC)
median expected limit: r < 0.252372 @ 95%CL (1 toyMC)
   68% expected band : 0.252372 < r < 0.252372
   95% expected band : 0.252372 < r < 0.252372
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1945404407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229199 +/- 0.00274871 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.229199 @ 95%CL (1 toyMC)
median expected limit: r < 0.229199 @ 95%CL (1 toyMC)
   68% expected band : 0.229199 < r < 0.229199
   95% expected band : 0.229199 < r < 0.229199
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1773366836
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236934 +/- 0.00277962 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.236934 @ 95%CL (1 toyMC)
median expected limit: r < 0.236934 @ 95%CL (1 toyMC)
   68% expected band : 0.236934 < r < 0.236934
   95% expected band : 0.236934 < r < 0.236934
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1755827894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.418867 +/- 0.00231488 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.418867 @ 95%CL (1 toyMC)
median expected limit: r < 0.418867 @ 95%CL (1 toyMC)
   68% expected band : 0.418867 < r < 0.418867
   95% expected band : 0.418867 < r < 0.418867
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 189931654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235461 +/- 0.00285951 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.235461 @ 95%CL (1 toyMC)
median expected limit: r < 0.235461 @ 95%CL (1 toyMC)
   68% expected band : 0.235461 < r < 0.235461
   95% expected band : 0.235461 < r < 0.235461
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1722863622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.322222 +/- 0.00175958 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.322222 @ 95%CL (1 toyMC)
median expected limit: r < 0.322222 @ 95%CL (1 toyMC)
   68% expected band : 0.322222 < r < 0.322222
   95% expected band : 0.322222 < r < 0.322222
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -297681643
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.342899 +/- 0.00202076 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.342899 @ 95%CL (1 toyMC)
median expected limit: r < 0.342899 @ 95%CL (1 toyMC)
   68% expected band : 0.342899 < r < 0.342899
   95% expected band : 0.342899 < r < 0.342899
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 56076764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.23408 +/- 0.00287023 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.23408 @ 95%CL (1 toyMC)
median expected limit: r < 0.23408 @ 95%CL (1 toyMC)
   68% expected band : 0.23408 < r < 0.23408
   95% expected band : 0.23408 < r < 0.23408
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 458378861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.378096 +/- 0.0024186 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.378096 @ 95%CL (1 toyMC)
median expected limit: r < 0.378096 @ 95%CL (1 toyMC)
   68% expected band : 0.378096 < r < 0.378096
   95% expected band : 0.378096 < r < 0.378096
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -311812971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.197865 +/- 0.00305298 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.197865 @ 95%CL (1 toyMC)
median expected limit: r < 0.197865 @ 95%CL (1 toyMC)
   68% expected band : 0.197865 < r < 0.197865
   95% expected band : 0.197865 < r < 0.197865
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -530845273
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.191861 +/- 0.00306103 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.191861 @ 95%CL (1 toyMC)
median expected limit: r < 0.191861 @ 95%CL (1 toyMC)
   68% expected band : 0.191861 < r < 0.191861
   95% expected band : 0.191861 < r < 0.191861
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 511656741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.276963 +/- 0.00202801 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.276963 @ 95%CL (1 toyMC)
median expected limit: r < 0.276963 @ 95%CL (1 toyMC)
   68% expected band : 0.276963 < r < 0.276963
   95% expected band : 0.276963 < r < 0.276963
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1032380146
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.448844 +/- 0.00206313 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.448844 @ 95%CL (1 toyMC)
median expected limit: r < 0.448844 @ 95%CL (1 toyMC)
   68% expected band : 0.448844 < r < 0.448844
   95% expected band : 0.448844 < r < 0.448844
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -218685432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237144 +/- 0.0024653 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.237144 @ 95%CL (1 toyMC)
median expected limit: r < 0.237144 @ 95%CL (1 toyMC)
   68% expected band : 0.237144 < r < 0.237144
   95% expected band : 0.237144 < r < 0.237144
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1105336412
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.340001 +/- 0.00211978 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.340001 @ 95%CL (1 toyMC)
median expected limit: r < 0.340001 @ 95%CL (1 toyMC)
   68% expected band : 0.340001 < r < 0.340001
   95% expected band : 0.340001 < r < 0.340001
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1088207490
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.197117 +/- 0.00320909 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.197117 @ 95%CL (1 toyMC)
median expected limit: r < 0.197117 @ 95%CL (1 toyMC)
   68% expected band : 0.197117 < r < 0.197117
   95% expected band : 0.197117 < r < 0.197117
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 627199429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190584 +/- 0.00384748 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.190584 @ 95%CL (1 toyMC)
median expected limit: r < 0.190584 @ 95%CL (1 toyMC)
   68% expected band : 0.190584 < r < 0.190584
   95% expected band : 0.190584 < r < 0.190584
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1849973162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.428811 +/- 0.00190657 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.428811 @ 95%CL (1 toyMC)
median expected limit: r < 0.428811 @ 95%CL (1 toyMC)
   68% expected band : 0.428811 < r < 0.428811
   95% expected band : 0.428811 < r < 0.428811
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -800613011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.505451 +/- 0.00231871 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.505451 @ 95%CL (1 toyMC)
median expected limit: r < 0.505451 @ 95%CL (1 toyMC)
   68% expected band : 0.505451 < r < 0.505451
   95% expected band : 0.505451 < r < 0.505451
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -709500440
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.438427 +/- 0.00181577 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.438427 @ 95%CL (1 toyMC)
median expected limit: r < 0.438427 @ 95%CL (1 toyMC)
   68% expected band : 0.438427 < r < 0.438427
   95% expected band : 0.438427 < r < 0.438427
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -594236988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361671 +/- 0.00222177 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.361671 @ 95%CL (1 toyMC)
median expected limit: r < 0.361671 @ 95%CL (1 toyMC)
   68% expected band : 0.361671 < r < 0.361671
   95% expected band : 0.361671 < r < 0.361671
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1349318879
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221535 +/- 0.00258699 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.221535 @ 95%CL (1 toyMC)
median expected limit: r < 0.221535 @ 95%CL (1 toyMC)
   68% expected band : 0.221535 < r < 0.221535
   95% expected band : 0.221535 < r < 0.221535
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -670593994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.343906 +/- 0.00190163 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.343906 @ 95%CL (1 toyMC)
median expected limit: r < 0.343906 @ 95%CL (1 toyMC)
   68% expected band : 0.343906 < r < 0.343906
   95% expected band : 0.343906 < r < 0.343906
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 6289579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.202156 +/- 0.0027807 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.202156 @ 95%CL (1 toyMC)
median expected limit: r < 0.202156 @ 95%CL (1 toyMC)
   68% expected band : 0.202156 < r < 0.202156
   95% expected band : 0.202156 < r < 0.202156
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1780905687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.273079 +/- 0.00231954 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.273079 @ 95%CL (1 toyMC)
median expected limit: r < 0.273079 @ 95%CL (1 toyMC)
   68% expected band : 0.273079 < r < 0.273079
   95% expected band : 0.273079 < r < 0.273079
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -43409448
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.287267 +/- 0.00260607 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.287267 @ 95%CL (1 toyMC)
median expected limit: r < 0.287267 @ 95%CL (1 toyMC)
   68% expected band : 0.287267 < r < 0.287267
   95% expected band : 0.287267 < r < 0.287267
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1533513438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.32174 +/- 0.00237947 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.32174 @ 95%CL (1 toyMC)
median expected limit: r < 0.32174 @ 95%CL (1 toyMC)
   68% expected band : 0.32174 < r < 0.32174
   95% expected band : 0.32174 < r < 0.32174
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2045721100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325774 +/- 0.00182163 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.325774 @ 95%CL (1 toyMC)
median expected limit: r < 0.325774 @ 95%CL (1 toyMC)
   68% expected band : 0.325774 < r < 0.325774
   95% expected band : 0.325774 < r < 0.325774
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1727568282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.249111 +/- 0.00286872 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.249111 @ 95%CL (1 toyMC)
median expected limit: r < 0.249111 @ 95%CL (1 toyMC)
   68% expected band : 0.249111 < r < 0.249111
   95% expected band : 0.249111 < r < 0.249111
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -12342877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243422 +/- 0.00280053 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.243422 @ 95%CL (1 toyMC)
median expected limit: r < 0.243422 @ 95%CL (1 toyMC)
   68% expected band : 0.243422 < r < 0.243422
   95% expected band : 0.243422 < r < 0.243422
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 208797783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.185949 +/- 0.00281708 @ 95% CL (98 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.185949 @ 95%CL (1 toyMC)
median expected limit: r < 0.185949 @ 95%CL (1 toyMC)
   68% expected band : 0.185949 < r < 0.185949
   95% expected band : 0.185949 < r < 0.185949
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -108283629
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229555 +/- 0.00194514 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.229555 @ 95%CL (1 toyMC)
median expected limit: r < 0.229555 @ 95%CL (1 toyMC)
   68% expected band : 0.229555 < r < 0.229555
   95% expected band : 0.229555 < r < 0.229555
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -587995877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281104 +/- 0.00295621 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.281104 @ 95%CL (1 toyMC)
median expected limit: r < 0.281104 @ 95%CL (1 toyMC)
   68% expected band : 0.281104 < r < 0.281104
   95% expected band : 0.281104 < r < 0.281104
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -776549829
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.38227 +/- 0.00180354 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.38227 @ 95%CL (1 toyMC)
median expected limit: r < 0.38227 @ 95%CL (1 toyMC)
   68% expected band : 0.38227 < r < 0.38227
   95% expected band : 0.38227 < r < 0.38227
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 711462111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.376994 +/- 0.00247116 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.376994 @ 95%CL (1 toyMC)
median expected limit: r < 0.376994 @ 95%CL (1 toyMC)
   68% expected band : 0.376994 < r < 0.376994
   95% expected band : 0.376994 < r < 0.376994
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -607305831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285709 +/- 0.00231438 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.285709 @ 95%CL (1 toyMC)
median expected limit: r < 0.285709 @ 95%CL (1 toyMC)
   68% expected band : 0.285709 < r < 0.285709
   95% expected band : 0.285709 < r < 0.285709
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 487466499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.275722 +/- 0.00241441 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.275722 @ 95%CL (1 toyMC)
median expected limit: r < 0.275722 @ 95%CL (1 toyMC)
   68% expected band : 0.275722 < r < 0.275722
   95% expected band : 0.275722 < r < 0.275722
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1381914728
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.278881 +/- 0.00267313 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.278881 @ 95%CL (1 toyMC)
median expected limit: r < 0.278881 @ 95%CL (1 toyMC)
   68% expected band : 0.278881 < r < 0.278881
   95% expected band : 0.278881 < r < 0.278881
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1652810330
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304886 +/- 0.00264003 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.304886 @ 95%CL (1 toyMC)
median expected limit: r < 0.304886 @ 95%CL (1 toyMC)
   68% expected band : 0.304886 < r < 0.304886
   95% expected band : 0.304886 < r < 0.304886
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2058076151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.576637 +/- 0.00155675 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.576637 @ 95%CL (1 toyMC)
median expected limit: r < 0.576637 @ 95%CL (1 toyMC)
   68% expected band : 0.576637 < r < 0.576637
   95% expected band : 0.576637 < r < 0.576637
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 69039305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.214021 +/- 0.00292932 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.214021 @ 95%CL (1 toyMC)
median expected limit: r < 0.214021 @ 95%CL (1 toyMC)
   68% expected band : 0.214021 < r < 0.214021
   95% expected band : 0.214021 < r < 0.214021
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -476819360
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.227165 +/- 0.00278796 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.227165 @ 95%CL (1 toyMC)
median expected limit: r < 0.227165 @ 95%CL (1 toyMC)
   68% expected band : 0.227165 < r < 0.227165
   95% expected band : 0.227165 < r < 0.227165
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 987604946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.375809 +/- 0.00191697 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.375809 @ 95%CL (1 toyMC)
median expected limit: r < 0.375809 @ 95%CL (1 toyMC)
   68% expected band : 0.375809 < r < 0.375809
   95% expected band : 0.375809 < r < 0.375809
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 160301651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212868 +/- 0.00312601 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.212868 @ 95%CL (1 toyMC)
median expected limit: r < 0.212868 @ 95%CL (1 toyMC)
   68% expected band : 0.212868 < r < 0.212868
   95% expected band : 0.212868 < r < 0.212868
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -957437412
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226793 +/- 0.0029245 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.226793 @ 95%CL (1 toyMC)
median expected limit: r < 0.226793 @ 95%CL (1 toyMC)
   68% expected band : 0.226793 < r < 0.226793
   95% expected band : 0.226793 < r < 0.226793
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 896749067
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.177763 +/- 0.00347711 @ 95% CL (99 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.177763 @ 95%CL (1 toyMC)
median expected limit: r < 0.177763 @ 95%CL (1 toyMC)
   68% expected band : 0.177763 < r < 0.177763
   95% expected band : 0.177763 < r < 0.177763
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1132242814
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.198654 +/- 0.0027565 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.198654 @ 95%CL (1 toyMC)
median expected limit: r < 0.198654 @ 95%CL (1 toyMC)
   68% expected band : 0.198654 < r < 0.198654
   95% expected band : 0.198654 < r < 0.198654
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1473775796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.341628 +/- 0.0020938 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.341628 @ 95%CL (1 toyMC)
median expected limit: r < 0.341628 @ 95%CL (1 toyMC)
   68% expected band : 0.341628 < r < 0.341628
   95% expected band : 0.341628 < r < 0.341628
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -306993839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.230825 +/- 0.00234434 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.230825 @ 95%CL (1 toyMC)
median expected limit: r < 0.230825 @ 95%CL (1 toyMC)
   68% expected band : 0.230825 < r < 0.230825
   95% expected band : 0.230825 < r < 0.230825
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 156941024
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.257002 +/- 0.0027222 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.257002 @ 95%CL (1 toyMC)
median expected limit: r < 0.257002 @ 95%CL (1 toyMC)
   68% expected band : 0.257002 < r < 0.257002
   95% expected band : 0.257002 < r < 0.257002
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -201044153
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.384338 +/- 0.0020631 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.384338 @ 95%CL (1 toyMC)
median expected limit: r < 0.384338 @ 95%CL (1 toyMC)
   68% expected band : 0.384338 < r < 0.384338
   95% expected band : 0.384338 < r < 0.384338
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1467453944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.183278 +/- 0.00226415 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.183278 @ 95%CL (1 toyMC)
median expected limit: r < 0.183278 @ 95%CL (1 toyMC)
   68% expected band : 0.183278 < r < 0.183278
   95% expected band : 0.183278 < r < 0.183278
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 574342045
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.293073 +/- 0.00195703 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.293073 @ 95%CL (1 toyMC)
median expected limit: r < 0.293073 @ 95%CL (1 toyMC)
   68% expected band : 0.293073 < r < 0.293073
   95% expected band : 0.293073 < r < 0.293073
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -810781036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.23434 +/- 0.00276666 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.23434 @ 95%CL (1 toyMC)
median expected limit: r < 0.23434 @ 95%CL (1 toyMC)
   68% expected band : 0.23434 < r < 0.23434
   95% expected band : 0.23434 < r < 0.23434
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -657056531
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.215259 +/- 0.00214227 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.215259 @ 95%CL (1 toyMC)
median expected limit: r < 0.215259 @ 95%CL (1 toyMC)
   68% expected band : 0.215259 < r < 0.215259
   95% expected band : 0.215259 < r < 0.215259
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1074934713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300317 +/- 0.00204427 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.300317 @ 95%CL (1 toyMC)
median expected limit: r < 0.300317 @ 95%CL (1 toyMC)
   68% expected band : 0.300317 < r < 0.300317
   95% expected band : 0.300317 < r < 0.300317
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 285963286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.365248 +/- 0.0022639 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.365248 @ 95%CL (1 toyMC)
median expected limit: r < 0.365248 @ 95%CL (1 toyMC)
   68% expected band : 0.365248 < r < 0.365248
   95% expected band : 0.365248 < r < 0.365248
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 312454624
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.271776 +/- 0.00270588 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.271776 @ 95%CL (1 toyMC)
median expected limit: r < 0.271776 @ 95%CL (1 toyMC)
   68% expected band : 0.271776 < r < 0.271776
   95% expected band : 0.271776 < r < 0.271776
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1542823458
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.24076 +/- 0.00275487 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.24076 @ 95%CL (1 toyMC)
median expected limit: r < 0.24076 @ 95%CL (1 toyMC)
   68% expected band : 0.24076 < r < 0.24076
   95% expected band : 0.24076 < r < 0.24076
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1028802909.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-108283629.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1088207490.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1217833001.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-12342877.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1381914728.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1447749684.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1542823458.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1573380167.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1606316945.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-164812818.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1652810330.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1696684664.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1755827894.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-175641703.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1773366836.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1780905687.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1849973162.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1883572739.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1944323380.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1945404407.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-2003024042.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-201044153.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-2020021469.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-20385040.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-2058076151.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-2121575567.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-218685432.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-297681643.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-306993839.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-311812971.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-43409448.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-442881198.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-476819360.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-530845273.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-587995877.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-594236988.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-607305831.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-608862707.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-657056531.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-670593994.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-679898108.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-709500440.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-776549829.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-777550999.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-800613011.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-810781036.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-938058967.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-957437412.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.1032380146.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.1074934713.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.1105336412.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1121771224.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1132242814.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1216066681.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1286345144.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1349318879.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1406252758.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1467453944.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1473775796.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1518165023.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1522469547.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1533513438.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.156941024.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1590105883.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1594840185.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.160301651.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.160545946.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1615868516.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1616924948.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1631468438.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1722863622.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1727568282.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1842341595.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.189931654.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.1979376225.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.2045721100.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.208797783.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.2097679840.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.235386409.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.285684589.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.285963286.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.312454624.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.433755977.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.458378861.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.487466499.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.511656741.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.554510146.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.56076764.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.571785235.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.574342045.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.589883695.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.627199429.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.6289579.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.668952340.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.69039305.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.700556129.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.711462111.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.896749067.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.987604946.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -224682951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.406823 +/- 0.00362055 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.406823 @ 95%CL (1 toyMC)
median expected limit: r < 0.406823 @ 95%CL (1 toyMC)
   68% expected band : 0.406823 < r < 0.406823
   95% expected band : 0.406823 < r < 0.406823
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1161253995
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.274769 +/- 0.0025249 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.274769 @ 95%CL (1 toyMC)
median expected limit: r < 0.274769 @ 95%CL (1 toyMC)
   68% expected band : 0.274769 < r < 0.274769
   95% expected band : 0.274769 < r < 0.274769
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 569950369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.521184 +/- 0.00280833 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.521184 @ 95%CL (1 toyMC)
median expected limit: r < 0.521184 @ 95%CL (1 toyMC)
   68% expected band : 0.521184 < r < 0.521184
   95% expected band : 0.521184 < r < 0.521184
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1032009376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.337274 +/- 0.00305618 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.337274 @ 95%CL (1 toyMC)
median expected limit: r < 0.337274 @ 95%CL (1 toyMC)
   68% expected band : 0.337274 < r < 0.337274
   95% expected band : 0.337274 < r < 0.337274
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1127923083
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.264615 +/- 0.00347811 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.264615 @ 95%CL (1 toyMC)
median expected limit: r < 0.264615 @ 95%CL (1 toyMC)
   68% expected band : 0.264615 < r < 0.264615
   95% expected band : 0.264615 < r < 0.264615
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1252353820
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242626 +/- 0.00317655 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.242626 @ 95%CL (1 toyMC)
median expected limit: r < 0.242626 @ 95%CL (1 toyMC)
   68% expected band : 0.242626 < r < 0.242626
   95% expected band : 0.242626 < r < 0.242626
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1473782279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.318874 +/- 0.00336744 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.318874 @ 95%CL (1 toyMC)
median expected limit: r < 0.318874 @ 95%CL (1 toyMC)
   68% expected band : 0.318874 < r < 0.318874
   95% expected band : 0.318874 < r < 0.318874
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1438553122
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.339812 +/- 0.00328654 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.339812 @ 95%CL (1 toyMC)
median expected limit: r < 0.339812 @ 95%CL (1 toyMC)
   68% expected band : 0.339812 < r < 0.339812
   95% expected band : 0.339812 < r < 0.339812
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1588536980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248888 +/- 0.00322211 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.248888 @ 95%CL (1 toyMC)
median expected limit: r < 0.248888 @ 95%CL (1 toyMC)
   68% expected band : 0.248888 < r < 0.248888
   95% expected band : 0.248888 < r < 0.248888
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2028149317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285893 +/- 0.00275747 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.285893 @ 95%CL (1 toyMC)
median expected limit: r < 0.285893 @ 95%CL (1 toyMC)
   68% expected band : 0.285893 < r < 0.285893
   95% expected band : 0.285893 < r < 0.285893
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -491411157
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.319621 +/- 0.00203006 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.319621 @ 95%CL (1 toyMC)
median expected limit: r < 0.319621 @ 95%CL (1 toyMC)
   68% expected band : 0.319621 < r < 0.319621
   95% expected band : 0.319621 < r < 0.319621
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -753310366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335367 +/- 0.00306981 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.335367 @ 95%CL (1 toyMC)
median expected limit: r < 0.335367 @ 95%CL (1 toyMC)
   68% expected band : 0.335367 < r < 0.335367
   95% expected band : 0.335367 < r < 0.335367
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1566697320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280678 +/- 0.00407945 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.280678 @ 95%CL (1 toyMC)
median expected limit: r < 0.280678 @ 95%CL (1 toyMC)
   68% expected band : 0.280678 < r < 0.280678
   95% expected band : 0.280678 < r < 0.280678
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 377960401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.431423 +/- 0.00271204 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.431423 @ 95%CL (1 toyMC)
median expected limit: r < 0.431423 @ 95%CL (1 toyMC)
   68% expected band : 0.431423 < r < 0.431423
   95% expected band : 0.431423 < r < 0.431423
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 662457901
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240732 +/- 0.00307237 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.240732 @ 95%CL (1 toyMC)
median expected limit: r < 0.240732 @ 95%CL (1 toyMC)
   68% expected band : 0.240732 < r < 0.240732
   95% expected band : 0.240732 < r < 0.240732
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1539597659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29475 +/- 0.0031747 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.29475 @ 95%CL (1 toyMC)
median expected limit: r < 0.29475 @ 95%CL (1 toyMC)
   68% expected band : 0.29475 < r < 0.29475
   95% expected band : 0.29475 < r < 0.29475
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1387387031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.220357 +/- 0.00358413 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.220357 @ 95%CL (1 toyMC)
median expected limit: r < 0.220357 @ 95%CL (1 toyMC)
   68% expected band : 0.220357 < r < 0.220357
   95% expected band : 0.220357 < r < 0.220357
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 937306671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305339 +/- 0.00278117 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.305339 @ 95%CL (1 toyMC)
median expected limit: r < 0.305339 @ 95%CL (1 toyMC)
   68% expected band : 0.305339 < r < 0.305339
   95% expected band : 0.305339 < r < 0.305339
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -799946255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387314 +/- 0.00308801 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.387314 @ 95%CL (1 toyMC)
median expected limit: r < 0.387314 @ 95%CL (1 toyMC)
   68% expected band : 0.387314 < r < 0.387314
   95% expected band : 0.387314 < r < 0.387314
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2048919698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.252981 +/- 0.0028191 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.252981 @ 95%CL (1 toyMC)
median expected limit: r < 0.252981 @ 95%CL (1 toyMC)
   68% expected band : 0.252981 < r < 0.252981
   95% expected band : 0.252981 < r < 0.252981
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1269528031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263821 +/- 0.00364236 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.263821 @ 95%CL (1 toyMC)
median expected limit: r < 0.263821 @ 95%CL (1 toyMC)
   68% expected band : 0.263821 < r < 0.263821
   95% expected band : 0.263821 < r < 0.263821
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1172798118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.287728 +/- 0.00295818 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.287728 @ 95%CL (1 toyMC)
median expected limit: r < 0.287728 @ 95%CL (1 toyMC)
   68% expected band : 0.287728 < r < 0.287728
   95% expected band : 0.287728 < r < 0.287728
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -277320478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.379193 +/- 0.00194751 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.379193 @ 95%CL (1 toyMC)
median expected limit: r < 0.379193 @ 95%CL (1 toyMC)
   68% expected band : 0.379193 < r < 0.379193
   95% expected band : 0.379193 < r < 0.379193
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 893731205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.283254 +/- 0.00295317 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.283254 @ 95%CL (1 toyMC)
median expected limit: r < 0.283254 @ 95%CL (1 toyMC)
   68% expected band : 0.283254 < r < 0.283254
   95% expected band : 0.283254 < r < 0.283254
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1469822125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304529 +/- 0.00344558 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.304529 @ 95%CL (1 toyMC)
median expected limit: r < 0.304529 @ 95%CL (1 toyMC)
   68% expected band : 0.304529 < r < 0.304529
   95% expected band : 0.304529 < r < 0.304529
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -651962196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272681 +/- 0.002886 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.272681 @ 95%CL (1 toyMC)
median expected limit: r < 0.272681 @ 95%CL (1 toyMC)
   68% expected band : 0.272681 < r < 0.272681
   95% expected band : 0.272681 < r < 0.272681
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1012010710
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29893 +/- 0.00303421 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.29893 @ 95%CL (1 toyMC)
median expected limit: r < 0.29893 @ 95%CL (1 toyMC)
   68% expected band : 0.29893 < r < 0.29893
   95% expected band : 0.29893 < r < 0.29893
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -966040265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.58165 +/- 0.003197 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.58165 @ 95%CL (1 toyMC)
median expected limit: r < 0.58165 @ 95%CL (1 toyMC)
   68% expected band : 0.58165 < r < 0.58165
   95% expected band : 0.58165 < r < 0.58165
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2022428245
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.274673 +/- 0.00295288 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.274673 @ 95%CL (1 toyMC)
median expected limit: r < 0.274673 @ 95%CL (1 toyMC)
   68% expected band : 0.274673 < r < 0.274673
   95% expected band : 0.274673 < r < 0.274673
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2087028481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.399688 +/- 0.00269512 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.399688 @ 95%CL (1 toyMC)
median expected limit: r < 0.399688 @ 95%CL (1 toyMC)
   68% expected band : 0.399688 < r < 0.399688
   95% expected band : 0.399688 < r < 0.399688
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1895653396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.315686 +/- 0.00266385 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.315686 @ 95%CL (1 toyMC)
median expected limit: r < 0.315686 @ 95%CL (1 toyMC)
   68% expected band : 0.315686 < r < 0.315686
   95% expected band : 0.315686 < r < 0.315686
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 508034898
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26725 +/- 0.00316696 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.26725 @ 95%CL (1 toyMC)
median expected limit: r < 0.26725 @ 95%CL (1 toyMC)
   68% expected band : 0.26725 < r < 0.26725
   95% expected band : 0.26725 < r < 0.26725
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -356406942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.331038 +/- 0.00212761 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.331038 @ 95%CL (1 toyMC)
median expected limit: r < 0.331038 @ 95%CL (1 toyMC)
   68% expected band : 0.331038 < r < 0.331038
   95% expected band : 0.331038 < r < 0.331038
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -191398394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248432 +/- 0.00364902 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.248432 @ 95%CL (1 toyMC)
median expected limit: r < 0.248432 @ 95%CL (1 toyMC)
   68% expected band : 0.248432 < r < 0.248432
   95% expected band : 0.248432 < r < 0.248432
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 691032278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.409856 +/- 0.00237938 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.409856 @ 95%CL (1 toyMC)
median expected limit: r < 0.409856 @ 95%CL (1 toyMC)
   68% expected band : 0.409856 < r < 0.409856
   95% expected band : 0.409856 < r < 0.409856
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1884555284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.358741 +/- 0.00271783 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.358741 @ 95%CL (1 toyMC)
median expected limit: r < 0.358741 @ 95%CL (1 toyMC)
   68% expected band : 0.358741 < r < 0.358741
   95% expected band : 0.358741 < r < 0.358741
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -999455946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.507408 +/- 0.00256526 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.507408 @ 95%CL (1 toyMC)
median expected limit: r < 0.507408 @ 95%CL (1 toyMC)
   68% expected band : 0.507408 < r < 0.507408
   95% expected band : 0.507408 < r < 0.507408
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 311297273
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28027 +/- 0.00314213 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.28027 @ 95%CL (1 toyMC)
median expected limit: r < 0.28027 @ 95%CL (1 toyMC)
   68% expected band : 0.28027 < r < 0.28027
   95% expected band : 0.28027 < r < 0.28027
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1107150788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.350035 +/- 0.00332274 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.350035 @ 95%CL (1 toyMC)
median expected limit: r < 0.350035 @ 95%CL (1 toyMC)
   68% expected band : 0.350035 < r < 0.350035
   95% expected band : 0.350035 < r < 0.350035
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1681285265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301896 +/- 0.00331293 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.301896 @ 95%CL (1 toyMC)
median expected limit: r < 0.301896 @ 95%CL (1 toyMC)
   68% expected band : 0.301896 < r < 0.301896
   95% expected band : 0.301896 < r < 0.301896
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 725096497
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.266428 +/- 0.00305579 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.266428 @ 95%CL (1 toyMC)
median expected limit: r < 0.266428 @ 95%CL (1 toyMC)
   68% expected band : 0.266428 < r < 0.266428
   95% expected band : 0.266428 < r < 0.266428
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2038851989
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.317737 +/- 0.00324372 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.317737 @ 95%CL (1 toyMC)
median expected limit: r < 0.317737 @ 95%CL (1 toyMC)
   68% expected band : 0.317737 < r < 0.317737
   95% expected band : 0.317737 < r < 0.317737
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1529903484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.372094 +/- 0.00294147 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.372094 @ 95%CL (1 toyMC)
median expected limit: r < 0.372094 @ 95%CL (1 toyMC)
   68% expected band : 0.372094 < r < 0.372094
   95% expected band : 0.372094 < r < 0.372094
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 632262799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.350229 +/- 0.00216378 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.350229 @ 95%CL (1 toyMC)
median expected limit: r < 0.350229 @ 95%CL (1 toyMC)
   68% expected band : 0.350229 < r < 0.350229
   95% expected band : 0.350229 < r < 0.350229
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 952555481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.265799 +/- 0.00370364 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.265799 @ 95%CL (1 toyMC)
median expected limit: r < 0.265799 @ 95%CL (1 toyMC)
   68% expected band : 0.265799 < r < 0.265799
   95% expected band : 0.265799 < r < 0.265799
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1332291073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.522184 +/- 0.00297735 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.522184 @ 95%CL (1 toyMC)
median expected limit: r < 0.522184 @ 95%CL (1 toyMC)
   68% expected band : 0.522184 < r < 0.522184
   95% expected band : 0.522184 < r < 0.522184
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -499298326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.527872 +/- 0.00325146 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.527872 @ 95%CL (1 toyMC)
median expected limit: r < 0.527872 @ 95%CL (1 toyMC)
   68% expected band : 0.527872 < r < 0.527872
   95% expected band : 0.527872 < r < 0.527872
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 718781115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.298811 +/- 0.00227108 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.298811 @ 95%CL (1 toyMC)
median expected limit: r < 0.298811 @ 95%CL (1 toyMC)
   68% expected band : 0.298811 < r < 0.298811
   95% expected band : 0.298811 < r < 0.298811
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 511019835
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272851 +/- 0.00292773 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.272851 @ 95%CL (1 toyMC)
median expected limit: r < 0.272851 @ 95%CL (1 toyMC)
   68% expected band : 0.272851 < r < 0.272851
   95% expected band : 0.272851 < r < 0.272851
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1694118152
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268799 +/- 0.00336156 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.268799 @ 95%CL (1 toyMC)
median expected limit: r < 0.268799 @ 95%CL (1 toyMC)
   68% expected band : 0.268799 < r < 0.268799
   95% expected band : 0.268799 < r < 0.268799
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1500780862
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309709 +/- 0.00398476 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.309709 @ 95%CL (1 toyMC)
median expected limit: r < 0.309709 @ 95%CL (1 toyMC)
   68% expected band : 0.309709 < r < 0.309709
   95% expected band : 0.309709 < r < 0.309709
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -521254651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232604 +/- 0.00291757 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.232604 @ 95%CL (1 toyMC)
median expected limit: r < 0.232604 @ 95%CL (1 toyMC)
   68% expected band : 0.232604 < r < 0.232604
   95% expected band : 0.232604 < r < 0.232604
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -534302949
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.447256 +/- 0.00248277 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.447256 @ 95%CL (1 toyMC)
median expected limit: r < 0.447256 @ 95%CL (1 toyMC)
   68% expected band : 0.447256 < r < 0.447256
   95% expected band : 0.447256 < r < 0.447256
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 168083666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272821 +/- 0.00281041 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.272821 @ 95%CL (1 toyMC)
median expected limit: r < 0.272821 @ 95%CL (1 toyMC)
   68% expected band : 0.272821 < r < 0.272821
   95% expected band : 0.272821 < r < 0.272821
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1457966177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.344645 +/- 0.00367599 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.344645 @ 95%CL (1 toyMC)
median expected limit: r < 0.344645 @ 95%CL (1 toyMC)
   68% expected band : 0.344645 < r < 0.344645
   95% expected band : 0.344645 < r < 0.344645
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -238942504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.336521 +/- 0.0032607 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.336521 @ 95%CL (1 toyMC)
median expected limit: r < 0.336521 @ 95%CL (1 toyMC)
   68% expected band : 0.336521 < r < 0.336521
   95% expected band : 0.336521 < r < 0.336521
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -748149364
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270427 +/- 0.00341833 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.270427 @ 95%CL (1 toyMC)
median expected limit: r < 0.270427 @ 95%CL (1 toyMC)
   68% expected band : 0.270427 < r < 0.270427
   95% expected band : 0.270427 < r < 0.270427
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1895710614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.505525 +/- 0.00308492 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.505525 @ 95%CL (1 toyMC)
median expected limit: r < 0.505525 @ 95%CL (1 toyMC)
   68% expected band : 0.505525 < r < 0.505525
   95% expected band : 0.505525 < r < 0.505525
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1773110867
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.748132 +/- 0.00276916 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.748132 @ 95%CL (1 toyMC)
median expected limit: r < 0.748132 @ 95%CL (1 toyMC)
   68% expected band : 0.748132 < r < 0.748132
   95% expected band : 0.748132 < r < 0.748132
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2042037816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228134 +/- 0.00341042 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.228134 @ 95%CL (1 toyMC)
median expected limit: r < 0.228134 @ 95%CL (1 toyMC)
   68% expected band : 0.228134 < r < 0.228134
   95% expected band : 0.228134 < r < 0.228134
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2091606400
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335958 +/- 0.00340657 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.335958 @ 95%CL (1 toyMC)
median expected limit: r < 0.335958 @ 95%CL (1 toyMC)
   68% expected band : 0.335958 < r < 0.335958
   95% expected band : 0.335958 < r < 0.335958
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -944815386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246881 +/- 0.00301964 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.246881 @ 95%CL (1 toyMC)
median expected limit: r < 0.246881 @ 95%CL (1 toyMC)
   68% expected band : 0.246881 < r < 0.246881
   95% expected band : 0.246881 < r < 0.246881
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2083961394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226314 +/- 0.00338773 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.226314 @ 95%CL (1 toyMC)
median expected limit: r < 0.226314 @ 95%CL (1 toyMC)
   68% expected band : 0.226314 < r < 0.226314
   95% expected band : 0.226314 < r < 0.226314
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 930645967
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.342095 +/- 0.00297394 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.342095 @ 95%CL (1 toyMC)
median expected limit: r < 0.342095 @ 95%CL (1 toyMC)
   68% expected band : 0.342095 < r < 0.342095
   95% expected band : 0.342095 < r < 0.342095
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1550998652
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312819 +/- 0.00257456 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.312819 @ 95%CL (1 toyMC)
median expected limit: r < 0.312819 @ 95%CL (1 toyMC)
   68% expected band : 0.312819 < r < 0.312819
   95% expected band : 0.312819 < r < 0.312819
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1289031362
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.340169 +/- 0.00298258 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.340169 @ 95%CL (1 toyMC)
median expected limit: r < 0.340169 @ 95%CL (1 toyMC)
   68% expected band : 0.340169 < r < 0.340169
   95% expected band : 0.340169 < r < 0.340169
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -16244222
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.475445 +/- 0.00206333 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.475445 @ 95%CL (1 toyMC)
median expected limit: r < 0.475445 @ 95%CL (1 toyMC)
   68% expected band : 0.475445 < r < 0.475445
   95% expected band : 0.475445 < r < 0.475445
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 953416141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.259718 +/- 0.00312586 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.259718 @ 95%CL (1 toyMC)
median expected limit: r < 0.259718 @ 95%CL (1 toyMC)
   68% expected band : 0.259718 < r < 0.259718
   95% expected band : 0.259718 < r < 0.259718
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 919979411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.434615 +/- 0.00281577 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.434615 @ 95%CL (1 toyMC)
median expected limit: r < 0.434615 @ 95%CL (1 toyMC)
   68% expected band : 0.434615 < r < 0.434615
   95% expected band : 0.434615 < r < 0.434615
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 835544294
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.460993 +/- 0.00226986 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.460993 @ 95%CL (1 toyMC)
median expected limit: r < 0.460993 @ 95%CL (1 toyMC)
   68% expected band : 0.460993 < r < 0.460993
   95% expected band : 0.460993 < r < 0.460993
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -361115248
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.23411 +/- 0.00300893 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.23411 @ 95%CL (1 toyMC)
median expected limit: r < 0.23411 @ 95%CL (1 toyMC)
   68% expected band : 0.23411 < r < 0.23411
   95% expected band : 0.23411 < r < 0.23411
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -769642944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313535 +/- 0.00368824 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.313535 @ 95%CL (1 toyMC)
median expected limit: r < 0.313535 @ 95%CL (1 toyMC)
   68% expected band : 0.313535 < r < 0.313535
   95% expected band : 0.313535 < r < 0.313535
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -921626173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.431055 +/- 0.0030566 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.431055 @ 95%CL (1 toyMC)
median expected limit: r < 0.431055 @ 95%CL (1 toyMC)
   68% expected band : 0.431055 < r < 0.431055
   95% expected band : 0.431055 < r < 0.431055
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1936938597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.303526 +/- 0.00265025 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.303526 @ 95%CL (1 toyMC)
median expected limit: r < 0.303526 @ 95%CL (1 toyMC)
   68% expected band : 0.303526 < r < 0.303526
   95% expected band : 0.303526 < r < 0.303526
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1226225419
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.497181 +/- 0.00312304 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.497181 @ 95%CL (1 toyMC)
median expected limit: r < 0.497181 @ 95%CL (1 toyMC)
   68% expected band : 0.497181 < r < 0.497181
   95% expected band : 0.497181 < r < 0.497181
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1239289545
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.291292 +/- 0.00280213 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.291292 @ 95%CL (1 toyMC)
median expected limit: r < 0.291292 @ 95%CL (1 toyMC)
   68% expected band : 0.291292 < r < 0.291292
   95% expected band : 0.291292 < r < 0.291292
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1784738569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213993 +/- 0.00314587 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.213993 @ 95%CL (1 toyMC)
median expected limit: r < 0.213993 @ 95%CL (1 toyMC)
   68% expected band : 0.213993 < r < 0.213993
   95% expected band : 0.213993 < r < 0.213993
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 382967230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231992 +/- 0.00360794 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.231992 @ 95%CL (1 toyMC)
median expected limit: r < 0.231992 @ 95%CL (1 toyMC)
   68% expected band : 0.231992 < r < 0.231992
   95% expected band : 0.231992 < r < 0.231992
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1618215250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.381726 +/- 0.00275842 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.381726 @ 95%CL (1 toyMC)
median expected limit: r < 0.381726 @ 95%CL (1 toyMC)
   68% expected band : 0.381726 < r < 0.381726
   95% expected band : 0.381726 < r < 0.381726
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 459406992
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.397347 +/- 0.00265428 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.397347 @ 95%CL (1 toyMC)
median expected limit: r < 0.397347 @ 95%CL (1 toyMC)
   68% expected band : 0.397347 < r < 0.397347
   95% expected band : 0.397347 < r < 0.397347
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1209527725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.686919 +/- 0.0034089 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.686919 @ 95%CL (1 toyMC)
median expected limit: r < 0.686919 @ 95%CL (1 toyMC)
   68% expected band : 0.686919 < r < 0.686919
   95% expected band : 0.686919 < r < 0.686919
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1323125466
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260705 +/- 0.00312541 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.260705 @ 95%CL (1 toyMC)
median expected limit: r < 0.260705 @ 95%CL (1 toyMC)
   68% expected band : 0.260705 < r < 0.260705
   95% expected band : 0.260705 < r < 0.260705
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -162519892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.49565 +/- 0.00249678 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.49565 @ 95%CL (1 toyMC)
median expected limit: r < 0.49565 @ 95%CL (1 toyMC)
   68% expected band : 0.49565 < r < 0.49565
   95% expected band : 0.49565 < r < 0.49565
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2037868996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246579 +/- 0.00271547 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.246579 @ 95%CL (1 toyMC)
median expected limit: r < 0.246579 @ 95%CL (1 toyMC)
   68% expected band : 0.246579 < r < 0.246579
   95% expected band : 0.246579 < r < 0.246579
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 300181764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286141 +/- 0.00229251 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.286141 @ 95%CL (1 toyMC)
median expected limit: r < 0.286141 @ 95%CL (1 toyMC)
   68% expected band : 0.286141 < r < 0.286141
   95% expected band : 0.286141 < r < 0.286141
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1389434062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244815 +/- 0.00319091 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.244815 @ 95%CL (1 toyMC)
median expected limit: r < 0.244815 @ 95%CL (1 toyMC)
   68% expected band : 0.244815 < r < 0.244815
   95% expected band : 0.244815 < r < 0.244815
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 894868982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.346674 +/- 0.00317688 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.346674 @ 95%CL (1 toyMC)
median expected limit: r < 0.346674 @ 95%CL (1 toyMC)
   68% expected band : 0.346674 < r < 0.346674
   95% expected band : 0.346674 < r < 0.346674
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -473611225
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260859 +/- 0.00260926 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.260859 @ 95%CL (1 toyMC)
median expected limit: r < 0.260859 @ 95%CL (1 toyMC)
   68% expected band : 0.260859 < r < 0.260859
   95% expected band : 0.260859 < r < 0.260859
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -972911252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.429876 +/- 0.00328732 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.429876 @ 95%CL (1 toyMC)
median expected limit: r < 0.429876 @ 95%CL (1 toyMC)
   68% expected band : 0.429876 < r < 0.429876
   95% expected band : 0.429876 < r < 0.429876
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -306157485
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242923 +/- 0.00343213 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.242923 @ 95%CL (1 toyMC)
median expected limit: r < 0.242923 @ 95%CL (1 toyMC)
   68% expected band : 0.242923 < r < 0.242923
   95% expected band : 0.242923 < r < 0.242923
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1702158226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.328559 +/- 0.00321944 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.328559 @ 95%CL (1 toyMC)
median expected limit: r < 0.328559 @ 95%CL (1 toyMC)
   68% expected band : 0.328559 < r < 0.328559
   95% expected band : 0.328559 < r < 0.328559
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1795295831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28899 +/- 0.00283378 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.28899 @ 95%CL (1 toyMC)
median expected limit: r < 0.28899 @ 95%CL (1 toyMC)
   68% expected band : 0.28899 < r < 0.28899
   95% expected band : 0.28899 < r < 0.28899
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -879575281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282912 +/- 0.00260442 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.282912 @ 95%CL (1 toyMC)
median expected limit: r < 0.282912 @ 95%CL (1 toyMC)
   68% expected band : 0.282912 < r < 0.282912
   95% expected band : 0.282912 < r < 0.282912
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1919311775
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229457 +/- 0.00253899 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.229457 @ 95%CL (1 toyMC)
median expected limit: r < 0.229457 @ 95%CL (1 toyMC)
   68% expected band : 0.229457 < r < 0.229457
   95% expected band : 0.229457 < r < 0.229457
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -131054420
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.295489 +/- 0.00318698 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.295489 @ 95%CL (1 toyMC)
median expected limit: r < 0.295489 @ 95%CL (1 toyMC)
   68% expected band : 0.295489 < r < 0.295489
   95% expected band : 0.295489 < r < 0.295489
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1349800060
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28763 +/- 0.00246337 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.28763 @ 95%CL (1 toyMC)
median expected limit: r < 0.28763 @ 95%CL (1 toyMC)
   68% expected band : 0.28763 < r < 0.28763
   95% expected band : 0.28763 < r < 0.28763
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -785334638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228961 +/- 0.00212341 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.228961 @ 95%CL (1 toyMC)
median expected limit: r < 0.228961 @ 95%CL (1 toyMC)
   68% expected band : 0.228961 < r < 0.228961
   95% expected band : 0.228961 < r < 0.228961
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1692095615
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26474 +/- 0.00319435 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.26474 @ 95%CL (1 toyMC)
median expected limit: r < 0.26474 @ 95%CL (1 toyMC)
   68% expected band : 0.26474 < r < 0.26474
   95% expected band : 0.26474 < r < 0.26474
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1916585286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.215155 +/- 0.00373766 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.215155 @ 95%CL (1 toyMC)
median expected limit: r < 0.215155 @ 95%CL (1 toyMC)
   68% expected band : 0.215155 < r < 0.215155
   95% expected band : 0.215155 < r < 0.215155
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -264978968
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338153 +/- 0.00242693 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.338153 @ 95%CL (1 toyMC)
median expected limit: r < 0.338153 @ 95%CL (1 toyMC)
   68% expected band : 0.338153 < r < 0.338153
   95% expected band : 0.338153 < r < 0.338153
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1032009376.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1127923083.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1161253995.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1172798118.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1252353820.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1289031362.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-131054420.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1349800060.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1387387031.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1438553122.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1457966177.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1539597659.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1566697320.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1588536980.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1618215250.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-16244222.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-162519892.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1773110867.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1795295831.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1895653396.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-191398394.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1919311775.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1936938597.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-2022428245.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-2028149317.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-2042037816.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-2048919698.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-2083961394.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-2087028481.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-224682951.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-238942504.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-264978968.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-277320478.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-306157485.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-356406942.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-361115248.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-473611225.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-491411157.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-499298326.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-521254651.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-534302949.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-651962196.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-748149364.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-753310366.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-769642944.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-785334638.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-799946255.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-879575281.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-921626173.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.-944815386.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.-966040265.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.-972911252.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.-999455946.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1012010710.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1107150788.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1209527725.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1226225419.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1239289545.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1269528031.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1323125466.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1332291073.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1389434062.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1469822125.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1473782279.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1500780862.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1529903484.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1550998652.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.168083666.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1681285265.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1692095615.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1694118152.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1702158226.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1784738569.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1884555284.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1895710614.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.1916585286.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.2037868996.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.2038851989.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.2091606400.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.300181764.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.311297273.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.377960401.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.382967230.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.459406992.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.508034898.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.511019835.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.569950369.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.632262799.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.662457901.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.691032278.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.718781115.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.725096497.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.835544294.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.893731205.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.894868982.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.919979411.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.930645967.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.937306671.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.952555481.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.953416141.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -254978154
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232793 +/- 0.00291271 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.232793 @ 95%CL (1 toyMC)
median expected limit: r < 0.232793 @ 95%CL (1 toyMC)
   68% expected band : 0.232793 < r < 0.232793
   95% expected band : 0.232793 < r < 0.232793
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1252614208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.414279 +/- 0.00184814 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.414279 @ 95%CL (1 toyMC)
median expected limit: r < 0.414279 @ 95%CL (1 toyMC)
   68% expected band : 0.414279 < r < 0.414279
   95% expected band : 0.414279 < r < 0.414279
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 46158052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194402 +/- 0.00287357 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.194402 @ 95%CL (1 toyMC)
median expected limit: r < 0.194402 @ 95%CL (1 toyMC)
   68% expected band : 0.194402 < r < 0.194402
   95% expected band : 0.194402 < r < 0.194402
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -913838817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294938 +/- 0.00258787 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.294938 @ 95%CL (1 toyMC)
median expected limit: r < 0.294938 @ 95%CL (1 toyMC)
   68% expected band : 0.294938 < r < 0.294938
   95% expected band : 0.294938 < r < 0.294938
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 272398824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261715 +/- 0.00270412 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.261715 @ 95%CL (1 toyMC)
median expected limit: r < 0.261715 @ 95%CL (1 toyMC)
   68% expected band : 0.261715 < r < 0.261715
   95% expected band : 0.261715 < r < 0.261715
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -267290909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242404 +/- 0.00241384 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.242404 @ 95%CL (1 toyMC)
median expected limit: r < 0.242404 @ 95%CL (1 toyMC)
   68% expected band : 0.242404 < r < 0.242404
   95% expected band : 0.242404 < r < 0.242404
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -108063299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29797 +/- 0.00234505 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.29797 @ 95%CL (1 toyMC)
median expected limit: r < 0.29797 @ 95%CL (1 toyMC)
   68% expected band : 0.29797 < r < 0.29797
   95% expected band : 0.29797 < r < 0.29797
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -273043879
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.215712 +/- 0.00205004 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.215712 @ 95%CL (1 toyMC)
median expected limit: r < 0.215712 @ 95%CL (1 toyMC)
   68% expected band : 0.215712 < r < 0.215712
   95% expected band : 0.215712 < r < 0.215712
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1377141065
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.299619 +/- 0.00205953 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.299619 @ 95%CL (1 toyMC)
median expected limit: r < 0.299619 @ 95%CL (1 toyMC)
   68% expected band : 0.299619 < r < 0.299619
   95% expected band : 0.299619 < r < 0.299619
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1651400969
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.386134 +/- 0.00251186 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.386134 @ 95%CL (1 toyMC)
median expected limit: r < 0.386134 @ 95%CL (1 toyMC)
   68% expected band : 0.386134 < r < 0.386134
   95% expected band : 0.386134 < r < 0.386134
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1760714855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294801 +/- 0.00190692 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.294801 @ 95%CL (1 toyMC)
median expected limit: r < 0.294801 @ 95%CL (1 toyMC)
   68% expected band : 0.294801 < r < 0.294801
   95% expected band : 0.294801 < r < 0.294801
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -482886792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.416627 +/- 0.00210607 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.416627 @ 95%CL (1 toyMC)
median expected limit: r < 0.416627 @ 95%CL (1 toyMC)
   68% expected band : 0.416627 < r < 0.416627
   95% expected band : 0.416627 < r < 0.416627
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1318317073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216683 +/- 0.00320388 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.216683 @ 95%CL (1 toyMC)
median expected limit: r < 0.216683 @ 95%CL (1 toyMC)
   68% expected band : 0.216683 < r < 0.216683
   95% expected band : 0.216683 < r < 0.216683
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 277101620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189063 +/- 0.00344841 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.189063 @ 95%CL (1 toyMC)
median expected limit: r < 0.189063 @ 95%CL (1 toyMC)
   68% expected band : 0.189063 < r < 0.189063
   95% expected band : 0.189063 < r < 0.189063
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1717536942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.24014 +/- 0.00251345 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.24014 @ 95%CL (1 toyMC)
median expected limit: r < 0.24014 @ 95%CL (1 toyMC)
   68% expected band : 0.24014 < r < 0.24014
   95% expected band : 0.24014 < r < 0.24014
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -407775338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204866 +/- 0.00283328 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.204866 @ 95%CL (1 toyMC)
median expected limit: r < 0.204866 @ 95%CL (1 toyMC)
   68% expected band : 0.204866 < r < 0.204866
   95% expected band : 0.204866 < r < 0.204866
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1113424871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.239081 +/- 0.00272575 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.239081 @ 95%CL (1 toyMC)
median expected limit: r < 0.239081 @ 95%CL (1 toyMC)
   68% expected band : 0.239081 < r < 0.239081
   95% expected band : 0.239081 < r < 0.239081
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1017802212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.435401 +/- 0.00166111 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.435401 @ 95%CL (1 toyMC)
median expected limit: r < 0.435401 @ 95%CL (1 toyMC)
   68% expected band : 0.435401 < r < 0.435401
   95% expected band : 0.435401 < r < 0.435401
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 414916278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216921 +/- 0.00313372 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.216921 @ 95%CL (1 toyMC)
median expected limit: r < 0.216921 @ 95%CL (1 toyMC)
   68% expected band : 0.216921 < r < 0.216921
   95% expected band : 0.216921 < r < 0.216921
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1276467957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247206 +/- 0.0021803 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.247206 @ 95%CL (1 toyMC)
median expected limit: r < 0.247206 @ 95%CL (1 toyMC)
   68% expected band : 0.247206 < r < 0.247206
   95% expected band : 0.247206 < r < 0.247206
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1543334412
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294089 +/- 0.00223879 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.294089 @ 95%CL (1 toyMC)
median expected limit: r < 0.294089 @ 95%CL (1 toyMC)
   68% expected band : 0.294089 < r < 0.294089
   95% expected band : 0.294089 < r < 0.294089
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2029982682
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.27552 +/- 0.00239743 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.27552 @ 95%CL (1 toyMC)
median expected limit: r < 0.27552 @ 95%CL (1 toyMC)
   68% expected band : 0.27552 < r < 0.27552
   95% expected band : 0.27552 < r < 0.27552
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1200487229
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.275699 +/- 0.00262545 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.275699 @ 95%CL (1 toyMC)
median expected limit: r < 0.275699 @ 95%CL (1 toyMC)
   68% expected band : 0.275699 < r < 0.275699
   95% expected band : 0.275699 < r < 0.275699
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 496740581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.540871 +/- 0.00183713 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.540871 @ 95%CL (1 toyMC)
median expected limit: r < 0.540871 @ 95%CL (1 toyMC)
   68% expected band : 0.540871 < r < 0.540871
   95% expected band : 0.540871 < r < 0.540871
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -687763612
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.178912 +/- 0.00338168 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.178912 @ 95%CL (1 toyMC)
median expected limit: r < 0.178912 @ 95%CL (1 toyMC)
   68% expected band : 0.178912 < r < 0.178912
   95% expected band : 0.178912 < r < 0.178912
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -642783511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270685 +/- 0.00294504 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.270685 @ 95%CL (1 toyMC)
median expected limit: r < 0.270685 @ 95%CL (1 toyMC)
   68% expected band : 0.270685 < r < 0.270685
   95% expected band : 0.270685 < r < 0.270685
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2028671565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.177796 +/- 0.00272534 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.177796 @ 95%CL (1 toyMC)
median expected limit: r < 0.177796 @ 95%CL (1 toyMC)
   68% expected band : 0.177796 < r < 0.177796
   95% expected band : 0.177796 < r < 0.177796
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1799402505
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229317 +/- 0.00279736 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.229317 @ 95%CL (1 toyMC)
median expected limit: r < 0.229317 @ 95%CL (1 toyMC)
   68% expected band : 0.229317 < r < 0.229317
   95% expected band : 0.229317 < r < 0.229317
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2103796325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20666 +/- 0.00209524 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.20666 @ 95%CL (1 toyMC)
median expected limit: r < 0.20666 @ 95%CL (1 toyMC)
   68% expected band : 0.20666 < r < 0.20666
   95% expected band : 0.20666 < r < 0.20666
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1120526503
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213111 +/- 0.00250982 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.213111 @ 95%CL (1 toyMC)
median expected limit: r < 0.213111 @ 95%CL (1 toyMC)
   68% expected band : 0.213111 < r < 0.213111
   95% expected band : 0.213111 < r < 0.213111
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 187453797
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.250349 +/- 0.00276297 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.250349 @ 95%CL (1 toyMC)
median expected limit: r < 0.250349 @ 95%CL (1 toyMC)
   68% expected band : 0.250349 < r < 0.250349
   95% expected band : 0.250349 < r < 0.250349
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1095921680
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.191719 +/- 0.00287668 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.191719 @ 95%CL (1 toyMC)
median expected limit: r < 0.191719 @ 95%CL (1 toyMC)
   68% expected band : 0.191719 < r < 0.191719
   95% expected band : 0.191719 < r < 0.191719
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1822591950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.33525 +/- 0.00179233 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.33525 @ 95%CL (1 toyMC)
median expected limit: r < 0.33525 @ 95%CL (1 toyMC)
   68% expected band : 0.33525 < r < 0.33525
   95% expected band : 0.33525 < r < 0.33525
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1186059025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.412064 +/- 0.00204938 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.412064 @ 95%CL (1 toyMC)
median expected limit: r < 0.412064 @ 95%CL (1 toyMC)
   68% expected band : 0.412064 < r < 0.412064
   95% expected band : 0.412064 < r < 0.412064
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1269126433
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.254106 +/- 0.00243886 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.254106 @ 95%CL (1 toyMC)
median expected limit: r < 0.254106 @ 95%CL (1 toyMC)
   68% expected band : 0.254106 < r < 0.254106
   95% expected band : 0.254106 < r < 0.254106
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -171069424
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312803 +/- 0.00219112 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.312803 @ 95%CL (1 toyMC)
median expected limit: r < 0.312803 @ 95%CL (1 toyMC)
   68% expected band : 0.312803 < r < 0.312803
   95% expected band : 0.312803 < r < 0.312803
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -379539657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.369559 +/- 0.00226586 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.369559 @ 95%CL (1 toyMC)
median expected limit: r < 0.369559 @ 95%CL (1 toyMC)
   68% expected band : 0.369559 < r < 0.369559
   95% expected band : 0.369559 < r < 0.369559
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1702952606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.183956 +/- 0.00270589 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.183956 @ 95%CL (1 toyMC)
median expected limit: r < 0.183956 @ 95%CL (1 toyMC)
   68% expected band : 0.183956 < r < 0.183956
   95% expected band : 0.183956 < r < 0.183956
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1946869362
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.21689 +/- 0.00329478 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.21689 @ 95%CL (1 toyMC)
median expected limit: r < 0.21689 @ 95%CL (1 toyMC)
   68% expected band : 0.21689 < r < 0.21689
   95% expected band : 0.21689 < r < 0.21689
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 377868607
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212653 +/- 0.00248016 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.212653 @ 95%CL (1 toyMC)
median expected limit: r < 0.212653 @ 95%CL (1 toyMC)
   68% expected band : 0.212653 < r < 0.212653
   95% expected band : 0.212653 < r < 0.212653
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -37490212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.249725 +/- 0.00187079 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.249725 @ 95%CL (1 toyMC)
median expected limit: r < 0.249725 @ 95%CL (1 toyMC)
   68% expected band : 0.249725 < r < 0.249725
   95% expected band : 0.249725 < r < 0.249725
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 378163707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.24249 +/- 0.00268681 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.24249 @ 95%CL (1 toyMC)
median expected limit: r < 0.24249 @ 95%CL (1 toyMC)
   68% expected band : 0.24249 < r < 0.24249
   95% expected band : 0.24249 < r < 0.24249
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 313536982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210876 +/- 0.00314486 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.210876 @ 95%CL (1 toyMC)
median expected limit: r < 0.210876 @ 95%CL (1 toyMC)
   68% expected band : 0.210876 < r < 0.210876
   95% expected band : 0.210876 < r < 0.210876
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -746061110
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330192 +/- 0.00203191 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.330192 @ 95%CL (1 toyMC)
median expected limit: r < 0.330192 @ 95%CL (1 toyMC)
   68% expected band : 0.330192 < r < 0.330192
   95% expected band : 0.330192 < r < 0.330192
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1295076887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.207338 +/- 0.0026699 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.207338 @ 95%CL (1 toyMC)
median expected limit: r < 0.207338 @ 95%CL (1 toyMC)
   68% expected band : 0.207338 < r < 0.207338
   95% expected band : 0.207338 < r < 0.207338
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2002641745
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235677 +/- 0.00251612 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.235677 @ 95%CL (1 toyMC)
median expected limit: r < 0.235677 @ 95%CL (1 toyMC)
   68% expected band : 0.235677 < r < 0.235677
   95% expected band : 0.235677 < r < 0.235677
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -16921041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.295507 +/- 0.00182053 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.295507 @ 95%CL (1 toyMC)
median expected limit: r < 0.295507 @ 95%CL (1 toyMC)
   68% expected band : 0.295507 < r < 0.295507
   95% expected band : 0.295507 < r < 0.295507
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1458236342
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262453 +/- 0.00259664 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.262453 @ 95%CL (1 toyMC)
median expected limit: r < 0.262453 @ 95%CL (1 toyMC)
   68% expected band : 0.262453 < r < 0.262453
   95% expected band : 0.262453 < r < 0.262453
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1072177235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.390174 +/- 0.00200015 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.390174 @ 95%CL (1 toyMC)
median expected limit: r < 0.390174 @ 95%CL (1 toyMC)
   68% expected band : 0.390174 < r < 0.390174
   95% expected band : 0.390174 < r < 0.390174
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1803522783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221287 +/- 0.00292161 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.221287 @ 95%CL (1 toyMC)
median expected limit: r < 0.221287 @ 95%CL (1 toyMC)
   68% expected band : 0.221287 < r < 0.221287
   95% expected band : 0.221287 < r < 0.221287
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -793516819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.314646 +/- 0.00216045 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.314646 @ 95%CL (1 toyMC)
median expected limit: r < 0.314646 @ 95%CL (1 toyMC)
   68% expected band : 0.314646 < r < 0.314646
   95% expected band : 0.314646 < r < 0.314646
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 85656479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.201776 +/- 0.00233988 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.201776 @ 95%CL (1 toyMC)
median expected limit: r < 0.201776 @ 95%CL (1 toyMC)
   68% expected band : 0.201776 < r < 0.201776
   95% expected band : 0.201776 < r < 0.201776
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -599708165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.397274 +/- 0.0020361 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.397274 @ 95%CL (1 toyMC)
median expected limit: r < 0.397274 @ 95%CL (1 toyMC)
   68% expected band : 0.397274 < r < 0.397274
   95% expected band : 0.397274 < r < 0.397274
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1557440393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338301 +/- 0.00198493 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.338301 @ 95%CL (1 toyMC)
median expected limit: r < 0.338301 @ 95%CL (1 toyMC)
   68% expected band : 0.338301 < r < 0.338301
   95% expected band : 0.338301 < r < 0.338301
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2070898099
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.403222 +/- 0.00187295 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.403222 @ 95%CL (1 toyMC)
median expected limit: r < 0.403222 @ 95%CL (1 toyMC)
   68% expected band : 0.403222 < r < 0.403222
   95% expected band : 0.403222 < r < 0.403222
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 449137093
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.27267 +/- 0.00218009 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.27267 @ 95%CL (1 toyMC)
median expected limit: r < 0.27267 @ 95%CL (1 toyMC)
   68% expected band : 0.27267 < r < 0.27267
   95% expected band : 0.27267 < r < 0.27267
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -369283074
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29596 +/- 0.00299851 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.29596 @ 95%CL (1 toyMC)
median expected limit: r < 0.29596 @ 95%CL (1 toyMC)
   68% expected band : 0.29596 < r < 0.29596
   95% expected band : 0.29596 < r < 0.29596
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 231899700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.233044 +/- 0.00280212 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.233044 @ 95%CL (1 toyMC)
median expected limit: r < 0.233044 @ 95%CL (1 toyMC)
   68% expected band : 0.233044 < r < 0.233044
   95% expected band : 0.233044 < r < 0.233044
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 101678397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.624678 +/- 0.00226 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.624678 @ 95%CL (1 toyMC)
median expected limit: r < 0.624678 @ 95%CL (1 toyMC)
   68% expected band : 0.624678 < r < 0.624678
   95% expected band : 0.624678 < r < 0.624678
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -613692684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.291423 +/- 0.0023574 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.291423 @ 95%CL (1 toyMC)
median expected limit: r < 0.291423 @ 95%CL (1 toyMC)
   68% expected band : 0.291423 < r < 0.291423
   95% expected band : 0.291423 < r < 0.291423
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1012841669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.264223 +/- 0.00207988 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.264223 @ 95%CL (1 toyMC)
median expected limit: r < 0.264223 @ 95%CL (1 toyMC)
   68% expected band : 0.264223 < r < 0.264223
   95% expected band : 0.264223 < r < 0.264223
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1267599568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304175 +/- 0.0023513 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.304175 @ 95%CL (1 toyMC)
median expected limit: r < 0.304175 @ 95%CL (1 toyMC)
   68% expected band : 0.304175 < r < 0.304175
   95% expected band : 0.304175 < r < 0.304175
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 427651434
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261583 +/- 0.00236635 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.261583 @ 95%CL (1 toyMC)
median expected limit: r < 0.261583 @ 95%CL (1 toyMC)
   68% expected band : 0.261583 < r < 0.261583
   95% expected band : 0.261583 < r < 0.261583
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1446271449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229687 +/- 0.00209642 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.229687 @ 95%CL (1 toyMC)
median expected limit: r < 0.229687 @ 95%CL (1 toyMC)
   68% expected band : 0.229687 < r < 0.229687
   95% expected band : 0.229687 < r < 0.229687
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -792102483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240844 +/- 0.00291423 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.240844 @ 95%CL (1 toyMC)
median expected limit: r < 0.240844 @ 95%CL (1 toyMC)
   68% expected band : 0.240844 < r < 0.240844
   95% expected band : 0.240844 < r < 0.240844
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -573359067
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260726 +/- 0.00250938 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.260726 @ 95%CL (1 toyMC)
median expected limit: r < 0.260726 @ 95%CL (1 toyMC)
   68% expected band : 0.260726 < r < 0.260726
   95% expected band : 0.260726 < r < 0.260726
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1147457913
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.254949 +/- 0.00239328 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.254949 @ 95%CL (1 toyMC)
median expected limit: r < 0.254949 @ 95%CL (1 toyMC)
   68% expected band : 0.254949 < r < 0.254949
   95% expected band : 0.254949 < r < 0.254949
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2081247955
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.457392 +/- 0.00234177 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.457392 @ 95%CL (1 toyMC)
median expected limit: r < 0.457392 @ 95%CL (1 toyMC)
   68% expected band : 0.457392 < r < 0.457392
   95% expected band : 0.457392 < r < 0.457392
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1202510309
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.202286 +/- 0.00259842 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.202286 @ 95%CL (1 toyMC)
median expected limit: r < 0.202286 @ 95%CL (1 toyMC)
   68% expected band : 0.202286 < r < 0.202286
   95% expected band : 0.202286 < r < 0.202286
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1340794239
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.358303 +/- 0.0019086 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.358303 @ 95%CL (1 toyMC)
median expected limit: r < 0.358303 @ 95%CL (1 toyMC)
   68% expected band : 0.358303 < r < 0.358303
   95% expected band : 0.358303 < r < 0.358303
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1700483015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261629 +/- 0.00247708 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.261629 @ 95%CL (1 toyMC)
median expected limit: r < 0.261629 @ 95%CL (1 toyMC)
   68% expected band : 0.261629 < r < 0.261629
   95% expected band : 0.261629 < r < 0.261629
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -102833233
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248296 +/- 0.00258683 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.248296 @ 95%CL (1 toyMC)
median expected limit: r < 0.248296 @ 95%CL (1 toyMC)
   68% expected band : 0.248296 < r < 0.248296
   95% expected band : 0.248296 < r < 0.248296
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -752541710
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208603 +/- 0.0025346 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.208603 @ 95%CL (1 toyMC)
median expected limit: r < 0.208603 @ 95%CL (1 toyMC)
   68% expected band : 0.208603 < r < 0.208603
   95% expected band : 0.208603 < r < 0.208603
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 630573119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.376592 +/- 0.00211042 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.376592 @ 95%CL (1 toyMC)
median expected limit: r < 0.376592 @ 95%CL (1 toyMC)
   68% expected band : 0.376592 < r < 0.376592
   95% expected band : 0.376592 < r < 0.376592
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -658775877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330214 +/- 0.00213032 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.330214 @ 95%CL (1 toyMC)
median expected limit: r < 0.330214 @ 95%CL (1 toyMC)
   68% expected band : 0.330214 < r < 0.330214
   95% expected band : 0.330214 < r < 0.330214
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1189250562
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.199974 +/- 0.00288017 @ 95% CL (99 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.199974 @ 95%CL (1 toyMC)
median expected limit: r < 0.199974 @ 95%CL (1 toyMC)
   68% expected band : 0.199974 < r < 0.199974
   95% expected band : 0.199974 < r < 0.199974
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 584983349
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.218732 +/- 0.00251179 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.218732 @ 95%CL (1 toyMC)
median expected limit: r < 0.218732 @ 95%CL (1 toyMC)
   68% expected band : 0.218732 < r < 0.218732
   95% expected band : 0.218732 < r < 0.218732
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 120054684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232141 +/- 0.00286413 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.232141 @ 95%CL (1 toyMC)
median expected limit: r < 0.232141 @ 95%CL (1 toyMC)
   68% expected band : 0.232141 < r < 0.232141
   95% expected band : 0.232141 < r < 0.232141
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1345760734
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.429386 +/- 0.00168589 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.429386 @ 95%CL (1 toyMC)
median expected limit: r < 0.429386 @ 95%CL (1 toyMC)
   68% expected band : 0.429386 < r < 0.429386
   95% expected band : 0.429386 < r < 0.429386
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1331701658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.209453 +/- 0.00284289 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.209453 @ 95%CL (1 toyMC)
median expected limit: r < 0.209453 @ 95%CL (1 toyMC)
   68% expected band : 0.209453 < r < 0.209453
   95% expected band : 0.209453 < r < 0.209453
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 396055894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217822 +/- 0.00270355 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.217822 @ 95%CL (1 toyMC)
median expected limit: r < 0.217822 @ 95%CL (1 toyMC)
   68% expected band : 0.217822 < r < 0.217822
   95% expected band : 0.217822 < r < 0.217822
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 457303131
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251201 +/- 0.00306681 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.251201 @ 95%CL (1 toyMC)
median expected limit: r < 0.251201 @ 95%CL (1 toyMC)
   68% expected band : 0.251201 < r < 0.251201
   95% expected band : 0.251201 < r < 0.251201
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -221036210
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330728 +/- 0.00250103 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.330728 @ 95%CL (1 toyMC)
median expected limit: r < 0.330728 @ 95%CL (1 toyMC)
   68% expected band : 0.330728 < r < 0.330728
   95% expected band : 0.330728 < r < 0.330728
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -940105906
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.505614 +/- 0.00231884 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.505614 @ 95%CL (1 toyMC)
median expected limit: r < 0.505614 @ 95%CL (1 toyMC)
   68% expected band : 0.505614 < r < 0.505614
   95% expected band : 0.505614 < r < 0.505614
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2144447797
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20846 +/- 0.00245884 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.20846 @ 95%CL (1 toyMC)
median expected limit: r < 0.20846 @ 95%CL (1 toyMC)
   68% expected band : 0.20846 < r < 0.20846
   95% expected band : 0.20846 < r < 0.20846
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -803128881
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.27643 +/- 0.00202477 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.27643 @ 95%CL (1 toyMC)
median expected limit: r < 0.27643 @ 95%CL (1 toyMC)
   68% expected band : 0.27643 < r < 0.27643
   95% expected band : 0.27643 < r < 0.27643
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -714408733
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200452 +/- 0.00247241 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.200452 @ 95%CL (1 toyMC)
median expected limit: r < 0.200452 @ 95%CL (1 toyMC)
   68% expected band : 0.200452 < r < 0.200452
   95% expected band : 0.200452 < r < 0.200452
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 795822999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212587 +/- 0.00296695 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.212587 @ 95%CL (1 toyMC)
median expected limit: r < 0.212587 @ 95%CL (1 toyMC)
   68% expected band : 0.212587 < r < 0.212587
   95% expected band : 0.212587 < r < 0.212587
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 110555803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231842 +/- 0.00278733 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.231842 @ 95%CL (1 toyMC)
median expected limit: r < 0.231842 @ 95%CL (1 toyMC)
   68% expected band : 0.231842 < r < 0.231842
   95% expected band : 0.231842 < r < 0.231842
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -336109955
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216056 +/- 0.00261745 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.216056 @ 95%CL (1 toyMC)
median expected limit: r < 0.216056 @ 95%CL (1 toyMC)
   68% expected band : 0.216056 < r < 0.216056
   95% expected band : 0.216056 < r < 0.216056
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 590279924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.395191 +/- 0.00166547 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.395191 @ 95%CL (1 toyMC)
median expected limit: r < 0.395191 @ 95%CL (1 toyMC)
   68% expected band : 0.395191 < r < 0.395191
   95% expected band : 0.395191 < r < 0.395191
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2130971427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338422 +/- 0.00209396 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.338422 @ 95%CL (1 toyMC)
median expected limit: r < 0.338422 @ 95%CL (1 toyMC)
   68% expected band : 0.338422 < r < 0.338422
   95% expected band : 0.338422 < r < 0.338422
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1170976470
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.347421 +/- 0.00225963 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.347421 @ 95%CL (1 toyMC)
median expected limit: r < 0.347421 @ 95%CL (1 toyMC)
   68% expected band : 0.347421 < r < 0.347421
   95% expected band : 0.347421 < r < 0.347421
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 727343007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.182954 +/- 0.00311626 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.182954 @ 95%CL (1 toyMC)
median expected limit: r < 0.182954 @ 95%CL (1 toyMC)
   68% expected band : 0.182954 < r < 0.182954
   95% expected band : 0.182954 < r < 0.182954
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 432287927
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212829 +/- 0.00255303 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.212829 @ 95%CL (1 toyMC)
median expected limit: r < 0.212829 @ 95%CL (1 toyMC)
   68% expected band : 0.212829 < r < 0.212829
   95% expected band : 0.212829 < r < 0.212829
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 106853384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186573 +/- 0.00389519 @ 95% CL (99 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.186573 @ 95%CL (1 toyMC)
median expected limit: r < 0.186573 @ 95%CL (1 toyMC)
   68% expected band : 0.186573 < r < 0.186573
   95% expected band : 0.186573 < r < 0.186573
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1017824161
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.320954 +/- 0.00189906 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.320954 @ 95%CL (1 toyMC)
median expected limit: r < 0.320954 @ 95%CL (1 toyMC)
   68% expected band : 0.320954 < r < 0.320954
   95% expected band : 0.320954 < r < 0.320954
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1197854579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.222284 +/- 0.00275247 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.222284 @ 95%CL (1 toyMC)
median expected limit: r < 0.222284 @ 95%CL (1 toyMC)
   68% expected band : 0.222284 < r < 0.222284
   95% expected band : 0.222284 < r < 0.222284
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1600104591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.273177 +/- 0.002653 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.273177 @ 95%CL (1 toyMC)
median expected limit: r < 0.273177 @ 95%CL (1 toyMC)
   68% expected band : 0.273177 < r < 0.273177
   95% expected band : 0.273177 < r < 0.273177
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1613901437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.196749 +/- 0.00278894 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.196749 @ 95%CL (1 toyMC)
median expected limit: r < 0.196749 @ 95%CL (1 toyMC)
   68% expected band : 0.196749 < r < 0.196749
   95% expected band : 0.196749 < r < 0.196749
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1017802212.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-102833233.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-108063299.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1095921680.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1113424871.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1170976470.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1189250562.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1200487229.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1202510309.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1252614208.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1267599568.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1269126433.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1276467957.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1340794239.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1345760734.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1377141065.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1446271449.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1557440393.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-16921041.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1700483015.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-171069424.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1717536942.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1799402505.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-1946869362.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-2002641745.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-2028671565.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-2070898099.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-2130971427.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-221036210.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-254978154.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-267290909.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-273043879.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-336109955.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-369283074.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-37490212.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-379539657.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-407775338.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-482886792.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-573359067.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-599708165.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-613692684.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-642783511.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-658775877.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-687763612.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-714408733.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-746061110.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-752541710.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-792102483.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-793516819.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.-803128881.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.-913838817.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.-940105906.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1012841669.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.101678397.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1017824161.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.106853384.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1072177235.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.110555803.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1120526503.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1147457913.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1186059025.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1197854579.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.120054684.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1295076887.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1318317073.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1331701658.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1458236342.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1543334412.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1600104591.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1613901437.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1651400969.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1702952606.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1760714855.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1803522783.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1822591950.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.187453797.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.2029982682.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.2081247955.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.2103796325.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.2144447797.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.231899700.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.272398824.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.277101620.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.313536982.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.377868607.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.378163707.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.396055894.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.414916278.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.427651434.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.432287927.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.449137093.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.457303131.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.46158052.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.496740581.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.584983349.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.590279924.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.630573119.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.727343007.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.795822999.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.85656479.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1767838216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285505 +/- 0.00238443 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.285505 @ 95%CL (1 toyMC)
median expected limit: r < 0.285505 @ 95%CL (1 toyMC)
   68% expected band : 0.285505 < r < 0.285505
   95% expected band : 0.285505 < r < 0.285505
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1756999320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.415763 +/- 0.00200834 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.415763 @ 95%CL (1 toyMC)
median expected limit: r < 0.415763 @ 95%CL (1 toyMC)
   68% expected band : 0.415763 < r < 0.415763
   95% expected band : 0.415763 < r < 0.415763
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -277860113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39304 +/- 0.00218164 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.39304 @ 95%CL (1 toyMC)
median expected limit: r < 0.39304 @ 95%CL (1 toyMC)
   68% expected band : 0.39304 < r < 0.39304
   95% expected band : 0.39304 < r < 0.39304
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1702537083
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261856 +/- 0.00259582 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.261856 @ 95%CL (1 toyMC)
median expected limit: r < 0.261856 @ 95%CL (1 toyMC)
   68% expected band : 0.261856 < r < 0.261856
   95% expected band : 0.261856 < r < 0.261856
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2115283249
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20819 +/- 0.00264839 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.20819 @ 95%CL (1 toyMC)
median expected limit: r < 0.20819 @ 95%CL (1 toyMC)
   68% expected band : 0.20819 < r < 0.20819
   95% expected band : 0.20819 < r < 0.20819
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1913483376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.239535 +/- 0.0028891 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.239535 @ 95%CL (1 toyMC)
median expected limit: r < 0.239535 @ 95%CL (1 toyMC)
   68% expected band : 0.239535 < r < 0.239535
   95% expected band : 0.239535 < r < 0.239535
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1102173587
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.45533 +/- 0.002467 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.45533 @ 95%CL (1 toyMC)
median expected limit: r < 0.45533 @ 95%CL (1 toyMC)
   68% expected band : 0.45533 < r < 0.45533
   95% expected band : 0.45533 < r < 0.45533
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 22600321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.297892 +/- 0.00206321 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.297892 @ 95%CL (1 toyMC)
median expected limit: r < 0.297892 @ 95%CL (1 toyMC)
   68% expected band : 0.297892 < r < 0.297892
   95% expected band : 0.297892 < r < 0.297892
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1143622954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238937 +/- 0.00307506 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.238937 @ 95%CL (1 toyMC)
median expected limit: r < 0.238937 @ 95%CL (1 toyMC)
   68% expected band : 0.238937 < r < 0.238937
   95% expected band : 0.238937 < r < 0.238937
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 853143668
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224695 +/- 0.00293431 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.224695 @ 95%CL (1 toyMC)
median expected limit: r < 0.224695 @ 95%CL (1 toyMC)
   68% expected band : 0.224695 < r < 0.224695
   95% expected band : 0.224695 < r < 0.224695
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -182756554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.398615 +/- 0.00188438 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.398615 @ 95%CL (1 toyMC)
median expected limit: r < 0.398615 @ 95%CL (1 toyMC)
   68% expected band : 0.398615 < r < 0.398615
   95% expected band : 0.398615 < r < 0.398615
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -198797284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.227346 +/- 0.00328299 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.227346 @ 95%CL (1 toyMC)
median expected limit: r < 0.227346 @ 95%CL (1 toyMC)
   68% expected band : 0.227346 < r < 0.227346
   95% expected band : 0.227346 < r < 0.227346
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -376054495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338512 +/- 0.00179097 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.338512 @ 95%CL (1 toyMC)
median expected limit: r < 0.338512 @ 95%CL (1 toyMC)
   68% expected band : 0.338512 < r < 0.338512
   95% expected band : 0.338512 < r < 0.338512
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 572922230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.18413 +/- 0.00332842 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.18413 @ 95%CL (1 toyMC)
median expected limit: r < 0.18413 @ 95%CL (1 toyMC)
   68% expected band : 0.18413 < r < 0.18413
   95% expected band : 0.18413 < r < 0.18413
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1154297300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226367 +/- 0.00269323 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.226367 @ 95%CL (1 toyMC)
median expected limit: r < 0.226367 @ 95%CL (1 toyMC)
   68% expected band : 0.226367 < r < 0.226367
   95% expected band : 0.226367 < r < 0.226367
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1546224446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.295214 +/- 0.00213798 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.295214 @ 95%CL (1 toyMC)
median expected limit: r < 0.295214 @ 95%CL (1 toyMC)
   68% expected band : 0.295214 < r < 0.295214
   95% expected band : 0.295214 < r < 0.295214
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1931810088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213804 +/- 0.00340924 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.213804 @ 95%CL (1 toyMC)
median expected limit: r < 0.213804 @ 95%CL (1 toyMC)
   68% expected band : 0.213804 < r < 0.213804
   95% expected band : 0.213804 < r < 0.213804
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1097335389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224699 +/- 0.00286619 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.224699 @ 95%CL (1 toyMC)
median expected limit: r < 0.224699 @ 95%CL (1 toyMC)
   68% expected band : 0.224699 < r < 0.224699
   95% expected band : 0.224699 < r < 0.224699
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 600511136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.363201 +/- 0.00180888 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.363201 @ 95%CL (1 toyMC)
median expected limit: r < 0.363201 @ 95%CL (1 toyMC)
   68% expected band : 0.363201 < r < 0.363201
   95% expected band : 0.363201 < r < 0.363201
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1194215036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.266842 +/- 0.00276426 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.266842 @ 95%CL (1 toyMC)
median expected limit: r < 0.266842 @ 95%CL (1 toyMC)
   68% expected band : 0.266842 < r < 0.266842
   95% expected band : 0.266842 < r < 0.266842
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1581968317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248729 +/- 0.00252966 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.248729 @ 95%CL (1 toyMC)
median expected limit: r < 0.248729 @ 95%CL (1 toyMC)
   68% expected band : 0.248729 < r < 0.248729
   95% expected band : 0.248729 < r < 0.248729
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1664154355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.271979 +/- 0.00241359 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.271979 @ 95%CL (1 toyMC)
median expected limit: r < 0.271979 @ 95%CL (1 toyMC)
   68% expected band : 0.271979 < r < 0.271979
   95% expected band : 0.271979 < r < 0.271979
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 297999279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228753 +/- 0.00241378 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.228753 @ 95%CL (1 toyMC)
median expected limit: r < 0.228753 @ 95%CL (1 toyMC)
   68% expected band : 0.228753 < r < 0.228753
   95% expected band : 0.228753 < r < 0.228753
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1500633638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.456009 +/- 0.00214821 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.456009 @ 95%CL (1 toyMC)
median expected limit: r < 0.456009 @ 95%CL (1 toyMC)
   68% expected band : 0.456009 < r < 0.456009
   95% expected band : 0.456009 < r < 0.456009
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -565602511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200365 +/- 0.0027323 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.200365 @ 95%CL (1 toyMC)
median expected limit: r < 0.200365 @ 95%CL (1 toyMC)
   68% expected band : 0.200365 < r < 0.200365
   95% expected band : 0.200365 < r < 0.200365
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2116937022
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255183 +/- 0.00252399 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.255183 @ 95%CL (1 toyMC)
median expected limit: r < 0.255183 @ 95%CL (1 toyMC)
   68% expected band : 0.255183 < r < 0.255183
   95% expected band : 0.255183 < r < 0.255183
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 841097228
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.196958 +/- 0.00321992 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.196958 @ 95%CL (1 toyMC)
median expected limit: r < 0.196958 @ 95%CL (1 toyMC)
   68% expected band : 0.196958 < r < 0.196958
   95% expected band : 0.196958 < r < 0.196958
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1088373791
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.276619 +/- 0.00257479 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.276619 @ 95%CL (1 toyMC)
median expected limit: r < 0.276619 @ 95%CL (1 toyMC)
   68% expected band : 0.276619 < r < 0.276619
   95% expected band : 0.276619 < r < 0.276619
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -715184695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.297421 +/- 0.0017318 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.297421 @ 95%CL (1 toyMC)
median expected limit: r < 0.297421 @ 95%CL (1 toyMC)
   68% expected band : 0.297421 < r < 0.297421
   95% expected band : 0.297421 < r < 0.297421
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1952415695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.283325 +/- 0.00215431 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.283325 @ 95%CL (1 toyMC)
median expected limit: r < 0.283325 @ 95%CL (1 toyMC)
   68% expected band : 0.283325 < r < 0.283325
   95% expected band : 0.283325 < r < 0.283325
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1005694241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.447821 +/- 0.00206956 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.447821 @ 95%CL (1 toyMC)
median expected limit: r < 0.447821 @ 95%CL (1 toyMC)
   68% expected band : 0.447821 < r < 0.447821
   95% expected band : 0.447821 < r < 0.447821
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -185121745
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.295724 +/- 0.00211378 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.295724 @ 95%CL (1 toyMC)
median expected limit: r < 0.295724 @ 95%CL (1 toyMC)
   68% expected band : 0.295724 < r < 0.295724
   95% expected band : 0.295724 < r < 0.295724
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1542335993
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195936 +/- 0.00334452 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.195936 @ 95%CL (1 toyMC)
median expected limit: r < 0.195936 @ 95%CL (1 toyMC)
   68% expected band : 0.195936 < r < 0.195936
   95% expected band : 0.195936 < r < 0.195936
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2008163046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335172 +/- 0.00139779 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.335172 @ 95%CL (1 toyMC)
median expected limit: r < 0.335172 @ 95%CL (1 toyMC)
   68% expected band : 0.335172 < r < 0.335172
   95% expected band : 0.335172 < r < 0.335172
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1580124689
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313121 +/- 0.00189549 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.313121 @ 95%CL (1 toyMC)
median expected limit: r < 0.313121 @ 95%CL (1 toyMC)
   68% expected band : 0.313121 < r < 0.313121
   95% expected band : 0.313121 < r < 0.313121
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -582529930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.202602 +/- 0.00272992 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.202602 @ 95%CL (1 toyMC)
median expected limit: r < 0.202602 @ 95%CL (1 toyMC)
   68% expected band : 0.202602 < r < 0.202602
   95% expected band : 0.202602 < r < 0.202602
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1281176918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.565007 +/- 0.00199597 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.565007 @ 95%CL (1 toyMC)
median expected limit: r < 0.565007 @ 95%CL (1 toyMC)
   68% expected band : 0.565007 < r < 0.565007
   95% expected band : 0.565007 < r < 0.565007
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -131100375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.223243 +/- 0.00223252 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.223243 @ 95%CL (1 toyMC)
median expected limit: r < 0.223243 @ 95%CL (1 toyMC)
   68% expected band : 0.223243 < r < 0.223243
   95% expected band : 0.223243 < r < 0.223243
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1734115985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.2653 +/- 0.00274153 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.2653 @ 95%CL (1 toyMC)
median expected limit: r < 0.2653 @ 95%CL (1 toyMC)
   68% expected band : 0.2653 < r < 0.2653
   95% expected band : 0.2653 < r < 0.2653
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1257052715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.198419 +/- 0.00283539 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.198419 @ 95%CL (1 toyMC)
median expected limit: r < 0.198419 @ 95%CL (1 toyMC)
   68% expected band : 0.198419 < r < 0.198419
   95% expected band : 0.198419 < r < 0.198419
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1529441900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.227364 +/- 0.00338424 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.227364 @ 95%CL (1 toyMC)
median expected limit: r < 0.227364 @ 95%CL (1 toyMC)
   68% expected band : 0.227364 < r < 0.227364
   95% expected band : 0.227364 < r < 0.227364
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -860874998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.458491 +/- 0.00281154 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.458491 @ 95%CL (1 toyMC)
median expected limit: r < 0.458491 @ 95%CL (1 toyMC)
   68% expected band : 0.458491 < r < 0.458491
   95% expected band : 0.458491 < r < 0.458491
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -370807107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.421006 +/- 0.0022481 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.421006 @ 95%CL (1 toyMC)
median expected limit: r < 0.421006 @ 95%CL (1 toyMC)
   68% expected band : 0.421006 < r < 0.421006
   95% expected band : 0.421006 < r < 0.421006
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -945119978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.364509 +/- 0.00245286 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.364509 @ 95%CL (1 toyMC)
median expected limit: r < 0.364509 @ 95%CL (1 toyMC)
   68% expected band : 0.364509 < r < 0.364509
   95% expected band : 0.364509 < r < 0.364509
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1928487544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281897 +/- 0.00226731 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.281897 @ 95%CL (1 toyMC)
median expected limit: r < 0.281897 @ 95%CL (1 toyMC)
   68% expected band : 0.281897 < r < 0.281897
   95% expected band : 0.281897 < r < 0.281897
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -229401787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312863 +/- 0.00219385 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.312863 @ 95%CL (1 toyMC)
median expected limit: r < 0.312863 @ 95%CL (1 toyMC)
   68% expected band : 0.312863 < r < 0.312863
   95% expected band : 0.312863 < r < 0.312863
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -985945436
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.252479 +/- 0.00291602 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.252479 @ 95%CL (1 toyMC)
median expected limit: r < 0.252479 @ 95%CL (1 toyMC)
   68% expected band : 0.252479 < r < 0.252479
   95% expected band : 0.252479 < r < 0.252479
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1313446165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.390873 +/- 0.00223323 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.390873 @ 95%CL (1 toyMC)
median expected limit: r < 0.390873 @ 95%CL (1 toyMC)
   68% expected band : 0.390873 < r < 0.390873
   95% expected band : 0.390873 < r < 0.390873
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 870226734
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.218074 +/- 0.00283425 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.218074 @ 95%CL (1 toyMC)
median expected limit: r < 0.218074 @ 95%CL (1 toyMC)
   68% expected band : 0.218074 < r < 0.218074
   95% expected band : 0.218074 < r < 0.218074
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -218874529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.218212 +/- 0.00295953 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.218212 @ 95%CL (1 toyMC)
median expected limit: r < 0.218212 @ 95%CL (1 toyMC)
   68% expected band : 0.218212 < r < 0.218212
   95% expected band : 0.218212 < r < 0.218212
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 37007010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.458276 +/- 0.00201627 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.458276 @ 95%CL (1 toyMC)
median expected limit: r < 0.458276 @ 95%CL (1 toyMC)
   68% expected band : 0.458276 < r < 0.458276
   95% expected band : 0.458276 < r < 0.458276
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1844303183
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338876 +/- 0.00296098 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.338876 @ 95%CL (1 toyMC)
median expected limit: r < 0.338876 @ 95%CL (1 toyMC)
   68% expected band : 0.338876 < r < 0.338876
   95% expected band : 0.338876 < r < 0.338876
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1514627793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.274435 +/- 0.00250701 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.274435 @ 95%CL (1 toyMC)
median expected limit: r < 0.274435 @ 95%CL (1 toyMC)
   68% expected band : 0.274435 < r < 0.274435
   95% expected band : 0.274435 < r < 0.274435
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1022943708
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294309 +/- 0.00265993 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.294309 @ 95%CL (1 toyMC)
median expected limit: r < 0.294309 @ 95%CL (1 toyMC)
   68% expected band : 0.294309 < r < 0.294309
   95% expected band : 0.294309 < r < 0.294309
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 842566959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.349808 +/- 0.00218776 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.349808 @ 95%CL (1 toyMC)
median expected limit: r < 0.349808 @ 95%CL (1 toyMC)
   68% expected band : 0.349808 < r < 0.349808
   95% expected band : 0.349808 < r < 0.349808
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1545584077
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.543743 +/- 0.00171874 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.543743 @ 95%CL (1 toyMC)
median expected limit: r < 0.543743 @ 95%CL (1 toyMC)
   68% expected band : 0.543743 < r < 0.543743
   95% expected band : 0.543743 < r < 0.543743
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 640087519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325512 +/- 0.00250154 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.325512 @ 95%CL (1 toyMC)
median expected limit: r < 0.325512 @ 95%CL (1 toyMC)
   68% expected band : 0.325512 < r < 0.325512
   95% expected band : 0.325512 < r < 0.325512
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1207084716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.225227 +/- 0.0033822 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.225227 @ 95%CL (1 toyMC)
median expected limit: r < 0.225227 @ 95%CL (1 toyMC)
   68% expected band : 0.225227 < r < 0.225227
   95% expected band : 0.225227 < r < 0.225227
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1254611328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.391434 +/- 0.00187723 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.391434 @ 95%CL (1 toyMC)
median expected limit: r < 0.391434 @ 95%CL (1 toyMC)
   68% expected band : 0.391434 < r < 0.391434
   95% expected band : 0.391434 < r < 0.391434
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1667923987
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.371751 +/- 0.00201608 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.371751 @ 95%CL (1 toyMC)
median expected limit: r < 0.371751 @ 95%CL (1 toyMC)
   68% expected band : 0.371751 < r < 0.371751
   95% expected band : 0.371751 < r < 0.371751
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1354062232
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.21243 +/- 0.00295401 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.21243 @ 95%CL (1 toyMC)
median expected limit: r < 0.21243 @ 95%CL (1 toyMC)
   68% expected band : 0.21243 < r < 0.21243
   95% expected band : 0.21243 < r < 0.21243
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1700224492
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208984 +/- 0.00319542 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.208984 @ 95%CL (1 toyMC)
median expected limit: r < 0.208984 @ 95%CL (1 toyMC)
   68% expected band : 0.208984 < r < 0.208984
   95% expected band : 0.208984 < r < 0.208984
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1696869957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.241103 +/- 0.00251007 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.241103 @ 95%CL (1 toyMC)
median expected limit: r < 0.241103 @ 95%CL (1 toyMC)
   68% expected band : 0.241103 < r < 0.241103
   95% expected band : 0.241103 < r < 0.241103
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2078502659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393753 +/- 0.00261105 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.393753 @ 95%CL (1 toyMC)
median expected limit: r < 0.393753 @ 95%CL (1 toyMC)
   68% expected band : 0.393753 < r < 0.393753
   95% expected band : 0.393753 < r < 0.393753
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 35527207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216983 +/- 0.00240409 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.216983 @ 95%CL (1 toyMC)
median expected limit: r < 0.216983 @ 95%CL (1 toyMC)
   68% expected band : 0.216983 < r < 0.216983
   95% expected band : 0.216983 < r < 0.216983
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 176892134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228873 +/- 0.00266717 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.228873 @ 95%CL (1 toyMC)
median expected limit: r < 0.228873 @ 95%CL (1 toyMC)
   68% expected band : 0.228873 < r < 0.228873
   95% expected band : 0.228873 < r < 0.228873
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -516710512
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22032 +/- 0.00260731 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.22032 @ 95%CL (1 toyMC)
median expected limit: r < 0.22032 @ 95%CL (1 toyMC)
   68% expected band : 0.22032 < r < 0.22032
   95% expected band : 0.22032 < r < 0.22032
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1749007922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200381 +/- 0.00298765 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.200381 @ 95%CL (1 toyMC)
median expected limit: r < 0.200381 @ 95%CL (1 toyMC)
   68% expected band : 0.200381 < r < 0.200381
   95% expected band : 0.200381 < r < 0.200381
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 796722605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.218341 +/- 0.00275598 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.218341 @ 95%CL (1 toyMC)
median expected limit: r < 0.218341 @ 95%CL (1 toyMC)
   68% expected band : 0.218341 < r < 0.218341
   95% expected band : 0.218341 < r < 0.218341
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1545541110
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.187427 +/- 0.00300591 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.187427 @ 95%CL (1 toyMC)
median expected limit: r < 0.187427 @ 95%CL (1 toyMC)
   68% expected band : 0.187427 < r < 0.187427
   95% expected band : 0.187427 < r < 0.187427
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1256546299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.496108 +/- 0.00206952 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.496108 @ 95%CL (1 toyMC)
median expected limit: r < 0.496108 @ 95%CL (1 toyMC)
   68% expected band : 0.496108 < r < 0.496108
   95% expected band : 0.496108 < r < 0.496108
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 864594387
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.201646 +/- 0.00345922 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.201646 @ 95%CL (1 toyMC)
median expected limit: r < 0.201646 @ 95%CL (1 toyMC)
   68% expected band : 0.201646 < r < 0.201646
   95% expected band : 0.201646 < r < 0.201646
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -819404643
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26066 +/- 0.00260973 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.26066 @ 95%CL (1 toyMC)
median expected limit: r < 0.26066 @ 95%CL (1 toyMC)
   68% expected band : 0.26066 < r < 0.26066
   95% expected band : 0.26066 < r < 0.26066
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 230693145
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.311748 +/- 0.00215103 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.311748 @ 95%CL (1 toyMC)
median expected limit: r < 0.311748 @ 95%CL (1 toyMC)
   68% expected band : 0.311748 < r < 0.311748
   95% expected band : 0.311748 < r < 0.311748
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1696128485
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204464 +/- 0.00317045 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.204464 @ 95%CL (1 toyMC)
median expected limit: r < 0.204464 @ 95%CL (1 toyMC)
   68% expected band : 0.204464 < r < 0.204464
   95% expected band : 0.204464 < r < 0.204464
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1662479609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217238 +/- 0.00210352 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.217238 @ 95%CL (1 toyMC)
median expected limit: r < 0.217238 @ 95%CL (1 toyMC)
   68% expected band : 0.217238 < r < 0.217238
   95% expected band : 0.217238 < r < 0.217238
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1583209913
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.441846 +/- 0.00194173 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.441846 @ 95%CL (1 toyMC)
median expected limit: r < 0.441846 @ 95%CL (1 toyMC)
   68% expected band : 0.441846 < r < 0.441846
   95% expected band : 0.441846 < r < 0.441846
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -123153748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.2214 +/- 0.00233672 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.2214 @ 95%CL (1 toyMC)
median expected limit: r < 0.2214 @ 95%CL (1 toyMC)
   68% expected band : 0.2214 < r < 0.2214
   95% expected band : 0.2214 < r < 0.2214
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 257324149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.353295 +/- 0.00247195 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.353295 @ 95%CL (1 toyMC)
median expected limit: r < 0.353295 @ 95%CL (1 toyMC)
   68% expected band : 0.353295 < r < 0.353295
   95% expected band : 0.353295 < r < 0.353295
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -221535300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237861 +/- 0.0022364 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.237861 @ 95%CL (1 toyMC)
median expected limit: r < 0.237861 @ 95%CL (1 toyMC)
   68% expected band : 0.237861 < r < 0.237861
   95% expected band : 0.237861 < r < 0.237861
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1580967388
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.357359 +/- 0.00204686 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.357359 @ 95%CL (1 toyMC)
median expected limit: r < 0.357359 @ 95%CL (1 toyMC)
   68% expected band : 0.357359 < r < 0.357359
   95% expected band : 0.357359 < r < 0.357359
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1887737564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216179 +/- 0.0029989 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.216179 @ 95%CL (1 toyMC)
median expected limit: r < 0.216179 @ 95%CL (1 toyMC)
   68% expected band : 0.216179 < r < 0.216179
   95% expected band : 0.216179 < r < 0.216179
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1822380930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.227303 +/- 0.00270929 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.227303 @ 95%CL (1 toyMC)
median expected limit: r < 0.227303 @ 95%CL (1 toyMC)
   68% expected band : 0.227303 < r < 0.227303
   95% expected band : 0.227303 < r < 0.227303
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1132865244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.299104 +/- 0.00283744 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.299104 @ 95%CL (1 toyMC)
median expected limit: r < 0.299104 @ 95%CL (1 toyMC)
   68% expected band : 0.299104 < r < 0.299104
   95% expected band : 0.299104 < r < 0.299104
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 395437215
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.271483 +/- 0.00280953 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.271483 @ 95%CL (1 toyMC)
median expected limit: r < 0.271483 @ 95%CL (1 toyMC)
   68% expected band : 0.271483 < r < 0.271483
   95% expected band : 0.271483 < r < 0.271483
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 328378460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.191444 +/- 0.00256809 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.191444 @ 95%CL (1 toyMC)
median expected limit: r < 0.191444 @ 95%CL (1 toyMC)
   68% expected band : 0.191444 < r < 0.191444
   95% expected band : 0.191444 < r < 0.191444
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1108802039
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236105 +/- 0.00216107 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.236105 @ 95%CL (1 toyMC)
median expected limit: r < 0.236105 @ 95%CL (1 toyMC)
   68% expected band : 0.236105 < r < 0.236105
   95% expected band : 0.236105 < r < 0.236105
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 943245852
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.27362 +/- 0.00317835 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.27362 @ 95%CL (1 toyMC)
median expected limit: r < 0.27362 @ 95%CL (1 toyMC)
   68% expected band : 0.27362 < r < 0.27362
   95% expected band : 0.27362 < r < 0.27362
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 412964453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286024 +/- 0.00210407 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.286024 @ 95%CL (1 toyMC)
median expected limit: r < 0.286024 @ 95%CL (1 toyMC)
   68% expected band : 0.286024 < r < 0.286024
   95% expected band : 0.286024 < r < 0.286024
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 234754897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.481874 +/- 0.00180389 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.481874 @ 95%CL (1 toyMC)
median expected limit: r < 0.481874 @ 95%CL (1 toyMC)
   68% expected band : 0.481874 < r < 0.481874
   95% expected band : 0.481874 < r < 0.481874
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1962547448
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.188165 +/- 0.00328146 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.188165 @ 95%CL (1 toyMC)
median expected limit: r < 0.188165 @ 95%CL (1 toyMC)
   68% expected band : 0.188165 < r < 0.188165
   95% expected band : 0.188165 < r < 0.188165
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 937429346
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.1901 +/- 0.00334516 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.1901 @ 95%CL (1 toyMC)
median expected limit: r < 0.1901 @ 95%CL (1 toyMC)
   68% expected band : 0.1901 < r < 0.1901
   95% expected band : 0.1901 < r < 0.1901
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 954776275
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216244 +/- 0.00292532 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.216244 @ 95%CL (1 toyMC)
median expected limit: r < 0.216244 @ 95%CL (1 toyMC)
   68% expected band : 0.216244 < r < 0.216244
   95% expected band : 0.216244 < r < 0.216244
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1064634687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.239213 +/- 0.00312846 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.239213 @ 95%CL (1 toyMC)
median expected limit: r < 0.239213 @ 95%CL (1 toyMC)
   68% expected band : 0.239213 < r < 0.239213
   95% expected band : 0.239213 < r < 0.239213
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 113742640
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.252478 +/- 0.00279882 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.252478 @ 95%CL (1 toyMC)
median expected limit: r < 0.252478 @ 95%CL (1 toyMC)
   68% expected band : 0.252478 < r < 0.252478
   95% expected band : 0.252478 < r < 0.252478
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 388867395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.187118 +/- 0.00302237 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.187118 @ 95%CL (1 toyMC)
median expected limit: r < 0.187118 @ 95%CL (1 toyMC)
   68% expected band : 0.187118 < r < 0.187118
   95% expected band : 0.187118 < r < 0.187118
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1405374839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.279526 +/- 0.00249522 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.279526 @ 95%CL (1 toyMC)
median expected limit: r < 0.279526 @ 95%CL (1 toyMC)
   68% expected band : 0.279526 < r < 0.279526
   95% expected band : 0.279526 < r < 0.279526
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 124050600
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294564 +/- 0.00215545 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.294564 @ 95%CL (1 toyMC)
median expected limit: r < 0.294564 @ 95%CL (1 toyMC)
   68% expected band : 0.294564 < r < 0.294564
   95% expected band : 0.294564 < r < 0.294564
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 694672177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260831 +/- 0.00245363 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.260831 @ 95%CL (1 toyMC)
median expected limit: r < 0.260831 @ 95%CL (1 toyMC)
   68% expected band : 0.260831 < r < 0.260831
   95% expected band : 0.260831 < r < 0.260831
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1173633754
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.258828 +/- 0.00271068 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.258828 @ 95%CL (1 toyMC)
median expected limit: r < 0.258828 @ 95%CL (1 toyMC)
   68% expected band : 0.258828 < r < 0.258828
   95% expected band : 0.258828 < r < 0.258828
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1005694241.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1064634687.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1102173587.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1143622954.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1154297300.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1207084716.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-123153748.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1256546299.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1281176918.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-131100375.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1514627793.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1545584077.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1546224446.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1580124689.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1581968317.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1664154355.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1696128485.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1700224492.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1734115985.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1749007922.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1756999320.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1767838216.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-182756554.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-1844303183.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-185121745.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1887737564.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-1952415695.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-198797284.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-2078502659.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-2115283249.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-218874529.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-221535300.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-229401787.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-277860113.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-370807107.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-376054495.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-516710512.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-565602511.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-582529930.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-715184695.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-819404643.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-860874998.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-945119978.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-985945436.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.1022943708.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.1088373791.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.1097335389.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.1108802039.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.1132865244.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.113742640.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.1173633754.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.1194215036.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.124050600.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1254611328.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1257052715.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1313446165.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1354062232.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1405374839.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1500633638.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1529441900.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1542335993.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1545541110.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1580967388.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1583209913.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1662479609.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1667923987.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1696869957.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1702537083.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.176892134.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1822380930.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1913483376.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1928487544.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1931810088.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1962547448.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.2008163046.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.2116937022.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.22600321.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.230693145.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.234754897.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.257324149.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.297999279.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.328378460.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.35527207.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.37007010.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.388867395.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.395437215.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.412964453.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.572922230.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.600511136.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.640087519.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.694672177.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.796722605.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.841097228.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.842566959.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.853143668.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.864594387.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.870226734.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.937429346.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.943245852.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.954776275.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2129704256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229082 +/- 0.00290311 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.229082 @ 95%CL (1 toyMC)
median expected limit: r < 0.229082 @ 95%CL (1 toyMC)
   68% expected band : 0.229082 < r < 0.229082
   95% expected band : 0.229082 < r < 0.229082
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2128736226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.222565 +/- 0.00288887 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.222565 @ 95%CL (1 toyMC)
median expected limit: r < 0.222565 @ 95%CL (1 toyMC)
   68% expected band : 0.222565 < r < 0.222565
   95% expected band : 0.222565 < r < 0.222565
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -61736783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.201666 +/- 0.0028881 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.201666 @ 95%CL (1 toyMC)
median expected limit: r < 0.201666 @ 95%CL (1 toyMC)
   68% expected band : 0.201666 < r < 0.201666
   95% expected band : 0.201666 < r < 0.201666
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1403937896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.431341 +/- 0.00188309 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.431341 @ 95%CL (1 toyMC)
median expected limit: r < 0.431341 @ 95%CL (1 toyMC)
   68% expected band : 0.431341 < r < 0.431341
   95% expected band : 0.431341 < r < 0.431341
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 90504725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238574 +/- 0.00247616 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.238574 @ 95%CL (1 toyMC)
median expected limit: r < 0.238574 @ 95%CL (1 toyMC)
   68% expected band : 0.238574 < r < 0.238574
   95% expected band : 0.238574 < r < 0.238574
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2084649882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221307 +/- 0.00268574 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.221307 @ 95%CL (1 toyMC)
median expected limit: r < 0.221307 @ 95%CL (1 toyMC)
   68% expected band : 0.221307 < r < 0.221307
   95% expected band : 0.221307 < r < 0.221307
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 317180384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281215 +/- 0.00237597 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.281215 @ 95%CL (1 toyMC)
median expected limit: r < 0.281215 @ 95%CL (1 toyMC)
   68% expected band : 0.281215 < r < 0.281215
   95% expected band : 0.281215 < r < 0.281215
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 255261294
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300611 +/- 0.00223565 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.300611 @ 95%CL (1 toyMC)
median expected limit: r < 0.300611 @ 95%CL (1 toyMC)
   68% expected band : 0.300611 < r < 0.300611
   95% expected band : 0.300611 < r < 0.300611
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -872944840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.196521 +/- 0.00305387 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.196521 @ 95%CL (1 toyMC)
median expected limit: r < 0.196521 @ 95%CL (1 toyMC)
   68% expected band : 0.196521 < r < 0.196521
   95% expected band : 0.196521 < r < 0.196521
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -809740130
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.334149 +/- 0.00188284 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.334149 @ 95%CL (1 toyMC)
median expected limit: r < 0.334149 @ 95%CL (1 toyMC)
   68% expected band : 0.334149 < r < 0.334149
   95% expected band : 0.334149 < r < 0.334149
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1640882449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255443 +/- 0.00283934 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.255443 @ 95%CL (1 toyMC)
median expected limit: r < 0.255443 @ 95%CL (1 toyMC)
   68% expected band : 0.255443 < r < 0.255443
   95% expected band : 0.255443 < r < 0.255443
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -707648356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.198532 +/- 0.00281286 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.198532 @ 95%CL (1 toyMC)
median expected limit: r < 0.198532 @ 95%CL (1 toyMC)
   68% expected band : 0.198532 < r < 0.198532
   95% expected band : 0.198532 < r < 0.198532
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 345383313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213491 +/- 0.00242627 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.213491 @ 95%CL (1 toyMC)
median expected limit: r < 0.213491 @ 95%CL (1 toyMC)
   68% expected band : 0.213491 < r < 0.213491
   95% expected band : 0.213491 < r < 0.213491
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 749019747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.405541 +/- 0.00219534 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.405541 @ 95%CL (1 toyMC)
median expected limit: r < 0.405541 @ 95%CL (1 toyMC)
   68% expected band : 0.405541 < r < 0.405541
   95% expected band : 0.405541 < r < 0.405541
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -115953552
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.456126 +/- 0.00203057 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.456126 @ 95%CL (1 toyMC)
median expected limit: r < 0.456126 @ 95%CL (1 toyMC)
   68% expected band : 0.456126 < r < 0.456126
   95% expected band : 0.456126 < r < 0.456126
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1696437618
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25868 +/- 0.00282247 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.25868 @ 95%CL (1 toyMC)
median expected limit: r < 0.25868 @ 95%CL (1 toyMC)
   68% expected band : 0.25868 < r < 0.25868
   95% expected band : 0.25868 < r < 0.25868
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1814400700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213058 +/- 0.00363337 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.213058 @ 95%CL (1 toyMC)
median expected limit: r < 0.213058 @ 95%CL (1 toyMC)
   68% expected band : 0.213058 < r < 0.213058
   95% expected band : 0.213058 < r < 0.213058
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1547478038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268821 +/- 0.0029433 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.268821 @ 95%CL (1 toyMC)
median expected limit: r < 0.268821 @ 95%CL (1 toyMC)
   68% expected band : 0.268821 < r < 0.268821
   95% expected band : 0.268821 < r < 0.268821
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1535020133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236754 +/- 0.00295279 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.236754 @ 95%CL (1 toyMC)
median expected limit: r < 0.236754 @ 95%CL (1 toyMC)
   68% expected band : 0.236754 < r < 0.236754
   95% expected band : 0.236754 < r < 0.236754
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1628130214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.524696 +/- 0.00182268 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.524696 @ 95%CL (1 toyMC)
median expected limit: r < 0.524696 @ 95%CL (1 toyMC)
   68% expected band : 0.524696 < r < 0.524696
   95% expected band : 0.524696 < r < 0.524696
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 127560822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.362278 +/- 0.00238834 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.362278 @ 95%CL (1 toyMC)
median expected limit: r < 0.362278 @ 95%CL (1 toyMC)
   68% expected band : 0.362278 < r < 0.362278
   95% expected band : 0.362278 < r < 0.362278
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 608812547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.205095 +/- 0.0030051 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.205095 @ 95%CL (1 toyMC)
median expected limit: r < 0.205095 @ 95%CL (1 toyMC)
   68% expected band : 0.205095 < r < 0.205095
   95% expected band : 0.205095 < r < 0.205095
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1423840092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26472 +/- 0.0023019 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.26472 @ 95%CL (1 toyMC)
median expected limit: r < 0.26472 @ 95%CL (1 toyMC)
   68% expected band : 0.26472 < r < 0.26472
   95% expected band : 0.26472 < r < 0.26472
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 172247583
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.380634 +/- 0.00162774 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.380634 @ 95%CL (1 toyMC)
median expected limit: r < 0.380634 @ 95%CL (1 toyMC)
   68% expected band : 0.380634 < r < 0.380634
   95% expected band : 0.380634 < r < 0.380634
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1704759054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200727 +/- 0.00254157 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.200727 @ 95%CL (1 toyMC)
median expected limit: r < 0.200727 @ 95%CL (1 toyMC)
   68% expected band : 0.200727 < r < 0.200727
   95% expected band : 0.200727 < r < 0.200727
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 198213045
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261578 +/- 0.00240926 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.261578 @ 95%CL (1 toyMC)
median expected limit: r < 0.261578 @ 95%CL (1 toyMC)
   68% expected band : 0.261578 < r < 0.261578
   95% expected band : 0.261578 < r < 0.261578
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2115202162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.348437 +/- 0.00209284 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.348437 @ 95%CL (1 toyMC)
median expected limit: r < 0.348437 @ 95%CL (1 toyMC)
   68% expected band : 0.348437 < r < 0.348437
   95% expected band : 0.348437 < r < 0.348437
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -580539005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231172 +/- 0.00291691 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.231172 @ 95%CL (1 toyMC)
median expected limit: r < 0.231172 @ 95%CL (1 toyMC)
   68% expected band : 0.231172 < r < 0.231172
   95% expected band : 0.231172 < r < 0.231172
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1421166590
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.218523 +/- 0.00242231 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.218523 @ 95%CL (1 toyMC)
median expected limit: r < 0.218523 @ 95%CL (1 toyMC)
   68% expected band : 0.218523 < r < 0.218523
   95% expected band : 0.218523 < r < 0.218523
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 907692421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.201724 +/- 0.00365833 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.201724 @ 95%CL (1 toyMC)
median expected limit: r < 0.201724 @ 95%CL (1 toyMC)
   68% expected band : 0.201724 < r < 0.201724
   95% expected band : 0.201724 < r < 0.201724
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1725902499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.201512 +/- 0.00320364 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.201512 @ 95%CL (1 toyMC)
median expected limit: r < 0.201512 @ 95%CL (1 toyMC)
   68% expected band : 0.201512 < r < 0.201512
   95% expected band : 0.201512 < r < 0.201512
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1937088348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294904 +/- 0.00221677 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.294904 @ 95%CL (1 toyMC)
median expected limit: r < 0.294904 @ 95%CL (1 toyMC)
   68% expected band : 0.294904 < r < 0.294904
   95% expected band : 0.294904 < r < 0.294904
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1221682945
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.336432 +/- 0.00210497 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.336432 @ 95%CL (1 toyMC)
median expected limit: r < 0.336432 @ 95%CL (1 toyMC)
   68% expected band : 0.336432 < r < 0.336432
   95% expected band : 0.336432 < r < 0.336432
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 745200067
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.287591 +/- 0.00239943 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.287591 @ 95%CL (1 toyMC)
median expected limit: r < 0.287591 @ 95%CL (1 toyMC)
   68% expected band : 0.287591 < r < 0.287591
   95% expected band : 0.287591 < r < 0.287591
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1713166338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.24828 +/- 0.00248656 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.24828 @ 95%CL (1 toyMC)
median expected limit: r < 0.24828 @ 95%CL (1 toyMC)
   68% expected band : 0.24828 < r < 0.24828
   95% expected band : 0.24828 < r < 0.24828
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 777109141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229982 +/- 0.0025545 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.229982 @ 95%CL (1 toyMC)
median expected limit: r < 0.229982 @ 95%CL (1 toyMC)
   68% expected band : 0.229982 < r < 0.229982
   95% expected band : 0.229982 < r < 0.229982
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1392537619
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.201135 +/- 0.00267359 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.201135 @ 95%CL (1 toyMC)
median expected limit: r < 0.201135 @ 95%CL (1 toyMC)
   68% expected band : 0.201135 < r < 0.201135
   95% expected band : 0.201135 < r < 0.201135
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1268241486
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272057 +/- 0.00252276 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.272057 @ 95%CL (1 toyMC)
median expected limit: r < 0.272057 @ 95%CL (1 toyMC)
   68% expected band : 0.272057 < r < 0.272057
   95% expected band : 0.272057 < r < 0.272057
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1188598996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.40203 +/- 0.00267169 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.40203 @ 95%CL (1 toyMC)
median expected limit: r < 0.40203 @ 95%CL (1 toyMC)
   68% expected band : 0.40203 < r < 0.40203
   95% expected band : 0.40203 < r < 0.40203
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1882937332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.298527 +/- 0.00238286 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.298527 @ 95%CL (1 toyMC)
median expected limit: r < 0.298527 @ 95%CL (1 toyMC)
   68% expected band : 0.298527 < r < 0.298527
   95% expected band : 0.298527 < r < 0.298527
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1164339261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.269823 +/- 0.00242192 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.269823 @ 95%CL (1 toyMC)
median expected limit: r < 0.269823 @ 95%CL (1 toyMC)
   68% expected band : 0.269823 < r < 0.269823
   95% expected band : 0.269823 < r < 0.269823
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1879125315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.351066 +/- 0.00241082 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.351066 @ 95%CL (1 toyMC)
median expected limit: r < 0.351066 @ 95%CL (1 toyMC)
   68% expected band : 0.351066 < r < 0.351066
   95% expected band : 0.351066 < r < 0.351066
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -589768638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.292255 +/- 0.00321001 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.292255 @ 95%CL (1 toyMC)
median expected limit: r < 0.292255 @ 95%CL (1 toyMC)
   68% expected band : 0.292255 < r < 0.292255
   95% expected band : 0.292255 < r < 0.292255
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1021787226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234959 +/- 0.00295864 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.234959 @ 95%CL (1 toyMC)
median expected limit: r < 0.234959 @ 95%CL (1 toyMC)
   68% expected band : 0.234959 < r < 0.234959
   95% expected band : 0.234959 < r < 0.234959
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1438334793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.199085 +/- 0.00244901 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.199085 @ 95%CL (1 toyMC)
median expected limit: r < 0.199085 @ 95%CL (1 toyMC)
   68% expected band : 0.199085 < r < 0.199085
   95% expected band : 0.199085 < r < 0.199085
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 345069793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.48683 +/- 0.00270335 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.48683 @ 95%CL (1 toyMC)
median expected limit: r < 0.48683 @ 95%CL (1 toyMC)
   68% expected band : 0.48683 < r < 0.48683
   95% expected band : 0.48683 < r < 0.48683
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 357281041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.371775 +/- 0.00236631 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.371775 @ 95%CL (1 toyMC)
median expected limit: r < 0.371775 @ 95%CL (1 toyMC)
   68% expected band : 0.371775 < r < 0.371775
   95% expected band : 0.371775 < r < 0.371775
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2050968930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.379567 +/- 0.00208922 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.379567 @ 95%CL (1 toyMC)
median expected limit: r < 0.379567 @ 95%CL (1 toyMC)
   68% expected band : 0.379567 < r < 0.379567
   95% expected band : 0.379567 < r < 0.379567
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -699043839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272281 +/- 0.00238652 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.272281 @ 95%CL (1 toyMC)
median expected limit: r < 0.272281 @ 95%CL (1 toyMC)
   68% expected band : 0.272281 < r < 0.272281
   95% expected band : 0.272281 < r < 0.272281
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -610990513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.199523 +/- 0.00285212 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.199523 @ 95%CL (1 toyMC)
median expected limit: r < 0.199523 @ 95%CL (1 toyMC)
   68% expected band : 0.199523 < r < 0.199523
   95% expected band : 0.199523 < r < 0.199523
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1254640495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204351 +/- 0.00289774 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.204351 @ 95%CL (1 toyMC)
median expected limit: r < 0.204351 @ 95%CL (1 toyMC)
   68% expected band : 0.204351 < r < 0.204351
   95% expected band : 0.204351 < r < 0.204351
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -918026502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262021 +/- 0.00214126 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.262021 @ 95%CL (1 toyMC)
median expected limit: r < 0.262021 @ 95%CL (1 toyMC)
   68% expected band : 0.262021 < r < 0.262021
   95% expected band : 0.262021 < r < 0.262021
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1354856560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.419858 +/- 0.0025152 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.419858 @ 95%CL (1 toyMC)
median expected limit: r < 0.419858 @ 95%CL (1 toyMC)
   68% expected band : 0.419858 < r < 0.419858
   95% expected band : 0.419858 < r < 0.419858
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -41104547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.188852 +/- 0.0027041 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.188852 @ 95%CL (1 toyMC)
median expected limit: r < 0.188852 @ 95%CL (1 toyMC)
   68% expected band : 0.188852 < r < 0.188852
   95% expected band : 0.188852 < r < 0.188852
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1256074135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236882 +/- 0.00258048 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.236882 @ 95%CL (1 toyMC)
median expected limit: r < 0.236882 @ 95%CL (1 toyMC)
   68% expected band : 0.236882 < r < 0.236882
   95% expected band : 0.236882 < r < 0.236882
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 205131269
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288311 +/- 0.00215785 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.288311 @ 95%CL (1 toyMC)
median expected limit: r < 0.288311 @ 95%CL (1 toyMC)
   68% expected band : 0.288311 < r < 0.288311
   95% expected band : 0.288311 < r < 0.288311
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1385674339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263508 +/- 0.00237354 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.263508 @ 95%CL (1 toyMC)
median expected limit: r < 0.263508 @ 95%CL (1 toyMC)
   68% expected band : 0.263508 < r < 0.263508
   95% expected band : 0.263508 < r < 0.263508
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -3170926
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.211426 +/- 0.00264268 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.211426 @ 95%CL (1 toyMC)
median expected limit: r < 0.211426 @ 95%CL (1 toyMC)
   68% expected band : 0.211426 < r < 0.211426
   95% expected band : 0.211426 < r < 0.211426
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1081838378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.199808 +/- 0.00326309 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.199808 @ 95%CL (1 toyMC)
median expected limit: r < 0.199808 @ 95%CL (1 toyMC)
   68% expected band : 0.199808 < r < 0.199808
   95% expected band : 0.199808 < r < 0.199808
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -677686370
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.319927 +/- 0.00244852 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.319927 @ 95%CL (1 toyMC)
median expected limit: r < 0.319927 @ 95%CL (1 toyMC)
   68% expected band : 0.319927 < r < 0.319927
   95% expected band : 0.319927 < r < 0.319927
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1830174876
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.568662 +/- 0.00196423 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.568662 @ 95%CL (1 toyMC)
median expected limit: r < 0.568662 @ 95%CL (1 toyMC)
   68% expected band : 0.568662 < r < 0.568662
   95% expected band : 0.568662 < r < 0.568662
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1109306705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206476 +/- 0.00340904 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.206476 @ 95%CL (1 toyMC)
median expected limit: r < 0.206476 @ 95%CL (1 toyMC)
   68% expected band : 0.206476 < r < 0.206476
   95% expected band : 0.206476 < r < 0.206476
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1701667301
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.441394 +/- 0.00255483 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.441394 @ 95%CL (1 toyMC)
median expected limit: r < 0.441394 @ 95%CL (1 toyMC)
   68% expected band : 0.441394 < r < 0.441394
   95% expected band : 0.441394 < r < 0.441394
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 230747703
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.414571 +/- 0.00174935 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.414571 @ 95%CL (1 toyMC)
median expected limit: r < 0.414571 @ 95%CL (1 toyMC)
   68% expected band : 0.414571 < r < 0.414571
   95% expected band : 0.414571 < r < 0.414571
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1682814165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244023 +/- 0.00261073 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.244023 @ 95%CL (1 toyMC)
median expected limit: r < 0.244023 @ 95%CL (1 toyMC)
   68% expected band : 0.244023 < r < 0.244023
   95% expected band : 0.244023 < r < 0.244023
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1824625785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.381518 +/- 0.00259847 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.381518 @ 95%CL (1 toyMC)
median expected limit: r < 0.381518 @ 95%CL (1 toyMC)
   68% expected band : 0.381518 < r < 0.381518
   95% expected band : 0.381518 < r < 0.381518
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1759263389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251632 +/- 0.00203514 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.251632 @ 95%CL (1 toyMC)
median expected limit: r < 0.251632 @ 95%CL (1 toyMC)
   68% expected band : 0.251632 < r < 0.251632
   95% expected band : 0.251632 < r < 0.251632
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 282122412
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.419861 +/- 0.00245764 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.419861 @ 95%CL (1 toyMC)
median expected limit: r < 0.419861 @ 95%CL (1 toyMC)
   68% expected band : 0.419861 < r < 0.419861
   95% expected band : 0.419861 < r < 0.419861
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2030908467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294191 +/- 0.00231751 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.294191 @ 95%CL (1 toyMC)
median expected limit: r < 0.294191 @ 95%CL (1 toyMC)
   68% expected band : 0.294191 < r < 0.294191
   95% expected band : 0.294191 < r < 0.294191
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1784178665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.351067 +/- 0.00177502 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.351067 @ 95%CL (1 toyMC)
median expected limit: r < 0.351067 @ 95%CL (1 toyMC)
   68% expected band : 0.351067 < r < 0.351067
   95% expected band : 0.351067 < r < 0.351067
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -710810711
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.230895 +/- 0.00210134 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.230895 @ 95%CL (1 toyMC)
median expected limit: r < 0.230895 @ 95%CL (1 toyMC)
   68% expected band : 0.230895 < r < 0.230895
   95% expected band : 0.230895 < r < 0.230895
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 736102053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280615 +/- 0.00314584 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.280615 @ 95%CL (1 toyMC)
median expected limit: r < 0.280615 @ 95%CL (1 toyMC)
   68% expected band : 0.280615 < r < 0.280615
   95% expected band : 0.280615 < r < 0.280615
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1922382079
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.259713 +/- 0.00210639 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.259713 @ 95%CL (1 toyMC)
median expected limit: r < 0.259713 @ 95%CL (1 toyMC)
   68% expected band : 0.259713 < r < 0.259713
   95% expected band : 0.259713 < r < 0.259713
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 288814080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.308754 +/- 0.0025259 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.308754 @ 95%CL (1 toyMC)
median expected limit: r < 0.308754 @ 95%CL (1 toyMC)
   68% expected band : 0.308754 < r < 0.308754
   95% expected band : 0.308754 < r < 0.308754
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -783408000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.215699 +/- 0.00214144 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.215699 @ 95%CL (1 toyMC)
median expected limit: r < 0.215699 @ 95%CL (1 toyMC)
   68% expected band : 0.215699 < r < 0.215699
   95% expected band : 0.215699 < r < 0.215699
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -62016717
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.336313 +/- 0.00200428 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.336313 @ 95%CL (1 toyMC)
median expected limit: r < 0.336313 @ 95%CL (1 toyMC)
   68% expected band : 0.336313 < r < 0.336313
   95% expected band : 0.336313 < r < 0.336313
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1502015016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.24934 +/- 0.00281472 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.24934 @ 95%CL (1 toyMC)
median expected limit: r < 0.24934 @ 95%CL (1 toyMC)
   68% expected band : 0.24934 < r < 0.24934
   95% expected band : 0.24934 < r < 0.24934
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -129484771
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.287088 +/- 0.00277575 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.287088 @ 95%CL (1 toyMC)
median expected limit: r < 0.287088 @ 95%CL (1 toyMC)
   68% expected band : 0.287088 < r < 0.287088
   95% expected band : 0.287088 < r < 0.287088
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -295748397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.47531 +/- 0.00201032 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.47531 @ 95%CL (1 toyMC)
median expected limit: r < 0.47531 @ 95%CL (1 toyMC)
   68% expected band : 0.47531 < r < 0.47531
   95% expected band : 0.47531 < r < 0.47531
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1356897162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235013 +/- 0.00284545 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.235013 @ 95%CL (1 toyMC)
median expected limit: r < 0.235013 @ 95%CL (1 toyMC)
   68% expected band : 0.235013 < r < 0.235013
   95% expected band : 0.235013 < r < 0.235013
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1517981155
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.219013 +/- 0.00267637 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.219013 @ 95%CL (1 toyMC)
median expected limit: r < 0.219013 @ 95%CL (1 toyMC)
   68% expected band : 0.219013 < r < 0.219013
   95% expected band : 0.219013 < r < 0.219013
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 839615245
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.412257 +/- 0.00215694 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.412257 @ 95%CL (1 toyMC)
median expected limit: r < 0.412257 @ 95%CL (1 toyMC)
   68% expected band : 0.412257 < r < 0.412257
   95% expected band : 0.412257 < r < 0.412257
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 647898607
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.367295 +/- 0.00169084 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.367295 @ 95%CL (1 toyMC)
median expected limit: r < 0.367295 @ 95%CL (1 toyMC)
   68% expected band : 0.367295 < r < 0.367295
   95% expected band : 0.367295 < r < 0.367295
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1606674833
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.341379 +/- 0.00291339 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.341379 @ 95%CL (1 toyMC)
median expected limit: r < 0.341379 @ 95%CL (1 toyMC)
   68% expected band : 0.341379 < r < 0.341379
   95% expected band : 0.341379 < r < 0.341379
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1834956943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.310576 +/- 0.00249657 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.310576 @ 95%CL (1 toyMC)
median expected limit: r < 0.310576 @ 95%CL (1 toyMC)
   68% expected band : 0.310576 < r < 0.310576
   95% expected band : 0.310576 < r < 0.310576
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -411357246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285463 +/- 0.00276495 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.285463 @ 95%CL (1 toyMC)
median expected limit: r < 0.285463 @ 95%CL (1 toyMC)
   68% expected band : 0.285463 < r < 0.285463
   95% expected band : 0.285463 < r < 0.285463
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1071002625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.350791 +/- 0.00206383 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.350791 @ 95%CL (1 toyMC)
median expected limit: r < 0.350791 @ 95%CL (1 toyMC)
   68% expected band : 0.350791 < r < 0.350791
   95% expected band : 0.350791 < r < 0.350791
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 913181097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253881 +/- 0.0026348 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.253881 @ 95%CL (1 toyMC)
median expected limit: r < 0.253881 @ 95%CL (1 toyMC)
   68% expected band : 0.253881 < r < 0.253881
   95% expected band : 0.253881 < r < 0.253881
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1612057807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.426476 +/- 0.00201583 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.426476 @ 95%CL (1 toyMC)
median expected limit: r < 0.426476 @ 95%CL (1 toyMC)
   68% expected band : 0.426476 < r < 0.426476
   95% expected band : 0.426476 < r < 0.426476
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 591440558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.311582 +/- 0.00206758 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.311582 @ 95%CL (1 toyMC)
median expected limit: r < 0.311582 @ 95%CL (1 toyMC)
   68% expected band : 0.311582 < r < 0.311582
   95% expected band : 0.311582 < r < 0.311582
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -90239800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.421008 +/- 0.0020032 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.421008 @ 95%CL (1 toyMC)
median expected limit: r < 0.421008 @ 95%CL (1 toyMC)
   68% expected band : 0.421008 < r < 0.421008
   95% expected band : 0.421008 < r < 0.421008
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 777421656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.19603 +/- 0.00309317 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.19603 @ 95%CL (1 toyMC)
median expected limit: r < 0.19603 @ 95%CL (1 toyMC)
   68% expected band : 0.19603 < r < 0.19603
   95% expected band : 0.19603 < r < 0.19603
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1058271398
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.499041 +/- 0.00196044 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.499041 @ 95%CL (1 toyMC)
median expected limit: r < 0.499041 @ 95%CL (1 toyMC)
   68% expected band : 0.499041 < r < 0.499041
   95% expected band : 0.499041 < r < 0.499041
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1770193893
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.34773 +/- 0.00172542 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.34773 @ 95%CL (1 toyMC)
median expected limit: r < 0.34773 @ 95%CL (1 toyMC)
   68% expected band : 0.34773 < r < 0.34773
   95% expected band : 0.34773 < r < 0.34773
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 793040
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25101 +/- 0.00280616 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.25101 @ 95%CL (1 toyMC)
median expected limit: r < 0.25101 @ 95%CL (1 toyMC)
   68% expected band : 0.25101 < r < 0.25101
   95% expected band : 0.25101 < r < 0.25101
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -429732860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.347003 +/- 0.00166544 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.347003 @ 95%CL (1 toyMC)
median expected limit: r < 0.347003 @ 95%CL (1 toyMC)
   68% expected band : 0.347003 < r < 0.347003
   95% expected band : 0.347003 < r < 0.347003
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1933185206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228398 +/- 0.00239084 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.228398 @ 95%CL (1 toyMC)
median expected limit: r < 0.228398 @ 95%CL (1 toyMC)
   68% expected band : 0.228398 < r < 0.228398
   95% expected band : 0.228398 < r < 0.228398
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1101012305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251534 +/- 0.00254067 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.251534 @ 95%CL (1 toyMC)
median expected limit: r < 0.251534 @ 95%CL (1 toyMC)
   68% expected band : 0.251534 < r < 0.251534
   95% expected band : 0.251534 < r < 0.251534
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1155584585
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.290592 +/- 0.0024426 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.290592 @ 95%CL (1 toyMC)
median expected limit: r < 0.290592 @ 95%CL (1 toyMC)
   68% expected band : 0.290592 < r < 0.290592
   95% expected band : 0.290592 < r < 0.290592
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1076276731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.23441 +/- 0.00243402 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.23441 @ 95%CL (1 toyMC)
median expected limit: r < 0.23441 @ 95%CL (1 toyMC)
   68% expected band : 0.23441 < r < 0.23441
   95% expected band : 0.23441 < r < 0.23441
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1021787226.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1071002625.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1101012305.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1109306705.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-115953552.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1221682945.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1254640495.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-129484771.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1356897162.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1392537619.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1403937896.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1421166590.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1423840092.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1502015016.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1517981155.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1535020133.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1628130214.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1640882449.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1682814165.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1696437618.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1713166338.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1725902499.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1770193893.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-1784178665.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-1814400700.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1824625785.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-1830174876.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-1834956943.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-1879125315.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-1882937332.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-2030908467.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-2115202162.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-2129704256.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-295748397.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-3170926.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-41104547.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-411357246.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-429732860.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-580539005.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-589768638.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-610990513.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-61736783.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-62016717.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-677686370.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-699043839.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-707648356.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-710810711.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-783408000.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-809740130.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.-872944840.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.-90239800.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.-918026502.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1058271398.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1076276731.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1081838378.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1155584585.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1164339261.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1188598996.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1256074135.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1268241486.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.127560822.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1354856560.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1385674339.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1438334793.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1547478038.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1606674833.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1612057807.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1701667301.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1704759054.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.172247583.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1759263389.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1922382079.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1933185206.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1937088348.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.198213045.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.2050968930.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.205131269.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.2084649882.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.2128736226.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.230747703.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.255261294.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.282122412.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.288814080.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.317180384.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.345069793.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.345383313.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.357281041.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.591440558.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.608812547.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.647898607.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.736102053.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.745200067.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.749019747.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.777109141.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.777421656.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.793040.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.839615245.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.90504725.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.907692421.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.913181097.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1992086804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26984 +/- 0.00224796 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.26984 @ 95%CL (1 toyMC)
median expected limit: r < 0.26984 @ 95%CL (1 toyMC)
   68% expected band : 0.26984 < r < 0.26984
   95% expected band : 0.26984 < r < 0.26984
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1517557573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204747 +/- 0.00313199 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.204747 @ 95%CL (1 toyMC)
median expected limit: r < 0.204747 @ 95%CL (1 toyMC)
   68% expected band : 0.204747 < r < 0.204747
   95% expected band : 0.204747 < r < 0.204747
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1963373205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288159 +/- 0.00283585 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.288159 @ 95%CL (1 toyMC)
median expected limit: r < 0.288159 @ 95%CL (1 toyMC)
   68% expected band : 0.288159 < r < 0.288159
   95% expected band : 0.288159 < r < 0.288159
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1487889233
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.250017 +/- 0.00306165 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.250017 @ 95%CL (1 toyMC)
median expected limit: r < 0.250017 @ 95%CL (1 toyMC)
   68% expected band : 0.250017 < r < 0.250017
   95% expected band : 0.250017 < r < 0.250017
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 482036378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332749 +/- 0.002517 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.332749 @ 95%CL (1 toyMC)
median expected limit: r < 0.332749 @ 95%CL (1 toyMC)
   68% expected band : 0.332749 < r < 0.332749
   95% expected band : 0.332749 < r < 0.332749
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -492385323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.350444 +/- 0.00212409 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.350444 @ 95%CL (1 toyMC)
median expected limit: r < 0.350444 @ 95%CL (1 toyMC)
   68% expected band : 0.350444 < r < 0.350444
   95% expected band : 0.350444 < r < 0.350444
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 272342951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.362271 +/- 0.0023612 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.362271 @ 95%CL (1 toyMC)
median expected limit: r < 0.362271 @ 95%CL (1 toyMC)
   68% expected band : 0.362271 < r < 0.362271
   95% expected band : 0.362271 < r < 0.362271
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1499941115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.207456 +/- 0.00251572 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.207456 @ 95%CL (1 toyMC)
median expected limit: r < 0.207456 @ 95%CL (1 toyMC)
   68% expected band : 0.207456 < r < 0.207456
   95% expected band : 0.207456 < r < 0.207456
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1569621968
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.214378 +/- 0.00335908 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.214378 @ 95%CL (1 toyMC)
median expected limit: r < 0.214378 @ 95%CL (1 toyMC)
   68% expected band : 0.214378 < r < 0.214378
   95% expected band : 0.214378 < r < 0.214378
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 367329327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.315292 +/- 0.00195115 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.315292 @ 95%CL (1 toyMC)
median expected limit: r < 0.315292 @ 95%CL (1 toyMC)
   68% expected band : 0.315292 < r < 0.315292
   95% expected band : 0.315292 < r < 0.315292
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 752181818
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210868 +/- 0.00226792 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.210868 @ 95%CL (1 toyMC)
median expected limit: r < 0.210868 @ 95%CL (1 toyMC)
   68% expected band : 0.210868 < r < 0.210868
   95% expected band : 0.210868 < r < 0.210868
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 628699999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212128 +/- 0.00283366 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.212128 @ 95%CL (1 toyMC)
median expected limit: r < 0.212128 @ 95%CL (1 toyMC)
   68% expected band : 0.212128 < r < 0.212128
   95% expected band : 0.212128 < r < 0.212128
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1150554965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.259079 +/- 0.00339678 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.259079 @ 95%CL (1 toyMC)
median expected limit: r < 0.259079 @ 95%CL (1 toyMC)
   68% expected band : 0.259079 < r < 0.259079
   95% expected band : 0.259079 < r < 0.259079
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1516774418
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.602822 +/- 0.002006 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.602822 @ 95%CL (1 toyMC)
median expected limit: r < 0.602822 @ 95%CL (1 toyMC)
   68% expected band : 0.602822 < r < 0.602822
   95% expected band : 0.602822 < r < 0.602822
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1976089123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236857 +/- 0.00309268 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.236857 @ 95%CL (1 toyMC)
median expected limit: r < 0.236857 @ 95%CL (1 toyMC)
   68% expected band : 0.236857 < r < 0.236857
   95% expected band : 0.236857 < r < 0.236857
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 28404758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208757 +/- 0.00259588 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.208757 @ 95%CL (1 toyMC)
median expected limit: r < 0.208757 @ 95%CL (1 toyMC)
   68% expected band : 0.208757 < r < 0.208757
   95% expected band : 0.208757 < r < 0.208757
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1066033074
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325187 +/- 0.00228962 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.325187 @ 95%CL (1 toyMC)
median expected limit: r < 0.325187 @ 95%CL (1 toyMC)
   68% expected band : 0.325187 < r < 0.325187
   95% expected band : 0.325187 < r < 0.325187
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1970443053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.279542 +/- 0.00234246 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.279542 @ 95%CL (1 toyMC)
median expected limit: r < 0.279542 @ 95%CL (1 toyMC)
   68% expected band : 0.279542 < r < 0.279542
   95% expected band : 0.279542 < r < 0.279542
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1977250049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210758 +/- 0.00265302 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.210758 @ 95%CL (1 toyMC)
median expected limit: r < 0.210758 @ 95%CL (1 toyMC)
   68% expected band : 0.210758 < r < 0.210758
   95% expected band : 0.210758 < r < 0.210758
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 524412177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.38099 +/- 0.00247435 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.38099 @ 95%CL (1 toyMC)
median expected limit: r < 0.38099 @ 95%CL (1 toyMC)
   68% expected band : 0.38099 < r < 0.38099
   95% expected band : 0.38099 < r < 0.38099
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1923877744
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.43376 +/- 0.00211715 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.43376 @ 95%CL (1 toyMC)
median expected limit: r < 0.43376 @ 95%CL (1 toyMC)
   68% expected band : 0.43376 < r < 0.43376
   95% expected band : 0.43376 < r < 0.43376
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -699386395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.377987 +/- 0.00244202 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.377987 @ 95%CL (1 toyMC)
median expected limit: r < 0.377987 @ 95%CL (1 toyMC)
   68% expected band : 0.377987 < r < 0.377987
   95% expected band : 0.377987 < r < 0.377987
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -509429965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206424 +/- 0.00260991 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.206424 @ 95%CL (1 toyMC)
median expected limit: r < 0.206424 @ 95%CL (1 toyMC)
   68% expected band : 0.206424 < r < 0.206424
   95% expected band : 0.206424 < r < 0.206424
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 104328279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.340642 +/- 0.00235559 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.340642 @ 95%CL (1 toyMC)
median expected limit: r < 0.340642 @ 95%CL (1 toyMC)
   68% expected band : 0.340642 < r < 0.340642
   95% expected band : 0.340642 < r < 0.340642
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1676470840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261598 +/- 0.00251472 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.261598 @ 95%CL (1 toyMC)
median expected limit: r < 0.261598 @ 95%CL (1 toyMC)
   68% expected band : 0.261598 < r < 0.261598
   95% expected band : 0.261598 < r < 0.261598
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1782886945
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301235 +/- 0.00236186 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.301235 @ 95%CL (1 toyMC)
median expected limit: r < 0.301235 @ 95%CL (1 toyMC)
   68% expected band : 0.301235 < r < 0.301235
   95% expected band : 0.301235 < r < 0.301235
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1675712953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.507771 +/- 0.00188686 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.507771 @ 95%CL (1 toyMC)
median expected limit: r < 0.507771 @ 95%CL (1 toyMC)
   68% expected band : 0.507771 < r < 0.507771
   95% expected band : 0.507771 < r < 0.507771
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 928551959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237743 +/- 0.00199395 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.237743 @ 95%CL (1 toyMC)
median expected limit: r < 0.237743 @ 95%CL (1 toyMC)
   68% expected band : 0.237743 < r < 0.237743
   95% expected band : 0.237743 < r < 0.237743
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2119335767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.287691 +/- 0.00261311 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.287691 @ 95%CL (1 toyMC)
median expected limit: r < 0.287691 @ 95%CL (1 toyMC)
   68% expected band : 0.287691 < r < 0.287691
   95% expected band : 0.287691 < r < 0.287691
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1579928047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304806 +/- 0.00221437 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.304806 @ 95%CL (1 toyMC)
median expected limit: r < 0.304806 @ 95%CL (1 toyMC)
   68% expected band : 0.304806 < r < 0.304806
   95% expected band : 0.304806 < r < 0.304806
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -933521156
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204225 +/- 0.00278192 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.204225 @ 95%CL (1 toyMC)
median expected limit: r < 0.204225 @ 95%CL (1 toyMC)
   68% expected band : 0.204225 < r < 0.204225
   95% expected band : 0.204225 < r < 0.204225
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -506770932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.347419 +/- 0.00319369 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.347419 @ 95%CL (1 toyMC)
median expected limit: r < 0.347419 @ 95%CL (1 toyMC)
   68% expected band : 0.347419 < r < 0.347419
   95% expected band : 0.347419 < r < 0.347419
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1605908678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.278987 +/- 0.00209654 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.278987 @ 95%CL (1 toyMC)
median expected limit: r < 0.278987 @ 95%CL (1 toyMC)
   68% expected band : 0.278987 < r < 0.278987
   95% expected band : 0.278987 < r < 0.278987
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 377897190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286688 +/- 0.00288688 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.286688 @ 95%CL (1 toyMC)
median expected limit: r < 0.286688 @ 95%CL (1 toyMC)
   68% expected band : 0.286688 < r < 0.286688
   95% expected band : 0.286688 < r < 0.286688
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1237448821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304613 +/- 0.00248195 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.304613 @ 95%CL (1 toyMC)
median expected limit: r < 0.304613 @ 95%CL (1 toyMC)
   68% expected band : 0.304613 < r < 0.304613
   95% expected band : 0.304613 < r < 0.304613
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1044227061
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.199504 +/- 0.00266771 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.199504 @ 95%CL (1 toyMC)
median expected limit: r < 0.199504 @ 95%CL (1 toyMC)
   68% expected band : 0.199504 < r < 0.199504
   95% expected band : 0.199504 < r < 0.199504
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1046757044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300942 +/- 0.00262489 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.300942 @ 95%CL (1 toyMC)
median expected limit: r < 0.300942 @ 95%CL (1 toyMC)
   68% expected band : 0.300942 < r < 0.300942
   95% expected band : 0.300942 < r < 0.300942
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1730369829
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216359 +/- 0.00295947 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.216359 @ 95%CL (1 toyMC)
median expected limit: r < 0.216359 @ 95%CL (1 toyMC)
   68% expected band : 0.216359 < r < 0.216359
   95% expected band : 0.216359 < r < 0.216359
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -470731889
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.721356 +/- 0.00230789 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.721356 @ 95%CL (1 toyMC)
median expected limit: r < 0.721356 @ 95%CL (1 toyMC)
   68% expected band : 0.721356 < r < 0.721356
   95% expected band : 0.721356 < r < 0.721356
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 895386245
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.356737 +/- 0.00233908 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.356737 @ 95%CL (1 toyMC)
median expected limit: r < 0.356737 @ 95%CL (1 toyMC)
   68% expected band : 0.356737 < r < 0.356737
   95% expected band : 0.356737 < r < 0.356737
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -687079804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338922 +/- 0.00205561 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.338922 @ 95%CL (1 toyMC)
median expected limit: r < 0.338922 @ 95%CL (1 toyMC)
   68% expected band : 0.338922 < r < 0.338922
   95% expected band : 0.338922 < r < 0.338922
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 108588695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.297299 +/- 0.00235706 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.297299 @ 95%CL (1 toyMC)
median expected limit: r < 0.297299 @ 95%CL (1 toyMC)
   68% expected band : 0.297299 < r < 0.297299
   95% expected band : 0.297299 < r < 0.297299
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 989338420
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.293982 +/- 0.00219347 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.293982 @ 95%CL (1 toyMC)
median expected limit: r < 0.293982 @ 95%CL (1 toyMC)
   68% expected band : 0.293982 < r < 0.293982
   95% expected band : 0.293982 < r < 0.293982
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1144560403
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237748 +/- 0.00275182 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.237748 @ 95%CL (1 toyMC)
median expected limit: r < 0.237748 @ 95%CL (1 toyMC)
   68% expected band : 0.237748 < r < 0.237748
   95% expected band : 0.237748 < r < 0.237748
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 91504118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.209267 +/- 0.00313159 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.209267 @ 95%CL (1 toyMC)
median expected limit: r < 0.209267 @ 95%CL (1 toyMC)
   68% expected band : 0.209267 < r < 0.209267
   95% expected band : 0.209267 < r < 0.209267
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1276112681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251806 +/- 0.00212384 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.251806 @ 95%CL (1 toyMC)
median expected limit: r < 0.251806 @ 95%CL (1 toyMC)
   68% expected band : 0.251806 < r < 0.251806
   95% expected band : 0.251806 < r < 0.251806
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1638195332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272604 +/- 0.00185073 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.272604 @ 95%CL (1 toyMC)
median expected limit: r < 0.272604 @ 95%CL (1 toyMC)
   68% expected band : 0.272604 < r < 0.272604
   95% expected band : 0.272604 < r < 0.272604
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 560974644
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20331 +/- 0.00289271 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.20331 @ 95%CL (1 toyMC)
median expected limit: r < 0.20331 @ 95%CL (1 toyMC)
   68% expected band : 0.20331 < r < 0.20331
   95% expected band : 0.20331 < r < 0.20331
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1218596518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208116 +/- 0.00207241 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.208116 @ 95%CL (1 toyMC)
median expected limit: r < 0.208116 @ 95%CL (1 toyMC)
   68% expected band : 0.208116 < r < 0.208116
   95% expected band : 0.208116 < r < 0.208116
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1546505237
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.336369 +/- 0.00239528 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.336369 @ 95%CL (1 toyMC)
median expected limit: r < 0.336369 @ 95%CL (1 toyMC)
   68% expected band : 0.336369 < r < 0.336369
   95% expected band : 0.336369 < r < 0.336369
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1849292863
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236692 +/- 0.00259383 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.236692 @ 95%CL (1 toyMC)
median expected limit: r < 0.236692 @ 95%CL (1 toyMC)
   68% expected band : 0.236692 < r < 0.236692
   95% expected band : 0.236692 < r < 0.236692
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 695530531
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286322 +/- 0.00279931 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.286322 @ 95%CL (1 toyMC)
median expected limit: r < 0.286322 @ 95%CL (1 toyMC)
   68% expected band : 0.286322 < r < 0.286322
   95% expected band : 0.286322 < r < 0.286322
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1143709569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.249358 +/- 0.00267095 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.249358 @ 95%CL (1 toyMC)
median expected limit: r < 0.249358 @ 95%CL (1 toyMC)
   68% expected band : 0.249358 < r < 0.249358
   95% expected band : 0.249358 < r < 0.249358
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1198928947
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.258095 +/- 0.00240597 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.258095 @ 95%CL (1 toyMC)
median expected limit: r < 0.258095 @ 95%CL (1 toyMC)
   68% expected band : 0.258095 < r < 0.258095
   95% expected band : 0.258095 < r < 0.258095
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -77278407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285716 +/- 0.00310626 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.285716 @ 95%CL (1 toyMC)
median expected limit: r < 0.285716 @ 95%CL (1 toyMC)
   68% expected band : 0.285716 < r < 0.285716
   95% expected band : 0.285716 < r < 0.285716
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1261996782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305413 +/- 0.00181908 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.305413 @ 95%CL (1 toyMC)
median expected limit: r < 0.305413 @ 95%CL (1 toyMC)
   68% expected band : 0.305413 < r < 0.305413
   95% expected band : 0.305413 < r < 0.305413
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1308762264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255444 +/- 0.00291207 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.255444 @ 95%CL (1 toyMC)
median expected limit: r < 0.255444 @ 95%CL (1 toyMC)
   68% expected band : 0.255444 < r < 0.255444
   95% expected band : 0.255444 < r < 0.255444
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -389247992
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.27731 +/- 0.0027659 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.27731 @ 95%CL (1 toyMC)
median expected limit: r < 0.27731 @ 95%CL (1 toyMC)
   68% expected band : 0.27731 < r < 0.27731
   95% expected band : 0.27731 < r < 0.27731
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1948286631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268614 +/- 0.00238029 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.268614 @ 95%CL (1 toyMC)
median expected limit: r < 0.268614 @ 95%CL (1 toyMC)
   68% expected band : 0.268614 < r < 0.268614
   95% expected band : 0.268614 < r < 0.268614
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1352220312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231069 +/- 0.00323851 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.231069 @ 95%CL (1 toyMC)
median expected limit: r < 0.231069 @ 95%CL (1 toyMC)
   68% expected band : 0.231069 < r < 0.231069
   95% expected band : 0.231069 < r < 0.231069
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -674924897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240519 +/- 0.00263655 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.240519 @ 95%CL (1 toyMC)
median expected limit: r < 0.240519 @ 95%CL (1 toyMC)
   68% expected band : 0.240519 < r < 0.240519
   95% expected band : 0.240519 < r < 0.240519
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 548671941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.209748 +/- 0.00274511 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.209748 @ 95%CL (1 toyMC)
median expected limit: r < 0.209748 @ 95%CL (1 toyMC)
   68% expected band : 0.209748 < r < 0.209748
   95% expected band : 0.209748 < r < 0.209748
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -125350780
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.283616 +/- 0.00247137 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.283616 @ 95%CL (1 toyMC)
median expected limit: r < 0.283616 @ 95%CL (1 toyMC)
   68% expected band : 0.283616 < r < 0.283616
   95% expected band : 0.283616 < r < 0.283616
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 818838344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.233814 +/- 0.00276977 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.233814 @ 95%CL (1 toyMC)
median expected limit: r < 0.233814 @ 95%CL (1 toyMC)
   68% expected band : 0.233814 < r < 0.233814
   95% expected band : 0.233814 < r < 0.233814
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 718015286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240269 +/- 0.00276568 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.240269 @ 95%CL (1 toyMC)
median expected limit: r < 0.240269 @ 95%CL (1 toyMC)
   68% expected band : 0.240269 < r < 0.240269
   95% expected band : 0.240269 < r < 0.240269
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -466836452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325434 +/- 0.00295827 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.325434 @ 95%CL (1 toyMC)
median expected limit: r < 0.325434 @ 95%CL (1 toyMC)
   68% expected band : 0.325434 < r < 0.325434
   95% expected band : 0.325434 < r < 0.325434
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2034630810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.386927 +/- 0.00226016 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.386927 @ 95%CL (1 toyMC)
median expected limit: r < 0.386927 @ 95%CL (1 toyMC)
   68% expected band : 0.386927 < r < 0.386927
   95% expected band : 0.386927 < r < 0.386927
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1929613085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.245423 +/- 0.00269196 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.245423 @ 95%CL (1 toyMC)
median expected limit: r < 0.245423 @ 95%CL (1 toyMC)
   68% expected band : 0.245423 < r < 0.245423
   95% expected band : 0.245423 < r < 0.245423
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 193378517
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270558 +/- 0.00276105 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.270558 @ 95%CL (1 toyMC)
median expected limit: r < 0.270558 @ 95%CL (1 toyMC)
   68% expected band : 0.270558 < r < 0.270558
   95% expected band : 0.270558 < r < 0.270558
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -829840578
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242564 +/- 0.00310762 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.242564 @ 95%CL (1 toyMC)
median expected limit: r < 0.242564 @ 95%CL (1 toyMC)
   68% expected band : 0.242564 < r < 0.242564
   95% expected band : 0.242564 < r < 0.242564
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1472789799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213387 +/- 0.00321468 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.213387 @ 95%CL (1 toyMC)
median expected limit: r < 0.213387 @ 95%CL (1 toyMC)
   68% expected band : 0.213387 < r < 0.213387
   95% expected band : 0.213387 < r < 0.213387
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -564632397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.409551 +/- 0.00217042 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.409551 @ 95%CL (1 toyMC)
median expected limit: r < 0.409551 @ 95%CL (1 toyMC)
   68% expected band : 0.409551 < r < 0.409551
   95% expected band : 0.409551 < r < 0.409551
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 13484288
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294724 +/- 0.00259751 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.294724 @ 95%CL (1 toyMC)
median expected limit: r < 0.294724 @ 95%CL (1 toyMC)
   68% expected band : 0.294724 < r < 0.294724
   95% expected band : 0.294724 < r < 0.294724
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -218712020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213658 +/- 0.00299797 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.213658 @ 95%CL (1 toyMC)
median expected limit: r < 0.213658 @ 95%CL (1 toyMC)
   68% expected band : 0.213658 < r < 0.213658
   95% expected band : 0.213658 < r < 0.213658
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1372663542
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.333099 +/- 0.00243954 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.333099 @ 95%CL (1 toyMC)
median expected limit: r < 0.333099 @ 95%CL (1 toyMC)
   68% expected band : 0.333099 < r < 0.333099
   95% expected band : 0.333099 < r < 0.333099
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1682112769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.205932 +/- 0.00360769 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.205932 @ 95%CL (1 toyMC)
median expected limit: r < 0.205932 @ 95%CL (1 toyMC)
   68% expected band : 0.205932 < r < 0.205932
   95% expected band : 0.205932 < r < 0.205932
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 181450037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300614 +/- 0.00240142 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.300614 @ 95%CL (1 toyMC)
median expected limit: r < 0.300614 @ 95%CL (1 toyMC)
   68% expected band : 0.300614 < r < 0.300614
   95% expected band : 0.300614 < r < 0.300614
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -876955589
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.41292 +/- 0.00176132 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.41292 @ 95%CL (1 toyMC)
median expected limit: r < 0.41292 @ 95%CL (1 toyMC)
   68% expected band : 0.41292 < r < 0.41292
   95% expected band : 0.41292 < r < 0.41292
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1788182631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26545 +/- 0.00260869 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.26545 @ 95%CL (1 toyMC)
median expected limit: r < 0.26545 @ 95%CL (1 toyMC)
   68% expected band : 0.26545 < r < 0.26545
   95% expected band : 0.26545 < r < 0.26545
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1779963008
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.322682 +/- 0.00226342 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.322682 @ 95%CL (1 toyMC)
median expected limit: r < 0.322682 @ 95%CL (1 toyMC)
   68% expected band : 0.322682 < r < 0.322682
   95% expected band : 0.322682 < r < 0.322682
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -170095580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29262 +/- 0.0020508 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.29262 @ 95%CL (1 toyMC)
median expected limit: r < 0.29262 @ 95%CL (1 toyMC)
   68% expected band : 0.29262 < r < 0.29262
   95% expected band : 0.29262 < r < 0.29262
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1909357672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.395822 +/- 0.00201055 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.395822 @ 95%CL (1 toyMC)
median expected limit: r < 0.395822 @ 95%CL (1 toyMC)
   68% expected band : 0.395822 < r < 0.395822
   95% expected band : 0.395822 < r < 0.395822
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1938417550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263244 +/- 0.00251991 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.263244 @ 95%CL (1 toyMC)
median expected limit: r < 0.263244 @ 95%CL (1 toyMC)
   68% expected band : 0.263244 < r < 0.263244
   95% expected band : 0.263244 < r < 0.263244
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1369977537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329474 +/- 0.00252207 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.329474 @ 95%CL (1 toyMC)
median expected limit: r < 0.329474 @ 95%CL (1 toyMC)
   68% expected band : 0.329474 < r < 0.329474
   95% expected band : 0.329474 < r < 0.329474
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2129073875
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.41735 +/- 0.00242522 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.41735 @ 95%CL (1 toyMC)
median expected limit: r < 0.41735 @ 95%CL (1 toyMC)
   68% expected band : 0.41735 < r < 0.41735
   95% expected band : 0.41735 < r < 0.41735
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 205435566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.278479 +/- 0.00251962 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.278479 @ 95%CL (1 toyMC)
median expected limit: r < 0.278479 @ 95%CL (1 toyMC)
   68% expected band : 0.278479 < r < 0.278479
   95% expected band : 0.278479 < r < 0.278479
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -849343941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.258378 +/- 0.00289861 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.258378 @ 95%CL (1 toyMC)
median expected limit: r < 0.258378 @ 95%CL (1 toyMC)
   68% expected band : 0.258378 < r < 0.258378
   95% expected band : 0.258378 < r < 0.258378
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -486797583
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.398695 +/- 0.00212638 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.398695 @ 95%CL (1 toyMC)
median expected limit: r < 0.398695 @ 95%CL (1 toyMC)
   68% expected band : 0.398695 < r < 0.398695
   95% expected band : 0.398695 < r < 0.398695
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -439234716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.310775 +/- 0.00249412 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.310775 @ 95%CL (1 toyMC)
median expected limit: r < 0.310775 @ 95%CL (1 toyMC)
   68% expected band : 0.310775 < r < 0.310775
   95% expected band : 0.310775 < r < 0.310775
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1468744479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.23156 +/- 0.00278831 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.23156 @ 95%CL (1 toyMC)
median expected limit: r < 0.23156 @ 95%CL (1 toyMC)
   68% expected band : 0.23156 < r < 0.23156
   95% expected band : 0.23156 < r < 0.23156
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 510459082
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.366394 +/- 0.00247028 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.366394 @ 95%CL (1 toyMC)
median expected limit: r < 0.366394 @ 95%CL (1 toyMC)
   68% expected band : 0.366394 < r < 0.366394
   95% expected band : 0.366394 < r < 0.366394
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -16177748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.352182 +/- 0.00228487 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.352182 @ 95%CL (1 toyMC)
median expected limit: r < 0.352182 @ 95%CL (1 toyMC)
   68% expected band : 0.352182 < r < 0.352182
   95% expected band : 0.352182 < r < 0.352182
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1413213950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.21047 +/- 0.00291421 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.21047 @ 95%CL (1 toyMC)
median expected limit: r < 0.21047 @ 95%CL (1 toyMC)
   68% expected band : 0.21047 < r < 0.21047
   95% expected band : 0.21047 < r < 0.21047
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1859333256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22806 +/- 0.0026457 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.22806 @ 95%CL (1 toyMC)
median expected limit: r < 0.22806 @ 95%CL (1 toyMC)
   68% expected band : 0.22806 < r < 0.22806
   95% expected band : 0.22806 < r < 0.22806
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -319723937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.250022 +/- 0.00277302 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.250022 @ 95%CL (1 toyMC)
median expected limit: r < 0.250022 @ 95%CL (1 toyMC)
   68% expected band : 0.250022 < r < 0.250022
   95% expected band : 0.250022 < r < 0.250022
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -454577544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.419688 +/- 0.00209587 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.419688 @ 95%CL (1 toyMC)
median expected limit: r < 0.419688 @ 95%CL (1 toyMC)
   68% expected band : 0.419688 < r < 0.419688
   95% expected band : 0.419688 < r < 0.419688
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 451180048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.477516 +/- 0.00197153 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.477516 @ 95%CL (1 toyMC)
median expected limit: r < 0.477516 @ 95%CL (1 toyMC)
   68% expected band : 0.477516 < r < 0.477516
   95% expected band : 0.477516 < r < 0.477516
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1609327377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.397467 +/- 0.00225323 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.397467 @ 95%CL (1 toyMC)
median expected limit: r < 0.397467 @ 95%CL (1 toyMC)
   68% expected band : 0.397467 < r < 0.397467
   95% expected band : 0.397467 < r < 0.397467
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1953979311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.215537 +/- 0.00300443 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.215537 @ 95%CL (1 toyMC)
median expected limit: r < 0.215537 @ 95%CL (1 toyMC)
   68% expected band : 0.215537 < r < 0.215537
   95% expected band : 0.215537 < r < 0.215537
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2111318795
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313278 +/- 0.00237679 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.313278 @ 95%CL (1 toyMC)
median expected limit: r < 0.313278 @ 95%CL (1 toyMC)
   68% expected band : 0.313278 < r < 0.313278
   95% expected band : 0.313278 < r < 0.313278
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1044227061.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1046757044.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1218596518.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-125350780.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1308762264.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1352220312.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1369977537.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1468744479.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1487889233.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1516774418.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1517557573.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1579928047.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1609327377.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-16177748.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1638195332.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1675712953.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1682112769.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-170095580.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1730369829.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1788182631.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1923877744.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1929613085.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1938417550.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-1953979311.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-1970443053.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1976089123.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-2034630810.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-2111318795.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-218712020.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-319723937.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-389247992.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-439234716.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-454577544.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-466836452.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-470731889.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-486797583.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-492385323.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-506770932.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-509429965.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-564632397.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-674924897.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-687079804.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-699386395.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-77278407.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-829840578.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-849343941.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-876955589.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-933521156.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.104328279.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.1066033074.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.108588695.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.1143709569.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1144560403.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1150554965.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1198928947.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1237448821.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1261996782.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1276112681.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.13484288.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1372663542.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1413213950.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1472789799.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1499941115.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1546505237.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1569621968.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1605908678.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1676470840.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1779963008.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1782886945.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.181450037.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1849292863.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1859333256.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1909357672.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.193378517.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1948286631.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.1963373205.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.1977250049.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.1992086804.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.205435566.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.2119335767.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.2129073875.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.272342951.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.28404758.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.367329327.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.377897190.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.451180048.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.482036378.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.510459082.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.524412177.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.548671941.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.560974644.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.628699999.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.695530531.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.718015286.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.752181818.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.818838344.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.895386245.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.91504118.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.928551959.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.989338420.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 569161205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226239 +/- 0.00256738 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.226239 @ 95%CL (1 toyMC)
median expected limit: r < 0.226239 @ 95%CL (1 toyMC)
   68% expected band : 0.226239 < r < 0.226239
   95% expected band : 0.226239 < r < 0.226239
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -679320414
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.257758 +/- 0.00171554 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.257758 @ 95%CL (1 toyMC)
median expected limit: r < 0.257758 @ 95%CL (1 toyMC)
   68% expected band : 0.257758 < r < 0.257758
   95% expected band : 0.257758 < r < 0.257758
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1954209162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224721 +/- 0.00288467 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.224721 @ 95%CL (1 toyMC)
median expected limit: r < 0.224721 @ 95%CL (1 toyMC)
   68% expected band : 0.224721 < r < 0.224721
   95% expected band : 0.224721 < r < 0.224721
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -22476466
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.259982 +/- 0.00284555 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.259982 @ 95%CL (1 toyMC)
median expected limit: r < 0.259982 @ 95%CL (1 toyMC)
   68% expected band : 0.259982 < r < 0.259982
   95% expected band : 0.259982 < r < 0.259982
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 589079797
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221966 +/- 0.00313561 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.221966 @ 95%CL (1 toyMC)
median expected limit: r < 0.221966 @ 95%CL (1 toyMC)
   68% expected band : 0.221966 < r < 0.221966
   95% expected band : 0.221966 < r < 0.221966
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -354468213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.276081 +/- 0.00184235 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.276081 @ 95%CL (1 toyMC)
median expected limit: r < 0.276081 @ 95%CL (1 toyMC)
   68% expected band : 0.276081 < r < 0.276081
   95% expected band : 0.276081 < r < 0.276081
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1294420059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.376232 +/- 0.00203985 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.376232 @ 95%CL (1 toyMC)
median expected limit: r < 0.376232 @ 95%CL (1 toyMC)
   68% expected band : 0.376232 < r < 0.376232
   95% expected band : 0.376232 < r < 0.376232
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1076398135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228257 +/- 0.00292667 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.228257 @ 95%CL (1 toyMC)
median expected limit: r < 0.228257 @ 95%CL (1 toyMC)
   68% expected band : 0.228257 < r < 0.228257
   95% expected band : 0.228257 < r < 0.228257
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -41342821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221199 +/- 0.00275625 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.221199 @ 95%CL (1 toyMC)
median expected limit: r < 0.221199 @ 95%CL (1 toyMC)
   68% expected band : 0.221199 < r < 0.221199
   95% expected band : 0.221199 < r < 0.221199
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -995993621
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.419834 +/- 0.00248437 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.419834 @ 95%CL (1 toyMC)
median expected limit: r < 0.419834 @ 95%CL (1 toyMC)
   68% expected band : 0.419834 < r < 0.419834
   95% expected band : 0.419834 < r < 0.419834
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 313857899
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.267627 +/- 0.00294133 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.267627 @ 95%CL (1 toyMC)
median expected limit: r < 0.267627 @ 95%CL (1 toyMC)
   68% expected band : 0.267627 < r < 0.267627
   95% expected band : 0.267627 < r < 0.267627
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 887346576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.267661 +/- 0.00259365 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.267661 @ 95%CL (1 toyMC)
median expected limit: r < 0.267661 @ 95%CL (1 toyMC)
   68% expected band : 0.267661 < r < 0.267661
   95% expected band : 0.267661 < r < 0.267661
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1456737527
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.223699 +/- 0.00293385 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.223699 @ 95%CL (1 toyMC)
median expected limit: r < 0.223699 @ 95%CL (1 toyMC)
   68% expected band : 0.223699 < r < 0.223699
   95% expected band : 0.223699 < r < 0.223699
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1108132713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.218019 +/- 0.00335471 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.218019 @ 95%CL (1 toyMC)
median expected limit: r < 0.218019 @ 95%CL (1 toyMC)
   68% expected band : 0.218019 < r < 0.218019
   95% expected band : 0.218019 < r < 0.218019
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1480480053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226447 +/- 0.00281333 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.226447 @ 95%CL (1 toyMC)
median expected limit: r < 0.226447 @ 95%CL (1 toyMC)
   68% expected band : 0.226447 < r < 0.226447
   95% expected band : 0.226447 < r < 0.226447
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -118546042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.219827 +/- 0.00241573 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.219827 @ 95%CL (1 toyMC)
median expected limit: r < 0.219827 @ 95%CL (1 toyMC)
   68% expected band : 0.219827 < r < 0.219827
   95% expected band : 0.219827 < r < 0.219827
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1837391647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.465616 +/- 0.0022273 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.465616 @ 95%CL (1 toyMC)
median expected limit: r < 0.465616 @ 95%CL (1 toyMC)
   68% expected band : 0.465616 < r < 0.465616
   95% expected band : 0.465616 < r < 0.465616
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -424103597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217608 +/- 0.00246407 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.217608 @ 95%CL (1 toyMC)
median expected limit: r < 0.217608 @ 95%CL (1 toyMC)
   68% expected band : 0.217608 < r < 0.217608
   95% expected band : 0.217608 < r < 0.217608
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -877935090
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282785 +/- 0.00250771 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.282785 @ 95%CL (1 toyMC)
median expected limit: r < 0.282785 @ 95%CL (1 toyMC)
   68% expected band : 0.282785 < r < 0.282785
   95% expected band : 0.282785 < r < 0.282785
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2134680672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.373017 +/- 0.00240028 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.373017 @ 95%CL (1 toyMC)
median expected limit: r < 0.373017 @ 95%CL (1 toyMC)
   68% expected band : 0.373017 < r < 0.373017
   95% expected band : 0.373017 < r < 0.373017
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1797064868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.562362 +/- 0.00229266 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.562362 @ 95%CL (1 toyMC)
median expected limit: r < 0.562362 @ 95%CL (1 toyMC)
   68% expected band : 0.562362 < r < 0.562362
   95% expected band : 0.562362 < r < 0.562362
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 973113145
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.322801 +/- 0.00187048 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.322801 @ 95%CL (1 toyMC)
median expected limit: r < 0.322801 @ 95%CL (1 toyMC)
   68% expected band : 0.322801 < r < 0.322801
   95% expected band : 0.322801 < r < 0.322801
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1208713629
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.219494 +/- 0.00349915 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.219494 @ 95%CL (1 toyMC)
median expected limit: r < 0.219494 @ 95%CL (1 toyMC)
   68% expected band : 0.219494 < r < 0.219494
   95% expected band : 0.219494 < r < 0.219494
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -766126669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.342347 +/- 0.00215972 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.342347 @ 95%CL (1 toyMC)
median expected limit: r < 0.342347 @ 95%CL (1 toyMC)
   68% expected band : 0.342347 < r < 0.342347
   95% expected band : 0.342347 < r < 0.342347
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -708051579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224679 +/- 0.00282644 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.224679 @ 95%CL (1 toyMC)
median expected limit: r < 0.224679 @ 95%CL (1 toyMC)
   68% expected band : 0.224679 < r < 0.224679
   95% expected band : 0.224679 < r < 0.224679
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 207904834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.319784 +/- 0.00205869 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.319784 @ 95%CL (1 toyMC)
median expected limit: r < 0.319784 @ 95%CL (1 toyMC)
   68% expected band : 0.319784 < r < 0.319784
   95% expected band : 0.319784 < r < 0.319784
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -534758536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.408528 +/- 0.00190848 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.408528 @ 95%CL (1 toyMC)
median expected limit: r < 0.408528 @ 95%CL (1 toyMC)
   68% expected band : 0.408528 < r < 0.408528
   95% expected band : 0.408528 < r < 0.408528
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1970973320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.21926 +/- 0.00315894 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.21926 @ 95%CL (1 toyMC)
median expected limit: r < 0.21926 @ 95%CL (1 toyMC)
   68% expected band : 0.21926 < r < 0.21926
   95% expected band : 0.21926 < r < 0.21926
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 717751033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.575268 +/- 0.0019103 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.575268 @ 95%CL (1 toyMC)
median expected limit: r < 0.575268 @ 95%CL (1 toyMC)
   68% expected band : 0.575268 < r < 0.575268
   95% expected band : 0.575268 < r < 0.575268
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1594562185
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329098 +/- 0.00271552 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.329098 @ 95%CL (1 toyMC)
median expected limit: r < 0.329098 @ 95%CL (1 toyMC)
   68% expected band : 0.329098 < r < 0.329098
   95% expected band : 0.329098 < r < 0.329098
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -412766038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329609 +/- 0.0025866 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.329609 @ 95%CL (1 toyMC)
median expected limit: r < 0.329609 @ 95%CL (1 toyMC)
   68% expected band : 0.329609 < r < 0.329609
   95% expected band : 0.329609 < r < 0.329609
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -616595624
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.316027 +/- 0.0027772 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.316027 @ 95%CL (1 toyMC)
median expected limit: r < 0.316027 @ 95%CL (1 toyMC)
   68% expected band : 0.316027 < r < 0.316027
   95% expected band : 0.316027 < r < 0.316027
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1140192035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.352004 +/- 0.00199095 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.352004 @ 95%CL (1 toyMC)
median expected limit: r < 0.352004 @ 95%CL (1 toyMC)
   68% expected band : 0.352004 < r < 0.352004
   95% expected band : 0.352004 < r < 0.352004
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1951340688
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.277484 +/- 0.00282378 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.277484 @ 95%CL (1 toyMC)
median expected limit: r < 0.277484 @ 95%CL (1 toyMC)
   68% expected band : 0.277484 < r < 0.277484
   95% expected band : 0.277484 < r < 0.277484
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 104053313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.351399 +/- 0.00191683 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.351399 @ 95%CL (1 toyMC)
median expected limit: r < 0.351399 @ 95%CL (1 toyMC)
   68% expected band : 0.351399 < r < 0.351399
   95% expected band : 0.351399 < r < 0.351399
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1236382774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.526837 +/- 0.00220184 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.526837 @ 95%CL (1 toyMC)
median expected limit: r < 0.526837 @ 95%CL (1 toyMC)
   68% expected band : 0.526837 < r < 0.526837
   95% expected band : 0.526837 < r < 0.526837
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -372603092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235935 +/- 0.00299502 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.235935 @ 95%CL (1 toyMC)
median expected limit: r < 0.235935 @ 95%CL (1 toyMC)
   68% expected band : 0.235935 < r < 0.235935
   95% expected band : 0.235935 < r < 0.235935
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1336147983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263244 +/- 0.00220797 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.263244 @ 95%CL (1 toyMC)
median expected limit: r < 0.263244 @ 95%CL (1 toyMC)
   68% expected band : 0.263244 < r < 0.263244
   95% expected band : 0.263244 < r < 0.263244
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1535876528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.473388 +/- 0.00203531 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.473388 @ 95%CL (1 toyMC)
median expected limit: r < 0.473388 @ 95%CL (1 toyMC)
   68% expected band : 0.473388 < r < 0.473388
   95% expected band : 0.473388 < r < 0.473388
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1889191390
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.273196 +/- 0.00220896 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.273196 @ 95%CL (1 toyMC)
median expected limit: r < 0.273196 @ 95%CL (1 toyMC)
   68% expected band : 0.273196 < r < 0.273196
   95% expected band : 0.273196 < r < 0.273196
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1644707230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.345465 +/- 0.00201337 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.345465 @ 95%CL (1 toyMC)
median expected limit: r < 0.345465 @ 95%CL (1 toyMC)
   68% expected band : 0.345465 < r < 0.345465
   95% expected band : 0.345465 < r < 0.345465
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 73351692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.392902 +/- 0.00218372 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.392902 @ 95%CL (1 toyMC)
median expected limit: r < 0.392902 @ 95%CL (1 toyMC)
   68% expected band : 0.392902 < r < 0.392902
   95% expected band : 0.392902 < r < 0.392902
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 944966448
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268112 +/- 0.00268482 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.268112 @ 95%CL (1 toyMC)
median expected limit: r < 0.268112 @ 95%CL (1 toyMC)
   68% expected band : 0.268112 < r < 0.268112
   95% expected band : 0.268112 < r < 0.268112
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -698012592
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.317247 +/- 0.00230857 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.317247 @ 95%CL (1 toyMC)
median expected limit: r < 0.317247 @ 95%CL (1 toyMC)
   68% expected band : 0.317247 < r < 0.317247
   95% expected band : 0.317247 < r < 0.317247
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -90555495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.341421 +/- 0.0024397 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.341421 @ 95%CL (1 toyMC)
median expected limit: r < 0.341421 @ 95%CL (1 toyMC)
   68% expected band : 0.341421 < r < 0.341421
   95% expected band : 0.341421 < r < 0.341421
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -166476366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224413 +/- 0.00278307 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.224413 @ 95%CL (1 toyMC)
median expected limit: r < 0.224413 @ 95%CL (1 toyMC)
   68% expected band : 0.224413 < r < 0.224413
   95% expected band : 0.224413 < r < 0.224413
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1791728124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.446624 +/- 0.00200575 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.446624 @ 95%CL (1 toyMC)
median expected limit: r < 0.446624 @ 95%CL (1 toyMC)
   68% expected band : 0.446624 < r < 0.446624
   95% expected band : 0.446624 < r < 0.446624
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1709495830
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.399191 +/- 0.00255295 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.399191 @ 95%CL (1 toyMC)
median expected limit: r < 0.399191 @ 95%CL (1 toyMC)
   68% expected band : 0.399191 < r < 0.399191
   95% expected band : 0.399191 < r < 0.399191
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1980744308
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.257973 +/- 0.00279364 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.257973 @ 95%CL (1 toyMC)
median expected limit: r < 0.257973 @ 95%CL (1 toyMC)
   68% expected band : 0.257973 < r < 0.257973
   95% expected band : 0.257973 < r < 0.257973
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1874290293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.222083 +/- 0.00325603 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.222083 @ 95%CL (1 toyMC)
median expected limit: r < 0.222083 @ 95%CL (1 toyMC)
   68% expected band : 0.222083 < r < 0.222083
   95% expected band : 0.222083 < r < 0.222083
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 994293948
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.396132 +/- 0.00235261 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.396132 @ 95%CL (1 toyMC)
median expected limit: r < 0.396132 @ 95%CL (1 toyMC)
   68% expected band : 0.396132 < r < 0.396132
   95% expected band : 0.396132 < r < 0.396132
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1332701726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263123 +/- 0.00222364 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.263123 @ 95%CL (1 toyMC)
median expected limit: r < 0.263123 @ 95%CL (1 toyMC)
   68% expected band : 0.263123 < r < 0.263123
   95% expected band : 0.263123 < r < 0.263123
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1011957550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228015 +/- 0.00281608 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.228015 @ 95%CL (1 toyMC)
median expected limit: r < 0.228015 @ 95%CL (1 toyMC)
   68% expected band : 0.228015 < r < 0.228015
   95% expected band : 0.228015 < r < 0.228015
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -204866595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217563 +/- 0.00310973 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.217563 @ 95%CL (1 toyMC)
median expected limit: r < 0.217563 @ 95%CL (1 toyMC)
   68% expected band : 0.217563 < r < 0.217563
   95% expected band : 0.217563 < r < 0.217563
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1814074430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309696 +/- 0.00208659 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.309696 @ 95%CL (1 toyMC)
median expected limit: r < 0.309696 @ 95%CL (1 toyMC)
   68% expected band : 0.309696 < r < 0.309696
   95% expected band : 0.309696 < r < 0.309696
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2019345204
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224126 +/- 0.00312753 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.224126 @ 95%CL (1 toyMC)
median expected limit: r < 0.224126 @ 95%CL (1 toyMC)
   68% expected band : 0.224126 < r < 0.224126
   95% expected band : 0.224126 < r < 0.224126
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1483148368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221631 +/- 0.00250119 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.221631 @ 95%CL (1 toyMC)
median expected limit: r < 0.221631 @ 95%CL (1 toyMC)
   68% expected band : 0.221631 < r < 0.221631
   95% expected band : 0.221631 < r < 0.221631
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1554725723
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.481794 +/- 0.00183855 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.481794 @ 95%CL (1 toyMC)
median expected limit: r < 0.481794 @ 95%CL (1 toyMC)
   68% expected band : 0.481794 < r < 0.481794
   95% expected band : 0.481794 < r < 0.481794
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1471761668
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.223373 +/- 0.00327866 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.223373 @ 95%CL (1 toyMC)
median expected limit: r < 0.223373 @ 95%CL (1 toyMC)
   68% expected band : 0.223373 < r < 0.223373
   95% expected band : 0.223373 < r < 0.223373
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 830538976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.223676 +/- 0.00258435 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.223676 @ 95%CL (1 toyMC)
median expected limit: r < 0.223676 @ 95%CL (1 toyMC)
   68% expected band : 0.223676 < r < 0.223676
   95% expected band : 0.223676 < r < 0.223676
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -50362573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301623 +/- 0.0022097 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.301623 @ 95%CL (1 toyMC)
median expected limit: r < 0.301623 @ 95%CL (1 toyMC)
   68% expected band : 0.301623 < r < 0.301623
   95% expected band : 0.301623 < r < 0.301623
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2034116803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312958 +/- 0.00223789 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.312958 @ 95%CL (1 toyMC)
median expected limit: r < 0.312958 @ 95%CL (1 toyMC)
   68% expected band : 0.312958 < r < 0.312958
   95% expected band : 0.312958 < r < 0.312958
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 67470104
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268686 +/- 0.00329808 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.268686 @ 95%CL (1 toyMC)
median expected limit: r < 0.268686 @ 95%CL (1 toyMC)
   68% expected band : 0.268686 < r < 0.268686
   95% expected band : 0.268686 < r < 0.268686
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -498822988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300935 +/- 0.00260897 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.300935 @ 95%CL (1 toyMC)
median expected limit: r < 0.300935 @ 95%CL (1 toyMC)
   68% expected band : 0.300935 < r < 0.300935
   95% expected band : 0.300935 < r < 0.300935
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 624278936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286825 +/- 0.0025594 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.286825 @ 95%CL (1 toyMC)
median expected limit: r < 0.286825 @ 95%CL (1 toyMC)
   68% expected band : 0.286825 < r < 0.286825
   95% expected band : 0.286825 < r < 0.286825
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1775587012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309461 +/- 0.00264621 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.309461 @ 95%CL (1 toyMC)
median expected limit: r < 0.309461 @ 95%CL (1 toyMC)
   68% expected band : 0.309461 < r < 0.309461
   95% expected band : 0.309461 < r < 0.309461
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1282795485
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22083 +/- 0.00266386 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.22083 @ 95%CL (1 toyMC)
median expected limit: r < 0.22083 @ 95%CL (1 toyMC)
   68% expected band : 0.22083 < r < 0.22083
   95% expected band : 0.22083 < r < 0.22083
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1895828708
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.223588 +/- 0.00272117 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.223588 @ 95%CL (1 toyMC)
median expected limit: r < 0.223588 @ 95%CL (1 toyMC)
   68% expected band : 0.223588 < r < 0.223588
   95% expected band : 0.223588 < r < 0.223588
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1494234282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313242 +/- 0.00246178 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.313242 @ 95%CL (1 toyMC)
median expected limit: r < 0.313242 @ 95%CL (1 toyMC)
   68% expected band : 0.313242 < r < 0.313242
   95% expected band : 0.313242 < r < 0.313242
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1203396066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.4676 +/- 0.00243584 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.4676 @ 95%CL (1 toyMC)
median expected limit: r < 0.4676 @ 95%CL (1 toyMC)
   68% expected band : 0.4676 < r < 0.4676
   95% expected band : 0.4676 < r < 0.4676
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 759111568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.258429 +/- 0.00238986 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.258429 @ 95%CL (1 toyMC)
median expected limit: r < 0.258429 @ 95%CL (1 toyMC)
   68% expected band : 0.258429 < r < 0.258429
   95% expected band : 0.258429 < r < 0.258429
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -177011558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.279051 +/- 0.00227216 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.279051 @ 95%CL (1 toyMC)
median expected limit: r < 0.279051 @ 95%CL (1 toyMC)
   68% expected band : 0.279051 < r < 0.279051
   95% expected band : 0.279051 < r < 0.279051
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1755713923
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.334802 +/- 0.00226618 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.334802 @ 95%CL (1 toyMC)
median expected limit: r < 0.334802 @ 95%CL (1 toyMC)
   68% expected band : 0.334802 < r < 0.334802
   95% expected band : 0.334802 < r < 0.334802
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1929693864
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216641 +/- 0.00271306 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.216641 @ 95%CL (1 toyMC)
median expected limit: r < 0.216641 @ 95%CL (1 toyMC)
   68% expected band : 0.216641 < r < 0.216641
   95% expected band : 0.216641 < r < 0.216641
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 50047193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228296 +/- 0.00309415 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.228296 @ 95%CL (1 toyMC)
median expected limit: r < 0.228296 @ 95%CL (1 toyMC)
   68% expected band : 0.228296 < r < 0.228296
   95% expected band : 0.228296 < r < 0.228296
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -180699752
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.223807 +/- 0.0022717 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.223807 @ 95%CL (1 toyMC)
median expected limit: r < 0.223807 @ 95%CL (1 toyMC)
   68% expected band : 0.223807 < r < 0.223807
   95% expected band : 0.223807 < r < 0.223807
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -22473472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246517 +/- 0.00237682 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.246517 @ 95%CL (1 toyMC)
median expected limit: r < 0.246517 @ 95%CL (1 toyMC)
   68% expected band : 0.246517 < r < 0.246517
   95% expected band : 0.246517 < r < 0.246517
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1769748674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261465 +/- 0.00243376 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.261465 @ 95%CL (1 toyMC)
median expected limit: r < 0.261465 @ 95%CL (1 toyMC)
   68% expected band : 0.261465 < r < 0.261465
   95% expected band : 0.261465 < r < 0.261465
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -322072455
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.323993 +/- 0.00178329 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.323993 @ 95%CL (1 toyMC)
median expected limit: r < 0.323993 @ 95%CL (1 toyMC)
   68% expected band : 0.323993 < r < 0.323993
   95% expected band : 0.323993 < r < 0.323993
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -90104317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.482 +/- 0.0022455 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.482 @ 95%CL (1 toyMC)
median expected limit: r < 0.482 @ 95%CL (1 toyMC)
   68% expected band : 0.482 < r < 0.482
   95% expected band : 0.482 < r < 0.482
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1404088617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305142 +/- 0.00254437 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.305142 @ 95%CL (1 toyMC)
median expected limit: r < 0.305142 @ 95%CL (1 toyMC)
   68% expected band : 0.305142 < r < 0.305142
   95% expected band : 0.305142 < r < 0.305142
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1333331496
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29089 +/- 0.00295698 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.29089 @ 95%CL (1 toyMC)
median expected limit: r < 0.29089 @ 95%CL (1 toyMC)
   68% expected band : 0.29089 < r < 0.29089
   95% expected band : 0.29089 < r < 0.29089
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1478224410
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.223565 +/- 0.00302717 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.223565 @ 95%CL (1 toyMC)
median expected limit: r < 0.223565 @ 95%CL (1 toyMC)
   68% expected band : 0.223565 < r < 0.223565
   95% expected band : 0.223565 < r < 0.223565
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1502865319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.396765 +/- 0.002011 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.396765 @ 95%CL (1 toyMC)
median expected limit: r < 0.396765 @ 95%CL (1 toyMC)
   68% expected band : 0.396765 < r < 0.396765
   95% expected band : 0.396765 < r < 0.396765
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1116718739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25546 +/- 0.0024625 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.25546 @ 95%CL (1 toyMC)
median expected limit: r < 0.25546 @ 95%CL (1 toyMC)
   68% expected band : 0.25546 < r < 0.25546
   95% expected band : 0.25546 < r < 0.25546
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1096442394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22231 +/- 0.00272953 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.22231 @ 95%CL (1 toyMC)
median expected limit: r < 0.22231 @ 95%CL (1 toyMC)
   68% expected band : 0.22231 < r < 0.22231
   95% expected band : 0.22231 < r < 0.22231
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1242244170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288092 +/- 0.00229587 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.288092 @ 95%CL (1 toyMC)
median expected limit: r < 0.288092 @ 95%CL (1 toyMC)
   68% expected band : 0.288092 < r < 0.288092
   95% expected band : 0.288092 < r < 0.288092
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 747294307
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.434694 +/- 0.00167806 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.434694 @ 95%CL (1 toyMC)
median expected limit: r < 0.434694 @ 95%CL (1 toyMC)
   68% expected band : 0.434694 < r < 0.434694
   95% expected band : 0.434694 < r < 0.434694
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 864562864
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387447 +/- 0.00148484 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.387447 @ 95%CL (1 toyMC)
median expected limit: r < 0.387447 @ 95%CL (1 toyMC)
   68% expected band : 0.387447 < r < 0.387447
   95% expected band : 0.387447 < r < 0.387447
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1304124158
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.323535 +/- 0.0026484 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.323535 @ 95%CL (1 toyMC)
median expected limit: r < 0.323535 @ 95%CL (1 toyMC)
   68% expected band : 0.323535 < r < 0.323535
   95% expected band : 0.323535 < r < 0.323535
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1277514681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270368 +/- 0.00226362 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.270368 @ 95%CL (1 toyMC)
median expected limit: r < 0.270368 @ 95%CL (1 toyMC)
   68% expected band : 0.270368 < r < 0.270368
   95% expected band : 0.270368 < r < 0.270368
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1925677553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213968 +/- 0.00242632 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.213968 @ 95%CL (1 toyMC)
median expected limit: r < 0.213968 @ 95%CL (1 toyMC)
   68% expected band : 0.213968 < r < 0.213968
   95% expected band : 0.213968 < r < 0.213968
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1220411511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.405733 +/- 0.00207292 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.405733 @ 95%CL (1 toyMC)
median expected limit: r < 0.405733 @ 95%CL (1 toyMC)
   68% expected band : 0.405733 < r < 0.405733
   95% expected band : 0.405733 < r < 0.405733
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -206311073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.214877 +/- 0.00281376 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.214877 @ 95%CL (1 toyMC)
median expected limit: r < 0.214877 @ 95%CL (1 toyMC)
   68% expected band : 0.214877 < r < 0.214877
   95% expected band : 0.214877 < r < 0.214877
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2021616246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224222 +/- 0.00285023 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.224222 @ 95%CL (1 toyMC)
median expected limit: r < 0.224222 @ 95%CL (1 toyMC)
   68% expected band : 0.224222 < r < 0.224222
   95% expected band : 0.224222 < r < 0.224222
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 399641331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.324568 +/- 0.00240691 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.324568 @ 95%CL (1 toyMC)
median expected limit: r < 0.324568 @ 95%CL (1 toyMC)
   68% expected band : 0.324568 < r < 0.324568
   95% expected band : 0.324568 < r < 0.324568
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1442903425
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22418 +/- 0.00297888 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.22418 @ 95%CL (1 toyMC)
median expected limit: r < 0.22418 @ 95%CL (1 toyMC)
   68% expected band : 0.22418 < r < 0.22418
   95% expected band : 0.22418 < r < 0.22418
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1166075628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.425886 +/- 0.00243229 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.425886 @ 95%CL (1 toyMC)
median expected limit: r < 0.425886 @ 95%CL (1 toyMC)
   68% expected band : 0.425886 < r < 0.425886
   95% expected band : 0.425886 < r < 0.425886
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 640693172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270248 +/- 0.00270431 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.270248 @ 95%CL (1 toyMC)
median expected limit: r < 0.270248 @ 95%CL (1 toyMC)
   68% expected band : 0.270248 < r < 0.270248
   95% expected band : 0.270248 < r < 0.270248
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1966082672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262976 +/- 0.00315982 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.262976 @ 95%CL (1 toyMC)
median expected limit: r < 0.262976 @ 95%CL (1 toyMC)
   68% expected band : 0.262976 < r < 0.262976
   95% expected band : 0.262976 < r < 0.262976
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1011957550.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1076398135.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1096442394.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1108132713.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1116718739.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1140192035.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-118546042.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1203396066.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1236382774.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1242244170.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1277514681.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1282795485.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1336147983.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1442903425.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1478224410.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1483148368.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1535876528.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1594562185.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1644707230.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-166476366.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1709495830.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1769748674.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-177011558.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-1797064868.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-180699752.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1814074430.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-1889191390.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-1925677553.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-1929693864.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-1951340688.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-1954209162.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-1970973320.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-1980744308.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-2019345204.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-2021616246.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-2034116803.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-204866595.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-206311073.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-2134680672.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-22473472.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-22476466.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-322072455.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-354468213.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-372603092.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-412766038.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-41342821.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-424103597.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-498822988.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-50362573.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.-534758536.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.-616595624.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.-679320414.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.-698012592.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.-708051579.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.-766126669.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.-877935090.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.-90104317.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.-90555495.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.-995993621.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.104053313.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1166075628.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1208713629.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1220411511.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1294420059.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1304124158.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1332701726.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1333331496.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1404088617.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1456737527.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1471761668.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1480480053.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1494234282.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1502865319.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1554725723.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1755713923.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.1775587012.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.1791728124.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.1837391647.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.1874290293.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.1895828708.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.1966082672.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.207904834.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.313857899.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.399641331.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.50047193.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.569161205.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.589079797.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.624278936.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.640693172.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.67470104.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.717751033.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.73351692.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.747294307.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.759111568.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.830538976.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.864562864.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.887346576.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.944966448.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.973113145.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.994293948.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 759923750
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234698 +/- 0.00259805 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.234698 @ 95%CL (1 toyMC)
median expected limit: r < 0.234698 @ 95%CL (1 toyMC)
   68% expected band : 0.234698 < r < 0.234698
   95% expected band : 0.234698 < r < 0.234698
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1019380504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235759 +/- 0.00287838 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.235759 @ 95%CL (1 toyMC)
median expected limit: r < 0.235759 @ 95%CL (1 toyMC)
   68% expected band : 0.235759 < r < 0.235759
   95% expected band : 0.235759 < r < 0.235759
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -579447806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313631 +/- 0.00245087 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.313631 @ 95%CL (1 toyMC)
median expected limit: r < 0.313631 @ 95%CL (1 toyMC)
   68% expected band : 0.313631 < r < 0.313631
   95% expected band : 0.313631 < r < 0.313631
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1067265286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.547652 +/- 0.00232794 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.547652 @ 95%CL (1 toyMC)
median expected limit: r < 0.547652 @ 95%CL (1 toyMC)
   68% expected band : 0.547652 < r < 0.547652
   95% expected band : 0.547652 < r < 0.547652
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1687677930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36125 +/- 0.00248071 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.36125 @ 95%CL (1 toyMC)
median expected limit: r < 0.36125 @ 95%CL (1 toyMC)
   68% expected band : 0.36125 < r < 0.36125
   95% expected band : 0.36125 < r < 0.36125
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1833779480
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288423 +/- 0.00221472 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.288423 @ 95%CL (1 toyMC)
median expected limit: r < 0.288423 @ 95%CL (1 toyMC)
   68% expected band : 0.288423 < r < 0.288423
   95% expected band : 0.288423 < r < 0.288423
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1899113498
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.347509 +/- 0.00255816 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.347509 @ 95%CL (1 toyMC)
median expected limit: r < 0.347509 @ 95%CL (1 toyMC)
   68% expected band : 0.347509 < r < 0.347509
   95% expected band : 0.347509 < r < 0.347509
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1511339830
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22995 +/- 0.00275883 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.22995 @ 95%CL (1 toyMC)
median expected limit: r < 0.22995 @ 95%CL (1 toyMC)
   68% expected band : 0.22995 < r < 0.22995
   95% expected band : 0.22995 < r < 0.22995
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1388249467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39365 +/- 0.0019477 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.39365 @ 95%CL (1 toyMC)
median expected limit: r < 0.39365 @ 95%CL (1 toyMC)
   68% expected band : 0.39365 < r < 0.39365
   95% expected band : 0.39365 < r < 0.39365
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 74866400
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.437901 +/- 0.00239955 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.437901 @ 95%CL (1 toyMC)
median expected limit: r < 0.437901 @ 95%CL (1 toyMC)
   68% expected band : 0.437901 < r < 0.437901
   95% expected band : 0.437901 < r < 0.437901
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1516474051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.245166 +/- 0.00314331 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.245166 @ 95%CL (1 toyMC)
median expected limit: r < 0.245166 @ 95%CL (1 toyMC)
   68% expected band : 0.245166 < r < 0.245166
   95% expected band : 0.245166 < r < 0.245166
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 380313134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.551874 +/- 0.00200111 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.551874 @ 95%CL (1 toyMC)
median expected limit: r < 0.551874 @ 95%CL (1 toyMC)
   68% expected band : 0.551874 < r < 0.551874
   95% expected band : 0.551874 < r < 0.551874
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 236997525
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.340371 +/- 0.00277455 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.340371 @ 95%CL (1 toyMC)
median expected limit: r < 0.340371 @ 95%CL (1 toyMC)
   68% expected band : 0.340371 < r < 0.340371
   95% expected band : 0.340371 < r < 0.340371
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 421686223
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387288 +/- 0.00222314 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.387288 @ 95%CL (1 toyMC)
median expected limit: r < 0.387288 @ 95%CL (1 toyMC)
   68% expected band : 0.387288 < r < 0.387288
   95% expected band : 0.387288 < r < 0.387288
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1890659885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.351022 +/- 0.0029098 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.351022 @ 95%CL (1 toyMC)
median expected limit: r < 0.351022 @ 95%CL (1 toyMC)
   68% expected band : 0.351022 < r < 0.351022
   95% expected band : 0.351022 < r < 0.351022
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 386718133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.434877 +/- 0.00237648 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.434877 @ 95%CL (1 toyMC)
median expected limit: r < 0.434877 @ 95%CL (1 toyMC)
   68% expected band : 0.434877 < r < 0.434877
   95% expected band : 0.434877 < r < 0.434877
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -973307741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234241 +/- 0.00299816 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.234241 @ 95%CL (1 toyMC)
median expected limit: r < 0.234241 @ 95%CL (1 toyMC)
   68% expected band : 0.234241 < r < 0.234241
   95% expected band : 0.234241 < r < 0.234241
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -325919832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226932 +/- 0.00251063 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.226932 @ 95%CL (1 toyMC)
median expected limit: r < 0.226932 @ 95%CL (1 toyMC)
   68% expected band : 0.226932 < r < 0.226932
   95% expected band : 0.226932 < r < 0.226932
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1237239952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236305 +/- 0.00297715 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.236305 @ 95%CL (1 toyMC)
median expected limit: r < 0.236305 @ 95%CL (1 toyMC)
   68% expected band : 0.236305 < r < 0.236305
   95% expected band : 0.236305 < r < 0.236305
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1159487456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240575 +/- 0.0025888 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.240575 @ 95%CL (1 toyMC)
median expected limit: r < 0.240575 @ 95%CL (1 toyMC)
   68% expected band : 0.240575 < r < 0.240575
   95% expected band : 0.240575 < r < 0.240575
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 566549650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294319 +/- 0.00258529 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.294319 @ 95%CL (1 toyMC)
median expected limit: r < 0.294319 @ 95%CL (1 toyMC)
   68% expected band : 0.294319 < r < 0.294319
   95% expected band : 0.294319 < r < 0.294319
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1773160401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.275651 +/- 0.00287304 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.275651 @ 95%CL (1 toyMC)
median expected limit: r < 0.275651 @ 95%CL (1 toyMC)
   68% expected band : 0.275651 < r < 0.275651
   95% expected band : 0.275651 < r < 0.275651
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 297075966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.489364 +/- 0.0020956 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.489364 @ 95%CL (1 toyMC)
median expected limit: r < 0.489364 @ 95%CL (1 toyMC)
   68% expected band : 0.489364 < r < 0.489364
   95% expected band : 0.489364 < r < 0.489364
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1151501126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240434 +/- 0.00300043 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.240434 @ 95%CL (1 toyMC)
median expected limit: r < 0.240434 @ 95%CL (1 toyMC)
   68% expected band : 0.240434 < r < 0.240434
   95% expected band : 0.240434 < r < 0.240434
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 465730766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237561 +/- 0.00303277 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.237561 @ 95%CL (1 toyMC)
median expected limit: r < 0.237561 @ 95%CL (1 toyMC)
   68% expected band : 0.237561 < r < 0.237561
   95% expected band : 0.237561 < r < 0.237561
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 934731073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.326198 +/- 0.00214455 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.326198 @ 95%CL (1 toyMC)
median expected limit: r < 0.326198 @ 95%CL (1 toyMC)
   68% expected band : 0.326198 < r < 0.326198
   95% expected band : 0.326198 < r < 0.326198
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -438045149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280295 +/- 0.00228168 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.280295 @ 95%CL (1 toyMC)
median expected limit: r < 0.280295 @ 95%CL (1 toyMC)
   68% expected band : 0.280295 < r < 0.280295
   95% expected band : 0.280295 < r < 0.280295
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -114770779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237907 +/- 0.00229612 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.237907 @ 95%CL (1 toyMC)
median expected limit: r < 0.237907 @ 95%CL (1 toyMC)
   68% expected band : 0.237907 < r < 0.237907
   95% expected band : 0.237907 < r < 0.237907
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1341310644
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.227239 +/- 0.00303525 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.227239 @ 95%CL (1 toyMC)
median expected limit: r < 0.227239 @ 95%CL (1 toyMC)
   68% expected band : 0.227239 < r < 0.227239
   95% expected band : 0.227239 < r < 0.227239
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1517409428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238162 +/- 0.00234751 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.238162 @ 95%CL (1 toyMC)
median expected limit: r < 0.238162 @ 95%CL (1 toyMC)
   68% expected band : 0.238162 < r < 0.238162
   95% expected band : 0.238162 < r < 0.238162
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1013168160
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.412782 +/- 0.00243036 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.412782 @ 95%CL (1 toyMC)
median expected limit: r < 0.412782 @ 95%CL (1 toyMC)
   68% expected band : 0.412782 < r < 0.412782
   95% expected band : 0.412782 < r < 0.412782
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1074163046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.406382 +/- 0.00228971 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.406382 @ 95%CL (1 toyMC)
median expected limit: r < 0.406382 @ 95%CL (1 toyMC)
   68% expected band : 0.406382 < r < 0.406382
   95% expected band : 0.406382 < r < 0.406382
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -246678687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232987 +/- 0.00264738 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.232987 @ 95%CL (1 toyMC)
median expected limit: r < 0.232987 @ 95%CL (1 toyMC)
   68% expected band : 0.232987 < r < 0.232987
   95% expected band : 0.232987 < r < 0.232987
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1258874098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.241622 +/- 0.00192316 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.241622 @ 95%CL (1 toyMC)
median expected limit: r < 0.241622 @ 95%CL (1 toyMC)
   68% expected band : 0.241622 < r < 0.241622
   95% expected band : 0.241622 < r < 0.241622
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1868767449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240469 +/- 0.00288578 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.240469 @ 95%CL (1 toyMC)
median expected limit: r < 0.240469 @ 95%CL (1 toyMC)
   68% expected band : 0.240469 < r < 0.240469
   95% expected band : 0.240469 < r < 0.240469
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2044881365
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228422 +/- 0.00199065 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.228422 @ 95%CL (1 toyMC)
median expected limit: r < 0.228422 @ 95%CL (1 toyMC)
   68% expected band : 0.228422 < r < 0.228422
   95% expected band : 0.228422 < r < 0.228422
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 962388996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.346714 +/- 0.00256713 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.346714 @ 95%CL (1 toyMC)
median expected limit: r < 0.346714 @ 95%CL (1 toyMC)
   68% expected band : 0.346714 < r < 0.346714
   95% expected band : 0.346714 < r < 0.346714
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 26877559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243652 +/- 0.00288637 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.243652 @ 95%CL (1 toyMC)
median expected limit: r < 0.243652 @ 95%CL (1 toyMC)
   68% expected band : 0.243652 < r < 0.243652
   95% expected band : 0.243652 < r < 0.243652
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -850062403
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237254 +/- 0.00249154 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.237254 @ 95%CL (1 toyMC)
median expected limit: r < 0.237254 @ 95%CL (1 toyMC)
   68% expected band : 0.237254 < r < 0.237254
   95% expected band : 0.237254 < r < 0.237254
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -857016482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.43039 +/- 0.00218728 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.43039 @ 95%CL (1 toyMC)
median expected limit: r < 0.43039 @ 95%CL (1 toyMC)
   68% expected band : 0.43039 < r < 0.43039
   95% expected band : 0.43039 < r < 0.43039
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 856463624
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.354864 +/- 0.00259499 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.354864 @ 95%CL (1 toyMC)
median expected limit: r < 0.354864 @ 95%CL (1 toyMC)
   68% expected band : 0.354864 < r < 0.354864
   95% expected band : 0.354864 < r < 0.354864
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1606554721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.230045 +/- 0.00289849 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.230045 @ 95%CL (1 toyMC)
median expected limit: r < 0.230045 @ 95%CL (1 toyMC)
   68% expected band : 0.230045 < r < 0.230045
   95% expected band : 0.230045 < r < 0.230045
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -255331677
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229975 +/- 0.00306122 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.229975 @ 95%CL (1 toyMC)
median expected limit: r < 0.229975 @ 95%CL (1 toyMC)
   68% expected band : 0.229975 < r < 0.229975
   95% expected band : 0.229975 < r < 0.229975
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 513934168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305466 +/- 0.00274213 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.305466 @ 95%CL (1 toyMC)
median expected limit: r < 0.305466 @ 95%CL (1 toyMC)
   68% expected band : 0.305466 < r < 0.305466
   95% expected band : 0.305466 < r < 0.305466
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 273871135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243167 +/- 0.00266594 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.243167 @ 95%CL (1 toyMC)
median expected limit: r < 0.243167 @ 95%CL (1 toyMC)
   68% expected band : 0.243167 < r < 0.243167
   95% expected band : 0.243167 < r < 0.243167
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -445825845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.290638 +/- 0.00201126 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.290638 @ 95%CL (1 toyMC)
median expected limit: r < 0.290638 @ 95%CL (1 toyMC)
   68% expected band : 0.290638 < r < 0.290638
   95% expected band : 0.290638 < r < 0.290638
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1814777771
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304202 +/- 0.00266332 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.304202 @ 95%CL (1 toyMC)
median expected limit: r < 0.304202 @ 95%CL (1 toyMC)
   68% expected band : 0.304202 < r < 0.304202
   95% expected band : 0.304202 < r < 0.304202
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1013012405
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301202 +/- 0.00271192 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.301202 @ 95%CL (1 toyMC)
median expected limit: r < 0.301202 @ 95%CL (1 toyMC)
   68% expected band : 0.301202 < r < 0.301202
   95% expected band : 0.301202 < r < 0.301202
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1595241931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242586 +/- 0.00255731 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.242586 @ 95%CL (1 toyMC)
median expected limit: r < 0.242586 @ 95%CL (1 toyMC)
   68% expected band : 0.242586 < r < 0.242586
   95% expected band : 0.242586 < r < 0.242586
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -744258430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240537 +/- 0.00288502 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.240537 @ 95%CL (1 toyMC)
median expected limit: r < 0.240537 @ 95%CL (1 toyMC)
   68% expected band : 0.240537 < r < 0.240537
   95% expected band : 0.240537 < r < 0.240537
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -445497332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237818 +/- 0.00278972 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.237818 @ 95%CL (1 toyMC)
median expected limit: r < 0.237818 @ 95%CL (1 toyMC)
   68% expected band : 0.237818 < r < 0.237818
   95% expected band : 0.237818 < r < 0.237818
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -287070264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.299134 +/- 0.00243578 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.299134 @ 95%CL (1 toyMC)
median expected limit: r < 0.299134 @ 95%CL (1 toyMC)
   68% expected band : 0.299134 < r < 0.299134
   95% expected band : 0.299134 < r < 0.299134
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1946719449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.364193 +/- 0.00219989 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.364193 @ 95%CL (1 toyMC)
median expected limit: r < 0.364193 @ 95%CL (1 toyMC)
   68% expected band : 0.364193 < r < 0.364193
   95% expected band : 0.364193 < r < 0.364193
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1031873988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.53797 +/- 0.00209146 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.53797 @ 95%CL (1 toyMC)
median expected limit: r < 0.53797 @ 95%CL (1 toyMC)
   68% expected band : 0.53797 < r < 0.53797
   95% expected band : 0.53797 < r < 0.53797
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -387021270
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234954 +/- 0.00301113 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.234954 @ 95%CL (1 toyMC)
median expected limit: r < 0.234954 @ 95%CL (1 toyMC)
   68% expected band : 0.234954 < r < 0.234954
   95% expected band : 0.234954 < r < 0.234954
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1194467014
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.334948 +/- 0.00263802 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.334948 @ 95%CL (1 toyMC)
median expected limit: r < 0.334948 @ 95%CL (1 toyMC)
   68% expected band : 0.334948 < r < 0.334948
   95% expected band : 0.334948 < r < 0.334948
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2084342651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237455 +/- 0.00221203 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.237455 @ 95%CL (1 toyMC)
median expected limit: r < 0.237455 @ 95%CL (1 toyMC)
   68% expected band : 0.237455 < r < 0.237455
   95% expected band : 0.237455 < r < 0.237455
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 499385975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.416356 +/- 0.00170165 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.416356 @ 95%CL (1 toyMC)
median expected limit: r < 0.416356 @ 95%CL (1 toyMC)
   68% expected band : 0.416356 < r < 0.416356
   95% expected band : 0.416356 < r < 0.416356
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -178191753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238911 +/- 0.00288655 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.238911 @ 95%CL (1 toyMC)
median expected limit: r < 0.238911 @ 95%CL (1 toyMC)
   68% expected band : 0.238911 < r < 0.238911
   95% expected band : 0.238911 < r < 0.238911
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1523109683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.245737 +/- 0.00354834 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.245737 @ 95%CL (1 toyMC)
median expected limit: r < 0.245737 @ 95%CL (1 toyMC)
   68% expected band : 0.245737 < r < 0.245737
   95% expected band : 0.245737 < r < 0.245737
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 10575186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242079 +/- 0.00276162 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.242079 @ 95%CL (1 toyMC)
median expected limit: r < 0.242079 @ 95%CL (1 toyMC)
   68% expected band : 0.242079 < r < 0.242079
   95% expected band : 0.242079 < r < 0.242079
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1512581396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.486076 +/- 0.00235856 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.486076 @ 95%CL (1 toyMC)
median expected limit: r < 0.486076 @ 95%CL (1 toyMC)
   68% expected band : 0.486076 < r < 0.486076
   95% expected band : 0.486076 < r < 0.486076
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -539293244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.277326 +/- 0.00265568 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.277326 @ 95%CL (1 toyMC)
median expected limit: r < 0.277326 @ 95%CL (1 toyMC)
   68% expected band : 0.277326 < r < 0.277326
   95% expected band : 0.277326 < r < 0.277326
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -661787374
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288787 +/- 0.00298294 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.288787 @ 95%CL (1 toyMC)
median expected limit: r < 0.288787 @ 95%CL (1 toyMC)
   68% expected band : 0.288787 < r < 0.288787
   95% expected band : 0.288787 < r < 0.288787
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -202193467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236183 +/- 0.00276923 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.236183 @ 95%CL (1 toyMC)
median expected limit: r < 0.236183 @ 95%CL (1 toyMC)
   68% expected band : 0.236183 < r < 0.236183
   95% expected band : 0.236183 < r < 0.236183
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 512430884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228928 +/- 0.00309223 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.228928 @ 95%CL (1 toyMC)
median expected limit: r < 0.228928 @ 95%CL (1 toyMC)
   68% expected band : 0.228928 < r < 0.228928
   95% expected band : 0.228928 < r < 0.228928
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1967334530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.227333 +/- 0.00230608 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.227333 @ 95%CL (1 toyMC)
median expected limit: r < 0.227333 @ 95%CL (1 toyMC)
   68% expected band : 0.227333 < r < 0.227333
   95% expected band : 0.227333 < r < 0.227333
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -821398951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335594 +/- 0.00228856 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.335594 @ 95%CL (1 toyMC)
median expected limit: r < 0.335594 @ 95%CL (1 toyMC)
   68% expected band : 0.335594 < r < 0.335594
   95% expected band : 0.335594 < r < 0.335594
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1329227580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.306873 +/- 0.00249109 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.306873 @ 95%CL (1 toyMC)
median expected limit: r < 0.306873 @ 95%CL (1 toyMC)
   68% expected band : 0.306873 < r < 0.306873
   95% expected band : 0.306873 < r < 0.306873
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1048601286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234914 +/- 0.00354185 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.234914 @ 95%CL (1 toyMC)
median expected limit: r < 0.234914 @ 95%CL (1 toyMC)
   68% expected band : 0.234914 < r < 0.234914
   95% expected band : 0.234914 < r < 0.234914
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1186613345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.273972 +/- 0.00232078 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.273972 @ 95%CL (1 toyMC)
median expected limit: r < 0.273972 @ 95%CL (1 toyMC)
   68% expected band : 0.273972 < r < 0.273972
   95% expected band : 0.273972 < r < 0.273972
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 38610046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.27292 +/- 0.00248971 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.27292 @ 95%CL (1 toyMC)
median expected limit: r < 0.27292 @ 95%CL (1 toyMC)
   68% expected band : 0.27292 < r < 0.27292
   95% expected band : 0.27292 < r < 0.27292
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 546824449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.33214 +/- 0.0023622 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.33214 @ 95%CL (1 toyMC)
median expected limit: r < 0.33214 @ 95%CL (1 toyMC)
   68% expected band : 0.33214 < r < 0.33214
   95% expected band : 0.33214 < r < 0.33214
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -605601598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.295451 +/- 0.00230968 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.295451 @ 95%CL (1 toyMC)
median expected limit: r < 0.295451 @ 95%CL (1 toyMC)
   68% expected band : 0.295451 < r < 0.295451
   95% expected band : 0.295451 < r < 0.295451
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 217514567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.35332 +/- 0.00235281 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.35332 @ 95%CL (1 toyMC)
median expected limit: r < 0.35332 @ 95%CL (1 toyMC)
   68% expected band : 0.35332 < r < 0.35332
   95% expected band : 0.35332 < r < 0.35332
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1585603189
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.308076 +/- 0.00272904 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.308076 @ 95%CL (1 toyMC)
median expected limit: r < 0.308076 @ 95%CL (1 toyMC)
   68% expected band : 0.308076 < r < 0.308076
   95% expected band : 0.308076 < r < 0.308076
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -417355935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.233593 +/- 0.00339269 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.233593 @ 95%CL (1 toyMC)
median expected limit: r < 0.233593 @ 95%CL (1 toyMC)
   68% expected band : 0.233593 < r < 0.233593
   95% expected band : 0.233593 < r < 0.233593
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 216099167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.425672 +/- 0.00184714 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.425672 @ 95%CL (1 toyMC)
median expected limit: r < 0.425672 @ 95%CL (1 toyMC)
   68% expected band : 0.425672 < r < 0.425672
   95% expected band : 0.425672 < r < 0.425672
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1969408018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285962 +/- 0.00292295 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.285962 @ 95%CL (1 toyMC)
median expected limit: r < 0.285962 @ 95%CL (1 toyMC)
   68% expected band : 0.285962 < r < 0.285962
   95% expected band : 0.285962 < r < 0.285962
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -443548841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31159 +/- 0.00189744 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.31159 @ 95%CL (1 toyMC)
median expected limit: r < 0.31159 @ 95%CL (1 toyMC)
   68% expected band : 0.31159 < r < 0.31159
   95% expected band : 0.31159 < r < 0.31159
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 151252979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.297736 +/- 0.00250819 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.297736 @ 95%CL (1 toyMC)
median expected limit: r < 0.297736 @ 95%CL (1 toyMC)
   68% expected band : 0.297736 < r < 0.297736
   95% expected band : 0.297736 < r < 0.297736
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1944068962
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.44375 +/- 0.00205055 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.44375 @ 95%CL (1 toyMC)
median expected limit: r < 0.44375 @ 95%CL (1 toyMC)
   68% expected band : 0.44375 < r < 0.44375
   95% expected band : 0.44375 < r < 0.44375
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1689613008
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325313 +/- 0.00221085 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.325313 @ 95%CL (1 toyMC)
median expected limit: r < 0.325313 @ 95%CL (1 toyMC)
   68% expected band : 0.325313 < r < 0.325313
   95% expected band : 0.325313 < r < 0.325313
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1183867567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.440154 +/- 0.00212214 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.440154 @ 95%CL (1 toyMC)
median expected limit: r < 0.440154 @ 95%CL (1 toyMC)
   68% expected band : 0.440154 < r < 0.440154
   95% expected band : 0.440154 < r < 0.440154
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -619841040
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231082 +/- 0.00264319 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.231082 @ 95%CL (1 toyMC)
median expected limit: r < 0.231082 @ 95%CL (1 toyMC)
   68% expected band : 0.231082 < r < 0.231082
   95% expected band : 0.231082 < r < 0.231082
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -790027547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.466149 +/- 0.00215546 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.466149 @ 95%CL (1 toyMC)
median expected limit: r < 0.466149 @ 95%CL (1 toyMC)
   68% expected band : 0.466149 < r < 0.466149
   95% expected band : 0.466149 < r < 0.466149
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 418324398
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234571 +/- 0.00207965 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.234571 @ 95%CL (1 toyMC)
median expected limit: r < 0.234571 @ 95%CL (1 toyMC)
   68% expected band : 0.234571 < r < 0.234571
   95% expected band : 0.234571 < r < 0.234571
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2035114990
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270375 +/- 0.00243896 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.270375 @ 95%CL (1 toyMC)
median expected limit: r < 0.270375 @ 95%CL (1 toyMC)
   68% expected band : 0.270375 < r < 0.270375
   95% expected band : 0.270375 < r < 0.270375
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -885158155
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237124 +/- 0.00283984 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.237124 @ 95%CL (1 toyMC)
median expected limit: r < 0.237124 @ 95%CL (1 toyMC)
   68% expected band : 0.237124 < r < 0.237124
   95% expected band : 0.237124 < r < 0.237124
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1976711611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.362144 +/- 0.00227145 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.362144 @ 95%CL (1 toyMC)
median expected limit: r < 0.362144 @ 95%CL (1 toyMC)
   68% expected band : 0.362144 < r < 0.362144
   95% expected band : 0.362144 < r < 0.362144
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1484135957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.283062 +/- 0.00265653 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.283062 @ 95%CL (1 toyMC)
median expected limit: r < 0.283062 @ 95%CL (1 toyMC)
   68% expected band : 0.283062 < r < 0.283062
   95% expected band : 0.283062 < r < 0.283062
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -92508468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.278194 +/- 0.00245096 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.278194 @ 95%CL (1 toyMC)
median expected limit: r < 0.278194 @ 95%CL (1 toyMC)
   68% expected band : 0.278194 < r < 0.278194
   95% expected band : 0.278194 < r < 0.278194
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2032916299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.362504 +/- 0.00282455 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.362504 @ 95%CL (1 toyMC)
median expected limit: r < 0.362504 @ 95%CL (1 toyMC)
   68% expected band : 0.362504 < r < 0.362504
   95% expected band : 0.362504 < r < 0.362504
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1960434474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237632 +/- 0.00227298 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.237632 @ 95%CL (1 toyMC)
median expected limit: r < 0.237632 @ 95%CL (1 toyMC)
   68% expected band : 0.237632 < r < 0.237632
   95% expected band : 0.237632 < r < 0.237632
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1090419849
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285804 +/- 0.00258893 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.285804 @ 95%CL (1 toyMC)
median expected limit: r < 0.285804 @ 95%CL (1 toyMC)
   68% expected band : 0.285804 < r < 0.285804
   95% expected band : 0.285804 < r < 0.285804
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -598669506
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284796 +/- 0.00268148 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.284796 @ 95%CL (1 toyMC)
median expected limit: r < 0.284796 @ 95%CL (1 toyMC)
   68% expected band : 0.284796 < r < 0.284796
   95% expected band : 0.284796 < r < 0.284796
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 426979928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.310917 +/- 0.00239099 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.310917 @ 95%CL (1 toyMC)
median expected limit: r < 0.310917 @ 95%CL (1 toyMC)
   68% expected band : 0.310917 < r < 0.310917
   95% expected band : 0.310917 < r < 0.310917
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1445223565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.417856 +/- 0.00162361 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.417856 @ 95%CL (1 toyMC)
median expected limit: r < 0.417856 @ 95%CL (1 toyMC)
   68% expected band : 0.417856 < r < 0.417856
   95% expected band : 0.417856 < r < 0.417856
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1917526895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.339335 +/- 0.00206361 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.339335 @ 95%CL (1 toyMC)
median expected limit: r < 0.339335 @ 95%CL (1 toyMC)
   68% expected band : 0.339335 < r < 0.339335
   95% expected band : 0.339335 < r < 0.339335
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1583030263
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.307215 +/- 0.00309694 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.307215 @ 95%CL (1 toyMC)
median expected limit: r < 0.307215 @ 95%CL (1 toyMC)
   68% expected band : 0.307215 < r < 0.307215
   95% expected band : 0.307215 < r < 0.307215
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1048601286.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1067265286.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1074163046.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1090419849.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-114770779.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1151501126.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1258874098.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1329227580.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1388249467.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1484135957.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1523109683.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1583030263.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1595241931.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1773160401.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-178191753.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1868767449.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1890659885.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1899113498.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1917526895.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1967334530.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1969408018.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1976711611.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-202193467.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-2035114990.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-2084342651.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-246678687.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-255331677.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-287070264.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-325919832.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-387021270.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-417355935.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-438045149.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-443548841.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-445497332.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-445825845.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-539293244.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-579447806.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-598669506.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-605601598.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-619841040.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-661787374.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-744258430.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-790027547.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-821398951.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-850062403.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-857016482.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-885158155.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-92508468.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-973307741.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.1013012405.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.1013168160.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.1019380504.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1031873988.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.10575186.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1159487456.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1183867567.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1186613345.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1194467014.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1237239952.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1341310644.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1445223565.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1511339830.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.151252979.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1512581396.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1516474051.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1517409428.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1585603189.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1606554721.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1687677930.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1689613008.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1814777771.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1833779480.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1944068962.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1946719449.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1960434474.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.2032916299.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.2044881365.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.216099167.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.217514567.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.236997525.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.26877559.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.273871135.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.297075966.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.380313134.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.38610046.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.386718133.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.418324398.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.421686223.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.426979928.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.465730766.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.499385975.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.512430884.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.513934168.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.546824449.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.566549650.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.74866400.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.759923750.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.856463624.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.934731073.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.962388996.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1554183632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.377344 +/- 0.00241376 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.377344 @ 95%CL (1 toyMC)
median expected limit: r < 0.377344 @ 95%CL (1 toyMC)
   68% expected band : 0.377344 < r < 0.377344
   95% expected band : 0.377344 < r < 0.377344
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -619830539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247581 +/- 0.00282172 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.247581 @ 95%CL (1 toyMC)
median expected limit: r < 0.247581 @ 95%CL (1 toyMC)
   68% expected band : 0.247581 < r < 0.247581
   95% expected band : 0.247581 < r < 0.247581
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1629833680
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251561 +/- 0.00251239 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.251561 @ 95%CL (1 toyMC)
median expected limit: r < 0.251561 @ 95%CL (1 toyMC)
   68% expected band : 0.251561 < r < 0.251561
   95% expected band : 0.251561 < r < 0.251561
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1186580187
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.34923 +/- 0.00239732 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.34923 @ 95%CL (1 toyMC)
median expected limit: r < 0.34923 @ 95%CL (1 toyMC)
   68% expected band : 0.34923 < r < 0.34923
   95% expected band : 0.34923 < r < 0.34923
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2059044018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.392738 +/- 0.00251391 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.392738 @ 95%CL (1 toyMC)
median expected limit: r < 0.392738 @ 95%CL (1 toyMC)
   68% expected band : 0.392738 < r < 0.392738
   95% expected band : 0.392738 < r < 0.392738
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2098529001
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25896 +/- 0.00305429 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.25896 @ 95%CL (1 toyMC)
median expected limit: r < 0.25896 @ 95%CL (1 toyMC)
   68% expected band : 0.25896 < r < 0.25896
   95% expected band : 0.25896 < r < 0.25896
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1504746429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.339618 +/- 0.00213991 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.339618 @ 95%CL (1 toyMC)
median expected limit: r < 0.339618 @ 95%CL (1 toyMC)
   68% expected band : 0.339618 < r < 0.339618
   95% expected band : 0.339618 < r < 0.339618
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 206283926
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.252484 +/- 0.00305163 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.252484 @ 95%CL (1 toyMC)
median expected limit: r < 0.252484 @ 95%CL (1 toyMC)
   68% expected band : 0.252484 < r < 0.252484
   95% expected band : 0.252484 < r < 0.252484
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2014416496
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.463079 +/- 0.00219196 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.463079 @ 95%CL (1 toyMC)
median expected limit: r < 0.463079 @ 95%CL (1 toyMC)
   68% expected band : 0.463079 < r < 0.463079
   95% expected band : 0.463079 < r < 0.463079
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1706839980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246174 +/- 0.00263866 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.246174 @ 95%CL (1 toyMC)
median expected limit: r < 0.246174 @ 95%CL (1 toyMC)
   68% expected band : 0.246174 < r < 0.246174
   95% expected band : 0.246174 < r < 0.246174
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 932776682
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.32457 +/- 0.00322756 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.32457 @ 95%CL (1 toyMC)
median expected limit: r < 0.32457 @ 95%CL (1 toyMC)
   68% expected band : 0.32457 < r < 0.32457
   95% expected band : 0.32457 < r < 0.32457
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -268236331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253464 +/- 0.00327515 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.253464 @ 95%CL (1 toyMC)
median expected limit: r < 0.253464 @ 95%CL (1 toyMC)
   68% expected band : 0.253464 < r < 0.253464
   95% expected band : 0.253464 < r < 0.253464
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1603144614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253186 +/- 0.00270753 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.253186 @ 95%CL (1 toyMC)
median expected limit: r < 0.253186 @ 95%CL (1 toyMC)
   68% expected band : 0.253186 < r < 0.253186
   95% expected band : 0.253186 < r < 0.253186
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1960586282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242526 +/- 0.00307913 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.242526 @ 95%CL (1 toyMC)
median expected limit: r < 0.242526 @ 95%CL (1 toyMC)
   68% expected band : 0.242526 < r < 0.242526
   95% expected band : 0.242526 < r < 0.242526
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1707675148
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.3279 +/- 0.00249315 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.3279 @ 95%CL (1 toyMC)
median expected limit: r < 0.3279 @ 95%CL (1 toyMC)
   68% expected band : 0.3279 < r < 0.3279
   95% expected band : 0.3279 < r < 0.3279
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1872049865
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243754 +/- 0.00251633 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.243754 @ 95%CL (1 toyMC)
median expected limit: r < 0.243754 @ 95%CL (1 toyMC)
   68% expected band : 0.243754 < r < 0.243754
   95% expected band : 0.243754 < r < 0.243754
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -524131146
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.343014 +/- 0.00227464 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.343014 @ 95%CL (1 toyMC)
median expected limit: r < 0.343014 @ 95%CL (1 toyMC)
   68% expected band : 0.343014 < r < 0.343014
   95% expected band : 0.343014 < r < 0.343014
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 820041811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248654 +/- 0.00274979 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.248654 @ 95%CL (1 toyMC)
median expected limit: r < 0.248654 @ 95%CL (1 toyMC)
   68% expected band : 0.248654 < r < 0.248654
   95% expected band : 0.248654 < r < 0.248654
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -911610769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.311837 +/- 0.00264171 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.311837 @ 95%CL (1 toyMC)
median expected limit: r < 0.311837 @ 95%CL (1 toyMC)
   68% expected band : 0.311837 < r < 0.311837
   95% expected band : 0.311837 < r < 0.311837
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -277477618
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251168 +/- 0.00241621 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.251168 @ 95%CL (1 toyMC)
median expected limit: r < 0.251168 @ 95%CL (1 toyMC)
   68% expected band : 0.251168 < r < 0.251168
   95% expected band : 0.251168 < r < 0.251168
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 940682927
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244473 +/- 0.0026864 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.244473 @ 95%CL (1 toyMC)
median expected limit: r < 0.244473 @ 95%CL (1 toyMC)
   68% expected band : 0.244473 < r < 0.244473
   95% expected band : 0.244473 < r < 0.244473
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 479295855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31101 +/- 0.00263375 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.31101 @ 95%CL (1 toyMC)
median expected limit: r < 0.31101 @ 95%CL (1 toyMC)
   68% expected band : 0.31101 < r < 0.31101
   95% expected band : 0.31101 < r < 0.31101
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1498766283
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335506 +/- 0.00268308 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.335506 @ 95%CL (1 toyMC)
median expected limit: r < 0.335506 @ 95%CL (1 toyMC)
   68% expected band : 0.335506 < r < 0.335506
   95% expected band : 0.335506 < r < 0.335506
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -263898358
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244833 +/- 0.00242374 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.244833 @ 95%CL (1 toyMC)
median expected limit: r < 0.244833 @ 95%CL (1 toyMC)
   68% expected band : 0.244833 < r < 0.244833
   95% expected band : 0.244833 < r < 0.244833
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1330976148
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246135 +/- 0.00283133 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.246135 @ 95%CL (1 toyMC)
median expected limit: r < 0.246135 @ 95%CL (1 toyMC)
   68% expected band : 0.246135 < r < 0.246135
   95% expected band : 0.246135 < r < 0.246135
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1871522032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.456094 +/- 0.00256621 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.456094 @ 95%CL (1 toyMC)
median expected limit: r < 0.456094 @ 95%CL (1 toyMC)
   68% expected band : 0.456094 < r < 0.456094
   95% expected band : 0.456094 < r < 0.456094
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 161385003
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330365 +/- 0.00251068 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.330365 @ 95%CL (1 toyMC)
median expected limit: r < 0.330365 @ 95%CL (1 toyMC)
   68% expected band : 0.330365 < r < 0.330365
   95% expected band : 0.330365 < r < 0.330365
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1604955623
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248358 +/- 0.00285099 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.248358 @ 95%CL (1 toyMC)
median expected limit: r < 0.248358 @ 95%CL (1 toyMC)
   68% expected band : 0.248358 < r < 0.248358
   95% expected band : 0.248358 < r < 0.248358
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1640572842
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.250039 +/- 0.00274923 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.250039 @ 95%CL (1 toyMC)
median expected limit: r < 0.250039 @ 95%CL (1 toyMC)
   68% expected band : 0.250039 < r < 0.250039
   95% expected band : 0.250039 < r < 0.250039
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1204206562
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.252811 +/- 0.00269936 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.252811 @ 95%CL (1 toyMC)
median expected limit: r < 0.252811 @ 95%CL (1 toyMC)
   68% expected band : 0.252811 < r < 0.252811
   95% expected band : 0.252811 < r < 0.252811
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 388649061
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338781 +/- 0.00198297 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.338781 @ 95%CL (1 toyMC)
median expected limit: r < 0.338781 @ 95%CL (1 toyMC)
   68% expected band : 0.338781 < r < 0.338781
   95% expected band : 0.338781 < r < 0.338781
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 366168206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.397897 +/- 0.00288059 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.397897 @ 95%CL (1 toyMC)
median expected limit: r < 0.397897 @ 95%CL (1 toyMC)
   68% expected band : 0.397897 < r < 0.397897
   95% expected band : 0.397897 < r < 0.397897
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1472955307
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.249218 +/- 0.00277251 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.249218 @ 95%CL (1 toyMC)
median expected limit: r < 0.249218 @ 95%CL (1 toyMC)
   68% expected band : 0.249218 < r < 0.249218
   95% expected band : 0.249218 < r < 0.249218
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -764483437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247872 +/- 0.00256758 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.247872 @ 95%CL (1 toyMC)
median expected limit: r < 0.247872 @ 95%CL (1 toyMC)
   68% expected band : 0.247872 < r < 0.247872
   95% expected band : 0.247872 < r < 0.247872
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1023226171
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330434 +/- 0.00230236 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.330434 @ 95%CL (1 toyMC)
median expected limit: r < 0.330434 @ 95%CL (1 toyMC)
   68% expected band : 0.330434 < r < 0.330434
   95% expected band : 0.330434 < r < 0.330434
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1050301014
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.241193 +/- 0.00263909 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.241193 @ 95%CL (1 toyMC)
median expected limit: r < 0.241193 @ 95%CL (1 toyMC)
   68% expected band : 0.241193 < r < 0.241193
   95% expected band : 0.241193 < r < 0.241193
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1691081864
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.30055 +/- 0.00293336 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.30055 @ 95%CL (1 toyMC)
median expected limit: r < 0.30055 @ 95%CL (1 toyMC)
   68% expected band : 0.30055 < r < 0.30055
   95% expected band : 0.30055 < r < 0.30055
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1726624293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.34947 +/- 0.00231598 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.34947 @ 95%CL (1 toyMC)
median expected limit: r < 0.34947 @ 95%CL (1 toyMC)
   68% expected band : 0.34947 < r < 0.34947
   95% expected band : 0.34947 < r < 0.34947
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1566711341
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253344 +/- 0.00225091 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.253344 @ 95%CL (1 toyMC)
median expected limit: r < 0.253344 @ 95%CL (1 toyMC)
   68% expected band : 0.253344 < r < 0.253344
   95% expected band : 0.253344 < r < 0.253344
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1768863364
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25434 +/- 0.00223947 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.25434 @ 95%CL (1 toyMC)
median expected limit: r < 0.25434 @ 95%CL (1 toyMC)
   68% expected band : 0.25434 < r < 0.25434
   95% expected band : 0.25434 < r < 0.25434
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -9439688
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244887 +/- 0.00291066 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.244887 @ 95%CL (1 toyMC)
median expected limit: r < 0.244887 @ 95%CL (1 toyMC)
   68% expected band : 0.244887 < r < 0.244887
   95% expected band : 0.244887 < r < 0.244887
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1892521299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.249745 +/- 0.00317374 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.249745 @ 95%CL (1 toyMC)
median expected limit: r < 0.249745 @ 95%CL (1 toyMC)
   68% expected band : 0.249745 < r < 0.249745
   95% expected band : 0.249745 < r < 0.249745
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1370397721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.250465 +/- 0.00281671 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.250465 @ 95%CL (1 toyMC)
median expected limit: r < 0.250465 @ 95%CL (1 toyMC)
   68% expected band : 0.250465 < r < 0.250465
   95% expected band : 0.250465 < r < 0.250465
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1749491651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.250883 +/- 0.00211062 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.250883 @ 95%CL (1 toyMC)
median expected limit: r < 0.250883 @ 95%CL (1 toyMC)
   68% expected band : 0.250883 < r < 0.250883
   95% expected band : 0.250883 < r < 0.250883
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -794118653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25571 +/- 0.00294913 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.25571 @ 95%CL (1 toyMC)
median expected limit: r < 0.25571 @ 95%CL (1 toyMC)
   68% expected band : 0.25571 < r < 0.25571
   95% expected band : 0.25571 < r < 0.25571
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1435381601
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.568765 +/- 0.0019807 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.568765 @ 95%CL (1 toyMC)
median expected limit: r < 0.568765 @ 95%CL (1 toyMC)
   68% expected band : 0.568765 < r < 0.568765
   95% expected band : 0.568765 < r < 0.568765
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -803118036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255072 +/- 0.00260766 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.255072 @ 95%CL (1 toyMC)
median expected limit: r < 0.255072 @ 95%CL (1 toyMC)
   68% expected band : 0.255072 < r < 0.255072
   95% expected band : 0.255072 < r < 0.255072
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 304515352
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.367036 +/- 0.00269969 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.367036 @ 95%CL (1 toyMC)
median expected limit: r < 0.367036 @ 95%CL (1 toyMC)
   68% expected band : 0.367036 < r < 0.367036
   95% expected band : 0.367036 < r < 0.367036
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1710790341
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246486 +/- 0.00234922 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.246486 @ 95%CL (1 toyMC)
median expected limit: r < 0.246486 @ 95%CL (1 toyMC)
   68% expected band : 0.246486 < r < 0.246486
   95% expected band : 0.246486 < r < 0.246486
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 316454579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338874 +/- 0.00242004 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.338874 @ 95%CL (1 toyMC)
median expected limit: r < 0.338874 @ 95%CL (1 toyMC)
   68% expected band : 0.338874 < r < 0.338874
   95% expected band : 0.338874 < r < 0.338874
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -892947182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31258 +/- 0.00231248 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.31258 @ 95%CL (1 toyMC)
median expected limit: r < 0.31258 @ 95%CL (1 toyMC)
   68% expected band : 0.31258 < r < 0.31258
   95% expected band : 0.31258 < r < 0.31258
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1343590950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.334667 +/- 0.00254696 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.334667 @ 95%CL (1 toyMC)
median expected limit: r < 0.334667 @ 95%CL (1 toyMC)
   68% expected band : 0.334667 < r < 0.334667
   95% expected band : 0.334667 < r < 0.334667
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1015254763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240467 +/- 0.00224423 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.240467 @ 95%CL (1 toyMC)
median expected limit: r < 0.240467 @ 95%CL (1 toyMC)
   68% expected band : 0.240467 < r < 0.240467
   95% expected band : 0.240467 < r < 0.240467
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1977979924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246414 +/- 0.00316008 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.246414 @ 95%CL (1 toyMC)
median expected limit: r < 0.246414 @ 95%CL (1 toyMC)
   68% expected band : 0.246414 < r < 0.246414
   95% expected band : 0.246414 < r < 0.246414
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 826575061
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.370679 +/- 0.00194838 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.370679 @ 95%CL (1 toyMC)
median expected limit: r < 0.370679 @ 95%CL (1 toyMC)
   68% expected band : 0.370679 < r < 0.370679
   95% expected band : 0.370679 < r < 0.370679
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 932645240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.409204 +/- 0.00208097 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.409204 @ 95%CL (1 toyMC)
median expected limit: r < 0.409204 @ 95%CL (1 toyMC)
   68% expected band : 0.409204 < r < 0.409204
   95% expected band : 0.409204 < r < 0.409204
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1894142288
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255416 +/- 0.00279427 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.255416 @ 95%CL (1 toyMC)
median expected limit: r < 0.255416 @ 95%CL (1 toyMC)
   68% expected band : 0.255416 < r < 0.255416
   95% expected band : 0.255416 < r < 0.255416
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -9938182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309943 +/- 0.00232462 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.309943 @ 95%CL (1 toyMC)
median expected limit: r < 0.309943 @ 95%CL (1 toyMC)
   68% expected band : 0.309943 < r < 0.309943
   95% expected band : 0.309943 < r < 0.309943
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 107853121
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332524 +/- 0.00246065 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.332524 @ 95%CL (1 toyMC)
median expected limit: r < 0.332524 @ 95%CL (1 toyMC)
   68% expected band : 0.332524 < r < 0.332524
   95% expected band : 0.332524 < r < 0.332524
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1565576705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253066 +/- 0.00278401 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.253066 @ 95%CL (1 toyMC)
median expected limit: r < 0.253066 @ 95%CL (1 toyMC)
   68% expected band : 0.253066 < r < 0.253066
   95% expected band : 0.253066 < r < 0.253066
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1059103224
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.405145 +/- 0.00228593 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.405145 @ 95%CL (1 toyMC)
median expected limit: r < 0.405145 @ 95%CL (1 toyMC)
   68% expected band : 0.405145 < r < 0.405145
   95% expected band : 0.405145 < r < 0.405145
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -406179204
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243057 +/- 0.00276257 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.243057 @ 95%CL (1 toyMC)
median expected limit: r < 0.243057 @ 95%CL (1 toyMC)
   68% expected band : 0.243057 < r < 0.243057
   95% expected band : 0.243057 < r < 0.243057
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1447457552
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.24517 +/- 0.0023542 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.24517 @ 95%CL (1 toyMC)
median expected limit: r < 0.24517 @ 95%CL (1 toyMC)
   68% expected band : 0.24517 < r < 0.24517
   95% expected band : 0.24517 < r < 0.24517
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -168279891
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.254584 +/- 0.00259652 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.254584 @ 95%CL (1 toyMC)
median expected limit: r < 0.254584 @ 95%CL (1 toyMC)
   68% expected band : 0.254584 < r < 0.254584
   95% expected band : 0.254584 < r < 0.254584
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1300250364
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39263 +/- 0.00254762 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.39263 @ 95%CL (1 toyMC)
median expected limit: r < 0.39263 @ 95%CL (1 toyMC)
   68% expected band : 0.39263 < r < 0.39263
   95% expected band : 0.39263 < r < 0.39263
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 868468977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.307716 +/- 0.00214397 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.307716 @ 95%CL (1 toyMC)
median expected limit: r < 0.307716 @ 95%CL (1 toyMC)
   68% expected band : 0.307716 < r < 0.307716
   95% expected band : 0.307716 < r < 0.307716
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1910549772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.250229 +/- 0.00272335 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.250229 @ 95%CL (1 toyMC)
median expected limit: r < 0.250229 @ 95%CL (1 toyMC)
   68% expected band : 0.250229 < r < 0.250229
   95% expected band : 0.250229 < r < 0.250229
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1214992235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251613 +/- 0.00263722 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.251613 @ 95%CL (1 toyMC)
median expected limit: r < 0.251613 @ 95%CL (1 toyMC)
   68% expected band : 0.251613 < r < 0.251613
   95% expected band : 0.251613 < r < 0.251613
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1717076134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.252294 +/- 0.00266997 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.252294 @ 95%CL (1 toyMC)
median expected limit: r < 0.252294 @ 95%CL (1 toyMC)
   68% expected band : 0.252294 < r < 0.252294
   95% expected band : 0.252294 < r < 0.252294
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -528224028
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244557 +/- 0.00265078 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.244557 @ 95%CL (1 toyMC)
median expected limit: r < 0.244557 @ 95%CL (1 toyMC)
   68% expected band : 0.244557 < r < 0.244557
   95% expected band : 0.244557 < r < 0.244557
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -283229175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.24033 +/- 0.00219305 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.24033 @ 95%CL (1 toyMC)
median expected limit: r < 0.24033 @ 95%CL (1 toyMC)
   68% expected band : 0.24033 < r < 0.24033
   95% expected band : 0.24033 < r < 0.24033
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -884758177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.30786 +/- 0.00298996 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.30786 @ 95%CL (1 toyMC)
median expected limit: r < 0.30786 @ 95%CL (1 toyMC)
   68% expected band : 0.30786 < r < 0.30786
   95% expected band : 0.30786 < r < 0.30786
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 506712325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.443284 +/- 0.00191084 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.443284 @ 95%CL (1 toyMC)
median expected limit: r < 0.443284 @ 95%CL (1 toyMC)
   68% expected band : 0.443284 < r < 0.443284
   95% expected band : 0.443284 < r < 0.443284
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1365663173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.343835 +/- 0.00279684 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.343835 @ 95%CL (1 toyMC)
median expected limit: r < 0.343835 @ 95%CL (1 toyMC)
   68% expected band : 0.343835 < r < 0.343835
   95% expected band : 0.343835 < r < 0.343835
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -180970937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.258252 +/- 0.00270449 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.258252 @ 95%CL (1 toyMC)
median expected limit: r < 0.258252 @ 95%CL (1 toyMC)
   68% expected band : 0.258252 < r < 0.258252
   95% expected band : 0.258252 < r < 0.258252
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -609969602
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251713 +/- 0.00253263 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.251713 @ 95%CL (1 toyMC)
median expected limit: r < 0.251713 @ 95%CL (1 toyMC)
   68% expected band : 0.251713 < r < 0.251713
   95% expected band : 0.251713 < r < 0.251713
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1810747973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.319258 +/- 0.00225159 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.319258 @ 95%CL (1 toyMC)
median expected limit: r < 0.319258 @ 95%CL (1 toyMC)
   68% expected band : 0.319258 < r < 0.319258
   95% expected band : 0.319258 < r < 0.319258
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 597410423
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.43012 +/- 0.00267153 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.43012 @ 95%CL (1 toyMC)
median expected limit: r < 0.43012 @ 95%CL (1 toyMC)
   68% expected band : 0.43012 < r < 0.43012
   95% expected band : 0.43012 < r < 0.43012
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 753606241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246682 +/- 0.00270108 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.246682 @ 95%CL (1 toyMC)
median expected limit: r < 0.246682 @ 95%CL (1 toyMC)
   68% expected band : 0.246682 < r < 0.246682
   95% expected band : 0.246682 < r < 0.246682
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1709408179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.316941 +/- 0.00244649 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.316941 @ 95%CL (1 toyMC)
median expected limit: r < 0.316941 @ 95%CL (1 toyMC)
   68% expected band : 0.316941 < r < 0.316941
   95% expected band : 0.316941 < r < 0.316941
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1033563163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.249746 +/- 0.00236988 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.249746 @ 95%CL (1 toyMC)
median expected limit: r < 0.249746 @ 95%CL (1 toyMC)
   68% expected band : 0.249746 < r < 0.249746
   95% expected band : 0.249746 < r < 0.249746
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1072055118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312783 +/- 0.00299896 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.312783 @ 95%CL (1 toyMC)
median expected limit: r < 0.312783 @ 95%CL (1 toyMC)
   68% expected band : 0.312783 < r < 0.312783
   95% expected band : 0.312783 < r < 0.312783
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2045335675
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.367206 +/- 0.00231596 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.367206 @ 95%CL (1 toyMC)
median expected limit: r < 0.367206 @ 95%CL (1 toyMC)
   68% expected band : 0.367206 < r < 0.367206
   95% expected band : 0.367206 < r < 0.367206
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1822022851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.376786 +/- 0.00165334 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.376786 @ 95%CL (1 toyMC)
median expected limit: r < 0.376786 @ 95%CL (1 toyMC)
   68% expected band : 0.376786 < r < 0.376786
   95% expected band : 0.376786 < r < 0.376786
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1821187863
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.374096 +/- 0.00223296 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.374096 @ 95%CL (1 toyMC)
median expected limit: r < 0.374096 @ 95%CL (1 toyMC)
   68% expected band : 0.374096 < r < 0.374096
   95% expected band : 0.374096 < r < 0.374096
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1633831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244458 +/- 0.00299137 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.244458 @ 95%CL (1 toyMC)
median expected limit: r < 0.244458 @ 95%CL (1 toyMC)
   68% expected band : 0.244458 < r < 0.244458
   95% expected band : 0.244458 < r < 0.244458
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2050836854
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.396877 +/- 0.00236804 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.396877 @ 95%CL (1 toyMC)
median expected limit: r < 0.396877 @ 95%CL (1 toyMC)
   68% expected band : 0.396877 < r < 0.396877
   95% expected band : 0.396877 < r < 0.396877
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -14318853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.365835 +/- 0.00202444 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.365835 @ 95%CL (1 toyMC)
median expected limit: r < 0.365835 @ 95%CL (1 toyMC)
   68% expected band : 0.365835 < r < 0.365835
   95% expected band : 0.365835 < r < 0.365835
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 498323206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.241393 +/- 0.00281104 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.241393 @ 95%CL (1 toyMC)
median expected limit: r < 0.241393 @ 95%CL (1 toyMC)
   68% expected band : 0.241393 < r < 0.241393
   95% expected band : 0.241393 < r < 0.241393
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -303352182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.477376 +/- 0.00200701 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.477376 @ 95%CL (1 toyMC)
median expected limit: r < 0.477376 @ 95%CL (1 toyMC)
   68% expected band : 0.477376 < r < 0.477376
   95% expected band : 0.477376 < r < 0.477376
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 127763575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31666 +/- 0.00202818 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.31666 @ 95%CL (1 toyMC)
median expected limit: r < 0.31666 @ 95%CL (1 toyMC)
   68% expected band : 0.31666 < r < 0.31666
   95% expected band : 0.31666 < r < 0.31666
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 871186158
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332944 +/- 0.00229612 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.332944 @ 95%CL (1 toyMC)
median expected limit: r < 0.332944 @ 95%CL (1 toyMC)
   68% expected band : 0.332944 < r < 0.332944
   95% expected band : 0.332944 < r < 0.332944
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 556708888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.250069 +/- 0.00257518 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.250069 @ 95%CL (1 toyMC)
median expected limit: r < 0.250069 @ 95%CL (1 toyMC)
   68% expected band : 0.250069 < r < 0.250069
   95% expected band : 0.250069 < r < 0.250069
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1781170815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251929 +/- 0.00331435 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.251929 @ 95%CL (1 toyMC)
median expected limit: r < 0.251929 @ 95%CL (1 toyMC)
   68% expected band : 0.251929 < r < 0.251929
   95% expected band : 0.251929 < r < 0.251929
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1470948997
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.439563 +/- 0.0024322 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.439563 @ 95%CL (1 toyMC)
median expected limit: r < 0.439563 @ 95%CL (1 toyMC)
   68% expected band : 0.439563 < r < 0.439563
   95% expected band : 0.439563 < r < 0.439563
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1300933709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330848 +/- 0.00212568 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.330848 @ 95%CL (1 toyMC)
median expected limit: r < 0.330848 @ 95%CL (1 toyMC)
   68% expected band : 0.330848 < r < 0.330848
   95% expected band : 0.330848 < r < 0.330848
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1956670544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246329 +/- 0.00333493 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.246329 @ 95%CL (1 toyMC)
median expected limit: r < 0.246329 @ 95%CL (1 toyMC)
   68% expected band : 0.246329 < r < 0.246329
   95% expected band : 0.246329 < r < 0.246329
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -295560045
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251913 +/- 0.00266631 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.251913 @ 95%CL (1 toyMC)
median expected limit: r < 0.251913 @ 95%CL (1 toyMC)
   68% expected band : 0.251913 < r < 0.251913
   95% expected band : 0.251913 < r < 0.251913
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -231899468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.394766 +/- 0.0020629 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.394766 @ 95%CL (1 toyMC)
median expected limit: r < 0.394766 @ 95%CL (1 toyMC)
   68% expected band : 0.394766 < r < 0.394766
   95% expected band : 0.394766 < r < 0.394766
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1858152999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247916 +/- 0.00267302 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.247916 @ 95%CL (1 toyMC)
median expected limit: r < 0.247916 @ 95%CL (1 toyMC)
   68% expected band : 0.247916 < r < 0.247916
   95% expected band : 0.247916 < r < 0.247916
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1015254763.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1023226171.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1033563163.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1050301014.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1072055118.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1204206562.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1214992235.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1300933709.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1343590950.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1365663173.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1370397721.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-14318853.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1435381601.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1447457552.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1472955307.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1498766283.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1566711341.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1603144614.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1604955623.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1640572842.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-168279891.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1691081864.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1706839980.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-1710790341.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-1781170815.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-180970937.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-1822022851.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-1871522032.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-1910549772.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-1960586282.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-2014416496.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-2098529001.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-231899468.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-263898358.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-268236331.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-277477618.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-283229175.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-295560045.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-303352182.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-406179204.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-524131146.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-528224028.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-609969602.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-619830539.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-764483437.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-794118653.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-803118036.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-884758177.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-892947182.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.-911610769.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.-9439688.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.-9938182.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1059103224.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.107853121.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1186580187.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.127763575.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1300250364.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1330976148.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1470948997.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1504746429.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1554183632.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1565576705.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.161385003.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1629833680.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1633831.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1707675148.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1709408179.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1717076134.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1726624293.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1749491651.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1768863364.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1810747973.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1821187863.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1858152999.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1872049865.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.1892521299.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.1894142288.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.1956670544.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.1977979924.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.2045335675.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.2050836854.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.2059044018.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.206283926.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.304515352.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.316454579.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.366168206.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.388649061.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.479295855.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.498323206.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.506712325.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.556708888.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.597410423.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.753606241.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.820041811.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.826575061.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.868468977.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.871186158.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.932645240.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.932776682.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.940682927.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1579862138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262211 +/- 0.00272746 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.262211 @ 95%CL (1 toyMC)
median expected limit: r < 0.262211 @ 95%CL (1 toyMC)
   68% expected band : 0.262211 < r < 0.262211
   95% expected band : 0.262211 < r < 0.262211
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1364470575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262509 +/- 0.00310859 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.262509 @ 95%CL (1 toyMC)
median expected limit: r < 0.262509 @ 95%CL (1 toyMC)
   68% expected band : 0.262509 < r < 0.262509
   95% expected band : 0.262509 < r < 0.262509
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1198414604
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268513 +/- 0.00294909 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.268513 @ 95%CL (1 toyMC)
median expected limit: r < 0.268513 @ 95%CL (1 toyMC)
   68% expected band : 0.268513 < r < 0.268513
   95% expected band : 0.268513 < r < 0.268513
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -160829148
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26129 +/- 0.002437 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.26129 @ 95%CL (1 toyMC)
median expected limit: r < 0.26129 @ 95%CL (1 toyMC)
   68% expected band : 0.26129 < r < 0.26129
   95% expected band : 0.26129 < r < 0.26129
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 492564160
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.543721 +/- 0.00227625 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.543721 @ 95%CL (1 toyMC)
median expected limit: r < 0.543721 @ 95%CL (1 toyMC)
   68% expected band : 0.543721 < r < 0.543721
   95% expected band : 0.543721 < r < 0.543721
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1037034379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.373698 +/- 0.00271211 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.373698 @ 95%CL (1 toyMC)
median expected limit: r < 0.373698 @ 95%CL (1 toyMC)
   68% expected band : 0.373698 < r < 0.373698
   95% expected band : 0.373698 < r < 0.373698
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1214138617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.437882 +/- 0.0025674 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.437882 @ 95%CL (1 toyMC)
median expected limit: r < 0.437882 @ 95%CL (1 toyMC)
   68% expected band : 0.437882 < r < 0.437882
   95% expected band : 0.437882 < r < 0.437882
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1818764639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.339474 +/- 0.00298311 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.339474 @ 95%CL (1 toyMC)
median expected limit: r < 0.339474 @ 95%CL (1 toyMC)
   68% expected band : 0.339474 < r < 0.339474
   95% expected band : 0.339474 < r < 0.339474
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -61070452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261725 +/- 0.00283404 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.261725 @ 95%CL (1 toyMC)
median expected limit: r < 0.261725 @ 95%CL (1 toyMC)
   68% expected band : 0.261725 < r < 0.261725
   95% expected band : 0.261725 < r < 0.261725
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2135146396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262472 +/- 0.00241079 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.262472 @ 95%CL (1 toyMC)
median expected limit: r < 0.262472 @ 95%CL (1 toyMC)
   68% expected band : 0.262472 < r < 0.262472
   95% expected band : 0.262472 < r < 0.262472
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2103796636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335494 +/- 0.00254614 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.335494 @ 95%CL (1 toyMC)
median expected limit: r < 0.335494 @ 95%CL (1 toyMC)
   68% expected band : 0.335494 < r < 0.335494
   95% expected band : 0.335494 < r < 0.335494
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1028954936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.354965 +/- 0.00298824 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.354965 @ 95%CL (1 toyMC)
median expected limit: r < 0.354965 @ 95%CL (1 toyMC)
   68% expected band : 0.354965 < r < 0.354965
   95% expected band : 0.354965 < r < 0.354965
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1948884353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.372615 +/- 0.0025504 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.372615 @ 95%CL (1 toyMC)
median expected limit: r < 0.372615 @ 95%CL (1 toyMC)
   68% expected band : 0.372615 < r < 0.372615
   95% expected band : 0.372615 < r < 0.372615
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1477561126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263227 +/- 0.00245184 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.263227 @ 95%CL (1 toyMC)
median expected limit: r < 0.263227 @ 95%CL (1 toyMC)
   68% expected band : 0.263227 < r < 0.263227
   95% expected band : 0.263227 < r < 0.263227
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1723356303
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.511608 +/- 0.0019865 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.511608 @ 95%CL (1 toyMC)
median expected limit: r < 0.511608 @ 95%CL (1 toyMC)
   68% expected band : 0.511608 < r < 0.511608
   95% expected band : 0.511608 < r < 0.511608
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2004790123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.394545 +/- 0.00198739 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.394545 @ 95%CL (1 toyMC)
median expected limit: r < 0.394545 @ 95%CL (1 toyMC)
   68% expected band : 0.394545 < r < 0.394545
   95% expected band : 0.394545 < r < 0.394545
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1066453760
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263296 +/- 0.00282468 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.263296 @ 95%CL (1 toyMC)
median expected limit: r < 0.263296 @ 95%CL (1 toyMC)
   68% expected band : 0.263296 < r < 0.263296
   95% expected band : 0.263296 < r < 0.263296
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -67517304
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.399408 +/- 0.00201954 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.399408 @ 95%CL (1 toyMC)
median expected limit: r < 0.399408 @ 95%CL (1 toyMC)
   68% expected band : 0.399408 < r < 0.399408
   95% expected band : 0.399408 < r < 0.399408
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1000054203
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25898 +/- 0.00267797 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.25898 @ 95%CL (1 toyMC)
median expected limit: r < 0.25898 @ 95%CL (1 toyMC)
   68% expected band : 0.25898 < r < 0.25898
   95% expected band : 0.25898 < r < 0.25898
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1323660994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36982 +/- 0.00221974 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.36982 @ 95%CL (1 toyMC)
median expected limit: r < 0.36982 @ 95%CL (1 toyMC)
   68% expected band : 0.36982 < r < 0.36982
   95% expected band : 0.36982 < r < 0.36982
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1404535528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26488 +/- 0.00222504 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.26488 @ 95%CL (1 toyMC)
median expected limit: r < 0.26488 @ 95%CL (1 toyMC)
   68% expected band : 0.26488 < r < 0.26488
   95% expected band : 0.26488 < r < 0.26488
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1292295341
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.372499 +/- 0.00244641 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.372499 @ 95%CL (1 toyMC)
median expected limit: r < 0.372499 @ 95%CL (1 toyMC)
   68% expected band : 0.372499 < r < 0.372499
   95% expected band : 0.372499 < r < 0.372499
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -462824683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.267233 +/- 0.00300741 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.267233 @ 95%CL (1 toyMC)
median expected limit: r < 0.267233 @ 95%CL (1 toyMC)
   68% expected band : 0.267233 < r < 0.267233
   95% expected band : 0.267233 < r < 0.267233
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 727764515
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.267266 +/- 0.0034278 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.267266 @ 95%CL (1 toyMC)
median expected limit: r < 0.267266 @ 95%CL (1 toyMC)
   68% expected band : 0.267266 < r < 0.267266
   95% expected band : 0.267266 < r < 0.267266
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1987819385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.265279 +/- 0.00300996 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.265279 @ 95%CL (1 toyMC)
median expected limit: r < 0.265279 @ 95%CL (1 toyMC)
   68% expected band : 0.265279 < r < 0.265279
   95% expected band : 0.265279 < r < 0.265279
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1429437547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.514754 +/- 0.00237055 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.514754 @ 95%CL (1 toyMC)
median expected limit: r < 0.514754 @ 95%CL (1 toyMC)
   68% expected band : 0.514754 < r < 0.514754
   95% expected band : 0.514754 < r < 0.514754
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -258377030
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.377476 +/- 0.00262511 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.377476 @ 95%CL (1 toyMC)
median expected limit: r < 0.377476 @ 95%CL (1 toyMC)
   68% expected band : 0.377476 < r < 0.377476
   95% expected band : 0.377476 < r < 0.377476
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1983733916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.34665 +/- 0.0031627 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.34665 @ 95%CL (1 toyMC)
median expected limit: r < 0.34665 @ 95%CL (1 toyMC)
   68% expected band : 0.34665 < r < 0.34665
   95% expected band : 0.34665 < r < 0.34665
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1673182776
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36767 +/- 0.00256844 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.36767 @ 95%CL (1 toyMC)
median expected limit: r < 0.36767 @ 95%CL (1 toyMC)
   68% expected band : 0.36767 < r < 0.36767
   95% expected band : 0.36767 < r < 0.36767
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1009503662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262988 +/- 0.00299025 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.262988 @ 95%CL (1 toyMC)
median expected limit: r < 0.262988 @ 95%CL (1 toyMC)
   68% expected band : 0.262988 < r < 0.262988
   95% expected band : 0.262988 < r < 0.262988
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 595180713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262866 +/- 0.00237283 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.262866 @ 95%CL (1 toyMC)
median expected limit: r < 0.262866 @ 95%CL (1 toyMC)
   68% expected band : 0.262866 < r < 0.262866
   95% expected band : 0.262866 < r < 0.262866
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 451182916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263453 +/- 0.002922 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.263453 @ 95%CL (1 toyMC)
median expected limit: r < 0.263453 @ 95%CL (1 toyMC)
   68% expected band : 0.263453 < r < 0.263453
   95% expected band : 0.263453 < r < 0.263453
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 642056327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.383287 +/- 0.00192788 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.383287 @ 95%CL (1 toyMC)
median expected limit: r < 0.383287 @ 95%CL (1 toyMC)
   68% expected band : 0.383287 < r < 0.383287
   95% expected band : 0.383287 < r < 0.383287
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2069375217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.345553 +/- 0.0024467 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.345553 @ 95%CL (1 toyMC)
median expected limit: r < 0.345553 @ 95%CL (1 toyMC)
   68% expected band : 0.345553 < r < 0.345553
   95% expected band : 0.345553 < r < 0.345553
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1878714095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.381341 +/- 0.00231678 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.381341 @ 95%CL (1 toyMC)
median expected limit: r < 0.381341 @ 95%CL (1 toyMC)
   68% expected band : 0.381341 < r < 0.381341
   95% expected band : 0.381341 < r < 0.381341
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -128229417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.258948 +/- 0.00266144 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.258948 @ 95%CL (1 toyMC)
median expected limit: r < 0.258948 @ 95%CL (1 toyMC)
   68% expected band : 0.258948 < r < 0.258948
   95% expected band : 0.258948 < r < 0.258948
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 675680125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.392082 +/- 0.00246047 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.392082 @ 95%CL (1 toyMC)
median expected limit: r < 0.392082 @ 95%CL (1 toyMC)
   68% expected band : 0.392082 < r < 0.392082
   95% expected band : 0.392082 < r < 0.392082
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1061002931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.2614 +/- 0.00316915 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.2614 @ 95%CL (1 toyMC)
median expected limit: r < 0.2614 @ 95%CL (1 toyMC)
   68% expected band : 0.2614 < r < 0.2614
   95% expected band : 0.2614 < r < 0.2614
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2061257933
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260395 +/- 0.00237322 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.260395 @ 95%CL (1 toyMC)
median expected limit: r < 0.260395 @ 95%CL (1 toyMC)
   68% expected band : 0.260395 < r < 0.260395
   95% expected band : 0.260395 < r < 0.260395
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2130148384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.276249 +/- 0.00287416 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.276249 @ 95%CL (1 toyMC)
median expected limit: r < 0.276249 @ 95%CL (1 toyMC)
   68% expected band : 0.276249 < r < 0.276249
   95% expected band : 0.276249 < r < 0.276249
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -787026746
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.278785 +/- 0.00276992 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.278785 @ 95%CL (1 toyMC)
median expected limit: r < 0.278785 @ 95%CL (1 toyMC)
   68% expected band : 0.278785 < r < 0.278785
   95% expected band : 0.278785 < r < 0.278785
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1383823475
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26029 +/- 0.00265728 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.26029 @ 95%CL (1 toyMC)
median expected limit: r < 0.26029 @ 95%CL (1 toyMC)
   68% expected band : 0.26029 < r < 0.26029
   95% expected band : 0.26029 < r < 0.26029
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 399514591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.340101 +/- 0.00243804 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.340101 @ 95%CL (1 toyMC)
median expected limit: r < 0.340101 @ 95%CL (1 toyMC)
   68% expected band : 0.340101 < r < 0.340101
   95% expected band : 0.340101 < r < 0.340101
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -925289052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262105 +/- 0.00268775 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.262105 @ 95%CL (1 toyMC)
median expected limit: r < 0.262105 @ 95%CL (1 toyMC)
   68% expected band : 0.262105 < r < 0.262105
   95% expected band : 0.262105 < r < 0.262105
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1566359875
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.266371 +/- 0.00269589 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.266371 @ 95%CL (1 toyMC)
median expected limit: r < 0.266371 @ 95%CL (1 toyMC)
   68% expected band : 0.266371 < r < 0.266371
   95% expected band : 0.266371 < r < 0.266371
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 794192029
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26449 +/- 0.00289145 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.26449 @ 95%CL (1 toyMC)
median expected limit: r < 0.26449 @ 95%CL (1 toyMC)
   68% expected band : 0.26449 < r < 0.26449
   95% expected band : 0.26449 < r < 0.26449
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1825704346
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39097 +/- 0.00269352 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.39097 @ 95%CL (1 toyMC)
median expected limit: r < 0.39097 @ 95%CL (1 toyMC)
   68% expected band : 0.39097 < r < 0.39097
   95% expected band : 0.39097 < r < 0.39097
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1319020991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.34743 +/- 0.00257606 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.34743 @ 95%CL (1 toyMC)
median expected limit: r < 0.34743 @ 95%CL (1 toyMC)
   68% expected band : 0.34743 < r < 0.34743
   95% expected band : 0.34743 < r < 0.34743
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1415339250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270115 +/- 0.00236441 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.270115 @ 95%CL (1 toyMC)
median expected limit: r < 0.270115 @ 95%CL (1 toyMC)
   68% expected band : 0.270115 < r < 0.270115
   95% expected band : 0.270115 < r < 0.270115
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 260424297
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.265346 +/- 0.00274849 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.265346 @ 95%CL (1 toyMC)
median expected limit: r < 0.265346 @ 95%CL (1 toyMC)
   68% expected band : 0.265346 < r < 0.265346
   95% expected band : 0.265346 < r < 0.265346
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1018500073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.381609 +/- 0.00176996 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.381609 @ 95%CL (1 toyMC)
median expected limit: r < 0.381609 @ 95%CL (1 toyMC)
   68% expected band : 0.381609 < r < 0.381609
   95% expected band : 0.381609 < r < 0.381609
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1265943102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.264275 +/- 0.00232201 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.264275 @ 95%CL (1 toyMC)
median expected limit: r < 0.264275 @ 95%CL (1 toyMC)
   68% expected band : 0.264275 < r < 0.264275
   95% expected band : 0.264275 < r < 0.264275
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1121262943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.370425 +/- 0.00248849 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.370425 @ 95%CL (1 toyMC)
median expected limit: r < 0.370425 @ 95%CL (1 toyMC)
   68% expected band : 0.370425 < r < 0.370425
   95% expected band : 0.370425 < r < 0.370425
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -666472555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.259644 +/- 0.00247098 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.259644 @ 95%CL (1 toyMC)
median expected limit: r < 0.259644 @ 95%CL (1 toyMC)
   68% expected band : 0.259644 < r < 0.259644
   95% expected band : 0.259644 < r < 0.259644
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 663797196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.257652 +/- 0.00255375 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.257652 @ 95%CL (1 toyMC)
median expected limit: r < 0.257652 @ 95%CL (1 toyMC)
   68% expected band : 0.257652 < r < 0.257652
   95% expected band : 0.257652 < r < 0.257652
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 951104852
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.452401 +/- 0.00232793 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.452401 @ 95%CL (1 toyMC)
median expected limit: r < 0.452401 @ 95%CL (1 toyMC)
   68% expected band : 0.452401 < r < 0.452401
   95% expected band : 0.452401 < r < 0.452401
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 944731699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261257 +/- 0.00294422 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.261257 @ 95%CL (1 toyMC)
median expected limit: r < 0.261257 @ 95%CL (1 toyMC)
   68% expected band : 0.261257 < r < 0.261257
   95% expected band : 0.261257 < r < 0.261257
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1362462615
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.277924 +/- 0.00266377 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.277924 @ 95%CL (1 toyMC)
median expected limit: r < 0.277924 @ 95%CL (1 toyMC)
   68% expected band : 0.277924 < r < 0.277924
   95% expected band : 0.277924 < r < 0.277924
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 464483101
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.383636 +/- 0.0025224 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.383636 @ 95%CL (1 toyMC)
median expected limit: r < 0.383636 @ 95%CL (1 toyMC)
   68% expected band : 0.383636 < r < 0.383636
   95% expected band : 0.383636 < r < 0.383636
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1254065667
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.274326 +/- 0.00316798 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.274326 @ 95%CL (1 toyMC)
median expected limit: r < 0.274326 @ 95%CL (1 toyMC)
   68% expected band : 0.274326 < r < 0.274326
   95% expected band : 0.274326 < r < 0.274326
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -601714740
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.420303 +/- 0.00221562 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.420303 @ 95%CL (1 toyMC)
median expected limit: r < 0.420303 @ 95%CL (1 toyMC)
   68% expected band : 0.420303 < r < 0.420303
   95% expected band : 0.420303 < r < 0.420303
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 531040380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.269218 +/- 0.00344458 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.269218 @ 95%CL (1 toyMC)
median expected limit: r < 0.269218 @ 95%CL (1 toyMC)
   68% expected band : 0.269218 < r < 0.269218
   95% expected band : 0.269218 < r < 0.269218
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -149445250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.264669 +/- 0.00246708 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.264669 @ 95%CL (1 toyMC)
median expected limit: r < 0.264669 @ 95%CL (1 toyMC)
   68% expected band : 0.264669 < r < 0.264669
   95% expected band : 0.264669 < r < 0.264669
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1600717810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.264211 +/- 0.00256845 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.264211 @ 95%CL (1 toyMC)
median expected limit: r < 0.264211 @ 95%CL (1 toyMC)
   68% expected band : 0.264211 < r < 0.264211
   95% expected band : 0.264211 < r < 0.264211
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -62988903
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.374786 +/- 0.0022506 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.374786 @ 95%CL (1 toyMC)
median expected limit: r < 0.374786 @ 95%CL (1 toyMC)
   68% expected band : 0.374786 < r < 0.374786
   95% expected band : 0.374786 < r < 0.374786
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1988591975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.442992 +/- 0.00248239 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.442992 @ 95%CL (1 toyMC)
median expected limit: r < 0.442992 @ 95%CL (1 toyMC)
   68% expected band : 0.442992 < r < 0.442992
   95% expected band : 0.442992 < r < 0.442992
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1342470831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.595913 +/- 0.00280473 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.595913 @ 95%CL (1 toyMC)
median expected limit: r < 0.595913 @ 95%CL (1 toyMC)
   68% expected band : 0.595913 < r < 0.595913
   95% expected band : 0.595913 < r < 0.595913
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 253550580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263712 +/- 0.00273391 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.263712 @ 95%CL (1 toyMC)
median expected limit: r < 0.263712 @ 95%CL (1 toyMC)
   68% expected band : 0.263712 < r < 0.263712
   95% expected band : 0.263712 < r < 0.263712
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1579121454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.357954 +/- 0.00213168 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.357954 @ 95%CL (1 toyMC)
median expected limit: r < 0.357954 @ 95%CL (1 toyMC)
   68% expected band : 0.357954 < r < 0.357954
   95% expected band : 0.357954 < r < 0.357954
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -667560450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260592 +/- 0.00223723 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.260592 @ 95%CL (1 toyMC)
median expected limit: r < 0.260592 @ 95%CL (1 toyMC)
   68% expected band : 0.260592 < r < 0.260592
   95% expected band : 0.260592 < r < 0.260592
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -918157793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.259728 +/- 0.00288121 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.259728 @ 95%CL (1 toyMC)
median expected limit: r < 0.259728 @ 95%CL (1 toyMC)
   68% expected band : 0.259728 < r < 0.259728
   95% expected band : 0.259728 < r < 0.259728
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -594158367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272978 +/- 0.00281704 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.272978 @ 95%CL (1 toyMC)
median expected limit: r < 0.272978 @ 95%CL (1 toyMC)
   68% expected band : 0.272978 < r < 0.272978
   95% expected band : 0.272978 < r < 0.272978
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 319126821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263444 +/- 0.00280811 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.263444 @ 95%CL (1 toyMC)
median expected limit: r < 0.263444 @ 95%CL (1 toyMC)
   68% expected band : 0.263444 < r < 0.263444
   95% expected band : 0.263444 < r < 0.263444
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 674266138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262506 +/- 0.00282066 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.262506 @ 95%CL (1 toyMC)
median expected limit: r < 0.262506 @ 95%CL (1 toyMC)
   68% expected band : 0.262506 < r < 0.262506
   95% expected band : 0.262506 < r < 0.262506
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 372469912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263562 +/- 0.00231652 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.263562 @ 95%CL (1 toyMC)
median expected limit: r < 0.263562 @ 95%CL (1 toyMC)
   68% expected band : 0.263562 < r < 0.263562
   95% expected band : 0.263562 < r < 0.263562
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 955305127
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.264756 +/- 0.00248253 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.264756 @ 95%CL (1 toyMC)
median expected limit: r < 0.264756 @ 95%CL (1 toyMC)
   68% expected band : 0.264756 < r < 0.264756
   95% expected band : 0.264756 < r < 0.264756
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1756808329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.396994 +/- 0.00208496 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.396994 @ 95%CL (1 toyMC)
median expected limit: r < 0.396994 @ 95%CL (1 toyMC)
   68% expected band : 0.396994 < r < 0.396994
   95% expected band : 0.396994 < r < 0.396994
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1858851683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263424 +/- 0.00269412 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.263424 @ 95%CL (1 toyMC)
median expected limit: r < 0.263424 @ 95%CL (1 toyMC)
   68% expected band : 0.263424 < r < 0.263424
   95% expected band : 0.263424 < r < 0.263424
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1802824489
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.257877 +/- 0.0024399 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.257877 @ 95%CL (1 toyMC)
median expected limit: r < 0.257877 @ 95%CL (1 toyMC)
   68% expected band : 0.257877 < r < 0.257877
   95% expected band : 0.257877 < r < 0.257877
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2104838486
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.385221 +/- 0.00203084 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.385221 @ 95%CL (1 toyMC)
median expected limit: r < 0.385221 @ 95%CL (1 toyMC)
   68% expected band : 0.385221 < r < 0.385221
   95% expected band : 0.385221 < r < 0.385221
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 900782244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26996 +/- 0.00252069 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.26996 @ 95%CL (1 toyMC)
median expected limit: r < 0.26996 @ 95%CL (1 toyMC)
   68% expected band : 0.26996 < r < 0.26996
   95% expected band : 0.26996 < r < 0.26996
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1169655834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.439081 +/- 0.00220046 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.439081 @ 95%CL (1 toyMC)
median expected limit: r < 0.439081 @ 95%CL (1 toyMC)
   68% expected band : 0.439081 < r < 0.439081
   95% expected band : 0.439081 < r < 0.439081
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1207689049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268865 +/- 0.00242045 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.268865 @ 95%CL (1 toyMC)
median expected limit: r < 0.268865 @ 95%CL (1 toyMC)
   68% expected band : 0.268865 < r < 0.268865
   95% expected band : 0.268865 < r < 0.268865
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2006671251
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268767 +/- 0.00314362 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.268767 @ 95%CL (1 toyMC)
median expected limit: r < 0.268767 @ 95%CL (1 toyMC)
   68% expected band : 0.268767 < r < 0.268767
   95% expected band : 0.268767 < r < 0.268767
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1299223796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.266886 +/- 0.00272011 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.266886 @ 95%CL (1 toyMC)
median expected limit: r < 0.266886 @ 95%CL (1 toyMC)
   68% expected band : 0.266886 < r < 0.266886
   95% expected band : 0.266886 < r < 0.266886
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -678363631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.267 +/- 0.00326891 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.267 @ 95%CL (1 toyMC)
median expected limit: r < 0.267 @ 95%CL (1 toyMC)
   68% expected band : 0.267 < r < 0.267
   95% expected band : 0.267 < r < 0.267
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1721744166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.525114 +/- 0.00200026 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.525114 @ 95%CL (1 toyMC)
median expected limit: r < 0.525114 @ 95%CL (1 toyMC)
   68% expected band : 0.525114 < r < 0.525114
   95% expected band : 0.525114 < r < 0.525114
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -320987046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.394966 +/- 0.00216026 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.394966 @ 95%CL (1 toyMC)
median expected limit: r < 0.394966 @ 95%CL (1 toyMC)
   68% expected band : 0.394966 < r < 0.394966
   95% expected band : 0.394966 < r < 0.394966
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -228553582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.392727 +/- 0.00234441 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.392727 @ 95%CL (1 toyMC)
median expected limit: r < 0.392727 @ 95%CL (1 toyMC)
   68% expected band : 0.392727 < r < 0.392727
   95% expected band : 0.392727 < r < 0.392727
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -32211244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263689 +/- 0.00274594 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.263689 @ 95%CL (1 toyMC)
median expected limit: r < 0.263689 @ 95%CL (1 toyMC)
   68% expected band : 0.263689 < r < 0.263689
   95% expected band : 0.263689 < r < 0.263689
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -880577943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.27267 +/- 0.00278393 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.27267 @ 95%CL (1 toyMC)
median expected limit: r < 0.27267 @ 95%CL (1 toyMC)
   68% expected band : 0.27267 < r < 0.27267
   95% expected band : 0.27267 < r < 0.27267
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1105323164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.403924 +/- 0.00241601 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.403924 @ 95%CL (1 toyMC)
median expected limit: r < 0.403924 @ 95%CL (1 toyMC)
   68% expected band : 0.403924 < r < 0.403924
   95% expected band : 0.403924 < r < 0.403924
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 22934794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.45927 +/- 0.00224797 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.45927 @ 95%CL (1 toyMC)
median expected limit: r < 0.45927 @ 95%CL (1 toyMC)
   68% expected band : 0.45927 < r < 0.45927
   95% expected band : 0.45927 < r < 0.45927
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1813188980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.27335 +/- 0.00241956 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.27335 @ 95%CL (1 toyMC)
median expected limit: r < 0.27335 @ 95%CL (1 toyMC)
   68% expected band : 0.27335 < r < 0.27335
   95% expected band : 0.27335 < r < 0.27335
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 41083885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.35435 +/- 0.00252155 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.35435 @ 95%CL (1 toyMC)
median expected limit: r < 0.35435 @ 95%CL (1 toyMC)
   68% expected band : 0.35435 < r < 0.35435
   95% expected band : 0.35435 < r < 0.35435
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1955679959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.269933 +/- 0.00336921 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.269933 @ 95%CL (1 toyMC)
median expected limit: r < 0.269933 @ 95%CL (1 toyMC)
   68% expected band : 0.269933 < r < 0.269933
   95% expected band : 0.269933 < r < 0.269933
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1663914088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.376724 +/- 0.00300071 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.376724 @ 95%CL (1 toyMC)
median expected limit: r < 0.376724 @ 95%CL (1 toyMC)
   68% expected band : 0.376724 < r < 0.376724
   95% expected band : 0.376724 < r < 0.376724
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1249291198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.279419 +/- 0.00316587 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.279419 @ 95%CL (1 toyMC)
median expected limit: r < 0.279419 @ 95%CL (1 toyMC)
   68% expected band : 0.279419 < r < 0.279419
   95% expected band : 0.279419 < r < 0.279419
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 42738638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.357327 +/- 0.00248968 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.357327 @ 95%CL (1 toyMC)
median expected limit: r < 0.357327 @ 95%CL (1 toyMC)
   68% expected band : 0.357327 < r < 0.357327
   95% expected band : 0.357327 < r < 0.357327
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -914822454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.364822 +/- 0.00264 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.364822 @ 95%CL (1 toyMC)
median expected limit: r < 0.364822 @ 95%CL (1 toyMC)
   68% expected band : 0.364822 < r < 0.364822
   95% expected band : 0.364822 < r < 0.364822
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1000054203.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1009503662.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1028954936.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1066453760.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1207689049.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1249291198.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-128229417.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1319020991.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1342470831.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1364470575.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1404535528.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1429437547.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-149445250.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1579121454.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1600717810.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-160829148.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1663914088.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1721744166.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1723356303.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1802824489.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1813188980.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1818764639.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1878714095.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-1948884353.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-1955679959.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1987819385.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-2069375217.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-2104838486.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-2130148384.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-228553582.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-258377030.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-320987046.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-32211244.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-462824683.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-594158367.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-601714740.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-61070452.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-62988903.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-666472555.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-667560450.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-67517304.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-678363631.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-787026746.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-880577943.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-914822454.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-918157793.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-925289052.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.1018500073.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.1037034379.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.1061002931.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.1105323164.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.1121262943.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1169655834.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1198414604.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1214138617.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1254065667.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1265943102.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1292295341.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1299223796.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1323660994.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1362462615.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1383823475.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1415339250.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1477561126.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1566359875.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1579862138.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1673182776.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1756808329.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1825704346.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1858851683.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1983733916.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1988591975.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.2004790123.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.2006671251.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.2061257933.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.2103796636.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.2135146396.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.22934794.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.253550580.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.260424297.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.319126821.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.372469912.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.399514591.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.41083885.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.42738638.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.451182916.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.464483101.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.492564160.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.531040380.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.595180713.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.642056327.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.663797196.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.674266138.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.675680125.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.727764515.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.794192029.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.900782244.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.944731699.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.951104852.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.955305127.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1078945038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.290825 +/- 0.00235281 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.290825 @ 95%CL (1 toyMC)
median expected limit: r < 0.290825 @ 95%CL (1 toyMC)
   68% expected band : 0.290825 < r < 0.290825
   95% expected band : 0.290825 < r < 0.290825
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -591868772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.278908 +/- 0.00256442 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.278908 @ 95%CL (1 toyMC)
median expected limit: r < 0.278908 @ 95%CL (1 toyMC)
   68% expected band : 0.278908 < r < 0.278908
   95% expected band : 0.278908 < r < 0.278908
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1469169477
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.415641 +/- 0.00291454 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.415641 @ 95%CL (1 toyMC)
median expected limit: r < 0.415641 @ 95%CL (1 toyMC)
   68% expected band : 0.415641 < r < 0.415641
   95% expected band : 0.415641 < r < 0.415641
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1329618755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281799 +/- 0.00261004 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.281799 @ 95%CL (1 toyMC)
median expected limit: r < 0.281799 @ 95%CL (1 toyMC)
   68% expected band : 0.281799 < r < 0.281799
   95% expected band : 0.281799 < r < 0.281799
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 815304445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387858 +/- 0.00220201 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.387858 @ 95%CL (1 toyMC)
median expected limit: r < 0.387858 @ 95%CL (1 toyMC)
   68% expected band : 0.387858 < r < 0.387858
   95% expected band : 0.387858 < r < 0.387858
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 819355186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.385525 +/- 0.00217297 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.385525 @ 95%CL (1 toyMC)
median expected limit: r < 0.385525 @ 95%CL (1 toyMC)
   68% expected band : 0.385525 < r < 0.385525
   95% expected band : 0.385525 < r < 0.385525
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -980667346
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393455 +/- 0.00284115 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.393455 @ 95%CL (1 toyMC)
median expected limit: r < 0.393455 @ 95%CL (1 toyMC)
   68% expected band : 0.393455 < r < 0.393455
   95% expected band : 0.393455 < r < 0.393455
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2009311636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28947 +/- 0.00278224 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.28947 @ 95%CL (1 toyMC)
median expected limit: r < 0.28947 @ 95%CL (1 toyMC)
   68% expected band : 0.28947 < r < 0.28947
   95% expected band : 0.28947 < r < 0.28947
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1480918361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.277932 +/- 0.00237854 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.277932 @ 95%CL (1 toyMC)
median expected limit: r < 0.277932 @ 95%CL (1 toyMC)
   68% expected band : 0.277932 < r < 0.277932
   95% expected band : 0.277932 < r < 0.277932
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 303648561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285427 +/- 0.00279885 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.285427 @ 95%CL (1 toyMC)
median expected limit: r < 0.285427 @ 95%CL (1 toyMC)
   68% expected band : 0.285427 < r < 0.285427
   95% expected band : 0.285427 < r < 0.285427
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -801161514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.382702 +/- 0.00263516 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.382702 @ 95%CL (1 toyMC)
median expected limit: r < 0.382702 @ 95%CL (1 toyMC)
   68% expected band : 0.382702 < r < 0.382702
   95% expected band : 0.382702 < r < 0.382702
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1151056264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280498 +/- 0.00272013 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.280498 @ 95%CL (1 toyMC)
median expected limit: r < 0.280498 @ 95%CL (1 toyMC)
   68% expected band : 0.280498 < r < 0.280498
   95% expected band : 0.280498 < r < 0.280498
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1974040030
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.408861 +/- 0.00255622 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.408861 @ 95%CL (1 toyMC)
median expected limit: r < 0.408861 @ 95%CL (1 toyMC)
   68% expected band : 0.408861 < r < 0.408861
   95% expected band : 0.408861 < r < 0.408861
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1231449351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.851156 +/- 0.00233971 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.851156 @ 95%CL (1 toyMC)
median expected limit: r < 0.851156 @ 95%CL (1 toyMC)
   68% expected band : 0.851156 < r < 0.851156
   95% expected band : 0.851156 < r < 0.851156
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 53771490
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.4039 +/- 0.00188969 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.4039 @ 95%CL (1 toyMC)
median expected limit: r < 0.4039 @ 95%CL (1 toyMC)
   68% expected band : 0.4039 < r < 0.4039
   95% expected band : 0.4039 < r < 0.4039
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2107606435
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39622 +/- 0.00203504 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.39622 @ 95%CL (1 toyMC)
median expected limit: r < 0.39622 @ 95%CL (1 toyMC)
   68% expected band : 0.39622 < r < 0.39622
   95% expected band : 0.39622 < r < 0.39622
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 373600769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.293276 +/- 0.00259225 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.293276 @ 95%CL (1 toyMC)
median expected limit: r < 0.293276 @ 95%CL (1 toyMC)
   68% expected band : 0.293276 < r < 0.293276
   95% expected band : 0.293276 < r < 0.293276
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1242501456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.423241 +/- 0.00255562 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.423241 @ 95%CL (1 toyMC)
median expected limit: r < 0.423241 @ 95%CL (1 toyMC)
   68% expected band : 0.423241 < r < 0.423241
   95% expected band : 0.423241 < r < 0.423241
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 546429957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282529 +/- 0.00248024 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.282529 @ 95%CL (1 toyMC)
median expected limit: r < 0.282529 @ 95%CL (1 toyMC)
   68% expected band : 0.282529 < r < 0.282529
   95% expected band : 0.282529 < r < 0.282529
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1975453834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.278613 +/- 0.00261097 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.278613 @ 95%CL (1 toyMC)
median expected limit: r < 0.278613 @ 95%CL (1 toyMC)
   68% expected band : 0.278613 < r < 0.278613
   95% expected band : 0.278613 < r < 0.278613
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1384817252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280136 +/- 0.00266728 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.280136 @ 95%CL (1 toyMC)
median expected limit: r < 0.280136 @ 95%CL (1 toyMC)
   68% expected band : 0.280136 < r < 0.280136
   95% expected band : 0.280136 < r < 0.280136
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -19379146
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.2809 +/- 0.00318569 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.2809 @ 95%CL (1 toyMC)
median expected limit: r < 0.2809 @ 95%CL (1 toyMC)
   68% expected band : 0.2809 < r < 0.2809
   95% expected band : 0.2809 < r < 0.2809
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1022904985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.402069 +/- 0.00216461 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.402069 @ 95%CL (1 toyMC)
median expected limit: r < 0.402069 @ 95%CL (1 toyMC)
   68% expected band : 0.402069 < r < 0.402069
   95% expected band : 0.402069 < r < 0.402069
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2028244788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.290004 +/- 0.00279037 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.290004 @ 95%CL (1 toyMC)
median expected limit: r < 0.290004 @ 95%CL (1 toyMC)
   68% expected band : 0.290004 < r < 0.290004
   95% expected band : 0.290004 < r < 0.290004
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1463272580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.287683 +/- 0.00314468 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.287683 @ 95%CL (1 toyMC)
median expected limit: r < 0.287683 @ 95%CL (1 toyMC)
   68% expected band : 0.287683 < r < 0.287683
   95% expected band : 0.287683 < r < 0.287683
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1784877474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.510523 +/- 0.00205338 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.510523 @ 95%CL (1 toyMC)
median expected limit: r < 0.510523 @ 95%CL (1 toyMC)
   68% expected band : 0.510523 < r < 0.510523
   95% expected band : 0.510523 < r < 0.510523
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1324406864
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388827 +/- 0.00244064 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.388827 @ 95%CL (1 toyMC)
median expected limit: r < 0.388827 @ 95%CL (1 toyMC)
   68% expected band : 0.388827 < r < 0.388827
   95% expected band : 0.388827 < r < 0.388827
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1497136632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.379686 +/- 0.00297236 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.379686 @ 95%CL (1 toyMC)
median expected limit: r < 0.379686 @ 95%CL (1 toyMC)
   68% expected band : 0.379686 < r < 0.379686
   95% expected band : 0.379686 < r < 0.379686
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 271750654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284498 +/- 0.0026546 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.284498 @ 95%CL (1 toyMC)
median expected limit: r < 0.284498 @ 95%CL (1 toyMC)
   68% expected band : 0.284498 < r < 0.284498
   95% expected band : 0.284498 < r < 0.284498
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1498280698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.445499 +/- 0.00236324 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.445499 @ 95%CL (1 toyMC)
median expected limit: r < 0.445499 @ 95%CL (1 toyMC)
   68% expected band : 0.445499 < r < 0.445499
   95% expected band : 0.445499 < r < 0.445499
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1093270295
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.278354 +/- 0.00250015 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.278354 @ 95%CL (1 toyMC)
median expected limit: r < 0.278354 @ 95%CL (1 toyMC)
   68% expected band : 0.278354 < r < 0.278354
   95% expected band : 0.278354 < r < 0.278354
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1473480201
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284617 +/- 0.00269341 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.284617 @ 95%CL (1 toyMC)
median expected limit: r < 0.284617 @ 95%CL (1 toyMC)
   68% expected band : 0.284617 < r < 0.284617
   95% expected band : 0.284617 < r < 0.284617
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 478655198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.579904 +/- 0.00247768 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.579904 @ 95%CL (1 toyMC)
median expected limit: r < 0.579904 @ 95%CL (1 toyMC)
   68% expected band : 0.579904 < r < 0.579904
   95% expected band : 0.579904 < r < 0.579904
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -556747982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280938 +/- 0.00307933 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.280938 @ 95%CL (1 toyMC)
median expected limit: r < 0.280938 @ 95%CL (1 toyMC)
   68% expected band : 0.280938 < r < 0.280938
   95% expected band : 0.280938 < r < 0.280938
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -323372550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29321 +/- 0.00253936 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.29321 @ 95%CL (1 toyMC)
median expected limit: r < 0.29321 @ 95%CL (1 toyMC)
   68% expected band : 0.29321 < r < 0.29321
   95% expected band : 0.29321 < r < 0.29321
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1829914653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.289776 +/- 0.00268428 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.289776 @ 95%CL (1 toyMC)
median expected limit: r < 0.289776 @ 95%CL (1 toyMC)
   68% expected band : 0.289776 < r < 0.289776
   95% expected band : 0.289776 < r < 0.289776
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1583917639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39573 +/- 0.00270867 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.39573 @ 95%CL (1 toyMC)
median expected limit: r < 0.39573 @ 95%CL (1 toyMC)
   68% expected band : 0.39573 < r < 0.39573
   95% expected band : 0.39573 < r < 0.39573
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -521662367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.277914 +/- 0.00249498 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.277914 @ 95%CL (1 toyMC)
median expected limit: r < 0.277914 @ 95%CL (1 toyMC)
   68% expected band : 0.277914 < r < 0.277914
   95% expected band : 0.277914 < r < 0.277914
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -848181954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.386984 +/- 0.00209946 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.386984 @ 95%CL (1 toyMC)
median expected limit: r < 0.386984 @ 95%CL (1 toyMC)
   68% expected band : 0.386984 < r < 0.386984
   95% expected band : 0.386984 < r < 0.386984
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2133471774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.400757 +/- 0.00248675 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.400757 @ 95%CL (1 toyMC)
median expected limit: r < 0.400757 @ 95%CL (1 toyMC)
   68% expected band : 0.400757 < r < 0.400757
   95% expected band : 0.400757 < r < 0.400757
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1476056740
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285854 +/- 0.00314916 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.285854 @ 95%CL (1 toyMC)
median expected limit: r < 0.285854 @ 95%CL (1 toyMC)
   68% expected band : 0.285854 < r < 0.285854
   95% expected band : 0.285854 < r < 0.285854
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2097850027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.399254 +/- 0.00277467 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.399254 @ 95%CL (1 toyMC)
median expected limit: r < 0.399254 @ 95%CL (1 toyMC)
   68% expected band : 0.399254 < r < 0.399254
   95% expected band : 0.399254 < r < 0.399254
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1438519901
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.443943 +/- 0.00247106 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.443943 @ 95%CL (1 toyMC)
median expected limit: r < 0.443943 @ 95%CL (1 toyMC)
   68% expected band : 0.443943 < r < 0.443943
   95% expected band : 0.443943 < r < 0.443943
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1725493316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280641 +/- 0.00268474 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.280641 @ 95%CL (1 toyMC)
median expected limit: r < 0.280641 @ 95%CL (1 toyMC)
   68% expected band : 0.280641 < r < 0.280641
   95% expected band : 0.280641 < r < 0.280641
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1134948629
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286731 +/- 0.00229242 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.286731 @ 95%CL (1 toyMC)
median expected limit: r < 0.286731 @ 95%CL (1 toyMC)
   68% expected band : 0.286731 < r < 0.286731
   95% expected band : 0.286731 < r < 0.286731
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1861893522
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28164 +/- 0.00288456 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.28164 @ 95%CL (1 toyMC)
median expected limit: r < 0.28164 @ 95%CL (1 toyMC)
   68% expected band : 0.28164 < r < 0.28164
   95% expected band : 0.28164 < r < 0.28164
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1943613144
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.429061 +/- 0.00309411 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.429061 @ 95%CL (1 toyMC)
median expected limit: r < 0.429061 @ 95%CL (1 toyMC)
   68% expected band : 0.429061 < r < 0.429061
   95% expected band : 0.429061 < r < 0.429061
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 341260505
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.377573 +/- 0.00217359 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.377573 @ 95%CL (1 toyMC)
median expected limit: r < 0.377573 @ 95%CL (1 toyMC)
   68% expected band : 0.377573 < r < 0.377573
   95% expected band : 0.377573 < r < 0.377573
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1689034356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280814 +/- 0.00296954 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.280814 @ 95%CL (1 toyMC)
median expected limit: r < 0.280814 @ 95%CL (1 toyMC)
   68% expected band : 0.280814 < r < 0.280814
   95% expected band : 0.280814 < r < 0.280814
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1958058495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.564946 +/- 0.0023742 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.564946 @ 95%CL (1 toyMC)
median expected limit: r < 0.564946 @ 95%CL (1 toyMC)
   68% expected band : 0.564946 < r < 0.564946
   95% expected band : 0.564946 < r < 0.564946
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -514681743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28029 +/- 0.00298608 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.28029 @ 95%CL (1 toyMC)
median expected limit: r < 0.28029 @ 95%CL (1 toyMC)
   68% expected band : 0.28029 < r < 0.28029
   95% expected band : 0.28029 < r < 0.28029
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 732697435
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282314 +/- 0.003108 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.282314 @ 95%CL (1 toyMC)
median expected limit: r < 0.282314 @ 95%CL (1 toyMC)
   68% expected band : 0.282314 < r < 0.282314
   95% expected band : 0.282314 < r < 0.282314
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1919335648
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.287004 +/- 0.00278887 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.287004 @ 95%CL (1 toyMC)
median expected limit: r < 0.287004 @ 95%CL (1 toyMC)
   68% expected band : 0.287004 < r < 0.287004
   95% expected band : 0.287004 < r < 0.287004
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -894393278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.409252 +/- 0.00228916 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.409252 @ 95%CL (1 toyMC)
median expected limit: r < 0.409252 @ 95%CL (1 toyMC)
   68% expected band : 0.409252 < r < 0.409252
   95% expected band : 0.409252 < r < 0.409252
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1150037305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.290095 +/- 0.002643 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.290095 @ 95%CL (1 toyMC)
median expected limit: r < 0.290095 @ 95%CL (1 toyMC)
   68% expected band : 0.290095 < r < 0.290095
   95% expected band : 0.290095 < r < 0.290095
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1203398112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.279808 +/- 0.00255514 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.279808 @ 95%CL (1 toyMC)
median expected limit: r < 0.279808 @ 95%CL (1 toyMC)
   68% expected band : 0.279808 < r < 0.279808
   95% expected band : 0.279808 < r < 0.279808
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 729557184
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.397562 +/- 0.00227949 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.397562 @ 95%CL (1 toyMC)
median expected limit: r < 0.397562 @ 95%CL (1 toyMC)
   68% expected band : 0.397562 < r < 0.397562
   95% expected band : 0.397562 < r < 0.397562
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1042794081
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.416033 +/- 0.00253058 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.416033 @ 95%CL (1 toyMC)
median expected limit: r < 0.416033 @ 95%CL (1 toyMC)
   68% expected band : 0.416033 < r < 0.416033
   95% expected band : 0.416033 < r < 0.416033
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1039446701
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.283281 +/- 0.00284305 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.283281 @ 95%CL (1 toyMC)
median expected limit: r < 0.283281 @ 95%CL (1 toyMC)
   68% expected band : 0.283281 < r < 0.283281
   95% expected band : 0.283281 < r < 0.283281
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 944319084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.27697 +/- 0.00243461 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.27697 @ 95%CL (1 toyMC)
median expected limit: r < 0.27697 @ 95%CL (1 toyMC)
   68% expected band : 0.27697 < r < 0.27697
   95% expected band : 0.27697 < r < 0.27697
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 871807234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.297396 +/- 0.00315071 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.297396 @ 95%CL (1 toyMC)
median expected limit: r < 0.297396 @ 95%CL (1 toyMC)
   68% expected band : 0.297396 < r < 0.297396
   95% expected band : 0.297396 < r < 0.297396
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1376571969
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393816 +/- 0.00270077 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.393816 @ 95%CL (1 toyMC)
median expected limit: r < 0.393816 @ 95%CL (1 toyMC)
   68% expected band : 0.393816 < r < 0.393816
   95% expected band : 0.393816 < r < 0.393816
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1356241059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.276252 +/- 0.00276451 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.276252 @ 95%CL (1 toyMC)
median expected limit: r < 0.276252 @ 95%CL (1 toyMC)
   68% expected band : 0.276252 < r < 0.276252
   95% expected band : 0.276252 < r < 0.276252
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 666164498
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.273621 +/- 0.0026351 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.273621 @ 95%CL (1 toyMC)
median expected limit: r < 0.273621 @ 95%CL (1 toyMC)
   68% expected band : 0.273621 < r < 0.273621
   95% expected band : 0.273621 < r < 0.273621
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -157088551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.537479 +/- 0.00185873 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.537479 @ 95%CL (1 toyMC)
median expected limit: r < 0.537479 @ 95%CL (1 toyMC)
   68% expected band : 0.537479 < r < 0.537479
   95% expected band : 0.537479 < r < 0.537479
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1484698837
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.287598 +/- 0.00315806 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.287598 @ 95%CL (1 toyMC)
median expected limit: r < 0.287598 @ 95%CL (1 toyMC)
   68% expected band : 0.287598 < r < 0.287598
   95% expected band : 0.287598 < r < 0.287598
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1342892928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281132 +/- 0.00263301 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.281132 @ 95%CL (1 toyMC)
median expected limit: r < 0.281132 @ 95%CL (1 toyMC)
   68% expected band : 0.281132 < r < 0.281132
   95% expected band : 0.281132 < r < 0.281132
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 941800197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284919 +/- 0.00297895 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.284919 @ 95%CL (1 toyMC)
median expected limit: r < 0.284919 @ 95%CL (1 toyMC)
   68% expected band : 0.284919 < r < 0.284919
   95% expected band : 0.284919 < r < 0.284919
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1521629055
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.3816 +/- 0.00305642 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.3816 @ 95%CL (1 toyMC)
median expected limit: r < 0.3816 @ 95%CL (1 toyMC)
   68% expected band : 0.3816 < r < 0.3816
   95% expected band : 0.3816 < r < 0.3816
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1072336879
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272643 +/- 0.00217745 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.272643 @ 95%CL (1 toyMC)
median expected limit: r < 0.272643 @ 95%CL (1 toyMC)
   68% expected band : 0.272643 < r < 0.272643
   95% expected band : 0.272643 < r < 0.272643
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1585433349
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288756 +/- 0.00279143 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.288756 @ 95%CL (1 toyMC)
median expected limit: r < 0.288756 @ 95%CL (1 toyMC)
   68% expected band : 0.288756 < r < 0.288756
   95% expected band : 0.288756 < r < 0.288756
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 402769587
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284872 +/- 0.00294472 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.284872 @ 95%CL (1 toyMC)
median expected limit: r < 0.284872 @ 95%CL (1 toyMC)
   68% expected band : 0.284872 < r < 0.284872
   95% expected band : 0.284872 < r < 0.284872
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1365657151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281936 +/- 0.00280717 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.281936 @ 95%CL (1 toyMC)
median expected limit: r < 0.281936 @ 95%CL (1 toyMC)
   68% expected band : 0.281936 < r < 0.281936
   95% expected band : 0.281936 < r < 0.281936
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1008413970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.42357 +/- 0.00236265 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.42357 @ 95%CL (1 toyMC)
median expected limit: r < 0.42357 @ 95%CL (1 toyMC)
   68% expected band : 0.42357 < r < 0.42357
   95% expected band : 0.42357 < r < 0.42357
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1142455460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285001 +/- 0.00241224 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.285001 @ 95%CL (1 toyMC)
median expected limit: r < 0.285001 @ 95%CL (1 toyMC)
   68% expected band : 0.285001 < r < 0.285001
   95% expected band : 0.285001 < r < 0.285001
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 577613511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288326 +/- 0.00248946 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.288326 @ 95%CL (1 toyMC)
median expected limit: r < 0.288326 @ 95%CL (1 toyMC)
   68% expected band : 0.288326 < r < 0.288326
   95% expected band : 0.288326 < r < 0.288326
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1608768520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.283461 +/- 0.00283683 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.283461 @ 95%CL (1 toyMC)
median expected limit: r < 0.283461 @ 95%CL (1 toyMC)
   68% expected band : 0.283461 < r < 0.283461
   95% expected band : 0.283461 < r < 0.283461
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -646469602
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.440172 +/- 0.00215372 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.440172 @ 95%CL (1 toyMC)
median expected limit: r < 0.440172 @ 95%CL (1 toyMC)
   68% expected band : 0.440172 < r < 0.440172
   95% expected band : 0.440172 < r < 0.440172
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1650648420
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.292936 +/- 0.00308862 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.292936 @ 95%CL (1 toyMC)
median expected limit: r < 0.292936 @ 95%CL (1 toyMC)
   68% expected band : 0.292936 < r < 0.292936
   95% expected band : 0.292936 < r < 0.292936
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1522453707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281439 +/- 0.00350785 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.281439 @ 95%CL (1 toyMC)
median expected limit: r < 0.281439 @ 95%CL (1 toyMC)
   68% expected band : 0.281439 < r < 0.281439
   95% expected band : 0.281439 < r < 0.281439
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1615945155
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285152 +/- 0.00285395 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.285152 @ 95%CL (1 toyMC)
median expected limit: r < 0.285152 @ 95%CL (1 toyMC)
   68% expected band : 0.285152 < r < 0.285152
   95% expected band : 0.285152 < r < 0.285152
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1899606149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.397069 +/- 0.0021334 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.397069 @ 95%CL (1 toyMC)
median expected limit: r < 0.397069 @ 95%CL (1 toyMC)
   68% expected band : 0.397069 < r < 0.397069
   95% expected band : 0.397069 < r < 0.397069
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1006923442
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.290067 +/- 0.00342812 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.290067 @ 95%CL (1 toyMC)
median expected limit: r < 0.290067 @ 95%CL (1 toyMC)
   68% expected band : 0.290067 < r < 0.290067
   95% expected band : 0.290067 < r < 0.290067
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 360459798
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.381664 +/- 0.00288158 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.381664 @ 95%CL (1 toyMC)
median expected limit: r < 0.381664 @ 95%CL (1 toyMC)
   68% expected band : 0.381664 < r < 0.381664
   95% expected band : 0.381664 < r < 0.381664
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 977739541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28769 +/- 0.00272269 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.28769 @ 95%CL (1 toyMC)
median expected limit: r < 0.28769 @ 95%CL (1 toyMC)
   68% expected band : 0.28769 < r < 0.28769
   95% expected band : 0.28769 < r < 0.28769
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1188122761
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.382679 +/- 0.00260581 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.382679 @ 95%CL (1 toyMC)
median expected limit: r < 0.382679 @ 95%CL (1 toyMC)
   68% expected band : 0.382679 < r < 0.382679
   95% expected band : 0.382679 < r < 0.382679
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 286846208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.376944 +/- 0.0020385 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.376944 @ 95%CL (1 toyMC)
median expected limit: r < 0.376944 @ 95%CL (1 toyMC)
   68% expected band : 0.376944 < r < 0.376944
   95% expected band : 0.376944 < r < 0.376944
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1263455142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.399593 +/- 0.00252798 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.399593 @ 95%CL (1 toyMC)
median expected limit: r < 0.399593 @ 95%CL (1 toyMC)
   68% expected band : 0.399593 < r < 0.399593
   95% expected band : 0.399593 < r < 0.399593
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2087476178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285622 +/- 0.00271748 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.285622 @ 95%CL (1 toyMC)
median expected limit: r < 0.285622 @ 95%CL (1 toyMC)
   68% expected band : 0.285622 < r < 0.285622
   95% expected band : 0.285622 < r < 0.285622
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1420843023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.427279 +/- 0.00182956 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.427279 @ 95%CL (1 toyMC)
median expected limit: r < 0.427279 @ 95%CL (1 toyMC)
   68% expected band : 0.427279 < r < 0.427279
   95% expected band : 0.427279 < r < 0.427279
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1210060266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.403636 +/- 0.00216747 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.403636 @ 95%CL (1 toyMC)
median expected limit: r < 0.403636 @ 95%CL (1 toyMC)
   68% expected band : 0.403636 < r < 0.403636
   95% expected band : 0.403636 < r < 0.403636
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 441266055
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282919 +/- 0.00289006 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.282919 @ 95%CL (1 toyMC)
median expected limit: r < 0.282919 @ 95%CL (1 toyMC)
   68% expected band : 0.282919 < r < 0.282919
   95% expected band : 0.282919 < r < 0.282919
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -858639646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286943 +/- 0.00322746 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.286943 @ 95%CL (1 toyMC)
median expected limit: r < 0.286943 @ 95%CL (1 toyMC)
   68% expected band : 0.286943 < r < 0.286943
   95% expected band : 0.286943 < r < 0.286943
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -805776366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288979 +/- 0.00315432 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.288979 @ 95%CL (1 toyMC)
median expected limit: r < 0.288979 @ 95%CL (1 toyMC)
   68% expected band : 0.288979 < r < 0.288979
   95% expected band : 0.288979 < r < 0.288979
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -501075313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.516073 +/- 0.00229346 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.516073 @ 95%CL (1 toyMC)
median expected limit: r < 0.516073 @ 95%CL (1 toyMC)
   68% expected band : 0.516073 < r < 0.516073
   95% expected band : 0.516073 < r < 0.516073
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 7224517
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.450223 +/- 0.00246536 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.450223 @ 95%CL (1 toyMC)
median expected limit: r < 0.450223 @ 95%CL (1 toyMC)
   68% expected band : 0.450223 < r < 0.450223
   95% expected band : 0.450223 < r < 0.450223
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1561518308
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281023 +/- 0.00273028 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.281023 @ 95%CL (1 toyMC)
median expected limit: r < 0.281023 @ 95%CL (1 toyMC)
   68% expected band : 0.281023 < r < 0.281023
   95% expected band : 0.281023 < r < 0.281023
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1410932234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.275768 +/- 0.00271785 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.275768 @ 95%CL (1 toyMC)
median expected limit: r < 0.275768 @ 95%CL (1 toyMC)
   68% expected band : 0.275768 < r < 0.275768
   95% expected band : 0.275768 < r < 0.275768
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 611696352
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.43158 +/- 0.0025082 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.43158 @ 95%CL (1 toyMC)
median expected limit: r < 0.43158 @ 95%CL (1 toyMC)
   68% expected band : 0.43158 < r < 0.43158
   95% expected band : 0.43158 < r < 0.43158
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2075356149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.276383 +/- 0.0029407 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.276383 @ 95%CL (1 toyMC)
median expected limit: r < 0.276383 @ 95%CL (1 toyMC)
   68% expected band : 0.276383 < r < 0.276383
   95% expected band : 0.276383 < r < 0.276383
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1006923442.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1008413970.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1022904985.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1042794081.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1078945038.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1093270295.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1142455460.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1150037305.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1203398112.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1231449351.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1324406864.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1329618755.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1356241059.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1410932234.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1438519901.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1480918361.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1498280698.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1522453707.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1561518308.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-157088551.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1583917639.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1585433349.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1608768520.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-1650648420.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-1829914653.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1861893522.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-1899606149.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-1919335648.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-19379146.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-2107606435.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-323372550.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-501075313.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-514681743.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-521662367.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-556747982.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-591868772.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-646469602.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-801161514.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-805776366.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-848181954.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-858639646.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-894393278.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-980667346.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.1039446701.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.1072336879.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.1134948629.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.1151056264.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.1188122761.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.1210060266.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.1242501456.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.1263455142.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.1342892928.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1365657151.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1376571969.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1384817252.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1420843023.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1463272580.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1469169477.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1473480201.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1476056740.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1484698837.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1497136632.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1521629055.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1615945155.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1689034356.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1725493316.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1784877474.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1943613144.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1958058495.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1974040030.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1975453834.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.2009311636.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.2028244788.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.2075356149.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.2087476178.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.2097850027.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.2133471774.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.271750654.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.286846208.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.303648561.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.341260505.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.360459798.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.373600769.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.402769587.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.441266055.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.478655198.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.53771490.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.546429957.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.577613511.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.611696352.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.666164498.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.7224517.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.729557184.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.732697435.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.815304445.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.819355186.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.871807234.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.941800197.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.944319084.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.977739541.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1844078860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309331 +/- 0.00260229 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.309331 @ 95%CL (1 toyMC)
median expected limit: r < 0.309331 @ 95%CL (1 toyMC)
   68% expected band : 0.309331 < r < 0.309331
   95% expected band : 0.309331 < r < 0.309331
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1541689386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.451397 +/- 0.00231935 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.451397 @ 95%CL (1 toyMC)
median expected limit: r < 0.451397 @ 95%CL (1 toyMC)
   68% expected band : 0.451397 < r < 0.451397
   95% expected band : 0.451397 < r < 0.451397
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 199213614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.315694 +/- 0.0019992 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.315694 @ 95%CL (1 toyMC)
median expected limit: r < 0.315694 @ 95%CL (1 toyMC)
   68% expected band : 0.315694 < r < 0.315694
   95% expected band : 0.315694 < r < 0.315694
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 505226783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304384 +/- 0.00228446 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.304384 @ 95%CL (1 toyMC)
median expected limit: r < 0.304384 @ 95%CL (1 toyMC)
   68% expected band : 0.304384 < r < 0.304384
   95% expected band : 0.304384 < r < 0.304384
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -482905541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.60345 +/- 0.00240437 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.60345 @ 95%CL (1 toyMC)
median expected limit: r < 0.60345 @ 95%CL (1 toyMC)
   68% expected band : 0.60345 < r < 0.60345
   95% expected band : 0.60345 < r < 0.60345
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 427575992
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.306051 +/- 0.00293007 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.306051 @ 95%CL (1 toyMC)
median expected limit: r < 0.306051 @ 95%CL (1 toyMC)
   68% expected band : 0.306051 < r < 0.306051
   95% expected band : 0.306051 < r < 0.306051
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -814677833
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312709 +/- 0.00247788 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.312709 @ 95%CL (1 toyMC)
median expected limit: r < 0.312709 @ 95%CL (1 toyMC)
   68% expected band : 0.312709 < r < 0.312709
   95% expected band : 0.312709 < r < 0.312709
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 716834643
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.444506 +/- 0.00241043 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.444506 @ 95%CL (1 toyMC)
median expected limit: r < 0.444506 @ 95%CL (1 toyMC)
   68% expected band : 0.444506 < r < 0.444506
   95% expected band : 0.444506 < r < 0.444506
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1612576237
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.303936 +/- 0.00269418 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.303936 @ 95%CL (1 toyMC)
median expected limit: r < 0.303936 @ 95%CL (1 toyMC)
   68% expected band : 0.303936 < r < 0.303936
   95% expected band : 0.303936 < r < 0.303936
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1146525720
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.472416 +/- 0.00182061 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.472416 @ 95%CL (1 toyMC)
median expected limit: r < 0.472416 @ 95%CL (1 toyMC)
   68% expected band : 0.472416 < r < 0.472416
   95% expected band : 0.472416 < r < 0.472416
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 298185713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.484131 +/- 0.00236888 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.484131 @ 95%CL (1 toyMC)
median expected limit: r < 0.484131 @ 95%CL (1 toyMC)
   68% expected band : 0.484131 < r < 0.484131
   95% expected band : 0.484131 < r < 0.484131
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 300012440
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.307218 +/- 0.00311192 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.307218 @ 95%CL (1 toyMC)
median expected limit: r < 0.307218 @ 95%CL (1 toyMC)
   68% expected band : 0.307218 < r < 0.307218
   95% expected band : 0.307218 < r < 0.307218
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -635781436
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.476264 +/- 0.00235788 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.476264 @ 95%CL (1 toyMC)
median expected limit: r < 0.476264 @ 95%CL (1 toyMC)
   68% expected band : 0.476264 < r < 0.476264
   95% expected band : 0.476264 < r < 0.476264
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1744733347
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300661 +/- 0.002954 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.300661 @ 95%CL (1 toyMC)
median expected limit: r < 0.300661 @ 95%CL (1 toyMC)
   68% expected band : 0.300661 < r < 0.300661
   95% expected band : 0.300661 < r < 0.300661
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1384402838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.302707 +/- 0.00330303 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.302707 @ 95%CL (1 toyMC)
median expected limit: r < 0.302707 @ 95%CL (1 toyMC)
   68% expected band : 0.302707 < r < 0.302707
   95% expected band : 0.302707 < r < 0.302707
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1873322415
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.310804 +/- 0.00231868 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.310804 @ 95%CL (1 toyMC)
median expected limit: r < 0.310804 @ 95%CL (1 toyMC)
   68% expected band : 0.310804 < r < 0.310804
   95% expected band : 0.310804 < r < 0.310804
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -208434433
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.306507 +/- 0.00281852 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.306507 @ 95%CL (1 toyMC)
median expected limit: r < 0.306507 @ 95%CL (1 toyMC)
   68% expected band : 0.306507 < r < 0.306507
   95% expected band : 0.306507 < r < 0.306507
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1604669264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.463046 +/- 0.0024956 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.463046 @ 95%CL (1 toyMC)
median expected limit: r < 0.463046 @ 95%CL (1 toyMC)
   68% expected band : 0.463046 < r < 0.463046
   95% expected band : 0.463046 < r < 0.463046
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2083998930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301822 +/- 0.00239762 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.301822 @ 95%CL (1 toyMC)
median expected limit: r < 0.301822 @ 95%CL (1 toyMC)
   68% expected band : 0.301822 < r < 0.301822
   95% expected band : 0.301822 < r < 0.301822
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -733670716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.414988 +/- 0.00267952 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.414988 @ 95%CL (1 toyMC)
median expected limit: r < 0.414988 @ 95%CL (1 toyMC)
   68% expected band : 0.414988 < r < 0.414988
   95% expected band : 0.414988 < r < 0.414988
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -733884665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304182 +/- 0.00228735 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.304182 @ 95%CL (1 toyMC)
median expected limit: r < 0.304182 @ 95%CL (1 toyMC)
   68% expected band : 0.304182 < r < 0.304182
   95% expected band : 0.304182 < r < 0.304182
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -890183
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.429311 +/- 0.00301963 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.429311 @ 95%CL (1 toyMC)
median expected limit: r < 0.429311 @ 95%CL (1 toyMC)
   68% expected band : 0.429311 < r < 0.429311
   95% expected band : 0.429311 < r < 0.429311
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 570352884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.314695 +/- 0.00274451 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.314695 @ 95%CL (1 toyMC)
median expected limit: r < 0.314695 @ 95%CL (1 toyMC)
   68% expected band : 0.314695 < r < 0.314695
   95% expected band : 0.314695 < r < 0.314695
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1495592504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.307052 +/- 0.00280006 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.307052 @ 95%CL (1 toyMC)
median expected limit: r < 0.307052 @ 95%CL (1 toyMC)
   68% expected band : 0.307052 < r < 0.307052
   95% expected band : 0.307052 < r < 0.307052
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1247553587
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.449569 +/- 0.00211698 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.449569 @ 95%CL (1 toyMC)
median expected limit: r < 0.449569 @ 95%CL (1 toyMC)
   68% expected band : 0.449569 < r < 0.449569
   95% expected band : 0.449569 < r < 0.449569
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1396655799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.306081 +/- 0.0034059 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.306081 @ 95%CL (1 toyMC)
median expected limit: r < 0.306081 @ 95%CL (1 toyMC)
   68% expected band : 0.306081 < r < 0.306081
   95% expected band : 0.306081 < r < 0.306081
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 233436368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.303272 +/- 0.00293766 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.303272 @ 95%CL (1 toyMC)
median expected limit: r < 0.303272 @ 95%CL (1 toyMC)
   68% expected band : 0.303272 < r < 0.303272
   95% expected band : 0.303272 < r < 0.303272
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -915100752
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300444 +/- 0.00227989 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.300444 @ 95%CL (1 toyMC)
median expected limit: r < 0.300444 @ 95%CL (1 toyMC)
   68% expected band : 0.300444 < r < 0.300444
   95% expected band : 0.300444 < r < 0.300444
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1076670995
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.302337 +/- 0.00318194 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.302337 @ 95%CL (1 toyMC)
median expected limit: r < 0.302337 @ 95%CL (1 toyMC)
   68% expected band : 0.302337 < r < 0.302337
   95% expected band : 0.302337 < r < 0.302337
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1488035676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301548 +/- 0.00270353 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.301548 @ 95%CL (1 toyMC)
median expected limit: r < 0.301548 @ 95%CL (1 toyMC)
   68% expected band : 0.301548 < r < 0.301548
   95% expected band : 0.301548 < r < 0.301548
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1561376593
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301946 +/- 0.00240051 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.301946 @ 95%CL (1 toyMC)
median expected limit: r < 0.301946 @ 95%CL (1 toyMC)
   68% expected band : 0.301946 < r < 0.301946
   95% expected band : 0.301946 < r < 0.301946
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1577678578
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301554 +/- 0.0027744 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.301554 @ 95%CL (1 toyMC)
median expected limit: r < 0.301554 @ 95%CL (1 toyMC)
   68% expected band : 0.301554 < r < 0.301554
   95% expected band : 0.301554 < r < 0.301554
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -439088196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.492456 +/- 0.00240446 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.492456 @ 95%CL (1 toyMC)
median expected limit: r < 0.492456 @ 95%CL (1 toyMC)
   68% expected band : 0.492456 < r < 0.492456
   95% expected band : 0.492456 < r < 0.492456
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1823738560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.317564 +/- 0.00288925 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.317564 @ 95%CL (1 toyMC)
median expected limit: r < 0.317564 @ 95%CL (1 toyMC)
   68% expected band : 0.317564 < r < 0.317564
   95% expected band : 0.317564 < r < 0.317564
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -404007197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.299279 +/- 0.00294124 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.299279 @ 95%CL (1 toyMC)
median expected limit: r < 0.299279 @ 95%CL (1 toyMC)
   68% expected band : 0.299279 < r < 0.299279
   95% expected band : 0.299279 < r < 0.299279
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1718262579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.44688 +/- 0.00255702 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.44688 @ 95%CL (1 toyMC)
median expected limit: r < 0.44688 @ 95%CL (1 toyMC)
   68% expected band : 0.44688 < r < 0.44688
   95% expected band : 0.44688 < r < 0.44688
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1370235963
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313834 +/- 0.00279905 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.313834 @ 95%CL (1 toyMC)
median expected limit: r < 0.313834 @ 95%CL (1 toyMC)
   68% expected band : 0.313834 < r < 0.313834
   95% expected band : 0.313834 < r < 0.313834
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1211603057
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.469124 +/- 0.00261478 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.469124 @ 95%CL (1 toyMC)
median expected limit: r < 0.469124 @ 95%CL (1 toyMC)
   68% expected band : 0.469124 < r < 0.469124
   95% expected band : 0.469124 < r < 0.469124
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1490171568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.484291 +/- 0.00275286 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.484291 @ 95%CL (1 toyMC)
median expected limit: r < 0.484291 @ 95%CL (1 toyMC)
   68% expected band : 0.484291 < r < 0.484291
   95% expected band : 0.484291 < r < 0.484291
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2081377907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.419623 +/- 0.00272862 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.419623 @ 95%CL (1 toyMC)
median expected limit: r < 0.419623 @ 95%CL (1 toyMC)
   68% expected band : 0.419623 < r < 0.419623
   95% expected band : 0.419623 < r < 0.419623
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1745211617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301961 +/- 0.0030966 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.301961 @ 95%CL (1 toyMC)
median expected limit: r < 0.301961 @ 95%CL (1 toyMC)
   68% expected band : 0.301961 < r < 0.301961
   95% expected band : 0.301961 < r < 0.301961
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -884188509
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.292681 +/- 0.0032747 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.292681 @ 95%CL (1 toyMC)
median expected limit: r < 0.292681 @ 95%CL (1 toyMC)
   68% expected band : 0.292681 < r < 0.292681
   95% expected band : 0.292681 < r < 0.292681
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1364032424
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.307604 +/- 0.00292111 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.307604 @ 95%CL (1 toyMC)
median expected limit: r < 0.307604 @ 95%CL (1 toyMC)
   68% expected band : 0.307604 < r < 0.307604
   95% expected band : 0.307604 < r < 0.307604
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 562707041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304989 +/- 0.00242387 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.304989 @ 95%CL (1 toyMC)
median expected limit: r < 0.304989 @ 95%CL (1 toyMC)
   68% expected band : 0.304989 < r < 0.304989
   95% expected band : 0.304989 < r < 0.304989
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1929595159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.306015 +/- 0.00244394 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.306015 @ 95%CL (1 toyMC)
median expected limit: r < 0.306015 @ 95%CL (1 toyMC)
   68% expected band : 0.306015 < r < 0.306015
   95% expected band : 0.306015 < r < 0.306015
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -360768940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.298687 +/- 0.00209559 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.298687 @ 95%CL (1 toyMC)
median expected limit: r < 0.298687 @ 95%CL (1 toyMC)
   68% expected band : 0.298687 < r < 0.298687
   95% expected band : 0.298687 < r < 0.298687
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1850673977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31226 +/- 0.00330434 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.31226 @ 95%CL (1 toyMC)
median expected limit: r < 0.31226 @ 95%CL (1 toyMC)
   68% expected band : 0.31226 < r < 0.31226
   95% expected band : 0.31226 < r < 0.31226
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1693392993
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.30802 +/- 0.00330726 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.30802 @ 95%CL (1 toyMC)
median expected limit: r < 0.30802 @ 95%CL (1 toyMC)
   68% expected band : 0.30802 < r < 0.30802
   95% expected band : 0.30802 < r < 0.30802
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 99093429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309978 +/- 0.00255613 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.309978 @ 95%CL (1 toyMC)
median expected limit: r < 0.309978 @ 95%CL (1 toyMC)
   68% expected band : 0.309978 < r < 0.309978
   95% expected band : 0.309978 < r < 0.309978
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1146002313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304251 +/- 0.00282255 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.304251 @ 95%CL (1 toyMC)
median expected limit: r < 0.304251 @ 95%CL (1 toyMC)
   68% expected band : 0.304251 < r < 0.304251
   95% expected band : 0.304251 < r < 0.304251
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 378617336
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309605 +/- 0.00262913 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.309605 @ 95%CL (1 toyMC)
median expected limit: r < 0.309605 @ 95%CL (1 toyMC)
   68% expected band : 0.309605 < r < 0.309605
   95% expected band : 0.309605 < r < 0.309605
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1844834668
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304711 +/- 0.00331577 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.304711 @ 95%CL (1 toyMC)
median expected limit: r < 0.304711 @ 95%CL (1 toyMC)
   68% expected band : 0.304711 < r < 0.304711
   95% expected band : 0.304711 < r < 0.304711
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1425653035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305461 +/- 0.00231411 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.305461 @ 95%CL (1 toyMC)
median expected limit: r < 0.305461 @ 95%CL (1 toyMC)
   68% expected band : 0.305461 < r < 0.305461
   95% expected band : 0.305461 < r < 0.305461
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 752144025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301926 +/- 0.002825 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.301926 @ 95%CL (1 toyMC)
median expected limit: r < 0.301926 @ 95%CL (1 toyMC)
   68% expected band : 0.301926 < r < 0.301926
   95% expected band : 0.301926 < r < 0.301926
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1732119604
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304031 +/- 0.00315932 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.304031 @ 95%CL (1 toyMC)
median expected limit: r < 0.304031 @ 95%CL (1 toyMC)
   68% expected band : 0.304031 < r < 0.304031
   95% expected band : 0.304031 < r < 0.304031
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1855436062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.296178 +/- 0.00243626 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.296178 @ 95%CL (1 toyMC)
median expected limit: r < 0.296178 @ 95%CL (1 toyMC)
   68% expected band : 0.296178 < r < 0.296178
   95% expected band : 0.296178 < r < 0.296178
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 782006853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313669 +/- 0.00234965 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.313669 @ 95%CL (1 toyMC)
median expected limit: r < 0.313669 @ 95%CL (1 toyMC)
   68% expected band : 0.313669 < r < 0.313669
   95% expected band : 0.313669 < r < 0.313669
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -311408808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.308917 +/- 0.00254307 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.308917 @ 95%CL (1 toyMC)
median expected limit: r < 0.308917 @ 95%CL (1 toyMC)
   68% expected band : 0.308917 < r < 0.308917
   95% expected band : 0.308917 < r < 0.308917
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 561994029
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.415034 +/- 0.00210875 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.415034 @ 95%CL (1 toyMC)
median expected limit: r < 0.415034 @ 95%CL (1 toyMC)
   68% expected band : 0.415034 < r < 0.415034
   95% expected band : 0.415034 < r < 0.415034
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 292890167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313199 +/- 0.00292204 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.313199 @ 95%CL (1 toyMC)
median expected limit: r < 0.313199 @ 95%CL (1 toyMC)
   68% expected band : 0.313199 < r < 0.313199
   95% expected band : 0.313199 < r < 0.313199
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -873773141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.307797 +/- 0.00240631 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.307797 @ 95%CL (1 toyMC)
median expected limit: r < 0.307797 @ 95%CL (1 toyMC)
   68% expected band : 0.307797 < r < 0.307797
   95% expected band : 0.307797 < r < 0.307797
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1792840651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.315677 +/- 0.00312304 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.315677 @ 95%CL (1 toyMC)
median expected limit: r < 0.315677 @ 95%CL (1 toyMC)
   68% expected band : 0.315677 < r < 0.315677
   95% expected band : 0.315677 < r < 0.315677
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1750693541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313855 +/- 0.00294323 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.313855 @ 95%CL (1 toyMC)
median expected limit: r < 0.313855 @ 95%CL (1 toyMC)
   68% expected band : 0.313855 < r < 0.313855
   95% expected band : 0.313855 < r < 0.313855
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 732452471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305502 +/- 0.00313098 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.305502 @ 95%CL (1 toyMC)
median expected limit: r < 0.305502 @ 95%CL (1 toyMC)
   68% expected band : 0.305502 < r < 0.305502
   95% expected band : 0.305502 < r < 0.305502
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1981742061
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.302918 +/- 0.00334377 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.302918 @ 95%CL (1 toyMC)
median expected limit: r < 0.302918 @ 95%CL (1 toyMC)
   68% expected band : 0.302918 < r < 0.302918
   95% expected band : 0.302918 < r < 0.302918
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -13566484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.306349 +/- 0.00280433 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.306349 @ 95%CL (1 toyMC)
median expected limit: r < 0.306349 @ 95%CL (1 toyMC)
   68% expected band : 0.306349 < r < 0.306349
   95% expected band : 0.306349 < r < 0.306349
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1992125513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301735 +/- 0.00208157 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.301735 @ 95%CL (1 toyMC)
median expected limit: r < 0.301735 @ 95%CL (1 toyMC)
   68% expected band : 0.301735 < r < 0.301735
   95% expected band : 0.301735 < r < 0.301735
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1116007506
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.30912 +/- 0.00254005 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.30912 @ 95%CL (1 toyMC)
median expected limit: r < 0.30912 @ 95%CL (1 toyMC)
   68% expected band : 0.30912 < r < 0.30912
   95% expected band : 0.30912 < r < 0.30912
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 550753855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304059 +/- 0.00316955 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.304059 @ 95%CL (1 toyMC)
median expected limit: r < 0.304059 @ 95%CL (1 toyMC)
   68% expected band : 0.304059 < r < 0.304059
   95% expected band : 0.304059 < r < 0.304059
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2055468573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.462 +/- 0.00235856 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.462 @ 95%CL (1 toyMC)
median expected limit: r < 0.462 @ 95%CL (1 toyMC)
   68% expected band : 0.462 < r < 0.462
   95% expected band : 0.462 < r < 0.462
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -931162813
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.302789 +/- 0.00264726 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.302789 @ 95%CL (1 toyMC)
median expected limit: r < 0.302789 @ 95%CL (1 toyMC)
   68% expected band : 0.302789 < r < 0.302789
   95% expected band : 0.302789 < r < 0.302789
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 191301697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.41374 +/- 0.0026608 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.41374 @ 95%CL (1 toyMC)
median expected limit: r < 0.41374 @ 95%CL (1 toyMC)
   68% expected band : 0.41374 < r < 0.41374
   95% expected band : 0.41374 < r < 0.41374
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1970252701
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.30043 +/- 0.00249134 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.30043 @ 95%CL (1 toyMC)
median expected limit: r < 0.30043 @ 95%CL (1 toyMC)
   68% expected band : 0.30043 < r < 0.30043
   95% expected band : 0.30043 < r < 0.30043
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -987396123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.30242 +/- 0.00252776 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.30242 @ 95%CL (1 toyMC)
median expected limit: r < 0.30242 @ 95%CL (1 toyMC)
   68% expected band : 0.30242 < r < 0.30242
   95% expected band : 0.30242 < r < 0.30242
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2013191535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305804 +/- 0.00253832 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.305804 @ 95%CL (1 toyMC)
median expected limit: r < 0.305804 @ 95%CL (1 toyMC)
   68% expected band : 0.305804 < r < 0.305804
   95% expected band : 0.305804 < r < 0.305804
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1749461035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309981 +/- 0.00239138 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.309981 @ 95%CL (1 toyMC)
median expected limit: r < 0.309981 @ 95%CL (1 toyMC)
   68% expected band : 0.309981 < r < 0.309981
   95% expected band : 0.309981 < r < 0.309981
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 864054908
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.30412 +/- 0.00258138 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.30412 @ 95%CL (1 toyMC)
median expected limit: r < 0.30412 @ 95%CL (1 toyMC)
   68% expected band : 0.30412 < r < 0.30412
   95% expected band : 0.30412 < r < 0.30412
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 964724655
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.293168 +/- 0.00245209 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.293168 @ 95%CL (1 toyMC)
median expected limit: r < 0.293168 @ 95%CL (1 toyMC)
   68% expected band : 0.293168 < r < 0.293168
   95% expected band : 0.293168 < r < 0.293168
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 408010264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304046 +/- 0.00254595 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.304046 @ 95%CL (1 toyMC)
median expected limit: r < 0.304046 @ 95%CL (1 toyMC)
   68% expected band : 0.304046 < r < 0.304046
   95% expected band : 0.304046 < r < 0.304046
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 270180636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.474542 +/- 0.00211533 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.474542 @ 95%CL (1 toyMC)
median expected limit: r < 0.474542 @ 95%CL (1 toyMC)
   68% expected band : 0.474542 < r < 0.474542
   95% expected band : 0.474542 < r < 0.474542
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 130499287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.314445 +/- 0.0028903 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.314445 @ 95%CL (1 toyMC)
median expected limit: r < 0.314445 @ 95%CL (1 toyMC)
   68% expected band : 0.314445 < r < 0.314445
   95% expected band : 0.314445 < r < 0.314445
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 290161792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.306183 +/- 0.00283894 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.306183 @ 95%CL (1 toyMC)
median expected limit: r < 0.306183 @ 95%CL (1 toyMC)
   68% expected band : 0.306183 < r < 0.306183
   95% expected band : 0.306183 < r < 0.306183
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -821130702
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.299782 +/- 0.00223178 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.299782 @ 95%CL (1 toyMC)
median expected limit: r < 0.299782 @ 95%CL (1 toyMC)
   68% expected band : 0.299782 < r < 0.299782
   95% expected band : 0.299782 < r < 0.299782
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1323747784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.433776 +/- 0.00307 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.433776 @ 95%CL (1 toyMC)
median expected limit: r < 0.433776 @ 95%CL (1 toyMC)
   68% expected band : 0.433776 < r < 0.433776
   95% expected band : 0.433776 < r < 0.433776
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -578045487
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313209 +/- 0.002509 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.313209 @ 95%CL (1 toyMC)
median expected limit: r < 0.313209 @ 95%CL (1 toyMC)
   68% expected band : 0.313209 < r < 0.313209
   95% expected band : 0.313209 < r < 0.313209
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1378232740
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305413 +/- 0.00218253 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.305413 @ 95%CL (1 toyMC)
median expected limit: r < 0.305413 @ 95%CL (1 toyMC)
   68% expected band : 0.305413 < r < 0.305413
   95% expected band : 0.305413 < r < 0.305413
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1370697729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300104 +/- 0.00227538 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.300104 @ 95%CL (1 toyMC)
median expected limit: r < 0.300104 @ 95%CL (1 toyMC)
   68% expected band : 0.300104 < r < 0.300104
   95% expected band : 0.300104 < r < 0.300104
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 450129675
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312902 +/- 0.00291046 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.312902 @ 95%CL (1 toyMC)
median expected limit: r < 0.312902 @ 95%CL (1 toyMC)
   68% expected band : 0.312902 < r < 0.312902
   95% expected band : 0.312902 < r < 0.312902
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1242925483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.293593 +/- 0.00265762 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.293593 @ 95%CL (1 toyMC)
median expected limit: r < 0.293593 @ 95%CL (1 toyMC)
   68% expected band : 0.293593 < r < 0.293593
   95% expected band : 0.293593 < r < 0.293593
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1413568598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305102 +/- 0.00256245 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.305102 @ 95%CL (1 toyMC)
median expected limit: r < 0.305102 @ 95%CL (1 toyMC)
   68% expected band : 0.305102 < r < 0.305102
   95% expected band : 0.305102 < r < 0.305102
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -332695330
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.450126 +/- 0.00254285 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.450126 @ 95%CL (1 toyMC)
median expected limit: r < 0.450126 @ 95%CL (1 toyMC)
   68% expected band : 0.450126 < r < 0.450126
   95% expected band : 0.450126 < r < 0.450126
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1504934076
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.30694 +/- 0.00237831 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.30694 @ 95%CL (1 toyMC)
median expected limit: r < 0.30694 @ 95%CL (1 toyMC)
   68% expected band : 0.30694 < r < 0.30694
   95% expected band : 0.30694 < r < 0.30694
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1463012162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.303961 +/- 0.00255183 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.303961 @ 95%CL (1 toyMC)
median expected limit: r < 0.303961 @ 95%CL (1 toyMC)
   68% expected band : 0.303961 < r < 0.303961
   95% expected band : 0.303961 < r < 0.303961
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 957650799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.302365 +/- 0.00306651 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.302365 @ 95%CL (1 toyMC)
median expected limit: r < 0.302365 @ 95%CL (1 toyMC)
   68% expected band : 0.302365 < r < 0.302365
   95% expected band : 0.302365 < r < 0.302365
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -497590736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.303672 +/- 0.00299095 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.303672 @ 95%CL (1 toyMC)
median expected limit: r < 0.303672 @ 95%CL (1 toyMC)
   68% expected band : 0.303672 < r < 0.303672
   95% expected band : 0.303672 < r < 0.303672
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -635987525
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305637 +/- 0.00240932 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.305637 @ 95%CL (1 toyMC)
median expected limit: r < 0.305637 @ 95%CL (1 toyMC)
   68% expected band : 0.305637 < r < 0.305637
   95% expected band : 0.305637 < r < 0.305637
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 511327544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301836 +/- 0.00274446 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.301836 @ 95%CL (1 toyMC)
median expected limit: r < 0.301836 @ 95%CL (1 toyMC)
   68% expected band : 0.301836 < r < 0.301836
   95% expected band : 0.301836 < r < 0.301836
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 470804992
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.427573 +/- 0.00291213 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.427573 @ 95%CL (1 toyMC)
median expected limit: r < 0.427573 @ 95%CL (1 toyMC)
   68% expected band : 0.427573 < r < 0.427573
   95% expected band : 0.427573 < r < 0.427573
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 178517768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.302394 +/- 0.00259556 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.302394 @ 95%CL (1 toyMC)
median expected limit: r < 0.302394 @ 95%CL (1 toyMC)
   68% expected band : 0.302394 < r < 0.302394
   95% expected band : 0.302394 < r < 0.302394
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 630713361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31436 +/- 0.0024138 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.31436 @ 95%CL (1 toyMC)
median expected limit: r < 0.31436 @ 95%CL (1 toyMC)
   68% expected band : 0.31436 < r < 0.31436
   95% expected band : 0.31436 < r < 0.31436
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1146002313.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1146525720.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-13566484.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1364032424.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1378232740.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1384402838.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1396655799.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1413568598.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1425653035.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1463012162.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1488035676.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1561376593.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1612576237.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1745211617.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1749461035.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1750693541.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1823738560.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1844078860.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1855436062.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1873322415.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1929595159.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1970252701.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-2013191535.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-2083998930.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-208434433.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-311408808.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-332695330.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-360768940.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-404007197.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-439088196.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-482905541.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-497590736.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-578045487.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-635781436.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-635987525.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-733670716.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-733884665.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-814677833.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-821130702.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-873773141.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-884188509.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-890183.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-915100752.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-931162813.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-987396123.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.1076670995.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.1116007506.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.1211603057.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.1242925483.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.1247553587.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.130499287.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.1323747784.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1370235963.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1370697729.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1490171568.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1495592504.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1504934076.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1541689386.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1577678578.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1604669264.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1693392993.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1718262579.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1732119604.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1744733347.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.178517768.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1792840651.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1844834668.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1850673977.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.191301697.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1981742061.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1992125513.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.199213614.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.2055468573.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.2081377907.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.233436368.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.270180636.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.290161792.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.292890167.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.298185713.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.300012440.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.378617336.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.408010264.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.427575992.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.450129675.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.470804992.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.505226783.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.511327544.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.550753855.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.561994029.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.562707041.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.570352884.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.630713361.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.716834643.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.732452471.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.752144025.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.782006853.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.864054908.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.957650799.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.964724655.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.99093429.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -930894712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.336413 +/- 0.00247143 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.336413 @ 95%CL (1 toyMC)
median expected limit: r < 0.336413 @ 95%CL (1 toyMC)
   68% expected band : 0.336413 < r < 0.336413
   95% expected band : 0.336413 < r < 0.336413
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1230992565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329251 +/- 0.00248538 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.329251 @ 95%CL (1 toyMC)
median expected limit: r < 0.329251 @ 95%CL (1 toyMC)
   68% expected band : 0.329251 < r < 0.329251
   95% expected band : 0.329251 < r < 0.329251
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1175122699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.326559 +/- 0.00314304 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.326559 @ 95%CL (1 toyMC)
median expected limit: r < 0.326559 @ 95%CL (1 toyMC)
   68% expected band : 0.326559 < r < 0.326559
   95% expected band : 0.326559 < r < 0.326559
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 688884231
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335179 +/- 0.00294992 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.335179 @ 95%CL (1 toyMC)
median expected limit: r < 0.335179 @ 95%CL (1 toyMC)
   68% expected band : 0.335179 < r < 0.335179
   95% expected band : 0.335179 < r < 0.335179
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2112691632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330466 +/- 0.0025339 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.330466 @ 95%CL (1 toyMC)
median expected limit: r < 0.330466 @ 95%CL (1 toyMC)
   68% expected band : 0.330466 < r < 0.330466
   95% expected band : 0.330466 < r < 0.330466
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1815748278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.319556 +/- 0.00245492 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.319556 @ 95%CL (1 toyMC)
median expected limit: r < 0.319556 @ 95%CL (1 toyMC)
   68% expected band : 0.319556 < r < 0.319556
   95% expected band : 0.319556 < r < 0.319556
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2130887374
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.324773 +/- 0.00218347 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.324773 @ 95%CL (1 toyMC)
median expected limit: r < 0.324773 @ 95%CL (1 toyMC)
   68% expected band : 0.324773 < r < 0.324773
   95% expected band : 0.324773 < r < 0.324773
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -737580912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.492776 +/- 0.00157049 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.492776 @ 95%CL (1 toyMC)
median expected limit: r < 0.492776 @ 95%CL (1 toyMC)
   68% expected band : 0.492776 < r < 0.492776
   95% expected band : 0.492776 < r < 0.492776
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1574226843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.32615 +/- 0.00265887 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.32615 @ 95%CL (1 toyMC)
median expected limit: r < 0.32615 @ 95%CL (1 toyMC)
   68% expected band : 0.32615 < r < 0.32615
   95% expected band : 0.32615 < r < 0.32615
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1696458827
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.331714 +/- 0.00248005 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.331714 @ 95%CL (1 toyMC)
median expected limit: r < 0.331714 @ 95%CL (1 toyMC)
   68% expected band : 0.331714 < r < 0.331714
   95% expected band : 0.331714 < r < 0.331714
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1471910975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.321377 +/- 0.0028731 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.321377 @ 95%CL (1 toyMC)
median expected limit: r < 0.321377 @ 95%CL (1 toyMC)
   68% expected band : 0.321377 < r < 0.321377
   95% expected band : 0.321377 < r < 0.321377
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1318995914
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.511828 +/- 0.00210222 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.511828 @ 95%CL (1 toyMC)
median expected limit: r < 0.511828 @ 95%CL (1 toyMC)
   68% expected band : 0.511828 < r < 0.511828
   95% expected band : 0.511828 < r < 0.511828
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 749033480
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.502774 +/- 0.00251723 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.502774 @ 95%CL (1 toyMC)
median expected limit: r < 0.502774 @ 95%CL (1 toyMC)
   68% expected band : 0.502774 < r < 0.502774
   95% expected band : 0.502774 < r < 0.502774
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1145430596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.326125 +/- 0.00286931 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.326125 @ 95%CL (1 toyMC)
median expected limit: r < 0.326125 @ 95%CL (1 toyMC)
   68% expected band : 0.326125 < r < 0.326125
   95% expected band : 0.326125 < r < 0.326125
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1655667345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.328572 +/- 0.00288638 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.328572 @ 95%CL (1 toyMC)
median expected limit: r < 0.328572 @ 95%CL (1 toyMC)
   68% expected band : 0.328572 < r < 0.328572
   95% expected band : 0.328572 < r < 0.328572
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 431435218
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.324552 +/- 0.00293592 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.324552 @ 95%CL (1 toyMC)
median expected limit: r < 0.324552 @ 95%CL (1 toyMC)
   68% expected band : 0.324552 < r < 0.324552
   95% expected band : 0.324552 < r < 0.324552
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2110622762
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.341134 +/- 0.00274278 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.341134 @ 95%CL (1 toyMC)
median expected limit: r < 0.341134 @ 95%CL (1 toyMC)
   68% expected band : 0.341134 < r < 0.341134
   95% expected band : 0.341134 < r < 0.341134
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -228181759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.328367 +/- 0.00256605 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.328367 @ 95%CL (1 toyMC)
median expected limit: r < 0.328367 @ 95%CL (1 toyMC)
   68% expected band : 0.328367 < r < 0.328367
   95% expected band : 0.328367 < r < 0.328367
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1529845725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.326819 +/- 0.00229711 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.326819 @ 95%CL (1 toyMC)
median expected limit: r < 0.326819 @ 95%CL (1 toyMC)
   68% expected band : 0.326819 < r < 0.326819
   95% expected band : 0.326819 < r < 0.326819
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1109780117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325414 +/- 0.00268109 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.325414 @ 95%CL (1 toyMC)
median expected limit: r < 0.325414 @ 95%CL (1 toyMC)
   68% expected band : 0.325414 < r < 0.325414
   95% expected band : 0.325414 < r < 0.325414
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 495314006
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.331469 +/- 0.00247875 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.331469 @ 95%CL (1 toyMC)
median expected limit: r < 0.331469 @ 95%CL (1 toyMC)
   68% expected band : 0.331469 < r < 0.331469
   95% expected band : 0.331469 < r < 0.331469
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 731613246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.466462 +/- 0.00276174 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.466462 @ 95%CL (1 toyMC)
median expected limit: r < 0.466462 @ 95%CL (1 toyMC)
   68% expected band : 0.466462 < r < 0.466462
   95% expected band : 0.466462 < r < 0.466462
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1659471171
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.334463 +/- 0.00328825 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.334463 @ 95%CL (1 toyMC)
median expected limit: r < 0.334463 @ 95%CL (1 toyMC)
   68% expected band : 0.334463 < r < 0.334463
   95% expected band : 0.334463 < r < 0.334463
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1260833210
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.334004 +/- 0.00256007 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.334004 @ 95%CL (1 toyMC)
median expected limit: r < 0.334004 @ 95%CL (1 toyMC)
   68% expected band : 0.334004 < r < 0.334004
   95% expected band : 0.334004 < r < 0.334004
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 118477620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.326766 +/- 0.00327091 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.326766 @ 95%CL (1 toyMC)
median expected limit: r < 0.326766 @ 95%CL (1 toyMC)
   68% expected band : 0.326766 < r < 0.326766
   95% expected band : 0.326766 < r < 0.326766
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1117992778
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.326439 +/- 0.00350619 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.326439 @ 95%CL (1 toyMC)
median expected limit: r < 0.326439 @ 95%CL (1 toyMC)
   68% expected band : 0.326439 < r < 0.326439
   95% expected band : 0.326439 < r < 0.326439
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -953021787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325584 +/- 0.00281535 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.325584 @ 95%CL (1 toyMC)
median expected limit: r < 0.325584 @ 95%CL (1 toyMC)
   68% expected band : 0.325584 < r < 0.325584
   95% expected band : 0.325584 < r < 0.325584
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 574928813
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.333591 +/- 0.00264355 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.333591 @ 95%CL (1 toyMC)
median expected limit: r < 0.333591 @ 95%CL (1 toyMC)
   68% expected band : 0.333591 < r < 0.333591
   95% expected band : 0.333591 < r < 0.333591
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1697936628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.32922 +/- 0.00324385 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.32922 @ 95%CL (1 toyMC)
median expected limit: r < 0.32922 @ 95%CL (1 toyMC)
   68% expected band : 0.32922 < r < 0.32922
   95% expected band : 0.32922 < r < 0.32922
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1085893622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.331616 +/- 0.00258775 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.331616 @ 95%CL (1 toyMC)
median expected limit: r < 0.331616 @ 95%CL (1 toyMC)
   68% expected band : 0.331616 < r < 0.331616
   95% expected band : 0.331616 < r < 0.331616
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 52610761
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.323509 +/- 0.00336351 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.323509 @ 95%CL (1 toyMC)
median expected limit: r < 0.323509 @ 95%CL (1 toyMC)
   68% expected band : 0.323509 < r < 0.323509
   95% expected band : 0.323509 < r < 0.323509
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1450373747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329114 +/- 0.00230051 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.329114 @ 95%CL (1 toyMC)
median expected limit: r < 0.329114 @ 95%CL (1 toyMC)
   68% expected band : 0.329114 < r < 0.329114
   95% expected band : 0.329114 < r < 0.329114
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2110206205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329668 +/- 0.00289121 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.329668 @ 95%CL (1 toyMC)
median expected limit: r < 0.329668 @ 95%CL (1 toyMC)
   68% expected band : 0.329668 < r < 0.329668
   95% expected band : 0.329668 < r < 0.329668
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -438090441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335358 +/- 0.00275446 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.335358 @ 95%CL (1 toyMC)
median expected limit: r < 0.335358 @ 95%CL (1 toyMC)
   68% expected band : 0.335358 < r < 0.335358
   95% expected band : 0.335358 < r < 0.335358
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1020942378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.321815 +/- 0.00235313 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.321815 @ 95%CL (1 toyMC)
median expected limit: r < 0.321815 @ 95%CL (1 toyMC)
   68% expected band : 0.321815 < r < 0.321815
   95% expected band : 0.321815 < r < 0.321815
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1651131046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.32446 +/- 0.00278704 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.32446 @ 95%CL (1 toyMC)
median expected limit: r < 0.32446 @ 95%CL (1 toyMC)
   68% expected band : 0.32446 < r < 0.32446
   95% expected band : 0.32446 < r < 0.32446
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1388506335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.323696 +/- 0.00311623 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.323696 @ 95%CL (1 toyMC)
median expected limit: r < 0.323696 @ 95%CL (1 toyMC)
   68% expected band : 0.323696 < r < 0.323696
   95% expected band : 0.323696 < r < 0.323696
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1725012894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.32471 +/- 0.00341202 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.32471 @ 95%CL (1 toyMC)
median expected limit: r < 0.32471 @ 95%CL (1 toyMC)
   68% expected band : 0.32471 < r < 0.32471
   95% expected band : 0.32471 < r < 0.32471
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -25159290
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329979 +/- 0.00293876 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.329979 @ 95%CL (1 toyMC)
median expected limit: r < 0.329979 @ 95%CL (1 toyMC)
   68% expected band : 0.329979 < r < 0.329979
   95% expected band : 0.329979 < r < 0.329979
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -365700727
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.666352 +/- 0.00219711 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.666352 @ 95%CL (1 toyMC)
median expected limit: r < 0.666352 @ 95%CL (1 toyMC)
   68% expected band : 0.666352 < r < 0.666352
   95% expected band : 0.666352 < r < 0.666352
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 984073103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.470903 +/- 0.00391587 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.470903 @ 95%CL (1 toyMC)
median expected limit: r < 0.470903 @ 95%CL (1 toyMC)
   68% expected band : 0.470903 < r < 0.470903
   95% expected band : 0.470903 < r < 0.470903
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 182238463
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.324821 +/- 0.00290279 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.324821 @ 95%CL (1 toyMC)
median expected limit: r < 0.324821 @ 95%CL (1 toyMC)
   68% expected band : 0.324821 < r < 0.324821
   95% expected band : 0.324821 < r < 0.324821
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 110027864
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.331727 +/- 0.00256145 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.331727 @ 95%CL (1 toyMC)
median expected limit: r < 0.331727 @ 95%CL (1 toyMC)
   68% expected band : 0.331727 < r < 0.331727
   95% expected band : 0.331727 < r < 0.331727
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2103208687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.328025 +/- 0.00284623 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.328025 @ 95%CL (1 toyMC)
median expected limit: r < 0.328025 @ 95%CL (1 toyMC)
   68% expected band : 0.328025 < r < 0.328025
   95% expected band : 0.328025 < r < 0.328025
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2056300733
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.327759 +/- 0.00295026 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.327759 @ 95%CL (1 toyMC)
median expected limit: r < 0.327759 @ 95%CL (1 toyMC)
   68% expected band : 0.327759 < r < 0.327759
   95% expected band : 0.327759 < r < 0.327759
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 379090598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.327833 +/- 0.00291864 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.327833 @ 95%CL (1 toyMC)
median expected limit: r < 0.327833 @ 95%CL (1 toyMC)
   68% expected band : 0.327833 < r < 0.327833
   95% expected band : 0.327833 < r < 0.327833
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1858460345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.476311 +/- 0.00298027 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.476311 @ 95%CL (1 toyMC)
median expected limit: r < 0.476311 @ 95%CL (1 toyMC)
   68% expected band : 0.476311 < r < 0.476311
   95% expected band : 0.476311 < r < 0.476311
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1183125926
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330721 +/- 0.00303309 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.330721 @ 95%CL (1 toyMC)
median expected limit: r < 0.330721 @ 95%CL (1 toyMC)
   68% expected band : 0.330721 < r < 0.330721
   95% expected band : 0.330721 < r < 0.330721
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1722484291
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.474303 +/- 0.00287401 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.474303 @ 95%CL (1 toyMC)
median expected limit: r < 0.474303 @ 95%CL (1 toyMC)
   68% expected band : 0.474303 < r < 0.474303
   95% expected band : 0.474303 < r < 0.474303
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -238061124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.487737 +/- 0.00243142 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.487737 @ 95%CL (1 toyMC)
median expected limit: r < 0.487737 @ 95%CL (1 toyMC)
   68% expected band : 0.487737 < r < 0.487737
   95% expected band : 0.487737 < r < 0.487737
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1077087489
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.324306 +/- 0.00280041 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.324306 @ 95%CL (1 toyMC)
median expected limit: r < 0.324306 @ 95%CL (1 toyMC)
   68% expected band : 0.324306 < r < 0.324306
   95% expected band : 0.324306 < r < 0.324306
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 933389872
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332348 +/- 0.00274788 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.332348 @ 95%CL (1 toyMC)
median expected limit: r < 0.332348 @ 95%CL (1 toyMC)
   68% expected band : 0.332348 < r < 0.332348
   95% expected band : 0.332348 < r < 0.332348
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2104928610
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.489217 +/- 0.00237024 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.489217 @ 95%CL (1 toyMC)
median expected limit: r < 0.489217 @ 95%CL (1 toyMC)
   68% expected band : 0.489217 < r < 0.489217
   95% expected band : 0.489217 < r < 0.489217
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -749051422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329267 +/- 0.00303438 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.329267 @ 95%CL (1 toyMC)
median expected limit: r < 0.329267 @ 95%CL (1 toyMC)
   68% expected band : 0.329267 < r < 0.329267
   95% expected band : 0.329267 < r < 0.329267
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -540803638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.319418 +/- 0.00273002 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.319418 @ 95%CL (1 toyMC)
median expected limit: r < 0.319418 @ 95%CL (1 toyMC)
   68% expected band : 0.319418 < r < 0.319418
   95% expected band : 0.319418 < r < 0.319418
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1710739723
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335906 +/- 0.0032116 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.335906 @ 95%CL (1 toyMC)
median expected limit: r < 0.335906 @ 95%CL (1 toyMC)
   68% expected band : 0.335906 < r < 0.335906
   95% expected band : 0.335906 < r < 0.335906
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -57232148
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.337093 +/- 0.00277298 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.337093 @ 95%CL (1 toyMC)
median expected limit: r < 0.337093 @ 95%CL (1 toyMC)
   68% expected band : 0.337093 < r < 0.337093
   95% expected band : 0.337093 < r < 0.337093
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1632157932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325967 +/- 0.0026937 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.325967 @ 95%CL (1 toyMC)
median expected limit: r < 0.325967 @ 95%CL (1 toyMC)
   68% expected band : 0.325967 < r < 0.325967
   95% expected band : 0.325967 < r < 0.325967
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1665086482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325677 +/- 0.00236771 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.325677 @ 95%CL (1 toyMC)
median expected limit: r < 0.325677 @ 95%CL (1 toyMC)
   68% expected band : 0.325677 < r < 0.325677
   95% expected band : 0.325677 < r < 0.325677
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1002802969
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.331457 +/- 0.00292264 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.331457 @ 95%CL (1 toyMC)
median expected limit: r < 0.331457 @ 95%CL (1 toyMC)
   68% expected band : 0.331457 < r < 0.331457
   95% expected band : 0.331457 < r < 0.331457
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 493090897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.498237 +/- 0.00271163 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.498237 @ 95%CL (1 toyMC)
median expected limit: r < 0.498237 @ 95%CL (1 toyMC)
   68% expected band : 0.498237 < r < 0.498237
   95% expected band : 0.498237 < r < 0.498237
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -97990367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.327938 +/- 0.00274335 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.327938 @ 95%CL (1 toyMC)
median expected limit: r < 0.327938 @ 95%CL (1 toyMC)
   68% expected band : 0.327938 < r < 0.327938
   95% expected band : 0.327938 < r < 0.327938
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1238353830
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.326713 +/- 0.00265347 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.326713 @ 95%CL (1 toyMC)
median expected limit: r < 0.326713 @ 95%CL (1 toyMC)
   68% expected band : 0.326713 < r < 0.326713
   95% expected band : 0.326713 < r < 0.326713
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 432508214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.478787 +/- 0.00230002 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.478787 @ 95%CL (1 toyMC)
median expected limit: r < 0.478787 @ 95%CL (1 toyMC)
   68% expected band : 0.478787 < r < 0.478787
   95% expected band : 0.478787 < r < 0.478787
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 950782688
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.493039 +/- 0.00259381 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.493039 @ 95%CL (1 toyMC)
median expected limit: r < 0.493039 @ 95%CL (1 toyMC)
   68% expected band : 0.493039 < r < 0.493039
   95% expected band : 0.493039 < r < 0.493039
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 62002813
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.331556 +/- 0.0023911 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.331556 @ 95%CL (1 toyMC)
median expected limit: r < 0.331556 @ 95%CL (1 toyMC)
   68% expected band : 0.331556 < r < 0.331556
   95% expected band : 0.331556 < r < 0.331556
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -365451404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332713 +/- 0.00252055 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.332713 @ 95%CL (1 toyMC)
median expected limit: r < 0.332713 @ 95%CL (1 toyMC)
   68% expected band : 0.332713 < r < 0.332713
   95% expected band : 0.332713 < r < 0.332713
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1792046208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.507907 +/- 0.00235145 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.507907 @ 95%CL (1 toyMC)
median expected limit: r < 0.507907 @ 95%CL (1 toyMC)
   68% expected band : 0.507907 < r < 0.507907
   95% expected band : 0.507907 < r < 0.507907
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 316728691
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330451 +/- 0.00273061 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.330451 @ 95%CL (1 toyMC)
median expected limit: r < 0.330451 @ 95%CL (1 toyMC)
   68% expected band : 0.330451 < r < 0.330451
   95% expected band : 0.330451 < r < 0.330451
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1296897582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.32603 +/- 0.00332808 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.32603 @ 95%CL (1 toyMC)
median expected limit: r < 0.32603 @ 95%CL (1 toyMC)
   68% expected band : 0.32603 < r < 0.32603
   95% expected band : 0.32603 < r < 0.32603
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -487359327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.487685 +/- 0.00309923 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.487685 @ 95%CL (1 toyMC)
median expected limit: r < 0.487685 @ 95%CL (1 toyMC)
   68% expected band : 0.487685 < r < 0.487685
   95% expected band : 0.487685 < r < 0.487685
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -66156886
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.331502 +/- 0.0027598 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.331502 @ 95%CL (1 toyMC)
median expected limit: r < 0.331502 @ 95%CL (1 toyMC)
   68% expected band : 0.331502 < r < 0.331502
   95% expected band : 0.331502 < r < 0.331502
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1358762324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.488313 +/- 0.00249925 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.488313 @ 95%CL (1 toyMC)
median expected limit: r < 0.488313 @ 95%CL (1 toyMC)
   68% expected band : 0.488313 < r < 0.488313
   95% expected band : 0.488313 < r < 0.488313
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1747976275
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.3291 +/- 0.00308273 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.3291 @ 95%CL (1 toyMC)
median expected limit: r < 0.3291 @ 95%CL (1 toyMC)
   68% expected band : 0.3291 < r < 0.3291
   95% expected band : 0.3291 < r < 0.3291
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -818046508
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.333036 +/- 0.00271668 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.333036 @ 95%CL (1 toyMC)
median expected limit: r < 0.333036 @ 95%CL (1 toyMC)
   68% expected band : 0.333036 < r < 0.333036
   95% expected band : 0.333036 < r < 0.333036
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -801699537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332128 +/- 0.00318835 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.332128 @ 95%CL (1 toyMC)
median expected limit: r < 0.332128 @ 95%CL (1 toyMC)
   68% expected band : 0.332128 < r < 0.332128
   95% expected band : 0.332128 < r < 0.332128
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 94236259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330523 +/- 0.00291913 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.330523 @ 95%CL (1 toyMC)
median expected limit: r < 0.330523 @ 95%CL (1 toyMC)
   68% expected band : 0.330523 < r < 0.330523
   95% expected band : 0.330523 < r < 0.330523
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1898821478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332681 +/- 0.00279491 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.332681 @ 95%CL (1 toyMC)
median expected limit: r < 0.332681 @ 95%CL (1 toyMC)
   68% expected band : 0.332681 < r < 0.332681
   95% expected band : 0.332681 < r < 0.332681
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 151221479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.324191 +/- 0.00293446 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.324191 @ 95%CL (1 toyMC)
median expected limit: r < 0.324191 @ 95%CL (1 toyMC)
   68% expected band : 0.324191 < r < 0.324191
   95% expected band : 0.324191 < r < 0.324191
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 123265597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.327669 +/- 0.00323115 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.327669 @ 95%CL (1 toyMC)
median expected limit: r < 0.327669 @ 95%CL (1 toyMC)
   68% expected band : 0.327669 < r < 0.327669
   95% expected band : 0.327669 < r < 0.327669
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -18072119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.339875 +/- 0.00236397 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.339875 @ 95%CL (1 toyMC)
median expected limit: r < 0.339875 @ 95%CL (1 toyMC)
   68% expected band : 0.339875 < r < 0.339875
   95% expected band : 0.339875 < r < 0.339875
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 652940863
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.665509 +/- 0.00250054 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.665509 @ 95%CL (1 toyMC)
median expected limit: r < 0.665509 @ 95%CL (1 toyMC)
   68% expected band : 0.665509 < r < 0.665509
   95% expected band : 0.665509 < r < 0.665509
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -384166801
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325118 +/- 0.00323645 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.325118 @ 95%CL (1 toyMC)
median expected limit: r < 0.325118 @ 95%CL (1 toyMC)
   68% expected band : 0.325118 < r < 0.325118
   95% expected band : 0.325118 < r < 0.325118
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1485221318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.49887 +/- 0.00274214 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.49887 @ 95%CL (1 toyMC)
median expected limit: r < 0.49887 @ 95%CL (1 toyMC)
   68% expected band : 0.49887 < r < 0.49887
   95% expected band : 0.49887 < r < 0.49887
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1461094727
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.331242 +/- 0.0029125 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.331242 @ 95%CL (1 toyMC)
median expected limit: r < 0.331242 @ 95%CL (1 toyMC)
   68% expected band : 0.331242 < r < 0.331242
   95% expected band : 0.331242 < r < 0.331242
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1631694043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.494737 +/- 0.00205136 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.494737 @ 95%CL (1 toyMC)
median expected limit: r < 0.494737 @ 95%CL (1 toyMC)
   68% expected band : 0.494737 < r < 0.494737
   95% expected band : 0.494737 < r < 0.494737
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 190186684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.327363 +/- 0.00250042 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.327363 @ 95%CL (1 toyMC)
median expected limit: r < 0.327363 @ 95%CL (1 toyMC)
   68% expected band : 0.327363 < r < 0.327363
   95% expected band : 0.327363 < r < 0.327363
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1079069535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.502796 +/- 0.00264559 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.502796 @ 95%CL (1 toyMC)
median expected limit: r < 0.502796 @ 95%CL (1 toyMC)
   68% expected band : 0.502796 < r < 0.502796
   95% expected band : 0.502796 < r < 0.502796
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -972742947
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.470689 +/- 0.00251518 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.470689 @ 95%CL (1 toyMC)
median expected limit: r < 0.470689 @ 95%CL (1 toyMC)
   68% expected band : 0.470689 < r < 0.470689
   95% expected band : 0.470689 < r < 0.470689
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 770825640
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.328444 +/- 0.00236006 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.328444 @ 95%CL (1 toyMC)
median expected limit: r < 0.328444 @ 95%CL (1 toyMC)
   68% expected band : 0.328444 < r < 0.328444
   95% expected band : 0.328444 < r < 0.328444
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -317468488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.627018 +/- 0.00276976 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.627018 @ 95%CL (1 toyMC)
median expected limit: r < 0.627018 @ 95%CL (1 toyMC)
   68% expected band : 0.627018 < r < 0.627018
   95% expected band : 0.627018 < r < 0.627018
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 741388990
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.328047 +/- 0.00300303 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.328047 @ 95%CL (1 toyMC)
median expected limit: r < 0.328047 @ 95%CL (1 toyMC)
   68% expected band : 0.328047 < r < 0.328047
   95% expected band : 0.328047 < r < 0.328047
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 233717192
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332118 +/- 0.00284256 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.332118 @ 95%CL (1 toyMC)
median expected limit: r < 0.332118 @ 95%CL (1 toyMC)
   68% expected band : 0.332118 < r < 0.332118
   95% expected band : 0.332118 < r < 0.332118
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -951075591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.507143 +/- 0.00285342 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.507143 @ 95%CL (1 toyMC)
median expected limit: r < 0.507143 @ 95%CL (1 toyMC)
   68% expected band : 0.507143 < r < 0.507143
   95% expected band : 0.507143 < r < 0.507143
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 567514167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.318753 +/- 0.00277742 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.318753 @ 95%CL (1 toyMC)
median expected limit: r < 0.318753 @ 95%CL (1 toyMC)
   68% expected band : 0.318753 < r < 0.318753
   95% expected band : 0.318753 < r < 0.318753
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -690757471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.328364 +/- 0.0029542 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.328364 @ 95%CL (1 toyMC)
median expected limit: r < 0.328364 @ 95%CL (1 toyMC)
   68% expected band : 0.328364 < r < 0.328364
   95% expected band : 0.328364 < r < 0.328364
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1202154668
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329451 +/- 0.0029679 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.329451 @ 95%CL (1 toyMC)
median expected limit: r < 0.329451 @ 95%CL (1 toyMC)
   68% expected band : 0.329451 < r < 0.329451
   95% expected band : 0.329451 < r < 0.329451
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -549511667
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.326198 +/- 0.00316677 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.326198 @ 95%CL (1 toyMC)
median expected limit: r < 0.326198 @ 95%CL (1 toyMC)
   68% expected band : 0.326198 < r < 0.326198
   95% expected band : 0.326198 < r < 0.326198
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 853940246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329195 +/- 0.00268107 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.329195 @ 95%CL (1 toyMC)
median expected limit: r < 0.329195 @ 95%CL (1 toyMC)
   68% expected band : 0.329195 < r < 0.329195
   95% expected band : 0.329195 < r < 0.329195
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -101374059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.462289 +/- 0.00232729 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.462289 @ 95%CL (1 toyMC)
median expected limit: r < 0.462289 @ 95%CL (1 toyMC)
   68% expected band : 0.462289 < r < 0.462289
   95% expected band : 0.462289 < r < 0.462289
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1002802969.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-101374059.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1020942378.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1077087489.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1085893622.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1109780117.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1117992778.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1183125926.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1202154668.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1230992565.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1296897582.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1318995914.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1388506335.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1461094727.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1529845725.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1631694043.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1655667345.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1665086482.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1696458827.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1697936628.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1710739723.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1725012894.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1792046208.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-18072119.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-1815748278.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1858460345.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-2056300733.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-2103208687.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-2110206205.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-228181759.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-238061124.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-25159290.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-317468488.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-365451404.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-365700727.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-384166801.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-438090441.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-487359327.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-540803638.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-549511667.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-57232148.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-66156886.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-690757471.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-737580912.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-749051422.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-801699537.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-818046508.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.-930894712.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.-951075591.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.-953021787.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.-972742947.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.-97990367.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1079069535.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.110027864.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1145430596.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1175122699.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.118477620.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.123265597.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1238353830.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1260833210.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1358762324.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1450373747.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1471910975.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1485221318.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.151221479.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1574226843.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1632157932.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1651131046.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1659471171.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1722484291.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1747976275.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.182238463.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1898821478.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.190186684.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.2104928610.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.2110622762.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.2112691632.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.2130887374.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.233717192.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.316728691.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.379090598.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.431435218.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.432508214.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.493090897.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.495314006.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.52610761.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.567514167.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.574928813.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.62002813.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.652940863.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.688884231.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.731613246.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.741388990.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.749033480.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.770825640.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.853940246.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.933389872.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.94236259.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.950782688.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.984073103.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1943548868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.353745 +/- 0.00214457 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.353745 @ 95%CL (1 toyMC)
median expected limit: r < 0.353745 @ 95%CL (1 toyMC)
   68% expected band : 0.353745 < r < 0.353745
   95% expected band : 0.353745 < r < 0.353745
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1880540284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.37049 +/- 0.003314 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.37049 @ 95%CL (1 toyMC)
median expected limit: r < 0.37049 @ 95%CL (1 toyMC)
   68% expected band : 0.37049 < r < 0.37049
   95% expected band : 0.37049 < r < 0.37049
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1568484129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.355246 +/- 0.00290042 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.355246 @ 95%CL (1 toyMC)
median expected limit: r < 0.355246 @ 95%CL (1 toyMC)
   68% expected band : 0.355246 < r < 0.355246
   95% expected band : 0.355246 < r < 0.355246
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1735036102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.35511 +/- 0.00298227 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.35511 @ 95%CL (1 toyMC)
median expected limit: r < 0.35511 @ 95%CL (1 toyMC)
   68% expected band : 0.35511 < r < 0.35511
   95% expected band : 0.35511 < r < 0.35511
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1752066088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.350519 +/- 0.00261975 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.350519 @ 95%CL (1 toyMC)
median expected limit: r < 0.350519 @ 95%CL (1 toyMC)
   68% expected band : 0.350519 < r < 0.350519
   95% expected band : 0.350519 < r < 0.350519
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -372530909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.355203 +/- 0.00313106 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.355203 @ 95%CL (1 toyMC)
median expected limit: r < 0.355203 @ 95%CL (1 toyMC)
   68% expected band : 0.355203 < r < 0.355203
   95% expected band : 0.355203 < r < 0.355203
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1953264397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.532425 +/- 0.00280816 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.532425 @ 95%CL (1 toyMC)
median expected limit: r < 0.532425 @ 95%CL (1 toyMC)
   68% expected band : 0.532425 < r < 0.532425
   95% expected band : 0.532425 < r < 0.532425
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2011440090
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.372037 +/- 0.00276941 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.372037 @ 95%CL (1 toyMC)
median expected limit: r < 0.372037 @ 95%CL (1 toyMC)
   68% expected band : 0.372037 < r < 0.372037
   95% expected band : 0.372037 < r < 0.372037
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1032548703
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.358942 +/- 0.00300113 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.358942 @ 95%CL (1 toyMC)
median expected limit: r < 0.358942 @ 95%CL (1 toyMC)
   68% expected band : 0.358942 < r < 0.358942
   95% expected band : 0.358942 < r < 0.358942
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1343373770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.562635 +/- 0.00272184 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.562635 @ 95%CL (1 toyMC)
median expected limit: r < 0.562635 @ 95%CL (1 toyMC)
   68% expected band : 0.562635 < r < 0.562635
   95% expected band : 0.562635 < r < 0.562635
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1897210811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.364232 +/- 0.00220475 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.364232 @ 95%CL (1 toyMC)
median expected limit: r < 0.364232 @ 95%CL (1 toyMC)
   68% expected band : 0.364232 < r < 0.364232
   95% expected band : 0.364232 < r < 0.364232
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1850774826
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361971 +/- 0.00318518 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.361971 @ 95%CL (1 toyMC)
median expected limit: r < 0.361971 @ 95%CL (1 toyMC)
   68% expected band : 0.361971 < r < 0.361971
   95% expected band : 0.361971 < r < 0.361971
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -583453840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.355855 +/- 0.0038886 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.355855 @ 95%CL (1 toyMC)
median expected limit: r < 0.355855 @ 95%CL (1 toyMC)
   68% expected band : 0.355855 < r < 0.355855
   95% expected band : 0.355855 < r < 0.355855
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1270614101
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.524691 +/- 0.00223248 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.524691 @ 95%CL (1 toyMC)
median expected limit: r < 0.524691 @ 95%CL (1 toyMC)
   68% expected band : 0.524691 < r < 0.524691
   95% expected band : 0.524691 < r < 0.524691
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1878357127
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.354648 +/- 0.00290065 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.354648 @ 95%CL (1 toyMC)
median expected limit: r < 0.354648 @ 95%CL (1 toyMC)
   68% expected band : 0.354648 < r < 0.354648
   95% expected band : 0.354648 < r < 0.354648
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1476173899
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.360377 +/- 0.0021547 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.360377 @ 95%CL (1 toyMC)
median expected limit: r < 0.360377 @ 95%CL (1 toyMC)
   68% expected band : 0.360377 < r < 0.360377
   95% expected band : 0.360377 < r < 0.360377
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 241102236
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.363335 +/- 0.00281274 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.363335 @ 95%CL (1 toyMC)
median expected limit: r < 0.363335 @ 95%CL (1 toyMC)
   68% expected band : 0.363335 < r < 0.363335
   95% expected band : 0.363335 < r < 0.363335
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -960407140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.533037 +/- 0.00257226 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.533037 @ 95%CL (1 toyMC)
median expected limit: r < 0.533037 @ 95%CL (1 toyMC)
   68% expected band : 0.533037 < r < 0.533037
   95% expected band : 0.533037 < r < 0.533037
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2102933318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.570612 +/- 0.00252588 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.570612 @ 95%CL (1 toyMC)
median expected limit: r < 0.570612 @ 95%CL (1 toyMC)
   68% expected band : 0.570612 < r < 0.570612
   95% expected band : 0.570612 < r < 0.570612
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 951002743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.568368 +/- 0.00214084 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.568368 @ 95%CL (1 toyMC)
median expected limit: r < 0.568368 @ 95%CL (1 toyMC)
   68% expected band : 0.568368 < r < 0.568368
   95% expected band : 0.568368 < r < 0.568368
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1688000064
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.355255 +/- 0.00336861 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.355255 @ 95%CL (1 toyMC)
median expected limit: r < 0.355255 @ 95%CL (1 toyMC)
   68% expected band : 0.355255 < r < 0.355255
   95% expected band : 0.355255 < r < 0.355255
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2046620638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.362179 +/- 0.00283342 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.362179 @ 95%CL (1 toyMC)
median expected limit: r < 0.362179 @ 95%CL (1 toyMC)
   68% expected band : 0.362179 < r < 0.362179
   95% expected band : 0.362179 < r < 0.362179
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -705504519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.523909 +/- 0.0030539 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.523909 @ 95%CL (1 toyMC)
median expected limit: r < 0.523909 @ 95%CL (1 toyMC)
   68% expected band : 0.523909 < r < 0.523909
   95% expected band : 0.523909 < r < 0.523909
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -842699488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36393 +/- 0.00300673 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.36393 @ 95%CL (1 toyMC)
median expected limit: r < 0.36393 @ 95%CL (1 toyMC)
   68% expected band : 0.36393 < r < 0.36393
   95% expected band : 0.36393 < r < 0.36393
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1144355025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.358969 +/- 0.00275254 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.358969 @ 95%CL (1 toyMC)
median expected limit: r < 0.358969 @ 95%CL (1 toyMC)
   68% expected band : 0.358969 < r < 0.358969
   95% expected band : 0.358969 < r < 0.358969
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 63250858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.525936 +/- 0.00214806 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.525936 @ 95%CL (1 toyMC)
median expected limit: r < 0.525936 @ 95%CL (1 toyMC)
   68% expected band : 0.525936 < r < 0.525936
   95% expected band : 0.525936 < r < 0.525936
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1023053496
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.358089 +/- 0.00189087 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.358089 @ 95%CL (1 toyMC)
median expected limit: r < 0.358089 @ 95%CL (1 toyMC)
   68% expected band : 0.358089 < r < 0.358089
   95% expected band : 0.358089 < r < 0.358089
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 259539000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36033 +/- 0.00247213 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.36033 @ 95%CL (1 toyMC)
median expected limit: r < 0.36033 @ 95%CL (1 toyMC)
   68% expected band : 0.36033 < r < 0.36033
   95% expected band : 0.36033 < r < 0.36033
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 997197841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.356105 +/- 0.00276478 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.356105 @ 95%CL (1 toyMC)
median expected limit: r < 0.356105 @ 95%CL (1 toyMC)
   68% expected band : 0.356105 < r < 0.356105
   95% expected band : 0.356105 < r < 0.356105
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2053614321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.364514 +/- 0.00239896 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.364514 @ 95%CL (1 toyMC)
median expected limit: r < 0.364514 @ 95%CL (1 toyMC)
   68% expected band : 0.364514 < r < 0.364514
   95% expected band : 0.364514 < r < 0.364514
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1071530970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.368839 +/- 0.00292493 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.368839 @ 95%CL (1 toyMC)
median expected limit: r < 0.368839 @ 95%CL (1 toyMC)
   68% expected band : 0.368839 < r < 0.368839
   95% expected band : 0.368839 < r < 0.368839
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1057955678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.552121 +/- 0.00218834 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.552121 @ 95%CL (1 toyMC)
median expected limit: r < 0.552121 @ 95%CL (1 toyMC)
   68% expected band : 0.552121 < r < 0.552121
   95% expected band : 0.552121 < r < 0.552121
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1255953220
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.550561 +/- 0.0026086 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.550561 @ 95%CL (1 toyMC)
median expected limit: r < 0.550561 @ 95%CL (1 toyMC)
   68% expected band : 0.550561 < r < 0.550561
   95% expected band : 0.550561 < r < 0.550561
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1230356237
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.35721 +/- 0.00273522 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.35721 @ 95%CL (1 toyMC)
median expected limit: r < 0.35721 @ 95%CL (1 toyMC)
   68% expected band : 0.35721 < r < 0.35721
   95% expected band : 0.35721 < r < 0.35721
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1880638924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.524292 +/- 0.00266402 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.524292 @ 95%CL (1 toyMC)
median expected limit: r < 0.524292 @ 95%CL (1 toyMC)
   68% expected band : 0.524292 < r < 0.524292
   95% expected band : 0.524292 < r < 0.524292
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2130389189
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361209 +/- 0.0029608 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.361209 @ 95%CL (1 toyMC)
median expected limit: r < 0.361209 @ 95%CL (1 toyMC)
   68% expected band : 0.361209 < r < 0.361209
   95% expected band : 0.361209 < r < 0.361209
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 449555012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.359624 +/- 0.00307641 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.359624 @ 95%CL (1 toyMC)
median expected limit: r < 0.359624 @ 95%CL (1 toyMC)
   68% expected band : 0.359624 < r < 0.359624
   95% expected band : 0.359624 < r < 0.359624
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1573806494
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.355651 +/- 0.00240421 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.355651 @ 95%CL (1 toyMC)
median expected limit: r < 0.355651 @ 95%CL (1 toyMC)
   68% expected band : 0.355651 < r < 0.355651
   95% expected band : 0.355651 < r < 0.355651
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1736817532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.367935 +/- 0.00271413 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.367935 @ 95%CL (1 toyMC)
median expected limit: r < 0.367935 @ 95%CL (1 toyMC)
   68% expected band : 0.367935 < r < 0.367935
   95% expected band : 0.367935 < r < 0.367935
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1567441282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36026 +/- 0.00254158 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.36026 @ 95%CL (1 toyMC)
median expected limit: r < 0.36026 @ 95%CL (1 toyMC)
   68% expected band : 0.36026 < r < 0.36026
   95% expected band : 0.36026 < r < 0.36026
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -472037463
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.355708 +/- 0.00239438 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.355708 @ 95%CL (1 toyMC)
median expected limit: r < 0.355708 @ 95%CL (1 toyMC)
   68% expected band : 0.355708 < r < 0.355708
   95% expected band : 0.355708 < r < 0.355708
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 734280857
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.540819 +/- 0.00331975 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.540819 @ 95%CL (1 toyMC)
median expected limit: r < 0.540819 @ 95%CL (1 toyMC)
   68% expected band : 0.540819 < r < 0.540819
   95% expected band : 0.540819 < r < 0.540819
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1912161945
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.352292 +/- 0.00270535 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.352292 @ 95%CL (1 toyMC)
median expected limit: r < 0.352292 @ 95%CL (1 toyMC)
   68% expected band : 0.352292 < r < 0.352292
   95% expected band : 0.352292 < r < 0.352292
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 557069956
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.358918 +/- 0.00326637 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.358918 @ 95%CL (1 toyMC)
median expected limit: r < 0.358918 @ 95%CL (1 toyMC)
   68% expected band : 0.358918 < r < 0.358918
   95% expected band : 0.358918 < r < 0.358918
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1506712920
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.353465 +/- 0.00278296 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.353465 @ 95%CL (1 toyMC)
median expected limit: r < 0.353465 @ 95%CL (1 toyMC)
   68% expected band : 0.353465 < r < 0.353465
   95% expected band : 0.353465 < r < 0.353465
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -202321960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.357067 +/- 0.00325326 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.357067 @ 95%CL (1 toyMC)
median expected limit: r < 0.357067 @ 95%CL (1 toyMC)
   68% expected band : 0.357067 < r < 0.357067
   95% expected band : 0.357067 < r < 0.357067
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1809254883
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.356481 +/- 0.0029507 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.356481 @ 95%CL (1 toyMC)
median expected limit: r < 0.356481 @ 95%CL (1 toyMC)
   68% expected band : 0.356481 < r < 0.356481
   95% expected band : 0.356481 < r < 0.356481
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1566153043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.356739 +/- 0.0028878 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.356739 @ 95%CL (1 toyMC)
median expected limit: r < 0.356739 @ 95%CL (1 toyMC)
   68% expected band : 0.356739 < r < 0.356739
   95% expected band : 0.356739 < r < 0.356739
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1521997044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.355296 +/- 0.00267904 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.355296 @ 95%CL (1 toyMC)
median expected limit: r < 0.355296 @ 95%CL (1 toyMC)
   68% expected band : 0.355296 < r < 0.355296
   95% expected band : 0.355296 < r < 0.355296
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1472904692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36278 +/- 0.00237139 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.36278 @ 95%CL (1 toyMC)
median expected limit: r < 0.36278 @ 95%CL (1 toyMC)
   68% expected band : 0.36278 < r < 0.36278
   95% expected band : 0.36278 < r < 0.36278
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1834350024
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.562619 +/- 0.0026034 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.562619 @ 95%CL (1 toyMC)
median expected limit: r < 0.562619 @ 95%CL (1 toyMC)
   68% expected band : 0.562619 < r < 0.562619
   95% expected band : 0.562619 < r < 0.562619
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -980333416
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361024 +/- 0.00347296 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.361024 @ 95%CL (1 toyMC)
median expected limit: r < 0.361024 @ 95%CL (1 toyMC)
   68% expected band : 0.361024 < r < 0.361024
   95% expected band : 0.361024 < r < 0.361024
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1290719160
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.356874 +/- 0.00314592 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.356874 @ 95%CL (1 toyMC)
median expected limit: r < 0.356874 @ 95%CL (1 toyMC)
   68% expected band : 0.356874 < r < 0.356874
   95% expected band : 0.356874 < r < 0.356874
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -428438124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.359671 +/- 0.00254401 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.359671 @ 95%CL (1 toyMC)
median expected limit: r < 0.359671 @ 95%CL (1 toyMC)
   68% expected band : 0.359671 < r < 0.359671
   95% expected band : 0.359671 < r < 0.359671
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 553115661
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.539229 +/- 0.00263397 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.539229 @ 95%CL (1 toyMC)
median expected limit: r < 0.539229 @ 95%CL (1 toyMC)
   68% expected band : 0.539229 < r < 0.539229
   95% expected band : 0.539229 < r < 0.539229
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1224006293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.359457 +/- 0.00247904 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.359457 @ 95%CL (1 toyMC)
median expected limit: r < 0.359457 @ 95%CL (1 toyMC)
   68% expected band : 0.359457 < r < 0.359457
   95% expected band : 0.359457 < r < 0.359457
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1063439125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361238 +/- 0.00332862 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.361238 @ 95%CL (1 toyMC)
median expected limit: r < 0.361238 @ 95%CL (1 toyMC)
   68% expected band : 0.361238 < r < 0.361238
   95% expected band : 0.361238 < r < 0.361238
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1365699117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.353499 +/- 0.00286693 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.353499 @ 95%CL (1 toyMC)
median expected limit: r < 0.353499 @ 95%CL (1 toyMC)
   68% expected band : 0.353499 < r < 0.353499
   95% expected band : 0.353499 < r < 0.353499
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -39147103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.526998 +/- 0.00284114 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.526998 @ 95%CL (1 toyMC)
median expected limit: r < 0.526998 @ 95%CL (1 toyMC)
   68% expected band : 0.526998 < r < 0.526998
   95% expected band : 0.526998 < r < 0.526998
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1764859593
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.363382 +/- 0.00305866 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.363382 @ 95%CL (1 toyMC)
median expected limit: r < 0.363382 @ 95%CL (1 toyMC)
   68% expected band : 0.363382 < r < 0.363382
   95% expected band : 0.363382 < r < 0.363382
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 248894671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.3639 +/- 0.00286108 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.3639 @ 95%CL (1 toyMC)
median expected limit: r < 0.3639 @ 95%CL (1 toyMC)
   68% expected band : 0.3639 < r < 0.3639
   95% expected band : 0.3639 < r < 0.3639
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -980348071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.362878 +/- 0.00251446 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.362878 @ 95%CL (1 toyMC)
median expected limit: r < 0.362878 @ 95%CL (1 toyMC)
   68% expected band : 0.362878 < r < 0.362878
   95% expected band : 0.362878 < r < 0.362878
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 389662641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.355434 +/- 0.00318345 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.355434 @ 95%CL (1 toyMC)
median expected limit: r < 0.355434 @ 95%CL (1 toyMC)
   68% expected band : 0.355434 < r < 0.355434
   95% expected band : 0.355434 < r < 0.355434
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1892419179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.350473 +/- 0.00310683 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.350473 @ 95%CL (1 toyMC)
median expected limit: r < 0.350473 @ 95%CL (1 toyMC)
   68% expected band : 0.350473 < r < 0.350473
   95% expected band : 0.350473 < r < 0.350473
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1976364353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.546134 +/- 0.00270383 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.546134 @ 95%CL (1 toyMC)
median expected limit: r < 0.546134 @ 95%CL (1 toyMC)
   68% expected band : 0.546134 < r < 0.546134
   95% expected band : 0.546134 < r < 0.546134
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 268940569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361239 +/- 0.00308757 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.361239 @ 95%CL (1 toyMC)
median expected limit: r < 0.361239 @ 95%CL (1 toyMC)
   68% expected band : 0.361239 < r < 0.361239
   95% expected band : 0.361239 < r < 0.361239
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 633882591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.354852 +/- 0.00298808 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.354852 @ 95%CL (1 toyMC)
median expected limit: r < 0.354852 @ 95%CL (1 toyMC)
   68% expected band : 0.354852 < r < 0.354852
   95% expected band : 0.354852 < r < 0.354852
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1428889379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.366514 +/- 0.00320917 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.366514 @ 95%CL (1 toyMC)
median expected limit: r < 0.366514 @ 95%CL (1 toyMC)
   68% expected band : 0.366514 < r < 0.366514
   95% expected band : 0.366514 < r < 0.366514
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1675360105
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.359938 +/- 0.00314866 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.359938 @ 95%CL (1 toyMC)
median expected limit: r < 0.359938 @ 95%CL (1 toyMC)
   68% expected band : 0.359938 < r < 0.359938
   95% expected band : 0.359938 < r < 0.359938
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -740575985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.359894 +/- 0.00289845 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.359894 @ 95%CL (1 toyMC)
median expected limit: r < 0.359894 @ 95%CL (1 toyMC)
   68% expected band : 0.359894 < r < 0.359894
   95% expected band : 0.359894 < r < 0.359894
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 345854977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.358524 +/- 0.00259553 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.358524 @ 95%CL (1 toyMC)
median expected limit: r < 0.358524 @ 95%CL (1 toyMC)
   68% expected band : 0.358524 < r < 0.358524
   95% expected band : 0.358524 < r < 0.358524
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1655010360
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.364387 +/- 0.00340057 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.364387 @ 95%CL (1 toyMC)
median expected limit: r < 0.364387 @ 95%CL (1 toyMC)
   68% expected band : 0.364387 < r < 0.364387
   95% expected band : 0.364387 < r < 0.364387
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1142383558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.53791 +/- 0.00249632 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.53791 @ 95%CL (1 toyMC)
median expected limit: r < 0.53791 @ 95%CL (1 toyMC)
   68% expected band : 0.53791 < r < 0.53791
   95% expected band : 0.53791 < r < 0.53791
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 954228474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.360172 +/- 0.0028112 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.360172 @ 95%CL (1 toyMC)
median expected limit: r < 0.360172 @ 95%CL (1 toyMC)
   68% expected band : 0.360172 < r < 0.360172
   95% expected band : 0.360172 < r < 0.360172
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1438474104
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.365631 +/- 0.00295418 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.365631 @ 95%CL (1 toyMC)
median expected limit: r < 0.365631 @ 95%CL (1 toyMC)
   68% expected band : 0.365631 < r < 0.365631
   95% expected band : 0.365631 < r < 0.365631
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -367363149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.363233 +/- 0.00285382 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.363233 @ 95%CL (1 toyMC)
median expected limit: r < 0.363233 @ 95%CL (1 toyMC)
   68% expected band : 0.363233 < r < 0.363233
   95% expected band : 0.363233 < r < 0.363233
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -578361126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.35691 +/- 0.00230134 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.35691 @ 95%CL (1 toyMC)
median expected limit: r < 0.35691 @ 95%CL (1 toyMC)
   68% expected band : 0.35691 < r < 0.35691
   95% expected band : 0.35691 < r < 0.35691
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -605624254
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36216 +/- 0.00318421 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.36216 @ 95%CL (1 toyMC)
median expected limit: r < 0.36216 @ 95%CL (1 toyMC)
   68% expected band : 0.36216 < r < 0.36216
   95% expected band : 0.36216 < r < 0.36216
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 135341297
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.362556 +/- 0.00256369 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.362556 @ 95%CL (1 toyMC)
median expected limit: r < 0.362556 @ 95%CL (1 toyMC)
   68% expected band : 0.362556 < r < 0.362556
   95% expected band : 0.362556 < r < 0.362556
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1758225581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.542953 +/- 0.00307948 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.542953 @ 95%CL (1 toyMC)
median expected limit: r < 0.542953 @ 95%CL (1 toyMC)
   68% expected band : 0.542953 < r < 0.542953
   95% expected band : 0.542953 < r < 0.542953
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1961923312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36438 +/- 0.0031214 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.36438 @ 95%CL (1 toyMC)
median expected limit: r < 0.36438 @ 95%CL (1 toyMC)
   68% expected band : 0.36438 < r < 0.36438
   95% expected band : 0.36438 < r < 0.36438
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1068119284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.34859 +/- 0.00262922 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.34859 @ 95%CL (1 toyMC)
median expected limit: r < 0.34859 @ 95%CL (1 toyMC)
   68% expected band : 0.34859 < r < 0.34859
   95% expected band : 0.34859 < r < 0.34859
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1458121851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.364886 +/- 0.00277303 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.364886 @ 95%CL (1 toyMC)
median expected limit: r < 0.364886 @ 95%CL (1 toyMC)
   68% expected band : 0.364886 < r < 0.364886
   95% expected band : 0.364886 < r < 0.364886
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1781859167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.365508 +/- 0.00266363 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.365508 @ 95%CL (1 toyMC)
median expected limit: r < 0.365508 @ 95%CL (1 toyMC)
   68% expected band : 0.365508 < r < 0.365508
   95% expected band : 0.365508 < r < 0.365508
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -5386068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361547 +/- 0.00248863 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.361547 @ 95%CL (1 toyMC)
median expected limit: r < 0.361547 @ 95%CL (1 toyMC)
   68% expected band : 0.361547 < r < 0.361547
   95% expected band : 0.361547 < r < 0.361547
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 712802390
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.364108 +/- 0.00324881 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.364108 @ 95%CL (1 toyMC)
median expected limit: r < 0.364108 @ 95%CL (1 toyMC)
   68% expected band : 0.364108 < r < 0.364108
   95% expected band : 0.364108 < r < 0.364108
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1385434717
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.365991 +/- 0.00295285 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.365991 @ 95%CL (1 toyMC)
median expected limit: r < 0.365991 @ 95%CL (1 toyMC)
   68% expected band : 0.365991 < r < 0.365991
   95% expected band : 0.365991 < r < 0.365991
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1001762418
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361623 +/- 0.00333815 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.361623 @ 95%CL (1 toyMC)
median expected limit: r < 0.361623 @ 95%CL (1 toyMC)
   68% expected band : 0.361623 < r < 0.361623
   95% expected band : 0.361623 < r < 0.361623
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1414322654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.368307 +/- 0.00281132 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.368307 @ 95%CL (1 toyMC)
median expected limit: r < 0.368307 @ 95%CL (1 toyMC)
   68% expected band : 0.368307 < r < 0.368307
   95% expected band : 0.368307 < r < 0.368307
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -622851145
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.352328 +/- 0.0030622 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.352328 @ 95%CL (1 toyMC)
median expected limit: r < 0.352328 @ 95%CL (1 toyMC)
   68% expected band : 0.352328 < r < 0.352328
   95% expected band : 0.352328 < r < 0.352328
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1727951476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.560703 +/- 0.00299409 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.560703 @ 95%CL (1 toyMC)
median expected limit: r < 0.560703 @ 95%CL (1 toyMC)
   68% expected band : 0.560703 < r < 0.560703
   95% expected band : 0.560703 < r < 0.560703
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1210017647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.365822 +/- 0.00242472 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.365822 @ 95%CL (1 toyMC)
median expected limit: r < 0.365822 @ 95%CL (1 toyMC)
   68% expected band : 0.365822 < r < 0.365822
   95% expected band : 0.365822 < r < 0.365822
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1766058930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361338 +/- 0.00298406 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.361338 @ 95%CL (1 toyMC)
median expected limit: r < 0.361338 @ 95%CL (1 toyMC)
   68% expected band : 0.361338 < r < 0.361338
   95% expected band : 0.361338 < r < 0.361338
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1652938956
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.358716 +/- 0.00309862 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.358716 @ 95%CL (1 toyMC)
median expected limit: r < 0.358716 @ 95%CL (1 toyMC)
   68% expected band : 0.358716 < r < 0.358716
   95% expected band : 0.358716 < r < 0.358716
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 760563806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.351826 +/- 0.00257792 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.351826 @ 95%CL (1 toyMC)
median expected limit: r < 0.351826 @ 95%CL (1 toyMC)
   68% expected band : 0.351826 < r < 0.351826
   95% expected band : 0.351826 < r < 0.351826
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -902206930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361407 +/- 0.00298656 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.361407 @ 95%CL (1 toyMC)
median expected limit: r < 0.361407 @ 95%CL (1 toyMC)
   68% expected band : 0.361407 < r < 0.361407
   95% expected band : 0.361407 < r < 0.361407
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1018916662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361479 +/- 0.00261717 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.361479 @ 95%CL (1 toyMC)
median expected limit: r < 0.361479 @ 95%CL (1 toyMC)
   68% expected band : 0.361479 < r < 0.361479
   95% expected band : 0.361479 < r < 0.361479
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1882561057
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.362814 +/- 0.00311714 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.362814 @ 95%CL (1 toyMC)
median expected limit: r < 0.362814 @ 95%CL (1 toyMC)
   68% expected band : 0.362814 < r < 0.362814
   95% expected band : 0.362814 < r < 0.362814
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1611813904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.356123 +/- 0.00219188 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.356123 @ 95%CL (1 toyMC)
median expected limit: r < 0.356123 @ 95%CL (1 toyMC)
   68% expected band : 0.356123 < r < 0.356123
   95% expected band : 0.356123 < r < 0.356123
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1409397962
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.358297 +/- 0.00274371 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.358297 @ 95%CL (1 toyMC)
median expected limit: r < 0.358297 @ 95%CL (1 toyMC)
   68% expected band : 0.358297 < r < 0.358297
   95% expected band : 0.358297 < r < 0.358297
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1032548703.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1057955678.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1068119284.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1142383558.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1210017647.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1224006293.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1343373770.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1385434717.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1428889379.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1438474104.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1476173899.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1568484129.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1652938956.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1655010360.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1675360105.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1688000064.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1758225581.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1766058930.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-1809254883.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-1834350024.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-1850774826.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-1878357127.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-1892419179.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-1897210811.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-1943548868.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-1961923312.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-2011440090.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-202321960.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-2046620638.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-2102933318.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-367363149.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-372530909.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-39147103.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-428438124.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-472037463.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-5386068.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-578361126.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.-583453840.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.-605624254.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.-622851145.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.-705504519.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.-740575985.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.-842699488.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.-902206930.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.-960407140.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.-980333416.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.-980348071.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.1001762418.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.1018916662.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.1023053496.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.1063439125.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.1071530970.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1144355025.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1230356237.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1255953220.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1270614101.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1290719160.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.135341297.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1365699117.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1409397962.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1414322654.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.1458121851.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1472904692.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1506712920.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.1521997044.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1566153043.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1567441282.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1573806494.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1611813904.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1727951476.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1735036102.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1736817532.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.1752066088.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.1764859593.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.1781859167.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.1880540284.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.1880638924.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.1882561057.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.1912161945.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.1953264397.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.1976364353.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.2053614321.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.2130389189.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.241102236.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.248894671.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.259539000.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.268940569.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.345854977.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.389662641.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.449555012.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.553115661.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.557069956.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.63250858.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.633882591.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.712802390.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.734280857.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.760563806.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.951002743.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.954228474.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.997197841.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -931237088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.389588 +/- 0.00334356 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.389588 @ 95%CL (1 toyMC)
median expected limit: r < 0.389588 @ 95%CL (1 toyMC)
   68% expected band : 0.389588 < r < 0.389588
   95% expected band : 0.389588 < r < 0.389588
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1591931719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.603553 +/- 0.00269446 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.603553 @ 95%CL (1 toyMC)
median expected limit: r < 0.603553 @ 95%CL (1 toyMC)
   68% expected band : 0.603553 < r < 0.603553
   95% expected band : 0.603553 < r < 0.603553
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 913036421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.386447 +/- 0.0031429 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.386447 @ 95%CL (1 toyMC)
median expected limit: r < 0.386447 @ 95%CL (1 toyMC)
   68% expected band : 0.386447 < r < 0.386447
   95% expected band : 0.386447 < r < 0.386447
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1827014049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388306 +/- 0.00306202 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.388306 @ 95%CL (1 toyMC)
median expected limit: r < 0.388306 @ 95%CL (1 toyMC)
   68% expected band : 0.388306 < r < 0.388306
   95% expected band : 0.388306 < r < 0.388306
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1242542954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.386054 +/- 0.00330153 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.386054 @ 95%CL (1 toyMC)
median expected limit: r < 0.386054 @ 95%CL (1 toyMC)
   68% expected band : 0.386054 < r < 0.386054
   95% expected band : 0.386054 < r < 0.386054
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -585085951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.390154 +/- 0.00246074 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.390154 @ 95%CL (1 toyMC)
median expected limit: r < 0.390154 @ 95%CL (1 toyMC)
   68% expected band : 0.390154 < r < 0.390154
   95% expected band : 0.390154 < r < 0.390154
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 159217509
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.394394 +/- 0.00249184 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.394394 @ 95%CL (1 toyMC)
median expected limit: r < 0.394394 @ 95%CL (1 toyMC)
   68% expected band : 0.394394 < r < 0.394394
   95% expected band : 0.394394 < r < 0.394394
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1722932510
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.395745 +/- 0.00279132 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.395745 @ 95%CL (1 toyMC)
median expected limit: r < 0.395745 @ 95%CL (1 toyMC)
   68% expected band : 0.395745 < r < 0.395745
   95% expected band : 0.395745 < r < 0.395745
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1483024188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.379956 +/- 0.00295887 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.379956 @ 95%CL (1 toyMC)
median expected limit: r < 0.379956 @ 95%CL (1 toyMC)
   68% expected band : 0.379956 < r < 0.379956
   95% expected band : 0.379956 < r < 0.379956
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1116847776
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393133 +/- 0.00324666 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.393133 @ 95%CL (1 toyMC)
median expected limit: r < 0.393133 @ 95%CL (1 toyMC)
   68% expected band : 0.393133 < r < 0.393133
   95% expected band : 0.393133 < r < 0.393133
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1020947920
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.580915 +/- 0.00244584 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.580915 @ 95%CL (1 toyMC)
median expected limit: r < 0.580915 @ 95%CL (1 toyMC)
   68% expected band : 0.580915 < r < 0.580915
   95% expected band : 0.580915 < r < 0.580915
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1323794232
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388892 +/- 0.00232121 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.388892 @ 95%CL (1 toyMC)
median expected limit: r < 0.388892 @ 95%CL (1 toyMC)
   68% expected band : 0.388892 < r < 0.388892
   95% expected band : 0.388892 < r < 0.388892
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 342365887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.394279 +/- 0.00323553 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.394279 @ 95%CL (1 toyMC)
median expected limit: r < 0.394279 @ 95%CL (1 toyMC)
   68% expected band : 0.394279 < r < 0.394279
   95% expected band : 0.394279 < r < 0.394279
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 237097270
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.38739 +/- 0.00230788 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.38739 @ 95%CL (1 toyMC)
median expected limit: r < 0.38739 @ 95%CL (1 toyMC)
   68% expected band : 0.38739 < r < 0.38739
   95% expected band : 0.38739 < r < 0.38739
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1543272900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.400313 +/- 0.00257526 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.400313 @ 95%CL (1 toyMC)
median expected limit: r < 0.400313 @ 95%CL (1 toyMC)
   68% expected band : 0.400313 < r < 0.400313
   95% expected band : 0.400313 < r < 0.400313
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 408463298
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.396902 +/- 0.00327817 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.396902 @ 95%CL (1 toyMC)
median expected limit: r < 0.396902 @ 95%CL (1 toyMC)
   68% expected band : 0.396902 < r < 0.396902
   95% expected band : 0.396902 < r < 0.396902
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2141750796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387112 +/- 0.00259671 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.387112 @ 95%CL (1 toyMC)
median expected limit: r < 0.387112 @ 95%CL (1 toyMC)
   68% expected band : 0.387112 < r < 0.387112
   95% expected band : 0.387112 < r < 0.387112
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1538330791
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.574367 +/- 0.00260004 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.574367 @ 95%CL (1 toyMC)
median expected limit: r < 0.574367 @ 95%CL (1 toyMC)
   68% expected band : 0.574367 < r < 0.574367
   95% expected band : 0.574367 < r < 0.574367
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1060159020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.392706 +/- 0.003427 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.392706 @ 95%CL (1 toyMC)
median expected limit: r < 0.392706 @ 95%CL (1 toyMC)
   68% expected band : 0.392706 < r < 0.392706
   95% expected band : 0.392706 < r < 0.392706
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2051733454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39427 +/- 0.00227836 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.39427 @ 95%CL (1 toyMC)
median expected limit: r < 0.39427 @ 95%CL (1 toyMC)
   68% expected band : 0.39427 < r < 0.39427
   95% expected band : 0.39427 < r < 0.39427
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1694345522
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.396739 +/- 0.00280432 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.396739 @ 95%CL (1 toyMC)
median expected limit: r < 0.396739 @ 95%CL (1 toyMC)
   68% expected band : 0.396739 < r < 0.396739
   95% expected band : 0.396739 < r < 0.396739
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1253502481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.392494 +/- 0.00308226 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.392494 @ 95%CL (1 toyMC)
median expected limit: r < 0.392494 @ 95%CL (1 toyMC)
   68% expected band : 0.392494 < r < 0.392494
   95% expected band : 0.392494 < r < 0.392494
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1316155354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.38914 +/- 0.00309418 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.38914 @ 95%CL (1 toyMC)
median expected limit: r < 0.38914 @ 95%CL (1 toyMC)
   68% expected band : 0.38914 < r < 0.38914
   95% expected band : 0.38914 < r < 0.38914
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 572962110
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.391729 +/- 0.00310057 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.391729 @ 95%CL (1 toyMC)
median expected limit: r < 0.391729 @ 95%CL (1 toyMC)
   68% expected band : 0.391729 < r < 0.391729
   95% expected band : 0.391729 < r < 0.391729
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1736238073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.391472 +/- 0.0023212 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.391472 @ 95%CL (1 toyMC)
median expected limit: r < 0.391472 @ 95%CL (1 toyMC)
   68% expected band : 0.391472 < r < 0.391472
   95% expected band : 0.391472 < r < 0.391472
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 996771987
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.384597 +/- 0.00333122 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.384597 @ 95%CL (1 toyMC)
median expected limit: r < 0.384597 @ 95%CL (1 toyMC)
   68% expected band : 0.384597 < r < 0.384597
   95% expected band : 0.384597 < r < 0.384597
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -802304033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.397376 +/- 0.00307008 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.397376 @ 95%CL (1 toyMC)
median expected limit: r < 0.397376 @ 95%CL (1 toyMC)
   68% expected band : 0.397376 < r < 0.397376
   95% expected band : 0.397376 < r < 0.397376
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -753699584
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.591501 +/- 0.00293294 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.591501 @ 95%CL (1 toyMC)
median expected limit: r < 0.591501 @ 95%CL (1 toyMC)
   68% expected band : 0.591501 < r < 0.591501
   95% expected band : 0.591501 < r < 0.591501
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 676961450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.389895 +/- 0.00315671 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.389895 @ 95%CL (1 toyMC)
median expected limit: r < 0.389895 @ 95%CL (1 toyMC)
   68% expected band : 0.389895 < r < 0.389895
   95% expected band : 0.389895 < r < 0.389895
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1417303193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.391974 +/- 0.00328302 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.391974 @ 95%CL (1 toyMC)
median expected limit: r < 0.391974 @ 95%CL (1 toyMC)
   68% expected band : 0.391974 < r < 0.391974
   95% expected band : 0.391974 < r < 0.391974
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -905501171
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.607556 +/- 0.00266023 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.607556 @ 95%CL (1 toyMC)
median expected limit: r < 0.607556 @ 95%CL (1 toyMC)
   68% expected band : 0.607556 < r < 0.607556
   95% expected band : 0.607556 < r < 0.607556
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1204440192
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.396401 +/- 0.00242331 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.396401 @ 95%CL (1 toyMC)
median expected limit: r < 0.396401 @ 95%CL (1 toyMC)
   68% expected band : 0.396401 < r < 0.396401
   95% expected band : 0.396401 < r < 0.396401
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -285628731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.390222 +/- 0.00325808 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.390222 @ 95%CL (1 toyMC)
median expected limit: r < 0.390222 @ 95%CL (1 toyMC)
   68% expected band : 0.390222 < r < 0.390222
   95% expected band : 0.390222 < r < 0.390222
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1883445456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.585019 +/- 0.00255581 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.585019 @ 95%CL (1 toyMC)
median expected limit: r < 0.585019 @ 95%CL (1 toyMC)
   68% expected band : 0.585019 < r < 0.585019
   95% expected band : 0.585019 < r < 0.585019
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 154684110
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.382097 +/- 0.00321835 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.382097 @ 95%CL (1 toyMC)
median expected limit: r < 0.382097 @ 95%CL (1 toyMC)
   68% expected band : 0.382097 < r < 0.382097
   95% expected band : 0.382097 < r < 0.382097
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -563432670
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393766 +/- 0.00312693 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.393766 @ 95%CL (1 toyMC)
median expected limit: r < 0.393766 @ 95%CL (1 toyMC)
   68% expected band : 0.393766 < r < 0.393766
   95% expected band : 0.393766 < r < 0.393766
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1713093311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.577531 +/- 0.00237551 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.577531 @ 95%CL (1 toyMC)
median expected limit: r < 0.577531 @ 95%CL (1 toyMC)
   68% expected band : 0.577531 < r < 0.577531
   95% expected band : 0.577531 < r < 0.577531
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 908341712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.385355 +/- 0.00303233 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.385355 @ 95%CL (1 toyMC)
median expected limit: r < 0.385355 @ 95%CL (1 toyMC)
   68% expected band : 0.385355 < r < 0.385355
   95% expected band : 0.385355 < r < 0.385355
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2040048163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.386645 +/- 0.00243707 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.386645 @ 95%CL (1 toyMC)
median expected limit: r < 0.386645 @ 95%CL (1 toyMC)
   68% expected band : 0.386645 < r < 0.386645
   95% expected band : 0.386645 < r < 0.386645
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1469826742
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.385463 +/- 0.00265126 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.385463 @ 95%CL (1 toyMC)
median expected limit: r < 0.385463 @ 95%CL (1 toyMC)
   68% expected band : 0.385463 < r < 0.385463
   95% expected band : 0.385463 < r < 0.385463
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1809332763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.603362 +/- 0.00235517 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.603362 @ 95%CL (1 toyMC)
median expected limit: r < 0.603362 @ 95%CL (1 toyMC)
   68% expected band : 0.603362 < r < 0.603362
   95% expected band : 0.603362 < r < 0.603362
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -407762406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.391675 +/- 0.00330376 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.391675 @ 95%CL (1 toyMC)
median expected limit: r < 0.391675 @ 95%CL (1 toyMC)
   68% expected band : 0.391675 < r < 0.391675
   95% expected band : 0.391675 < r < 0.391675
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1244640791
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.38571 +/- 0.00278898 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.38571 @ 95%CL (1 toyMC)
median expected limit: r < 0.38571 @ 95%CL (1 toyMC)
   68% expected band : 0.38571 < r < 0.38571
   95% expected band : 0.38571 < r < 0.38571
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1119365145
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388633 +/- 0.00289532 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.388633 @ 95%CL (1 toyMC)
median expected limit: r < 0.388633 @ 95%CL (1 toyMC)
   68% expected band : 0.388633 < r < 0.388633
   95% expected band : 0.388633 < r < 0.388633
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1454560893
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.389887 +/- 0.00239967 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.389887 @ 95%CL (1 toyMC)
median expected limit: r < 0.389887 @ 95%CL (1 toyMC)
   68% expected band : 0.389887 < r < 0.389887
   95% expected band : 0.389887 < r < 0.389887
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1953188035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.612303 +/- 0.00235019 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.612303 @ 95%CL (1 toyMC)
median expected limit: r < 0.612303 @ 95%CL (1 toyMC)
   68% expected band : 0.612303 < r < 0.612303
   95% expected band : 0.612303 < r < 0.612303
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -585674285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.583763 +/- 0.00247743 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.583763 @ 95%CL (1 toyMC)
median expected limit: r < 0.583763 @ 95%CL (1 toyMC)
   68% expected band : 0.583763 < r < 0.583763
   95% expected band : 0.583763 < r < 0.583763
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 548372305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.384141 +/- 0.00308696 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.384141 @ 95%CL (1 toyMC)
median expected limit: r < 0.384141 @ 95%CL (1 toyMC)
   68% expected band : 0.384141 < r < 0.384141
   95% expected band : 0.384141 < r < 0.384141
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -71422471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393229 +/- 0.00314923 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.393229 @ 95%CL (1 toyMC)
median expected limit: r < 0.393229 @ 95%CL (1 toyMC)
   68% expected band : 0.393229 < r < 0.393229
   95% expected band : 0.393229 < r < 0.393229
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1105485088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388519 +/- 0.00314061 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.388519 @ 95%CL (1 toyMC)
median expected limit: r < 0.388519 @ 95%CL (1 toyMC)
   68% expected band : 0.388519 < r < 0.388519
   95% expected band : 0.388519 < r < 0.388519
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 97493536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.38885 +/- 0.00275157 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.38885 @ 95%CL (1 toyMC)
median expected limit: r < 0.38885 @ 95%CL (1 toyMC)
   68% expected band : 0.38885 < r < 0.38885
   95% expected band : 0.38885 < r < 0.38885
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -688273477
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.38561 +/- 0.00281757 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.38561 @ 95%CL (1 toyMC)
median expected limit: r < 0.38561 @ 95%CL (1 toyMC)
   68% expected band : 0.38561 < r < 0.38561
   95% expected band : 0.38561 < r < 0.38561
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 39313246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.381115 +/- 0.00305929 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.381115 @ 95%CL (1 toyMC)
median expected limit: r < 0.381115 @ 95%CL (1 toyMC)
   68% expected band : 0.381115 < r < 0.381115
   95% expected band : 0.381115 < r < 0.381115
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 393043859
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39093 +/- 0.00304836 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.39093 @ 95%CL (1 toyMC)
median expected limit: r < 0.39093 @ 95%CL (1 toyMC)
   68% expected band : 0.39093 < r < 0.39093
   95% expected band : 0.39093 < r < 0.39093
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2034041450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.584751 +/- 0.00269886 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.584751 @ 95%CL (1 toyMC)
median expected limit: r < 0.584751 @ 95%CL (1 toyMC)
   68% expected band : 0.584751 < r < 0.584751
   95% expected band : 0.584751 < r < 0.584751
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1521833833
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39034 +/- 0.00300807 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.39034 @ 95%CL (1 toyMC)
median expected limit: r < 0.39034 @ 95%CL (1 toyMC)
   68% expected band : 0.39034 < r < 0.39034
   95% expected band : 0.39034 < r < 0.39034
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1285855453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39551 +/- 0.00333786 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.39551 @ 95%CL (1 toyMC)
median expected limit: r < 0.39551 @ 95%CL (1 toyMC)
   68% expected band : 0.39551 < r < 0.39551
   95% expected band : 0.39551 < r < 0.39551
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1974709389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393772 +/- 0.00291161 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.393772 @ 95%CL (1 toyMC)
median expected limit: r < 0.393772 @ 95%CL (1 toyMC)
   68% expected band : 0.393772 < r < 0.393772
   95% expected band : 0.393772 < r < 0.393772
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2095180048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393349 +/- 0.00325653 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.393349 @ 95%CL (1 toyMC)
median expected limit: r < 0.393349 @ 95%CL (1 toyMC)
   68% expected band : 0.393349 < r < 0.393349
   95% expected band : 0.393349 < r < 0.393349
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -524364466
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.396975 +/- 0.00303305 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.396975 @ 95%CL (1 toyMC)
median expected limit: r < 0.396975 @ 95%CL (1 toyMC)
   68% expected band : 0.396975 < r < 0.396975
   95% expected band : 0.396975 < r < 0.396975
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -380381354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.386754 +/- 0.0028361 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.386754 @ 95%CL (1 toyMC)
median expected limit: r < 0.386754 @ 95%CL (1 toyMC)
   68% expected band : 0.386754 < r < 0.386754
   95% expected band : 0.386754 < r < 0.386754
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -459328669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.389479 +/- 0.00289444 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.389479 @ 95%CL (1 toyMC)
median expected limit: r < 0.389479 @ 95%CL (1 toyMC)
   68% expected band : 0.389479 < r < 0.389479
   95% expected band : 0.389479 < r < 0.389479
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 205180041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.392922 +/- 0.00362526 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.392922 @ 95%CL (1 toyMC)
median expected limit: r < 0.392922 @ 95%CL (1 toyMC)
   68% expected band : 0.392922 < r < 0.392922
   95% expected band : 0.392922 < r < 0.392922
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1537969084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387657 +/- 0.00284349 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.387657 @ 95%CL (1 toyMC)
median expected limit: r < 0.387657 @ 95%CL (1 toyMC)
   68% expected band : 0.387657 < r < 0.387657
   95% expected band : 0.387657 < r < 0.387657
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -861371709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387591 +/- 0.00298825 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.387591 @ 95%CL (1 toyMC)
median expected limit: r < 0.387591 @ 95%CL (1 toyMC)
   68% expected band : 0.387591 < r < 0.387591
   95% expected band : 0.387591 < r < 0.387591
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 763152313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388697 +/- 0.00269652 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.388697 @ 95%CL (1 toyMC)
median expected limit: r < 0.388697 @ 95%CL (1 toyMC)
   68% expected band : 0.388697 < r < 0.388697
   95% expected band : 0.388697 < r < 0.388697
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1015399915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.3919 +/- 0.00281367 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.3919 @ 95%CL (1 toyMC)
median expected limit: r < 0.3919 @ 95%CL (1 toyMC)
   68% expected band : 0.3919 < r < 0.3919
   95% expected band : 0.3919 < r < 0.3919
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 986835998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.61411 +/- 0.00210911 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.61411 @ 95%CL (1 toyMC)
median expected limit: r < 0.61411 @ 95%CL (1 toyMC)
   68% expected band : 0.61411 < r < 0.61411
   95% expected band : 0.61411 < r < 0.61411
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 483767645
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.395392 +/- 0.00237324 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.395392 @ 95%CL (1 toyMC)
median expected limit: r < 0.395392 @ 95%CL (1 toyMC)
   68% expected band : 0.395392 < r < 0.395392
   95% expected band : 0.395392 < r < 0.395392
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1153417405
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.386194 +/- 0.00339249 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.386194 @ 95%CL (1 toyMC)
median expected limit: r < 0.386194 @ 95%CL (1 toyMC)
   68% expected band : 0.386194 < r < 0.386194
   95% expected band : 0.386194 < r < 0.386194
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1640570556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.400467 +/- 0.00271271 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.400467 @ 95%CL (1 toyMC)
median expected limit: r < 0.400467 @ 95%CL (1 toyMC)
   68% expected band : 0.400467 < r < 0.400467
   95% expected band : 0.400467 < r < 0.400467
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -746987682
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.391167 +/- 0.00286767 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.391167 @ 95%CL (1 toyMC)
median expected limit: r < 0.391167 @ 95%CL (1 toyMC)
   68% expected band : 0.391167 < r < 0.391167
   95% expected band : 0.391167 < r < 0.391167
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1117795776
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.382275 +/- 0.00352847 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.382275 @ 95%CL (1 toyMC)
median expected limit: r < 0.382275 @ 95%CL (1 toyMC)
   68% expected band : 0.382275 < r < 0.382275
   95% expected band : 0.382275 < r < 0.382275
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 495484919
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387719 +/- 0.00355858 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.387719 @ 95%CL (1 toyMC)
median expected limit: r < 0.387719 @ 95%CL (1 toyMC)
   68% expected band : 0.387719 < r < 0.387719
   95% expected band : 0.387719 < r < 0.387719
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1774937063
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.391041 +/- 0.00270519 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.391041 @ 95%CL (1 toyMC)
median expected limit: r < 0.391041 @ 95%CL (1 toyMC)
   68% expected band : 0.391041 < r < 0.391041
   95% expected band : 0.391041 < r < 0.391041
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1305868208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.395158 +/- 0.00268993 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.395158 @ 95%CL (1 toyMC)
median expected limit: r < 0.395158 @ 95%CL (1 toyMC)
   68% expected band : 0.395158 < r < 0.395158
   95% expected band : 0.395158 < r < 0.395158
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 22848642
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388246 +/- 0.00314673 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.388246 @ 95%CL (1 toyMC)
median expected limit: r < 0.388246 @ 95%CL (1 toyMC)
   68% expected band : 0.388246 < r < 0.388246
   95% expected band : 0.388246 < r < 0.388246
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1975246219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393445 +/- 0.00328944 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.393445 @ 95%CL (1 toyMC)
median expected limit: r < 0.393445 @ 95%CL (1 toyMC)
   68% expected band : 0.393445 < r < 0.393445
   95% expected band : 0.393445 < r < 0.393445
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1094339669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387021 +/- 0.00303786 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.387021 @ 95%CL (1 toyMC)
median expected limit: r < 0.387021 @ 95%CL (1 toyMC)
   68% expected band : 0.387021 < r < 0.387021
   95% expected band : 0.387021 < r < 0.387021
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1001982100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387629 +/- 0.00278215 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.387629 @ 95%CL (1 toyMC)
median expected limit: r < 0.387629 @ 95%CL (1 toyMC)
   68% expected band : 0.387629 < r < 0.387629
   95% expected band : 0.387629 < r < 0.387629
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1589031502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.402391 +/- 0.00268934 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.402391 @ 95%CL (1 toyMC)
median expected limit: r < 0.402391 @ 95%CL (1 toyMC)
   68% expected band : 0.402391 < r < 0.402391
   95% expected band : 0.402391 < r < 0.402391
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 740615388
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393188 +/- 0.00296094 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.393188 @ 95%CL (1 toyMC)
median expected limit: r < 0.393188 @ 95%CL (1 toyMC)
   68% expected band : 0.393188 < r < 0.393188
   95% expected band : 0.393188 < r < 0.393188
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1230437316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.395991 +/- 0.00316733 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.395991 @ 95%CL (1 toyMC)
median expected limit: r < 0.395991 @ 95%CL (1 toyMC)
   68% expected band : 0.395991 < r < 0.395991
   95% expected band : 0.395991 < r < 0.395991
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1599995907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.397874 +/- 0.0031549 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.397874 @ 95%CL (1 toyMC)
median expected limit: r < 0.397874 @ 95%CL (1 toyMC)
   68% expected band : 0.397874 < r < 0.397874
   95% expected band : 0.397874 < r < 0.397874
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 335372714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.613082 +/- 0.00250159 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.613082 @ 95%CL (1 toyMC)
median expected limit: r < 0.613082 @ 95%CL (1 toyMC)
   68% expected band : 0.613082 < r < 0.613082
   95% expected band : 0.613082 < r < 0.613082
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 402915362
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.582985 +/- 0.00251909 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.582985 @ 95%CL (1 toyMC)
median expected limit: r < 0.582985 @ 95%CL (1 toyMC)
   68% expected band : 0.582985 < r < 0.582985
   95% expected band : 0.582985 < r < 0.582985
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1333145162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387921 +/- 0.003032 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.387921 @ 95%CL (1 toyMC)
median expected limit: r < 0.387921 @ 95%CL (1 toyMC)
   68% expected band : 0.387921 < r < 0.387921
   95% expected band : 0.387921 < r < 0.387921
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1410035198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388371 +/- 0.00299187 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.388371 @ 95%CL (1 toyMC)
median expected limit: r < 0.388371 @ 95%CL (1 toyMC)
   68% expected band : 0.388371 < r < 0.388371
   95% expected band : 0.388371 < r < 0.388371
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1009846802
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.384942 +/- 0.00315014 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.384942 @ 95%CL (1 toyMC)
median expected limit: r < 0.384942 @ 95%CL (1 toyMC)
   68% expected band : 0.384942 < r < 0.384942
   95% expected band : 0.384942 < r < 0.384942
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1038906971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388381 +/- 0.00298614 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.388381 @ 95%CL (1 toyMC)
median expected limit: r < 0.388381 @ 95%CL (1 toyMC)
   68% expected band : 0.388381 < r < 0.388381
   95% expected band : 0.388381 < r < 0.388381
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1321812043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387682 +/- 0.00281661 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.387682 @ 95%CL (1 toyMC)
median expected limit: r < 0.387682 @ 95%CL (1 toyMC)
   68% expected band : 0.387682 < r < 0.387682
   95% expected band : 0.387682 < r < 0.387682
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1330755746
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387034 +/- 0.00281995 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.387034 @ 95%CL (1 toyMC)
median expected limit: r < 0.387034 @ 95%CL (1 toyMC)
   68% expected band : 0.387034 < r < 0.387034
   95% expected band : 0.387034 < r < 0.387034
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2078229868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.38827 +/- 0.00296972 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.38827 @ 95%CL (1 toyMC)
median expected limit: r < 0.38827 @ 95%CL (1 toyMC)
   68% expected band : 0.38827 < r < 0.38827
   95% expected band : 0.38827 < r < 0.38827
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -859736125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387789 +/- 0.00324767 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.387789 @ 95%CL (1 toyMC)
median expected limit: r < 0.387789 @ 95%CL (1 toyMC)
   68% expected band : 0.387789 < r < 0.387789
   95% expected band : 0.387789 < r < 0.387789
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1944375477
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393636 +/- 0.00263144 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.393636 @ 95%CL (1 toyMC)
median expected limit: r < 0.393636 @ 95%CL (1 toyMC)
   68% expected band : 0.393636 < r < 0.393636
   95% expected band : 0.393636 < r < 0.393636
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 117721743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.390086 +/- 0.00322766 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.390086 @ 95%CL (1 toyMC)
median expected limit: r < 0.390086 @ 95%CL (1 toyMC)
   68% expected band : 0.390086 < r < 0.390086
   95% expected band : 0.390086 < r < 0.390086
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1468640513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.394943 +/- 0.00294648 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.394943 @ 95%CL (1 toyMC)
median expected limit: r < 0.394943 @ 95%CL (1 toyMC)
   68% expected band : 0.394943 < r < 0.394943
   95% expected band : 0.394943 < r < 0.394943
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -751222058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.396336 +/- 0.00275315 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.396336 @ 95%CL (1 toyMC)
median expected limit: r < 0.396336 @ 95%CL (1 toyMC)
   68% expected band : 0.396336 < r < 0.396336
   95% expected band : 0.396336 < r < 0.396336
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 405856213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.610029 +/- 0.00260444 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.610029 @ 95%CL (1 toyMC)
median expected limit: r < 0.610029 @ 95%CL (1 toyMC)
   68% expected band : 0.610029 < r < 0.610029
   95% expected band : 0.610029 < r < 0.610029
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -209326207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.588849 +/- 0.00245667 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.588849 @ 95%CL (1 toyMC)
median expected limit: r < 0.588849 @ 95%CL (1 toyMC)
   68% expected band : 0.588849 < r < 0.588849
   95% expected band : 0.588849 < r < 0.588849
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine5000.MarkovChainMC.mH5000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH5000.-1015399915.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH5000.-1060159020.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH5000.-1242542954.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH5000.-1253502481.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH5000.-1285855453.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH5000.-1305868208.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH5000.-1321812043.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH5000.-1333145162.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH5000.-1417303193.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH5000.-1469826742.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH5000.-1538330791.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH5000.-1599995907.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH5000.-1722932510.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH5000.-1736238073.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH5000.-1774937063.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH5000.-1827014049.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH5000.-1944375477.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH5000.-1953188035.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH5000.-209326207.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH5000.-285628731.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH5000.-380381354.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH5000.-407762406.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH5000.-459328669.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH5000.-524364466.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH5000.-563432670.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH5000.-585085951.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH5000.-585674285.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH5000.-688273477.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH5000.-71422471.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH5000.-746987682.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH5000.-751222058.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH5000.-753699584.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH5000.-802304033.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH5000.-859736125.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH5000.-861371709.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH5000.-905501171.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH5000.-931237088.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH5000.1001982100.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH5000.1009846802.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH5000.1020947920.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH5000.1038906971.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH5000.1094339669.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH5000.1105485088.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH5000.1116847776.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH5000.1117795776.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH5000.1119365145.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH5000.1153417405.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH5000.117721743.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH5000.1204440192.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH5000.1230437316.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH5000.1244640791.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH5000.1316155354.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH5000.1323794232.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH5000.1330755746.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH5000.1410035198.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH5000.1454560893.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH5000.1468640513.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH5000.1483024188.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH5000.1521833833.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH5000.1537969084.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH5000.1543272900.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH5000.154684110.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH5000.1589031502.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH5000.1591931719.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH5000.159217509.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH5000.1640570556.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH5000.1694345522.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH5000.1713093311.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH5000.1809332763.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH5000.1883445456.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH5000.1974709389.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH5000.1975246219.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH5000.2034041450.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH5000.2040048163.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH5000.2051733454.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH5000.205180041.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH5000.2078229868.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH5000.2095180048.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH5000.2141750796.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH5000.22848642.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH5000.237097270.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH5000.335372714.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH5000.342365887.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH5000.393043859.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH5000.39313246.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH5000.402915362.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH5000.405856213.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH5000.408463298.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH5000.483767645.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH5000.495484919.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH5000.548372305.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH5000.572962110.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH5000.676961450.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH5000.740615388.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH5000.763152313.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH5000.908341712.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH5000.913036421.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH5000.97493536.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH5000.986835998.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH5000.996771987.root
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/
hadd Target path: higgsCombine5000.MarkovChainMC.mH5000.root:/toys
