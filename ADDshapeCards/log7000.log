 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 811334332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40341 +/- 0.00485937 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.40341 @ 95%CL (1 toyMC)
median expected limit: r < 1.40341 @ 95%CL (1 toyMC)
   68% expected band : 1.40341 < r < 1.40341
   95% expected band : 1.40341 < r < 1.40341
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 601297402
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17886 +/- 0.00569898 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.17886 @ 95%CL (1 toyMC)
median expected limit: r < 2.17886 @ 95%CL (1 toyMC)
   68% expected band : 2.17886 < r < 2.17886
   95% expected band : 2.17886 < r < 2.17886
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 80390170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16914 +/- 0.00459847 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.16914 @ 95%CL (1 toyMC)
median expected limit: r < 1.16914 @ 95%CL (1 toyMC)
   68% expected band : 1.16914 < r < 1.16914
   95% expected band : 1.16914 < r < 1.16914
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 859486980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65693 +/- 0.00480362 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.65693 @ 95%CL (1 toyMC)
median expected limit: r < 1.65693 @ 95%CL (1 toyMC)
   68% expected band : 1.65693 < r < 1.65693
   95% expected band : 1.65693 < r < 1.65693
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -544022747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65398 +/- 0.00431804 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.65398 @ 95%CL (1 toyMC)
median expected limit: r < 1.65398 @ 95%CL (1 toyMC)
   68% expected band : 1.65398 < r < 1.65398
   95% expected band : 1.65398 < r < 1.65398
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -318030729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39452 +/- 0.00550955 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.39452 @ 95%CL (1 toyMC)
median expected limit: r < 2.39452 @ 95%CL (1 toyMC)
   68% expected band : 2.39452 < r < 2.39452
   95% expected band : 2.39452 < r < 2.39452
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1671259253
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.02753 +/- 0.00608336 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.02753 @ 95%CL (1 toyMC)
median expected limit: r < 3.02753 @ 95%CL (1 toyMC)
   68% expected band : 3.02753 < r < 3.02753
   95% expected band : 3.02753 < r < 3.02753
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1333124974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.39216 +/- 0.00597448 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.39216 @ 95%CL (1 toyMC)
median expected limit: r < 3.39216 @ 95%CL (1 toyMC)
   68% expected band : 3.39216 < r < 3.39216
   95% expected band : 3.39216 < r < 3.39216
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1568292156
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68739 +/- 0.00486511 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.68739 @ 95%CL (1 toyMC)
median expected limit: r < 1.68739 @ 95%CL (1 toyMC)
   68% expected band : 1.68739 < r < 1.68739
   95% expected band : 1.68739 < r < 1.68739
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1673617706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.1942 +/- 0.00493915 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.1942 @ 95%CL (1 toyMC)
median expected limit: r < 2.1942 @ 95%CL (1 toyMC)
   68% expected band : 2.1942 < r < 2.1942
   95% expected band : 2.1942 < r < 2.1942
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1935714678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06214 +/- 0.00424619 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.06214 @ 95%CL (1 toyMC)
median expected limit: r < 1.06214 @ 95%CL (1 toyMC)
   68% expected band : 1.06214 < r < 1.06214
   95% expected band : 1.06214 < r < 1.06214
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1120496345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09458 +/- 0.00317704 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.09458 @ 95%CL (1 toyMC)
median expected limit: r < 1.09458 @ 95%CL (1 toyMC)
   68% expected band : 1.09458 < r < 1.09458
   95% expected band : 1.09458 < r < 1.09458
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1138013695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4235 +/- 0.00606533 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.4235 @ 95%CL (1 toyMC)
median expected limit: r < 2.4235 @ 95%CL (1 toyMC)
   68% expected band : 2.4235 < r < 2.4235
   95% expected band : 2.4235 < r < 2.4235
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1530368101
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.75872 +/- 0.00563266 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.75872 @ 95%CL (1 toyMC)
median expected limit: r < 1.75872 @ 95%CL (1 toyMC)
   68% expected band : 1.75872 < r < 1.75872
   95% expected band : 1.75872 < r < 1.75872
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1755113210
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25542 +/- 0.00475001 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.25542 @ 95%CL (1 toyMC)
median expected limit: r < 1.25542 @ 95%CL (1 toyMC)
   68% expected band : 1.25542 < r < 1.25542
   95% expected band : 1.25542 < r < 1.25542
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -368976841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14886 +/- 0.00479073 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.14886 @ 95%CL (1 toyMC)
median expected limit: r < 2.14886 @ 95%CL (1 toyMC)
   68% expected band : 2.14886 < r < 2.14886
   95% expected band : 2.14886 < r < 2.14886
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -398557265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27295 +/- 0.00493752 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.27295 @ 95%CL (1 toyMC)
median expected limit: r < 1.27295 @ 95%CL (1 toyMC)
   68% expected band : 1.27295 < r < 1.27295
   95% expected band : 1.27295 < r < 1.27295
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1094927897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.94915 +/- 0.00511695 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.94915 @ 95%CL (1 toyMC)
median expected limit: r < 2.94915 @ 95%CL (1 toyMC)
   68% expected band : 2.94915 < r < 2.94915
   95% expected band : 2.94915 < r < 2.94915
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -492156385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58088 +/- 0.00579562 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.58088 @ 95%CL (1 toyMC)
median expected limit: r < 2.58088 @ 95%CL (1 toyMC)
   68% expected band : 2.58088 < r < 2.58088
   95% expected band : 2.58088 < r < 2.58088
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 749876348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.9512 +/- 0.00504038 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.9512 @ 95%CL (1 toyMC)
median expected limit: r < 1.9512 @ 95%CL (1 toyMC)
   68% expected band : 1.9512 < r < 1.9512
   95% expected band : 1.9512 < r < 1.9512
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -254729001
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35672 +/- 0.00419689 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.35672 @ 95%CL (1 toyMC)
median expected limit: r < 1.35672 @ 95%CL (1 toyMC)
   68% expected band : 1.35672 < r < 1.35672
   95% expected band : 1.35672 < r < 1.35672
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 291932101
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09219 +/- 0.0059537 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.09219 @ 95%CL (1 toyMC)
median expected limit: r < 2.09219 @ 95%CL (1 toyMC)
   68% expected band : 2.09219 < r < 2.09219
   95% expected band : 2.09219 < r < 2.09219
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1330847218
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68413 +/- 0.00581044 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.68413 @ 95%CL (1 toyMC)
median expected limit: r < 1.68413 @ 95%CL (1 toyMC)
   68% expected band : 1.68413 < r < 1.68413
   95% expected band : 1.68413 < r < 1.68413
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1860051300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10615 +/- 0.00565375 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.10615 @ 95%CL (1 toyMC)
median expected limit: r < 2.10615 @ 95%CL (1 toyMC)
   68% expected band : 2.10615 < r < 2.10615
   95% expected band : 2.10615 < r < 2.10615
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1744706307
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.96933 +/- 0.00607922 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.96933 @ 95%CL (1 toyMC)
median expected limit: r < 1.96933 @ 95%CL (1 toyMC)
   68% expected band : 1.96933 < r < 1.96933
   95% expected band : 1.96933 < r < 1.96933
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -883031213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82999 +/- 0.00494101 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.82999 @ 95%CL (1 toyMC)
median expected limit: r < 1.82999 @ 95%CL (1 toyMC)
   68% expected band : 1.82999 < r < 1.82999
   95% expected band : 1.82999 < r < 1.82999
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -267666873
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.21773 +/- 0.00412332 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.21773 @ 95%CL (1 toyMC)
median expected limit: r < 2.21773 @ 95%CL (1 toyMC)
   68% expected band : 2.21773 < r < 2.21773
   95% expected band : 2.21773 < r < 2.21773
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -163658713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65128 +/- 0.00537053 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.65128 @ 95%CL (1 toyMC)
median expected limit: r < 1.65128 @ 95%CL (1 toyMC)
   68% expected band : 1.65128 < r < 1.65128
   95% expected band : 1.65128 < r < 1.65128
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1910724509
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.79565 +/- 0.0047628 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.79565 @ 95%CL (1 toyMC)
median expected limit: r < 1.79565 @ 95%CL (1 toyMC)
   68% expected band : 1.79565 < r < 1.79565
   95% expected band : 1.79565 < r < 1.79565
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1198793897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36247 +/- 0.00411341 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.36247 @ 95%CL (1 toyMC)
median expected limit: r < 1.36247 @ 95%CL (1 toyMC)
   68% expected band : 1.36247 < r < 1.36247
   95% expected band : 1.36247 < r < 1.36247
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -153879272
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39374 +/- 0.00465722 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.39374 @ 95%CL (1 toyMC)
median expected limit: r < 1.39374 @ 95%CL (1 toyMC)
   68% expected band : 1.39374 < r < 1.39374
   95% expected band : 1.39374 < r < 1.39374
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -952769123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72745 +/- 0.00375303 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.72745 @ 95%CL (1 toyMC)
median expected limit: r < 1.72745 @ 95%CL (1 toyMC)
   68% expected band : 1.72745 < r < 1.72745
   95% expected band : 1.72745 < r < 1.72745
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 548835058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.34358 +/- 0.00491127 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.34358 @ 95%CL (1 toyMC)
median expected limit: r < 3.34358 @ 95%CL (1 toyMC)
   68% expected band : 3.34358 < r < 3.34358
   95% expected band : 3.34358 < r < 3.34358
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 755037305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66952 +/- 0.00362464 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.66952 @ 95%CL (1 toyMC)
median expected limit: r < 1.66952 @ 95%CL (1 toyMC)
   68% expected band : 1.66952 < r < 1.66952
   95% expected band : 1.66952 < r < 1.66952
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 250422385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09295 +/- 0.00383663 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.09295 @ 95%CL (1 toyMC)
median expected limit: r < 1.09295 @ 95%CL (1 toyMC)
   68% expected band : 1.09295 < r < 1.09295
   95% expected band : 1.09295 < r < 1.09295
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1130622910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65888 +/- 0.00491174 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.65888 @ 95%CL (1 toyMC)
median expected limit: r < 1.65888 @ 95%CL (1 toyMC)
   68% expected band : 1.65888 < r < 1.65888
   95% expected band : 1.65888 < r < 1.65888
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2070627533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05336 +/- 0.0041954 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.05336 @ 95%CL (1 toyMC)
median expected limit: r < 1.05336 @ 95%CL (1 toyMC)
   68% expected band : 1.05336 < r < 1.05336
   95% expected band : 1.05336 < r < 1.05336
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1442244917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31137 +/- 0.00414852 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.31137 @ 95%CL (1 toyMC)
median expected limit: r < 1.31137 @ 95%CL (1 toyMC)
   68% expected band : 1.31137 < r < 1.31137
   95% expected band : 1.31137 < r < 1.31137
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1450361561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71161 +/- 0.00519413 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.71161 @ 95%CL (1 toyMC)
median expected limit: r < 1.71161 @ 95%CL (1 toyMC)
   68% expected band : 1.71161 < r < 1.71161
   95% expected band : 1.71161 < r < 1.71161
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 838843885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2229 +/- 0.00429637 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.2229 @ 95%CL (1 toyMC)
median expected limit: r < 1.2229 @ 95%CL (1 toyMC)
   68% expected band : 1.2229 < r < 1.2229
   95% expected band : 1.2229 < r < 1.2229
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 842677944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14296 +/- 0.00440203 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.14296 @ 95%CL (1 toyMC)
median expected limit: r < 1.14296 @ 95%CL (1 toyMC)
   68% expected band : 1.14296 < r < 1.14296
   95% expected band : 1.14296 < r < 1.14296
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 732541765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.22606 +/- 0.00638161 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.22606 @ 95%CL (1 toyMC)
median expected limit: r < 2.22606 @ 95%CL (1 toyMC)
   68% expected band : 2.22606 < r < 2.22606
   95% expected band : 2.22606 < r < 2.22606
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -459994824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.151 +/- 0.00579744 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.151 @ 95%CL (1 toyMC)
median expected limit: r < 2.151 @ 95%CL (1 toyMC)
   68% expected band : 2.151 < r < 2.151
   95% expected band : 2.151 < r < 2.151
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1357318601
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.08019 +/- 0.00484716 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.08019 @ 95%CL (1 toyMC)
median expected limit: r < 2.08019 @ 95%CL (1 toyMC)
   68% expected band : 2.08019 < r < 2.08019
   95% expected band : 2.08019 < r < 2.08019
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1813332111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.06166 +/- 0.00535078 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.06166 @ 95%CL (1 toyMC)
median expected limit: r < 2.06166 @ 95%CL (1 toyMC)
   68% expected band : 2.06166 < r < 2.06166
   95% expected band : 2.06166 < r < 2.06166
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1338707585
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14027 +/- 0.00420001 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.14027 @ 95%CL (1 toyMC)
median expected limit: r < 1.14027 @ 95%CL (1 toyMC)
   68% expected band : 1.14027 < r < 1.14027
   95% expected band : 1.14027 < r < 1.14027
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 204998879
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37221 +/- 0.00442703 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.37221 @ 95%CL (1 toyMC)
median expected limit: r < 1.37221 @ 95%CL (1 toyMC)
   68% expected band : 1.37221 < r < 1.37221
   95% expected band : 1.37221 < r < 1.37221
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2100008123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42633 +/- 0.00521017 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.42633 @ 95%CL (1 toyMC)
median expected limit: r < 2.42633 @ 95%CL (1 toyMC)
   68% expected band : 2.42633 < r < 2.42633
   95% expected band : 2.42633 < r < 2.42633
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 726404272
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.7618 +/- 0.00435466 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.7618 @ 95%CL (1 toyMC)
median expected limit: r < 1.7618 @ 95%CL (1 toyMC)
   68% expected band : 1.7618 < r < 1.7618
   95% expected band : 1.7618 < r < 1.7618
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 597759915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68658 +/- 0.00638561 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.68658 @ 95%CL (1 toyMC)
median expected limit: r < 1.68658 @ 95%CL (1 toyMC)
   68% expected band : 1.68658 < r < 1.68658
   95% expected band : 1.68658 < r < 1.68658
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -435098566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6171 +/- 0.00471698 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.6171 @ 95%CL (1 toyMC)
median expected limit: r < 1.6171 @ 95%CL (1 toyMC)
   68% expected band : 1.6171 < r < 1.6171
   95% expected band : 1.6171 < r < 1.6171
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -934072502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48415 +/- 0.00440864 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.48415 @ 95%CL (1 toyMC)
median expected limit: r < 1.48415 @ 95%CL (1 toyMC)
   68% expected band : 1.48415 < r < 1.48415
   95% expected band : 1.48415 < r < 1.48415
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 515157223
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34411 +/- 0.00430005 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.34411 @ 95%CL (1 toyMC)
median expected limit: r < 1.34411 @ 95%CL (1 toyMC)
   68% expected band : 1.34411 < r < 1.34411
   95% expected band : 1.34411 < r < 1.34411
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1962898852
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66585 +/- 0.00444588 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.66585 @ 95%CL (1 toyMC)
median expected limit: r < 2.66585 @ 95%CL (1 toyMC)
   68% expected band : 2.66585 < r < 2.66585
   95% expected band : 2.66585 < r < 2.66585
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -235054241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26703 +/- 0.00409282 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.26703 @ 95%CL (1 toyMC)
median expected limit: r < 1.26703 @ 95%CL (1 toyMC)
   68% expected band : 1.26703 < r < 1.26703
   95% expected band : 1.26703 < r < 1.26703
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1303938341
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37627 +/- 0.00436734 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.37627 @ 95%CL (1 toyMC)
median expected limit: r < 1.37627 @ 95%CL (1 toyMC)
   68% expected band : 1.37627 < r < 1.37627
   95% expected band : 1.37627 < r < 1.37627
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1701719736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33404 +/- 0.00446157 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.33404 @ 95%CL (1 toyMC)
median expected limit: r < 2.33404 @ 95%CL (1 toyMC)
   68% expected band : 2.33404 < r < 2.33404
   95% expected band : 2.33404 < r < 2.33404
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -347985934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85574 +/- 0.0046367 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.85574 @ 95%CL (1 toyMC)
median expected limit: r < 1.85574 @ 95%CL (1 toyMC)
   68% expected band : 1.85574 < r < 1.85574
   95% expected band : 1.85574 < r < 1.85574
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -915993556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92061 +/- 0.00500227 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.92061 @ 95%CL (1 toyMC)
median expected limit: r < 2.92061 @ 95%CL (1 toyMC)
   68% expected band : 2.92061 < r < 2.92061
   95% expected band : 2.92061 < r < 2.92061
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1023885439
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87412 +/- 0.004649 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.87412 @ 95%CL (1 toyMC)
median expected limit: r < 2.87412 @ 95%CL (1 toyMC)
   68% expected band : 2.87412 < r < 2.87412
   95% expected band : 2.87412 < r < 2.87412
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 566200206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02558 +/- 0.00392539 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.02558 @ 95%CL (1 toyMC)
median expected limit: r < 1.02558 @ 95%CL (1 toyMC)
   68% expected band : 1.02558 < r < 1.02558
   95% expected band : 1.02558 < r < 1.02558
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2042671493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17724 +/- 0.00463337 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.17724 @ 95%CL (1 toyMC)
median expected limit: r < 2.17724 @ 95%CL (1 toyMC)
   68% expected band : 2.17724 < r < 2.17724
   95% expected band : 2.17724 < r < 2.17724
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -946907289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.830342 +/- 0.00325224 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.830342 @ 95%CL (1 toyMC)
median expected limit: r < 0.830342 @ 95%CL (1 toyMC)
   68% expected band : 0.830342 < r < 0.830342
   95% expected band : 0.830342 < r < 0.830342
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1138650265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61845 +/- 0.00443001 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.61845 @ 95%CL (1 toyMC)
median expected limit: r < 1.61845 @ 95%CL (1 toyMC)
   68% expected band : 1.61845 < r < 1.61845
   95% expected band : 1.61845 < r < 1.61845
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1385903691
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84279 +/- 0.00524819 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.84279 @ 95%CL (1 toyMC)
median expected limit: r < 1.84279 @ 95%CL (1 toyMC)
   68% expected band : 1.84279 < r < 1.84279
   95% expected band : 1.84279 < r < 1.84279
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -742472758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58987 +/- 0.00495258 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.58987 @ 95%CL (1 toyMC)
median expected limit: r < 1.58987 @ 95%CL (1 toyMC)
   68% expected band : 1.58987 < r < 1.58987
   95% expected band : 1.58987 < r < 1.58987
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -604117193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45095 +/- 0.00444758 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.45095 @ 95%CL (1 toyMC)
median expected limit: r < 1.45095 @ 95%CL (1 toyMC)
   68% expected band : 1.45095 < r < 1.45095
   95% expected band : 1.45095 < r < 1.45095
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1583635879
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10499 +/- 0.00503769 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.10499 @ 95%CL (1 toyMC)
median expected limit: r < 3.10499 @ 95%CL (1 toyMC)
   68% expected band : 3.10499 < r < 3.10499
   95% expected band : 3.10499 < r < 3.10499
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 669370848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.994307 +/- 0.00422379 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.994307 @ 95%CL (1 toyMC)
median expected limit: r < 0.994307 @ 95%CL (1 toyMC)
   68% expected band : 0.994307 < r < 0.994307
   95% expected band : 0.994307 < r < 0.994307
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 83388494
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71515 +/- 0.00494982 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.71515 @ 95%CL (1 toyMC)
median expected limit: r < 1.71515 @ 95%CL (1 toyMC)
   68% expected band : 1.71515 < r < 1.71515
   95% expected band : 1.71515 < r < 1.71515
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 232092811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.16257 +/- 0.00535975 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.16257 @ 95%CL (1 toyMC)
median expected limit: r < 2.16257 @ 95%CL (1 toyMC)
   68% expected band : 2.16257 < r < 2.16257
   95% expected band : 2.16257 < r < 2.16257
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 238140966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4965 +/- 0.00561494 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.4965 @ 95%CL (1 toyMC)
median expected limit: r < 1.4965 @ 95%CL (1 toyMC)
   68% expected band : 1.4965 < r < 1.4965
   95% expected band : 1.4965 < r < 1.4965
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -376566467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68394 +/- 0.00486002 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.68394 @ 95%CL (1 toyMC)
median expected limit: r < 1.68394 @ 95%CL (1 toyMC)
   68% expected band : 1.68394 < r < 1.68394
   95% expected band : 1.68394 < r < 1.68394
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1117430324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2279 +/- 0.00399054 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.2279 @ 95%CL (1 toyMC)
median expected limit: r < 1.2279 @ 95%CL (1 toyMC)
   68% expected band : 1.2279 < r < 1.2279
   95% expected band : 1.2279 < r < 1.2279
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 23683062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09717 +/- 0.00463659 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.09717 @ 95%CL (1 toyMC)
median expected limit: r < 2.09717 @ 95%CL (1 toyMC)
   68% expected band : 2.09717 < r < 2.09717
   95% expected band : 2.09717 < r < 2.09717
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1432420218
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28854 +/- 0.00568272 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.28854 @ 95%CL (1 toyMC)
median expected limit: r < 2.28854 @ 95%CL (1 toyMC)
   68% expected band : 2.28854 < r < 2.28854
   95% expected band : 2.28854 < r < 2.28854
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1981334012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38315 +/- 0.0046177 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.38315 @ 95%CL (1 toyMC)
median expected limit: r < 1.38315 @ 95%CL (1 toyMC)
   68% expected band : 1.38315 < r < 1.38315
   95% expected band : 1.38315 < r < 1.38315
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -678881427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20249 +/- 0.0039017 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.20249 @ 95%CL (1 toyMC)
median expected limit: r < 1.20249 @ 95%CL (1 toyMC)
   68% expected band : 1.20249 < r < 1.20249
   95% expected band : 1.20249 < r < 1.20249
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2075959434
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00369 +/- 0.00518101 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.00369 @ 95%CL (1 toyMC)
median expected limit: r < 2.00369 @ 95%CL (1 toyMC)
   68% expected band : 2.00369 < r < 2.00369
   95% expected band : 2.00369 < r < 2.00369
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1997288371
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55944 +/- 0.00444615 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.55944 @ 95%CL (1 toyMC)
median expected limit: r < 1.55944 @ 95%CL (1 toyMC)
   68% expected band : 1.55944 < r < 1.55944
   95% expected band : 1.55944 < r < 1.55944
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -969618241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18969 +/- 0.00433329 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.18969 @ 95%CL (1 toyMC)
median expected limit: r < 1.18969 @ 95%CL (1 toyMC)
   68% expected band : 1.18969 < r < 1.18969
   95% expected band : 1.18969 < r < 1.18969
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 123483035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82131 +/- 0.00405801 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.82131 @ 95%CL (1 toyMC)
median expected limit: r < 1.82131 @ 95%CL (1 toyMC)
   68% expected band : 1.82131 < r < 1.82131
   95% expected band : 1.82131 < r < 1.82131
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1640076327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50847 +/- 0.0041222 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.50847 @ 95%CL (1 toyMC)
median expected limit: r < 2.50847 @ 95%CL (1 toyMC)
   68% expected band : 2.50847 < r < 2.50847
   95% expected band : 2.50847 < r < 2.50847
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1374061426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06271 +/- 0.00618613 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.06271 @ 95%CL (1 toyMC)
median expected limit: r < 3.06271 @ 95%CL (1 toyMC)
   68% expected band : 3.06271 < r < 3.06271
   95% expected band : 3.06271 < r < 3.06271
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -208549564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64189 +/- 0.004865 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.64189 @ 95%CL (1 toyMC)
median expected limit: r < 1.64189 @ 95%CL (1 toyMC)
   68% expected band : 1.64189 < r < 1.64189
   95% expected band : 1.64189 < r < 1.64189
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -266162142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2893 +/- 0.00471997 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.2893 @ 95%CL (1 toyMC)
median expected limit: r < 1.2893 @ 95%CL (1 toyMC)
   68% expected band : 1.2893 < r < 1.2893
   95% expected band : 1.2893 < r < 1.2893
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 347216774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13227 +/- 0.00473772 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.13227 @ 95%CL (1 toyMC)
median expected limit: r < 2.13227 @ 95%CL (1 toyMC)
   68% expected band : 2.13227 < r < 2.13227
   95% expected band : 2.13227 < r < 2.13227
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1057992020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16444 +/- 0.00564597 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.16444 @ 95%CL (1 toyMC)
median expected limit: r < 1.16444 @ 95%CL (1 toyMC)
   68% expected band : 1.16444 < r < 1.16444
   95% expected band : 1.16444 < r < 1.16444
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1903172034
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8001 +/- 0.00446575 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.8001 @ 95%CL (1 toyMC)
median expected limit: r < 2.8001 @ 95%CL (1 toyMC)
   68% expected band : 2.8001 < r < 2.8001
   95% expected band : 2.8001 < r < 2.8001
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -470744119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3159 +/- 0.00384683 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.3159 @ 95%CL (1 toyMC)
median expected limit: r < 1.3159 @ 95%CL (1 toyMC)
   68% expected band : 1.3159 < r < 1.3159
   95% expected band : 1.3159 < r < 1.3159
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 169218354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.89936 +/- 0.00485903 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.89936 @ 95%CL (1 toyMC)
median expected limit: r < 1.89936 @ 95%CL (1 toyMC)
   68% expected band : 1.89936 < r < 1.89936
   95% expected band : 1.89936 < r < 1.89936
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1487600474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.31996 +/- 0.00552205 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.31996 @ 95%CL (1 toyMC)
median expected limit: r < 2.31996 @ 95%CL (1 toyMC)
   68% expected band : 2.31996 < r < 2.31996
   95% expected band : 2.31996 < r < 2.31996
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1960269124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00447 +/- 0.00546416 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.00447 @ 95%CL (1 toyMC)
median expected limit: r < 2.00447 @ 95%CL (1 toyMC)
   68% expected band : 2.00447 < r < 2.00447
   95% expected band : 2.00447 < r < 2.00447
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 194479950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.47734 +/- 0.00359897 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.47734 @ 95%CL (1 toyMC)
median expected limit: r < 1.47734 @ 95%CL (1 toyMC)
   68% expected band : 1.47734 < r < 1.47734
   95% expected band : 1.47734 < r < 1.47734
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1838335206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32969 +/- 0.00417529 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.32969 @ 95%CL (1 toyMC)
median expected limit: r < 1.32969 @ 95%CL (1 toyMC)
   68% expected band : 1.32969 < r < 1.32969
   95% expected band : 1.32969 < r < 1.32969
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1001707737
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.97522 +/- 0.00516068 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.97522 @ 95%CL (1 toyMC)
median expected limit: r < 1.97522 @ 95%CL (1 toyMC)
   68% expected band : 1.97522 < r < 1.97522
   95% expected band : 1.97522 < r < 1.97522
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1025515453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52057 +/- 0.00445964 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.52057 @ 95%CL (1 toyMC)
median expected limit: r < 1.52057 @ 95%CL (1 toyMC)
   68% expected band : 1.52057 < r < 1.52057
   95% expected band : 1.52057 < r < 1.52057
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1777437581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.90751 +/- 0.00564765 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.90751 @ 95%CL (1 toyMC)
median expected limit: r < 1.90751 @ 95%CL (1 toyMC)
   68% expected band : 1.90751 < r < 1.90751
   95% expected band : 1.90751 < r < 1.90751
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1305596145
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.7764 +/- 0.00502681 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.7764 @ 95%CL (1 toyMC)
median expected limit: r < 1.7764 @ 95%CL (1 toyMC)
   68% expected band : 1.7764 < r < 1.7764
   95% expected band : 1.7764 < r < 1.7764
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 77763677
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61833 +/- 0.00538957 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.61833 @ 95%CL (1 toyMC)
median expected limit: r < 1.61833 @ 95%CL (1 toyMC)
   68% expected band : 1.61833 < r < 1.61833
   95% expected band : 1.61833 < r < 1.61833
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1023885439.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1025515453.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1057992020.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1094927897.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1117430324.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1130622910.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1198793897.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1305596145.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1330847218.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1333124974.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1338707585.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1357318601.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1374061426.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1432420218.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1442244917.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1530368101.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-153879272.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1583635879.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-163658713.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1640076327.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1671259253.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1673617706.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1777437581.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1813332111.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1838335206.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1910724509.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-1935714678.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-1960269124.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-1981334012.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-208549564.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-2100008123.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-235054241.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-254729001.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-266162142.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-267666873.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-318030729.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-347985934.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-368976841.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-376566467.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-398557265.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-435098566.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-459994824.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-470744119.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-492156385.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-544022747.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-604117193.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-678881427.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-742472758.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-883031213.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-915993556.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.-934072502.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.-946907289.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.-952769123.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.-969618241.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1001707737.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1120496345.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1138013695.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1138650265.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.123483035.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1303938341.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1385903691.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1450361561.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1487600474.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1568292156.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.169218354.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1701719736.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1744706307.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1755113210.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1860051300.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1903172034.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.194479950.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1962898852.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1997288371.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.2042671493.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.204998879.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.2070627533.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.2075959434.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.232092811.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.23683062.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.238140966.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.250422385.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.291932101.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.347216774.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.515157223.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.548835058.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.566200206.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.597759915.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.601297402.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.669370848.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.726404272.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.732541765.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.749876348.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.755037305.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.77763677.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.80390170.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.811334332.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.83388494.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.838843885.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.842677944.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.859486980.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1884796734
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56208 +/- 0.0039866 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.56208 @ 95%CL (1 toyMC)
median expected limit: r < 1.56208 @ 95%CL (1 toyMC)
   68% expected band : 1.56208 < r < 1.56208
   95% expected band : 1.56208 < r < 1.56208
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1066396571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.90331 +/- 0.00405597 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.90331 @ 95%CL (1 toyMC)
median expected limit: r < 1.90331 @ 95%CL (1 toyMC)
   68% expected band : 1.90331 < r < 1.90331
   95% expected band : 1.90331 < r < 1.90331
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1293609473
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30585 +/- 0.0041746 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.30585 @ 95%CL (1 toyMC)
median expected limit: r < 1.30585 @ 95%CL (1 toyMC)
   68% expected band : 1.30585 < r < 1.30585
   95% expected band : 1.30585 < r < 1.30585
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1583060476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.88586 +/- 0.00432291 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.88586 @ 95%CL (1 toyMC)
median expected limit: r < 1.88586 @ 95%CL (1 toyMC)
   68% expected band : 1.88586 < r < 1.88586
   95% expected band : 1.88586 < r < 1.88586
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1694150318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.75176 +/- 0.00622007 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.75176 @ 95%CL (1 toyMC)
median expected limit: r < 1.75176 @ 95%CL (1 toyMC)
   68% expected band : 1.75176 < r < 1.75176
   95% expected band : 1.75176 < r < 1.75176
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -678759707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08502 +/- 0.00468135 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.08502 @ 95%CL (1 toyMC)
median expected limit: r < 1.08502 @ 95%CL (1 toyMC)
   68% expected band : 1.08502 < r < 1.08502
   95% expected band : 1.08502 < r < 1.08502
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1212421265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.01552 +/- 0.0051042 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.01552 @ 95%CL (1 toyMC)
median expected limit: r < 2.01552 @ 95%CL (1 toyMC)
   68% expected band : 2.01552 < r < 2.01552
   95% expected band : 2.01552 < r < 2.01552
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -346566760
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.62666 +/- 0.00582073 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.62666 @ 95%CL (1 toyMC)
median expected limit: r < 3.62666 @ 95%CL (1 toyMC)
   68% expected band : 3.62666 < r < 3.62666
   95% expected band : 3.62666 < r < 3.62666
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 321122636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.62588 +/- 0.00473997 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.62588 @ 95%CL (1 toyMC)
median expected limit: r < 1.62588 @ 95%CL (1 toyMC)
   68% expected band : 1.62588 < r < 1.62588
   95% expected band : 1.62588 < r < 1.62588
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -262041153
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57444 +/- 0.00482716 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.57444 @ 95%CL (1 toyMC)
median expected limit: r < 1.57444 @ 95%CL (1 toyMC)
   68% expected band : 1.57444 < r < 1.57444
   95% expected band : 1.57444 < r < 1.57444
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1660675125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50701 +/- 0.00432073 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.50701 @ 95%CL (1 toyMC)
median expected limit: r < 1.50701 @ 95%CL (1 toyMC)
   68% expected band : 1.50701 < r < 1.50701
   95% expected band : 1.50701 < r < 1.50701
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 501044272
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91238 +/- 0.00584366 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.91238 @ 95%CL (1 toyMC)
median expected limit: r < 2.91238 @ 95%CL (1 toyMC)
   68% expected band : 2.91238 < r < 2.91238
   95% expected band : 2.91238 < r < 2.91238
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -869211089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77003 +/- 0.0058931 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.77003 @ 95%CL (1 toyMC)
median expected limit: r < 2.77003 @ 95%CL (1 toyMC)
   68% expected band : 2.77003 < r < 2.77003
   95% expected band : 2.77003 < r < 2.77003
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1723406258
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29217 +/- 0.00498627 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.29217 @ 95%CL (1 toyMC)
median expected limit: r < 2.29217 @ 95%CL (1 toyMC)
   68% expected band : 2.29217 < r < 2.29217
   95% expected band : 2.29217 < r < 2.29217
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -366292433
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.25644 +/- 0.006586 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.25644 @ 95%CL (1 toyMC)
median expected limit: r < 2.25644 @ 95%CL (1 toyMC)
   68% expected band : 2.25644 < r < 2.25644
   95% expected band : 2.25644 < r < 2.25644
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 763285518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85226 +/- 0.00568467 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.85226 @ 95%CL (1 toyMC)
median expected limit: r < 1.85226 @ 95%CL (1 toyMC)
   68% expected band : 1.85226 < r < 1.85226
   95% expected band : 1.85226 < r < 1.85226
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2125001913
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.68211 +/- 0.0062205 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.68211 @ 95%CL (1 toyMC)
median expected limit: r < 2.68211 @ 95%CL (1 toyMC)
   68% expected band : 2.68211 < r < 2.68211
   95% expected band : 2.68211 < r < 2.68211
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1272075763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30384 +/- 0.00452265 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.30384 @ 95%CL (1 toyMC)
median expected limit: r < 1.30384 @ 95%CL (1 toyMC)
   68% expected band : 1.30384 < r < 1.30384
   95% expected band : 1.30384 < r < 1.30384
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -251052807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77052 +/- 0.00559425 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.77052 @ 95%CL (1 toyMC)
median expected limit: r < 1.77052 @ 95%CL (1 toyMC)
   68% expected band : 1.77052 < r < 1.77052
   95% expected band : 1.77052 < r < 1.77052
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 645571895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6627 +/- 0.00635391 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.6627 @ 95%CL (1 toyMC)
median expected limit: r < 3.6627 @ 95%CL (1 toyMC)
   68% expected band : 3.6627 < r < 3.6627
   95% expected band : 3.6627 < r < 3.6627
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1855372119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27317 +/- 0.0041804 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.27317 @ 95%CL (1 toyMC)
median expected limit: r < 1.27317 @ 95%CL (1 toyMC)
   68% expected band : 1.27317 < r < 1.27317
   95% expected band : 1.27317 < r < 1.27317
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 116035666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17505 +/- 0.00555127 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.17505 @ 95%CL (1 toyMC)
median expected limit: r < 2.17505 @ 95%CL (1 toyMC)
   68% expected band : 2.17505 < r < 2.17505
   95% expected band : 2.17505 < r < 2.17505
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2120270669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80469 +/- 0.00493313 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.80469 @ 95%CL (1 toyMC)
median expected limit: r < 1.80469 @ 95%CL (1 toyMC)
   68% expected band : 1.80469 < r < 1.80469
   95% expected band : 1.80469 < r < 1.80469
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 934367930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50834 +/- 0.00466403 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.50834 @ 95%CL (1 toyMC)
median expected limit: r < 1.50834 @ 95%CL (1 toyMC)
   68% expected band : 1.50834 < r < 1.50834
   95% expected band : 1.50834 < r < 1.50834
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -486199906
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28413 +/- 0.00452355 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.28413 @ 95%CL (1 toyMC)
median expected limit: r < 1.28413 @ 95%CL (1 toyMC)
   68% expected band : 1.28413 < r < 1.28413
   95% expected band : 1.28413 < r < 1.28413
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1420442318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35615 +/- 0.00422647 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.35615 @ 95%CL (1 toyMC)
median expected limit: r < 1.35615 @ 95%CL (1 toyMC)
   68% expected band : 1.35615 < r < 1.35615
   95% expected band : 1.35615 < r < 1.35615
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 856662268
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91382 +/- 0.00635324 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.91382 @ 95%CL (1 toyMC)
median expected limit: r < 1.91382 @ 95%CL (1 toyMC)
   68% expected band : 1.91382 < r < 1.91382
   95% expected band : 1.91382 < r < 1.91382
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 121411685
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35831 +/- 0.00596075 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.35831 @ 95%CL (1 toyMC)
median expected limit: r < 1.35831 @ 95%CL (1 toyMC)
   68% expected band : 1.35831 < r < 1.35831
   95% expected band : 1.35831 < r < 1.35831
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1606634990
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84802 +/- 0.00449994 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.84802 @ 95%CL (1 toyMC)
median expected limit: r < 1.84802 @ 95%CL (1 toyMC)
   68% expected band : 1.84802 < r < 1.84802
   95% expected band : 1.84802 < r < 1.84802
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -524011304
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74741 +/- 0.00481881 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.74741 @ 95%CL (1 toyMC)
median expected limit: r < 1.74741 @ 95%CL (1 toyMC)
   68% expected band : 1.74741 < r < 1.74741
   95% expected band : 1.74741 < r < 1.74741
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1388762026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27693 +/- 0.00431225 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.27693 @ 95%CL (1 toyMC)
median expected limit: r < 1.27693 @ 95%CL (1 toyMC)
   68% expected band : 1.27693 < r < 1.27693
   95% expected band : 1.27693 < r < 1.27693
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1618196140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49893 +/- 0.00467045 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.49893 @ 95%CL (1 toyMC)
median expected limit: r < 2.49893 @ 95%CL (1 toyMC)
   68% expected band : 2.49893 < r < 2.49893
   95% expected band : 2.49893 < r < 2.49893
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1906590355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.25109 +/- 0.00533014 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.25109 @ 95%CL (1 toyMC)
median expected limit: r < 2.25109 @ 95%CL (1 toyMC)
   68% expected band : 2.25109 < r < 2.25109
   95% expected band : 2.25109 < r < 2.25109
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2068790766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.86179 +/- 0.00501779 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.86179 @ 95%CL (1 toyMC)
median expected limit: r < 1.86179 @ 95%CL (1 toyMC)
   68% expected band : 1.86179 < r < 1.86179
   95% expected band : 1.86179 < r < 1.86179
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1005401549
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43747 +/- 0.00484787 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.43747 @ 95%CL (1 toyMC)
median expected limit: r < 1.43747 @ 95%CL (1 toyMC)
   68% expected band : 1.43747 < r < 1.43747
   95% expected band : 1.43747 < r < 1.43747
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1671329245
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.01361 +/- 0.00592326 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.01361 @ 95%CL (1 toyMC)
median expected limit: r < 4.01361 @ 95%CL (1 toyMC)
   68% expected band : 4.01361 < r < 4.01361
   95% expected band : 4.01361 < r < 4.01361
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1164699209
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25066 +/- 0.00396299 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.25066 @ 95%CL (1 toyMC)
median expected limit: r < 1.25066 @ 95%CL (1 toyMC)
   68% expected band : 1.25066 < r < 1.25066
   95% expected band : 1.25066 < r < 1.25066
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1731995850
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.73065 +/- 0.00447333 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.73065 @ 95%CL (1 toyMC)
median expected limit: r < 2.73065 @ 95%CL (1 toyMC)
   68% expected band : 2.73065 < r < 2.73065
   95% expected band : 2.73065 < r < 2.73065
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 44878290
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55922 +/- 0.0039416 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.55922 @ 95%CL (1 toyMC)
median expected limit: r < 1.55922 @ 95%CL (1 toyMC)
   68% expected band : 1.55922 < r < 1.55922
   95% expected band : 1.55922 < r < 1.55922
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1841159727
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10786 +/- 0.00476305 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.10786 @ 95%CL (1 toyMC)
median expected limit: r < 1.10786 @ 95%CL (1 toyMC)
   68% expected band : 1.10786 < r < 1.10786
   95% expected band : 1.10786 < r < 1.10786
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 777324902
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20819 +/- 0.00323338 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.20819 @ 95%CL (1 toyMC)
median expected limit: r < 1.20819 @ 95%CL (1 toyMC)
   68% expected band : 1.20819 < r < 1.20819
   95% expected band : 1.20819 < r < 1.20819
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 22226788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50381 +/- 0.0055657 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.50381 @ 95%CL (1 toyMC)
median expected limit: r < 2.50381 @ 95%CL (1 toyMC)
   68% expected band : 2.50381 < r < 2.50381
   95% expected band : 2.50381 < r < 2.50381
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 538680978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.18553 +/- 0.00468587 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.18553 @ 95%CL (1 toyMC)
median expected limit: r < 2.18553 @ 95%CL (1 toyMC)
   68% expected band : 2.18553 < r < 2.18553
   95% expected band : 2.18553 < r < 2.18553
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1796701619
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.34337 +/- 0.00513493 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.34337 @ 95%CL (1 toyMC)
median expected limit: r < 3.34337 @ 95%CL (1 toyMC)
   68% expected band : 3.34337 < r < 3.34337
   95% expected band : 3.34337 < r < 3.34337
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2027088230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63673 +/- 0.00651884 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.63673 @ 95%CL (1 toyMC)
median expected limit: r < 3.63673 @ 95%CL (1 toyMC)
   68% expected band : 3.63673 < r < 3.63673
   95% expected band : 3.63673 < r < 3.63673
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1708108855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3416 +/- 0.00409448 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.3416 @ 95%CL (1 toyMC)
median expected limit: r < 1.3416 @ 95%CL (1 toyMC)
   68% expected band : 1.3416 < r < 1.3416
   95% expected band : 1.3416 < r < 1.3416
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2056165784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.87864 +/- 0.00493741 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.87864 @ 95%CL (1 toyMC)
median expected limit: r < 1.87864 @ 95%CL (1 toyMC)
   68% expected band : 1.87864 < r < 1.87864
   95% expected band : 1.87864 < r < 1.87864
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -971039466
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43544 +/- 0.00439335 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.43544 @ 95%CL (1 toyMC)
median expected limit: r < 1.43544 @ 95%CL (1 toyMC)
   68% expected band : 1.43544 < r < 1.43544
   95% expected band : 1.43544 < r < 1.43544
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -284391654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.57349 +/- 0.00650818 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.57349 @ 95%CL (1 toyMC)
median expected limit: r < 2.57349 @ 95%CL (1 toyMC)
   68% expected band : 2.57349 < r < 2.57349
   95% expected band : 2.57349 < r < 2.57349
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1387229979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04771 +/- 0.00598007 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.04771 @ 95%CL (1 toyMC)
median expected limit: r < 2.04771 @ 95%CL (1 toyMC)
   68% expected band : 2.04771 < r < 2.04771
   95% expected band : 2.04771 < r < 2.04771
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1835559606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.21145 +/- 0.0054532 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.21145 @ 95%CL (1 toyMC)
median expected limit: r < 2.21145 @ 95%CL (1 toyMC)
   68% expected band : 2.21145 < r < 2.21145
   95% expected band : 2.21145 < r < 2.21145
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1244113628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49158 +/- 0.00626519 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.49158 @ 95%CL (1 toyMC)
median expected limit: r < 2.49158 @ 95%CL (1 toyMC)
   68% expected band : 2.49158 < r < 2.49158
   95% expected band : 2.49158 < r < 2.49158
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1324575749
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85426 +/- 0.00557972 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.85426 @ 95%CL (1 toyMC)
median expected limit: r < 1.85426 @ 95%CL (1 toyMC)
   68% expected band : 1.85426 < r < 1.85426
   95% expected band : 1.85426 < r < 1.85426
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1338025154
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.8022 +/- 0.00708426 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.8022 @ 95%CL (1 toyMC)
median expected limit: r < 3.8022 @ 95%CL (1 toyMC)
   68% expected band : 3.8022 < r < 3.8022
   95% expected band : 3.8022 < r < 3.8022
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1488902968
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.19665 +/- 0.00490976 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.19665 @ 95%CL (1 toyMC)
median expected limit: r < 2.19665 @ 95%CL (1 toyMC)
   68% expected band : 2.19665 < r < 2.19665
   95% expected band : 2.19665 < r < 2.19665
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1524883095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73182 +/- 0.00412025 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.73182 @ 95%CL (1 toyMC)
median expected limit: r < 1.73182 @ 95%CL (1 toyMC)
   68% expected band : 1.73182 < r < 1.73182
   95% expected band : 1.73182 < r < 1.73182
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1657556726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.88377 +/- 0.0057221 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.88377 @ 95%CL (1 toyMC)
median expected limit: r < 1.88377 @ 95%CL (1 toyMC)
   68% expected band : 1.88377 < r < 1.88377
   95% expected band : 1.88377 < r < 1.88377
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1540972277
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72077 +/- 0.00435063 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.72077 @ 95%CL (1 toyMC)
median expected limit: r < 1.72077 @ 95%CL (1 toyMC)
   68% expected band : 1.72077 < r < 1.72077
   95% expected band : 1.72077 < r < 1.72077
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1002909474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09825 +/- 0.00586558 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.09825 @ 95%CL (1 toyMC)
median expected limit: r < 3.09825 @ 95%CL (1 toyMC)
   68% expected band : 3.09825 < r < 3.09825
   95% expected band : 3.09825 < r < 3.09825
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -350431044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76084 +/- 0.00498944 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.76084 @ 95%CL (1 toyMC)
median expected limit: r < 1.76084 @ 95%CL (1 toyMC)
   68% expected band : 1.76084 < r < 1.76084
   95% expected band : 1.76084 < r < 1.76084
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 22192017
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.20239 +/- 0.00619361 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.20239 @ 95%CL (1 toyMC)
median expected limit: r < 2.20239 @ 95%CL (1 toyMC)
   68% expected band : 2.20239 < r < 2.20239
   95% expected band : 2.20239 < r < 2.20239
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -79629055
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56818 +/- 0.00495645 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.56818 @ 95%CL (1 toyMC)
median expected limit: r < 1.56818 @ 95%CL (1 toyMC)
   68% expected band : 1.56818 < r < 1.56818
   95% expected band : 1.56818 < r < 1.56818
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1724150079
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.976729 +/- 0.00460246 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.976729 @ 95%CL (1 toyMC)
median expected limit: r < 0.976729 @ 95%CL (1 toyMC)
   68% expected band : 0.976729 < r < 0.976729
   95% expected band : 0.976729 < r < 0.976729
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 671271221
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.86584 +/- 0.00390128 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.86584 @ 95%CL (1 toyMC)
median expected limit: r < 1.86584 @ 95%CL (1 toyMC)
   68% expected band : 1.86584 < r < 1.86584
   95% expected band : 1.86584 < r < 1.86584
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 320365147
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.81575 +/- 0.00641481 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.81575 @ 95%CL (1 toyMC)
median expected limit: r < 2.81575 @ 95%CL (1 toyMC)
   68% expected band : 2.81575 < r < 2.81575
   95% expected band : 2.81575 < r < 2.81575
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2062128428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49777 +/- 0.0063148 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.49777 @ 95%CL (1 toyMC)
median expected limit: r < 2.49777 @ 95%CL (1 toyMC)
   68% expected band : 2.49777 < r < 2.49777
   95% expected band : 2.49777 < r < 2.49777
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1629794676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07357 +/- 0.00532131 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.07357 @ 95%CL (1 toyMC)
median expected limit: r < 2.07357 @ 95%CL (1 toyMC)
   68% expected band : 2.07357 < r < 2.07357
   95% expected band : 2.07357 < r < 2.07357
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1924534360
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27666 +/- 0.00575072 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.27666 @ 95%CL (1 toyMC)
median expected limit: r < 2.27666 @ 95%CL (1 toyMC)
   68% expected band : 2.27666 < r < 2.27666
   95% expected band : 2.27666 < r < 2.27666
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1780517726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5914 +/- 0.00503385 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.5914 @ 95%CL (1 toyMC)
median expected limit: r < 1.5914 @ 95%CL (1 toyMC)
   68% expected band : 1.5914 < r < 1.5914
   95% expected band : 1.5914 < r < 1.5914
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1431938972
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40219 +/- 0.00564822 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.40219 @ 95%CL (1 toyMC)
median expected limit: r < 1.40219 @ 95%CL (1 toyMC)
   68% expected band : 1.40219 < r < 1.40219
   95% expected band : 1.40219 < r < 1.40219
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 948385579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.24862 +/- 0.00668641 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.24862 @ 95%CL (1 toyMC)
median expected limit: r < 2.24862 @ 95%CL (1 toyMC)
   68% expected band : 2.24862 < r < 2.24862
   95% expected band : 2.24862 < r < 2.24862
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -899179175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.15667 +/- 0.0054653 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.15667 @ 95%CL (1 toyMC)
median expected limit: r < 2.15667 @ 95%CL (1 toyMC)
   68% expected band : 2.15667 < r < 2.15667
   95% expected band : 2.15667 < r < 2.15667
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 406271607
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.373 +/- 0.00493026 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.373 @ 95%CL (1 toyMC)
median expected limit: r < 1.373 @ 95%CL (1 toyMC)
   68% expected band : 1.373 < r < 1.373
   95% expected band : 1.373 < r < 1.373
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1440538415
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.88468 +/- 0.00716699 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.88468 @ 95%CL (1 toyMC)
median expected limit: r < 3.88468 @ 95%CL (1 toyMC)
   68% expected band : 3.88468 < r < 3.88468
   95% expected band : 3.88468 < r < 3.88468
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1392627075
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.01595 +/- 0.00551051 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.01595 @ 95%CL (1 toyMC)
median expected limit: r < 2.01595 @ 95%CL (1 toyMC)
   68% expected band : 2.01595 < r < 2.01595
   95% expected band : 2.01595 < r < 2.01595
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1720288022
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82718 +/- 0.00533863 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.82718 @ 95%CL (1 toyMC)
median expected limit: r < 1.82718 @ 95%CL (1 toyMC)
   68% expected band : 1.82718 < r < 1.82718
   95% expected band : 1.82718 < r < 1.82718
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -863418043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.87572 +/- 0.00628605 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.87572 @ 95%CL (1 toyMC)
median expected limit: r < 3.87572 @ 95%CL (1 toyMC)
   68% expected band : 3.87572 < r < 3.87572
   95% expected band : 3.87572 < r < 3.87572
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1716297741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3575 +/- 0.00506 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.3575 @ 95%CL (1 toyMC)
median expected limit: r < 1.3575 @ 95%CL (1 toyMC)
   68% expected band : 1.3575 < r < 1.3575
   95% expected band : 1.3575 < r < 1.3575
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 413487948
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54442 +/- 0.0041228 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.54442 @ 95%CL (1 toyMC)
median expected limit: r < 1.54442 @ 95%CL (1 toyMC)
   68% expected band : 1.54442 < r < 1.54442
   95% expected band : 1.54442 < r < 1.54442
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 462457053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.989038 +/- 0.0036744 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.989038 @ 95%CL (1 toyMC)
median expected limit: r < 0.989038 @ 95%CL (1 toyMC)
   68% expected band : 0.989038 < r < 0.989038
   95% expected band : 0.989038 < r < 0.989038
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -237655819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34455 +/- 0.00517481 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.34455 @ 95%CL (1 toyMC)
median expected limit: r < 1.34455 @ 95%CL (1 toyMC)
   68% expected band : 1.34455 < r < 1.34455
   95% expected band : 1.34455 < r < 1.34455
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -724282312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39033 +/- 0.00430447 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.39033 @ 95%CL (1 toyMC)
median expected limit: r < 2.39033 @ 95%CL (1 toyMC)
   68% expected band : 2.39033 < r < 2.39033
   95% expected band : 2.39033 < r < 2.39033
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1236976439
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63989 +/- 0.0043767 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.63989 @ 95%CL (1 toyMC)
median expected limit: r < 1.63989 @ 95%CL (1 toyMC)
   68% expected band : 1.63989 < r < 1.63989
   95% expected band : 1.63989 < r < 1.63989
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2052000817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.35023 +/- 0.00811481 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.35023 @ 95%CL (1 toyMC)
median expected limit: r < 2.35023 @ 95%CL (1 toyMC)
   68% expected band : 2.35023 < r < 2.35023
   95% expected band : 2.35023 < r < 2.35023
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1481846102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12251 +/- 0.00553133 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.12251 @ 95%CL (1 toyMC)
median expected limit: r < 2.12251 @ 95%CL (1 toyMC)
   68% expected band : 2.12251 < r < 2.12251
   95% expected band : 2.12251 < r < 2.12251
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1037758111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48995 +/- 0.00392221 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.48995 @ 95%CL (1 toyMC)
median expected limit: r < 1.48995 @ 95%CL (1 toyMC)
   68% expected band : 1.48995 < r < 1.48995
   95% expected band : 1.48995 < r < 1.48995
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 505994885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04439 +/- 0.00548244 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.04439 @ 95%CL (1 toyMC)
median expected limit: r < 2.04439 @ 95%CL (1 toyMC)
   68% expected band : 2.04439 < r < 2.04439
   95% expected band : 2.04439 < r < 2.04439
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 522832005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39159 +/- 0.00554871 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.39159 @ 95%CL (1 toyMC)
median expected limit: r < 2.39159 @ 95%CL (1 toyMC)
   68% expected band : 2.39159 < r < 2.39159
   95% expected band : 2.39159 < r < 2.39159
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 824168940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17626 +/- 0.00407846 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.17626 @ 95%CL (1 toyMC)
median expected limit: r < 1.17626 @ 95%CL (1 toyMC)
   68% expected band : 1.17626 < r < 1.17626
   95% expected band : 1.17626 < r < 1.17626
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1967814838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8511 +/- 0.00415229 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.8511 @ 95%CL (1 toyMC)
median expected limit: r < 1.8511 @ 95%CL (1 toyMC)
   68% expected band : 1.8511 < r < 1.8511
   95% expected band : 1.8511 < r < 1.8511
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 332766852
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68885 +/- 0.0058639 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.68885 @ 95%CL (1 toyMC)
median expected limit: r < 1.68885 @ 95%CL (1 toyMC)
   68% expected band : 1.68885 < r < 1.68885
   95% expected band : 1.68885 < r < 1.68885
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1591215843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.71615 +/- 0.00645741 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.71615 @ 95%CL (1 toyMC)
median expected limit: r < 3.71615 @ 95%CL (1 toyMC)
   68% expected band : 3.71615 < r < 3.71615
   95% expected band : 3.71615 < r < 3.71615
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -669373270
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84249 +/- 0.00507522 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.84249 @ 95%CL (1 toyMC)
median expected limit: r < 1.84249 @ 95%CL (1 toyMC)
   68% expected band : 1.84249 < r < 1.84249
   95% expected band : 1.84249 < r < 1.84249
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -484268970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31877 +/- 0.00499666 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.31877 @ 95%CL (1 toyMC)
median expected limit: r < 1.31877 @ 95%CL (1 toyMC)
   68% expected band : 1.31877 < r < 1.31877
   95% expected band : 1.31877 < r < 1.31877
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2093957044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8278 +/- 0.00442281 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.8278 @ 95%CL (1 toyMC)
median expected limit: r < 1.8278 @ 95%CL (1 toyMC)
   68% expected band : 1.8278 < r < 1.8278
   95% expected band : 1.8278 < r < 1.8278
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1624265606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56388 +/- 0.00527781 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.56388 @ 95%CL (1 toyMC)
median expected limit: r < 1.56388 @ 95%CL (1 toyMC)
   68% expected band : 1.56388 < r < 1.56388
   95% expected band : 1.56388 < r < 1.56388
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -105587395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50357 +/- 0.00468943 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.50357 @ 95%CL (1 toyMC)
median expected limit: r < 1.50357 @ 95%CL (1 toyMC)
   68% expected band : 1.50357 < r < 1.50357
   95% expected band : 1.50357 < r < 1.50357
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1806024850
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59176 +/- 0.00417077 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.59176 @ 95%CL (1 toyMC)
median expected limit: r < 1.59176 @ 95%CL (1 toyMC)
   68% expected band : 1.59176 < r < 1.59176
   95% expected band : 1.59176 < r < 1.59176
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1385147324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45097 +/- 0.00417503 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.45097 @ 95%CL (1 toyMC)
median expected limit: r < 1.45097 @ 95%CL (1 toyMC)
   68% expected band : 1.45097 < r < 1.45097
   95% expected band : 1.45097 < r < 1.45097
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2024191030
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.82193 +/- 0.00621178 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.82193 @ 95%CL (1 toyMC)
median expected limit: r < 2.82193 @ 95%CL (1 toyMC)
   68% expected band : 2.82193 < r < 2.82193
   95% expected band : 2.82193 < r < 2.82193
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-105587395.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1212421265.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1236976439.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1244113628.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1293609473.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1324575749.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1385147324.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1387229979.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1392627075.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1440538415.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1540972277.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1591215843.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1618196140.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1629794676.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1657556726.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1660675125.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1708108855.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1720288022.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1723406258.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1724150079.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1731995850.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1780517726.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1806024850.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1855372119.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1906590355.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1924534360.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-2052000817.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-2062128428.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-2093957044.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-2120270669.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-237655819.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-251052807.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-262041153.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-284391654.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-346566760.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-350431044.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-366292433.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-484268970.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-486199906.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-524011304.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-669373270.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-678759707.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-724282312.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-79629055.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-863418043.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-869211089.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-899179175.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-971039466.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.1002909474.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.1005401549.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.1037758111.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1066396571.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.116035666.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1164699209.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.121411685.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1272075763.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1338025154.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1388762026.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1420442318.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1431938972.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1481846102.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1488902968.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1524883095.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1583060476.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1606634990.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1624265606.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1671329245.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1694150318.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1716297741.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1796701619.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1835559606.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1841159727.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1884796734.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1967814838.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.2024191030.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.2027088230.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.2056165784.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.2068790766.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.2125001913.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.22192017.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.22226788.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.320365147.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.321122636.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.332766852.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.406271607.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.413487948.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.44878290.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.462457053.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.501044272.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.505994885.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.522832005.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.538680978.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.645571895.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.671271221.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.763285518.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.777324902.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.824168940.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.856662268.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.934367930.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.948385579.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2028546316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.88782 +/- 0.00623012 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.88782 @ 95%CL (1 toyMC)
median expected limit: r < 1.88782 @ 95%CL (1 toyMC)
   68% expected band : 1.88782 < r < 1.88782
   95% expected band : 1.88782 < r < 1.88782
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -299135730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04056 +/- 0.00565974 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.04056 @ 95%CL (1 toyMC)
median expected limit: r < 2.04056 @ 95%CL (1 toyMC)
   68% expected band : 2.04056 < r < 2.04056
   95% expected band : 2.04056 < r < 2.04056
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2032476030
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.86916 +/- 0.0061025 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.86916 @ 95%CL (1 toyMC)
median expected limit: r < 1.86916 @ 95%CL (1 toyMC)
   68% expected band : 1.86916 < r < 1.86916
   95% expected band : 1.86916 < r < 1.86916
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1873842824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50969 +/- 0.00633176 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.50969 @ 95%CL (1 toyMC)
median expected limit: r < 1.50969 @ 95%CL (1 toyMC)
   68% expected band : 1.50969 < r < 1.50969
   95% expected band : 1.50969 < r < 1.50969
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -954495076
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27997 +/- 0.00860903 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.27997 @ 95%CL (1 toyMC)
median expected limit: r < 2.27997 @ 95%CL (1 toyMC)
   68% expected band : 2.27997 < r < 2.27997
   95% expected band : 2.27997 < r < 2.27997
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1281464914
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41876 +/- 0.00486625 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.41876 @ 95%CL (1 toyMC)
median expected limit: r < 1.41876 @ 95%CL (1 toyMC)
   68% expected band : 1.41876 < r < 1.41876
   95% expected band : 1.41876 < r < 1.41876
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 17064705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53264 +/- 0.00585634 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.53264 @ 95%CL (1 toyMC)
median expected limit: r < 1.53264 @ 95%CL (1 toyMC)
   68% expected band : 1.53264 < r < 1.53264
   95% expected band : 1.53264 < r < 1.53264
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2111348982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.15021 +/- 0.00671733 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.15021 @ 95%CL (1 toyMC)
median expected limit: r < 2.15021 @ 95%CL (1 toyMC)
   68% expected band : 2.15021 < r < 2.15021
   95% expected band : 2.15021 < r < 2.15021
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 470473318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.95381 +/- 0.00811614 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.95381 @ 95%CL (1 toyMC)
median expected limit: r < 2.95381 @ 95%CL (1 toyMC)
   68% expected band : 2.95381 < r < 2.95381
   95% expected band : 2.95381 < r < 2.95381
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1342292313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66538 +/- 0.00761747 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.66538 @ 95%CL (1 toyMC)
median expected limit: r < 2.66538 @ 95%CL (1 toyMC)
   68% expected band : 2.66538 < r < 2.66538
   95% expected band : 2.66538 < r < 2.66538
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -471279100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29213 +/- 0.00627954 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.29213 @ 95%CL (1 toyMC)
median expected limit: r < 2.29213 @ 95%CL (1 toyMC)
   68% expected band : 2.29213 < r < 2.29213
   95% expected band : 2.29213 < r < 2.29213
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1387546330
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51552 +/- 0.0054824 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.51552 @ 95%CL (1 toyMC)
median expected limit: r < 1.51552 @ 95%CL (1 toyMC)
   68% expected band : 1.51552 < r < 1.51552
   95% expected band : 1.51552 < r < 1.51552
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 323215136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27196 +/- 0.00423812 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.27196 @ 95%CL (1 toyMC)
median expected limit: r < 1.27196 @ 95%CL (1 toyMC)
   68% expected band : 1.27196 < r < 1.27196
   95% expected band : 1.27196 < r < 1.27196
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 948113622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74162 +/- 0.00733643 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.74162 @ 95%CL (1 toyMC)
median expected limit: r < 1.74162 @ 95%CL (1 toyMC)
   68% expected band : 1.74162 < r < 1.74162
   95% expected band : 1.74162 < r < 1.74162
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -601911105
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4444 +/- 0.0061781 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.4444 @ 95%CL (1 toyMC)
median expected limit: r < 1.4444 @ 95%CL (1 toyMC)
   68% expected band : 1.4444 < r < 1.4444
   95% expected band : 1.4444 < r < 1.4444
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 593493152
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.7275 +/- 0.00662355 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.7275 @ 95%CL (1 toyMC)
median expected limit: r < 1.7275 @ 95%CL (1 toyMC)
   68% expected band : 1.7275 < r < 1.7275
   95% expected band : 1.7275 < r < 1.7275
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1631222415
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.792 +/- 0.00888026 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.792 @ 95%CL (1 toyMC)
median expected limit: r < 2.792 @ 95%CL (1 toyMC)
   68% expected band : 2.792 < r < 2.792
   95% expected band : 2.792 < r < 2.792
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1931553496
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.20779 +/- 0.00792273 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.20779 @ 95%CL (1 toyMC)
median expected limit: r < 2.20779 @ 95%CL (1 toyMC)
   68% expected band : 2.20779 < r < 2.20779
   95% expected band : 2.20779 < r < 2.20779
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1059656781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.08811 +/- 0.00717303 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.08811 @ 95%CL (1 toyMC)
median expected limit: r < 2.08811 @ 95%CL (1 toyMC)
   68% expected band : 2.08811 < r < 2.08811
   95% expected band : 2.08811 < r < 2.08811
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1533131500
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5683 +/- 0.00574515 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.5683 @ 95%CL (1 toyMC)
median expected limit: r < 1.5683 @ 95%CL (1 toyMC)
   68% expected band : 1.5683 < r < 1.5683
   95% expected band : 1.5683 < r < 1.5683
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 45717259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.90085 +/- 0.00620733 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.90085 @ 95%CL (1 toyMC)
median expected limit: r < 1.90085 @ 95%CL (1 toyMC)
   68% expected band : 1.90085 < r < 1.90085
   95% expected band : 1.90085 < r < 1.90085
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1889343800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66865 +/- 0.00699488 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.66865 @ 95%CL (1 toyMC)
median expected limit: r < 1.66865 @ 95%CL (1 toyMC)
   68% expected band : 1.66865 < r < 1.66865
   95% expected band : 1.66865 < r < 1.66865
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -355600560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07116 +/- 0.00726336 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.07116 @ 95%CL (1 toyMC)
median expected limit: r < 2.07116 @ 95%CL (1 toyMC)
   68% expected band : 2.07116 < r < 2.07116
   95% expected band : 2.07116 < r < 2.07116
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -357993984
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19775 +/- 0.00557898 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.19775 @ 95%CL (1 toyMC)
median expected limit: r < 1.19775 @ 95%CL (1 toyMC)
   68% expected band : 1.19775 < r < 1.19775
   95% expected band : 1.19775 < r < 1.19775
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -282452249
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.89362 +/- 0.00681193 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.89362 @ 95%CL (1 toyMC)
median expected limit: r < 1.89362 @ 95%CL (1 toyMC)
   68% expected band : 1.89362 < r < 1.89362
   95% expected band : 1.89362 < r < 1.89362
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -323323936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.37564 +/- 0.00835903 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.37564 @ 95%CL (1 toyMC)
median expected limit: r < 3.37564 @ 95%CL (1 toyMC)
   68% expected band : 3.37564 < r < 3.37564
   95% expected band : 3.37564 < r < 3.37564
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1317351408
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41355 +/- 0.00465219 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.41355 @ 95%CL (1 toyMC)
median expected limit: r < 1.41355 @ 95%CL (1 toyMC)
   68% expected band : 1.41355 < r < 1.41355
   95% expected band : 1.41355 < r < 1.41355
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1376504134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26349 +/- 0.00461651 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.26349 @ 95%CL (1 toyMC)
median expected limit: r < 1.26349 @ 95%CL (1 toyMC)
   68% expected band : 1.26349 < r < 1.26349
   95% expected band : 1.26349 < r < 1.26349
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 483944438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.20317 +/- 0.00755997 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.20317 @ 95%CL (1 toyMC)
median expected limit: r < 2.20317 @ 95%CL (1 toyMC)
   68% expected band : 2.20317 < r < 2.20317
   95% expected band : 2.20317 < r < 2.20317
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 664991423
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10843 +/- 0.00775934 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.10843 @ 95%CL (1 toyMC)
median expected limit: r < 3.10843 @ 95%CL (1 toyMC)
   68% expected band : 3.10843 < r < 3.10843
   95% expected band : 3.10843 < r < 3.10843
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1980024186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36031 +/- 0.00680743 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.36031 @ 95%CL (1 toyMC)
median expected limit: r < 1.36031 @ 95%CL (1 toyMC)
   68% expected band : 1.36031 < r < 1.36031
   95% expected band : 1.36031 < r < 1.36031
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 227000445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59554 +/- 0.00731611 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.59554 @ 95%CL (1 toyMC)
median expected limit: r < 2.59554 @ 95%CL (1 toyMC)
   68% expected band : 2.59554 < r < 2.59554
   95% expected band : 2.59554 < r < 2.59554
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 939866211
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44913 +/- 0.00514478 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.44913 @ 95%CL (1 toyMC)
median expected limit: r < 1.44913 @ 95%CL (1 toyMC)
   68% expected band : 1.44913 < r < 1.44913
   95% expected band : 1.44913 < r < 1.44913
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 911898292
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.03868 +/- 0.00581166 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.03868 @ 95%CL (1 toyMC)
median expected limit: r < 2.03868 @ 95%CL (1 toyMC)
   68% expected band : 2.03868 < r < 2.03868
   95% expected band : 2.03868 < r < 2.03868
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 641674595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46746 +/- 0.00863366 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.46746 @ 95%CL (1 toyMC)
median expected limit: r < 2.46746 @ 95%CL (1 toyMC)
   68% expected band : 2.46746 < r < 2.46746
   95% expected band : 2.46746 < r < 2.46746
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 669777858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07956 +/- 0.00520454 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.07956 @ 95%CL (1 toyMC)
median expected limit: r < 1.07956 @ 95%CL (1 toyMC)
   68% expected band : 1.07956 < r < 1.07956
   95% expected band : 1.07956 < r < 1.07956
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1202623006
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5714 +/- 0.00603157 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.5714 @ 95%CL (1 toyMC)
median expected limit: r < 2.5714 @ 95%CL (1 toyMC)
   68% expected band : 2.5714 < r < 2.5714
   95% expected band : 2.5714 < r < 2.5714
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1678309756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14317 +/- 0.00490897 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.14317 @ 95%CL (1 toyMC)
median expected limit: r < 1.14317 @ 95%CL (1 toyMC)
   68% expected band : 1.14317 < r < 1.14317
   95% expected band : 1.14317 < r < 1.14317
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1180551384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27565 +/- 0.0067486 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.27565 @ 95%CL (1 toyMC)
median expected limit: r < 2.27565 @ 95%CL (1 toyMC)
   68% expected band : 2.27565 < r < 2.27565
   95% expected band : 2.27565 < r < 2.27565
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1283678877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61499 +/- 0.00571549 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.61499 @ 95%CL (1 toyMC)
median expected limit: r < 1.61499 @ 95%CL (1 toyMC)
   68% expected band : 1.61499 < r < 1.61499
   95% expected band : 1.61499 < r < 1.61499
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1374180319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4874 +/- 0.00624997 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.4874 @ 95%CL (1 toyMC)
median expected limit: r < 2.4874 @ 95%CL (1 toyMC)
   68% expected band : 2.4874 < r < 2.4874
   95% expected band : 2.4874 < r < 2.4874
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1326748418
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50169 +/- 0.00636897 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.50169 @ 95%CL (1 toyMC)
median expected limit: r < 1.50169 @ 95%CL (1 toyMC)
   68% expected band : 1.50169 < r < 1.50169
   95% expected band : 1.50169 < r < 1.50169
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 286779709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24307 +/- 0.00475329 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.24307 @ 95%CL (1 toyMC)
median expected limit: r < 1.24307 @ 95%CL (1 toyMC)
   68% expected band : 1.24307 < r < 1.24307
   95% expected band : 1.24307 < r < 1.24307
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1776509782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50303 +/- 0.00589373 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.50303 @ 95%CL (1 toyMC)
median expected limit: r < 1.50303 @ 95%CL (1 toyMC)
   68% expected band : 1.50303 < r < 1.50303
   95% expected band : 1.50303 < r < 1.50303
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -450013714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.80231 +/- 0.00890604 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.80231 @ 95%CL (1 toyMC)
median expected limit: r < 3.80231 @ 95%CL (1 toyMC)
   68% expected band : 3.80231 < r < 3.80231
   95% expected band : 3.80231 < r < 3.80231
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1681337364
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.15784 +/- 0.00503701 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.15784 @ 95%CL (1 toyMC)
median expected limit: r < 2.15784 @ 95%CL (1 toyMC)
   68% expected band : 2.15784 < r < 2.15784
   95% expected band : 2.15784 < r < 2.15784
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1548368979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.08993 +/- 0.00751885 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.08993 @ 95%CL (1 toyMC)
median expected limit: r < 2.08993 @ 95%CL (1 toyMC)
   68% expected band : 2.08993 < r < 2.08993
   95% expected band : 2.08993 < r < 2.08993
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -271238164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81821 +/- 0.00633784 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.81821 @ 95%CL (1 toyMC)
median expected limit: r < 1.81821 @ 95%CL (1 toyMC)
   68% expected band : 1.81821 < r < 1.81821
   95% expected band : 1.81821 < r < 1.81821
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 338757914
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.15298 +/- 0.00851557 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.15298 @ 95%CL (1 toyMC)
median expected limit: r < 2.15298 @ 95%CL (1 toyMC)
   68% expected band : 2.15298 < r < 2.15298
   95% expected band : 2.15298 < r < 2.15298
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1198865745
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65886 +/- 0.00625057 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.65886 @ 95%CL (1 toyMC)
median expected limit: r < 1.65886 @ 95%CL (1 toyMC)
   68% expected band : 1.65886 < r < 1.65886
   95% expected band : 1.65886 < r < 1.65886
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1008917327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25019 +/- 0.00559564 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.25019 @ 95%CL (1 toyMC)
median expected limit: r < 1.25019 @ 95%CL (1 toyMC)
   68% expected band : 1.25019 < r < 1.25019
   95% expected band : 1.25019 < r < 1.25019
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1900297012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59018 +/- 0.00541899 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.59018 @ 95%CL (1 toyMC)
median expected limit: r < 1.59018 @ 95%CL (1 toyMC)
   68% expected band : 1.59018 < r < 1.59018
   95% expected band : 1.59018 < r < 1.59018
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 445867180
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.41169 +/- 0.00685114 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.41169 @ 95%CL (1 toyMC)
median expected limit: r < 3.41169 @ 95%CL (1 toyMC)
   68% expected band : 3.41169 < r < 3.41169
   95% expected band : 3.41169 < r < 3.41169
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -767452774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40163 +/- 0.00779132 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.40163 @ 95%CL (1 toyMC)
median expected limit: r < 2.40163 @ 95%CL (1 toyMC)
   68% expected band : 2.40163 < r < 2.40163
   95% expected band : 2.40163 < r < 2.40163
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1957023021
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40354 +/- 0.0055481 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.40354 @ 95%CL (1 toyMC)
median expected limit: r < 1.40354 @ 95%CL (1 toyMC)
   68% expected band : 1.40354 < r < 1.40354
   95% expected band : 1.40354 < r < 1.40354
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 699686281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32135 +/- 0.00552356 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.32135 @ 95%CL (1 toyMC)
median expected limit: r < 1.32135 @ 95%CL (1 toyMC)
   68% expected band : 1.32135 < r < 1.32135
   95% expected band : 1.32135 < r < 1.32135
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -426791141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.39377 +/- 0.00942675 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 5.39377 @ 95%CL (1 toyMC)
median expected limit: r < 5.39377 @ 95%CL (1 toyMC)
   68% expected band : 5.39377 < r < 5.39377
   95% expected band : 5.39377 < r < 5.39377
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -661582863
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.02473 +/- 0.00840053 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.02473 @ 95%CL (1 toyMC)
median expected limit: r < 3.02473 @ 95%CL (1 toyMC)
   68% expected band : 3.02473 < r < 3.02473
   95% expected band : 3.02473 < r < 3.02473
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1434706571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.38045 +/- 0.00675606 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.38045 @ 95%CL (1 toyMC)
median expected limit: r < 3.38045 @ 95%CL (1 toyMC)
   68% expected band : 3.38045 < r < 3.38045
   95% expected band : 3.38045 < r < 3.38045
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 556941681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.03412 +/- 0.00780666 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.03412 @ 95%CL (1 toyMC)
median expected limit: r < 2.03412 @ 95%CL (1 toyMC)
   68% expected band : 2.03412 < r < 2.03412
   95% expected band : 2.03412 < r < 2.03412
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 354815655
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17249 +/- 0.00937328 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.17249 @ 95%CL (1 toyMC)
median expected limit: r < 4.17249 @ 95%CL (1 toyMC)
   68% expected band : 4.17249 < r < 4.17249
   95% expected band : 4.17249 < r < 4.17249
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -300373096
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4409 +/- 0.00869683 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.4409 @ 95%CL (1 toyMC)
median expected limit: r < 2.4409 @ 95%CL (1 toyMC)
   68% expected band : 2.4409 < r < 2.4409
   95% expected band : 2.4409 < r < 2.4409
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1819836030
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.98904 +/- 0.00587059 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.98904 @ 95%CL (1 toyMC)
median expected limit: r < 1.98904 @ 95%CL (1 toyMC)
   68% expected band : 1.98904 < r < 1.98904
   95% expected band : 1.98904 < r < 1.98904
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1054158400
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02761 +/- 0.00511984 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.02761 @ 95%CL (1 toyMC)
median expected limit: r < 1.02761 @ 95%CL (1 toyMC)
   68% expected band : 1.02761 < r < 1.02761
   95% expected band : 1.02761 < r < 1.02761
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1212766237
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76023 +/- 0.00606976 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.76023 @ 95%CL (1 toyMC)
median expected limit: r < 1.76023 @ 95%CL (1 toyMC)
   68% expected band : 1.76023 < r < 1.76023
   95% expected band : 1.76023 < r < 1.76023
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1909851050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66472 +/- 0.00533204 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.66472 @ 95%CL (1 toyMC)
median expected limit: r < 1.66472 @ 95%CL (1 toyMC)
   68% expected band : 1.66472 < r < 1.66472
   95% expected band : 1.66472 < r < 1.66472
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1388878513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8258 +/- 0.00562064 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.8258 @ 95%CL (1 toyMC)
median expected limit: r < 1.8258 @ 95%CL (1 toyMC)
   68% expected band : 1.8258 < r < 1.8258
   95% expected band : 1.8258 < r < 1.8258
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -558819213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.97302 +/- 0.00816006 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.97302 @ 95%CL (1 toyMC)
median expected limit: r < 1.97302 @ 95%CL (1 toyMC)
   68% expected band : 1.97302 < r < 1.97302
   95% expected band : 1.97302 < r < 1.97302
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 477316952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.5313 +/- 0.00817048 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.5313 @ 95%CL (1 toyMC)
median expected limit: r < 3.5313 @ 95%CL (1 toyMC)
   68% expected band : 3.5313 < r < 3.5313
   95% expected band : 3.5313 < r < 3.5313
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1185782922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40798 +/- 0.00599429 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.40798 @ 95%CL (1 toyMC)
median expected limit: r < 1.40798 @ 95%CL (1 toyMC)
   68% expected band : 1.40798 < r < 1.40798
   95% expected band : 1.40798 < r < 1.40798
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -191360670
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31085 +/- 0.00608042 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.31085 @ 95%CL (1 toyMC)
median expected limit: r < 1.31085 @ 95%CL (1 toyMC)
   68% expected band : 1.31085 < r < 1.31085
   95% expected band : 1.31085 < r < 1.31085
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1969789158
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.26156 +/- 0.00667455 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.26156 @ 95%CL (1 toyMC)
median expected limit: r < 2.26156 @ 95%CL (1 toyMC)
   68% expected band : 2.26156 < r < 2.26156
   95% expected band : 2.26156 < r < 2.26156
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1262304830
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45066 +/- 0.0061288 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.45066 @ 95%CL (1 toyMC)
median expected limit: r < 1.45066 @ 95%CL (1 toyMC)
   68% expected band : 1.45066 < r < 1.45066
   95% expected band : 1.45066 < r < 1.45066
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1567043352
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91286 +/- 0.00671269 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.91286 @ 95%CL (1 toyMC)
median expected limit: r < 2.91286 @ 95%CL (1 toyMC)
   68% expected band : 2.91286 < r < 2.91286
   95% expected band : 2.91286 < r < 2.91286
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -277433068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51805 +/- 0.00561391 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.51805 @ 95%CL (1 toyMC)
median expected limit: r < 1.51805 @ 95%CL (1 toyMC)
   68% expected band : 1.51805 < r < 1.51805
   95% expected band : 1.51805 < r < 1.51805
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 523744920
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72776 +/- 0.00669174 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.72776 @ 95%CL (1 toyMC)
median expected limit: r < 1.72776 @ 95%CL (1 toyMC)
   68% expected band : 1.72776 < r < 1.72776
   95% expected band : 1.72776 < r < 1.72776
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1188429254
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37845 +/- 0.0060801 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.37845 @ 95%CL (1 toyMC)
median expected limit: r < 1.37845 @ 95%CL (1 toyMC)
   68% expected band : 1.37845 < r < 1.37845
   95% expected band : 1.37845 < r < 1.37845
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1213130319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85768 +/- 0.00625258 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.85768 @ 95%CL (1 toyMC)
median expected limit: r < 1.85768 @ 95%CL (1 toyMC)
   68% expected band : 1.85768 < r < 1.85768
   95% expected band : 1.85768 < r < 1.85768
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1949516647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22162 +/- 0.00471462 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.22162 @ 95%CL (1 toyMC)
median expected limit: r < 1.22162 @ 95%CL (1 toyMC)
   68% expected band : 1.22162 < r < 1.22162
   95% expected band : 1.22162 < r < 1.22162
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1696881450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17772 +/- 0.00716006 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.17772 @ 95%CL (1 toyMC)
median expected limit: r < 2.17772 @ 95%CL (1 toyMC)
   68% expected band : 2.17772 < r < 2.17772
   95% expected band : 2.17772 < r < 2.17772
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -233188457
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05822 +/- 0.00472422 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.05822 @ 95%CL (1 toyMC)
median expected limit: r < 1.05822 @ 95%CL (1 toyMC)
   68% expected band : 1.05822 < r < 1.05822
   95% expected band : 1.05822 < r < 1.05822
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1698052429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19228 +/- 0.00493225 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.19228 @ 95%CL (1 toyMC)
median expected limit: r < 1.19228 @ 95%CL (1 toyMC)
   68% expected band : 1.19228 < r < 1.19228
   95% expected band : 1.19228 < r < 1.19228
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1315267110
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.57156 +/- 0.00671581 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.57156 @ 95%CL (1 toyMC)
median expected limit: r < 2.57156 @ 95%CL (1 toyMC)
   68% expected band : 2.57156 < r < 2.57156
   95% expected band : 2.57156 < r < 2.57156
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1410404237
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.15312 +/- 0.00817152 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.15312 @ 95%CL (1 toyMC)
median expected limit: r < 3.15312 @ 95%CL (1 toyMC)
   68% expected band : 3.15312 < r < 3.15312
   95% expected band : 3.15312 < r < 3.15312
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -770024409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7214 +/- 0.00537882 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.7214 @ 95%CL (1 toyMC)
median expected limit: r < 2.7214 @ 95%CL (1 toyMC)
   68% expected band : 2.7214 < r < 2.7214
   95% expected band : 2.7214 < r < 2.7214
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1622592034
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5457 +/- 0.00602496 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.5457 @ 95%CL (1 toyMC)
median expected limit: r < 1.5457 @ 95%CL (1 toyMC)
   68% expected band : 1.5457 < r < 1.5457
   95% expected band : 1.5457 < r < 1.5457
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 206449827
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.21516 +/- 0.00713701 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.21516 @ 95%CL (1 toyMC)
median expected limit: r < 3.21516 @ 95%CL (1 toyMC)
   68% expected band : 3.21516 < r < 3.21516
   95% expected band : 3.21516 < r < 3.21516
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1399645492
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.87463 +/- 0.00600628 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.87463 @ 95%CL (1 toyMC)
median expected limit: r < 1.87463 @ 95%CL (1 toyMC)
   68% expected band : 1.87463 < r < 1.87463
   95% expected band : 1.87463 < r < 1.87463
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -202790190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0666 +/- 0.00526887 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.0666 @ 95%CL (1 toyMC)
median expected limit: r < 1.0666 @ 95%CL (1 toyMC)
   68% expected band : 1.0666 < r < 1.0666
   95% expected band : 1.0666 < r < 1.0666
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -33378422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58625 +/- 0.00612156 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.58625 @ 95%CL (1 toyMC)
median expected limit: r < 1.58625 @ 95%CL (1 toyMC)
   68% expected band : 1.58625 < r < 1.58625
   95% expected band : 1.58625 < r < 1.58625
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 736796708
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.20481 +/- 0.00707885 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.20481 @ 95%CL (1 toyMC)
median expected limit: r < 2.20481 @ 95%CL (1 toyMC)
   68% expected band : 2.20481 < r < 2.20481
   95% expected band : 2.20481 < r < 2.20481
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1216584438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92996 +/- 0.00690814 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.92996 @ 95%CL (1 toyMC)
median expected limit: r < 2.92996 @ 95%CL (1 toyMC)
   68% expected band : 2.92996 < r < 2.92996
   95% expected band : 2.92996 < r < 2.92996
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 19448580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24809 +/- 0.00571224 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.24809 @ 95%CL (1 toyMC)
median expected limit: r < 1.24809 @ 95%CL (1 toyMC)
   68% expected band : 1.24809 < r < 1.24809
   95% expected band : 1.24809 < r < 1.24809
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -139674185
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05739 +/- 0.00671788 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.05739 @ 95%CL (1 toyMC)
median expected limit: r < 3.05739 @ 95%CL (1 toyMC)
   68% expected band : 3.05739 < r < 3.05739
   95% expected band : 3.05739 < r < 3.05739
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -502139885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35533 +/- 0.0056519 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.35533 @ 95%CL (1 toyMC)
median expected limit: r < 1.35533 @ 95%CL (1 toyMC)
   68% expected band : 1.35533 < r < 1.35533
   95% expected band : 1.35533 < r < 1.35533
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1676027122
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.18857 +/- 0.00652562 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.18857 @ 95%CL (1 toyMC)
median expected limit: r < 2.18857 @ 95%CL (1 toyMC)
   68% expected band : 2.18857 < r < 2.18857
   95% expected band : 2.18857 < r < 2.18857
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 175432063
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.79772 +/- 0.00677942 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.79772 @ 95%CL (1 toyMC)
median expected limit: r < 1.79772 @ 95%CL (1 toyMC)
   68% expected band : 1.79772 < r < 1.79772
   95% expected band : 1.79772 < r < 1.79772
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -185597912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.17798 +/- 0.00826152 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.17798 @ 95%CL (1 toyMC)
median expected limit: r < 3.17798 @ 95%CL (1 toyMC)
   68% expected band : 3.17798 < r < 3.17798
   95% expected band : 3.17798 < r < 3.17798
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1075809150
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85842 +/- 0.0060058 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.85842 @ 95%CL (1 toyMC)
median expected limit: r < 1.85842 @ 95%CL (1 toyMC)
   68% expected band : 1.85842 < r < 1.85842
   95% expected band : 1.85842 < r < 1.85842
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -76358624
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72946 +/- 0.00647816 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.72946 @ 95%CL (1 toyMC)
median expected limit: r < 1.72946 @ 95%CL (1 toyMC)
   68% expected band : 1.72946 < r < 1.72946
   95% expected band : 1.72946 < r < 1.72946
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1008917327.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1054158400.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1180551384.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1185782922.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1188429254.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1198865745.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1212766237.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1213130319.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1216584438.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1281464914.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1283678877.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1315267110.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1317351408.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1374180319.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1376504134.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1387546330.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-139674185.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1533131500.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1631222415.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1676027122.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1678309756.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1681337364.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-185597912.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1873842824.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1909851050.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-191360670.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-1931553496.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-1969789158.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-202790190.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-2032476030.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-2111348982.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-233188457.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-271238164.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-277433068.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-282452249.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-299135730.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-300373096.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-323323936.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-33378422.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-355600560.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-357993984.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-426791141.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-450013714.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-471279100.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-502139885.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-558819213.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-601911105.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-661582863.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-76358624.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-767452774.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.-770024409.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.-954495076.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1059656781.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1075809150.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1202623006.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1262304830.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1326748418.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1342292313.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1388878513.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1399645492.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1410404237.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1434706571.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1548368979.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1567043352.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1622592034.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1696881450.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1698052429.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.17064705.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.175432063.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1776509782.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1819836030.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1889343800.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1900297012.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.19448580.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.1949516647.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.1957023021.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.1980024186.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.2028546316.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.206449827.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.227000445.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.286779709.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.323215136.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.338757914.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.354815655.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.445867180.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.45717259.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.470473318.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.477316952.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.483944438.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.523744920.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.556941681.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.593493152.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.641674595.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.664991423.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.669777858.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.699686281.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.736796708.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.911898292.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.939866211.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.948113622.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2045777476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37921 +/- 0.0060032 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.37921 @ 95%CL (1 toyMC)
median expected limit: r < 2.37921 @ 95%CL (1 toyMC)
   68% expected band : 2.37921 < r < 2.37921
   95% expected band : 2.37921 < r < 2.37921
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1909846111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49731 +/- 0.00482761 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.49731 @ 95%CL (1 toyMC)
median expected limit: r < 1.49731 @ 95%CL (1 toyMC)
   68% expected band : 1.49731 < r < 1.49731
   95% expected band : 1.49731 < r < 1.49731
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1871496304
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.971364 +/- 0.00371099 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.971364 @ 95%CL (1 toyMC)
median expected limit: r < 0.971364 @ 95%CL (1 toyMC)
   68% expected band : 0.971364 < r < 0.971364
   95% expected band : 0.971364 < r < 0.971364
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1219917775
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.21693 +/- 0.00485588 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.21693 @ 95%CL (1 toyMC)
median expected limit: r < 2.21693 @ 95%CL (1 toyMC)
   68% expected band : 2.21693 < r < 2.21693
   95% expected band : 2.21693 < r < 2.21693
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -778040862
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.47912 +/- 0.00524304 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.47912 @ 95%CL (1 toyMC)
median expected limit: r < 1.47912 @ 95%CL (1 toyMC)
   68% expected band : 1.47912 < r < 1.47912
   95% expected band : 1.47912 < r < 1.47912
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 689063659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73749 +/- 0.0039737 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.73749 @ 95%CL (1 toyMC)
median expected limit: r < 1.73749 @ 95%CL (1 toyMC)
   68% expected band : 1.73749 < r < 1.73749
   95% expected band : 1.73749 < r < 1.73749
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1642309626
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41715 +/- 0.00450313 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.41715 @ 95%CL (1 toyMC)
median expected limit: r < 1.41715 @ 95%CL (1 toyMC)
   68% expected band : 1.41715 < r < 1.41715
   95% expected band : 1.41715 < r < 1.41715
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1010238897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17409 +/- 0.0049651 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.17409 @ 95%CL (1 toyMC)
median expected limit: r < 2.17409 @ 95%CL (1 toyMC)
   68% expected band : 2.17409 < r < 2.17409
   95% expected band : 2.17409 < r < 2.17409
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1805604827
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67776 +/- 0.00797142 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.67776 @ 95%CL (1 toyMC)
median expected limit: r < 2.67776 @ 95%CL (1 toyMC)
   68% expected band : 2.67776 < r < 2.67776
   95% expected band : 2.67776 < r < 2.67776
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -376420763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.05127 +/- 0.00858963 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.05127 @ 95%CL (1 toyMC)
median expected limit: r < 5.05127 @ 95%CL (1 toyMC)
   68% expected band : 5.05127 < r < 5.05127
   95% expected band : 5.05127 < r < 5.05127
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -38253384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13841 +/- 0.00555701 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.13841 @ 95%CL (1 toyMC)
median expected limit: r < 2.13841 @ 95%CL (1 toyMC)
   68% expected band : 2.13841 < r < 2.13841
   95% expected band : 2.13841 < r < 2.13841
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1759591777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91229 +/- 0.00629527 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.91229 @ 95%CL (1 toyMC)
median expected limit: r < 2.91229 @ 95%CL (1 toyMC)
   68% expected band : 2.91229 < r < 2.91229
   95% expected band : 2.91229 < r < 2.91229
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2132763560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.86325 +/- 0.00537467 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.86325 @ 95%CL (1 toyMC)
median expected limit: r < 1.86325 @ 95%CL (1 toyMC)
   68% expected band : 1.86325 < r < 1.86325
   95% expected band : 1.86325 < r < 1.86325
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 408089604
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.19751 +/- 0.00638891 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.19751 @ 95%CL (1 toyMC)
median expected limit: r < 2.19751 @ 95%CL (1 toyMC)
   68% expected band : 2.19751 < r < 2.19751
   95% expected band : 2.19751 < r < 2.19751
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1447403696
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.62185 +/- 0.00497733 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.62185 @ 95%CL (1 toyMC)
median expected limit: r < 1.62185 @ 95%CL (1 toyMC)
   68% expected band : 1.62185 < r < 1.62185
   95% expected band : 1.62185 < r < 1.62185
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -782908553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46611 +/- 0.00580396 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.46611 @ 95%CL (1 toyMC)
median expected limit: r < 3.46611 @ 95%CL (1 toyMC)
   68% expected band : 3.46611 < r < 3.46611
   95% expected band : 3.46611 < r < 3.46611
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1194680601
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41876 +/- 0.00434704 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.41876 @ 95%CL (1 toyMC)
median expected limit: r < 1.41876 @ 95%CL (1 toyMC)
   68% expected band : 1.41876 < r < 1.41876
   95% expected band : 1.41876 < r < 1.41876
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1357005839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71788 +/- 0.0042293 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.71788 @ 95%CL (1 toyMC)
median expected limit: r < 1.71788 @ 95%CL (1 toyMC)
   68% expected band : 1.71788 < r < 1.71788
   95% expected band : 1.71788 < r < 1.71788
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1120573564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67405 +/- 0.00598287 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.67405 @ 95%CL (1 toyMC)
median expected limit: r < 1.67405 @ 95%CL (1 toyMC)
   68% expected band : 1.67405 < r < 1.67405
   95% expected band : 1.67405 < r < 1.67405
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1128862919
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52504 +/- 0.0046621 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.52504 @ 95%CL (1 toyMC)
median expected limit: r < 1.52504 @ 95%CL (1 toyMC)
   68% expected band : 1.52504 < r < 1.52504
   95% expected band : 1.52504 < r < 1.52504
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1034652226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.06617 +/- 0.00539218 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.06617 @ 95%CL (1 toyMC)
median expected limit: r < 2.06617 @ 95%CL (1 toyMC)
   68% expected band : 2.06617 < r < 2.06617
   95% expected band : 2.06617 < r < 2.06617
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1785369885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46253 +/- 0.00486025 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.46253 @ 95%CL (1 toyMC)
median expected limit: r < 1.46253 @ 95%CL (1 toyMC)
   68% expected band : 1.46253 < r < 1.46253
   95% expected band : 1.46253 < r < 1.46253
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 446761063
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.9951 +/- 0.00373676 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.9951 @ 95%CL (1 toyMC)
median expected limit: r < 1.9951 @ 95%CL (1 toyMC)
   68% expected band : 1.9951 < r < 1.9951
   95% expected band : 1.9951 < r < 1.9951
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1759491266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54673 +/- 0.00571032 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.54673 @ 95%CL (1 toyMC)
median expected limit: r < 1.54673 @ 95%CL (1 toyMC)
   68% expected band : 1.54673 < r < 1.54673
   95% expected band : 1.54673 < r < 1.54673
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -128783372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66747 +/- 0.00649877 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.66747 @ 95%CL (1 toyMC)
median expected limit: r < 2.66747 @ 95%CL (1 toyMC)
   68% expected band : 2.66747 < r < 2.66747
   95% expected band : 2.66747 < r < 2.66747
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 445078535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66591 +/- 0.00568218 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.66591 @ 95%CL (1 toyMC)
median expected limit: r < 1.66591 @ 95%CL (1 toyMC)
   68% expected band : 1.66591 < r < 1.66591
   95% expected band : 1.66591 < r < 1.66591
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 512620554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32746 +/- 0.00521496 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.32746 @ 95%CL (1 toyMC)
median expected limit: r < 2.32746 @ 95%CL (1 toyMC)
   68% expected band : 2.32746 < r < 2.32746
   95% expected band : 2.32746 < r < 2.32746
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 994777729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.88058 +/- 0.00567761 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.88058 @ 95%CL (1 toyMC)
median expected limit: r < 1.88058 @ 95%CL (1 toyMC)
   68% expected band : 1.88058 < r < 1.88058
   95% expected band : 1.88058 < r < 1.88058
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -566854554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38041 +/- 0.00485944 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.38041 @ 95%CL (1 toyMC)
median expected limit: r < 1.38041 @ 95%CL (1 toyMC)
   68% expected band : 1.38041 < r < 1.38041
   95% expected band : 1.38041 < r < 1.38041
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 719249521
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.39268 +/- 0.00860416 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.39268 @ 95%CL (1 toyMC)
median expected limit: r < 3.39268 @ 95%CL (1 toyMC)
   68% expected band : 3.39268 < r < 3.39268
   95% expected band : 3.39268 < r < 3.39268
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1234820255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32029 +/- 0.00723621 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.32029 @ 95%CL (1 toyMC)
median expected limit: r < 2.32029 @ 95%CL (1 toyMC)
   68% expected band : 2.32029 < r < 2.32029
   95% expected band : 2.32029 < r < 2.32029
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1921184799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.97547 +/- 0.00545671 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.97547 @ 95%CL (1 toyMC)
median expected limit: r < 1.97547 @ 95%CL (1 toyMC)
   68% expected band : 1.97547 < r < 1.97547
   95% expected band : 1.97547 < r < 1.97547
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 389001684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.96821 +/- 0.0063694 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.96821 @ 95%CL (1 toyMC)
median expected limit: r < 2.96821 @ 95%CL (1 toyMC)
   68% expected band : 2.96821 < r < 2.96821
   95% expected band : 2.96821 < r < 2.96821
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -231260631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21496 +/- 0.00516443 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.21496 @ 95%CL (1 toyMC)
median expected limit: r < 1.21496 @ 95%CL (1 toyMC)
   68% expected band : 1.21496 < r < 1.21496
   95% expected band : 1.21496 < r < 1.21496
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 378220369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82605 +/- 0.00554905 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.82605 @ 95%CL (1 toyMC)
median expected limit: r < 1.82605 @ 95%CL (1 toyMC)
   68% expected band : 1.82605 < r < 1.82605
   95% expected band : 1.82605 < r < 1.82605
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 682703855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84632 +/- 0.00624265 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.84632 @ 95%CL (1 toyMC)
median expected limit: r < 1.84632 @ 95%CL (1 toyMC)
   68% expected band : 1.84632 < r < 1.84632
   95% expected band : 1.84632 < r < 1.84632
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1899311062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42441 +/- 0.0051663 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.42441 @ 95%CL (1 toyMC)
median expected limit: r < 1.42441 @ 95%CL (1 toyMC)
   68% expected band : 1.42441 < r < 1.42441
   95% expected band : 1.42441 < r < 1.42441
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1411119084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.36788 +/- 0.0065897 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.36788 @ 95%CL (1 toyMC)
median expected limit: r < 3.36788 @ 95%CL (1 toyMC)
   68% expected band : 3.36788 < r < 3.36788
   95% expected band : 3.36788 < r < 3.36788
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1600448108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12898 +/- 0.00803287 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.12898 @ 95%CL (1 toyMC)
median expected limit: r < 2.12898 @ 95%CL (1 toyMC)
   68% expected band : 2.12898 < r < 2.12898
   95% expected band : 2.12898 < r < 2.12898
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1170356801
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12114 +/- 0.00712993 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.12114 @ 95%CL (1 toyMC)
median expected limit: r < 2.12114 @ 95%CL (1 toyMC)
   68% expected band : 2.12114 < r < 2.12114
   95% expected band : 2.12114 < r < 2.12114
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -568188173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.36135 +/- 0.00613013 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.36135 @ 95%CL (1 toyMC)
median expected limit: r < 2.36135 @ 95%CL (1 toyMC)
   68% expected band : 2.36135 < r < 2.36135
   95% expected band : 2.36135 < r < 2.36135
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 954496198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0832 +/- 0.00836201 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.0832 @ 95%CL (1 toyMC)
median expected limit: r < 3.0832 @ 95%CL (1 toyMC)
   68% expected band : 3.0832 < r < 3.0832
   95% expected band : 3.0832 < r < 3.0832
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1109511845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63044 +/- 0.00842045 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.63044 @ 95%CL (1 toyMC)
median expected limit: r < 2.63044 @ 95%CL (1 toyMC)
   68% expected band : 2.63044 < r < 2.63044
   95% expected band : 2.63044 < r < 2.63044
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 81472187
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48735 +/- 0.00544544 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.48735 @ 95%CL (1 toyMC)
median expected limit: r < 1.48735 @ 95%CL (1 toyMC)
   68% expected band : 1.48735 < r < 1.48735
   95% expected band : 1.48735 < r < 1.48735
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1284183265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4381 +/- 0.00473835 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.4381 @ 95%CL (1 toyMC)
median expected limit: r < 1.4381 @ 95%CL (1 toyMC)
   68% expected band : 1.4381 < r < 1.4381
   95% expected band : 1.4381 < r < 1.4381
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1907606022
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16644 +/- 0.00667341 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.16644 @ 95%CL (1 toyMC)
median expected limit: r < 3.16644 @ 95%CL (1 toyMC)
   68% expected band : 3.16644 < r < 3.16644
   95% expected band : 3.16644 < r < 3.16644
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -213081669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.97233 +/- 0.0053271 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.97233 @ 95%CL (1 toyMC)
median expected limit: r < 1.97233 @ 95%CL (1 toyMC)
   68% expected band : 1.97233 < r < 1.97233
   95% expected band : 1.97233 < r < 1.97233
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1540315311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55038 +/- 0.00534958 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.55038 @ 95%CL (1 toyMC)
median expected limit: r < 1.55038 @ 95%CL (1 toyMC)
   68% expected band : 1.55038 < r < 1.55038
   95% expected band : 1.55038 < r < 1.55038
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -768103092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92317 +/- 0.00445015 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.92317 @ 95%CL (1 toyMC)
median expected limit: r < 1.92317 @ 95%CL (1 toyMC)
   68% expected band : 1.92317 < r < 1.92317
   95% expected band : 1.92317 < r < 1.92317
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1123101356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.08208 +/- 0.00566257 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.08208 @ 95%CL (1 toyMC)
median expected limit: r < 2.08208 @ 95%CL (1 toyMC)
   68% expected band : 2.08208 < r < 2.08208
   95% expected band : 2.08208 < r < 2.08208
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1559235170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65704 +/- 0.00748206 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.65704 @ 95%CL (1 toyMC)
median expected limit: r < 2.65704 @ 95%CL (1 toyMC)
   68% expected band : 2.65704 < r < 2.65704
   95% expected band : 2.65704 < r < 2.65704
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 488051282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37055 +/- 0.00480572 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.37055 @ 95%CL (1 toyMC)
median expected limit: r < 1.37055 @ 95%CL (1 toyMC)
   68% expected band : 1.37055 < r < 1.37055
   95% expected band : 1.37055 < r < 1.37055
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 909550979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92339 +/- 0.00563051 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.92339 @ 95%CL (1 toyMC)
median expected limit: r < 1.92339 @ 95%CL (1 toyMC)
   68% expected band : 1.92339 < r < 1.92339
   95% expected band : 1.92339 < r < 1.92339
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1332845576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29221 +/- 0.00754448 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.29221 @ 95%CL (1 toyMC)
median expected limit: r < 2.29221 @ 95%CL (1 toyMC)
   68% expected band : 2.29221 < r < 2.29221
   95% expected band : 2.29221 < r < 2.29221
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1694148119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.89093 +/- 0.00511473 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.89093 @ 95%CL (1 toyMC)
median expected limit: r < 1.89093 @ 95%CL (1 toyMC)
   68% expected band : 1.89093 < r < 1.89093
   95% expected band : 1.89093 < r < 1.89093
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -393788749
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.03147 +/- 0.00505325 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.03147 @ 95%CL (1 toyMC)
median expected limit: r < 2.03147 @ 95%CL (1 toyMC)
   68% expected band : 2.03147 < r < 2.03147
   95% expected band : 2.03147 < r < 2.03147
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1402764582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5703 +/- 0.00570161 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.5703 @ 95%CL (1 toyMC)
median expected limit: r < 1.5703 @ 95%CL (1 toyMC)
   68% expected band : 1.5703 < r < 1.5703
   95% expected band : 1.5703 < r < 1.5703
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2142222502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63031 +/- 0.00487551 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.63031 @ 95%CL (1 toyMC)
median expected limit: r < 1.63031 @ 95%CL (1 toyMC)
   68% expected band : 1.63031 < r < 1.63031
   95% expected band : 1.63031 < r < 1.63031
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1311775822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19621 +/- 0.00485028 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.19621 @ 95%CL (1 toyMC)
median expected limit: r < 1.19621 @ 95%CL (1 toyMC)
   68% expected band : 1.19621 < r < 1.19621
   95% expected band : 1.19621 < r < 1.19621
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -745080523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71804 +/- 0.005367 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.71804 @ 95%CL (1 toyMC)
median expected limit: r < 1.71804 @ 95%CL (1 toyMC)
   68% expected band : 1.71804 < r < 1.71804
   95% expected band : 1.71804 < r < 1.71804
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 661866788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50594 +/- 0.00496168 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.50594 @ 95%CL (1 toyMC)
median expected limit: r < 1.50594 @ 95%CL (1 toyMC)
   68% expected band : 1.50594 < r < 1.50594
   95% expected band : 1.50594 < r < 1.50594
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1542404757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6065 +/- 0.00664766 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.6065 @ 95%CL (1 toyMC)
median expected limit: r < 2.6065 @ 95%CL (1 toyMC)
   68% expected band : 2.6065 < r < 2.6065
   95% expected band : 2.6065 < r < 2.6065
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -83361021
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58774 +/- 0.00630937 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.58774 @ 95%CL (1 toyMC)
median expected limit: r < 2.58774 @ 95%CL (1 toyMC)
   68% expected band : 2.58774 < r < 2.58774
   95% expected band : 2.58774 < r < 2.58774
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1243129614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14385 +/- 0.00368328 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.14385 @ 95%CL (1 toyMC)
median expected limit: r < 1.14385 @ 95%CL (1 toyMC)
   68% expected band : 1.14385 < r < 1.14385
   95% expected band : 1.14385 < r < 1.14385
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1513887650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99091 +/- 0.00570336 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.99091 @ 95%CL (1 toyMC)
median expected limit: r < 1.99091 @ 95%CL (1 toyMC)
   68% expected band : 1.99091 < r < 1.99091
   95% expected band : 1.99091 < r < 1.99091
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 711423395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43663 +/- 0.00455854 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.43663 @ 95%CL (1 toyMC)
median expected limit: r < 1.43663 @ 95%CL (1 toyMC)
   68% expected band : 1.43663 < r < 1.43663
   95% expected band : 1.43663 < r < 1.43663
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2132185486
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2517 +/- 0.00491862 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.2517 @ 95%CL (1 toyMC)
median expected limit: r < 1.2517 @ 95%CL (1 toyMC)
   68% expected band : 1.2517 < r < 1.2517
   95% expected band : 1.2517 < r < 1.2517
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -961969271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65645 +/- 0.00448967 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.65645 @ 95%CL (1 toyMC)
median expected limit: r < 1.65645 @ 95%CL (1 toyMC)
   68% expected band : 1.65645 < r < 1.65645
   95% expected band : 1.65645 < r < 1.65645
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -581272815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00001 +/- 0.00407837 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.00001 @ 95%CL (1 toyMC)
median expected limit: r < 1.00001 @ 95%CL (1 toyMC)
   68% expected band : 1.00001 < r < 1.00001
   95% expected band : 1.00001 < r < 1.00001
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1237616296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2193 +/- 0.00678244 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.2193 @ 95%CL (1 toyMC)
median expected limit: r < 2.2193 @ 95%CL (1 toyMC)
   68% expected band : 2.2193 < r < 2.2193
   95% expected band : 2.2193 < r < 2.2193
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1350106611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24454 +/- 0.00410549 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.24454 @ 95%CL (1 toyMC)
median expected limit: r < 1.24454 @ 95%CL (1 toyMC)
   68% expected band : 1.24454 < r < 1.24454
   95% expected band : 1.24454 < r < 1.24454
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1034363532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58869 +/- 0.00509147 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.58869 @ 95%CL (1 toyMC)
median expected limit: r < 1.58869 @ 95%CL (1 toyMC)
   68% expected band : 1.58869 < r < 1.58869
   95% expected band : 1.58869 < r < 1.58869
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 670333604
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67972 +/- 0.00576657 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.67972 @ 95%CL (1 toyMC)
median expected limit: r < 1.67972 @ 95%CL (1 toyMC)
   68% expected band : 1.67972 < r < 1.67972
   95% expected band : 1.67972 < r < 1.67972
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1868970226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.83214 +/- 0.00724802 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.83214 @ 95%CL (1 toyMC)
median expected limit: r < 3.83214 @ 95%CL (1 toyMC)
   68% expected band : 3.83214 < r < 3.83214
   95% expected band : 3.83214 < r < 3.83214
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1981024692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63511 +/- 0.00566543 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.63511 @ 95%CL (1 toyMC)
median expected limit: r < 1.63511 @ 95%CL (1 toyMC)
   68% expected band : 1.63511 < r < 1.63511
   95% expected band : 1.63511 < r < 1.63511
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -890803048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42068 +/- 0.00560466 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.42068 @ 95%CL (1 toyMC)
median expected limit: r < 2.42068 @ 95%CL (1 toyMC)
   68% expected band : 2.42068 < r < 2.42068
   95% expected band : 2.42068 < r < 2.42068
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1912620760
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39687 +/- 0.00571641 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.39687 @ 95%CL (1 toyMC)
median expected limit: r < 2.39687 @ 95%CL (1 toyMC)
   68% expected band : 2.39687 < r < 2.39687
   95% expected band : 2.39687 < r < 2.39687
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1812792700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.57003 +/- 0.00789034 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.57003 @ 95%CL (1 toyMC)
median expected limit: r < 2.57003 @ 95%CL (1 toyMC)
   68% expected band : 2.57003 < r < 2.57003
   95% expected band : 2.57003 < r < 2.57003
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 859115374
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52777 +/- 0.00629441 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.52777 @ 95%CL (1 toyMC)
median expected limit: r < 2.52777 @ 95%CL (1 toyMC)
   68% expected band : 2.52777 < r < 2.52777
   95% expected band : 2.52777 < r < 2.52777
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 34992516
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.86872 +/- 0.00602001 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.86872 @ 95%CL (1 toyMC)
median expected limit: r < 1.86872 @ 95%CL (1 toyMC)
   68% expected band : 1.86872 < r < 1.86872
   95% expected band : 1.86872 < r < 1.86872
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1906052414
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5087 +/- 0.00697954 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.5087 @ 95%CL (1 toyMC)
median expected limit: r < 2.5087 @ 95%CL (1 toyMC)
   68% expected band : 2.5087 < r < 2.5087
   95% expected band : 2.5087 < r < 2.5087
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1677061662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60866 +/- 0.00457315 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.60866 @ 95%CL (1 toyMC)
median expected limit: r < 1.60866 @ 95%CL (1 toyMC)
   68% expected band : 1.60866 < r < 1.60866
   95% expected band : 1.60866 < r < 1.60866
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1001069315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00774 +/- 0.00626155 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.00774 @ 95%CL (1 toyMC)
median expected limit: r < 2.00774 @ 95%CL (1 toyMC)
   68% expected band : 2.00774 < r < 2.00774
   95% expected band : 2.00774 < r < 2.00774
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -959971267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28645 +/- 0.00654148 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.28645 @ 95%CL (1 toyMC)
median expected limit: r < 2.28645 @ 95%CL (1 toyMC)
   68% expected band : 2.28645 < r < 2.28645
   95% expected band : 2.28645 < r < 2.28645
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1398711452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.7277 +/- 0.00642048 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.7277 @ 95%CL (1 toyMC)
median expected limit: r < 3.7277 @ 95%CL (1 toyMC)
   68% expected band : 3.7277 < r < 3.7277
   95% expected band : 3.7277 < r < 3.7277
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1580999760
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84503 +/- 0.00612385 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.84503 @ 95%CL (1 toyMC)
median expected limit: r < 1.84503 @ 95%CL (1 toyMC)
   68% expected band : 1.84503 < r < 1.84503
   95% expected band : 1.84503 < r < 1.84503
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1526397193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74858 +/- 0.00437985 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.74858 @ 95%CL (1 toyMC)
median expected limit: r < 1.74858 @ 95%CL (1 toyMC)
   68% expected band : 1.74858 < r < 1.74858
   95% expected band : 1.74858 < r < 1.74858
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1762221920
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09859 +/- 0.00426825 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.09859 @ 95%CL (1 toyMC)
median expected limit: r < 2.09859 @ 95%CL (1 toyMC)
   68% expected band : 2.09859 < r < 2.09859
   95% expected band : 2.09859 < r < 2.09859
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 547870792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.9576 +/- 0.00518236 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.9576 @ 95%CL (1 toyMC)
median expected limit: r < 1.9576 @ 95%CL (1 toyMC)
   68% expected band : 1.9576 < r < 1.9576
   95% expected band : 1.9576 < r < 1.9576
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -798193372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43441 +/- 0.0061446 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.43441 @ 95%CL (1 toyMC)
median expected limit: r < 2.43441 @ 95%CL (1 toyMC)
   68% expected band : 2.43441 < r < 2.43441
   95% expected band : 2.43441 < r < 2.43441
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 474066254
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06577 +/- 0.00468054 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.06577 @ 95%CL (1 toyMC)
median expected limit: r < 1.06577 @ 95%CL (1 toyMC)
   68% expected band : 1.06577 < r < 1.06577
   95% expected band : 1.06577 < r < 1.06577
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -835901729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39599 +/- 0.00582438 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.39599 @ 95%CL (1 toyMC)
median expected limit: r < 2.39599 @ 95%CL (1 toyMC)
   68% expected band : 2.39599 < r < 2.39599
   95% expected band : 2.39599 < r < 2.39599
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1926584675
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.20077 +/- 0.00499794 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.20077 @ 95%CL (1 toyMC)
median expected limit: r < 2.20077 @ 95%CL (1 toyMC)
   68% expected band : 2.20077 < r < 2.20077
   95% expected band : 2.20077 < r < 2.20077
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 76666411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.61366 +/- 0.00643378 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.61366 @ 95%CL (1 toyMC)
median expected limit: r < 3.61366 @ 95%CL (1 toyMC)
   68% expected band : 3.61366 < r < 3.61366
   95% expected band : 3.61366 < r < 3.61366
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -874228754
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2929 +/- 0.00626571 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.2929 @ 95%CL (1 toyMC)
median expected limit: r < 2.2929 @ 95%CL (1 toyMC)
   68% expected band : 2.2929 < r < 2.2929
   95% expected band : 2.2929 < r < 2.2929
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1142860710
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31385 +/- 0.00381886 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.31385 @ 95%CL (1 toyMC)
median expected limit: r < 1.31385 @ 95%CL (1 toyMC)
   68% expected band : 1.31385 < r < 1.31385
   95% expected band : 1.31385 < r < 1.31385
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1506960447
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07302 +/- 0.00707677 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.07302 @ 95%CL (1 toyMC)
median expected limit: r < 2.07302 @ 95%CL (1 toyMC)
   68% expected band : 2.07302 < r < 2.07302
   95% expected band : 2.07302 < r < 2.07302
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -143540671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32697 +/- 0.0047755 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.32697 @ 95%CL (1 toyMC)
median expected limit: r < 1.32697 @ 95%CL (1 toyMC)
   68% expected band : 1.32697 < r < 1.32697
   95% expected band : 1.32697 < r < 1.32697
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -312111669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80872 +/- 0.00621417 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.80872 @ 95%CL (1 toyMC)
median expected limit: r < 1.80872 @ 95%CL (1 toyMC)
   68% expected band : 1.80872 < r < 1.80872
   95% expected band : 1.80872 < r < 1.80872
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1611985107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63633 +/- 0.00593882 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.63633 @ 95%CL (1 toyMC)
median expected limit: r < 1.63633 @ 95%CL (1 toyMC)
   68% expected band : 1.63633 < r < 1.63633
   95% expected band : 1.63633 < r < 1.63633
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1001069315.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1010238897.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1034363532.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1034652226.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1109511845.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1123101356.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1170356801.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1194680601.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1234820255.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1237616296.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1284183265.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-128783372.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1411119084.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-143540671.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1506960447.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1513887650.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1559235170.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1600448108.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1759491266.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1759591777.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1762221920.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1805604827.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1868970226.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1871496304.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1906052414.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1909846111.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-1912620760.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-213081669.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-231260631.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-312111669.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-376420763.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-38253384.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-393788749.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-566854554.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-568188173.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-581272815.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-745080523.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-768103092.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-778040862.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-782908553.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-798193372.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-83361021.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-835901729.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-874228754.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-890803048.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-959971267.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-961969271.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.1120573564.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.1128862919.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.1142860710.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.1219917775.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1243129614.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1311775822.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1332845576.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1350106611.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1357005839.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1398711452.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1402764582.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1447403696.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1526397193.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1540315311.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1542404757.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1580999760.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1611985107.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1642309626.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1677061662.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1694148119.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1785369885.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1812792700.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1899311062.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1907606022.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1921184799.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1926584675.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1981024692.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.2045777476.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.2132185486.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.2132763560.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.2142222502.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.34992516.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.378220369.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.389001684.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.408089604.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.445078535.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.446761063.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.474066254.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.488051282.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.512620554.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.547870792.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.661866788.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.670333604.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.682703855.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.689063659.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.711423395.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.719249521.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.76666411.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.81472187.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.859115374.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.909550979.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.954496198.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.994777729.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1326561159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57303 +/- 0.00450579 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.57303 @ 95%CL (1 toyMC)
median expected limit: r < 1.57303 @ 95%CL (1 toyMC)
   68% expected band : 1.57303 < r < 1.57303
   95% expected band : 1.57303 < r < 1.57303
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 837988043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59529 +/- 0.00512966 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.59529 @ 95%CL (1 toyMC)
median expected limit: r < 1.59529 @ 95%CL (1 toyMC)
   68% expected band : 1.59529 < r < 1.59529
   95% expected band : 1.59529 < r < 1.59529
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 14524970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48391 +/- 0.004916 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.48391 @ 95%CL (1 toyMC)
median expected limit: r < 1.48391 @ 95%CL (1 toyMC)
   68% expected band : 1.48391 < r < 1.48391
   95% expected band : 1.48391 < r < 1.48391
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 369991856
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49994 +/- 0.00425669 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.49994 @ 95%CL (1 toyMC)
median expected limit: r < 1.49994 @ 95%CL (1 toyMC)
   68% expected band : 1.49994 < r < 1.49994
   95% expected band : 1.49994 < r < 1.49994
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1033527885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58117 +/- 0.00508749 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.58117 @ 95%CL (1 toyMC)
median expected limit: r < 1.58117 @ 95%CL (1 toyMC)
   68% expected band : 1.58117 < r < 1.58117
   95% expected band : 1.58117 < r < 1.58117
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -223188126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.94685 +/- 0.00619094 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.94685 @ 95%CL (1 toyMC)
median expected limit: r < 1.94685 @ 95%CL (1 toyMC)
   68% expected band : 1.94685 < r < 1.94685
   95% expected band : 1.94685 < r < 1.94685
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 919111569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78855 +/- 0.00525619 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.78855 @ 95%CL (1 toyMC)
median expected limit: r < 1.78855 @ 95%CL (1 toyMC)
   68% expected band : 1.78855 < r < 1.78855
   95% expected band : 1.78855 < r < 1.78855
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 19976104
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78555 +/- 0.00537276 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.78555 @ 95%CL (1 toyMC)
median expected limit: r < 1.78555 @ 95%CL (1 toyMC)
   68% expected band : 1.78555 < r < 1.78555
   95% expected band : 1.78555 < r < 1.78555
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 480810600
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.37132 +/- 0.00796074 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.37132 @ 95%CL (1 toyMC)
median expected limit: r < 4.37132 @ 95%CL (1 toyMC)
   68% expected band : 4.37132 < r < 4.37132
   95% expected band : 4.37132 < r < 4.37132
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2114725071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.22689 +/- 0.00459443 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.22689 @ 95%CL (1 toyMC)
median expected limit: r < 2.22689 @ 95%CL (1 toyMC)
   68% expected band : 2.22689 < r < 2.22689
   95% expected band : 2.22689 < r < 2.22689
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1524421036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.1211 +/- 0.00598353 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.1211 @ 95%CL (1 toyMC)
median expected limit: r < 2.1211 @ 95%CL (1 toyMC)
   68% expected band : 2.1211 < r < 2.1211
   95% expected band : 2.1211 < r < 2.1211
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1279453432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66487 +/- 0.00619577 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.66487 @ 95%CL (1 toyMC)
median expected limit: r < 2.66487 @ 95%CL (1 toyMC)
   68% expected band : 2.66487 < r < 2.66487
   95% expected band : 2.66487 < r < 2.66487
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1828976504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12537 +/- 0.00592875 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.12537 @ 95%CL (1 toyMC)
median expected limit: r < 3.12537 @ 95%CL (1 toyMC)
   68% expected band : 3.12537 < r < 3.12537
   95% expected band : 3.12537 < r < 3.12537
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -875652065
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46955 +/- 0.00491301 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.46955 @ 95%CL (1 toyMC)
median expected limit: r < 1.46955 @ 95%CL (1 toyMC)
   68% expected band : 1.46955 < r < 1.46955
   95% expected band : 1.46955 < r < 1.46955
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -832032236
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73087 +/- 0.00456198 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.73087 @ 95%CL (1 toyMC)
median expected limit: r < 1.73087 @ 95%CL (1 toyMC)
   68% expected band : 1.73087 < r < 1.73087
   95% expected band : 1.73087 < r < 1.73087
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2001546778
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.10759 +/- 0.00750762 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.10759 @ 95%CL (1 toyMC)
median expected limit: r < 4.10759 @ 95%CL (1 toyMC)
   68% expected band : 4.10759 < r < 4.10759
   95% expected band : 4.10759 < r < 4.10759
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1349453700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54943 +/- 0.00578045 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.54943 @ 95%CL (1 toyMC)
median expected limit: r < 2.54943 @ 95%CL (1 toyMC)
   68% expected band : 2.54943 < r < 2.54943
   95% expected band : 2.54943 < r < 2.54943
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 393757837
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70848 +/- 0.00580729 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.70848 @ 95%CL (1 toyMC)
median expected limit: r < 1.70848 @ 95%CL (1 toyMC)
   68% expected band : 1.70848 < r < 1.70848
   95% expected band : 1.70848 < r < 1.70848
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1814325593
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12332 +/- 0.0058713 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.12332 @ 95%CL (1 toyMC)
median expected limit: r < 2.12332 @ 95%CL (1 toyMC)
   68% expected band : 2.12332 < r < 2.12332
   95% expected band : 2.12332 < r < 2.12332
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 118236464
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49325 +/- 0.00513755 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.49325 @ 95%CL (1 toyMC)
median expected limit: r < 2.49325 @ 95%CL (1 toyMC)
   68% expected band : 2.49325 < r < 2.49325
   95% expected band : 2.49325 < r < 2.49325
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 372523911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14909 +/- 0.00631241 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.14909 @ 95%CL (1 toyMC)
median expected limit: r < 2.14909 @ 95%CL (1 toyMC)
   68% expected band : 2.14909 < r < 2.14909
   95% expected band : 2.14909 < r < 2.14909
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -102333000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.11689 +/- 0.00589029 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.11689 @ 95%CL (1 toyMC)
median expected limit: r < 3.11689 @ 95%CL (1 toyMC)
   68% expected band : 3.11689 < r < 3.11689
   95% expected band : 3.11689 < r < 3.11689
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -681283353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4475 +/- 0.00678895 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.4475 @ 95%CL (1 toyMC)
median expected limit: r < 2.4475 @ 95%CL (1 toyMC)
   68% expected band : 2.4475 < r < 2.4475
   95% expected band : 2.4475 < r < 2.4475
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1798240766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24851 +/- 0.00474674 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.24851 @ 95%CL (1 toyMC)
median expected limit: r < 1.24851 @ 95%CL (1 toyMC)
   68% expected band : 1.24851 < r < 1.24851
   95% expected band : 1.24851 < r < 1.24851
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1405161536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43423 +/- 0.00615393 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.43423 @ 95%CL (1 toyMC)
median expected limit: r < 2.43423 @ 95%CL (1 toyMC)
   68% expected band : 2.43423 < r < 2.43423
   95% expected band : 2.43423 < r < 2.43423
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1590479770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28293 +/- 0.00619506 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.28293 @ 95%CL (1 toyMC)
median expected limit: r < 2.28293 @ 95%CL (1 toyMC)
   68% expected band : 2.28293 < r < 2.28293
   95% expected band : 2.28293 < r < 2.28293
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1208454441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.59124 +/- 0.00581817 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.59124 @ 95%CL (1 toyMC)
median expected limit: r < 4.59124 @ 95%CL (1 toyMC)
   68% expected band : 4.59124 < r < 4.59124
   95% expected band : 4.59124 < r < 4.59124
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1196744278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93668 +/- 0.00551065 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.93668 @ 95%CL (1 toyMC)
median expected limit: r < 2.93668 @ 95%CL (1 toyMC)
   68% expected band : 2.93668 < r < 2.93668
   95% expected band : 2.93668 < r < 2.93668
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -934824761
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40442 +/- 0.00493444 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.40442 @ 95%CL (1 toyMC)
median expected limit: r < 1.40442 @ 95%CL (1 toyMC)
   68% expected band : 1.40442 < r < 1.40442
   95% expected band : 1.40442 < r < 1.40442
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2138750791
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4381 +/- 0.00551452 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.4381 @ 95%CL (1 toyMC)
median expected limit: r < 2.4381 @ 95%CL (1 toyMC)
   68% expected band : 2.4381 < r < 2.4381
   95% expected band : 2.4381 < r < 2.4381
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1549797744
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17008 +/- 0.00396424 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.17008 @ 95%CL (1 toyMC)
median expected limit: r < 1.17008 @ 95%CL (1 toyMC)
   68% expected band : 1.17008 < r < 1.17008
   95% expected band : 1.17008 < r < 1.17008
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1193953721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47528 +/- 0.00573364 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.47528 @ 95%CL (1 toyMC)
median expected limit: r < 2.47528 @ 95%CL (1 toyMC)
   68% expected band : 2.47528 < r < 2.47528
   95% expected band : 2.47528 < r < 2.47528
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1496900360
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.81517 +/- 0.00675327 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.81517 @ 95%CL (1 toyMC)
median expected limit: r < 3.81517 @ 95%CL (1 toyMC)
   68% expected band : 3.81517 < r < 3.81517
   95% expected band : 3.81517 < r < 3.81517
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -93766907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81338 +/- 0.00526039 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.81338 @ 95%CL (1 toyMC)
median expected limit: r < 1.81338 @ 95%CL (1 toyMC)
   68% expected band : 1.81338 < r < 1.81338
   95% expected band : 1.81338 < r < 1.81338
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 479283343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.69712 +/- 0.00567189 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.69712 @ 95%CL (1 toyMC)
median expected limit: r < 2.69712 @ 95%CL (1 toyMC)
   68% expected band : 2.69712 < r < 2.69712
   95% expected band : 2.69712 < r < 2.69712
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -4140017
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57617 +/- 0.00494409 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.57617 @ 95%CL (1 toyMC)
median expected limit: r < 1.57617 @ 95%CL (1 toyMC)
   68% expected band : 1.57617 < r < 1.57617
   95% expected band : 1.57617 < r < 1.57617
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2046955938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73088 +/- 0.0049651 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.73088 @ 95%CL (1 toyMC)
median expected limit: r < 1.73088 @ 95%CL (1 toyMC)
   68% expected band : 1.73088 < r < 1.73088
   95% expected band : 1.73088 < r < 1.73088
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1572474449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24889 +/- 0.00776028 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.24889 @ 95%CL (1 toyMC)
median expected limit: r < 3.24889 @ 95%CL (1 toyMC)
   68% expected band : 3.24889 < r < 3.24889
   95% expected band : 3.24889 < r < 3.24889
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -171637321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45619 +/- 0.00507272 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.45619 @ 95%CL (1 toyMC)
median expected limit: r < 1.45619 @ 95%CL (1 toyMC)
   68% expected band : 1.45619 < r < 1.45619
   95% expected band : 1.45619 < r < 1.45619
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1351546840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05293 +/- 0.0067881 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.05293 @ 95%CL (1 toyMC)
median expected limit: r < 3.05293 @ 95%CL (1 toyMC)
   68% expected band : 3.05293 < r < 3.05293
   95% expected band : 3.05293 < r < 3.05293
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1640027884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.03525 +/- 0.00565752 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.03525 @ 95%CL (1 toyMC)
median expected limit: r < 2.03525 @ 95%CL (1 toyMC)
   68% expected band : 2.03525 < r < 2.03525
   95% expected band : 2.03525 < r < 2.03525
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -763228304
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81269 +/- 0.00602531 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.81269 @ 95%CL (1 toyMC)
median expected limit: r < 1.81269 @ 95%CL (1 toyMC)
   68% expected band : 1.81269 < r < 1.81269
   95% expected band : 1.81269 < r < 1.81269
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1047708060
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44997 +/- 0.00628935 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.44997 @ 95%CL (1 toyMC)
median expected limit: r < 3.44997 @ 95%CL (1 toyMC)
   68% expected band : 3.44997 < r < 3.44997
   95% expected band : 3.44997 < r < 3.44997
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1252841803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13901 +/- 0.00527541 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.13901 @ 95%CL (1 toyMC)
median expected limit: r < 3.13901 @ 95%CL (1 toyMC)
   68% expected band : 3.13901 < r < 3.13901
   95% expected band : 3.13901 < r < 3.13901
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2081679848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.14946 +/- 0.00697825 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.14946 @ 95%CL (1 toyMC)
median expected limit: r < 3.14946 @ 95%CL (1 toyMC)
   68% expected band : 3.14946 < r < 3.14946
   95% expected band : 3.14946 < r < 3.14946
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1035272186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.75913 +/- 0.00566556 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.75913 @ 95%CL (1 toyMC)
median expected limit: r < 3.75913 @ 95%CL (1 toyMC)
   68% expected band : 3.75913 < r < 3.75913
   95% expected band : 3.75913 < r < 3.75913
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -427063774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.79058 +/- 0.0042789 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.79058 @ 95%CL (1 toyMC)
median expected limit: r < 1.79058 @ 95%CL (1 toyMC)
   68% expected band : 1.79058 < r < 1.79058
   95% expected band : 1.79058 < r < 1.79058
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1217030235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.55553 +/- 0.00621623 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.55553 @ 95%CL (1 toyMC)
median expected limit: r < 2.55553 @ 95%CL (1 toyMC)
   68% expected band : 2.55553 < r < 2.55553
   95% expected band : 2.55553 < r < 2.55553
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2006786460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63713 +/- 0.00492395 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.63713 @ 95%CL (1 toyMC)
median expected limit: r < 1.63713 @ 95%CL (1 toyMC)
   68% expected band : 1.63713 < r < 1.63713
   95% expected band : 1.63713 < r < 1.63713
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -510452420
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.50146 +/- 0.00644709 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.50146 @ 95%CL (1 toyMC)
median expected limit: r < 3.50146 @ 95%CL (1 toyMC)
   68% expected band : 3.50146 < r < 3.50146
   95% expected band : 3.50146 < r < 3.50146
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 521629724
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41799 +/- 0.00497155 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.41799 @ 95%CL (1 toyMC)
median expected limit: r < 1.41799 @ 95%CL (1 toyMC)
   68% expected band : 1.41799 < r < 1.41799
   95% expected band : 1.41799 < r < 1.41799
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -877953112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50366 +/- 0.005062 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.50366 @ 95%CL (1 toyMC)
median expected limit: r < 1.50366 @ 95%CL (1 toyMC)
   68% expected band : 1.50366 < r < 1.50366
   95% expected band : 1.50366 < r < 1.50366
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 575513227
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.70116 +/- 0.0059173 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.70116 @ 95%CL (1 toyMC)
median expected limit: r < 3.70116 @ 95%CL (1 toyMC)
   68% expected band : 3.70116 < r < 3.70116
   95% expected band : 3.70116 < r < 3.70116
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1315056464
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64634 +/- 0.00418384 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.64634 @ 95%CL (1 toyMC)
median expected limit: r < 1.64634 @ 95%CL (1 toyMC)
   68% expected band : 1.64634 < r < 1.64634
   95% expected band : 1.64634 < r < 1.64634
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1944771824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60456 +/- 0.00566427 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.60456 @ 95%CL (1 toyMC)
median expected limit: r < 1.60456 @ 95%CL (1 toyMC)
   68% expected band : 1.60456 < r < 1.60456
   95% expected band : 1.60456 < r < 1.60456
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -622035804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59051 +/- 0.00404488 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.59051 @ 95%CL (1 toyMC)
median expected limit: r < 1.59051 @ 95%CL (1 toyMC)
   68% expected band : 1.59051 < r < 1.59051
   95% expected band : 1.59051 < r < 1.59051
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1096889993
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5629 +/- 0.00538716 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.5629 @ 95%CL (1 toyMC)
median expected limit: r < 1.5629 @ 95%CL (1 toyMC)
   68% expected band : 1.5629 < r < 1.5629
   95% expected band : 1.5629 < r < 1.5629
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2119044015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67878 +/- 0.00490851 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.67878 @ 95%CL (1 toyMC)
median expected limit: r < 2.67878 @ 95%CL (1 toyMC)
   68% expected band : 2.67878 < r < 2.67878
   95% expected band : 2.67878 < r < 2.67878
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1660903710
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91189 +/- 0.00700074 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.91189 @ 95%CL (1 toyMC)
median expected limit: r < 2.91189 @ 95%CL (1 toyMC)
   68% expected band : 2.91189 < r < 2.91189
   95% expected band : 2.91189 < r < 2.91189
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1963910347
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28798 +/- 0.00470147 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.28798 @ 95%CL (1 toyMC)
median expected limit: r < 2.28798 @ 95%CL (1 toyMC)
   68% expected band : 2.28798 < r < 2.28798
   95% expected band : 2.28798 < r < 2.28798
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1040203276
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.31383 +/- 0.00513512 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.31383 @ 95%CL (1 toyMC)
median expected limit: r < 2.31383 @ 95%CL (1 toyMC)
   68% expected band : 2.31383 < r < 2.31383
   95% expected band : 2.31383 < r < 2.31383
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 505947946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.62911 +/- 0.00467562 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.62911 @ 95%CL (1 toyMC)
median expected limit: r < 1.62911 @ 95%CL (1 toyMC)
   68% expected band : 1.62911 < r < 1.62911
   95% expected band : 1.62911 < r < 1.62911
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -603135534
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13349 +/- 0.00616615 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.13349 @ 95%CL (1 toyMC)
median expected limit: r < 2.13349 @ 95%CL (1 toyMC)
   68% expected band : 2.13349 < r < 2.13349
   95% expected band : 2.13349 < r < 2.13349
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1069969992
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10626 +/- 0.00689257 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.10626 @ 95%CL (1 toyMC)
median expected limit: r < 3.10626 @ 95%CL (1 toyMC)
   68% expected band : 3.10626 < r < 3.10626
   95% expected band : 3.10626 < r < 3.10626
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1297325898
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.23244 +/- 0.00649402 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.23244 @ 95%CL (1 toyMC)
median expected limit: r < 2.23244 @ 95%CL (1 toyMC)
   68% expected band : 2.23244 < r < 2.23244
   95% expected band : 2.23244 < r < 2.23244
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -539358618
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.86386 +/- 0.00660562 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.86386 @ 95%CL (1 toyMC)
median expected limit: r < 1.86386 @ 95%CL (1 toyMC)
   68% expected band : 1.86386 < r < 1.86386
   95% expected band : 1.86386 < r < 1.86386
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1989453033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99961 +/- 0.00637825 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.99961 @ 95%CL (1 toyMC)
median expected limit: r < 2.99961 @ 95%CL (1 toyMC)
   68% expected band : 2.99961 < r < 2.99961
   95% expected band : 2.99961 < r < 2.99961
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2010802809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62619 +/- 0.00508216 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.62619 @ 95%CL (1 toyMC)
median expected limit: r < 2.62619 @ 95%CL (1 toyMC)
   68% expected band : 2.62619 < r < 2.62619
   95% expected band : 2.62619 < r < 2.62619
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -718870360
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60818 +/- 0.00480977 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.60818 @ 95%CL (1 toyMC)
median expected limit: r < 1.60818 @ 95%CL (1 toyMC)
   68% expected band : 1.60818 < r < 1.60818
   95% expected band : 1.60818 < r < 1.60818
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -421335683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65673 +/- 0.00493159 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.65673 @ 95%CL (1 toyMC)
median expected limit: r < 1.65673 @ 95%CL (1 toyMC)
   68% expected band : 1.65673 < r < 1.65673
   95% expected band : 1.65673 < r < 1.65673
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1170987617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63337 +/- 0.00457628 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.63337 @ 95%CL (1 toyMC)
median expected limit: r < 1.63337 @ 95%CL (1 toyMC)
   68% expected band : 1.63337 < r < 1.63337
   95% expected band : 1.63337 < r < 1.63337
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1385301200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.01388 +/- 0.00581788 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.01388 @ 95%CL (1 toyMC)
median expected limit: r < 2.01388 @ 95%CL (1 toyMC)
   68% expected band : 2.01388 < r < 2.01388
   95% expected band : 2.01388 < r < 2.01388
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -424427503
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.3861 +/- 0.00524306 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.3861 @ 95%CL (1 toyMC)
median expected limit: r < 2.3861 @ 95%CL (1 toyMC)
   68% expected band : 2.3861 < r < 2.3861
   95% expected band : 2.3861 < r < 2.3861
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1690465743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.22168 +/- 0.00649469 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.22168 @ 95%CL (1 toyMC)
median expected limit: r < 2.22168 @ 95%CL (1 toyMC)
   68% expected band : 2.22168 < r < 2.22168
   95% expected band : 2.22168 < r < 2.22168
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1705194630
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.18037 +/- 0.00534939 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.18037 @ 95%CL (1 toyMC)
median expected limit: r < 3.18037 @ 95%CL (1 toyMC)
   68% expected band : 3.18037 < r < 3.18037
   95% expected band : 3.18037 < r < 3.18037
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1574263386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59883 +/- 0.00459496 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.59883 @ 95%CL (1 toyMC)
median expected limit: r < 1.59883 @ 95%CL (1 toyMC)
   68% expected band : 1.59883 < r < 1.59883
   95% expected band : 1.59883 < r < 1.59883
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2049334298
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63031 +/- 0.00490324 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.63031 @ 95%CL (1 toyMC)
median expected limit: r < 1.63031 @ 95%CL (1 toyMC)
   68% expected band : 1.63031 < r < 1.63031
   95% expected band : 1.63031 < r < 1.63031
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1648563910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47701 +/- 0.00541713 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.47701 @ 95%CL (1 toyMC)
median expected limit: r < 2.47701 @ 95%CL (1 toyMC)
   68% expected band : 2.47701 < r < 2.47701
   95% expected band : 2.47701 < r < 2.47701
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1607665886
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63874 +/- 0.00416915 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.63874 @ 95%CL (1 toyMC)
median expected limit: r < 1.63874 @ 95%CL (1 toyMC)
   68% expected band : 1.63874 < r < 1.63874
   95% expected band : 1.63874 < r < 1.63874
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1176968114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.17684 +/- 0.00525831 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.17684 @ 95%CL (1 toyMC)
median expected limit: r < 3.17684 @ 95%CL (1 toyMC)
   68% expected band : 3.17684 < r < 3.17684
   95% expected band : 3.17684 < r < 3.17684
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1319221374
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72771 +/- 0.00450277 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.72771 @ 95%CL (1 toyMC)
median expected limit: r < 1.72771 @ 95%CL (1 toyMC)
   68% expected band : 1.72771 < r < 1.72771
   95% expected band : 1.72771 < r < 1.72771
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1490744554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.02156 +/- 0.00815858 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.02156 @ 95%CL (1 toyMC)
median expected limit: r < 4.02156 @ 95%CL (1 toyMC)
   68% expected band : 4.02156 < r < 4.02156
   95% expected band : 4.02156 < r < 4.02156
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -963193711
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.11425 +/- 0.00484159 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.11425 @ 95%CL (1 toyMC)
median expected limit: r < 2.11425 @ 95%CL (1 toyMC)
   68% expected band : 2.11425 < r < 2.11425
   95% expected band : 2.11425 < r < 2.11425
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1480635328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.36069 +/- 0.00555668 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.36069 @ 95%CL (1 toyMC)
median expected limit: r < 2.36069 @ 95%CL (1 toyMC)
   68% expected band : 2.36069 < r < 2.36069
   95% expected band : 2.36069 < r < 2.36069
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1854550345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25024 +/- 0.00612421 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.25024 @ 95%CL (1 toyMC)
median expected limit: r < 3.25024 @ 95%CL (1 toyMC)
   68% expected band : 3.25024 < r < 3.25024
   95% expected band : 3.25024 < r < 3.25024
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -736915613
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41958 +/- 0.00490148 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.41958 @ 95%CL (1 toyMC)
median expected limit: r < 1.41958 @ 95%CL (1 toyMC)
   68% expected band : 1.41958 < r < 1.41958
   95% expected band : 1.41958 < r < 1.41958
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1057252279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41101 +/- 0.00392826 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.41101 @ 95%CL (1 toyMC)
median expected limit: r < 1.41101 @ 95%CL (1 toyMC)
   68% expected band : 1.41101 < r < 1.41101
   95% expected band : 1.41101 < r < 1.41101
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 524398349
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.98329 +/- 0.00530533 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.98329 @ 95%CL (1 toyMC)
median expected limit: r < 1.98329 @ 95%CL (1 toyMC)
   68% expected band : 1.98329 < r < 1.98329
   95% expected band : 1.98329 < r < 1.98329
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 956534650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.70294 +/- 0.00601786 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.70294 @ 95%CL (1 toyMC)
median expected limit: r < 2.70294 @ 95%CL (1 toyMC)
   68% expected band : 2.70294 < r < 2.70294
   95% expected band : 2.70294 < r < 2.70294
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -468846065
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8103 +/- 0.00520914 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.8103 @ 95%CL (1 toyMC)
median expected limit: r < 1.8103 @ 95%CL (1 toyMC)
   68% expected band : 1.8103 < r < 1.8103
   95% expected band : 1.8103 < r < 1.8103
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1856569126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.05593 +/- 0.00502929 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.05593 @ 95%CL (1 toyMC)
median expected limit: r < 2.05593 @ 95%CL (1 toyMC)
   68% expected band : 2.05593 < r < 2.05593
   95% expected band : 2.05593 < r < 2.05593
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -862262550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.08068 +/- 0.0057492 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.08068 @ 95%CL (1 toyMC)
median expected limit: r < 2.08068 @ 95%CL (1 toyMC)
   68% expected band : 2.08068 < r < 2.08068
   95% expected band : 2.08068 < r < 2.08068
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1471035823
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6085 +/- 0.00651825 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.6085 @ 95%CL (1 toyMC)
median expected limit: r < 2.6085 @ 95%CL (1 toyMC)
   68% expected band : 2.6085 < r < 2.6085
   95% expected band : 2.6085 < r < 2.6085
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -632566787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.45703 +/- 0.00563118 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.45703 @ 95%CL (1 toyMC)
median expected limit: r < 2.45703 @ 95%CL (1 toyMC)
   68% expected band : 2.45703 < r < 2.45703
   95% expected band : 2.45703 < r < 2.45703
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1703734857
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.973155 +/- 0.00373147 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.973155 @ 95%CL (1 toyMC)
median expected limit: r < 0.973155 @ 95%CL (1 toyMC)
   68% expected band : 0.973155 < r < 0.973155
   95% expected band : 0.973155 < r < 0.973155
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1068922064
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99686 +/- 0.0068992 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.99686 @ 95%CL (1 toyMC)
median expected limit: r < 1.99686 @ 95%CL (1 toyMC)
   68% expected band : 1.99686 < r < 1.99686
   95% expected band : 1.99686 < r < 1.99686
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1349061965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.46267 +/- 0.00804108 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.46267 @ 95%CL (1 toyMC)
median expected limit: r < 4.46267 @ 95%CL (1 toyMC)
   68% expected band : 4.46267 < r < 4.46267
   95% expected band : 4.46267 < r < 4.46267
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -188186464
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40104 +/- 0.00409067 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.40104 @ 95%CL (1 toyMC)
median expected limit: r < 1.40104 @ 95%CL (1 toyMC)
   68% expected band : 1.40104 < r < 1.40104
   95% expected band : 1.40104 < r < 1.40104
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1395608774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2623 +/- 0.00471553 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.2623 @ 95%CL (1 toyMC)
median expected limit: r < 2.2623 @ 95%CL (1 toyMC)
   68% expected band : 2.2623 < r < 2.2623
   95% expected band : 2.2623 < r < 2.2623
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1949847938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.74636 +/- 0.0055654 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.74636 @ 95%CL (1 toyMC)
median expected limit: r < 2.74636 @ 95%CL (1 toyMC)
   68% expected band : 2.74636 < r < 2.74636
   95% expected band : 2.74636 < r < 2.74636
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-102333000.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1047708060.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1069969992.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1096889993.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1176968114.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1252841803.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1315056464.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1326561159.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1349061965.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1349453700.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1385301200.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1395608774.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1405161536.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1480635328.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1590479770.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1648563910.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1660903710.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1703734857.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1705194630.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-171637321.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1798240766.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1814325593.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1854550345.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-188186464.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1963910347.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1989453033.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-2001546778.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-2006786460.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-2010802809.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-2046955938.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-2049334298.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-2081679848.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-223188126.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-4140017.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-421335683.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-424427503.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-427063774.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-468846065.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-510452420.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-539358618.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-603135534.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-622035804.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-632566787.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-681283353.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-718870360.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-736915613.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-763228304.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-832032236.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-862262550.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-875652065.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.-877953112.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.-934824761.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.-93766907.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.-963193711.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1033527885.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1035272186.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1040203276.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1057252279.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1068922064.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1170987617.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.118236464.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1193953721.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1196744278.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1208454441.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1217030235.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1279453432.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1297325898.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1319221374.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1351546840.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.14524970.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1471035823.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1490744554.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1496900360.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1524421036.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.1549797744.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.1572474449.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.1574263386.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.1607665886.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.1640027884.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.1690465743.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.1828976504.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.1856569126.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.1944771824.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.1949847938.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.19976104.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.2114725071.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.2119044015.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.2138750791.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.369991856.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.372523911.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.393757837.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.479283343.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.480810600.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.505947946.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.521629724.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.524398349.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.575513227.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.837988043.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.919111569.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.956534650.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -809971126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.66201 +/- 0.00706845 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.66201 @ 95%CL (1 toyMC)
median expected limit: r < 4.66201 @ 95%CL (1 toyMC)
   68% expected band : 4.66201 < r < 4.66201
   95% expected band : 4.66201 < r < 4.66201
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1572947722
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63648 +/- 0.00436618 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.63648 @ 95%CL (1 toyMC)
median expected limit: r < 1.63648 @ 95%CL (1 toyMC)
   68% expected band : 1.63648 < r < 1.63648
   95% expected band : 1.63648 < r < 1.63648
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2135457808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81582 +/- 0.00387726 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.81582 @ 95%CL (1 toyMC)
median expected limit: r < 1.81582 @ 95%CL (1 toyMC)
   68% expected band : 1.81582 < r < 1.81582
   95% expected band : 1.81582 < r < 1.81582
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -427237189
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.05181 +/- 0.00444992 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.05181 @ 95%CL (1 toyMC)
median expected limit: r < 2.05181 @ 95%CL (1 toyMC)
   68% expected band : 2.05181 < r < 2.05181
   95% expected band : 2.05181 < r < 2.05181
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2029387642
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39293 +/- 0.00478398 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.39293 @ 95%CL (1 toyMC)
median expected limit: r < 1.39293 @ 95%CL (1 toyMC)
   68% expected band : 1.39293 < r < 1.39293
   95% expected band : 1.39293 < r < 1.39293
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1031285060
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58854 +/- 0.00401049 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.58854 @ 95%CL (1 toyMC)
median expected limit: r < 1.58854 @ 95%CL (1 toyMC)
   68% expected band : 1.58854 < r < 1.58854
   95% expected band : 1.58854 < r < 1.58854
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 861201405
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53348 +/- 0.00666339 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.53348 @ 95%CL (1 toyMC)
median expected limit: r < 2.53348 @ 95%CL (1 toyMC)
   68% expected band : 2.53348 < r < 2.53348
   95% expected band : 2.53348 < r < 2.53348
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1869704235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79859 +/- 0.00517625 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.79859 @ 95%CL (1 toyMC)
median expected limit: r < 2.79859 @ 95%CL (1 toyMC)
   68% expected band : 2.79859 < r < 2.79859
   95% expected band : 2.79859 < r < 2.79859
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1741625379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.32827 +/- 0.0063684 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.32827 @ 95%CL (1 toyMC)
median expected limit: r < 3.32827 @ 95%CL (1 toyMC)
   68% expected band : 3.32827 < r < 3.32827
   95% expected band : 3.32827 < r < 3.32827
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -603582422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.47013 +/- 0.00443035 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.47013 @ 95%CL (1 toyMC)
median expected limit: r < 1.47013 @ 95%CL (1 toyMC)
   68% expected band : 1.47013 < r < 1.47013
   95% expected band : 1.47013 < r < 1.47013
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1349487876
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.0505 +/- 0.00643067 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.0505 @ 95%CL (1 toyMC)
median expected limit: r < 2.0505 @ 95%CL (1 toyMC)
   68% expected band : 2.0505 < r < 2.0505
   95% expected band : 2.0505 < r < 2.0505
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 687559660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76515 +/- 0.00567105 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.76515 @ 95%CL (1 toyMC)
median expected limit: r < 1.76515 @ 95%CL (1 toyMC)
   68% expected band : 1.76515 < r < 1.76515
   95% expected band : 1.76515 < r < 1.76515
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -508307666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.31517 +/- 0.00609911 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.31517 @ 95%CL (1 toyMC)
median expected limit: r < 3.31517 @ 95%CL (1 toyMC)
   68% expected band : 3.31517 < r < 3.31517
   95% expected band : 3.31517 < r < 3.31517
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 374563325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40342 +/- 0.00406534 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.40342 @ 95%CL (1 toyMC)
median expected limit: r < 1.40342 @ 95%CL (1 toyMC)
   68% expected band : 1.40342 < r < 1.40342
   95% expected band : 1.40342 < r < 1.40342
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1742846674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51174 +/- 0.0042246 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.51174 @ 95%CL (1 toyMC)
median expected limit: r < 1.51174 @ 95%CL (1 toyMC)
   68% expected band : 1.51174 < r < 1.51174
   95% expected band : 1.51174 < r < 1.51174
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1555940771
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.36192 +/- 0.00481246 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.36192 @ 95%CL (1 toyMC)
median expected limit: r < 2.36192 @ 95%CL (1 toyMC)
   68% expected band : 2.36192 < r < 2.36192
   95% expected band : 2.36192 < r < 2.36192
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1643481132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.35012 +/- 0.00590652 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.35012 @ 95%CL (1 toyMC)
median expected limit: r < 2.35012 @ 95%CL (1 toyMC)
   68% expected band : 2.35012 < r < 2.35012
   95% expected band : 2.35012 < r < 2.35012
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1081927826
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.80798 +/- 0.00671532 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.80798 @ 95%CL (1 toyMC)
median expected limit: r < 3.80798 @ 95%CL (1 toyMC)
   68% expected band : 3.80798 < r < 3.80798
   95% expected band : 3.80798 < r < 3.80798
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -382936381
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.24539 +/- 0.00558184 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.24539 @ 95%CL (1 toyMC)
median expected limit: r < 2.24539 @ 95%CL (1 toyMC)
   68% expected band : 2.24539 < r < 2.24539
   95% expected band : 2.24539 < r < 2.24539
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 241890240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.71081 +/- 0.00524762 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.71081 @ 95%CL (1 toyMC)
median expected limit: r < 2.71081 @ 95%CL (1 toyMC)
   68% expected band : 2.71081 < r < 2.71081
   95% expected band : 2.71081 < r < 2.71081
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1260719756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77406 +/- 0.00452306 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.77406 @ 95%CL (1 toyMC)
median expected limit: r < 1.77406 @ 95%CL (1 toyMC)
   68% expected band : 1.77406 < r < 1.77406
   95% expected band : 1.77406 < r < 1.77406
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 675342831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.35391 +/- 0.00498251 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.35391 @ 95%CL (1 toyMC)
median expected limit: r < 2.35391 @ 95%CL (1 toyMC)
   68% expected band : 2.35391 < r < 2.35391
   95% expected band : 2.35391 < r < 2.35391
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 453825491
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55815 +/- 0.00519934 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.55815 @ 95%CL (1 toyMC)
median expected limit: r < 1.55815 @ 95%CL (1 toyMC)
   68% expected band : 1.55815 < r < 1.55815
   95% expected band : 1.55815 < r < 1.55815
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2022833525
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.1503 +/- 0.00617801 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.1503 @ 95%CL (1 toyMC)
median expected limit: r < 2.1503 @ 95%CL (1 toyMC)
   68% expected band : 2.1503 < r < 2.1503
   95% expected band : 2.1503 < r < 2.1503
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 26583868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66024 +/- 0.00430492 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.66024 @ 95%CL (1 toyMC)
median expected limit: r < 1.66024 @ 95%CL (1 toyMC)
   68% expected band : 1.66024 < r < 1.66024
   95% expected band : 1.66024 < r < 1.66024
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 604539281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43588 +/- 0.00535561 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.43588 @ 95%CL (1 toyMC)
median expected limit: r < 1.43588 @ 95%CL (1 toyMC)
   68% expected band : 1.43588 < r < 1.43588
   95% expected band : 1.43588 < r < 1.43588
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -955809939
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55698 +/- 0.00326563 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.55698 @ 95%CL (1 toyMC)
median expected limit: r < 1.55698 @ 95%CL (1 toyMC)
   68% expected band : 1.55698 < r < 1.55698
   95% expected band : 1.55698 < r < 1.55698
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1676245889
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.44326 +/- 0.00617466 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.44326 @ 95%CL (1 toyMC)
median expected limit: r < 2.44326 @ 95%CL (1 toyMC)
   68% expected band : 2.44326 < r < 2.44326
   95% expected band : 2.44326 < r < 2.44326
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1328398549
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54309 +/- 0.00616927 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.54309 @ 95%CL (1 toyMC)
median expected limit: r < 2.54309 @ 95%CL (1 toyMC)
   68% expected band : 2.54309 < r < 2.54309
   95% expected band : 2.54309 < r < 2.54309
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 689074520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.85791 +/- 0.00541001 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.85791 @ 95%CL (1 toyMC)
median expected limit: r < 2.85791 @ 95%CL (1 toyMC)
   68% expected band : 2.85791 < r < 2.85791
   95% expected band : 2.85791 < r < 2.85791
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 512950337
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91578 +/- 0.00560164 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.91578 @ 95%CL (1 toyMC)
median expected limit: r < 2.91578 @ 95%CL (1 toyMC)
   68% expected band : 2.91578 < r < 2.91578
   95% expected band : 2.91578 < r < 2.91578
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1290139908
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.7002 +/- 0.00415903 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.7002 @ 95%CL (1 toyMC)
median expected limit: r < 1.7002 @ 95%CL (1 toyMC)
   68% expected band : 1.7002 < r < 1.7002
   95% expected band : 1.7002 < r < 1.7002
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1614170935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.72949 +/- 0.00532039 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.72949 @ 95%CL (1 toyMC)
median expected limit: r < 2.72949 @ 95%CL (1 toyMC)
   68% expected band : 2.72949 < r < 2.72949
   95% expected band : 2.72949 < r < 2.72949
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 18041096
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43901 +/- 0.00483044 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.43901 @ 95%CL (1 toyMC)
median expected limit: r < 2.43901 @ 95%CL (1 toyMC)
   68% expected band : 2.43901 < r < 2.43901
   95% expected band : 2.43901 < r < 2.43901
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1594726707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48657 +/- 0.00468119 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.48657 @ 95%CL (1 toyMC)
median expected limit: r < 1.48657 @ 95%CL (1 toyMC)
   68% expected band : 1.48657 < r < 1.48657
   95% expected band : 1.48657 < r < 1.48657
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1227384419
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59784 +/- 0.00478547 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.59784 @ 95%CL (1 toyMC)
median expected limit: r < 1.59784 @ 95%CL (1 toyMC)
   68% expected band : 1.59784 < r < 1.59784
   95% expected band : 1.59784 < r < 1.59784
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1402965768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50299 +/- 0.0036757 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.50299 @ 95%CL (1 toyMC)
median expected limit: r < 2.50299 @ 95%CL (1 toyMC)
   68% expected band : 2.50299 < r < 2.50299
   95% expected band : 2.50299 < r < 2.50299
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1324867495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.15631 +/- 0.007682 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.15631 @ 95%CL (1 toyMC)
median expected limit: r < 3.15631 @ 95%CL (1 toyMC)
   68% expected band : 3.15631 < r < 3.15631
   95% expected band : 3.15631 < r < 3.15631
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 219636434
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0668 +/- 0.00655453 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.0668 @ 95%CL (1 toyMC)
median expected limit: r < 3.0668 @ 95%CL (1 toyMC)
   68% expected band : 3.0668 < r < 3.0668
   95% expected band : 3.0668 < r < 3.0668
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 986736936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65611 +/- 0.00386286 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.65611 @ 95%CL (1 toyMC)
median expected limit: r < 1.65611 @ 95%CL (1 toyMC)
   68% expected band : 1.65611 < r < 1.65611
   95% expected band : 1.65611 < r < 1.65611
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -556659907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.52044 +/- 0.00457253 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.52044 @ 95%CL (1 toyMC)
median expected limit: r < 3.52044 @ 95%CL (1 toyMC)
   68% expected band : 3.52044 < r < 3.52044
   95% expected band : 3.52044 < r < 3.52044
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 26713303
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92084 +/- 0.00455261 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.92084 @ 95%CL (1 toyMC)
median expected limit: r < 1.92084 @ 95%CL (1 toyMC)
   68% expected band : 1.92084 < r < 1.92084
   95% expected band : 1.92084 < r < 1.92084
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1325755880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0405 +/- 0.00523924 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.0405 @ 95%CL (1 toyMC)
median expected limit: r < 3.0405 @ 95%CL (1 toyMC)
   68% expected band : 3.0405 < r < 3.0405
   95% expected band : 3.0405 < r < 3.0405
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -584377804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.23095 +/- 0.0054054 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.23095 @ 95%CL (1 toyMC)
median expected limit: r < 2.23095 @ 95%CL (1 toyMC)
   68% expected band : 2.23095 < r < 2.23095
   95% expected band : 2.23095 < r < 2.23095
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 939681954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92056 +/- 0.00642895 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.92056 @ 95%CL (1 toyMC)
median expected limit: r < 3.92056 @ 95%CL (1 toyMC)
   68% expected band : 3.92056 < r < 3.92056
   95% expected band : 3.92056 < r < 3.92056
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -626805504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78696 +/- 0.00476023 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.78696 @ 95%CL (1 toyMC)
median expected limit: r < 1.78696 @ 95%CL (1 toyMC)
   68% expected band : 1.78696 < r < 1.78696
   95% expected band : 1.78696 < r < 1.78696
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 411622695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.2278 +/- 0.00626942 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.2278 @ 95%CL (1 toyMC)
median expected limit: r < 4.2278 @ 95%CL (1 toyMC)
   68% expected band : 4.2278 < r < 4.2278
   95% expected band : 4.2278 < r < 4.2278
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2000064370
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.51837 +/- 0.00634007 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.51837 @ 95%CL (1 toyMC)
median expected limit: r < 2.51837 @ 95%CL (1 toyMC)
   68% expected band : 2.51837 < r < 2.51837
   95% expected band : 2.51837 < r < 2.51837
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2108909698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47037 +/- 0.00600922 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.47037 @ 95%CL (1 toyMC)
median expected limit: r < 2.47037 @ 95%CL (1 toyMC)
   68% expected band : 2.47037 < r < 2.47037
   95% expected band : 2.47037 < r < 2.47037
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 953095602
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.25203 +/- 0.00575604 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.25203 @ 95%CL (1 toyMC)
median expected limit: r < 2.25203 @ 95%CL (1 toyMC)
   68% expected band : 2.25203 < r < 2.25203
   95% expected band : 2.25203 < r < 2.25203
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 311046641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09215 +/- 0.00541194 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.09215 @ 95%CL (1 toyMC)
median expected limit: r < 2.09215 @ 95%CL (1 toyMC)
   68% expected band : 2.09215 < r < 2.09215
   95% expected band : 2.09215 < r < 2.09215
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -224032971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.26483 +/- 0.00455432 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.26483 @ 95%CL (1 toyMC)
median expected limit: r < 2.26483 @ 95%CL (1 toyMC)
   68% expected band : 2.26483 < r < 2.26483
   95% expected band : 2.26483 < r < 2.26483
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 254270783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70924 +/- 0.00631581 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.70924 @ 95%CL (1 toyMC)
median expected limit: r < 1.70924 @ 95%CL (1 toyMC)
   68% expected band : 1.70924 < r < 1.70924
   95% expected band : 1.70924 < r < 1.70924
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1874019570
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53825 +/- 0.00489192 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.53825 @ 95%CL (1 toyMC)
median expected limit: r < 2.53825 @ 95%CL (1 toyMC)
   68% expected band : 2.53825 < r < 2.53825
   95% expected band : 2.53825 < r < 2.53825
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1279968695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.7145 +/- 0.0046688 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.7145 @ 95%CL (1 toyMC)
median expected limit: r < 1.7145 @ 95%CL (1 toyMC)
   68% expected band : 1.7145 < r < 1.7145
   95% expected band : 1.7145 < r < 1.7145
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -994739107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09825 +/- 0.00516939 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.09825 @ 95%CL (1 toyMC)
median expected limit: r < 2.09825 @ 95%CL (1 toyMC)
   68% expected band : 2.09825 < r < 2.09825
   95% expected band : 2.09825 < r < 2.09825
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1788645425
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27193 +/- 0.005597 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.27193 @ 95%CL (1 toyMC)
median expected limit: r < 2.27193 @ 95%CL (1 toyMC)
   68% expected band : 2.27193 < r < 2.27193
   95% expected band : 2.27193 < r < 2.27193
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -466927518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.48938 +/- 0.0057956 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.48938 @ 95%CL (1 toyMC)
median expected limit: r < 2.48938 @ 95%CL (1 toyMC)
   68% expected band : 2.48938 < r < 2.48938
   95% expected band : 2.48938 < r < 2.48938
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 648247980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.06868 +/- 0.00527324 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.06868 @ 95%CL (1 toyMC)
median expected limit: r < 2.06868 @ 95%CL (1 toyMC)
   68% expected band : 2.06868 < r < 2.06868
   95% expected band : 2.06868 < r < 2.06868
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1424236900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.1833 +/- 0.00515727 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.1833 @ 95%CL (1 toyMC)
median expected limit: r < 2.1833 @ 95%CL (1 toyMC)
   68% expected band : 2.1833 < r < 2.1833
   95% expected band : 2.1833 < r < 2.1833
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 585216425
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.81939 +/- 0.00570838 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.81939 @ 95%CL (1 toyMC)
median expected limit: r < 2.81939 @ 95%CL (1 toyMC)
   68% expected band : 2.81939 < r < 2.81939
   95% expected band : 2.81939 < r < 2.81939
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1605864787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.82368 +/- 0.00565651 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.82368 @ 95%CL (1 toyMC)
median expected limit: r < 2.82368 @ 95%CL (1 toyMC)
   68% expected band : 2.82368 < r < 2.82368
   95% expected band : 2.82368 < r < 2.82368
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 843958061
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.82113 +/- 0.00645112 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.82113 @ 95%CL (1 toyMC)
median expected limit: r < 2.82113 @ 95%CL (1 toyMC)
   68% expected band : 2.82113 < r < 2.82113
   95% expected band : 2.82113 < r < 2.82113
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1695841561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57021 +/- 0.00367346 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.57021 @ 95%CL (1 toyMC)
median expected limit: r < 1.57021 @ 95%CL (1 toyMC)
   68% expected band : 1.57021 < r < 1.57021
   95% expected band : 1.57021 < r < 1.57021
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -862611514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.3763 +/- 0.00548738 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.3763 @ 95%CL (1 toyMC)
median expected limit: r < 2.3763 @ 95%CL (1 toyMC)
   68% expected band : 2.3763 < r < 2.3763
   95% expected band : 2.3763 < r < 2.3763
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -203680662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.75709 +/- 0.00731801 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.75709 @ 95%CL (1 toyMC)
median expected limit: r < 2.75709 @ 95%CL (1 toyMC)
   68% expected band : 2.75709 < r < 2.75709
   95% expected band : 2.75709 < r < 2.75709
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -154857718
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84189 +/- 0.00571435 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.84189 @ 95%CL (1 toyMC)
median expected limit: r < 1.84189 @ 95%CL (1 toyMC)
   68% expected band : 1.84189 < r < 1.84189
   95% expected band : 1.84189 < r < 1.84189
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -824029759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3434 +/- 0.00475155 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.3434 @ 95%CL (1 toyMC)
median expected limit: r < 1.3434 @ 95%CL (1 toyMC)
   68% expected band : 1.3434 < r < 1.3434
   95% expected band : 1.3434 < r < 1.3434
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1316498427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.47711 +/- 0.00765789 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.47711 @ 95%CL (1 toyMC)
median expected limit: r < 3.47711 @ 95%CL (1 toyMC)
   68% expected band : 3.47711 < r < 3.47711
   95% expected band : 3.47711 < r < 3.47711
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 916231419
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.7872 +/- 0.0050241 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.7872 @ 95%CL (1 toyMC)
median expected limit: r < 1.7872 @ 95%CL (1 toyMC)
   68% expected band : 1.7872 < r < 1.7872
   95% expected band : 1.7872 < r < 1.7872
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 262848142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.95333 +/- 0.00481107 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.95333 @ 95%CL (1 toyMC)
median expected limit: r < 2.95333 @ 95%CL (1 toyMC)
   68% expected band : 2.95333 < r < 2.95333
   95% expected band : 2.95333 < r < 2.95333
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -514556073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82082 +/- 0.00398202 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.82082 @ 95%CL (1 toyMC)
median expected limit: r < 1.82082 @ 95%CL (1 toyMC)
   68% expected band : 1.82082 < r < 1.82082
   95% expected band : 1.82082 < r < 1.82082
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1588095406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.55037 +/- 0.00530758 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.55037 @ 95%CL (1 toyMC)
median expected limit: r < 2.55037 @ 95%CL (1 toyMC)
   68% expected band : 2.55037 < r < 2.55037
   95% expected band : 2.55037 < r < 2.55037
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -111952214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43865 +/- 0.00501359 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.43865 @ 95%CL (1 toyMC)
median expected limit: r < 2.43865 @ 95%CL (1 toyMC)
   68% expected band : 2.43865 < r < 2.43865
   95% expected band : 2.43865 < r < 2.43865
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -287809452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81607 +/- 0.00463983 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.81607 @ 95%CL (1 toyMC)
median expected limit: r < 1.81607 @ 95%CL (1 toyMC)
   68% expected band : 1.81607 < r < 1.81607
   95% expected band : 1.81607 < r < 1.81607
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1206082255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66547 +/- 0.00476199 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.66547 @ 95%CL (1 toyMC)
median expected limit: r < 1.66547 @ 95%CL (1 toyMC)
   68% expected band : 1.66547 < r < 1.66547
   95% expected band : 1.66547 < r < 1.66547
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1193666142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4841 +/- 0.00644437 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.4841 @ 95%CL (1 toyMC)
median expected limit: r < 3.4841 @ 95%CL (1 toyMC)
   68% expected band : 3.4841 < r < 3.4841
   95% expected band : 3.4841 < r < 3.4841
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -570971875
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8239 +/- 0.00518854 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.8239 @ 95%CL (1 toyMC)
median expected limit: r < 1.8239 @ 95%CL (1 toyMC)
   68% expected band : 1.8239 < r < 1.8239
   95% expected band : 1.8239 < r < 1.8239
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 365038644
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.02695 +/- 0.00537362 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.02695 @ 95%CL (1 toyMC)
median expected limit: r < 3.02695 @ 95%CL (1 toyMC)
   68% expected band : 3.02695 < r < 3.02695
   95% expected band : 3.02695 < r < 3.02695
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1861984695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7088 +/- 0.00625347 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.7088 @ 95%CL (1 toyMC)
median expected limit: r < 2.7088 @ 95%CL (1 toyMC)
   68% expected band : 2.7088 < r < 2.7088
   95% expected band : 2.7088 < r < 2.7088
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2093578643
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.30335 +/- 0.00474821 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.30335 @ 95%CL (1 toyMC)
median expected limit: r < 3.30335 @ 95%CL (1 toyMC)
   68% expected band : 3.30335 < r < 3.30335
   95% expected band : 3.30335 < r < 3.30335
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -334550347
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.48131 +/- 0.00706368 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.48131 @ 95%CL (1 toyMC)
median expected limit: r < 2.48131 @ 95%CL (1 toyMC)
   68% expected band : 2.48131 < r < 2.48131
   95% expected band : 2.48131 < r < 2.48131
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1553138874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09225 +/- 0.00508915 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.09225 @ 95%CL (1 toyMC)
median expected limit: r < 2.09225 @ 95%CL (1 toyMC)
   68% expected band : 2.09225 < r < 2.09225
   95% expected band : 2.09225 < r < 2.09225
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 212706704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.35388 +/- 0.00805698 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.35388 @ 95%CL (1 toyMC)
median expected limit: r < 5.35388 @ 95%CL (1 toyMC)
   68% expected band : 5.35388 < r < 5.35388
   95% expected band : 5.35388 < r < 5.35388
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1642310709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06801 +/- 0.00516163 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.06801 @ 95%CL (1 toyMC)
median expected limit: r < 3.06801 @ 95%CL (1 toyMC)
   68% expected band : 3.06801 < r < 3.06801
   95% expected band : 3.06801 < r < 3.06801
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -202248402
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53545 +/- 0.00487642 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.53545 @ 95%CL (1 toyMC)
median expected limit: r < 2.53545 @ 95%CL (1 toyMC)
   68% expected band : 2.53545 < r < 2.53545
   95% expected band : 2.53545 < r < 2.53545
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 875046622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91478 +/- 0.00508461 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.91478 @ 95%CL (1 toyMC)
median expected limit: r < 1.91478 @ 95%CL (1 toyMC)
   68% expected band : 1.91478 < r < 1.91478
   95% expected band : 1.91478 < r < 1.91478
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -508123207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22598 +/- 0.00436585 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.22598 @ 95%CL (1 toyMC)
median expected limit: r < 1.22598 @ 95%CL (1 toyMC)
   68% expected band : 1.22598 < r < 1.22598
   95% expected band : 1.22598 < r < 1.22598
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -927796830
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.79499 +/- 0.00567767 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.79499 @ 95%CL (1 toyMC)
median expected limit: r < 1.79499 @ 95%CL (1 toyMC)
   68% expected band : 1.79499 < r < 1.79499
   95% expected band : 1.79499 < r < 1.79499
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1675411256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66833 +/- 0.00521749 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.66833 @ 95%CL (1 toyMC)
median expected limit: r < 1.66833 @ 95%CL (1 toyMC)
   68% expected band : 1.66833 < r < 1.66833
   95% expected band : 1.66833 < r < 1.66833
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1490864484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99804 +/- 0.00474517 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.99804 @ 95%CL (1 toyMC)
median expected limit: r < 1.99804 @ 95%CL (1 toyMC)
   68% expected band : 1.99804 < r < 1.99804
   95% expected band : 1.99804 < r < 1.99804
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1039386242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63144 +/- 0.00522288 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.63144 @ 95%CL (1 toyMC)
median expected limit: r < 1.63144 @ 95%CL (1 toyMC)
   68% expected band : 1.63144 < r < 1.63144
   95% expected band : 1.63144 < r < 1.63144
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1586626773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52465 +/- 0.0047755 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.52465 @ 95%CL (1 toyMC)
median expected limit: r < 1.52465 @ 95%CL (1 toyMC)
   68% expected band : 1.52465 < r < 1.52465
   95% expected band : 1.52465 < r < 1.52465
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 411136005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52501 +/- 0.00443547 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.52501 @ 95%CL (1 toyMC)
median expected limit: r < 2.52501 @ 95%CL (1 toyMC)
   68% expected band : 2.52501 < r < 2.52501
   95% expected band : 2.52501 < r < 2.52501
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1536039391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85411 +/- 0.0052123 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.85411 @ 95%CL (1 toyMC)
median expected limit: r < 1.85411 @ 95%CL (1 toyMC)
   68% expected band : 1.85411 < r < 1.85411
   95% expected band : 1.85411 < r < 1.85411
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 864621746
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62462 +/- 0.00613374 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.62462 @ 95%CL (1 toyMC)
median expected limit: r < 2.62462 @ 95%CL (1 toyMC)
   68% expected band : 2.62462 < r < 2.62462
   95% expected band : 2.62462 < r < 2.62462
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1418664081
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.98625 +/- 0.00518545 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.98625 @ 95%CL (1 toyMC)
median expected limit: r < 1.98625 @ 95%CL (1 toyMC)
   68% expected band : 1.98625 < r < 1.98625
   95% expected band : 1.98625 < r < 1.98625
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1203904018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.03479 +/- 0.00508814 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.03479 @ 95%CL (1 toyMC)
median expected limit: r < 2.03479 @ 95%CL (1 toyMC)
   68% expected band : 2.03479 < r < 2.03479
   95% expected band : 2.03479 < r < 2.03479
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 913140385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90663 +/- 0.00625382 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.90663 @ 95%CL (1 toyMC)
median expected limit: r < 3.90663 @ 95%CL (1 toyMC)
   68% expected band : 3.90663 < r < 3.90663
   95% expected band : 3.90663 < r < 3.90663
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1099818559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.81796 +/- 0.00605076 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.81796 @ 95%CL (1 toyMC)
median expected limit: r < 2.81796 @ 95%CL (1 toyMC)
   68% expected band : 2.81796 < r < 2.81796
   95% expected band : 2.81796 < r < 2.81796
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1031285060.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1039386242.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1099818559.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-111952214.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1193666142.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1203904018.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1227384419.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1316498427.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1402965768.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1418664081.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1490864484.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1536039391.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-154857718.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1553138874.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1588095406.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1594726707.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1605864787.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1614170935.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1741625379.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1788645425.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1874019570.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-202248402.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-2022833525.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-203680662.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-2093578643.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-2135457808.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-224032971.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-287809452.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-334550347.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-382936381.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-427237189.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-466927518.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-508123207.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-508307666.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-514556073.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-556659907.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-570971875.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-584377804.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-603582422.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-626805504.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-809971126.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-824029759.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-862611514.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-927796830.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-955809939.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-994739107.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.1081927826.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.1206082255.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.1260719756.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.1279968695.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.1290139908.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1324867495.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1325755880.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1328398549.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1349487876.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1424236900.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1555940771.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1572947722.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1586626773.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1642310709.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1643481132.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1675411256.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1676245889.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1695841561.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1742846674.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.18041096.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1861984695.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1869704235.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.2000064370.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.2029387642.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.2108909698.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.212706704.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.219636434.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.241890240.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.254270783.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.262848142.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.26583868.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.26713303.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.311046641.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.365038644.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.374563325.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.411136005.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.411622695.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.453825491.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.512950337.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.585216425.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.604539281.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.648247980.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.675342831.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.687559660.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.689074520.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.843958061.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.861201405.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.864621746.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.875046622.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.913140385.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.916231419.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.939681954.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.953095602.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.986736936.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1127839089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29129 +/- 0.00500272 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.29129 @ 95%CL (1 toyMC)
median expected limit: r < 2.29129 @ 95%CL (1 toyMC)
   68% expected band : 2.29129 < r < 2.29129
   95% expected band : 2.29129 < r < 2.29129
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -568461380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.03059 +/- 0.00614635 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.03059 @ 95%CL (1 toyMC)
median expected limit: r < 3.03059 @ 95%CL (1 toyMC)
   68% expected band : 3.03059 < r < 3.03059
   95% expected band : 3.03059 < r < 3.03059
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -991041813
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92115 +/- 0.0050372 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.92115 @ 95%CL (1 toyMC)
median expected limit: r < 1.92115 @ 95%CL (1 toyMC)
   68% expected band : 1.92115 < r < 1.92115
   95% expected band : 1.92115 < r < 1.92115
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -218003261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.12272 +/- 0.00683459 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.12272 @ 95%CL (1 toyMC)
median expected limit: r < 4.12272 @ 95%CL (1 toyMC)
   68% expected band : 4.12272 < r < 4.12272
   95% expected band : 4.12272 < r < 4.12272
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -965219541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.55674 +/- 0.0062692 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.55674 @ 95%CL (1 toyMC)
median expected limit: r < 3.55674 @ 95%CL (1 toyMC)
   68% expected band : 3.55674 < r < 3.55674
   95% expected band : 3.55674 < r < 3.55674
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -339709338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.26609 +/- 0.00486867 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.26609 @ 95%CL (1 toyMC)
median expected limit: r < 2.26609 @ 95%CL (1 toyMC)
   68% expected band : 2.26609 < r < 2.26609
   95% expected band : 2.26609 < r < 2.26609
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 644417760
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.20957 +/- 0.00738285 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.20957 @ 95%CL (1 toyMC)
median expected limit: r < 3.20957 @ 95%CL (1 toyMC)
   68% expected band : 3.20957 < r < 3.20957
   95% expected band : 3.20957 < r < 3.20957
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1782531976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10296 +/- 0.00523129 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.10296 @ 95%CL (1 toyMC)
median expected limit: r < 2.10296 @ 95%CL (1 toyMC)
   68% expected band : 2.10296 < r < 2.10296
   95% expected band : 2.10296 < r < 2.10296
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1458794191
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87187 +/- 0.00692914 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.87187 @ 95%CL (1 toyMC)
median expected limit: r < 2.87187 @ 95%CL (1 toyMC)
   68% expected band : 2.87187 < r < 2.87187
   95% expected band : 2.87187 < r < 2.87187
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2107074013
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27499 +/- 0.00554545 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.27499 @ 95%CL (1 toyMC)
median expected limit: r < 3.27499 @ 95%CL (1 toyMC)
   68% expected band : 3.27499 < r < 3.27499
   95% expected band : 3.27499 < r < 3.27499
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1687359111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14259 +/- 0.00482403 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.14259 @ 95%CL (1 toyMC)
median expected limit: r < 2.14259 @ 95%CL (1 toyMC)
   68% expected band : 2.14259 < r < 2.14259
   95% expected band : 2.14259 < r < 2.14259
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 651174847
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.69722 +/- 0.00665636 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.69722 @ 95%CL (1 toyMC)
median expected limit: r < 2.69722 @ 95%CL (1 toyMC)
   68% expected band : 2.69722 < r < 2.69722
   95% expected band : 2.69722 < r < 2.69722
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1126104336
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.75224 +/- 0.00766915 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.75224 @ 95%CL (1 toyMC)
median expected limit: r < 2.75224 @ 95%CL (1 toyMC)
   68% expected band : 2.75224 < r < 2.75224
   95% expected band : 2.75224 < r < 2.75224
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 951792439
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.89525 +/- 0.00688453 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.89525 @ 95%CL (1 toyMC)
median expected limit: r < 2.89525 @ 95%CL (1 toyMC)
   68% expected band : 2.89525 < r < 2.89525
   95% expected band : 2.89525 < r < 2.89525
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1702652635
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66998 +/- 0.00417561 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.66998 @ 95%CL (1 toyMC)
median expected limit: r < 2.66998 @ 95%CL (1 toyMC)
   68% expected band : 2.66998 < r < 2.66998
   95% expected band : 2.66998 < r < 2.66998
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1583483449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81302 +/- 0.00472434 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.81302 @ 95%CL (1 toyMC)
median expected limit: r < 1.81302 @ 95%CL (1 toyMC)
   68% expected band : 1.81302 < r < 1.81302
   95% expected band : 1.81302 < r < 1.81302
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1672918200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.294 +/- 0.00535221 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.294 @ 95%CL (1 toyMC)
median expected limit: r < 2.294 @ 95%CL (1 toyMC)
   68% expected band : 2.294 < r < 2.294
   95% expected band : 2.294 < r < 2.294
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1826529318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25209 +/- 0.00677157 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.25209 @ 95%CL (1 toyMC)
median expected limit: r < 3.25209 @ 95%CL (1 toyMC)
   68% expected band : 3.25209 < r < 3.25209
   95% expected band : 3.25209 < r < 3.25209
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1125870621
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.87172 +/- 0.00514437 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.87172 @ 95%CL (1 toyMC)
median expected limit: r < 1.87172 @ 95%CL (1 toyMC)
   68% expected band : 1.87172 < r < 1.87172
   95% expected band : 1.87172 < r < 1.87172
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1386828690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50952 +/- 0.00628024 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.50952 @ 95%CL (1 toyMC)
median expected limit: r < 2.50952 @ 95%CL (1 toyMC)
   68% expected band : 2.50952 < r < 2.50952
   95% expected band : 2.50952 < r < 2.50952
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -46797629
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59183 +/- 0.00603714 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.59183 @ 95%CL (1 toyMC)
median expected limit: r < 2.59183 @ 95%CL (1 toyMC)
   68% expected band : 2.59183 < r < 2.59183
   95% expected band : 2.59183 < r < 2.59183
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -730879023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69979 +/- 0.0051713 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.69979 @ 95%CL (1 toyMC)
median expected limit: r < 1.69979 @ 95%CL (1 toyMC)
   68% expected band : 1.69979 < r < 1.69979
   95% expected band : 1.69979 < r < 1.69979
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1825647943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22039 +/- 0.00607649 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.22039 @ 95%CL (1 toyMC)
median expected limit: r < 3.22039 @ 95%CL (1 toyMC)
   68% expected band : 3.22039 < r < 3.22039
   95% expected band : 3.22039 < r < 3.22039
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1795489166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07386 +/- 0.00594269 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.07386 @ 95%CL (1 toyMC)
median expected limit: r < 3.07386 @ 95%CL (1 toyMC)
   68% expected band : 3.07386 < r < 3.07386
   95% expected band : 3.07386 < r < 3.07386
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1960435609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.03109 +/- 0.00570026 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.03109 @ 95%CL (1 toyMC)
median expected limit: r < 2.03109 @ 95%CL (1 toyMC)
   68% expected band : 2.03109 < r < 2.03109
   95% expected band : 2.03109 < r < 2.03109
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1460721221
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46593 +/- 0.00597042 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.46593 @ 95%CL (1 toyMC)
median expected limit: r < 2.46593 @ 95%CL (1 toyMC)
   68% expected band : 2.46593 < r < 2.46593
   95% expected band : 2.46593 < r < 2.46593
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1545574766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.73582 +/- 0.00580507 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.73582 @ 95%CL (1 toyMC)
median expected limit: r < 2.73582 @ 95%CL (1 toyMC)
   68% expected band : 2.73582 < r < 2.73582
   95% expected band : 2.73582 < r < 2.73582
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -934832500
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6024 +/- 0.00564125 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.6024 @ 95%CL (1 toyMC)
median expected limit: r < 2.6024 @ 95%CL (1 toyMC)
   68% expected band : 2.6024 < r < 2.6024
   95% expected band : 2.6024 < r < 2.6024
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1159524502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.61926 +/- 0.00782115 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.61926 @ 95%CL (1 toyMC)
median expected limit: r < 4.61926 @ 95%CL (1 toyMC)
   68% expected band : 4.61926 < r < 4.61926
   95% expected band : 4.61926 < r < 4.61926
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1877908218
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07928 +/- 0.00399224 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.07928 @ 95%CL (1 toyMC)
median expected limit: r < 2.07928 @ 95%CL (1 toyMC)
   68% expected band : 2.07928 < r < 2.07928
   95% expected band : 2.07928 < r < 2.07928
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 367335606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08193 +/- 0.00493146 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.08193 @ 95%CL (1 toyMC)
median expected limit: r < 3.08193 @ 95%CL (1 toyMC)
   68% expected band : 3.08193 < r < 3.08193
   95% expected band : 3.08193 < r < 3.08193
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2110559942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64086 +/- 0.00660745 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.64086 @ 95%CL (1 toyMC)
median expected limit: r < 2.64086 @ 95%CL (1 toyMC)
   68% expected band : 2.64086 < r < 2.64086
   95% expected band : 2.64086 < r < 2.64086
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -155555326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.38837 +/- 0.00631992 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.38837 @ 95%CL (1 toyMC)
median expected limit: r < 2.38837 @ 95%CL (1 toyMC)
   68% expected band : 2.38837 < r < 2.38837
   95% expected band : 2.38837 < r < 2.38837
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -529256285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85366 +/- 0.00499128 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.85366 @ 95%CL (1 toyMC)
median expected limit: r < 1.85366 @ 95%CL (1 toyMC)
   68% expected band : 1.85366 < r < 1.85366
   95% expected band : 1.85366 < r < 1.85366
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -944388133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78976 +/- 0.00430931 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.78976 @ 95%CL (1 toyMC)
median expected limit: r < 1.78976 @ 95%CL (1 toyMC)
   68% expected band : 1.78976 < r < 1.78976
   95% expected band : 1.78976 < r < 1.78976
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 430988408
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.41147 +/- 0.00583671 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.41147 @ 95%CL (1 toyMC)
median expected limit: r < 2.41147 @ 95%CL (1 toyMC)
   68% expected band : 2.41147 < r < 2.41147
   95% expected band : 2.41147 < r < 2.41147
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 990142734
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85049 +/- 0.00574702 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.85049 @ 95%CL (1 toyMC)
median expected limit: r < 1.85049 @ 95%CL (1 toyMC)
   68% expected band : 1.85049 < r < 1.85049
   95% expected band : 1.85049 < r < 1.85049
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -748283010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2065 +/- 0.00686259 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.2065 @ 95%CL (1 toyMC)
median expected limit: r < 2.2065 @ 95%CL (1 toyMC)
   68% expected band : 2.2065 < r < 2.2065
   95% expected band : 2.2065 < r < 2.2065
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 139394059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42067 +/- 0.00492972 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.42067 @ 95%CL (1 toyMC)
median expected limit: r < 2.42067 @ 95%CL (1 toyMC)
   68% expected band : 2.42067 < r < 2.42067
   95% expected band : 2.42067 < r < 2.42067
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1211389713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29663 +/- 0.00605958 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.29663 @ 95%CL (1 toyMC)
median expected limit: r < 2.29663 @ 95%CL (1 toyMC)
   68% expected band : 2.29663 < r < 2.29663
   95% expected band : 2.29663 < r < 2.29663
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1096929612
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.84647 +/- 0.0063208 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.84647 @ 95%CL (1 toyMC)
median expected limit: r < 4.84647 @ 95%CL (1 toyMC)
   68% expected band : 4.84647 < r < 4.84647
   95% expected band : 4.84647 < r < 4.84647
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1337297336
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.20926 +/- 0.006833 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.20926 @ 95%CL (1 toyMC)
median expected limit: r < 2.20926 @ 95%CL (1 toyMC)
   68% expected band : 2.20926 < r < 2.20926
   95% expected band : 2.20926 < r < 2.20926
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1742549082
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78025 +/- 0.00503198 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.78025 @ 95%CL (1 toyMC)
median expected limit: r < 1.78025 @ 95%CL (1 toyMC)
   68% expected band : 1.78025 < r < 1.78025
   95% expected band : 1.78025 < r < 1.78025
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1299660717
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04961 +/- 0.00490871 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.04961 @ 95%CL (1 toyMC)
median expected limit: r < 3.04961 @ 95%CL (1 toyMC)
   68% expected band : 3.04961 < r < 3.04961
   95% expected band : 3.04961 < r < 3.04961
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1522669555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.01798 +/- 0.00498518 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.01798 @ 95%CL (1 toyMC)
median expected limit: r < 2.01798 @ 95%CL (1 toyMC)
   68% expected band : 2.01798 < r < 2.01798
   95% expected band : 2.01798 < r < 2.01798
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1556352531
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8759 +/- 0.0065753 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.8759 @ 95%CL (1 toyMC)
median expected limit: r < 1.8759 @ 95%CL (1 toyMC)
   68% expected band : 1.8759 < r < 1.8759
   95% expected band : 1.8759 < r < 1.8759
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1060895306
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.87057 +/- 0.00597067 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.87057 @ 95%CL (1 toyMC)
median expected limit: r < 1.87057 @ 95%CL (1 toyMC)
   68% expected band : 1.87057 < r < 1.87057
   95% expected band : 1.87057 < r < 1.87057
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1635788446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.19469 +/- 0.00532271 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.19469 @ 95%CL (1 toyMC)
median expected limit: r < 2.19469 @ 95%CL (1 toyMC)
   68% expected band : 2.19469 < r < 2.19469
   95% expected band : 2.19469 < r < 2.19469
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 928832582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62398 +/- 0.0065393 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.62398 @ 95%CL (1 toyMC)
median expected limit: r < 2.62398 @ 95%CL (1 toyMC)
   68% expected band : 2.62398 < r < 2.62398
   95% expected band : 2.62398 < r < 2.62398
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1902417444
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.94338 +/- 0.00553859 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.94338 @ 95%CL (1 toyMC)
median expected limit: r < 1.94338 @ 95%CL (1 toyMC)
   68% expected band : 1.94338 < r < 1.94338
   95% expected band : 1.94338 < r < 1.94338
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1818017611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.81771 +/- 0.00581351 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.81771 @ 95%CL (1 toyMC)
median expected limit: r < 2.81771 @ 95%CL (1 toyMC)
   68% expected band : 2.81771 < r < 2.81771
   95% expected band : 2.81771 < r < 2.81771
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 92845934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.21736 +/- 0.00748609 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.21736 @ 95%CL (1 toyMC)
median expected limit: r < 5.21736 @ 95%CL (1 toyMC)
   68% expected band : 5.21736 < r < 5.21736
   95% expected band : 5.21736 < r < 5.21736
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1475632200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2013 +/- 0.00470011 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.2013 @ 95%CL (1 toyMC)
median expected limit: r < 3.2013 @ 95%CL (1 toyMC)
   68% expected band : 3.2013 < r < 3.2013
   95% expected band : 3.2013 < r < 3.2013
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1942800054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.31037 +/- 0.0052578 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.31037 @ 95%CL (1 toyMC)
median expected limit: r < 3.31037 @ 95%CL (1 toyMC)
   68% expected band : 3.31037 < r < 3.31037
   95% expected band : 3.31037 < r < 3.31037
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2062576259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.08226 +/- 0.00559901 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.08226 @ 95%CL (1 toyMC)
median expected limit: r < 2.08226 @ 95%CL (1 toyMC)
   68% expected band : 2.08226 < r < 2.08226
   95% expected band : 2.08226 < r < 2.08226
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1759266069
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.83213 +/- 0.00568832 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.83213 @ 95%CL (1 toyMC)
median expected limit: r < 2.83213 @ 95%CL (1 toyMC)
   68% expected band : 2.83213 < r < 2.83213
   95% expected band : 2.83213 < r < 2.83213
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1617499328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47015 +/- 0.00437 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.47015 @ 95%CL (1 toyMC)
median expected limit: r < 2.47015 @ 95%CL (1 toyMC)
   68% expected band : 2.47015 < r < 2.47015
   95% expected band : 2.47015 < r < 2.47015
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1287484247
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.05128 +/- 0.00590643 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.05128 @ 95%CL (1 toyMC)
median expected limit: r < 2.05128 @ 95%CL (1 toyMC)
   68% expected band : 2.05128 < r < 2.05128
   95% expected band : 2.05128 < r < 2.05128
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1662751350
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.39017 +/- 0.00545746 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.39017 @ 95%CL (1 toyMC)
median expected limit: r < 4.39017 @ 95%CL (1 toyMC)
   68% expected band : 4.39017 < r < 4.39017
   95% expected band : 4.39017 < r < 4.39017
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 136030391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.97309 +/- 0.0049823 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.97309 @ 95%CL (1 toyMC)
median expected limit: r < 1.97309 @ 95%CL (1 toyMC)
   68% expected band : 1.97309 < r < 1.97309
   95% expected band : 1.97309 < r < 1.97309
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1661744216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44921 +/- 0.00601676 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.44921 @ 95%CL (1 toyMC)
median expected limit: r < 3.44921 @ 95%CL (1 toyMC)
   68% expected band : 3.44921 < r < 3.44921
   95% expected band : 3.44921 < r < 3.44921
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -458802870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.68373 +/- 0.00565266 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.68373 @ 95%CL (1 toyMC)
median expected limit: r < 2.68373 @ 95%CL (1 toyMC)
   68% expected band : 2.68373 < r < 2.68373
   95% expected band : 2.68373 < r < 2.68373
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -634749465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.03852 +/- 0.0044384 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.03852 @ 95%CL (1 toyMC)
median expected limit: r < 2.03852 @ 95%CL (1 toyMC)
   68% expected band : 2.03852 < r < 2.03852
   95% expected band : 2.03852 < r < 2.03852
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -208926899
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.90121 +/- 0.00543951 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.90121 @ 95%CL (1 toyMC)
median expected limit: r < 1.90121 @ 95%CL (1 toyMC)
   68% expected band : 1.90121 < r < 1.90121
   95% expected band : 1.90121 < r < 1.90121
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1802622571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46393 +/- 0.00490771 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.46393 @ 95%CL (1 toyMC)
median expected limit: r < 2.46393 @ 95%CL (1 toyMC)
   68% expected band : 2.46393 < r < 2.46393
   95% expected band : 2.46393 < r < 2.46393
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -926432572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.62081 +/- 0.0059282 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.62081 @ 95%CL (1 toyMC)
median expected limit: r < 3.62081 @ 95%CL (1 toyMC)
   68% expected band : 3.62081 < r < 3.62081
   95% expected band : 3.62081 < r < 3.62081
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 695312732
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65156 +/- 0.00579733 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.65156 @ 95%CL (1 toyMC)
median expected limit: r < 2.65156 @ 95%CL (1 toyMC)
   68% expected band : 2.65156 < r < 2.65156
   95% expected band : 2.65156 < r < 2.65156
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1964577600
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.87983 +/- 0.00528449 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.87983 @ 95%CL (1 toyMC)
median expected limit: r < 1.87983 @ 95%CL (1 toyMC)
   68% expected band : 1.87983 < r < 1.87983
   95% expected band : 1.87983 < r < 1.87983
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2044763681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.79245 +/- 0.00650099 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.79245 @ 95%CL (1 toyMC)
median expected limit: r < 3.79245 @ 95%CL (1 toyMC)
   68% expected band : 3.79245 < r < 3.79245
   95% expected band : 3.79245 < r < 3.79245
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 990752089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59521 +/- 0.00552314 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.59521 @ 95%CL (1 toyMC)
median expected limit: r < 2.59521 @ 95%CL (1 toyMC)
   68% expected band : 2.59521 < r < 2.59521
   95% expected band : 2.59521 < r < 2.59521
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 149152468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.72503 +/- 0.00571243 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.72503 @ 95%CL (1 toyMC)
median expected limit: r < 3.72503 @ 95%CL (1 toyMC)
   68% expected band : 3.72503 < r < 3.72503
   95% expected band : 3.72503 < r < 3.72503
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1748164721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13789 +/- 0.00545682 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.13789 @ 95%CL (1 toyMC)
median expected limit: r < 2.13789 @ 95%CL (1 toyMC)
   68% expected band : 2.13789 < r < 2.13789
   95% expected band : 2.13789 < r < 2.13789
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2106228352
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0868 +/- 0.00660619 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.0868 @ 95%CL (1 toyMC)
median expected limit: r < 3.0868 @ 95%CL (1 toyMC)
   68% expected band : 3.0868 < r < 3.0868
   95% expected band : 3.0868 < r < 3.0868
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1472966929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49033 +/- 0.00659984 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.49033 @ 95%CL (1 toyMC)
median expected limit: r < 2.49033 @ 95%CL (1 toyMC)
   68% expected band : 2.49033 < r < 2.49033
   95% expected band : 2.49033 < r < 2.49033
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -652608313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12297 +/- 0.00537854 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.12297 @ 95%CL (1 toyMC)
median expected limit: r < 2.12297 @ 95%CL (1 toyMC)
   68% expected band : 2.12297 < r < 2.12297
   95% expected band : 2.12297 < r < 2.12297
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1119853637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.34852 +/- 0.00640438 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.34852 @ 95%CL (1 toyMC)
median expected limit: r < 4.34852 @ 95%CL (1 toyMC)
   68% expected band : 4.34852 < r < 4.34852
   95% expected band : 4.34852 < r < 4.34852
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 129183280
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.25072 +/- 0.00478731 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.25072 @ 95%CL (1 toyMC)
median expected limit: r < 2.25072 @ 95%CL (1 toyMC)
   68% expected band : 2.25072 < r < 2.25072
   95% expected band : 2.25072 < r < 2.25072
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -974059851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.26035 +/- 0.00720871 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.26035 @ 95%CL (1 toyMC)
median expected limit: r < 3.26035 @ 95%CL (1 toyMC)
   68% expected band : 3.26035 < r < 3.26035
   95% expected band : 3.26035 < r < 3.26035
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -126828019
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99619 +/- 0.0075897 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.99619 @ 95%CL (1 toyMC)
median expected limit: r < 2.99619 @ 95%CL (1 toyMC)
   68% expected band : 2.99619 < r < 2.99619
   95% expected band : 2.99619 < r < 2.99619
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1439199591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8541 +/- 0.00495063 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.8541 @ 95%CL (1 toyMC)
median expected limit: r < 2.8541 @ 95%CL (1 toyMC)
   68% expected band : 2.8541 < r < 2.8541
   95% expected band : 2.8541 < r < 2.8541
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1243182841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32795 +/- 0.00405597 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.32795 @ 95%CL (1 toyMC)
median expected limit: r < 2.32795 @ 95%CL (1 toyMC)
   68% expected band : 2.32795 < r < 2.32795
   95% expected band : 2.32795 < r < 2.32795
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2142890188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05151 +/- 0.00562335 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.05151 @ 95%CL (1 toyMC)
median expected limit: r < 3.05151 @ 95%CL (1 toyMC)
   68% expected band : 3.05151 < r < 3.05151
   95% expected band : 3.05151 < r < 3.05151
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 440670362
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.01868 +/- 0.00519256 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.01868 @ 95%CL (1 toyMC)
median expected limit: r < 2.01868 @ 95%CL (1 toyMC)
   68% expected band : 2.01868 < r < 2.01868
   95% expected band : 2.01868 < r < 2.01868
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -600203380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.84011 +/- 0.00630398 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.84011 @ 95%CL (1 toyMC)
median expected limit: r < 3.84011 @ 95%CL (1 toyMC)
   68% expected band : 3.84011 < r < 3.84011
   95% expected band : 3.84011 < r < 3.84011
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1545908840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.06118 +/- 0.0048901 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.06118 @ 95%CL (1 toyMC)
median expected limit: r < 2.06118 @ 95%CL (1 toyMC)
   68% expected band : 2.06118 < r < 2.06118
   95% expected band : 2.06118 < r < 2.06118
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -442049656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.34985 +/- 0.00485935 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.34985 @ 95%CL (1 toyMC)
median expected limit: r < 3.34985 @ 95%CL (1 toyMC)
   68% expected band : 3.34985 < r < 3.34985
   95% expected band : 3.34985 < r < 3.34985
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2065224824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.96299 +/- 0.00537109 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.96299 @ 95%CL (1 toyMC)
median expected limit: r < 2.96299 @ 95%CL (1 toyMC)
   68% expected band : 2.96299 < r < 2.96299
   95% expected band : 2.96299 < r < 2.96299
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1550854179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99128 +/- 0.00591772 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.99128 @ 95%CL (1 toyMC)
median expected limit: r < 1.99128 @ 95%CL (1 toyMC)
   68% expected band : 1.99128 < r < 1.99128
   95% expected band : 1.99128 < r < 1.99128
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 965976066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04343 +/- 0.00554389 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.04343 @ 95%CL (1 toyMC)
median expected limit: r < 2.04343 @ 95%CL (1 toyMC)
   68% expected band : 2.04343 < r < 2.04343
   95% expected band : 2.04343 < r < 2.04343
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1969817527
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.22051 +/- 0.00482513 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.22051 @ 95%CL (1 toyMC)
median expected limit: r < 2.22051 @ 95%CL (1 toyMC)
   68% expected band : 2.22051 < r < 2.22051
   95% expected band : 2.22051 < r < 2.22051
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 916459076
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.71584 +/- 0.00542618 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.71584 @ 95%CL (1 toyMC)
median expected limit: r < 2.71584 @ 95%CL (1 toyMC)
   68% expected band : 2.71584 < r < 2.71584
   95% expected band : 2.71584 < r < 2.71584
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 135992705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98498 +/- 0.00677686 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.98498 @ 95%CL (1 toyMC)
median expected limit: r < 2.98498 @ 95%CL (1 toyMC)
   68% expected band : 2.98498 < r < 2.98498
   95% expected band : 2.98498 < r < 2.98498
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1853203494
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12392 +/- 0.00696933 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.12392 @ 95%CL (1 toyMC)
median expected limit: r < 3.12392 @ 95%CL (1 toyMC)
   68% expected band : 3.12392 < r < 3.12392
   95% expected band : 3.12392 < r < 3.12392
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 506870384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.24451 +/- 0.0056006 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.24451 @ 95%CL (1 toyMC)
median expected limit: r < 2.24451 @ 95%CL (1 toyMC)
   68% expected band : 2.24451 < r < 2.24451
   95% expected band : 2.24451 < r < 2.24451
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2034685982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.48484 +/- 0.0078149 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.48484 @ 95%CL (1 toyMC)
median expected limit: r < 3.48484 @ 95%CL (1 toyMC)
   68% expected band : 3.48484 < r < 3.48484
   95% expected band : 3.48484 < r < 3.48484
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -596820013
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.14613 +/- 0.0064209 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.14613 @ 95%CL (1 toyMC)
median expected limit: r < 4.14613 @ 95%CL (1 toyMC)
   68% expected band : 4.14613 < r < 4.14613
   95% expected band : 4.14613 < r < 4.14613
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1636459821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4327 +/- 0.00515151 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.4327 @ 95%CL (1 toyMC)
median expected limit: r < 2.4327 @ 95%CL (1 toyMC)
   68% expected band : 2.4327 < r < 2.4327
   95% expected band : 2.4327 < r < 2.4327
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1442204288
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04376 +/- 0.00603667 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.04376 @ 95%CL (1 toyMC)
median expected limit: r < 2.04376 @ 95%CL (1 toyMC)
   68% expected band : 2.04376 < r < 2.04376
   95% expected band : 2.04376 < r < 2.04376
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 91356289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.31053 +/- 0.00655282 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.31053 @ 95%CL (1 toyMC)
median expected limit: r < 4.31053 @ 95%CL (1 toyMC)
   68% expected band : 4.31053 < r < 4.31053
   95% expected band : 4.31053 < r < 4.31053
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -128941774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7642 +/- 0.00477076 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.7642 @ 95%CL (1 toyMC)
median expected limit: r < 2.7642 @ 95%CL (1 toyMC)
   68% expected band : 2.7642 < r < 2.7642
   95% expected band : 2.7642 < r < 2.7642
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1060895306.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1096929612.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1125870621.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1127839089.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-126828019.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-128941774.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1337297336.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1386828690.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1439199591.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1442204288.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1475632200.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1545574766.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1545908840.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-155555326.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1583483449.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1635788446.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1636459821.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1661744216.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1702652635.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1759266069.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1782531976.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1818017611.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1825647943.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1877908218.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1902417444.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1964577600.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-2034685982.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-2065224824.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-208926899.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-2106228352.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-2107074013.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-2142890188.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-218003261.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-339709338.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-442049656.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-458802870.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-46797629.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-529256285.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-568461380.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-596820013.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-600203380.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-634749465.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-652608313.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-730879023.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-748283010.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-926432572.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-934832500.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-944388133.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-965219541.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-974059851.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.-991041813.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1119853637.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1126104336.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1159524502.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1211389713.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1243182841.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1287484247.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.129183280.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1299660717.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.135992705.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.136030391.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.139394059.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1458794191.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1460721221.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1472966929.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.149152468.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1522669555.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1550854179.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1556352531.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1617499328.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1662751350.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1672918200.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1687359111.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1742549082.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.1748164721.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.1795489166.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.1802622571.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.1826529318.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.1853203494.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.1942800054.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.1960435609.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.1969817527.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.2044763681.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.2062576259.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.2110559942.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.367335606.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.430988408.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.440670362.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.506870384.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.644417760.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.651174847.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.695312732.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.91356289.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.916459076.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.92845934.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.928832582.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.951792439.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.965976066.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.990142734.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.990752089.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -872351934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.72572 +/- 0.00663223 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.72572 @ 95%CL (1 toyMC)
median expected limit: r < 3.72572 @ 95%CL (1 toyMC)
   68% expected band : 3.72572 < r < 3.72572
   95% expected band : 3.72572 < r < 3.72572
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 398432414
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.48419 +/- 0.006096 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.48419 @ 95%CL (1 toyMC)
median expected limit: r < 2.48419 @ 95%CL (1 toyMC)
   68% expected band : 2.48419 < r < 2.48419
   95% expected band : 2.48419 < r < 2.48419
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 291800819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.26646 +/- 0.00467161 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.26646 @ 95%CL (1 toyMC)
median expected limit: r < 3.26646 @ 95%CL (1 toyMC)
   68% expected band : 3.26646 < r < 3.26646
   95% expected band : 3.26646 < r < 3.26646
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2053186312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.91665 +/- 0.00498495 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.91665 @ 95%CL (1 toyMC)
median expected limit: r < 4.91665 @ 95%CL (1 toyMC)
   68% expected band : 4.91665 < r < 4.91665
   95% expected band : 4.91665 < r < 4.91665
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1473830905
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6715 +/- 0.0068832 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.6715 @ 95%CL (1 toyMC)
median expected limit: r < 3.6715 @ 95%CL (1 toyMC)
   68% expected band : 3.6715 < r < 3.6715
   95% expected band : 3.6715 < r < 3.6715
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1501026832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.80825 +/- 0.00509903 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.80825 @ 95%CL (1 toyMC)
median expected limit: r < 3.80825 @ 95%CL (1 toyMC)
   68% expected band : 3.80825 < r < 3.80825
   95% expected band : 3.80825 < r < 3.80825
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1269726277
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04346 +/- 0.00623904 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.04346 @ 95%CL (1 toyMC)
median expected limit: r < 2.04346 @ 95%CL (1 toyMC)
   68% expected band : 2.04346 < r < 2.04346
   95% expected band : 2.04346 < r < 2.04346
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1085170293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4648 +/- 0.0069304 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.4648 @ 95%CL (1 toyMC)
median expected limit: r < 3.4648 @ 95%CL (1 toyMC)
   68% expected band : 3.4648 < r < 3.4648
   95% expected band : 3.4648 < r < 3.4648
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -103193374
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63136 +/- 0.00730921 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.63136 @ 95%CL (1 toyMC)
median expected limit: r < 2.63136 @ 95%CL (1 toyMC)
   68% expected band : 2.63136 < r < 2.63136
   95% expected band : 2.63136 < r < 2.63136
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1373303673
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.30626 +/- 0.00520641 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.30626 @ 95%CL (1 toyMC)
median expected limit: r < 2.30626 @ 95%CL (1 toyMC)
   68% expected band : 2.30626 < r < 2.30626
   95% expected band : 2.30626 < r < 2.30626
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -378713351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65534 +/- 0.00498289 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.65534 @ 95%CL (1 toyMC)
median expected limit: r < 2.65534 @ 95%CL (1 toyMC)
   68% expected band : 2.65534 < r < 2.65534
   95% expected band : 2.65534 < r < 2.65534
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 67811268
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.31194 +/- 0.00686778 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.31194 @ 95%CL (1 toyMC)
median expected limit: r < 4.31194 @ 95%CL (1 toyMC)
   68% expected band : 4.31194 < r < 4.31194
   95% expected band : 4.31194 < r < 4.31194
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1548806254
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.51478 +/- 0.0073347 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.51478 @ 95%CL (1 toyMC)
median expected limit: r < 4.51478 @ 95%CL (1 toyMC)
   68% expected band : 4.51478 < r < 4.51478
   95% expected band : 4.51478 < r < 4.51478
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -83232662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.24089 +/- 0.0065244 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.24089 @ 95%CL (1 toyMC)
median expected limit: r < 2.24089 @ 95%CL (1 toyMC)
   68% expected band : 2.24089 < r < 2.24089
   95% expected band : 2.24089 < r < 2.24089
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 340464559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40287 +/- 0.00506398 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.40287 @ 95%CL (1 toyMC)
median expected limit: r < 2.40287 @ 95%CL (1 toyMC)
   68% expected band : 2.40287 < r < 2.40287
   95% expected band : 2.40287 < r < 2.40287
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -522114430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.35026 +/- 0.0058871 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.35026 @ 95%CL (1 toyMC)
median expected limit: r < 2.35026 @ 95%CL (1 toyMC)
   68% expected band : 2.35026 < r < 2.35026
   95% expected band : 2.35026 < r < 2.35026
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1997675688
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87295 +/- 0.00690464 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.87295 @ 95%CL (1 toyMC)
median expected limit: r < 2.87295 @ 95%CL (1 toyMC)
   68% expected band : 2.87295 < r < 2.87295
   95% expected band : 2.87295 < r < 2.87295
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1350775706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.83681 +/- 0.0050269 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.83681 @ 95%CL (1 toyMC)
median expected limit: r < 1.83681 @ 95%CL (1 toyMC)
   68% expected band : 1.83681 < r < 1.83681
   95% expected band : 1.83681 < r < 1.83681
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2028512696
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.71194 +/- 0.00538412 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.71194 @ 95%CL (1 toyMC)
median expected limit: r < 3.71194 @ 95%CL (1 toyMC)
   68% expected band : 3.71194 < r < 3.71194
   95% expected band : 3.71194 < r < 3.71194
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -31826752
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.04769 +/- 0.00806132 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.04769 @ 95%CL (1 toyMC)
median expected limit: r < 4.04769 @ 95%CL (1 toyMC)
   68% expected band : 4.04769 < r < 4.04769
   95% expected band : 4.04769 < r < 4.04769
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1967353093
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8856 +/- 0.00724815 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.8856 @ 95%CL (1 toyMC)
median expected limit: r < 2.8856 @ 95%CL (1 toyMC)
   68% expected band : 2.8856 < r < 2.8856
   95% expected band : 2.8856 < r < 2.8856
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 833460257
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.60676 +/- 0.00593828 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.60676 @ 95%CL (1 toyMC)
median expected limit: r < 4.60676 @ 95%CL (1 toyMC)
   68% expected band : 4.60676 < r < 4.60676
   95% expected band : 4.60676 < r < 4.60676
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 925276520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6853 +/- 0.00575643 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.6853 @ 95%CL (1 toyMC)
median expected limit: r < 3.6853 @ 95%CL (1 toyMC)
   68% expected band : 3.6853 < r < 3.6853
   95% expected band : 3.6853 < r < 3.6853
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -753906861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.96167 +/- 0.00517643 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.96167 @ 95%CL (1 toyMC)
median expected limit: r < 1.96167 @ 95%CL (1 toyMC)
   68% expected band : 1.96167 < r < 1.96167
   95% expected band : 1.96167 < r < 1.96167
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -675430852
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.84332 +/- 0.00642235 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.84332 @ 95%CL (1 toyMC)
median expected limit: r < 2.84332 @ 95%CL (1 toyMC)
   68% expected band : 2.84332 < r < 2.84332
   95% expected band : 2.84332 < r < 2.84332
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1546311053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58406 +/- 0.00683699 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.58406 @ 95%CL (1 toyMC)
median expected limit: r < 2.58406 @ 95%CL (1 toyMC)
   68% expected band : 2.58406 < r < 2.58406
   95% expected band : 2.58406 < r < 2.58406
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -967271940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.79586 +/- 0.0079913 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 5.79586 @ 95%CL (1 toyMC)
median expected limit: r < 5.79586 @ 95%CL (1 toyMC)
   68% expected band : 5.79586 < r < 5.79586
   95% expected band : 5.79586 < r < 5.79586
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1699930979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93482 +/- 0.00586416 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.93482 @ 95%CL (1 toyMC)
median expected limit: r < 2.93482 @ 95%CL (1 toyMC)
   68% expected band : 2.93482 < r < 2.93482
   95% expected band : 2.93482 < r < 2.93482
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1084190700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.74541 +/- 0.00665389 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.74541 @ 95%CL (1 toyMC)
median expected limit: r < 3.74541 @ 95%CL (1 toyMC)
   68% expected band : 3.74541 < r < 3.74541
   95% expected band : 3.74541 < r < 3.74541
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -635480871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.44272 +/- 0.00558265 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.44272 @ 95%CL (1 toyMC)
median expected limit: r < 2.44272 @ 95%CL (1 toyMC)
   68% expected band : 2.44272 < r < 2.44272
   95% expected band : 2.44272 < r < 2.44272
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1423555009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90678 +/- 0.0047472 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.90678 @ 95%CL (1 toyMC)
median expected limit: r < 2.90678 @ 95%CL (1 toyMC)
   68% expected band : 2.90678 < r < 2.90678
   95% expected band : 2.90678 < r < 2.90678
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 834880132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8871 +/- 0.00509568 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.8871 @ 95%CL (1 toyMC)
median expected limit: r < 1.8871 @ 95%CL (1 toyMC)
   68% expected band : 1.8871 < r < 1.8871
   95% expected band : 1.8871 < r < 1.8871
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -642149111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98335 +/- 0.00598624 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.98335 @ 95%CL (1 toyMC)
median expected limit: r < 2.98335 @ 95%CL (1 toyMC)
   68% expected band : 2.98335 < r < 2.98335
   95% expected band : 2.98335 < r < 2.98335
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 182622400
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.49276 +/- 0.00678099 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.49276 @ 95%CL (1 toyMC)
median expected limit: r < 3.49276 @ 95%CL (1 toyMC)
   68% expected band : 3.49276 < r < 3.49276
   95% expected band : 3.49276 < r < 3.49276
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1360418175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42427 +/- 0.005558 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.42427 @ 95%CL (1 toyMC)
median expected limit: r < 2.42427 @ 95%CL (1 toyMC)
   68% expected band : 2.42427 < r < 2.42427
   95% expected band : 2.42427 < r < 2.42427
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1330302041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85736 +/- 0.0036446 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.85736 @ 95%CL (1 toyMC)
median expected limit: r < 1.85736 @ 95%CL (1 toyMC)
   68% expected band : 1.85736 < r < 1.85736
   95% expected band : 1.85736 < r < 1.85736
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 737335556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.00786 +/- 0.00683798 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.00786 @ 95%CL (1 toyMC)
median expected limit: r < 3.00786 @ 95%CL (1 toyMC)
   68% expected band : 3.00786 < r < 3.00786
   95% expected band : 3.00786 < r < 3.00786
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1769054727
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.51538 +/- 0.00685342 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.51538 @ 95%CL (1 toyMC)
median expected limit: r < 4.51538 @ 95%CL (1 toyMC)
   68% expected band : 4.51538 < r < 4.51538
   95% expected band : 4.51538 < r < 4.51538
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1972551700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.18044 +/- 0.00919908 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.18044 @ 95%CL (1 toyMC)
median expected limit: r < 6.18044 @ 95%CL (1 toyMC)
   68% expected band : 6.18044 < r < 6.18044
   95% expected band : 6.18044 < r < 6.18044
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -291608002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42811 +/- 0.00509582 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.42811 @ 95%CL (1 toyMC)
median expected limit: r < 2.42811 @ 95%CL (1 toyMC)
   68% expected band : 2.42811 < r < 2.42811
   95% expected band : 2.42811 < r < 2.42811
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 977886796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.34192 +/- 0.00684964 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.34192 @ 95%CL (1 toyMC)
median expected limit: r < 4.34192 @ 95%CL (1 toyMC)
   68% expected band : 4.34192 < r < 4.34192
   95% expected band : 4.34192 < r < 4.34192
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1727040130
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5056 +/- 0.0056453 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.5056 @ 95%CL (1 toyMC)
median expected limit: r < 2.5056 @ 95%CL (1 toyMC)
   68% expected band : 2.5056 < r < 2.5056
   95% expected band : 2.5056 < r < 2.5056
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1309498567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.18527 +/- 0.0059805 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.18527 @ 95%CL (1 toyMC)
median expected limit: r < 3.18527 @ 95%CL (1 toyMC)
   68% expected band : 3.18527 < r < 3.18527
   95% expected band : 3.18527 < r < 3.18527
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -109919896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1845 +/- 0.00683277 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.1845 @ 95%CL (1 toyMC)
median expected limit: r < 3.1845 @ 95%CL (1 toyMC)
   68% expected band : 3.1845 < r < 3.1845
   95% expected band : 3.1845 < r < 3.1845
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 357349189
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10073 +/- 0.00458563 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.10073 @ 95%CL (1 toyMC)
median expected limit: r < 2.10073 @ 95%CL (1 toyMC)
   68% expected band : 2.10073 < r < 2.10073
   95% expected band : 2.10073 < r < 2.10073
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2112438866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77385 +/- 0.00676263 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.77385 @ 95%CL (1 toyMC)
median expected limit: r < 2.77385 @ 95%CL (1 toyMC)
   68% expected band : 2.77385 < r < 2.77385
   95% expected band : 2.77385 < r < 2.77385
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 852846972
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.79305 +/- 0.00595535 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.79305 @ 95%CL (1 toyMC)
median expected limit: r < 3.79305 @ 95%CL (1 toyMC)
   68% expected band : 3.79305 < r < 3.79305
   95% expected band : 3.79305 < r < 3.79305
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1514628217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.7075 +/- 0.00571796 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.7075 @ 95%CL (1 toyMC)
median expected limit: r < 3.7075 @ 95%CL (1 toyMC)
   68% expected band : 3.7075 < r < 3.7075
   95% expected band : 3.7075 < r < 3.7075
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 242621216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40282 +/- 0.00571929 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.40282 @ 95%CL (1 toyMC)
median expected limit: r < 2.40282 @ 95%CL (1 toyMC)
   68% expected band : 2.40282 < r < 2.40282
   95% expected band : 2.40282 < r < 2.40282
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -900979206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.18084 +/- 0.00659192 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.18084 @ 95%CL (1 toyMC)
median expected limit: r < 2.18084 @ 95%CL (1 toyMC)
   68% expected band : 2.18084 < r < 2.18084
   95% expected band : 2.18084 < r < 2.18084
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1476355233
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.91983 +/- 0.00808966 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.91983 @ 95%CL (1 toyMC)
median expected limit: r < 5.91983 @ 95%CL (1 toyMC)
   68% expected band : 5.91983 < r < 5.91983
   95% expected band : 5.91983 < r < 5.91983
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 822569010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65942 +/- 0.00466357 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.65942 @ 95%CL (1 toyMC)
median expected limit: r < 1.65942 @ 95%CL (1 toyMC)
   68% expected band : 1.65942 < r < 1.65942
   95% expected band : 1.65942 < r < 1.65942
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -814645958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88403 +/- 0.00625282 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.88403 @ 95%CL (1 toyMC)
median expected limit: r < 2.88403 @ 95%CL (1 toyMC)
   68% expected band : 2.88403 < r < 2.88403
   95% expected band : 2.88403 < r < 2.88403
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 304227244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.05845 +/- 0.0082591 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.05845 @ 95%CL (1 toyMC)
median expected limit: r < 5.05845 @ 95%CL (1 toyMC)
   68% expected band : 5.05845 < r < 5.05845
   95% expected band : 5.05845 < r < 5.05845
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -63727164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.17211 +/- 0.00596568 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.17211 @ 95%CL (1 toyMC)
median expected limit: r < 3.17211 @ 95%CL (1 toyMC)
   68% expected band : 3.17211 < r < 3.17211
   95% expected band : 3.17211 < r < 3.17211
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1252669035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13564 +/- 0.00636698 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.13564 @ 95%CL (1 toyMC)
median expected limit: r < 3.13564 @ 95%CL (1 toyMC)
   68% expected band : 3.13564 < r < 3.13564
   95% expected band : 3.13564 < r < 3.13564
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1467081725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04359 +/- 0.00552678 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.04359 @ 95%CL (1 toyMC)
median expected limit: r < 2.04359 @ 95%CL (1 toyMC)
   68% expected band : 2.04359 < r < 2.04359
   95% expected band : 2.04359 < r < 2.04359
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1088705826
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.75358 +/- 0.00489282 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.75358 @ 95%CL (1 toyMC)
median expected limit: r < 1.75358 @ 95%CL (1 toyMC)
   68% expected band : 1.75358 < r < 1.75358
   95% expected band : 1.75358 < r < 1.75358
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 252358079
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6579 +/- 0.00448299 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.6579 @ 95%CL (1 toyMC)
median expected limit: r < 1.6579 @ 95%CL (1 toyMC)
   68% expected band : 1.6579 < r < 1.6579
   95% expected band : 1.6579 < r < 1.6579
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 399250657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17044 +/- 0.00783617 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.17044 @ 95%CL (1 toyMC)
median expected limit: r < 4.17044 @ 95%CL (1 toyMC)
   68% expected band : 4.17044 < r < 4.17044
   95% expected band : 4.17044 < r < 4.17044
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1681276128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40525 +/- 0.00665784 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.40525 @ 95%CL (1 toyMC)
median expected limit: r < 2.40525 @ 95%CL (1 toyMC)
   68% expected band : 2.40525 < r < 2.40525
   95% expected band : 2.40525 < r < 2.40525
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 659985697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.20883 +/- 0.00691506 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.20883 @ 95%CL (1 toyMC)
median expected limit: r < 3.20883 @ 95%CL (1 toyMC)
   68% expected band : 3.20883 < r < 3.20883
   95% expected band : 3.20883 < r < 3.20883
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1097078125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90636 +/- 0.00472501 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.90636 @ 95%CL (1 toyMC)
median expected limit: r < 2.90636 @ 95%CL (1 toyMC)
   68% expected band : 2.90636 < r < 2.90636
   95% expected band : 2.90636 < r < 2.90636
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2007958853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.35472 +/- 0.00514395 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.35472 @ 95%CL (1 toyMC)
median expected limit: r < 3.35472 @ 95%CL (1 toyMC)
   68% expected band : 3.35472 < r < 3.35472
   95% expected band : 3.35472 < r < 3.35472
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1232944581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09606 +/- 0.00504592 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.09606 @ 95%CL (1 toyMC)
median expected limit: r < 2.09606 @ 95%CL (1 toyMC)
   68% expected band : 2.09606 < r < 2.09606
   95% expected band : 2.09606 < r < 2.09606
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -721740599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.02917 +/- 0.00633987 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.02917 @ 95%CL (1 toyMC)
median expected limit: r < 2.02917 @ 95%CL (1 toyMC)
   68% expected band : 2.02917 < r < 2.02917
   95% expected band : 2.02917 < r < 2.02917
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1950607285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59414 +/- 0.00456289 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.59414 @ 95%CL (1 toyMC)
median expected limit: r < 2.59414 @ 95%CL (1 toyMC)
   68% expected band : 2.59414 < r < 2.59414
   95% expected band : 2.59414 < r < 2.59414
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -536512763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47928 +/- 0.0048284 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.47928 @ 95%CL (1 toyMC)
median expected limit: r < 2.47928 @ 95%CL (1 toyMC)
   68% expected band : 2.47928 < r < 2.47928
   95% expected band : 2.47928 < r < 2.47928
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2078033638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.93813 +/- 0.00419545 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.93813 @ 95%CL (1 toyMC)
median expected limit: r < 1.93813 @ 95%CL (1 toyMC)
   68% expected band : 1.93813 < r < 1.93813
   95% expected band : 1.93813 < r < 1.93813
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 967555368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46839 +/- 0.00798865 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.46839 @ 95%CL (1 toyMC)
median expected limit: r < 3.46839 @ 95%CL (1 toyMC)
   68% expected band : 3.46839 < r < 3.46839
   95% expected band : 3.46839 < r < 3.46839
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -248179005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.87727 +/- 0.00590755 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.87727 @ 95%CL (1 toyMC)
median expected limit: r < 1.87727 @ 95%CL (1 toyMC)
   68% expected band : 1.87727 < r < 1.87727
   95% expected band : 1.87727 < r < 1.87727
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1859054271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.11612 +/- 0.00553856 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.11612 @ 95%CL (1 toyMC)
median expected limit: r < 2.11612 @ 95%CL (1 toyMC)
   68% expected band : 2.11612 < r < 2.11612
   95% expected band : 2.11612 < r < 2.11612
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2094532470
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.03123 +/- 0.0059461 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.03123 @ 95%CL (1 toyMC)
median expected limit: r < 3.03123 @ 95%CL (1 toyMC)
   68% expected band : 3.03123 < r < 3.03123
   95% expected band : 3.03123 < r < 3.03123
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2146736584
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27328 +/- 0.00891481 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.27328 @ 95%CL (1 toyMC)
median expected limit: r < 3.27328 @ 95%CL (1 toyMC)
   68% expected band : 3.27328 < r < 3.27328
   95% expected band : 3.27328 < r < 3.27328
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1816196733
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.3264 +/- 0.00719318 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.3264 @ 95%CL (1 toyMC)
median expected limit: r < 2.3264 @ 95%CL (1 toyMC)
   68% expected band : 2.3264 < r < 2.3264
   95% expected band : 2.3264 < r < 2.3264
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1361453308
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0175 +/- 0.00661605 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.0175 @ 95%CL (1 toyMC)
median expected limit: r < 3.0175 @ 95%CL (1 toyMC)
   68% expected band : 3.0175 < r < 3.0175
   95% expected band : 3.0175 < r < 3.0175
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 214841827
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.56882 +/- 0.00708895 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.56882 @ 95%CL (1 toyMC)
median expected limit: r < 3.56882 @ 95%CL (1 toyMC)
   68% expected band : 3.56882 < r < 3.56882
   95% expected band : 3.56882 < r < 3.56882
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1511547711
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.55039 +/- 0.00626996 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.55039 @ 95%CL (1 toyMC)
median expected limit: r < 2.55039 @ 95%CL (1 toyMC)
   68% expected band : 2.55039 < r < 2.55039
   95% expected band : 2.55039 < r < 2.55039
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -226783301
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.1992 +/- 0.00686429 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.1992 @ 95%CL (1 toyMC)
median expected limit: r < 4.1992 @ 95%CL (1 toyMC)
   68% expected band : 4.1992 < r < 4.1992
   95% expected band : 4.1992 < r < 4.1992
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 549296598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.73647 +/- 0.00714242 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.73647 @ 95%CL (1 toyMC)
median expected limit: r < 3.73647 @ 95%CL (1 toyMC)
   68% expected band : 3.73647 < r < 3.73647
   95% expected band : 3.73647 < r < 3.73647
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1733733594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.40432 +/- 0.00543863 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.40432 @ 95%CL (1 toyMC)
median expected limit: r < 3.40432 @ 95%CL (1 toyMC)
   68% expected band : 3.40432 < r < 3.40432
   95% expected band : 3.40432 < r < 3.40432
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1127941689
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.35564 +/- 0.00779701 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.35564 @ 95%CL (1 toyMC)
median expected limit: r < 5.35564 @ 95%CL (1 toyMC)
   68% expected band : 5.35564 < r < 5.35564
   95% expected band : 5.35564 < r < 5.35564
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1948830792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.75808 +/- 0.00505292 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.75808 @ 95%CL (1 toyMC)
median expected limit: r < 1.75808 @ 95%CL (1 toyMC)
   68% expected band : 1.75808 < r < 1.75808
   95% expected band : 1.75808 < r < 1.75808
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1171753585
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.93915 +/- 0.00485213 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.93915 @ 95%CL (1 toyMC)
median expected limit: r < 1.93915 @ 95%CL (1 toyMC)
   68% expected band : 1.93915 < r < 1.93915
   95% expected band : 1.93915 < r < 1.93915
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1298935344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.48066 +/- 0.00615553 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.48066 @ 95%CL (1 toyMC)
median expected limit: r < 3.48066 @ 95%CL (1 toyMC)
   68% expected band : 3.48066 < r < 3.48066
   95% expected band : 3.48066 < r < 3.48066
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 178626441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90176 +/- 0.00580375 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.90176 @ 95%CL (1 toyMC)
median expected limit: r < 3.90176 @ 95%CL (1 toyMC)
   68% expected band : 3.90176 < r < 3.90176
   95% expected band : 3.90176 < r < 3.90176
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1201665374
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6928 +/- 0.00824682 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.6928 @ 95%CL (1 toyMC)
median expected limit: r < 3.6928 @ 95%CL (1 toyMC)
   68% expected band : 3.6928 < r < 3.6928
   95% expected band : 3.6928 < r < 3.6928
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1934765240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.38784 +/- 0.00680927 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.38784 @ 95%CL (1 toyMC)
median expected limit: r < 3.38784 @ 95%CL (1 toyMC)
   68% expected band : 3.38784 < r < 3.38784
   95% expected band : 3.38784 < r < 3.38784
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2032331768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1748 +/- 0.00684825 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.1748 @ 95%CL (1 toyMC)
median expected limit: r < 3.1748 @ 95%CL (1 toyMC)
   68% expected band : 3.1748 < r < 3.1748
   95% expected band : 3.1748 < r < 3.1748
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -552811672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56894 +/- 0.0046731 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.56894 @ 95%CL (1 toyMC)
median expected limit: r < 1.56894 @ 95%CL (1 toyMC)
   68% expected band : 1.56894 < r < 1.56894
   95% expected band : 1.56894 < r < 1.56894
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -68661627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.60375 +/- 0.00583625 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.60375 @ 95%CL (1 toyMC)
median expected limit: r < 3.60375 @ 95%CL (1 toyMC)
   68% expected band : 3.60375 < r < 3.60375
   95% expected band : 3.60375 < r < 3.60375
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -157595862
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.58365 +/- 0.00662216 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.58365 @ 95%CL (1 toyMC)
median expected limit: r < 3.58365 @ 95%CL (1 toyMC)
   68% expected band : 3.58365 < r < 3.58365
   95% expected band : 3.58365 < r < 3.58365
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -623847742
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.53654 +/- 0.00604699 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.53654 @ 95%CL (1 toyMC)
median expected limit: r < 3.53654 @ 95%CL (1 toyMC)
   68% expected band : 3.53654 < r < 3.53654
   95% expected band : 3.53654 < r < 3.53654
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 771741031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.21606 +/- 0.00533292 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.21606 @ 95%CL (1 toyMC)
median expected limit: r < 2.21606 @ 95%CL (1 toyMC)
   68% expected band : 2.21606 < r < 2.21606
   95% expected band : 2.21606 < r < 2.21606
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1385136212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42801 +/- 0.00555399 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.42801 @ 95%CL (1 toyMC)
median expected limit: r < 2.42801 @ 95%CL (1 toyMC)
   68% expected band : 2.42801 < r < 2.42801
   95% expected band : 2.42801 < r < 2.42801
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1479910027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92867 +/- 0.00679596 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.92867 @ 95%CL (1 toyMC)
median expected limit: r < 2.92867 @ 95%CL (1 toyMC)
   68% expected band : 2.92867 < r < 2.92867
   95% expected band : 2.92867 < r < 2.92867
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1322242905
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79 +/- 0.00682798 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.79 @ 95%CL (1 toyMC)
median expected limit: r < 2.79 @ 95%CL (1 toyMC)
   68% expected band : 2.79 < r < 2.79
   95% expected band : 2.79 < r < 2.79
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -941459842
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98098 +/- 0.0058122 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.98098 @ 95%CL (1 toyMC)
median expected limit: r < 2.98098 @ 95%CL (1 toyMC)
   68% expected band : 2.98098 < r < 2.98098
   95% expected band : 2.98098 < r < 2.98098
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1617611033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88863 +/- 0.00550575 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.88863 @ 95%CL (1 toyMC)
median expected limit: r < 2.88863 @ 95%CL (1 toyMC)
   68% expected band : 2.88863 < r < 2.88863
   95% expected band : 2.88863 < r < 2.88863
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1259532873
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98156 +/- 0.00597215 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.98156 @ 95%CL (1 toyMC)
median expected limit: r < 2.98156 @ 95%CL (1 toyMC)
   68% expected band : 2.98156 < r < 2.98156
   95% expected band : 2.98156 < r < 2.98156
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-103193374.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1084190700.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-109919896.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1171753585.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1201665374.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1232944581.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1259532873.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1309498567.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1322242905.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1330302041.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1350775706.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1467081725.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1476355233.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1479910027.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1501026832.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1511547711.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1514628217.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1548806254.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-157595862.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1733733594.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1769054727.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1816196733.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1934765240.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1948830792.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1972551700.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1997675688.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-2007958853.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-2032331768.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-2053186312.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-2112438866.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-2146736584.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-226783301.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-248179005.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-291608002.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-31826752.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-378713351.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-522114430.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-536512763.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-552811672.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-623847742.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-635480871.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-63727164.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-642149111.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-675430852.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-68661627.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-721740599.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-753906861.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-814645958.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-83232662.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-872351934.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.-900979206.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.-941459842.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.-967271940.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1085170293.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1088705826.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1097078125.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1127941689.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1252669035.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1269726277.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1298935344.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1360418175.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1361453308.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1373303673.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1385136212.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1423555009.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1473830905.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1546311053.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1617611033.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1681276128.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1699930979.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1727040130.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.178626441.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.182622400.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1859054271.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.1950607285.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.1967353093.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.2028512696.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.2078033638.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.2094532470.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.214841827.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.242621216.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.252358079.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.291800819.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.304227244.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.340464559.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.357349189.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.398432414.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.399250657.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.549296598.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.659985697.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.67811268.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.737335556.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.771741031.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.822569010.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.833460257.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.834880132.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.852846972.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.925276520.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.967555368.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.977886796.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 882319764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.79062 +/- 0.00756361 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.79062 @ 95%CL (1 toyMC)
median expected limit: r < 3.79062 @ 95%CL (1 toyMC)
   68% expected band : 3.79062 < r < 3.79062
   95% expected band : 3.79062 < r < 3.79062
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -88239153
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40509 +/- 0.00535629 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.40509 @ 95%CL (1 toyMC)
median expected limit: r < 2.40509 @ 95%CL (1 toyMC)
   68% expected band : 2.40509 < r < 2.40509
   95% expected band : 2.40509 < r < 2.40509
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1504118808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.22332 +/- 0.00517542 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.22332 @ 95%CL (1 toyMC)
median expected limit: r < 2.22332 @ 95%CL (1 toyMC)
   68% expected band : 2.22332 < r < 2.22332
   95% expected band : 2.22332 < r < 2.22332
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -579857411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23557 +/- 0.00837756 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.23557 @ 95%CL (1 toyMC)
median expected limit: r < 3.23557 @ 95%CL (1 toyMC)
   68% expected band : 3.23557 < r < 3.23557
   95% expected band : 3.23557 < r < 3.23557
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -238631525
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88975 +/- 0.00712283 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.88975 @ 95%CL (1 toyMC)
median expected limit: r < 2.88975 @ 95%CL (1 toyMC)
   68% expected band : 2.88975 < r < 2.88975
   95% expected band : 2.88975 < r < 2.88975
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -457327960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.40936 +/- 0.00676245 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.40936 @ 95%CL (1 toyMC)
median expected limit: r < 3.40936 @ 95%CL (1 toyMC)
   68% expected band : 3.40936 < r < 3.40936
   95% expected band : 3.40936 < r < 3.40936
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1604812596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8381 +/- 0.00629243 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.8381 @ 95%CL (1 toyMC)
median expected limit: r < 2.8381 @ 95%CL (1 toyMC)
   68% expected band : 2.8381 < r < 2.8381
   95% expected band : 2.8381 < r < 2.8381
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1765986564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.73631 +/- 0.00637035 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.73631 @ 95%CL (1 toyMC)
median expected limit: r < 3.73631 @ 95%CL (1 toyMC)
   68% expected band : 3.73631 < r < 3.73631
   95% expected band : 3.73631 < r < 3.73631
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1302744402
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.61222 +/- 0.00606896 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.61222 @ 95%CL (1 toyMC)
median expected limit: r < 2.61222 @ 95%CL (1 toyMC)
   68% expected band : 2.61222 < r < 2.61222
   95% expected band : 2.61222 < r < 2.61222
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1999793112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.54106 +/- 0.00655662 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.54106 @ 95%CL (1 toyMC)
median expected limit: r < 3.54106 @ 95%CL (1 toyMC)
   68% expected band : 3.54106 < r < 3.54106
   95% expected band : 3.54106 < r < 3.54106
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 261566489
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32745 +/- 0.00540194 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.32745 @ 95%CL (1 toyMC)
median expected limit: r < 2.32745 @ 95%CL (1 toyMC)
   68% expected band : 2.32745 < r < 2.32745
   95% expected band : 2.32745 < r < 2.32745
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2069827210
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5261 +/- 0.00603997 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.5261 @ 95%CL (1 toyMC)
median expected limit: r < 2.5261 @ 95%CL (1 toyMC)
   68% expected band : 2.5261 < r < 2.5261
   95% expected band : 2.5261 < r < 2.5261
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 890608730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.51365 +/- 0.00652212 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.51365 @ 95%CL (1 toyMC)
median expected limit: r < 3.51365 @ 95%CL (1 toyMC)
   68% expected band : 3.51365 < r < 3.51365
   95% expected band : 3.51365 < r < 3.51365
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1367802482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91657 +/- 0.00558946 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.91657 @ 95%CL (1 toyMC)
median expected limit: r < 2.91657 @ 95%CL (1 toyMC)
   68% expected band : 2.91657 < r < 2.91657
   95% expected band : 2.91657 < r < 2.91657
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1623456098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98329 +/- 0.00673372 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.98329 @ 95%CL (1 toyMC)
median expected limit: r < 2.98329 @ 95%CL (1 toyMC)
   68% expected band : 2.98329 < r < 2.98329
   95% expected band : 2.98329 < r < 2.98329
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -227398070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.56197 +/- 0.00651372 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.56197 @ 95%CL (1 toyMC)
median expected limit: r < 3.56197 @ 95%CL (1 toyMC)
   68% expected band : 3.56197 < r < 3.56197
   95% expected band : 3.56197 < r < 3.56197
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 796603581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37274 +/- 0.00618398 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.37274 @ 95%CL (1 toyMC)
median expected limit: r < 2.37274 @ 95%CL (1 toyMC)
   68% expected band : 2.37274 < r < 2.37274
   95% expected band : 2.37274 < r < 2.37274
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -505508519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.96372 +/- 0.00603044 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.96372 @ 95%CL (1 toyMC)
median expected limit: r < 3.96372 @ 95%CL (1 toyMC)
   68% expected band : 3.96372 < r < 3.96372
   95% expected band : 3.96372 < r < 3.96372
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -817127630
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.31969 +/- 0.00515165 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.31969 @ 95%CL (1 toyMC)
median expected limit: r < 2.31969 @ 95%CL (1 toyMC)
   68% expected band : 2.31969 < r < 2.31969
   95% expected band : 2.31969 < r < 2.31969
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 974605548
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.68992 +/- 0.00611624 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.68992 @ 95%CL (1 toyMC)
median expected limit: r < 2.68992 @ 95%CL (1 toyMC)
   68% expected band : 2.68992 < r < 2.68992
   95% expected band : 2.68992 < r < 2.68992
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -974852289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.9754 +/- 0.00676602 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 4.9754 @ 95%CL (1 toyMC)
median expected limit: r < 4.9754 @ 95%CL (1 toyMC)
   68% expected band : 4.9754 < r < 4.9754
   95% expected band : 4.9754 < r < 4.9754
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1353005273
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2891 +/- 0.00655417 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.2891 @ 95%CL (1 toyMC)
median expected limit: r < 3.2891 @ 95%CL (1 toyMC)
   68% expected band : 3.2891 < r < 3.2891
   95% expected band : 3.2891 < r < 3.2891
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -903305568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.88548 +/- 0.00604365 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.88548 @ 95%CL (1 toyMC)
median expected limit: r < 3.88548 @ 95%CL (1 toyMC)
   68% expected band : 3.88548 < r < 3.88548
   95% expected band : 3.88548 < r < 3.88548
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1796512953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.03963 +/- 0.00645404 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.03963 @ 95%CL (1 toyMC)
median expected limit: r < 3.03963 @ 95%CL (1 toyMC)
   68% expected band : 3.03963 < r < 3.03963
   95% expected band : 3.03963 < r < 3.03963
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 930796020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.38586 +/- 0.00603543 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.38586 @ 95%CL (1 toyMC)
median expected limit: r < 3.38586 @ 95%CL (1 toyMC)
   68% expected band : 3.38586 < r < 3.38586
   95% expected band : 3.38586 < r < 3.38586
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1370226867
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63711 +/- 0.00553647 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.63711 @ 95%CL (1 toyMC)
median expected limit: r < 2.63711 @ 95%CL (1 toyMC)
   68% expected band : 2.63711 < r < 2.63711
   95% expected band : 2.63711 < r < 2.63711
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1359870551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60448 +/- 0.00567098 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.60448 @ 95%CL (1 toyMC)
median expected limit: r < 2.60448 @ 95%CL (1 toyMC)
   68% expected band : 2.60448 < r < 2.60448
   95% expected band : 2.60448 < r < 2.60448
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1806139587
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09613 +/- 0.00625466 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.09613 @ 95%CL (1 toyMC)
median expected limit: r < 3.09613 @ 95%CL (1 toyMC)
   68% expected band : 3.09613 < r < 3.09613
   95% expected band : 3.09613 < r < 3.09613
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 836664026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.84208 +/- 0.00749699 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.84208 @ 95%CL (1 toyMC)
median expected limit: r < 2.84208 @ 95%CL (1 toyMC)
   68% expected band : 2.84208 < r < 2.84208
   95% expected band : 2.84208 < r < 2.84208
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -410257276
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.72346 +/- 0.00863722 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.72346 @ 95%CL (1 toyMC)
median expected limit: r < 3.72346 @ 95%CL (1 toyMC)
   68% expected band : 3.72346 < r < 3.72346
   95% expected band : 3.72346 < r < 3.72346
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 136769296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.70424 +/- 0.00595053 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.70424 @ 95%CL (1 toyMC)
median expected limit: r < 3.70424 @ 95%CL (1 toyMC)
   68% expected band : 3.70424 < r < 3.70424
   95% expected band : 3.70424 < r < 3.70424
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -382116429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87619 +/- 0.00721286 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.87619 @ 95%CL (1 toyMC)
median expected limit: r < 2.87619 @ 95%CL (1 toyMC)
   68% expected band : 2.87619 < r < 2.87619
   95% expected band : 2.87619 < r < 2.87619
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1192507411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.26895 +/- 0.00674663 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.26895 @ 95%CL (1 toyMC)
median expected limit: r < 5.26895 @ 95%CL (1 toyMC)
   68% expected band : 5.26895 < r < 5.26895
   95% expected band : 5.26895 < r < 5.26895
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1365607385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.3065 +/- 0.00557999 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.3065 @ 95%CL (1 toyMC)
median expected limit: r < 4.3065 @ 95%CL (1 toyMC)
   68% expected band : 4.3065 < r < 4.3065
   95% expected band : 4.3065 < r < 4.3065
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1301346646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.63278 +/- 0.00753443 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 5.63278 @ 95%CL (1 toyMC)
median expected limit: r < 5.63278 @ 95%CL (1 toyMC)
   68% expected band : 5.63278 < r < 5.63278
   95% expected band : 5.63278 < r < 5.63278
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2068177234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.19555 +/- 0.00625205 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.19555 @ 95%CL (1 toyMC)
median expected limit: r < 3.19555 @ 95%CL (1 toyMC)
   68% expected band : 3.19555 < r < 3.19555
   95% expected band : 3.19555 < r < 3.19555
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -799102339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59722 +/- 0.0053233 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.59722 @ 95%CL (1 toyMC)
median expected limit: r < 2.59722 @ 95%CL (1 toyMC)
   68% expected band : 2.59722 < r < 2.59722
   95% expected band : 2.59722 < r < 2.59722
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1481754716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.83036 +/- 0.00613016 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.83036 @ 95%CL (1 toyMC)
median expected limit: r < 2.83036 @ 95%CL (1 toyMC)
   68% expected band : 2.83036 < r < 2.83036
   95% expected band : 2.83036 < r < 2.83036
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 394267690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.38171 +/- 0.00605379 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.38171 @ 95%CL (1 toyMC)
median expected limit: r < 3.38171 @ 95%CL (1 toyMC)
   68% expected band : 3.38171 < r < 3.38171
   95% expected band : 3.38171 < r < 3.38171
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1984259272
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44704 +/- 0.0069031 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.44704 @ 95%CL (1 toyMC)
median expected limit: r < 3.44704 @ 95%CL (1 toyMC)
   68% expected band : 3.44704 < r < 3.44704
   95% expected band : 3.44704 < r < 3.44704
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1175886217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.41479 +/- 0.00551728 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.41479 @ 95%CL (1 toyMC)
median expected limit: r < 2.41479 @ 95%CL (1 toyMC)
   68% expected band : 2.41479 < r < 2.41479
   95% expected band : 2.41479 < r < 2.41479
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1935003070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.5351 +/- 0.0071999 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.5351 @ 95%CL (1 toyMC)
median expected limit: r < 3.5351 @ 95%CL (1 toyMC)
   68% expected band : 3.5351 < r < 3.5351
   95% expected band : 3.5351 < r < 3.5351
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -501101606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.74559 +/- 0.00551776 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.74559 @ 95%CL (1 toyMC)
median expected limit: r < 2.74559 @ 95%CL (1 toyMC)
   68% expected band : 2.74559 < r < 2.74559
   95% expected band : 2.74559 < r < 2.74559
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 221941441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13915 +/- 0.00562155 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.13915 @ 95%CL (1 toyMC)
median expected limit: r < 2.13915 @ 95%CL (1 toyMC)
   68% expected band : 2.13915 < r < 2.13915
   95% expected band : 2.13915 < r < 2.13915
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1478469718
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.85417 +/- 0.00462002 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.85417 @ 95%CL (1 toyMC)
median expected limit: r < 2.85417 @ 95%CL (1 toyMC)
   68% expected band : 2.85417 < r < 2.85417
   95% expected band : 2.85417 < r < 2.85417
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1092895404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2734 +/- 0.00630369 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.2734 @ 95%CL (1 toyMC)
median expected limit: r < 3.2734 @ 95%CL (1 toyMC)
   68% expected band : 3.2734 < r < 3.2734
   95% expected band : 3.2734 < r < 3.2734
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 744875478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.33145 +/- 0.00530597 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.33145 @ 95%CL (1 toyMC)
median expected limit: r < 4.33145 @ 95%CL (1 toyMC)
   68% expected band : 4.33145 < r < 4.33145
   95% expected band : 4.33145 < r < 4.33145
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 353266645
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64624 +/- 0.00582056 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.64624 @ 95%CL (1 toyMC)
median expected limit: r < 2.64624 @ 95%CL (1 toyMC)
   68% expected band : 2.64624 < r < 2.64624
   95% expected band : 2.64624 < r < 2.64624
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -243419763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.0642 +/- 0.0051533 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.0642 @ 95%CL (1 toyMC)
median expected limit: r < 2.0642 @ 95%CL (1 toyMC)
   68% expected band : 2.0642 < r < 2.0642
   95% expected band : 2.0642 < r < 2.0642
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1217848228
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.459 +/- 0.00533805 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.459 @ 95%CL (1 toyMC)
median expected limit: r < 2.459 @ 95%CL (1 toyMC)
   68% expected band : 2.459 < r < 2.459
   95% expected band : 2.459 < r < 2.459
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1455116521
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60918 +/- 0.00801832 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.60918 @ 95%CL (1 toyMC)
median expected limit: r < 2.60918 @ 95%CL (1 toyMC)
   68% expected band : 2.60918 < r < 2.60918
   95% expected band : 2.60918 < r < 2.60918
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1577103179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.89841 +/- 0.00579233 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.89841 @ 95%CL (1 toyMC)
median expected limit: r < 2.89841 @ 95%CL (1 toyMC)
   68% expected band : 2.89841 < r < 2.89841
   95% expected band : 2.89841 < r < 2.89841
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1625080997
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78367 +/- 0.0070255 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.78367 @ 95%CL (1 toyMC)
median expected limit: r < 2.78367 @ 95%CL (1 toyMC)
   68% expected band : 2.78367 < r < 2.78367
   95% expected band : 2.78367 < r < 2.78367
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -339906894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40488 +/- 0.00475461 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.40488 @ 95%CL (1 toyMC)
median expected limit: r < 2.40488 @ 95%CL (1 toyMC)
   68% expected band : 2.40488 < r < 2.40488
   95% expected band : 2.40488 < r < 2.40488
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 129884412
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.30789 +/- 0.00510919 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.30789 @ 95%CL (1 toyMC)
median expected limit: r < 2.30789 @ 95%CL (1 toyMC)
   68% expected band : 2.30789 < r < 2.30789
   95% expected band : 2.30789 < r < 2.30789
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 533391769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.41938 +/- 0.0063341 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.41938 @ 95%CL (1 toyMC)
median expected limit: r < 4.41938 @ 95%CL (1 toyMC)
   68% expected band : 4.41938 < r < 4.41938
   95% expected band : 4.41938 < r < 4.41938
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1803056981
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33638 +/- 0.00667691 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.33638 @ 95%CL (1 toyMC)
median expected limit: r < 3.33638 @ 95%CL (1 toyMC)
   68% expected band : 3.33638 < r < 3.33638
   95% expected band : 3.33638 < r < 3.33638
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1947918695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.58381 +/- 0.00668067 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.58381 @ 95%CL (1 toyMC)
median expected limit: r < 4.58381 @ 95%CL (1 toyMC)
   68% expected band : 4.58381 < r < 4.58381
   95% expected band : 4.58381 < r < 4.58381
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1759655902
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08296 +/- 0.00628329 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.08296 @ 95%CL (1 toyMC)
median expected limit: r < 3.08296 @ 95%CL (1 toyMC)
   68% expected band : 3.08296 < r < 3.08296
   95% expected band : 3.08296 < r < 3.08296
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -337214059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49673 +/- 0.00402228 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.49673 @ 95%CL (1 toyMC)
median expected limit: r < 2.49673 @ 95%CL (1 toyMC)
   68% expected band : 2.49673 < r < 2.49673
   95% expected band : 2.49673 < r < 2.49673
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1176573102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1116 +/- 0.0058189 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.1116 @ 95%CL (1 toyMC)
median expected limit: r < 3.1116 @ 95%CL (1 toyMC)
   68% expected band : 3.1116 < r < 3.1116
   95% expected band : 3.1116 < r < 3.1116
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 323913022
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.96699 +/- 0.00671577 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.96699 @ 95%CL (1 toyMC)
median expected limit: r < 3.96699 @ 95%CL (1 toyMC)
   68% expected band : 3.96699 < r < 3.96699
   95% expected band : 3.96699 < r < 3.96699
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1067200604
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.38608 +/- 0.00739021 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.38608 @ 95%CL (1 toyMC)
median expected limit: r < 5.38608 @ 95%CL (1 toyMC)
   68% expected band : 5.38608 < r < 5.38608
   95% expected band : 5.38608 < r < 5.38608
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 940154457
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67611 +/- 0.00691798 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.67611 @ 95%CL (1 toyMC)
median expected limit: r < 2.67611 @ 95%CL (1 toyMC)
   68% expected band : 2.67611 < r < 2.67611
   95% expected band : 2.67611 < r < 2.67611
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 951629132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05095 +/- 0.00510139 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.05095 @ 95%CL (1 toyMC)
median expected limit: r < 3.05095 @ 95%CL (1 toyMC)
   68% expected band : 3.05095 < r < 3.05095
   95% expected band : 3.05095 < r < 3.05095
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1644103268
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.24832 +/- 0.00524373 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.24832 @ 95%CL (1 toyMC)
median expected limit: r < 2.24832 @ 95%CL (1 toyMC)
   68% expected band : 2.24832 < r < 2.24832
   95% expected band : 2.24832 < r < 2.24832
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1283766655
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.25664 +/- 0.00664815 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.25664 @ 95%CL (1 toyMC)
median expected limit: r < 4.25664 @ 95%CL (1 toyMC)
   68% expected band : 4.25664 < r < 4.25664
   95% expected band : 4.25664 < r < 4.25664
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -405069828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47964 +/- 0.00529797 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.47964 @ 95%CL (1 toyMC)
median expected limit: r < 2.47964 @ 95%CL (1 toyMC)
   68% expected band : 2.47964 < r < 2.47964
   95% expected band : 2.47964 < r < 2.47964
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1320199079
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.402 +/- 0.00607053 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.402 @ 95%CL (1 toyMC)
median expected limit: r < 2.402 @ 95%CL (1 toyMC)
   68% expected band : 2.402 < r < 2.402
   95% expected band : 2.402 < r < 2.402
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 766241646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16396 +/- 0.0090381 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.16396 @ 95%CL (1 toyMC)
median expected limit: r < 4.16396 @ 95%CL (1 toyMC)
   68% expected band : 4.16396 < r < 4.16396
   95% expected band : 4.16396 < r < 4.16396
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2085427561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66411 +/- 0.00750891 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.66411 @ 95%CL (1 toyMC)
median expected limit: r < 3.66411 @ 95%CL (1 toyMC)
   68% expected band : 3.66411 < r < 3.66411
   95% expected band : 3.66411 < r < 3.66411
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2131001644
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.40265 +/- 0.00665063 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.40265 @ 95%CL (1 toyMC)
median expected limit: r < 4.40265 @ 95%CL (1 toyMC)
   68% expected band : 4.40265 < r < 4.40265
   95% expected band : 4.40265 < r < 4.40265
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2031689636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.56195 +/- 0.00511005 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.56195 @ 95%CL (1 toyMC)
median expected limit: r < 2.56195 @ 95%CL (1 toyMC)
   68% expected band : 2.56195 < r < 2.56195
   95% expected band : 2.56195 < r < 2.56195
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1199793415
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25752 +/- 0.00740324 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.25752 @ 95%CL (1 toyMC)
median expected limit: r < 3.25752 @ 95%CL (1 toyMC)
   68% expected band : 3.25752 < r < 3.25752
   95% expected band : 3.25752 < r < 3.25752
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -250222572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.66993 +/- 0.00812008 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.66993 @ 95%CL (1 toyMC)
median expected limit: r < 5.66993 @ 95%CL (1 toyMC)
   68% expected band : 5.66993 < r < 5.66993
   95% expected band : 5.66993 < r < 5.66993
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 124321977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.73654 +/- 0.00596049 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.73654 @ 95%CL (1 toyMC)
median expected limit: r < 3.73654 @ 95%CL (1 toyMC)
   68% expected band : 3.73654 < r < 3.73654
   95% expected band : 3.73654 < r < 3.73654
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1592508062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.3364 +/- 0.00746113 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.3364 @ 95%CL (1 toyMC)
median expected limit: r < 3.3364 @ 95%CL (1 toyMC)
   68% expected band : 3.3364 < r < 3.3364
   95% expected band : 3.3364 < r < 3.3364
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -176753665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.16237 +/- 0.0077884 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.16237 @ 95%CL (1 toyMC)
median expected limit: r < 5.16237 @ 95%CL (1 toyMC)
   68% expected band : 5.16237 < r < 5.16237
   95% expected band : 5.16237 < r < 5.16237
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2138616748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.35258 +/- 0.00527626 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.35258 @ 95%CL (1 toyMC)
median expected limit: r < 2.35258 @ 95%CL (1 toyMC)
   68% expected band : 2.35258 < r < 2.35258
   95% expected band : 2.35258 < r < 2.35258
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1853267261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29355 +/- 0.00537046 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.29355 @ 95%CL (1 toyMC)
median expected limit: r < 2.29355 @ 95%CL (1 toyMC)
   68% expected band : 2.29355 < r < 2.29355
   95% expected band : 2.29355 < r < 2.29355
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1601502764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.34464 +/- 0.00418518 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.34464 @ 95%CL (1 toyMC)
median expected limit: r < 2.34464 @ 95%CL (1 toyMC)
   68% expected band : 2.34464 < r < 2.34464
   95% expected band : 2.34464 < r < 2.34464
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 392936409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33293 +/- 0.00587126 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.33293 @ 95%CL (1 toyMC)
median expected limit: r < 2.33293 @ 95%CL (1 toyMC)
   68% expected band : 2.33293 < r < 2.33293
   95% expected band : 2.33293 < r < 2.33293
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -710398918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.1617 +/- 0.00532525 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.1617 @ 95%CL (1 toyMC)
median expected limit: r < 4.1617 @ 95%CL (1 toyMC)
   68% expected band : 4.1617 < r < 4.1617
   95% expected band : 4.1617 < r < 4.1617
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1702832824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09725 +/- 0.00654084 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.09725 @ 95%CL (1 toyMC)
median expected limit: r < 3.09725 @ 95%CL (1 toyMC)
   68% expected band : 3.09725 < r < 3.09725
   95% expected band : 3.09725 < r < 3.09725
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 79268891
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.69749 +/- 0.00533685 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.69749 @ 95%CL (1 toyMC)
median expected limit: r < 2.69749 @ 95%CL (1 toyMC)
   68% expected band : 2.69749 < r < 2.69749
   95% expected band : 2.69749 < r < 2.69749
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -435336873
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13228 +/- 0.00646887 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.13228 @ 95%CL (1 toyMC)
median expected limit: r < 3.13228 @ 95%CL (1 toyMC)
   68% expected band : 3.13228 < r < 3.13228
   95% expected band : 3.13228 < r < 3.13228
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1346757791
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28767 +/- 0.0065849 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.28767 @ 95%CL (1 toyMC)
median expected limit: r < 2.28767 @ 95%CL (1 toyMC)
   68% expected band : 2.28767 < r < 2.28767
   95% expected band : 2.28767 < r < 2.28767
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 286535385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7789 +/- 0.00535904 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.7789 @ 95%CL (1 toyMC)
median expected limit: r < 2.7789 @ 95%CL (1 toyMC)
   68% expected band : 2.7789 < r < 2.7789
   95% expected band : 2.7789 < r < 2.7789
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1071310213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.42365 +/- 0.00648583 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.42365 @ 95%CL (1 toyMC)
median expected limit: r < 3.42365 @ 95%CL (1 toyMC)
   68% expected band : 3.42365 < r < 3.42365
   95% expected band : 3.42365 < r < 3.42365
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1158149355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.21951 +/- 0.00462005 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.21951 @ 95%CL (1 toyMC)
median expected limit: r < 2.21951 @ 95%CL (1 toyMC)
   68% expected band : 2.21951 < r < 2.21951
   95% expected band : 2.21951 < r < 2.21951
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1802254951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93358 +/- 0.00524482 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.93358 @ 95%CL (1 toyMC)
median expected limit: r < 2.93358 @ 95%CL (1 toyMC)
   68% expected band : 2.93358 < r < 2.93358
   95% expected band : 2.93358 < r < 2.93358
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 606264190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.22989 +/- 0.00753405 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.22989 @ 95%CL (1 toyMC)
median expected limit: r < 4.22989 @ 95%CL (1 toyMC)
   68% expected band : 4.22989 < r < 4.22989
   95% expected band : 4.22989 < r < 4.22989
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -564267357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.67335 +/- 0.00701145 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.67335 @ 95%CL (1 toyMC)
median expected limit: r < 3.67335 @ 95%CL (1 toyMC)
   68% expected band : 3.67335 < r < 3.67335
   95% expected band : 3.67335 < r < 3.67335
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 254006076
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.42888 +/- 0.00651817 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.42888 @ 95%CL (1 toyMC)
median expected limit: r < 4.42888 @ 95%CL (1 toyMC)
   68% expected band : 4.42888 < r < 4.42888
   95% expected band : 4.42888 < r < 4.42888
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1826388916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.73229 +/- 0.00659515 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.73229 @ 95%CL (1 toyMC)
median expected limit: r < 2.73229 @ 95%CL (1 toyMC)
   68% expected band : 2.73229 < r < 2.73229
   95% expected band : 2.73229 < r < 2.73229
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1430007160
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.3089 +/- 0.00786133 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.3089 @ 95%CL (1 toyMC)
median expected limit: r < 3.3089 @ 95%CL (1 toyMC)
   68% expected band : 3.3089 < r < 3.3089
   95% expected band : 3.3089 < r < 3.3089
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1118596939
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.97408 +/- 0.00667498 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.97408 @ 95%CL (1 toyMC)
median expected limit: r < 3.97408 @ 95%CL (1 toyMC)
   68% expected band : 3.97408 < r < 3.97408
   95% expected band : 3.97408 < r < 3.97408
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1033002246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.56243 +/- 0.00651624 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.56243 @ 95%CL (1 toyMC)
median expected limit: r < 2.56243 @ 95%CL (1 toyMC)
   68% expected band : 2.56243 < r < 2.56243
   95% expected band : 2.56243 < r < 2.56243
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -118252043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13277 +/- 0.00647269 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.13277 @ 95%CL (1 toyMC)
median expected limit: r < 3.13277 @ 95%CL (1 toyMC)
   68% expected band : 3.13277 < r < 3.13277
   95% expected band : 3.13277 < r < 3.13277
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -886648755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29182 +/- 0.00647979 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.29182 @ 95%CL (1 toyMC)
median expected limit: r < 2.29182 @ 95%CL (1 toyMC)
   68% expected band : 2.29182 < r < 2.29182
   95% expected band : 2.29182 < r < 2.29182
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1033002246.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1067200604.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1071310213.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1092895404.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1118596939.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1158149355.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1176573102.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-118252043.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1192507411.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1283766655.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1302744402.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1320199079.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1346757791.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1359870551.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1367802482.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1430007160.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1455116521.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1478469718.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1577103179.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1601502764.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1759655902.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-176753665.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1796512953.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1802254951.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1803056981.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1826388916.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-1853267261.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-1935003070.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-1947918695.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-1999793112.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-2138616748.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-227398070.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-238631525.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-243419763.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-250222572.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-337214059.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-339906894.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-382116429.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-405069828.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-410257276.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-435336873.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-457327960.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-501101606.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-505508519.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-564267357.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-579857411.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-710398918.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-799102339.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-817127630.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-88239153.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.-886648755.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.-903305568.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.-974852289.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1175886217.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1199793415.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1217848228.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.124321977.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.129884412.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1301346646.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1353005273.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1365607385.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.136769296.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1370226867.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1481754716.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1504118808.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1592508062.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1604812596.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1623456098.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1625080997.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1644103268.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1702832824.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1765986564.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1806139587.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1984259272.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.2031689636.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.2068177234.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.2069827210.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.2085427561.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.2131001644.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.221941441.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.254006076.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.261566489.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.286535385.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.323913022.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.353266645.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.392936409.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.394267690.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.533391769.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.606264190.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.744875478.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.766241646.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.79268891.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.796603581.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.836664026.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.882319764.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.890608730.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.930796020.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.940154457.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.951629132.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.974605548.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2030357907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.03076 +/- 0.00603945 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.03076 @ 95%CL (1 toyMC)
median expected limit: r < 3.03076 @ 95%CL (1 toyMC)
   68% expected band : 3.03076 < r < 3.03076
   95% expected band : 3.03076 < r < 3.03076
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1332032890
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.34009 +/- 0.00601626 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.34009 @ 95%CL (1 toyMC)
median expected limit: r < 3.34009 @ 95%CL (1 toyMC)
   68% expected band : 3.34009 < r < 3.34009
   95% expected band : 3.34009 < r < 3.34009
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1227791446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10315 +/- 0.00661584 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.10315 @ 95%CL (1 toyMC)
median expected limit: r < 3.10315 @ 95%CL (1 toyMC)
   68% expected band : 3.10315 < r < 3.10315
   95% expected band : 3.10315 < r < 3.10315
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -12287736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.9191 +/- 0.00644215 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.9191 @ 95%CL (1 toyMC)
median expected limit: r < 2.9191 @ 95%CL (1 toyMC)
   68% expected band : 2.9191 < r < 2.9191
   95% expected band : 2.9191 < r < 2.9191
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1785281052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43676 +/- 0.00567001 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.43676 @ 95%CL (1 toyMC)
median expected limit: r < 2.43676 @ 95%CL (1 toyMC)
   68% expected band : 2.43676 < r < 2.43676
   95% expected band : 2.43676 < r < 2.43676
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1784357381
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.94053 +/- 0.00616294 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.94053 @ 95%CL (1 toyMC)
median expected limit: r < 2.94053 @ 95%CL (1 toyMC)
   68% expected band : 2.94053 < r < 2.94053
   95% expected band : 2.94053 < r < 2.94053
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -805518884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.40052 +/- 0.00785788 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.40052 @ 95%CL (1 toyMC)
median expected limit: r < 3.40052 @ 95%CL (1 toyMC)
   68% expected band : 3.40052 < r < 3.40052
   95% expected band : 3.40052 < r < 3.40052
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 619920377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.18849 +/- 0.00481113 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.18849 @ 95%CL (1 toyMC)
median expected limit: r < 3.18849 @ 95%CL (1 toyMC)
   68% expected band : 3.18849 < r < 3.18849
   95% expected band : 3.18849 < r < 3.18849
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 94969015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.01041 +/- 0.00544064 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.01041 @ 95%CL (1 toyMC)
median expected limit: r < 3.01041 @ 95%CL (1 toyMC)
   68% expected band : 3.01041 < r < 3.01041
   95% expected band : 3.01041 < r < 3.01041
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1892124155
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.61966 +/- 0.00746272 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.61966 @ 95%CL (1 toyMC)
median expected limit: r < 2.61966 @ 95%CL (1 toyMC)
   68% expected band : 2.61966 < r < 2.61966
   95% expected band : 2.61966 < r < 2.61966
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1709665356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49405 +/- 0.00690635 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.49405 @ 95%CL (1 toyMC)
median expected limit: r < 2.49405 @ 95%CL (1 toyMC)
   68% expected band : 2.49405 < r < 2.49405
   95% expected band : 2.49405 < r < 2.49405
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1811861338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1421 +/- 0.00645449 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.1421 @ 95%CL (1 toyMC)
median expected limit: r < 3.1421 @ 95%CL (1 toyMC)
   68% expected band : 3.1421 < r < 3.1421
   95% expected band : 3.1421 < r < 3.1421
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1285170169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58024 +/- 0.006562 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.58024 @ 95%CL (1 toyMC)
median expected limit: r < 2.58024 @ 95%CL (1 toyMC)
   68% expected band : 2.58024 < r < 2.58024
   95% expected band : 2.58024 < r < 2.58024
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -195794354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46675 +/- 0.00530558 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.46675 @ 95%CL (1 toyMC)
median expected limit: r < 2.46675 @ 95%CL (1 toyMC)
   68% expected band : 2.46675 < r < 2.46675
   95% expected band : 2.46675 < r < 2.46675
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1593958975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.48799 +/- 0.00584743 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.48799 @ 95%CL (1 toyMC)
median expected limit: r < 2.48799 @ 95%CL (1 toyMC)
   68% expected band : 2.48799 < r < 2.48799
   95% expected band : 2.48799 < r < 2.48799
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -482063619
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18029 +/- 0.00680905 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.18029 @ 95%CL (1 toyMC)
median expected limit: r < 4.18029 @ 95%CL (1 toyMC)
   68% expected band : 4.18029 < r < 4.18029
   95% expected band : 4.18029 < r < 4.18029
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -869815987
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.15557 +/- 0.00631414 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.15557 @ 95%CL (1 toyMC)
median expected limit: r < 3.15557 @ 95%CL (1 toyMC)
   68% expected band : 3.15557 < r < 3.15557
   95% expected band : 3.15557 < r < 3.15557
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2037905102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.86735 +/- 0.00742757 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 3.86735 @ 95%CL (1 toyMC)
median expected limit: r < 3.86735 @ 95%CL (1 toyMC)
   68% expected band : 3.86735 < r < 3.86735
   95% expected band : 3.86735 < r < 3.86735
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1495859719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.19204 +/- 0.00655302 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.19204 @ 95%CL (1 toyMC)
median expected limit: r < 3.19204 @ 95%CL (1 toyMC)
   68% expected band : 3.19204 < r < 3.19204
   95% expected band : 3.19204 < r < 3.19204
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 7347885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49111 +/- 0.00575155 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.49111 @ 95%CL (1 toyMC)
median expected limit: r < 2.49111 @ 95%CL (1 toyMC)
   68% expected band : 2.49111 < r < 2.49111
   95% expected band : 2.49111 < r < 2.49111
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1061934027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16861 +/- 0.00667663 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.16861 @ 95%CL (1 toyMC)
median expected limit: r < 3.16861 @ 95%CL (1 toyMC)
   68% expected band : 3.16861 < r < 3.16861
   95% expected band : 3.16861 < r < 3.16861
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -294006984
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07008 +/- 0.00627887 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.07008 @ 95%CL (1 toyMC)
median expected limit: r < 3.07008 @ 95%CL (1 toyMC)
   68% expected band : 3.07008 < r < 3.07008
   95% expected band : 3.07008 < r < 3.07008
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 684504589
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.04896 +/- 0.00880473 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.04896 @ 95%CL (1 toyMC)
median expected limit: r < 4.04896 @ 95%CL (1 toyMC)
   68% expected band : 4.04896 < r < 4.04896
   95% expected band : 4.04896 < r < 4.04896
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1328712376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.59997 +/- 0.00745657 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.59997 @ 95%CL (1 toyMC)
median expected limit: r < 3.59997 @ 95%CL (1 toyMC)
   68% expected band : 3.59997 < r < 3.59997
   95% expected band : 3.59997 < r < 3.59997
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -694017841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.01761 +/- 0.0059681 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.01761 @ 95%CL (1 toyMC)
median expected limit: r < 2.01761 @ 95%CL (1 toyMC)
   68% expected band : 2.01761 < r < 2.01761
   95% expected band : 2.01761 < r < 2.01761
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 8361472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28682 +/- 0.00655279 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.28682 @ 95%CL (1 toyMC)
median expected limit: r < 2.28682 @ 95%CL (1 toyMC)
   68% expected band : 2.28682 < r < 2.28682
   95% expected band : 2.28682 < r < 2.28682
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1514327389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.28217 +/- 0.00549352 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.28217 @ 95%CL (1 toyMC)
median expected limit: r < 3.28217 @ 95%CL (1 toyMC)
   68% expected band : 3.28217 < r < 3.28217
   95% expected band : 3.28217 < r < 3.28217
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1605440944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28822 +/- 0.00423338 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.28822 @ 95%CL (1 toyMC)
median expected limit: r < 2.28822 @ 95%CL (1 toyMC)
   68% expected band : 2.28822 < r < 2.28822
   95% expected band : 2.28822 < r < 2.28822
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1087301267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.41595 +/- 0.00547611 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.41595 @ 95%CL (1 toyMC)
median expected limit: r < 2.41595 @ 95%CL (1 toyMC)
   68% expected band : 2.41595 < r < 2.41595
   95% expected band : 2.41595 < r < 2.41595
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1086515172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.26721 +/- 0.00441736 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.26721 @ 95%CL (1 toyMC)
median expected limit: r < 2.26721 @ 95%CL (1 toyMC)
   68% expected band : 2.26721 < r < 2.26721
   95% expected band : 2.26721 < r < 2.26721
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1476721301
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.96514 +/- 0.0079246 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 5.96514 @ 95%CL (1 toyMC)
median expected limit: r < 5.96514 @ 95%CL (1 toyMC)
   68% expected band : 5.96514 < r < 5.96514
   95% expected band : 5.96514 < r < 5.96514
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -637051628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.22903 +/- 0.00550896 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.22903 @ 95%CL (1 toyMC)
median expected limit: r < 2.22903 @ 95%CL (1 toyMC)
   68% expected band : 2.22903 < r < 2.22903
   95% expected band : 2.22903 < r < 2.22903
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1519644074
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99809 +/- 0.00651214 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.99809 @ 95%CL (1 toyMC)
median expected limit: r < 2.99809 @ 95%CL (1 toyMC)
   68% expected band : 2.99809 < r < 2.99809
   95% expected band : 2.99809 < r < 2.99809
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -637635128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54549 +/- 0.00588412 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.54549 @ 95%CL (1 toyMC)
median expected limit: r < 2.54549 @ 95%CL (1 toyMC)
   68% expected band : 2.54549 < r < 2.54549
   95% expected band : 2.54549 < r < 2.54549
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1316955998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.35695 +/- 0.00553049 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.35695 @ 95%CL (1 toyMC)
median expected limit: r < 2.35695 @ 95%CL (1 toyMC)
   68% expected band : 2.35695 < r < 2.35695
   95% expected band : 2.35695 < r < 2.35695
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2086424314
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.17922 +/- 0.00661489 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.17922 @ 95%CL (1 toyMC)
median expected limit: r < 3.17922 @ 95%CL (1 toyMC)
   68% expected band : 3.17922 < r < 3.17922
   95% expected band : 3.17922 < r < 3.17922
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1446359268
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.7267 +/- 0.00723176 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.7267 @ 95%CL (1 toyMC)
median expected limit: r < 4.7267 @ 95%CL (1 toyMC)
   68% expected band : 4.7267 < r < 4.7267
   95% expected band : 4.7267 < r < 4.7267
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -582276841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.96628 +/- 0.00629642 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.96628 @ 95%CL (1 toyMC)
median expected limit: r < 2.96628 @ 95%CL (1 toyMC)
   68% expected band : 2.96628 < r < 2.96628
   95% expected band : 2.96628 < r < 2.96628
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -963488535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66394 +/- 0.00681037 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.66394 @ 95%CL (1 toyMC)
median expected limit: r < 2.66394 @ 95%CL (1 toyMC)
   68% expected band : 2.66394 < r < 2.66394
   95% expected band : 2.66394 < r < 2.66394
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1356026965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.73329 +/- 0.00761966 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.73329 @ 95%CL (1 toyMC)
median expected limit: r < 5.73329 @ 95%CL (1 toyMC)
   68% expected band : 5.73329 < r < 5.73329
   95% expected band : 5.73329 < r < 5.73329
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1490442559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.7562 +/- 0.0060583 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.7562 @ 95%CL (1 toyMC)
median expected limit: r < 3.7562 @ 95%CL (1 toyMC)
   68% expected band : 3.7562 < r < 3.7562
   95% expected band : 3.7562 < r < 3.7562
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1886578770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.90179 +/- 0.00762408 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 4.90179 @ 95%CL (1 toyMC)
median expected limit: r < 4.90179 @ 95%CL (1 toyMC)
   68% expected band : 4.90179 < r < 4.90179
   95% expected band : 4.90179 < r < 4.90179
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1118850412
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76047 +/- 0.00643138 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.76047 @ 95%CL (1 toyMC)
median expected limit: r < 2.76047 @ 95%CL (1 toyMC)
   68% expected band : 2.76047 < r < 2.76047
   95% expected band : 2.76047 < r < 2.76047
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -260059714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.82809 +/- 0.00521138 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.82809 @ 95%CL (1 toyMC)
median expected limit: r < 2.82809 @ 95%CL (1 toyMC)
   68% expected band : 2.82809 < r < 2.82809
   95% expected band : 2.82809 < r < 2.82809
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 583139471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27341 +/- 0.00553358 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.27341 @ 95%CL (1 toyMC)
median expected limit: r < 2.27341 @ 95%CL (1 toyMC)
   68% expected band : 2.27341 < r < 2.27341
   95% expected band : 2.27341 < r < 2.27341
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2079703581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.76615 +/- 0.00531793 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.76615 @ 95%CL (1 toyMC)
median expected limit: r < 3.76615 @ 95%CL (1 toyMC)
   68% expected band : 3.76615 < r < 3.76615
   95% expected band : 3.76615 < r < 3.76615
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1189040271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.61679 +/- 0.00624152 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.61679 @ 95%CL (1 toyMC)
median expected limit: r < 3.61679 @ 95%CL (1 toyMC)
   68% expected band : 3.61679 < r < 3.61679
   95% expected band : 3.61679 < r < 3.61679
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 864232747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.30804 +/- 0.00644682 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.30804 @ 95%CL (1 toyMC)
median expected limit: r < 2.30804 @ 95%CL (1 toyMC)
   68% expected band : 2.30804 < r < 2.30804
   95% expected band : 2.30804 < r < 2.30804
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1055751094
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.38967 +/- 0.00587433 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.38967 @ 95%CL (1 toyMC)
median expected limit: r < 2.38967 @ 95%CL (1 toyMC)
   68% expected band : 2.38967 < r < 2.38967
   95% expected band : 2.38967 < r < 2.38967
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1162305134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8763 +/- 0.00684094 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.8763 @ 95%CL (1 toyMC)
median expected limit: r < 2.8763 @ 95%CL (1 toyMC)
   68% expected band : 2.8763 < r < 2.8763
   95% expected band : 2.8763 < r < 2.8763
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1631343042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.55753 +/- 0.0058233 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.55753 @ 95%CL (1 toyMC)
median expected limit: r < 2.55753 @ 95%CL (1 toyMC)
   68% expected band : 2.55753 < r < 2.55753
   95% expected band : 2.55753 < r < 2.55753
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 984259692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08161 +/- 0.008041 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.08161 @ 95%CL (1 toyMC)
median expected limit: r < 3.08161 @ 95%CL (1 toyMC)
   68% expected band : 3.08161 < r < 3.08161
   95% expected band : 3.08161 < r < 3.08161
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 101973879
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.84853 +/- 0.00746461 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.84853 @ 95%CL (1 toyMC)
median expected limit: r < 3.84853 @ 95%CL (1 toyMC)
   68% expected band : 3.84853 < r < 3.84853
   95% expected band : 3.84853 < r < 3.84853
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2036667121
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27005 +/- 0.00632016 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.27005 @ 95%CL (1 toyMC)
median expected limit: r < 3.27005 @ 95%CL (1 toyMC)
   68% expected band : 3.27005 < r < 3.27005
   95% expected band : 3.27005 < r < 3.27005
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1201641117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59714 +/- 0.00611286 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.59714 @ 95%CL (1 toyMC)
median expected limit: r < 2.59714 @ 95%CL (1 toyMC)
   68% expected band : 2.59714 < r < 2.59714
   95% expected band : 2.59714 < r < 2.59714
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -112496474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.04817 +/- 0.00812135 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.04817 @ 95%CL (1 toyMC)
median expected limit: r < 4.04817 @ 95%CL (1 toyMC)
   68% expected band : 4.04817 < r < 4.04817
   95% expected band : 4.04817 < r < 4.04817
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -87837539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77318 +/- 0.00629286 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.77318 @ 95%CL (1 toyMC)
median expected limit: r < 2.77318 @ 95%CL (1 toyMC)
   68% expected band : 2.77318 < r < 2.77318
   95% expected band : 2.77318 < r < 2.77318
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1461826256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.20844 +/- 0.00745795 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.20844 @ 95%CL (1 toyMC)
median expected limit: r < 5.20844 @ 95%CL (1 toyMC)
   68% expected band : 5.20844 < r < 5.20844
   95% expected band : 5.20844 < r < 5.20844
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1233560244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24206 +/- 0.00651123 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.24206 @ 95%CL (1 toyMC)
median expected limit: r < 3.24206 @ 95%CL (1 toyMC)
   68% expected band : 3.24206 < r < 3.24206
   95% expected band : 3.24206 < r < 3.24206
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -33147556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.74051 +/- 0.00668106 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.74051 @ 95%CL (1 toyMC)
median expected limit: r < 3.74051 @ 95%CL (1 toyMC)
   68% expected band : 3.74051 < r < 3.74051
   95% expected band : 3.74051 < r < 3.74051
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -192332761
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.27528 +/- 0.00749676 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.27528 @ 95%CL (1 toyMC)
median expected limit: r < 4.27528 @ 95%CL (1 toyMC)
   68% expected band : 4.27528 < r < 4.27528
   95% expected band : 4.27528 < r < 4.27528
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -332056769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.26983 +/- 0.00620614 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.26983 @ 95%CL (1 toyMC)
median expected limit: r < 3.26983 @ 95%CL (1 toyMC)
   68% expected band : 3.26983 < r < 3.26983
   95% expected band : 3.26983 < r < 3.26983
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1876290129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.0976 +/- 0.00557389 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.0976 @ 95%CL (1 toyMC)
median expected limit: r < 4.0976 @ 95%CL (1 toyMC)
   68% expected band : 4.0976 < r < 4.0976
   95% expected band : 4.0976 < r < 4.0976
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 491123567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.72576 +/- 0.00680206 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.72576 @ 95%CL (1 toyMC)
median expected limit: r < 3.72576 @ 95%CL (1 toyMC)
   68% expected band : 3.72576 < r < 3.72576
   95% expected band : 3.72576 < r < 3.72576
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1638543726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58508 +/- 0.00660036 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.58508 @ 95%CL (1 toyMC)
median expected limit: r < 2.58508 @ 95%CL (1 toyMC)
   68% expected band : 2.58508 < r < 2.58508
   95% expected band : 2.58508 < r < 2.58508
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1564595900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09135 +/- 0.00552844 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.09135 @ 95%CL (1 toyMC)
median expected limit: r < 2.09135 @ 95%CL (1 toyMC)
   68% expected band : 2.09135 < r < 2.09135
   95% expected band : 2.09135 < r < 2.09135
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -931648893
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.10017 +/- 0.00604239 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.10017 @ 95%CL (1 toyMC)
median expected limit: r < 4.10017 @ 95%CL (1 toyMC)
   68% expected band : 4.10017 < r < 4.10017
   95% expected band : 4.10017 < r < 4.10017
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -212896978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90474 +/- 0.00561387 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.90474 @ 95%CL (1 toyMC)
median expected limit: r < 2.90474 @ 95%CL (1 toyMC)
   68% expected band : 2.90474 < r < 2.90474
   95% expected band : 2.90474 < r < 2.90474
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 242225765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.38468 +/- 0.00699908 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.38468 @ 95%CL (1 toyMC)
median expected limit: r < 3.38468 @ 95%CL (1 toyMC)
   68% expected band : 3.38468 < r < 3.38468
   95% expected band : 3.38468 < r < 3.38468
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 634323861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.55812 +/- 0.00520794 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.55812 @ 95%CL (1 toyMC)
median expected limit: r < 3.55812 @ 95%CL (1 toyMC)
   68% expected band : 3.55812 < r < 3.55812
   95% expected band : 3.55812 < r < 3.55812
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -340157908
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.23867 +/- 0.00571795 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.23867 @ 95%CL (1 toyMC)
median expected limit: r < 2.23867 @ 95%CL (1 toyMC)
   68% expected band : 2.23867 < r < 2.23867
   95% expected band : 2.23867 < r < 2.23867
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1593446235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10941 +/- 0.00573443 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.10941 @ 95%CL (1 toyMC)
median expected limit: r < 3.10941 @ 95%CL (1 toyMC)
   68% expected band : 3.10941 < r < 3.10941
   95% expected band : 3.10941 < r < 3.10941
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1037068896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91399 +/- 0.00537806 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.91399 @ 95%CL (1 toyMC)
median expected limit: r < 2.91399 @ 95%CL (1 toyMC)
   68% expected band : 2.91399 < r < 2.91399
   95% expected band : 2.91399 < r < 2.91399
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2012935386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.41301 +/- 0.00737391 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.41301 @ 95%CL (1 toyMC)
median expected limit: r < 2.41301 @ 95%CL (1 toyMC)
   68% expected band : 2.41301 < r < 2.41301
   95% expected band : 2.41301 < r < 2.41301
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1044256055
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.80294 +/- 0.00560846 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.80294 @ 95%CL (1 toyMC)
median expected limit: r < 2.80294 @ 95%CL (1 toyMC)
   68% expected band : 2.80294 < r < 2.80294
   95% expected band : 2.80294 < r < 2.80294
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1593653958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.99895 +/- 0.00781899 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 4.99895 @ 95%CL (1 toyMC)
median expected limit: r < 4.99895 @ 95%CL (1 toyMC)
   68% expected band : 4.99895 < r < 4.99895
   95% expected band : 4.99895 < r < 4.99895
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1160083052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.3595 +/- 0.00735701 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.3595 @ 95%CL (1 toyMC)
median expected limit: r < 4.3595 @ 95%CL (1 toyMC)
   68% expected band : 4.3595 < r < 4.3595
   95% expected band : 4.3595 < r < 4.3595
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -499869020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.38883 +/- 0.00552404 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.38883 @ 95%CL (1 toyMC)
median expected limit: r < 2.38883 @ 95%CL (1 toyMC)
   68% expected band : 2.38883 < r < 2.38883
   95% expected band : 2.38883 < r < 2.38883
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1538099089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.75439 +/- 0.00509268 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.75439 @ 95%CL (1 toyMC)
median expected limit: r < 3.75439 @ 95%CL (1 toyMC)
   68% expected band : 3.75439 < r < 3.75439
   95% expected band : 3.75439 < r < 3.75439
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1220112219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.14742 +/- 0.00714321 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.14742 @ 95%CL (1 toyMC)
median expected limit: r < 3.14742 @ 95%CL (1 toyMC)
   68% expected band : 3.14742 < r < 3.14742
   95% expected band : 3.14742 < r < 3.14742
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 360062181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.1572 +/- 0.00775873 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.1572 @ 95%CL (1 toyMC)
median expected limit: r < 7.1572 @ 95%CL (1 toyMC)
   68% expected band : 7.1572 < r < 7.1572
   95% expected band : 7.1572 < r < 7.1572
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2060055985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.73937 +/- 0.00712081 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.73937 @ 95%CL (1 toyMC)
median expected limit: r < 2.73937 @ 95%CL (1 toyMC)
   68% expected band : 2.73937 < r < 2.73937
   95% expected band : 2.73937 < r < 2.73937
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -409044093
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.40147 +/- 0.00624462 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.40147 @ 95%CL (1 toyMC)
median expected limit: r < 3.40147 @ 95%CL (1 toyMC)
   68% expected band : 3.40147 < r < 3.40147
   95% expected band : 3.40147 < r < 3.40147
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -518537253
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17414 +/- 0.00731361 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.17414 @ 95%CL (1 toyMC)
median expected limit: r < 4.17414 @ 95%CL (1 toyMC)
   68% expected band : 4.17414 < r < 4.17414
   95% expected band : 4.17414 < r < 4.17414
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1047050769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93326 +/- 0.0073498 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.93326 @ 95%CL (1 toyMC)
median expected limit: r < 2.93326 @ 95%CL (1 toyMC)
   68% expected band : 2.93326 < r < 2.93326
   95% expected band : 2.93326 < r < 2.93326
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2039876530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.71384 +/- 0.00663066 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.71384 @ 95%CL (1 toyMC)
median expected limit: r < 3.71384 @ 95%CL (1 toyMC)
   68% expected band : 3.71384 < r < 3.71384
   95% expected band : 3.71384 < r < 3.71384
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -676966842
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.68115 +/- 0.00673808 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.68115 @ 95%CL (1 toyMC)
median expected limit: r < 3.68115 @ 95%CL (1 toyMC)
   68% expected band : 3.68115 < r < 3.68115
   95% expected band : 3.68115 < r < 3.68115
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1519338877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.24167 +/- 0.00634558 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.24167 @ 95%CL (1 toyMC)
median expected limit: r < 4.24167 @ 95%CL (1 toyMC)
   68% expected band : 4.24167 < r < 4.24167
   95% expected band : 4.24167 < r < 4.24167
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 889838769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60345 +/- 0.00674868 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.60345 @ 95%CL (1 toyMC)
median expected limit: r < 2.60345 @ 95%CL (1 toyMC)
   68% expected band : 2.60345 < r < 2.60345
   95% expected band : 2.60345 < r < 2.60345
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2001972121
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.54942 +/- 0.00600774 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.54942 @ 95%CL (1 toyMC)
median expected limit: r < 3.54942 @ 95%CL (1 toyMC)
   68% expected band : 3.54942 < r < 3.54942
   95% expected band : 3.54942 < r < 3.54942
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1665430318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.21847 +/- 0.00578971 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.21847 @ 95%CL (1 toyMC)
median expected limit: r < 2.21847 @ 95%CL (1 toyMC)
   68% expected band : 2.21847 < r < 2.21847
   95% expected band : 2.21847 < r < 2.21847
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 13009649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.48804 +/- 0.00570475 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.48804 @ 95%CL (1 toyMC)
median expected limit: r < 3.48804 @ 95%CL (1 toyMC)
   68% expected band : 3.48804 < r < 3.48804
   95% expected band : 3.48804 < r < 3.48804
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -591255689
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.63122 +/- 0.00732257 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 4.63122 @ 95%CL (1 toyMC)
median expected limit: r < 4.63122 @ 95%CL (1 toyMC)
   68% expected band : 4.63122 < r < 4.63122
   95% expected band : 4.63122 < r < 4.63122
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 262840495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0479 +/- 0.00607621 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.0479 @ 95%CL (1 toyMC)
median expected limit: r < 3.0479 @ 95%CL (1 toyMC)
   68% expected band : 3.0479 < r < 3.0479
   95% expected band : 3.0479 < r < 3.0479
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -258352231
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.0098 +/- 0.00627793 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.0098 @ 95%CL (1 toyMC)
median expected limit: r < 4.0098 @ 95%CL (1 toyMC)
   68% expected band : 4.0098 < r < 4.0098
   95% expected band : 4.0098 < r < 4.0098
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1779874528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05412 +/- 0.00651445 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.05412 @ 95%CL (1 toyMC)
median expected limit: r < 3.05412 @ 95%CL (1 toyMC)
   68% expected band : 3.05412 < r < 3.05412
   95% expected band : 3.05412 < r < 3.05412
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 718956526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.38371 +/- 0.00562951 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.38371 @ 95%CL (1 toyMC)
median expected limit: r < 3.38371 @ 95%CL (1 toyMC)
   68% expected band : 3.38371 < r < 3.38371
   95% expected band : 3.38371 < r < 3.38371
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1954632045
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.58232 +/- 0.00818725 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.58232 @ 95%CL (1 toyMC)
median expected limit: r < 3.58232 @ 95%CL (1 toyMC)
   68% expected band : 3.58232 < r < 3.58232
   95% expected band : 3.58232 < r < 3.58232
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 527255401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04259 +/- 0.00632768 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.04259 @ 95%CL (1 toyMC)
median expected limit: r < 3.04259 @ 95%CL (1 toyMC)
   68% expected band : 3.04259 < r < 3.04259
   95% expected band : 3.04259 < r < 3.04259
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1615591911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.34526 +/- 0.00631583 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.34526 @ 95%CL (1 toyMC)
median expected limit: r < 2.34526 @ 95%CL (1 toyMC)
   68% expected band : 2.34526 < r < 2.34526
   95% expected band : 2.34526 < r < 2.34526
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1037068896.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1047050769.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1086515172.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1087301267.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-112496474.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1162305134.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1220112219.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1227791446.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-12287736.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1332032890.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1476721301.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1490442559.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1495859719.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1519644074.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1538099089.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1564595900.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1593653958.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1593958975.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1638543726.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1665430318.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1779874528.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1784357381.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1785281052.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1886578770.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1892124155.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-192332761.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-1954632045.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-195794354.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-2012935386.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-2030357907.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-2039876530.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-2079703581.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-212896978.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-258352231.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-260059714.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-294006984.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-33147556.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-332056769.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-340157908.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-409044093.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-482063619.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-499869020.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-518537253.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-582276841.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-591255689.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-637051628.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-637635128.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-676966842.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-694017841.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-805518884.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.-869815987.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.-87837539.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.-931648893.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.-963488535.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.101973879.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1044256055.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1055751094.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1061934027.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1118850412.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1160083052.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1189040271.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1201641117.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1233560244.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1285170169.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.13009649.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1316955998.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1328712376.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1356026965.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1446359268.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1461826256.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1514327389.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1519338877.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1593446235.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1605440944.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.1615591911.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.1631343042.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.1709665356.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.1811861338.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.1876290129.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.2001972121.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.2036667121.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.2037905102.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.2060055985.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.2086424314.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.242225765.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.262840495.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.360062181.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.491123567.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.527255401.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.583139471.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.619920377.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.634323861.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.684504589.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.718956526.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.7347885.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.8361472.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.864232747.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.889838769.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.94969015.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.984259692.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1142873428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.84075 +/- 0.00587851 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.84075 @ 95%CL (1 toyMC)
median expected limit: r < 2.84075 @ 95%CL (1 toyMC)
   68% expected band : 2.84075 < r < 2.84075
   95% expected band : 2.84075 < r < 2.84075
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1736627884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.86772 +/- 0.00481258 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.86772 @ 95%CL (1 toyMC)
median expected limit: r < 2.86772 @ 95%CL (1 toyMC)
   68% expected band : 2.86772 < r < 2.86772
   95% expected band : 2.86772 < r < 2.86772
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1612305052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24364 +/- 0.00690053 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.24364 @ 95%CL (1 toyMC)
median expected limit: r < 3.24364 @ 95%CL (1 toyMC)
   68% expected band : 3.24364 < r < 3.24364
   95% expected band : 3.24364 < r < 3.24364
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1070351996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8909 +/- 0.00641884 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.8909 @ 95%CL (1 toyMC)
median expected limit: r < 2.8909 @ 95%CL (1 toyMC)
   68% expected band : 2.8909 < r < 2.8909
   95% expected band : 2.8909 < r < 2.8909
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1347654789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.56281 +/- 0.00803581 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 5.56281 @ 95%CL (1 toyMC)
median expected limit: r < 5.56281 @ 95%CL (1 toyMC)
   68% expected band : 5.56281 < r < 5.56281
   95% expected band : 5.56281 < r < 5.56281
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 913830695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5416 +/- 0.00839259 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.5416 @ 95%CL (1 toyMC)
median expected limit: r < 2.5416 @ 95%CL (1 toyMC)
   68% expected band : 2.5416 < r < 2.5416
   95% expected band : 2.5416 < r < 2.5416
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1033120873
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54158 +/- 0.00490594 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.54158 @ 95%CL (1 toyMC)
median expected limit: r < 2.54158 @ 95%CL (1 toyMC)
   68% expected band : 2.54158 < r < 2.54158
   95% expected band : 2.54158 < r < 2.54158
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1277368880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90109 +/- 0.00798894 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.90109 @ 95%CL (1 toyMC)
median expected limit: r < 3.90109 @ 95%CL (1 toyMC)
   68% expected band : 3.90109 < r < 3.90109
   95% expected band : 3.90109 < r < 3.90109
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1762911080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.20381 +/- 0.00643421 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.20381 @ 95%CL (1 toyMC)
median expected limit: r < 3.20381 @ 95%CL (1 toyMC)
   68% expected band : 3.20381 < r < 3.20381
   95% expected band : 3.20381 < r < 3.20381
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 859393683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.01684 +/- 0.00712921 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.01684 @ 95%CL (1 toyMC)
median expected limit: r < 3.01684 @ 95%CL (1 toyMC)
   68% expected band : 3.01684 < r < 3.01684
   95% expected band : 3.01684 < r < 3.01684
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 532257945
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59363 +/- 0.00675636 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.59363 @ 95%CL (1 toyMC)
median expected limit: r < 2.59363 @ 95%CL (1 toyMC)
   68% expected band : 2.59363 < r < 2.59363
   95% expected band : 2.59363 < r < 2.59363
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1867653817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0936 +/- 0.00699783 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.0936 @ 95%CL (1 toyMC)
median expected limit: r < 3.0936 @ 95%CL (1 toyMC)
   68% expected band : 3.0936 < r < 3.0936
   95% expected band : 3.0936 < r < 3.0936
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2090692421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12798 +/- 0.00583403 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.12798 @ 95%CL (1 toyMC)
median expected limit: r < 2.12798 @ 95%CL (1 toyMC)
   68% expected band : 2.12798 < r < 2.12798
   95% expected band : 2.12798 < r < 2.12798
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 197715305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0651 +/- 0.00610528 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.0651 @ 95%CL (1 toyMC)
median expected limit: r < 3.0651 @ 95%CL (1 toyMC)
   68% expected band : 3.0651 < r < 3.0651
   95% expected band : 3.0651 < r < 3.0651
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1899513973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.3327 +/- 0.00652105 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.3327 @ 95%CL (1 toyMC)
median expected limit: r < 2.3327 @ 95%CL (1 toyMC)
   68% expected band : 2.3327 < r < 2.3327
   95% expected band : 2.3327 < r < 2.3327
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -567317940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25603 +/- 0.00517436 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.25603 @ 95%CL (1 toyMC)
median expected limit: r < 3.25603 @ 95%CL (1 toyMC)
   68% expected band : 3.25603 < r < 3.25603
   95% expected band : 3.25603 < r < 3.25603
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -416538419
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93671 +/- 0.00686717 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.93671 @ 95%CL (1 toyMC)
median expected limit: r < 2.93671 @ 95%CL (1 toyMC)
   68% expected band : 2.93671 < r < 2.93671
   95% expected band : 2.93671 < r < 2.93671
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 197647188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77952 +/- 0.0050368 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.77952 @ 95%CL (1 toyMC)
median expected limit: r < 2.77952 @ 95%CL (1 toyMC)
   68% expected band : 2.77952 < r < 2.77952
   95% expected band : 2.77952 < r < 2.77952
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 273733679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.75446 +/- 0.0063082 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.75446 @ 95%CL (1 toyMC)
median expected limit: r < 2.75446 @ 95%CL (1 toyMC)
   68% expected band : 2.75446 < r < 2.75446
   95% expected band : 2.75446 < r < 2.75446
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1584557266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.55838 +/- 0.00641814 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.55838 @ 95%CL (1 toyMC)
median expected limit: r < 3.55838 @ 95%CL (1 toyMC)
   68% expected band : 3.55838 < r < 3.55838
   95% expected band : 3.55838 < r < 3.55838
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1242683192
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33463 +/- 0.00621396 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.33463 @ 95%CL (1 toyMC)
median expected limit: r < 2.33463 @ 95%CL (1 toyMC)
   68% expected band : 2.33463 < r < 2.33463
   95% expected band : 2.33463 < r < 2.33463
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 533602093
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.04969 +/- 0.00635303 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.04969 @ 95%CL (1 toyMC)
median expected limit: r < 4.04969 @ 95%CL (1 toyMC)
   68% expected band : 4.04969 < r < 4.04969
   95% expected band : 4.04969 < r < 4.04969
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1935121103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.51843 +/- 0.00648921 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.51843 @ 95%CL (1 toyMC)
median expected limit: r < 2.51843 @ 95%CL (1 toyMC)
   68% expected band : 2.51843 < r < 2.51843
   95% expected band : 2.51843 < r < 2.51843
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1403636415
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.23638 +/- 0.00561778 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.23638 @ 95%CL (1 toyMC)
median expected limit: r < 2.23638 @ 95%CL (1 toyMC)
   68% expected band : 2.23638 < r < 2.23638
   95% expected band : 2.23638 < r < 2.23638
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 580371054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54052 +/- 0.00817576 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.54052 @ 95%CL (1 toyMC)
median expected limit: r < 2.54052 @ 95%CL (1 toyMC)
   68% expected band : 2.54052 < r < 2.54052
   95% expected band : 2.54052 < r < 2.54052
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 264974354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.13927 +/- 0.00850511 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.13927 @ 95%CL (1 toyMC)
median expected limit: r < 5.13927 @ 95%CL (1 toyMC)
   68% expected band : 5.13927 < r < 5.13927
   95% expected band : 5.13927 < r < 5.13927
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1789271807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62681 +/- 0.00558719 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.62681 @ 95%CL (1 toyMC)
median expected limit: r < 2.62681 @ 95%CL (1 toyMC)
   68% expected band : 2.62681 < r < 2.62681
   95% expected band : 2.62681 < r < 2.62681
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -26144548
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2793 +/- 0.00578675 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.2793 @ 95%CL (1 toyMC)
median expected limit: r < 2.2793 @ 95%CL (1 toyMC)
   68% expected band : 2.2793 < r < 2.2793
   95% expected band : 2.2793 < r < 2.2793
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -597978856
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40964 +/- 0.0056934 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.40964 @ 95%CL (1 toyMC)
median expected limit: r < 2.40964 @ 95%CL (1 toyMC)
   68% expected band : 2.40964 < r < 2.40964
   95% expected band : 2.40964 < r < 2.40964
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1510180541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17319 +/- 0.00555941 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.17319 @ 95%CL (1 toyMC)
median expected limit: r < 2.17319 @ 95%CL (1 toyMC)
   68% expected band : 2.17319 < r < 2.17319
   95% expected band : 2.17319 < r < 2.17319
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -270901928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.84795 +/- 0.00518283 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.84795 @ 95%CL (1 toyMC)
median expected limit: r < 2.84795 @ 95%CL (1 toyMC)
   68% expected band : 2.84795 < r < 2.84795
   95% expected band : 2.84795 < r < 2.84795
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1488440741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46573 +/- 0.00576627 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.46573 @ 95%CL (1 toyMC)
median expected limit: r < 2.46573 @ 95%CL (1 toyMC)
   68% expected band : 2.46573 < r < 2.46573
   95% expected band : 2.46573 < r < 2.46573
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 810482552
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27554 +/- 0.00605161 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.27554 @ 95%CL (1 toyMC)
median expected limit: r < 2.27554 @ 95%CL (1 toyMC)
   68% expected band : 2.27554 < r < 2.27554
   95% expected band : 2.27554 < r < 2.27554
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1514078799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62489 +/- 0.00590699 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.62489 @ 95%CL (1 toyMC)
median expected limit: r < 2.62489 @ 95%CL (1 toyMC)
   68% expected band : 2.62489 < r < 2.62489
   95% expected band : 2.62489 < r < 2.62489
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1707952740
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29437 +/- 0.00522798 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.29437 @ 95%CL (1 toyMC)
median expected limit: r < 2.29437 @ 95%CL (1 toyMC)
   68% expected band : 2.29437 < r < 2.29437
   95% expected band : 2.29437 < r < 2.29437
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -30170786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.71619 +/- 0.0095061 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 6.71619 @ 95%CL (1 toyMC)
median expected limit: r < 6.71619 @ 95%CL (1 toyMC)
   68% expected band : 6.71619 < r < 6.71619
   95% expected band : 6.71619 < r < 6.71619
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1765842426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.3761 +/- 0.00590229 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.3761 @ 95%CL (1 toyMC)
median expected limit: r < 3.3761 @ 95%CL (1 toyMC)
   68% expected band : 3.3761 < r < 3.3761
   95% expected band : 3.3761 < r < 3.3761
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1013628017
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76415 +/- 0.00673408 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.76415 @ 95%CL (1 toyMC)
median expected limit: r < 2.76415 @ 95%CL (1 toyMC)
   68% expected band : 2.76415 < r < 2.76415
   95% expected band : 2.76415 < r < 2.76415
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1061163300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63856 +/- 0.00740404 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.63856 @ 95%CL (1 toyMC)
median expected limit: r < 2.63856 @ 95%CL (1 toyMC)
   68% expected band : 2.63856 < r < 2.63856
   95% expected band : 2.63856 < r < 2.63856
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 776355394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98681 +/- 0.0064396 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.98681 @ 95%CL (1 toyMC)
median expected limit: r < 2.98681 @ 95%CL (1 toyMC)
   68% expected band : 2.98681 < r < 2.98681
   95% expected band : 2.98681 < r < 2.98681
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 382013320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.19593 +/- 0.00562798 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.19593 @ 95%CL (1 toyMC)
median expected limit: r < 2.19593 @ 95%CL (1 toyMC)
   68% expected band : 2.19593 < r < 2.19593
   95% expected band : 2.19593 < r < 2.19593
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -382530376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.21391 +/- 0.0078486 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.21391 @ 95%CL (1 toyMC)
median expected limit: r < 3.21391 @ 95%CL (1 toyMC)
   68% expected band : 3.21391 < r < 3.21391
   95% expected band : 3.21391 < r < 3.21391
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 238285658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.02405 +/- 0.00530547 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.02405 @ 95%CL (1 toyMC)
median expected limit: r < 2.02405 @ 95%CL (1 toyMC)
   68% expected band : 2.02405 < r < 2.02405
   95% expected band : 2.02405 < r < 2.02405
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1040154508
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.75222 +/- 0.00597776 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.75222 @ 95%CL (1 toyMC)
median expected limit: r < 3.75222 @ 95%CL (1 toyMC)
   68% expected band : 3.75222 < r < 3.75222
   95% expected band : 3.75222 < r < 3.75222
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 503163019
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12922 +/- 0.00538434 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.12922 @ 95%CL (1 toyMC)
median expected limit: r < 2.12922 @ 95%CL (1 toyMC)
   68% expected band : 2.12922 < r < 2.12922
   95% expected band : 2.12922 < r < 2.12922
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1256981697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.00514 +/- 0.006846 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.00514 @ 95%CL (1 toyMC)
median expected limit: r < 3.00514 @ 95%CL (1 toyMC)
   68% expected band : 3.00514 < r < 3.00514
   95% expected band : 3.00514 < r < 3.00514
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 520071539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.15682 +/- 0.00527504 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.15682 @ 95%CL (1 toyMC)
median expected limit: r < 2.15682 @ 95%CL (1 toyMC)
   68% expected band : 2.15682 < r < 2.15682
   95% expected band : 2.15682 < r < 2.15682
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1000165639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.55069 +/- 0.0068232 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.55069 @ 95%CL (1 toyMC)
median expected limit: r < 2.55069 @ 95%CL (1 toyMC)
   68% expected band : 2.55069 < r < 2.55069
   95% expected band : 2.55069 < r < 2.55069
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -214918592
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.18575 +/- 0.00411283 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.18575 @ 95%CL (1 toyMC)
median expected limit: r < 2.18575 @ 95%CL (1 toyMC)
   68% expected band : 2.18575 < r < 2.18575
   95% expected band : 2.18575 < r < 2.18575
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1287269218
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13065 +/- 0.00498131 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.13065 @ 95%CL (1 toyMC)
median expected limit: r < 2.13065 @ 95%CL (1 toyMC)
   68% expected band : 2.13065 < r < 2.13065
   95% expected band : 2.13065 < r < 2.13065
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1590093916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65368 +/- 0.00667319 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.65368 @ 95%CL (1 toyMC)
median expected limit: r < 2.65368 @ 95%CL (1 toyMC)
   68% expected band : 2.65368 < r < 2.65368
   95% expected band : 2.65368 < r < 2.65368
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1218058733
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.32892 +/- 0.00644571 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.32892 @ 95%CL (1 toyMC)
median expected limit: r < 3.32892 @ 95%CL (1 toyMC)
   68% expected band : 3.32892 < r < 3.32892
   95% expected band : 3.32892 < r < 3.32892
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -542977181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42033 +/- 0.00554626 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.42033 @ 95%CL (1 toyMC)
median expected limit: r < 2.42033 @ 95%CL (1 toyMC)
   68% expected band : 2.42033 < r < 2.42033
   95% expected band : 2.42033 < r < 2.42033
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1976384276
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.20275 +/- 0.00748146 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.20275 @ 95%CL (1 toyMC)
median expected limit: r < 4.20275 @ 95%CL (1 toyMC)
   68% expected band : 4.20275 < r < 4.20275
   95% expected band : 4.20275 < r < 4.20275
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1494441022
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.51299 +/- 0.0103992 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 6.51299 @ 95%CL (1 toyMC)
median expected limit: r < 6.51299 @ 95%CL (1 toyMC)
   68% expected band : 6.51299 < r < 6.51299
   95% expected band : 6.51299 < r < 6.51299
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 871341758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.81823 +/- 0.0054313 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.81823 @ 95%CL (1 toyMC)
median expected limit: r < 2.81823 @ 95%CL (1 toyMC)
   68% expected band : 2.81823 < r < 2.81823
   95% expected band : 2.81823 < r < 2.81823
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 714437813
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37438 +/- 0.00665215 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.37438 @ 95%CL (1 toyMC)
median expected limit: r < 2.37438 @ 95%CL (1 toyMC)
   68% expected band : 2.37438 < r < 2.37438
   95% expected band : 2.37438 < r < 2.37438
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1943255565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.27678 +/- 0.00590987 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.27678 @ 95%CL (1 toyMC)
median expected limit: r < 4.27678 @ 95%CL (1 toyMC)
   68% expected band : 4.27678 < r < 4.27678
   95% expected band : 4.27678 < r < 4.27678
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1866195180
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76066 +/- 0.0078148 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.76066 @ 95%CL (1 toyMC)
median expected limit: r < 2.76066 @ 95%CL (1 toyMC)
   68% expected band : 2.76066 < r < 2.76066
   95% expected band : 2.76066 < r < 2.76066
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 794513054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92992 +/- 0.0059987 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.92992 @ 95%CL (1 toyMC)
median expected limit: r < 2.92992 @ 95%CL (1 toyMC)
   68% expected band : 2.92992 < r < 2.92992
   95% expected band : 2.92992 < r < 2.92992
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 608513858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43004 +/- 0.00526211 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.43004 @ 95%CL (1 toyMC)
median expected limit: r < 2.43004 @ 95%CL (1 toyMC)
   68% expected band : 2.43004 < r < 2.43004
   95% expected band : 2.43004 < r < 2.43004
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -695330654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52394 +/- 0.00611896 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.52394 @ 95%CL (1 toyMC)
median expected limit: r < 2.52394 @ 95%CL (1 toyMC)
   68% expected band : 2.52394 < r < 2.52394
   95% expected band : 2.52394 < r < 2.52394
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -132625305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.18871 +/- 0.00508482 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.18871 @ 95%CL (1 toyMC)
median expected limit: r < 2.18871 @ 95%CL (1 toyMC)
   68% expected band : 2.18871 < r < 2.18871
   95% expected band : 2.18871 < r < 2.18871
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1654287208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.97323 +/- 0.00662949 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.97323 @ 95%CL (1 toyMC)
median expected limit: r < 2.97323 @ 95%CL (1 toyMC)
   68% expected band : 2.97323 < r < 2.97323
   95% expected band : 2.97323 < r < 2.97323
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2057873620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.36712 +/- 0.00836142 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.36712 @ 95%CL (1 toyMC)
median expected limit: r < 3.36712 @ 95%CL (1 toyMC)
   68% expected band : 3.36712 < r < 3.36712
   95% expected band : 3.36712 < r < 3.36712
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1417443314
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5392 +/- 0.00651822 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.5392 @ 95%CL (1 toyMC)
median expected limit: r < 2.5392 @ 95%CL (1 toyMC)
   68% expected band : 2.5392 < r < 2.5392
   95% expected band : 2.5392 < r < 2.5392
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1512587096
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47912 +/- 0.00576739 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.47912 @ 95%CL (1 toyMC)
median expected limit: r < 2.47912 @ 95%CL (1 toyMC)
   68% expected band : 2.47912 < r < 2.47912
   95% expected band : 2.47912 < r < 2.47912
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1785434854
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12079 +/- 0.00738765 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.12079 @ 95%CL (1 toyMC)
median expected limit: r < 3.12079 @ 95%CL (1 toyMC)
   68% expected band : 3.12079 < r < 3.12079
   95% expected band : 3.12079 < r < 3.12079
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 154604622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.38311 +/- 0.00512715 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.38311 @ 95%CL (1 toyMC)
median expected limit: r < 2.38311 @ 95%CL (1 toyMC)
   68% expected band : 2.38311 < r < 2.38311
   95% expected band : 2.38311 < r < 2.38311
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2006800509
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2825 +/- 0.00556875 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.2825 @ 95%CL (1 toyMC)
median expected limit: r < 2.2825 @ 95%CL (1 toyMC)
   68% expected band : 2.2825 < r < 2.2825
   95% expected band : 2.2825 < r < 2.2825
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2123160913
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.79288 +/- 0.00951837 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.79288 @ 95%CL (1 toyMC)
median expected limit: r < 4.79288 @ 95%CL (1 toyMC)
   68% expected band : 4.79288 < r < 4.79288
   95% expected band : 4.79288 < r < 4.79288
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1302256457
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04227 +/- 0.00588164 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.04227 @ 95%CL (1 toyMC)
median expected limit: r < 2.04227 @ 95%CL (1 toyMC)
   68% expected band : 2.04227 < r < 2.04227
   95% expected band : 2.04227 < r < 2.04227
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1435988117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.80679 +/- 0.00569727 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.80679 @ 95%CL (1 toyMC)
median expected limit: r < 2.80679 @ 95%CL (1 toyMC)
   68% expected band : 2.80679 < r < 2.80679
   95% expected band : 2.80679 < r < 2.80679
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1956390204
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.41294 +/- 0.00639852 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.41294 @ 95%CL (1 toyMC)
median expected limit: r < 3.41294 @ 95%CL (1 toyMC)
   68% expected band : 3.41294 < r < 3.41294
   95% expected band : 3.41294 < r < 3.41294
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1513253830
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.4219 +/- 0.00650704 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.4219 @ 95%CL (1 toyMC)
median expected limit: r < 4.4219 @ 95%CL (1 toyMC)
   68% expected band : 4.4219 < r < 4.4219
   95% expected band : 4.4219 < r < 4.4219
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -228863700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.01877 +/- 0.00627493 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.01877 @ 95%CL (1 toyMC)
median expected limit: r < 3.01877 @ 95%CL (1 toyMC)
   68% expected band : 3.01877 < r < 3.01877
   95% expected band : 3.01877 < r < 3.01877
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -685858447
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.85204 +/- 0.00637206 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.85204 @ 95%CL (1 toyMC)
median expected limit: r < 2.85204 @ 95%CL (1 toyMC)
   68% expected band : 2.85204 < r < 2.85204
   95% expected band : 2.85204 < r < 2.85204
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1125479309
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.89693 +/- 0.00705038 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.89693 @ 95%CL (1 toyMC)
median expected limit: r < 4.89693 @ 95%CL (1 toyMC)
   68% expected band : 4.89693 < r < 4.89693
   95% expected band : 4.89693 < r < 4.89693
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1379350551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22151 +/- 0.00612483 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.22151 @ 95%CL (1 toyMC)
median expected limit: r < 3.22151 @ 95%CL (1 toyMC)
   68% expected band : 3.22151 < r < 3.22151
   95% expected band : 3.22151 < r < 3.22151
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1008169205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.41484 +/- 0.00600173 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.41484 @ 95%CL (1 toyMC)
median expected limit: r < 2.41484 @ 95%CL (1 toyMC)
   68% expected band : 2.41484 < r < 2.41484
   95% expected band : 2.41484 < r < 2.41484
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 309680843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.28534 +/- 0.00698776 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.28534 @ 95%CL (1 toyMC)
median expected limit: r < 4.28534 @ 95%CL (1 toyMC)
   68% expected band : 4.28534 < r < 4.28534
   95% expected band : 4.28534 < r < 4.28534
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1432415704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8606 +/- 0.00745081 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.8606 @ 95%CL (1 toyMC)
median expected limit: r < 2.8606 @ 95%CL (1 toyMC)
   68% expected band : 2.8606 < r < 2.8606
   95% expected band : 2.8606 < r < 2.8606
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2032850468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.19926 +/- 0.00583928 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.19926 @ 95%CL (1 toyMC)
median expected limit: r < 3.19926 @ 95%CL (1 toyMC)
   68% expected band : 3.19926 < r < 3.19926
   95% expected band : 3.19926 < r < 3.19926
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -565801015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22677 +/- 0.00701508 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.22677 @ 95%CL (1 toyMC)
median expected limit: r < 3.22677 @ 95%CL (1 toyMC)
   68% expected band : 3.22677 < r < 3.22677
   95% expected band : 3.22677 < r < 3.22677
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 83346727
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33135 +/- 0.00543997 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.33135 @ 95%CL (1 toyMC)
median expected limit: r < 2.33135 @ 95%CL (1 toyMC)
   68% expected band : 2.33135 < r < 2.33135
   95% expected band : 2.33135 < r < 2.33135
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1389918016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.21548 +/- 0.0050308 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.21548 @ 95%CL (1 toyMC)
median expected limit: r < 2.21548 @ 95%CL (1 toyMC)
   68% expected band : 2.21548 < r < 2.21548
   95% expected band : 2.21548 < r < 2.21548
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 503702746
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.86331 +/- 0.00645185 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.86331 @ 95%CL (1 toyMC)
median expected limit: r < 3.86331 @ 95%CL (1 toyMC)
   68% expected band : 3.86331 < r < 3.86331
   95% expected band : 3.86331 < r < 3.86331
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 985966122
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.14387 +/- 0.00682455 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.14387 @ 95%CL (1 toyMC)
median expected limit: r < 3.14387 @ 95%CL (1 toyMC)
   68% expected band : 3.14387 < r < 3.14387
   95% expected band : 3.14387 < r < 3.14387
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1499163007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.70308 +/- 0.00617873 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.70308 @ 95%CL (1 toyMC)
median expected limit: r < 2.70308 @ 95%CL (1 toyMC)
   68% expected band : 2.70308 < r < 2.70308
   95% expected band : 2.70308 < r < 2.70308
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1492005804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.48761 +/- 0.00468051 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.48761 @ 95%CL (1 toyMC)
median expected limit: r < 2.48761 @ 95%CL (1 toyMC)
   68% expected band : 2.48761 < r < 2.48761
   95% expected band : 2.48761 < r < 2.48761
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1947645812
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.75035 +/- 0.00671076 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.75035 @ 95%CL (1 toyMC)
median expected limit: r < 4.75035 @ 95%CL (1 toyMC)
   68% expected band : 4.75035 < r < 4.75035
   95% expected band : 4.75035 < r < 4.75035
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1339432653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.90511 +/- 0.00604088 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.90511 @ 95%CL (1 toyMC)
median expected limit: r < 1.90511 @ 95%CL (1 toyMC)
   68% expected band : 1.90511 < r < 1.90511
   95% expected band : 1.90511 < r < 1.90511
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1633159762
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.15848 +/- 0.00559442 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.15848 @ 95%CL (1 toyMC)
median expected limit: r < 2.15848 @ 95%CL (1 toyMC)
   68% expected band : 2.15848 < r < 2.15848
   95% expected band : 2.15848 < r < 2.15848
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 386346516
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.9329 +/- 0.00682618 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.9329 @ 95%CL (1 toyMC)
median expected limit: r < 3.9329 @ 95%CL (1 toyMC)
   68% expected band : 3.9329 < r < 3.9329
   95% expected band : 3.9329 < r < 3.9329
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 184953021
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.73351 +/- 0.00542312 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.73351 @ 95%CL (1 toyMC)
median expected limit: r < 3.73351 @ 95%CL (1 toyMC)
   68% expected band : 3.73351 < r < 3.73351
   95% expected band : 3.73351 < r < 3.73351
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -332689879
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.37003 +/- 0.00711973 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.37003 @ 95%CL (1 toyMC)
median expected limit: r < 4.37003 @ 95%CL (1 toyMC)
   68% expected band : 4.37003 < r < 4.37003
   95% expected band : 4.37003 < r < 4.37003
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 856908442
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33627 +/- 0.00507283 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.33627 @ 95%CL (1 toyMC)
median expected limit: r < 2.33627 @ 95%CL (1 toyMC)
   68% expected band : 2.33627 < r < 2.33627
   95% expected band : 2.33627 < r < 2.33627
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 58027339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63416 +/- 0.00723101 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.63416 @ 95%CL (1 toyMC)
median expected limit: r < 3.63416 @ 95%CL (1 toyMC)
   68% expected band : 3.63416 < r < 3.63416
   95% expected band : 3.63416 < r < 3.63416
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1481453441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.89124 +/- 0.00682384 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.89124 @ 95%CL (1 toyMC)
median expected limit: r < 2.89124 @ 95%CL (1 toyMC)
   68% expected band : 2.89124 < r < 2.89124
   95% expected band : 2.89124 < r < 2.89124
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1168543046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.15608 +/- 0.00661785 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.15608 @ 95%CL (1 toyMC)
median expected limit: r < 2.15608 @ 95%CL (1 toyMC)
   68% expected band : 2.15608 < r < 2.15608
   95% expected band : 2.15608 < r < 2.15608
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1008169205.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1013628017.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1033120873.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1040154508.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1061163300.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1218058733.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1242683192.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1256981697.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1277368880.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1287269218.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-132625305.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1339432653.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1347654789.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1379350551.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1389918016.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1403636415.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1417443314.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1432415704.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1492005804.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1510180541.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1512587096.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1584557266.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1612305052.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1707952740.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1765842426.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1866195180.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-1867653817.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-1899513973.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-1956390204.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-2006800509.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-2090692421.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-2123160913.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-214918592.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-228863700.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-26144548.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-270901928.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-30170786.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-332689879.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-382530376.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-416538419.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-542977181.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-565801015.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-567317940.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-597978856.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-685858447.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-695330654.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.1000165639.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.1070351996.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.1125479309.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.1142873428.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.1168543046.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1302256457.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1435988117.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1481453441.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1488440741.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1494441022.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1499163007.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1513253830.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1514078799.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.154604622.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1590093916.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1633159762.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1654287208.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1736627884.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1762911080.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1785434854.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1789271807.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.184953021.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1935121103.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1943255565.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1947645812.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1976384276.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.197647188.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.197715305.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.2032850468.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.2057873620.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.238285658.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.264974354.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.273733679.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.309680843.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.382013320.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.386346516.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.503163019.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.503702746.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.520071539.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.532257945.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.533602093.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.58027339.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.580371054.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.608513858.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.714437813.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.776355394.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.794513054.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.810482552.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.83346727.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.856908442.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.859393683.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.871341758.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.913830695.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.985966122.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 447816930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90688 +/- 0.00569954 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.90688 @ 95%CL (1 toyMC)
median expected limit: r < 2.90688 @ 95%CL (1 toyMC)
   68% expected band : 2.90688 < r < 2.90688
   95% expected band : 2.90688 < r < 2.90688
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1976936460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.54744 +/- 0.00910357 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.54744 @ 95%CL (1 toyMC)
median expected limit: r < 4.54744 @ 95%CL (1 toyMC)
   68% expected band : 4.54744 < r < 4.54744
   95% expected band : 4.54744 < r < 4.54744
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1453700785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.97236 +/- 0.00656931 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.97236 @ 95%CL (1 toyMC)
median expected limit: r < 2.97236 @ 95%CL (1 toyMC)
   68% expected band : 2.97236 < r < 2.97236
   95% expected band : 2.97236 < r < 2.97236
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 956397318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12445 +/- 0.00770668 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.12445 @ 95%CL (1 toyMC)
median expected limit: r < 3.12445 @ 95%CL (1 toyMC)
   68% expected band : 3.12445 < r < 3.12445
   95% expected band : 3.12445 < r < 3.12445
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2103257022
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1444 +/- 0.00667381 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.1444 @ 95%CL (1 toyMC)
median expected limit: r < 3.1444 @ 95%CL (1 toyMC)
   68% expected band : 3.1444 < r < 3.1444
   95% expected band : 3.1444 < r < 3.1444
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 415658663
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4737 +/- 0.00640104 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.4737 @ 95%CL (1 toyMC)
median expected limit: r < 2.4737 @ 95%CL (1 toyMC)
   68% expected band : 2.4737 < r < 2.4737
   95% expected band : 2.4737 < r < 2.4737
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1909850436
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.89446 +/- 0.00656645 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.89446 @ 95%CL (1 toyMC)
median expected limit: r < 4.89446 @ 95%CL (1 toyMC)
   68% expected band : 4.89446 < r < 4.89446
   95% expected band : 4.89446 < r < 4.89446
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 860961273
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91928 +/- 0.00556861 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.91928 @ 95%CL (1 toyMC)
median expected limit: r < 2.91928 @ 95%CL (1 toyMC)
   68% expected band : 2.91928 < r < 2.91928
   95% expected band : 2.91928 < r < 2.91928
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -103949082
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.69827 +/- 0.00537078 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.69827 @ 95%CL (1 toyMC)
median expected limit: r < 2.69827 @ 95%CL (1 toyMC)
   68% expected band : 2.69827 < r < 2.69827
   95% expected band : 2.69827 < r < 2.69827
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1643752234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.94175 +/- 0.0066503 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.94175 @ 95%CL (1 toyMC)
median expected limit: r < 2.94175 @ 95%CL (1 toyMC)
   68% expected band : 2.94175 < r < 2.94175
   95% expected band : 2.94175 < r < 2.94175
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2048010018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.81515 +/- 0.0068262 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.81515 @ 95%CL (1 toyMC)
median expected limit: r < 2.81515 @ 95%CL (1 toyMC)
   68% expected band : 2.81515 < r < 2.81515
   95% expected band : 2.81515 < r < 2.81515
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 710449655
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89264 +/- 0.00659437 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.89264 @ 95%CL (1 toyMC)
median expected limit: r < 3.89264 @ 95%CL (1 toyMC)
   68% expected band : 3.89264 < r < 3.89264
   95% expected band : 3.89264 < r < 3.89264
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -278019295
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.21787 +/- 0.00540903 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.21787 @ 95%CL (1 toyMC)
median expected limit: r < 2.21787 @ 95%CL (1 toyMC)
   68% expected band : 2.21787 < r < 2.21787
   95% expected band : 2.21787 < r < 2.21787
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 269951878
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.81155 +/- 0.0069999 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.81155 @ 95%CL (1 toyMC)
median expected limit: r < 3.81155 @ 95%CL (1 toyMC)
   68% expected band : 3.81155 < r < 3.81155
   95% expected band : 3.81155 < r < 3.81155
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2068835128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.14823 +/- 0.00575642 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.14823 @ 95%CL (1 toyMC)
median expected limit: r < 3.14823 @ 95%CL (1 toyMC)
   68% expected band : 3.14823 < r < 3.14823
   95% expected band : 3.14823 < r < 3.14823
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 400203834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06227 +/- 0.00603887 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.06227 @ 95%CL (1 toyMC)
median expected limit: r < 3.06227 @ 95%CL (1 toyMC)
   68% expected band : 3.06227 < r < 3.06227
   95% expected band : 3.06227 < r < 3.06227
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2061672138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.86177 +/- 0.00642506 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.86177 @ 95%CL (1 toyMC)
median expected limit: r < 3.86177 @ 95%CL (1 toyMC)
   68% expected band : 3.86177 < r < 3.86177
   95% expected band : 3.86177 < r < 3.86177
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1007552843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66674 +/- 0.00794492 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.66674 @ 95%CL (1 toyMC)
median expected limit: r < 3.66674 @ 95%CL (1 toyMC)
   68% expected band : 3.66674 < r < 3.66674
   95% expected band : 3.66674 < r < 3.66674
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1587221332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.99277 +/- 0.00754035 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.99277 @ 95%CL (1 toyMC)
median expected limit: r < 4.99277 @ 95%CL (1 toyMC)
   68% expected band : 4.99277 < r < 4.99277
   95% expected band : 4.99277 < r < 4.99277
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1538859297
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23418 +/- 0.00646408 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.23418 @ 95%CL (1 toyMC)
median expected limit: r < 3.23418 @ 95%CL (1 toyMC)
   68% expected band : 3.23418 < r < 3.23418
   95% expected band : 3.23418 < r < 3.23418
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 739370806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29628 +/- 0.0068699 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.29628 @ 95%CL (1 toyMC)
median expected limit: r < 2.29628 @ 95%CL (1 toyMC)
   68% expected band : 2.29628 < r < 2.29628
   95% expected band : 2.29628 < r < 2.29628
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 427143206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49721 +/- 0.00627887 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.49721 @ 95%CL (1 toyMC)
median expected limit: r < 2.49721 @ 95%CL (1 toyMC)
   68% expected band : 2.49721 < r < 2.49721
   95% expected band : 2.49721 < r < 2.49721
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1130384013
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39717 +/- 0.00539383 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.39717 @ 95%CL (1 toyMC)
median expected limit: r < 2.39717 @ 95%CL (1 toyMC)
   68% expected band : 2.39717 < r < 2.39717
   95% expected band : 2.39717 < r < 2.39717
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1687364482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.83339 +/- 0.00667121 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.83339 @ 95%CL (1 toyMC)
median expected limit: r < 2.83339 @ 95%CL (1 toyMC)
   68% expected band : 2.83339 < r < 2.83339
   95% expected band : 2.83339 < r < 2.83339
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1675457371
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.9992 +/- 0.00646022 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.9992 @ 95%CL (1 toyMC)
median expected limit: r < 2.9992 @ 95%CL (1 toyMC)
   68% expected band : 2.9992 < r < 2.9992
   95% expected band : 2.9992 < r < 2.9992
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 637069693
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.1408 +/- 0.00533835 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.1408 @ 95%CL (1 toyMC)
median expected limit: r < 2.1408 @ 95%CL (1 toyMC)
   68% expected band : 2.1408 < r < 2.1408
   95% expected band : 2.1408 < r < 2.1408
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 34653556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67822 +/- 0.0064456 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.67822 @ 95%CL (1 toyMC)
median expected limit: r < 2.67822 @ 95%CL (1 toyMC)
   68% expected band : 2.67822 < r < 2.67822
   95% expected band : 2.67822 < r < 2.67822
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 570618205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.73292 +/- 0.00715814 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.73292 @ 95%CL (1 toyMC)
median expected limit: r < 2.73292 @ 95%CL (1 toyMC)
   68% expected band : 2.73292 < r < 2.73292
   95% expected band : 2.73292 < r < 2.73292
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -326615435
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.92647 +/- 0.00881146 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.92647 @ 95%CL (1 toyMC)
median expected limit: r < 4.92647 @ 95%CL (1 toyMC)
   68% expected band : 4.92647 < r < 4.92647
   95% expected band : 4.92647 < r < 4.92647
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1022294488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93749 +/- 0.00754926 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.93749 @ 95%CL (1 toyMC)
median expected limit: r < 3.93749 @ 95%CL (1 toyMC)
   68% expected band : 3.93749 < r < 3.93749
   95% expected band : 3.93749 < r < 3.93749
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -431365560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32885 +/- 0.0054728 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.32885 @ 95%CL (1 toyMC)
median expected limit: r < 2.32885 @ 95%CL (1 toyMC)
   68% expected band : 2.32885 < r < 2.32885
   95% expected band : 2.32885 < r < 2.32885
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -376845016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.38837 +/- 0.00689017 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.38837 @ 95%CL (1 toyMC)
median expected limit: r < 2.38837 @ 95%CL (1 toyMC)
   68% expected band : 2.38837 < r < 2.38837
   95% expected band : 2.38837 < r < 2.38837
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1843032179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.76111 +/- 0.00667536 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.76111 @ 95%CL (1 toyMC)
median expected limit: r < 4.76111 @ 95%CL (1 toyMC)
   68% expected band : 4.76111 < r < 4.76111
   95% expected band : 4.76111 < r < 4.76111
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -199672398
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33649 +/- 0.00573982 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.33649 @ 95%CL (1 toyMC)
median expected limit: r < 2.33649 @ 95%CL (1 toyMC)
   68% expected band : 2.33649 < r < 2.33649
   95% expected band : 2.33649 < r < 2.33649
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -769115628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.01642 +/- 0.00590135 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.01642 @ 95%CL (1 toyMC)
median expected limit: r < 3.01642 @ 95%CL (1 toyMC)
   68% expected band : 3.01642 < r < 3.01642
   95% expected band : 3.01642 < r < 3.01642
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1453097999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.19663 +/- 0.00780601 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.19663 @ 95%CL (1 toyMC)
median expected limit: r < 6.19663 @ 95%CL (1 toyMC)
   68% expected band : 6.19663 < r < 6.19663
   95% expected band : 6.19663 < r < 6.19663
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1264443653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.54884 +/- 0.00560824 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.54884 @ 95%CL (1 toyMC)
median expected limit: r < 3.54884 @ 95%CL (1 toyMC)
   68% expected band : 3.54884 < r < 3.54884
   95% expected band : 3.54884 < r < 3.54884
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 811723915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90959 +/- 0.00662293 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.90959 @ 95%CL (1 toyMC)
median expected limit: r < 2.90959 @ 95%CL (1 toyMC)
   68% expected band : 2.90959 < r < 2.90959
   95% expected band : 2.90959 < r < 2.90959
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1153789894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.99276 +/- 0.00814544 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.99276 @ 95%CL (1 toyMC)
median expected limit: r < 4.99276 @ 95%CL (1 toyMC)
   68% expected band : 4.99276 < r < 4.99276
   95% expected band : 4.99276 < r < 4.99276
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1244413654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.3291 +/- 0.00593082 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.3291 @ 95%CL (1 toyMC)
median expected limit: r < 4.3291 @ 95%CL (1 toyMC)
   68% expected band : 4.3291 < r < 4.3291
   95% expected band : 4.3291 < r < 4.3291
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1681706884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37015 +/- 0.00769368 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.37015 @ 95%CL (1 toyMC)
median expected limit: r < 2.37015 @ 95%CL (1 toyMC)
   68% expected band : 2.37015 < r < 2.37015
   95% expected band : 2.37015 < r < 2.37015
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1407335317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93902 +/- 0.00563523 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.93902 @ 95%CL (1 toyMC)
median expected limit: r < 2.93902 @ 95%CL (1 toyMC)
   68% expected band : 2.93902 < r < 2.93902
   95% expected band : 2.93902 < r < 2.93902
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1758347336
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.05319 +/- 0.00723034 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.05319 @ 95%CL (1 toyMC)
median expected limit: r < 4.05319 @ 95%CL (1 toyMC)
   68% expected band : 4.05319 < r < 4.05319
   95% expected band : 4.05319 < r < 4.05319
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 462232293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.71881 +/- 0.00720364 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.71881 @ 95%CL (1 toyMC)
median expected limit: r < 2.71881 @ 95%CL (1 toyMC)
   68% expected band : 2.71881 < r < 2.71881
   95% expected band : 2.71881 < r < 2.71881
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1717321659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.13814 +/- 0.00639701 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.13814 @ 95%CL (1 toyMC)
median expected limit: r < 4.13814 @ 95%CL (1 toyMC)
   68% expected band : 4.13814 < r < 4.13814
   95% expected band : 4.13814 < r < 4.13814
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1965353348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53227 +/- 0.00598736 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.53227 @ 95%CL (1 toyMC)
median expected limit: r < 2.53227 @ 95%CL (1 toyMC)
   68% expected band : 2.53227 < r < 2.53227
   95% expected band : 2.53227 < r < 2.53227
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 256304827
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6277 +/- 0.00631421 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.6277 @ 95%CL (1 toyMC)
median expected limit: r < 3.6277 @ 95%CL (1 toyMC)
   68% expected band : 3.6277 < r < 3.6277
   95% expected band : 3.6277 < r < 3.6277
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -388810385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8441 +/- 0.00626429 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.8441 @ 95%CL (1 toyMC)
median expected limit: r < 2.8441 @ 95%CL (1 toyMC)
   68% expected band : 2.8441 < r < 2.8441
   95% expected band : 2.8441 < r < 2.8441
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -901025262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.68576 +/- 0.00538045 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.68576 @ 95%CL (1 toyMC)
median expected limit: r < 3.68576 @ 95%CL (1 toyMC)
   68% expected band : 3.68576 < r < 3.68576
   95% expected band : 3.68576 < r < 3.68576
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1650337095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.117 +/- 0.00556097 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.117 @ 95%CL (1 toyMC)
median expected limit: r < 2.117 @ 95%CL (1 toyMC)
   68% expected band : 2.117 < r < 2.117
   95% expected band : 2.117 < r < 2.117
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 916810089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.3323 +/- 0.00640367 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.3323 @ 95%CL (1 toyMC)
median expected limit: r < 2.3323 @ 95%CL (1 toyMC)
   68% expected band : 2.3323 < r < 2.3323
   95% expected band : 2.3323 < r < 2.3323
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1220073854
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98879 +/- 0.00601539 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.98879 @ 95%CL (1 toyMC)
median expected limit: r < 2.98879 @ 95%CL (1 toyMC)
   68% expected band : 2.98879 < r < 2.98879
   95% expected band : 2.98879 < r < 2.98879
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 883752670
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.68528 +/- 0.00719386 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.68528 @ 95%CL (1 toyMC)
median expected limit: r < 3.68528 @ 95%CL (1 toyMC)
   68% expected band : 3.68528 < r < 3.68528
   95% expected band : 3.68528 < r < 3.68528
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1428877285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.31162 +/- 0.00513648 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.31162 @ 95%CL (1 toyMC)
median expected limit: r < 2.31162 @ 95%CL (1 toyMC)
   68% expected band : 2.31162 < r < 2.31162
   95% expected band : 2.31162 < r < 2.31162
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1191015794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.95464 +/- 0.00837572 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.95464 @ 95%CL (1 toyMC)
median expected limit: r < 4.95464 @ 95%CL (1 toyMC)
   68% expected band : 4.95464 < r < 4.95464
   95% expected band : 4.95464 < r < 4.95464
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1707850501
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.28716 +/- 0.00639106 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.28716 @ 95%CL (1 toyMC)
median expected limit: r < 3.28716 @ 95%CL (1 toyMC)
   68% expected band : 3.28716 < r < 3.28716
   95% expected band : 3.28716 < r < 3.28716
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1428972052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.80546 +/- 0.006142 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.80546 @ 95%CL (1 toyMC)
median expected limit: r < 4.80546 @ 95%CL (1 toyMC)
   68% expected band : 4.80546 < r < 4.80546
   95% expected band : 4.80546 < r < 4.80546
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -533651727
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32353 +/- 0.00502576 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.32353 @ 95%CL (1 toyMC)
median expected limit: r < 2.32353 @ 95%CL (1 toyMC)
   68% expected band : 2.32353 < r < 2.32353
   95% expected band : 2.32353 < r < 2.32353
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -853785116
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.49253 +/- 0.00741015 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.49253 @ 95%CL (1 toyMC)
median expected limit: r < 3.49253 @ 95%CL (1 toyMC)
   68% expected band : 3.49253 < r < 3.49253
   95% expected band : 3.49253 < r < 3.49253
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1103104644
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.81865 +/- 0.00742489 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.81865 @ 95%CL (1 toyMC)
median expected limit: r < 3.81865 @ 95%CL (1 toyMC)
   68% expected band : 3.81865 < r < 3.81865
   95% expected band : 3.81865 < r < 3.81865
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2022587943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99864 +/- 0.00651074 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.99864 @ 95%CL (1 toyMC)
median expected limit: r < 1.99864 @ 95%CL (1 toyMC)
   68% expected band : 1.99864 < r < 1.99864
   95% expected band : 1.99864 < r < 1.99864
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 577848115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.27924 +/- 0.00602425 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.27924 @ 95%CL (1 toyMC)
median expected limit: r < 4.27924 @ 95%CL (1 toyMC)
   68% expected band : 4.27924 < r < 4.27924
   95% expected band : 4.27924 < r < 4.27924
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 370263784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37034 +/- 0.00615803 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.37034 @ 95%CL (1 toyMC)
median expected limit: r < 2.37034 @ 95%CL (1 toyMC)
   68% expected band : 2.37034 < r < 2.37034
   95% expected band : 2.37034 < r < 2.37034
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1165885274
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49129 +/- 0.00539811 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.49129 @ 95%CL (1 toyMC)
median expected limit: r < 2.49129 @ 95%CL (1 toyMC)
   68% expected band : 2.49129 < r < 2.49129
   95% expected band : 2.49129 < r < 2.49129
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1445270002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40978 +/- 0.00610003 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.40978 @ 95%CL (1 toyMC)
median expected limit: r < 2.40978 @ 95%CL (1 toyMC)
   68% expected band : 2.40978 < r < 2.40978
   95% expected band : 2.40978 < r < 2.40978
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1131664646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1712 +/- 0.00599006 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.1712 @ 95%CL (1 toyMC)
median expected limit: r < 3.1712 @ 95%CL (1 toyMC)
   68% expected band : 3.1712 < r < 3.1712
   95% expected band : 3.1712 < r < 3.1712
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2052849574
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.68663 +/- 0.00662657 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.68663 @ 95%CL (1 toyMC)
median expected limit: r < 2.68663 @ 95%CL (1 toyMC)
   68% expected band : 2.68663 < r < 2.68663
   95% expected band : 2.68663 < r < 2.68663
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1331110295
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.55204 +/- 0.00554459 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.55204 @ 95%CL (1 toyMC)
median expected limit: r < 2.55204 @ 95%CL (1 toyMC)
   68% expected band : 2.55204 < r < 2.55204
   95% expected band : 2.55204 < r < 2.55204
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 286681999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.18836 +/- 0.00668506 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.18836 @ 95%CL (1 toyMC)
median expected limit: r < 3.18836 @ 95%CL (1 toyMC)
   68% expected band : 3.18836 < r < 3.18836
   95% expected band : 3.18836 < r < 3.18836
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1454144272
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54437 +/- 0.00510434 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.54437 @ 95%CL (1 toyMC)
median expected limit: r < 2.54437 @ 95%CL (1 toyMC)
   68% expected band : 2.54437 < r < 2.54437
   95% expected band : 2.54437 < r < 2.54437
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 899725770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44807 +/- 0.00611268 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.44807 @ 95%CL (1 toyMC)
median expected limit: r < 3.44807 @ 95%CL (1 toyMC)
   68% expected band : 3.44807 < r < 3.44807
   95% expected band : 3.44807 < r < 3.44807
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 745161094
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.62594 +/- 0.00806587 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.62594 @ 95%CL (1 toyMC)
median expected limit: r < 6.62594 @ 95%CL (1 toyMC)
   68% expected band : 6.62594 < r < 6.62594
   95% expected band : 6.62594 < r < 6.62594
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1307853697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.34554 +/- 0.00833194 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.34554 @ 95%CL (1 toyMC)
median expected limit: r < 5.34554 @ 95%CL (1 toyMC)
   68% expected band : 5.34554 < r < 5.34554
   95% expected band : 5.34554 < r < 5.34554
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1714864977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.71953 +/- 0.00649907 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.71953 @ 95%CL (1 toyMC)
median expected limit: r < 2.71953 @ 95%CL (1 toyMC)
   68% expected band : 2.71953 < r < 2.71953
   95% expected band : 2.71953 < r < 2.71953
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 939664691
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1654 +/- 0.00601861 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.1654 @ 95%CL (1 toyMC)
median expected limit: r < 3.1654 @ 95%CL (1 toyMC)
   68% expected band : 3.1654 < r < 3.1654
   95% expected band : 3.1654 < r < 3.1654
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 292331499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.62755 +/- 0.00737304 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.62755 @ 95%CL (1 toyMC)
median expected limit: r < 3.62755 @ 95%CL (1 toyMC)
   68% expected band : 3.62755 < r < 3.62755
   95% expected band : 3.62755 < r < 3.62755
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1859112494
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43146 +/- 0.00570766 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.43146 @ 95%CL (1 toyMC)
median expected limit: r < 2.43146 @ 95%CL (1 toyMC)
   68% expected band : 2.43146 < r < 2.43146
   95% expected band : 2.43146 < r < 2.43146
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1794255626
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.1911 +/- 0.00686301 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.1911 @ 95%CL (1 toyMC)
median expected limit: r < 5.1911 @ 95%CL (1 toyMC)
   68% expected band : 5.1911 < r < 5.1911
   95% expected band : 5.1911 < r < 5.1911
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1382779183
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99933 +/- 0.00700191 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.99933 @ 95%CL (1 toyMC)
median expected limit: r < 2.99933 @ 95%CL (1 toyMC)
   68% expected band : 2.99933 < r < 2.99933
   95% expected band : 2.99933 < r < 2.99933
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 148566209
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4194 +/- 0.00680679 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.4194 @ 95%CL (1 toyMC)
median expected limit: r < 2.4194 @ 95%CL (1 toyMC)
   68% expected band : 2.4194 < r < 2.4194
   95% expected band : 2.4194 < r < 2.4194
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 808112380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.69144 +/- 0.00584375 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.69144 @ 95%CL (1 toyMC)
median expected limit: r < 2.69144 @ 95%CL (1 toyMC)
   68% expected band : 2.69144 < r < 2.69144
   95% expected band : 2.69144 < r < 2.69144
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -344325131
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1381 +/- 0.00764424 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.1381 @ 95%CL (1 toyMC)
median expected limit: r < 3.1381 @ 95%CL (1 toyMC)
   68% expected band : 3.1381 < r < 3.1381
   95% expected band : 3.1381 < r < 3.1381
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2018665198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79021 +/- 0.00688878 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.79021 @ 95%CL (1 toyMC)
median expected limit: r < 2.79021 @ 95%CL (1 toyMC)
   68% expected band : 2.79021 < r < 2.79021
   95% expected band : 2.79021 < r < 2.79021
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1369240672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.71438 +/- 0.00595569 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.71438 @ 95%CL (1 toyMC)
median expected limit: r < 2.71438 @ 95%CL (1 toyMC)
   68% expected band : 2.71438 < r < 2.71438
   95% expected band : 2.71438 < r < 2.71438
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -909562532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33775 +/- 0.00604251 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.33775 @ 95%CL (1 toyMC)
median expected limit: r < 2.33775 @ 95%CL (1 toyMC)
   68% expected band : 2.33775 < r < 2.33775
   95% expected band : 2.33775 < r < 2.33775
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -349300869
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.79548 +/- 0.00669992 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.79548 @ 95%CL (1 toyMC)
median expected limit: r < 4.79548 @ 95%CL (1 toyMC)
   68% expected band : 4.79548 < r < 4.79548
   95% expected band : 4.79548 < r < 4.79548
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 420630058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.55637 +/- 0.00592253 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.55637 @ 95%CL (1 toyMC)
median expected limit: r < 2.55637 @ 95%CL (1 toyMC)
   68% expected band : 2.55637 < r < 2.55637
   95% expected band : 2.55637 < r < 2.55637
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2064265057
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.39987 +/- 0.00609476 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.39987 @ 95%CL (1 toyMC)
median expected limit: r < 3.39987 @ 95%CL (1 toyMC)
   68% expected band : 3.39987 < r < 3.39987
   95% expected band : 3.39987 < r < 3.39987
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1390276442
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.63558 +/- 0.00624863 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.63558 @ 95%CL (1 toyMC)
median expected limit: r < 4.63558 @ 95%CL (1 toyMC)
   68% expected band : 4.63558 < r < 4.63558
   95% expected band : 4.63558 < r < 4.63558
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -944785655
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.07497 +/- 0.00733475 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.07497 @ 95%CL (1 toyMC)
median expected limit: r < 4.07497 @ 95%CL (1 toyMC)
   68% expected band : 4.07497 < r < 4.07497
   95% expected band : 4.07497 < r < 4.07497
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -356499282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.55897 +/- 0.00669923 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.55897 @ 95%CL (1 toyMC)
median expected limit: r < 2.55897 @ 95%CL (1 toyMC)
   68% expected band : 2.55897 < r < 2.55897
   95% expected band : 2.55897 < r < 2.55897
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -850836628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63778 +/- 0.00662151 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.63778 @ 95%CL (1 toyMC)
median expected limit: r < 2.63778 @ 95%CL (1 toyMC)
   68% expected band : 2.63778 < r < 2.63778
   95% expected band : 2.63778 < r < 2.63778
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -286154471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.72458 +/- 0.00751394 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.72458 @ 95%CL (1 toyMC)
median expected limit: r < 2.72458 @ 95%CL (1 toyMC)
   68% expected band : 2.72458 < r < 2.72458
   95% expected band : 2.72458 < r < 2.72458
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1818131498
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49691 +/- 0.00540267 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.49691 @ 95%CL (1 toyMC)
median expected limit: r < 2.49691 @ 95%CL (1 toyMC)
   68% expected band : 2.49691 < r < 2.49691
   95% expected band : 2.49691 < r < 2.49691
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1186870002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.82791 +/- 0.00623951 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.82791 @ 95%CL (1 toyMC)
median expected limit: r < 4.82791 @ 95%CL (1 toyMC)
   68% expected band : 4.82791 < r < 4.82791
   95% expected band : 4.82791 < r < 4.82791
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1085564151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67085 +/- 0.00494278 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.67085 @ 95%CL (1 toyMC)
median expected limit: r < 2.67085 @ 95%CL (1 toyMC)
   68% expected band : 2.67085 < r < 2.67085
   95% expected band : 2.67085 < r < 2.67085
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 102285040
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.30471 +/- 0.00674967 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.30471 @ 95%CL (1 toyMC)
median expected limit: r < 3.30471 @ 95%CL (1 toyMC)
   68% expected band : 3.30471 < r < 3.30471
   95% expected band : 3.30471 < r < 3.30471
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1572910952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09459 +/- 0.0064819 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.09459 @ 95%CL (1 toyMC)
median expected limit: r < 3.09459 @ 95%CL (1 toyMC)
   68% expected band : 3.09459 < r < 3.09459
   95% expected band : 3.09459 < r < 3.09459
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 238381271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.34807 +/- 0.00594716 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.34807 @ 95%CL (1 toyMC)
median expected limit: r < 4.34807 @ 95%CL (1 toyMC)
   68% expected band : 4.34807 < r < 4.34807
   95% expected band : 4.34807 < r < 4.34807
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1746463192
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.72308 +/- 0.00742695 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.72308 @ 95%CL (1 toyMC)
median expected limit: r < 3.72308 @ 95%CL (1 toyMC)
   68% expected band : 3.72308 < r < 3.72308
   95% expected band : 3.72308 < r < 3.72308
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1022294488.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-103949082.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1085564151.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1130384013.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1153789894.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1165885274.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1264443653.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1331110295.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1369240672.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1382779183.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1407335317.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1428877285.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1445270002.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1453097999.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1538859297.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1572910952.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1643752234.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1650337095.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1675457371.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1714864977.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1717321659.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1746463192.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1758347336.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1794255626.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1818131498.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1909850436.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-1976936460.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-199672398.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-2022587943.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-2064265057.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-2103257022.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-278019295.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-286154471.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-326615435.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-344325131.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-349300869.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-356499282.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-376845016.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-388810385.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-431365560.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-533651727.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-769115628.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-850836628.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-853785116.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-901025262.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-909562532.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-944785655.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.1007552843.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.102285040.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.1103104644.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.1131664646.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1186870002.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1191015794.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1220073854.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1244413654.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1307853697.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1390276442.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1428972052.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1453700785.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1454144272.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.148566209.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1587221332.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1681706884.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1687364482.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1707850501.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1843032179.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1859112494.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1965353348.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.2018665198.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.2048010018.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.2052849574.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.2061672138.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.2068835128.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.238381271.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.256304827.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.269951878.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.286681999.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.292331499.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.34653556.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.370263784.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.400203834.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.415658663.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.420630058.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.427143206.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.447816930.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.462232293.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.570618205.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.577848115.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.637069693.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.710449655.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.739370806.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.745161094.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.808112380.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.811723915.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.860961273.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.883752670.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.899725770.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.916810089.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.939664691.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.956397318.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1945159716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14418 +/- 0.00509733 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.14418 @ 95%CL (1 toyMC)
median expected limit: r < 2.14418 @ 95%CL (1 toyMC)
   68% expected band : 2.14418 < r < 2.14418
   95% expected band : 2.14418 < r < 2.14418
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1689400895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.45419 +/- 0.0065684 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.45419 @ 95%CL (1 toyMC)
median expected limit: r < 2.45419 @ 95%CL (1 toyMC)
   68% expected band : 2.45419 < r < 2.45419
   95% expected band : 2.45419 < r < 2.45419
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1497407906
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8234 +/- 0.00572484 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.8234 @ 95%CL (1 toyMC)
median expected limit: r < 2.8234 @ 95%CL (1 toyMC)
   68% expected band : 2.8234 < r < 2.8234
   95% expected band : 2.8234 < r < 2.8234
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1774421199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.29345 +/- 0.0080791 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.29345 @ 95%CL (1 toyMC)
median expected limit: r < 4.29345 @ 95%CL (1 toyMC)
   68% expected band : 4.29345 < r < 4.29345
   95% expected band : 4.29345 < r < 4.29345
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -499489625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.39796 +/- 0.00705849 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.39796 @ 95%CL (1 toyMC)
median expected limit: r < 3.39796 @ 95%CL (1 toyMC)
   68% expected band : 3.39796 < r < 3.39796
   95% expected band : 3.39796 < r < 3.39796
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1621663927
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.54371 +/- 0.00800208 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.54371 @ 95%CL (1 toyMC)
median expected limit: r < 4.54371 @ 95%CL (1 toyMC)
   68% expected band : 4.54371 < r < 4.54371
   95% expected band : 4.54371 < r < 4.54371
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -632020626
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.34876 +/- 0.00514411 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.34876 @ 95%CL (1 toyMC)
median expected limit: r < 2.34876 @ 95%CL (1 toyMC)
   68% expected band : 2.34876 < r < 2.34876
   95% expected band : 2.34876 < r < 2.34876
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1781845216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08212 +/- 0.00629275 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.08212 @ 95%CL (1 toyMC)
median expected limit: r < 3.08212 @ 95%CL (1 toyMC)
   68% expected band : 3.08212 < r < 3.08212
   95% expected band : 3.08212 < r < 3.08212
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1729706953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.064 +/- 0.00816025 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.064 @ 95%CL (1 toyMC)
median expected limit: r < 3.064 @ 95%CL (1 toyMC)
   68% expected band : 3.064 < r < 3.064
   95% expected band : 3.064 < r < 3.064
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1528413645
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06307 +/- 0.00547647 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.06307 @ 95%CL (1 toyMC)
median expected limit: r < 3.06307 @ 95%CL (1 toyMC)
   68% expected band : 3.06307 < r < 3.06307
   95% expected band : 3.06307 < r < 3.06307
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1403049128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.84786 +/- 0.00779131 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.84786 @ 95%CL (1 toyMC)
median expected limit: r < 3.84786 @ 95%CL (1 toyMC)
   68% expected band : 3.84786 < r < 3.84786
   95% expected band : 3.84786 < r < 3.84786
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1133410227
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6044 +/- 0.00767726 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.6044 @ 95%CL (1 toyMC)
median expected limit: r < 3.6044 @ 95%CL (1 toyMC)
   68% expected band : 3.6044 < r < 3.6044
   95% expected band : 3.6044 < r < 3.6044
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -144955803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.75114 +/- 0.0079078 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.75114 @ 95%CL (1 toyMC)
median expected limit: r < 3.75114 @ 95%CL (1 toyMC)
   68% expected band : 3.75114 < r < 3.75114
   95% expected band : 3.75114 < r < 3.75114
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 260467185
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.72172 +/- 0.0059315 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.72172 @ 95%CL (1 toyMC)
median expected limit: r < 2.72172 @ 95%CL (1 toyMC)
   68% expected band : 2.72172 < r < 2.72172
   95% expected band : 2.72172 < r < 2.72172
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 595673960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.78711 +/- 0.0074325 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.78711 @ 95%CL (1 toyMC)
median expected limit: r < 4.78711 @ 95%CL (1 toyMC)
   68% expected band : 4.78711 < r < 4.78711
   95% expected band : 4.78711 < r < 4.78711
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 487015049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47464 +/- 0.00627976 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.47464 @ 95%CL (1 toyMC)
median expected limit: r < 2.47464 @ 95%CL (1 toyMC)
   68% expected band : 2.47464 < r < 2.47464
   95% expected band : 2.47464 < r < 2.47464
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1970501003
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90648 +/- 0.00631865 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.90648 @ 95%CL (1 toyMC)
median expected limit: r < 2.90648 @ 95%CL (1 toyMC)
   68% expected band : 2.90648 < r < 2.90648
   95% expected band : 2.90648 < r < 2.90648
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1934461138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46871 +/- 0.00824454 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.46871 @ 95%CL (1 toyMC)
median expected limit: r < 3.46871 @ 95%CL (1 toyMC)
   68% expected band : 3.46871 < r < 3.46871
   95% expected band : 3.46871 < r < 3.46871
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1404447380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5174 +/- 0.00536874 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.5174 @ 95%CL (1 toyMC)
median expected limit: r < 2.5174 @ 95%CL (1 toyMC)
   68% expected band : 2.5174 < r < 2.5174
   95% expected band : 2.5174 < r < 2.5174
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -647428369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88807 +/- 0.00615054 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.88807 @ 95%CL (1 toyMC)
median expected limit: r < 2.88807 @ 95%CL (1 toyMC)
   68% expected band : 2.88807 < r < 2.88807
   95% expected band : 2.88807 < r < 2.88807
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1129298848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23223 +/- 0.00491869 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.23223 @ 95%CL (1 toyMC)
median expected limit: r < 3.23223 @ 95%CL (1 toyMC)
   68% expected band : 3.23223 < r < 3.23223
   95% expected band : 3.23223 < r < 3.23223
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -122029277
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.86532 +/- 0.00673238 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.86532 @ 95%CL (1 toyMC)
median expected limit: r < 2.86532 @ 95%CL (1 toyMC)
   68% expected band : 2.86532 < r < 2.86532
   95% expected band : 2.86532 < r < 2.86532
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -964623990
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.02035 +/- 0.00572532 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.02035 @ 95%CL (1 toyMC)
median expected limit: r < 2.02035 @ 95%CL (1 toyMC)
   68% expected band : 2.02035 < r < 2.02035
   95% expected band : 2.02035 < r < 2.02035
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 839735678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.54457 +/- 0.00555005 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.54457 @ 95%CL (1 toyMC)
median expected limit: r < 3.54457 @ 95%CL (1 toyMC)
   68% expected band : 3.54457 < r < 3.54457
   95% expected band : 3.54457 < r < 3.54457
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1507068200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7932 +/- 0.00566145 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.7932 @ 95%CL (1 toyMC)
median expected limit: r < 2.7932 @ 95%CL (1 toyMC)
   68% expected band : 2.7932 < r < 2.7932
   95% expected band : 2.7932 < r < 2.7932
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -504426100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79823 +/- 0.00578882 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.79823 @ 95%CL (1 toyMC)
median expected limit: r < 2.79823 @ 95%CL (1 toyMC)
   68% expected band : 2.79823 < r < 2.79823
   95% expected band : 2.79823 < r < 2.79823
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1310210304
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.35944 +/- 0.00541793 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.35944 @ 95%CL (1 toyMC)
median expected limit: r < 2.35944 @ 95%CL (1 toyMC)
   68% expected band : 2.35944 < r < 2.35944
   95% expected band : 2.35944 < r < 2.35944
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1466304026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.86172 +/- 0.00675887 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.86172 @ 95%CL (1 toyMC)
median expected limit: r < 2.86172 @ 95%CL (1 toyMC)
   68% expected band : 2.86172 < r < 2.86172
   95% expected band : 2.86172 < r < 2.86172
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -25493575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.56693 +/- 0.00690606 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.56693 @ 95%CL (1 toyMC)
median expected limit: r < 4.56693 @ 95%CL (1 toyMC)
   68% expected band : 4.56693 < r < 4.56693
   95% expected band : 4.56693 < r < 4.56693
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -163048392
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6311 +/- 0.00664414 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.6311 @ 95%CL (1 toyMC)
median expected limit: r < 3.6311 @ 95%CL (1 toyMC)
   68% expected band : 3.6311 < r < 3.6311
   95% expected band : 3.6311 < r < 3.6311
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -255652784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1205 +/- 0.00617565 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.1205 @ 95%CL (1 toyMC)
median expected limit: r < 3.1205 @ 95%CL (1 toyMC)
   68% expected band : 3.1205 < r < 3.1205
   95% expected band : 3.1205 < r < 3.1205
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1366031289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.70527 +/- 0.00697111 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.70527 @ 95%CL (1 toyMC)
median expected limit: r < 3.70527 @ 95%CL (1 toyMC)
   68% expected band : 3.70527 < r < 3.70527
   95% expected band : 3.70527 < r < 3.70527
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -923365223
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92316 +/- 0.00611415 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.92316 @ 95%CL (1 toyMC)
median expected limit: r < 2.92316 @ 95%CL (1 toyMC)
   68% expected band : 2.92316 < r < 2.92316
   95% expected band : 2.92316 < r < 2.92316
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 212883896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.15313 +/- 0.00593639 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.15313 @ 95%CL (1 toyMC)
median expected limit: r < 2.15313 @ 95%CL (1 toyMC)
   68% expected band : 2.15313 < r < 2.15313
   95% expected band : 2.15313 < r < 2.15313
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 510970876
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.7154 +/- 0.00668425 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.7154 @ 95%CL (1 toyMC)
median expected limit: r < 3.7154 @ 95%CL (1 toyMC)
   68% expected band : 3.7154 < r < 3.7154
   95% expected band : 3.7154 < r < 3.7154
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 770214491
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.52755 +/- 0.00600424 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.52755 @ 95%CL (1 toyMC)
median expected limit: r < 3.52755 @ 95%CL (1 toyMC)
   68% expected band : 3.52755 < r < 3.52755
   95% expected band : 3.52755 < r < 3.52755
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2129523467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39284 +/- 0.00634447 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.39284 @ 95%CL (1 toyMC)
median expected limit: r < 2.39284 @ 95%CL (1 toyMC)
   68% expected band : 2.39284 < r < 2.39284
   95% expected band : 2.39284 < r < 2.39284
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 170447427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10472 +/- 0.00683288 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.10472 @ 95%CL (1 toyMC)
median expected limit: r < 3.10472 @ 95%CL (1 toyMC)
   68% expected band : 3.10472 < r < 3.10472
   95% expected band : 3.10472 < r < 3.10472
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1447073423
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.3727 +/- 0.00602362 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.3727 @ 95%CL (1 toyMC)
median expected limit: r < 2.3727 @ 95%CL (1 toyMC)
   68% expected band : 2.3727 < r < 2.3727
   95% expected band : 2.3727 < r < 2.3727
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 302766565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.03824 +/- 0.00742509 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.03824 @ 95%CL (1 toyMC)
median expected limit: r < 3.03824 @ 95%CL (1 toyMC)
   68% expected band : 3.03824 < r < 3.03824
   95% expected band : 3.03824 < r < 3.03824
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -537806741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88293 +/- 0.00660188 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.88293 @ 95%CL (1 toyMC)
median expected limit: r < 2.88293 @ 95%CL (1 toyMC)
   68% expected band : 2.88293 < r < 2.88293
   95% expected band : 2.88293 < r < 2.88293
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1133968997
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.1543 +/- 0.00574149 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.1543 @ 95%CL (1 toyMC)
median expected limit: r < 2.1543 @ 95%CL (1 toyMC)
   68% expected band : 2.1543 < r < 2.1543
   95% expected band : 2.1543 < r < 2.1543
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1693272640
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04153 +/- 0.00656876 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.04153 @ 95%CL (1 toyMC)
median expected limit: r < 3.04153 @ 95%CL (1 toyMC)
   68% expected band : 3.04153 < r < 3.04153
   95% expected band : 3.04153 < r < 3.04153
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -634028929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5251 +/- 0.00621929 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.5251 @ 95%CL (1 toyMC)
median expected limit: r < 2.5251 @ 95%CL (1 toyMC)
   68% expected band : 2.5251 < r < 2.5251
   95% expected band : 2.5251 < r < 2.5251
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1302975956
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.36045 +/- 0.00699176 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.36045 @ 95%CL (1 toyMC)
median expected limit: r < 2.36045 @ 95%CL (1 toyMC)
   68% expected band : 2.36045 < r < 2.36045
   95% expected band : 2.36045 < r < 2.36045
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -153498727
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.94452 +/- 0.0100009 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.94452 @ 95%CL (1 toyMC)
median expected limit: r < 4.94452 @ 95%CL (1 toyMC)
   68% expected band : 4.94452 < r < 4.94452
   95% expected band : 4.94452 < r < 4.94452
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 951943012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12505 +/- 0.00614701 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.12505 @ 95%CL (1 toyMC)
median expected limit: r < 3.12505 @ 95%CL (1 toyMC)
   68% expected band : 3.12505 < r < 3.12505
   95% expected band : 3.12505 < r < 3.12505
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1451949440
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44631 +/- 0.00568902 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.44631 @ 95%CL (1 toyMC)
median expected limit: r < 3.44631 @ 95%CL (1 toyMC)
   68% expected band : 3.44631 < r < 3.44631
   95% expected band : 3.44631 < r < 3.44631
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1642684855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04987 +/- 0.00693693 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.04987 @ 95%CL (1 toyMC)
median expected limit: r < 3.04987 @ 95%CL (1 toyMC)
   68% expected band : 3.04987 < r < 3.04987
   95% expected band : 3.04987 < r < 3.04987
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1359009802
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.68976 +/- 0.00699333 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.68976 @ 95%CL (1 toyMC)
median expected limit: r < 3.68976 @ 95%CL (1 toyMC)
   68% expected band : 3.68976 < r < 3.68976
   95% expected band : 3.68976 < r < 3.68976
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 347135068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32077 +/- 0.00626611 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.32077 @ 95%CL (1 toyMC)
median expected limit: r < 2.32077 @ 95%CL (1 toyMC)
   68% expected band : 2.32077 < r < 2.32077
   95% expected band : 2.32077 < r < 2.32077
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2057137671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.78329 +/- 0.00724869 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.78329 @ 95%CL (1 toyMC)
median expected limit: r < 3.78329 @ 95%CL (1 toyMC)
   68% expected band : 3.78329 < r < 3.78329
   95% expected band : 3.78329 < r < 3.78329
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2022622603
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13744 +/- 0.0054543 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.13744 @ 95%CL (1 toyMC)
median expected limit: r < 2.13744 @ 95%CL (1 toyMC)
   68% expected band : 2.13744 < r < 2.13744
   95% expected band : 2.13744 < r < 2.13744
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 708185433
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.02567 +/- 0.00788121 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.02567 @ 95%CL (1 toyMC)
median expected limit: r < 4.02567 @ 95%CL (1 toyMC)
   68% expected band : 4.02567 < r < 4.02567
   95% expected band : 4.02567 < r < 4.02567
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1676343703
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.56075 +/- 0.0071607 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.56075 @ 95%CL (1 toyMC)
median expected limit: r < 2.56075 @ 95%CL (1 toyMC)
   68% expected band : 2.56075 < r < 2.56075
   95% expected band : 2.56075 < r < 2.56075
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 494495806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.69526 +/- 0.00642648 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.69526 @ 95%CL (1 toyMC)
median expected limit: r < 2.69526 @ 95%CL (1 toyMC)
   68% expected band : 2.69526 < r < 2.69526
   95% expected band : 2.69526 < r < 2.69526
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -110034837
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.86787 +/- 0.00530018 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.86787 @ 95%CL (1 toyMC)
median expected limit: r < 2.86787 @ 95%CL (1 toyMC)
   68% expected band : 2.86787 < r < 2.86787
   95% expected band : 2.86787 < r < 2.86787
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1547173843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.56238 +/- 0.00705479 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.56238 @ 95%CL (1 toyMC)
median expected limit: r < 2.56238 @ 95%CL (1 toyMC)
   68% expected band : 2.56238 < r < 2.56238
   95% expected band : 2.56238 < r < 2.56238
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1497015598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.83223 +/- 0.00558215 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.83223 @ 95%CL (1 toyMC)
median expected limit: r < 2.83223 @ 95%CL (1 toyMC)
   68% expected band : 2.83223 < r < 2.83223
   95% expected band : 2.83223 < r < 2.83223
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2145759371
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.46092 +/- 0.00783162 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.46092 @ 95%CL (1 toyMC)
median expected limit: r < 4.46092 @ 95%CL (1 toyMC)
   68% expected band : 4.46092 < r < 4.46092
   95% expected band : 4.46092 < r < 4.46092
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -438300606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.5179 +/- 0.00800168 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.5179 @ 95%CL (1 toyMC)
median expected limit: r < 4.5179 @ 95%CL (1 toyMC)
   68% expected band : 4.5179 < r < 4.5179
   95% expected band : 4.5179 < r < 4.5179
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1841914599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98391 +/- 0.00596667 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.98391 @ 95%CL (1 toyMC)
median expected limit: r < 2.98391 @ 95%CL (1 toyMC)
   68% expected band : 2.98391 < r < 2.98391
   95% expected band : 2.98391 < r < 2.98391
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1572550931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.05718 +/- 0.00487236 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.05718 @ 95%CL (1 toyMC)
median expected limit: r < 2.05718 @ 95%CL (1 toyMC)
   68% expected band : 2.05718 < r < 2.05718
   95% expected band : 2.05718 < r < 2.05718
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1904389908
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52996 +/- 0.00463367 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.52996 @ 95%CL (1 toyMC)
median expected limit: r < 2.52996 @ 95%CL (1 toyMC)
   68% expected band : 2.52996 < r < 2.52996
   95% expected band : 2.52996 < r < 2.52996
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1886770998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.44461 +/- 0.00482907 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.44461 @ 95%CL (1 toyMC)
median expected limit: r < 2.44461 @ 95%CL (1 toyMC)
   68% expected band : 2.44461 < r < 2.44461
   95% expected band : 2.44461 < r < 2.44461
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 392059518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4791 +/- 0.0060665 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.4791 @ 95%CL (1 toyMC)
median expected limit: r < 2.4791 @ 95%CL (1 toyMC)
   68% expected band : 2.4791 < r < 2.4791
   95% expected band : 2.4791 < r < 2.4791
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 8467067
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07561 +/- 0.00592094 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.07561 @ 95%CL (1 toyMC)
median expected limit: r < 3.07561 @ 95%CL (1 toyMC)
   68% expected band : 3.07561 < r < 3.07561
   95% expected band : 3.07561 < r < 3.07561
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1694581021
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32337 +/- 0.00525061 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.32337 @ 95%CL (1 toyMC)
median expected limit: r < 2.32337 @ 95%CL (1 toyMC)
   68% expected band : 2.32337 < r < 2.32337
   95% expected band : 2.32337 < r < 2.32337
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1185653541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.68386 +/- 0.00502836 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.68386 @ 95%CL (1 toyMC)
median expected limit: r < 2.68386 @ 95%CL (1 toyMC)
   68% expected band : 2.68386 < r < 2.68386
   95% expected band : 2.68386 < r < 2.68386
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -740067326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93598 +/- 0.00570881 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.93598 @ 95%CL (1 toyMC)
median expected limit: r < 2.93598 @ 95%CL (1 toyMC)
   68% expected band : 2.93598 < r < 2.93598
   95% expected band : 2.93598 < r < 2.93598
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1000422770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.47246 +/- 0.00630678 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.47246 @ 95%CL (1 toyMC)
median expected limit: r < 3.47246 @ 95%CL (1 toyMC)
   68% expected band : 3.47246 < r < 3.47246
   95% expected band : 3.47246 < r < 3.47246
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1551363704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22624 +/- 0.00499479 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.22624 @ 95%CL (1 toyMC)
median expected limit: r < 3.22624 @ 95%CL (1 toyMC)
   68% expected band : 3.22624 < r < 3.22624
   95% expected band : 3.22624 < r < 3.22624
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1917206627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.67646 +/- 0.00543117 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.67646 @ 95%CL (1 toyMC)
median expected limit: r < 3.67646 @ 95%CL (1 toyMC)
   68% expected band : 3.67646 < r < 3.67646
   95% expected band : 3.67646 < r < 3.67646
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1217544767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.05848 +/- 0.00700779 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.05848 @ 95%CL (1 toyMC)
median expected limit: r < 4.05848 @ 95%CL (1 toyMC)
   68% expected band : 4.05848 < r < 4.05848
   95% expected band : 4.05848 < r < 4.05848
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1111506296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40064 +/- 0.00618386 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.40064 @ 95%CL (1 toyMC)
median expected limit: r < 2.40064 @ 95%CL (1 toyMC)
   68% expected band : 2.40064 < r < 2.40064
   95% expected band : 2.40064 < r < 2.40064
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1904405501
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.70628 +/- 0.00630719 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.70628 @ 95%CL (1 toyMC)
median expected limit: r < 3.70628 @ 95%CL (1 toyMC)
   68% expected band : 3.70628 < r < 3.70628
   95% expected band : 3.70628 < r < 3.70628
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1091215773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.61201 +/- 0.00692936 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.61201 @ 95%CL (1 toyMC)
median expected limit: r < 3.61201 @ 95%CL (1 toyMC)
   68% expected band : 3.61201 < r < 3.61201
   95% expected band : 3.61201 < r < 3.61201
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -401920932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.68479 +/- 0.00521819 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.68479 @ 95%CL (1 toyMC)
median expected limit: r < 2.68479 @ 95%CL (1 toyMC)
   68% expected band : 2.68479 < r < 2.68479
   95% expected band : 2.68479 < r < 2.68479
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 76915732
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76099 +/- 0.00776066 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.76099 @ 95%CL (1 toyMC)
median expected limit: r < 2.76099 @ 95%CL (1 toyMC)
   68% expected band : 2.76099 < r < 2.76099
   95% expected band : 2.76099 < r < 2.76099
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1673526963
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92014 +/- 0.0072076 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.92014 @ 95%CL (1 toyMC)
median expected limit: r < 3.92014 @ 95%CL (1 toyMC)
   68% expected band : 3.92014 < r < 3.92014
   95% expected band : 3.92014 < r < 3.92014
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -706216069
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.50163 +/- 0.0058534 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.50163 @ 95%CL (1 toyMC)
median expected limit: r < 3.50163 @ 95%CL (1 toyMC)
   68% expected band : 3.50163 < r < 3.50163
   95% expected band : 3.50163 < r < 3.50163
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1985415127
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.75746 +/- 0.00829375 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 5.75746 @ 95%CL (1 toyMC)
median expected limit: r < 5.75746 @ 95%CL (1 toyMC)
   68% expected band : 5.75746 < r < 5.75746
   95% expected band : 5.75746 < r < 5.75746
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 139164939
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.57753 +/- 0.0060255 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.57753 @ 95%CL (1 toyMC)
median expected limit: r < 2.57753 @ 95%CL (1 toyMC)
   68% expected band : 2.57753 < r < 2.57753
   95% expected band : 2.57753 < r < 2.57753
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -954351274
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91455 +/- 0.00696989 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.91455 @ 95%CL (1 toyMC)
median expected limit: r < 3.91455 @ 95%CL (1 toyMC)
   68% expected band : 3.91455 < r < 3.91455
   95% expected band : 3.91455 < r < 3.91455
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -604985717
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0282 +/- 0.00591353 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.0282 @ 95%CL (1 toyMC)
median expected limit: r < 3.0282 @ 95%CL (1 toyMC)
   68% expected band : 3.0282 < r < 3.0282
   95% expected band : 3.0282 < r < 3.0282
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1960150097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66266 +/- 0.00620618 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.66266 @ 95%CL (1 toyMC)
median expected limit: r < 2.66266 @ 95%CL (1 toyMC)
   68% expected band : 2.66266 < r < 2.66266
   95% expected band : 2.66266 < r < 2.66266
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1567012201
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.36887 +/- 0.00613685 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.36887 @ 95%CL (1 toyMC)
median expected limit: r < 2.36887 @ 95%CL (1 toyMC)
   68% expected band : 2.36887 < r < 2.36887
   95% expected band : 2.36887 < r < 2.36887
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1922821616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.35979 +/- 0.00610065 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.35979 @ 95%CL (1 toyMC)
median expected limit: r < 2.35979 @ 95%CL (1 toyMC)
   68% expected band : 2.35979 < r < 2.35979
   95% expected band : 2.35979 < r < 2.35979
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1791241976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.24548 +/- 0.00665078 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.24548 @ 95%CL (1 toyMC)
median expected limit: r < 2.24548 @ 95%CL (1 toyMC)
   68% expected band : 2.24548 < r < 2.24548
   95% expected band : 2.24548 < r < 2.24548
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 772155725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.14419 +/- 0.00802544 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.14419 @ 95%CL (1 toyMC)
median expected limit: r < 6.14419 @ 95%CL (1 toyMC)
   68% expected band : 6.14419 < r < 6.14419
   95% expected band : 6.14419 < r < 6.14419
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -460990589
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.19587 +/- 0.00558673 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.19587 @ 95%CL (1 toyMC)
median expected limit: r < 2.19587 @ 95%CL (1 toyMC)
   68% expected band : 2.19587 < r < 2.19587
   95% expected band : 2.19587 < r < 2.19587
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -334119138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.29738 +/- 0.00515895 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.29738 @ 95%CL (1 toyMC)
median expected limit: r < 5.29738 @ 95%CL (1 toyMC)
   68% expected band : 5.29738 < r < 5.29738
   95% expected band : 5.29738 < r < 5.29738
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -574193001
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65241 +/- 0.00679314 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.65241 @ 95%CL (1 toyMC)
median expected limit: r < 2.65241 @ 95%CL (1 toyMC)
   68% expected band : 2.65241 < r < 2.65241
   95% expected band : 2.65241 < r < 2.65241
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1732747221
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.20523 +/- 0.00472319 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.20523 @ 95%CL (1 toyMC)
median expected limit: r < 3.20523 @ 95%CL (1 toyMC)
   68% expected band : 3.20523 < r < 3.20523
   95% expected band : 3.20523 < r < 3.20523
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2030788063
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25041 +/- 0.00643399 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.25041 @ 95%CL (1 toyMC)
median expected limit: r < 3.25041 @ 95%CL (1 toyMC)
   68% expected band : 3.25041 < r < 3.25041
   95% expected band : 3.25041 < r < 3.25041
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 200986714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.94716 +/- 0.00699655 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.94716 @ 95%CL (1 toyMC)
median expected limit: r < 4.94716 @ 95%CL (1 toyMC)
   68% expected band : 4.94716 < r < 4.94716
   95% expected band : 4.94716 < r < 4.94716
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 353585339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54239 +/- 0.0062573 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.54239 @ 95%CL (1 toyMC)
median expected limit: r < 2.54239 @ 95%CL (1 toyMC)
   68% expected band : 2.54239 < r < 2.54239
   95% expected band : 2.54239 < r < 2.54239
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2014725583
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.88026 +/- 0.00581779 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.88026 @ 95%CL (1 toyMC)
median expected limit: r < 3.88026 @ 95%CL (1 toyMC)
   68% expected band : 3.88026 < r < 3.88026
   95% expected band : 3.88026 < r < 3.88026
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 523464977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.72824 +/- 0.00551476 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.72824 @ 95%CL (1 toyMC)
median expected limit: r < 4.72824 @ 95%CL (1 toyMC)
   68% expected band : 4.72824 < r < 4.72824
   95% expected band : 4.72824 < r < 4.72824
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1903652359
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07226 +/- 0.00501862 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.07226 @ 95%CL (1 toyMC)
median expected limit: r < 2.07226 @ 95%CL (1 toyMC)
   68% expected band : 2.07226 < r < 2.07226
   95% expected band : 2.07226 < r < 2.07226
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-110034837.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1111506296.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1129298848.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1133410227.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1185653541.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-122029277.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1359009802.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1404447380.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1447073423.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-144955803.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1497407906.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1507068200.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-153498727.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1547173843.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1551363704.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-163048392.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1642684855.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1673526963.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1676343703.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1689400895.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1693272640.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1774421199.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1791241976.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1841914599.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1886770998.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1904405501.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-1922821616.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-1934461138.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-1945159716.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-1960150097.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-2145759371.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-25493575.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-255652784.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-334119138.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-401920932.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-438300606.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-460990589.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-499489625.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-504426100.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-537806741.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-574193001.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-604985717.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-632020626.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-634028929.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-647428369.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-706216069.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-740067326.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-923365223.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-954351274.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-964623990.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.1000422770.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1091215773.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1133968997.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1217544767.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1302975956.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1310210304.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1366031289.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.139164939.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1403049128.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1451949440.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1466304026.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1497015598.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1528413645.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1567012201.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1572550931.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1621663927.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1694581021.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.170447427.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1729706953.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1732747221.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1781845216.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1903652359.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1904389908.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1917206627.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.1970501003.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.1985415127.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.200986714.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.2014725583.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.2022622603.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.2030788063.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.2057137671.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.212883896.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.2129523467.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.260467185.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.302766565.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.347135068.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.353585339.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.392059518.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.487015049.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.494495806.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.510970876.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.523464977.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.595673960.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.708185433.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.76915732.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.770214491.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.772155725.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.839735678.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.8467067.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.951943012.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -860023764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.50702 +/- 0.0125331 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.50702 @ 95%CL (1 toyMC)
median expected limit: r < 6.50702 @ 95%CL (1 toyMC)
   68% expected band : 6.50702 < r < 6.50702
   95% expected band : 6.50702 < r < 6.50702
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -314915519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.14755 +/- 0.0161319 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.14755 @ 95%CL (1 toyMC)
median expected limit: r < 8.14755 @ 95%CL (1 toyMC)
   68% expected band : 8.14755 < r < 8.14755
   95% expected band : 8.14755 < r < 8.14755
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1867189084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33119 +/- 0.00729123 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.33119 @ 95%CL (1 toyMC)
median expected limit: r < 3.33119 @ 95%CL (1 toyMC)
   68% expected band : 3.33119 < r < 3.33119
   95% expected band : 3.33119 < r < 3.33119
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2120597577
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.82282 +/- 0.00686455 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.82282 @ 95%CL (1 toyMC)
median expected limit: r < 2.82282 @ 95%CL (1 toyMC)
   68% expected band : 2.82282 < r < 2.82282
   95% expected band : 2.82282 < r < 2.82282
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1375341147
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.05965 +/- 0.0102703 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.05965 @ 95%CL (1 toyMC)
median expected limit: r < 5.05965 @ 95%CL (1 toyMC)
   68% expected band : 5.05965 < r < 5.05965
   95% expected band : 5.05965 < r < 5.05965
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2117380997
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.40341 +/- 0.0082311 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.40341 @ 95%CL (1 toyMC)
median expected limit: r < 3.40341 @ 95%CL (1 toyMC)
   68% expected band : 3.40341 < r < 3.40341
   95% expected band : 3.40341 < r < 3.40341
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1952080037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.30776 +/- 0.00735319 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.30776 @ 95%CL (1 toyMC)
median expected limit: r < 3.30776 @ 95%CL (1 toyMC)
   68% expected band : 3.30776 < r < 3.30776
   95% expected band : 3.30776 < r < 3.30776
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1138458975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60382 +/- 0.00788402 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.60382 @ 95%CL (1 toyMC)
median expected limit: r < 2.60382 @ 95%CL (1 toyMC)
   68% expected band : 2.60382 < r < 2.60382
   95% expected band : 2.60382 < r < 2.60382
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -574798102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.82714 +/- 0.00751036 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.82714 @ 95%CL (1 toyMC)
median expected limit: r < 2.82714 @ 95%CL (1 toyMC)
   68% expected band : 2.82714 < r < 2.82714
   95% expected band : 2.82714 < r < 2.82714
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1571173657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.71227 +/- 0.00996139 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.71227 @ 95%CL (1 toyMC)
median expected limit: r < 4.71227 @ 95%CL (1 toyMC)
   68% expected band : 4.71227 < r < 4.71227
   95% expected band : 4.71227 < r < 4.71227
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1009795038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65452 +/- 0.00925451 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.65452 @ 95%CL (1 toyMC)
median expected limit: r < 3.65452 @ 95%CL (1 toyMC)
   68% expected band : 3.65452 < r < 3.65452
   95% expected band : 3.65452 < r < 3.65452
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1834929618
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.8115 +/- 0.0115852 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.8115 @ 95%CL (1 toyMC)
median expected limit: r < 4.8115 @ 95%CL (1 toyMC)
   68% expected band : 4.8115 < r < 4.8115
   95% expected band : 4.8115 < r < 4.8115
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 628371530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2654 +/- 0.00719311 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.2654 @ 95%CL (1 toyMC)
median expected limit: r < 3.2654 @ 95%CL (1 toyMC)
   68% expected band : 3.2654 < r < 3.2654
   95% expected band : 3.2654 < r < 3.2654
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1561610957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33361 +/- 0.00642058 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.33361 @ 95%CL (1 toyMC)
median expected limit: r < 3.33361 @ 95%CL (1 toyMC)
   68% expected band : 3.33361 < r < 3.33361
   95% expected band : 3.33361 < r < 3.33361
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 201736229
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.80098 +/- 0.00705716 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.80098 @ 95%CL (1 toyMC)
median expected limit: r < 4.80098 @ 95%CL (1 toyMC)
   68% expected band : 4.80098 < r < 4.80098
   95% expected band : 4.80098 < r < 4.80098
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1707014260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.49865 +/- 0.00798854 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.49865 @ 95%CL (1 toyMC)
median expected limit: r < 4.49865 @ 95%CL (1 toyMC)
   68% expected band : 4.49865 < r < 4.49865
   95% expected band : 4.49865 < r < 4.49865
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -150450255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.18499 +/- 0.00833014 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.18499 @ 95%CL (1 toyMC)
median expected limit: r < 3.18499 @ 95%CL (1 toyMC)
   68% expected band : 3.18499 < r < 3.18499
   95% expected band : 3.18499 < r < 3.18499
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -751444806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.30722 +/- 0.00650849 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.30722 @ 95%CL (1 toyMC)
median expected limit: r < 3.30722 @ 95%CL (1 toyMC)
   68% expected band : 3.30722 < r < 3.30722
   95% expected band : 3.30722 < r < 3.30722
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 562427149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.96065 +/- 0.0132864 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.96065 @ 95%CL (1 toyMC)
median expected limit: r < 4.96065 @ 95%CL (1 toyMC)
   68% expected band : 4.96065 < r < 4.96065
   95% expected band : 4.96065 < r < 4.96065
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1639072833
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.14615 +/- 0.0119489 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.14615 @ 95%CL (1 toyMC)
median expected limit: r < 5.14615 @ 95%CL (1 toyMC)
   68% expected band : 5.14615 < r < 5.14615
   95% expected band : 5.14615 < r < 5.14615
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1399197043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44147 +/- 0.00983291 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.44147 @ 95%CL (1 toyMC)
median expected limit: r < 3.44147 @ 95%CL (1 toyMC)
   68% expected band : 3.44147 < r < 3.44147
   95% expected band : 3.44147 < r < 3.44147
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -639461179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8192 +/- 0.00828242 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.8192 @ 95%CL (1 toyMC)
median expected limit: r < 2.8192 @ 95%CL (1 toyMC)
   68% expected band : 2.8192 < r < 2.8192
   95% expected band : 2.8192 < r < 2.8192
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1240264554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.34022 +/- 0.00751235 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.34022 @ 95%CL (1 toyMC)
median expected limit: r < 3.34022 @ 95%CL (1 toyMC)
   68% expected band : 3.34022 < r < 3.34022
   95% expected band : 3.34022 < r < 3.34022
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1121245050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63713 +/- 0.00718479 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.63713 @ 95%CL (1 toyMC)
median expected limit: r < 2.63713 @ 95%CL (1 toyMC)
   68% expected band : 2.63713 < r < 2.63713
   95% expected band : 2.63713 < r < 2.63713
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 491889871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.62802 +/- 0.00858095 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.62802 @ 95%CL (1 toyMC)
median expected limit: r < 3.62802 @ 95%CL (1 toyMC)
   68% expected band : 3.62802 < r < 3.62802
   95% expected band : 3.62802 < r < 3.62802
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -397027475
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.83337 +/- 0.00736362 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.83337 @ 95%CL (1 toyMC)
median expected limit: r < 2.83337 @ 95%CL (1 toyMC)
   68% expected band : 2.83337 < r < 2.83337
   95% expected band : 2.83337 < r < 2.83337
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1570206302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.63081 +/- 0.0116069 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.63081 @ 95%CL (1 toyMC)
median expected limit: r < 4.63081 @ 95%CL (1 toyMC)
   68% expected band : 4.63081 < r < 4.63081
   95% expected band : 4.63081 < r < 4.63081
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 733245449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.01384 +/- 0.00780706 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.01384 @ 95%CL (1 toyMC)
median expected limit: r < 4.01384 @ 95%CL (1 toyMC)
   68% expected band : 4.01384 < r < 4.01384
   95% expected band : 4.01384 < r < 4.01384
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1271999562
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53049 +/- 0.00785872 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.53049 @ 95%CL (1 toyMC)
median expected limit: r < 2.53049 @ 95%CL (1 toyMC)
   68% expected band : 2.53049 < r < 2.53049
   95% expected band : 2.53049 < r < 2.53049
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 513744406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.4051 +/- 0.0107106 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.4051 @ 95%CL (1 toyMC)
median expected limit: r < 4.4051 @ 95%CL (1 toyMC)
   68% expected band : 4.4051 < r < 4.4051
   95% expected band : 4.4051 < r < 4.4051
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1962902125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.72553 +/- 0.00765923 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.72553 @ 95%CL (1 toyMC)
median expected limit: r < 3.72553 @ 95%CL (1 toyMC)
   68% expected band : 3.72553 < r < 3.72553
   95% expected band : 3.72553 < r < 3.72553
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1336143868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87489 +/- 0.00817324 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.87489 @ 95%CL (1 toyMC)
median expected limit: r < 2.87489 @ 95%CL (1 toyMC)
   68% expected band : 2.87489 < r < 2.87489
   95% expected band : 2.87489 < r < 2.87489
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2067788327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.89946 +/- 0.0124354 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.89946 @ 95%CL (1 toyMC)
median expected limit: r < 4.89946 @ 95%CL (1 toyMC)
   68% expected band : 4.89946 < r < 4.89946
   95% expected band : 4.89946 < r < 4.89946
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -92354233
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53462 +/- 0.00656468 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.53462 @ 95%CL (1 toyMC)
median expected limit: r < 2.53462 @ 95%CL (1 toyMC)
   68% expected band : 2.53462 < r < 2.53462
   95% expected band : 2.53462 < r < 2.53462
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 287010845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.37976 +/- 0.00930856 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.37976 @ 95%CL (1 toyMC)
median expected limit: r < 3.37976 @ 95%CL (1 toyMC)
   68% expected band : 3.37976 < r < 3.37976
   95% expected band : 3.37976 < r < 3.37976
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 284107224
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.82953 +/- 0.00699356 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.82953 @ 95%CL (1 toyMC)
median expected limit: r < 2.82953 @ 95%CL (1 toyMC)
   68% expected band : 2.82953 < r < 2.82953
   95% expected band : 2.82953 < r < 2.82953
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -326157071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.19467 +/- 0.00631127 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.19467 @ 95%CL (1 toyMC)
median expected limit: r < 3.19467 @ 95%CL (1 toyMC)
   68% expected band : 3.19467 < r < 3.19467
   95% expected band : 3.19467 < r < 3.19467
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1154219253
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.35599 +/- 0.00693319 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.35599 @ 95%CL (1 toyMC)
median expected limit: r < 3.35599 @ 95%CL (1 toyMC)
   68% expected band : 3.35599 < r < 3.35599
   95% expected band : 3.35599 < r < 3.35599
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 229134477
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93939 +/- 0.00718451 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.93939 @ 95%CL (1 toyMC)
median expected limit: r < 2.93939 @ 95%CL (1 toyMC)
   68% expected band : 2.93939 < r < 2.93939
   95% expected band : 2.93939 < r < 2.93939
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 907312832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.37986 +/- 0.00959446 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.37986 @ 95%CL (1 toyMC)
median expected limit: r < 4.37986 @ 95%CL (1 toyMC)
   68% expected band : 4.37986 < r < 4.37986
   95% expected band : 4.37986 < r < 4.37986
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1849381394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.35402 +/- 0.00598998 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.35402 @ 95%CL (1 toyMC)
median expected limit: r < 2.35402 @ 95%CL (1 toyMC)
   68% expected band : 2.35402 < r < 2.35402
   95% expected band : 2.35402 < r < 2.35402
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -438799558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.50881 +/- 0.00803674 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.50881 @ 95%CL (1 toyMC)
median expected limit: r < 3.50881 @ 95%CL (1 toyMC)
   68% expected band : 3.50881 < r < 3.50881
   95% expected band : 3.50881 < r < 3.50881
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -731937019
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.71584 +/- 0.00713125 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.71584 @ 95%CL (1 toyMC)
median expected limit: r < 3.71584 @ 95%CL (1 toyMC)
   68% expected band : 3.71584 < r < 3.71584
   95% expected band : 3.71584 < r < 3.71584
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -638471888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.14377 +/- 0.00950688 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.14377 @ 95%CL (1 toyMC)
median expected limit: r < 5.14377 @ 95%CL (1 toyMC)
   68% expected band : 5.14377 < r < 5.14377
   95% expected band : 5.14377 < r < 5.14377
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1141520166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.31391 +/- 0.00835235 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.31391 @ 95%CL (1 toyMC)
median expected limit: r < 4.31391 @ 95%CL (1 toyMC)
   68% expected band : 4.31391 < r < 4.31391
   95% expected band : 4.31391 < r < 4.31391
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1396016387
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.31682 +/- 0.00798337 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.31682 @ 95%CL (1 toyMC)
median expected limit: r < 3.31682 @ 95%CL (1 toyMC)
   68% expected band : 3.31682 < r < 3.31682
   95% expected band : 3.31682 < r < 3.31682
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 121604951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.8132 +/- 0.0070823 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.8132 @ 95%CL (1 toyMC)
median expected limit: r < 3.8132 @ 95%CL (1 toyMC)
   68% expected band : 3.8132 < r < 3.8132
   95% expected band : 3.8132 < r < 3.8132
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 426049788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.75494 +/- 0.00960055 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.75494 @ 95%CL (1 toyMC)
median expected limit: r < 4.75494 @ 95%CL (1 toyMC)
   68% expected band : 4.75494 < r < 4.75494
   95% expected band : 4.75494 < r < 4.75494
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1133106972
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.53552 +/- 0.00857551 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.53552 @ 95%CL (1 toyMC)
median expected limit: r < 3.53552 @ 95%CL (1 toyMC)
   68% expected band : 3.53552 < r < 3.53552
   95% expected band : 3.53552 < r < 3.53552
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 679814061
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63627 +/- 0.00760408 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63627 @ 95%CL (1 toyMC)
median expected limit: r < 2.63627 @ 95%CL (1 toyMC)
   68% expected band : 2.63627 < r < 2.63627
   95% expected band : 2.63627 < r < 2.63627
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -489647702
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93535 +/- 0.00937367 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.93535 @ 95%CL (1 toyMC)
median expected limit: r < 3.93535 @ 95%CL (1 toyMC)
   68% expected band : 3.93535 < r < 3.93535
   95% expected band : 3.93535 < r < 3.93535
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1173388510
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.95553 +/- 0.00656606 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.95553 @ 95%CL (1 toyMC)
median expected limit: r < 2.95553 @ 95%CL (1 toyMC)
   68% expected band : 2.95553 < r < 2.95553
   95% expected band : 2.95553 < r < 2.95553
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -160933294
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.70687 +/- 0.00650012 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.70687 @ 95%CL (1 toyMC)
median expected limit: r < 2.70687 @ 95%CL (1 toyMC)
   68% expected band : 2.70687 < r < 2.70687
   95% expected band : 2.70687 < r < 2.70687
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -147932197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.34437 +/- 0.00928352 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.34437 @ 95%CL (1 toyMC)
median expected limit: r < 6.34437 @ 95%CL (1 toyMC)
   68% expected band : 6.34437 < r < 6.34437
   95% expected band : 6.34437 < r < 6.34437
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -817552499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.27263 +/- 0.00918628 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.27263 @ 95%CL (1 toyMC)
median expected limit: r < 5.27263 @ 95%CL (1 toyMC)
   68% expected band : 5.27263 < r < 5.27263
   95% expected band : 5.27263 < r < 5.27263
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2031571559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.9253 +/- 0.00741432 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.9253 @ 95%CL (1 toyMC)
median expected limit: r < 3.9253 @ 95%CL (1 toyMC)
   68% expected band : 3.9253 < r < 3.9253
   95% expected band : 3.9253 < r < 3.9253
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 151476241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.82273 +/- 0.00995513 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.82273 @ 95%CL (1 toyMC)
median expected limit: r < 5.82273 @ 95%CL (1 toyMC)
   68% expected band : 5.82273 < r < 5.82273
   95% expected band : 5.82273 < r < 5.82273
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1144168636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.33325 +/- 0.0129709 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.33325 @ 95%CL (1 toyMC)
median expected limit: r < 7.33325 @ 95%CL (1 toyMC)
   68% expected band : 7.33325 < r < 7.33325
   95% expected band : 7.33325 < r < 7.33325
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1483403619
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87193 +/- 0.00797742 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.87193 @ 95%CL (1 toyMC)
median expected limit: r < 2.87193 @ 95%CL (1 toyMC)
   68% expected band : 2.87193 < r < 2.87193
   95% expected band : 2.87193 < r < 2.87193
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2063537767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53872 +/- 0.00688061 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.53872 @ 95%CL (1 toyMC)
median expected limit: r < 2.53872 @ 95%CL (1 toyMC)
   68% expected band : 2.53872 < r < 2.53872
   95% expected band : 2.53872 < r < 2.53872
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 603822939
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.3227 +/- 0.00858233 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.3227 @ 95%CL (1 toyMC)
median expected limit: r < 4.3227 @ 95%CL (1 toyMC)
   68% expected band : 4.3227 < r < 4.3227
   95% expected band : 4.3227 < r < 4.3227
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1247154720
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.29292 +/- 0.00703719 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.29292 @ 95%CL (1 toyMC)
median expected limit: r < 3.29292 @ 95%CL (1 toyMC)
   68% expected band : 3.29292 < r < 3.29292
   95% expected band : 3.29292 < r < 3.29292
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -841939406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.41553 +/- 0.0116493 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.41553 @ 95%CL (1 toyMC)
median expected limit: r < 6.41553 @ 95%CL (1 toyMC)
   68% expected band : 6.41553 < r < 6.41553
   95% expected band : 6.41553 < r < 6.41553
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -704307034
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.73223 +/- 0.00660199 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.73223 @ 95%CL (1 toyMC)
median expected limit: r < 2.73223 @ 95%CL (1 toyMC)
   68% expected band : 2.73223 < r < 2.73223
   95% expected band : 2.73223 < r < 2.73223
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -146536886
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.12203 +/- 0.0112851 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.12203 @ 95%CL (1 toyMC)
median expected limit: r < 4.12203 @ 95%CL (1 toyMC)
   68% expected band : 4.12203 < r < 4.12203
   95% expected band : 4.12203 < r < 4.12203
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -393398824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.83522 +/- 0.0078665 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.83522 @ 95%CL (1 toyMC)
median expected limit: r < 2.83522 @ 95%CL (1 toyMC)
   68% expected band : 2.83522 < r < 2.83522
   95% expected band : 2.83522 < r < 2.83522
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1046118597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.08472 +/- 0.0104341 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.08472 @ 95%CL (1 toyMC)
median expected limit: r < 5.08472 @ 95%CL (1 toyMC)
   68% expected band : 5.08472 < r < 5.08472
   95% expected band : 5.08472 < r < 5.08472
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 609598894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.35596 +/- 0.00919187 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.35596 @ 95%CL (1 toyMC)
median expected limit: r < 3.35596 @ 95%CL (1 toyMC)
   68% expected band : 3.35596 < r < 3.35596
   95% expected band : 3.35596 < r < 3.35596
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1947331212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.37407 +/- 0.00771995 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.37407 @ 95%CL (1 toyMC)
median expected limit: r < 3.37407 @ 95%CL (1 toyMC)
   68% expected band : 3.37407 < r < 3.37407
   95% expected band : 3.37407 < r < 3.37407
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1731900384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.84001 +/- 0.00668336 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.84001 @ 95%CL (1 toyMC)
median expected limit: r < 2.84001 @ 95%CL (1 toyMC)
   68% expected band : 2.84001 < r < 2.84001
   95% expected band : 2.84001 < r < 2.84001
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -698269637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93332 +/- 0.00827689 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.93332 @ 95%CL (1 toyMC)
median expected limit: r < 3.93332 @ 95%CL (1 toyMC)
   68% expected band : 3.93332 < r < 3.93332
   95% expected band : 3.93332 < r < 3.93332
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 634046269
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.70576 +/- 0.0124983 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.70576 @ 95%CL (1 toyMC)
median expected limit: r < 4.70576 @ 95%CL (1 toyMC)
   68% expected band : 4.70576 < r < 4.70576
   95% expected band : 4.70576 < r < 4.70576
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -436139322
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93083 +/- 0.00932242 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.93083 @ 95%CL (1 toyMC)
median expected limit: r < 2.93083 @ 95%CL (1 toyMC)
   68% expected band : 2.93083 < r < 2.93083
   95% expected band : 2.93083 < r < 2.93083
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 30462886
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.83009 +/- 0.0113564 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.83009 @ 95%CL (1 toyMC)
median expected limit: r < 5.83009 @ 95%CL (1 toyMC)
   68% expected band : 5.83009 < r < 5.83009
   95% expected band : 5.83009 < r < 5.83009
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 852458795
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.85588 +/- 0.00647666 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.85588 @ 95%CL (1 toyMC)
median expected limit: r < 3.85588 @ 95%CL (1 toyMC)
   68% expected band : 3.85588 < r < 3.85588
   95% expected band : 3.85588 < r < 3.85588
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2046126777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27286 +/- 0.00876826 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.27286 @ 95%CL (1 toyMC)
median expected limit: r < 3.27286 @ 95%CL (1 toyMC)
   68% expected band : 3.27286 < r < 3.27286
   95% expected band : 3.27286 < r < 3.27286
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -450067359
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27193 +/- 0.00934533 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.27193 @ 95%CL (1 toyMC)
median expected limit: r < 3.27193 @ 95%CL (1 toyMC)
   68% expected band : 3.27193 < r < 3.27193
   95% expected band : 3.27193 < r < 3.27193
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1290808835
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.11159 +/- 0.00883317 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.11159 @ 95%CL (1 toyMC)
median expected limit: r < 3.11159 @ 95%CL (1 toyMC)
   68% expected band : 3.11159 < r < 3.11159
   95% expected band : 3.11159 < r < 3.11159
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -788482540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.33497 +/- 0.00936841 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.33497 @ 95%CL (1 toyMC)
median expected limit: r < 5.33497 @ 95%CL (1 toyMC)
   68% expected band : 5.33497 < r < 5.33497
   95% expected band : 5.33497 < r < 5.33497
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1447787386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59945 +/- 0.00797296 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.59945 @ 95%CL (1 toyMC)
median expected limit: r < 2.59945 @ 95%CL (1 toyMC)
   68% expected band : 2.59945 < r < 2.59945
   95% expected band : 2.59945 < r < 2.59945
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 313581163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49365 +/- 0.00632481 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.49365 @ 95%CL (1 toyMC)
median expected limit: r < 2.49365 @ 95%CL (1 toyMC)
   68% expected band : 2.49365 < r < 2.49365
   95% expected band : 2.49365 < r < 2.49365
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 316089343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.90849 +/- 0.0106305 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.90849 @ 95%CL (1 toyMC)
median expected limit: r < 4.90849 @ 95%CL (1 toyMC)
   68% expected band : 4.90849 < r < 4.90849
   95% expected band : 4.90849 < r < 4.90849
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 840720169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.71553 +/- 0.00656675 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.71553 @ 95%CL (1 toyMC)
median expected limit: r < 2.71553 @ 95%CL (1 toyMC)
   68% expected band : 2.71553 < r < 2.71553
   95% expected band : 2.71553 < r < 2.71553
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -13016099
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05779 +/- 0.00703343 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.05779 @ 95%CL (1 toyMC)
median expected limit: r < 3.05779 @ 95%CL (1 toyMC)
   68% expected band : 3.05779 < r < 3.05779
   95% expected band : 3.05779 < r < 3.05779
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 564202962
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.85784 +/- 0.0100259 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.85784 @ 95%CL (1 toyMC)
median expected limit: r < 3.85784 @ 95%CL (1 toyMC)
   68% expected band : 3.85784 < r < 3.85784
   95% expected band : 3.85784 < r < 3.85784
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -749052924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.53387 +/- 0.00790285 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.53387 @ 95%CL (1 toyMC)
median expected limit: r < 3.53387 @ 95%CL (1 toyMC)
   68% expected band : 3.53387 < r < 3.53387
   95% expected band : 3.53387 < r < 3.53387
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1044872116
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.14941 +/- 0.00928939 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.14941 @ 95%CL (1 toyMC)
median expected limit: r < 4.14941 @ 95%CL (1 toyMC)
   68% expected band : 4.14941 < r < 4.14941
   95% expected band : 4.14941 < r < 4.14941
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1874352406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.67084 +/- 0.00922671 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.67084 @ 95%CL (1 toyMC)
median expected limit: r < 4.67084 @ 95%CL (1 toyMC)
   68% expected band : 4.67084 < r < 4.67084
   95% expected band : 4.67084 < r < 4.67084
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1943871541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.52833 +/- 0.00928488 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.52833 @ 95%CL (1 toyMC)
median expected limit: r < 3.52833 @ 95%CL (1 toyMC)
   68% expected band : 3.52833 < r < 3.52833
   95% expected band : 3.52833 < r < 3.52833
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1837131053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.85866 +/- 0.00832538 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.85866 @ 95%CL (1 toyMC)
median expected limit: r < 3.85866 @ 95%CL (1 toyMC)
   68% expected band : 3.85866 < r < 3.85866
   95% expected band : 3.85866 < r < 3.85866
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1152226718
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.48806 +/- 0.00779348 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.48806 @ 95%CL (1 toyMC)
median expected limit: r < 4.48806 @ 95%CL (1 toyMC)
   68% expected band : 4.48806 < r < 4.48806
   95% expected band : 4.48806 < r < 4.48806
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1800779179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.57975 +/- 0.00685667 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.57975 @ 95%CL (1 toyMC)
median expected limit: r < 2.57975 @ 95%CL (1 toyMC)
   68% expected band : 2.57975 < r < 2.57975
   95% expected band : 2.57975 < r < 2.57975
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1425989860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.34635 +/- 0.00587443 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.34635 @ 95%CL (1 toyMC)
median expected limit: r < 2.34635 @ 95%CL (1 toyMC)
   68% expected band : 2.34635 < r < 2.34635
   95% expected band : 2.34635 < r < 2.34635
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -947847681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.34005 +/- 0.0115598 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.34005 @ 95%CL (1 toyMC)
median expected limit: r < 3.34005 @ 95%CL (1 toyMC)
   68% expected band : 3.34005 < r < 3.34005
   95% expected band : 3.34005 < r < 3.34005
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 752853903
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.48954 +/- 0.0119083 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.48954 @ 95%CL (1 toyMC)
median expected limit: r < 4.48954 @ 95%CL (1 toyMC)
   68% expected band : 4.48954 < r < 4.48954
   95% expected band : 4.48954 < r < 4.48954
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 884944937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.14228 +/- 0.0066969 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.14228 @ 95%CL (1 toyMC)
median expected limit: r < 3.14228 @ 95%CL (1 toyMC)
   68% expected band : 3.14228 < r < 3.14228
   95% expected band : 3.14228 < r < 3.14228
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 406434625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.56734 +/- 0.0101649 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.56734 @ 95%CL (1 toyMC)
median expected limit: r < 3.56734 @ 95%CL (1 toyMC)
   68% expected band : 3.56734 < r < 3.56734
   95% expected band : 3.56734 < r < 3.56734
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -545846552
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.55222 +/- 0.00771283 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.55222 @ 95%CL (1 toyMC)
median expected limit: r < 2.55222 @ 95%CL (1 toyMC)
   68% expected band : 2.55222 < r < 2.55222
   95% expected band : 2.55222 < r < 2.55222
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1028952666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.00174 +/- 0.00798307 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.00174 @ 95%CL (1 toyMC)
median expected limit: r < 5.00174 @ 95%CL (1 toyMC)
   68% expected band : 5.00174 < r < 5.00174
   95% expected band : 5.00174 < r < 5.00174
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2683432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.01679 +/- 0.00793503 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.01679 @ 95%CL (1 toyMC)
median expected limit: r < 3.01679 @ 95%CL (1 toyMC)
   68% expected band : 3.01679 < r < 3.01679
   95% expected band : 3.01679 < r < 3.01679
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1028952666.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1044872116.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1046118597.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1133106972.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1141520166.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1144168636.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1152226718.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1154219253.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1271999562.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-13016099.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1396016387.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1425989860.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1447787386.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-146536886.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-147932197.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1483403619.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-150450255.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1561610957.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-160933294.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1639072833.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1707014260.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1800779179.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1834929618.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1952080037.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1962902125.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-2031571559.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-2046126777.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-2067788327.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-2117380997.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-2683432.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-314915519.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-326157071.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-393398824.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-397027475.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-436139322.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-438799558.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-450067359.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-489647702.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-545846552.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-574798102.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-638471888.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-639461179.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-698269637.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-704307034.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-731937019.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-749052924.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-751444806.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-788482540.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-817552499.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-841939406.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.-860023764.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.-92354233.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.-947847681.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1009795038.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1121245050.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1138458975.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1173388510.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.121604951.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1240264554.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1247154720.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1290808835.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1336143868.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1375341147.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1399197043.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.151476241.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1570206302.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1571173657.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1731900384.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1837131053.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1849381394.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1867189084.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1874352406.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1943871541.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1947331212.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.201736229.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.2063537767.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.2120597577.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.229134477.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.284107224.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.287010845.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.30462886.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.313581163.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.316089343.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.406434625.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.426049788.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.491889871.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.513744406.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.562427149.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.564202962.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.603822939.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.609598894.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.628371530.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.634046269.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.679814061.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.733245449.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.752853903.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.840720169.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.852458795.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.884944937.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.907312832.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1806304079
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07948 +/- 0.00592428 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.07948 @ 95%CL (1 toyMC)
median expected limit: r < 3.07948 @ 95%CL (1 toyMC)
   68% expected band : 3.07948 < r < 3.07948
   95% expected band : 3.07948 < r < 3.07948
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1127107891
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.18944 +/- 0.00672049 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.18944 @ 95%CL (1 toyMC)
median expected limit: r < 5.18944 @ 95%CL (1 toyMC)
   68% expected band : 5.18944 < r < 5.18944
   95% expected band : 5.18944 < r < 5.18944
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 899944928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.03231 +/- 0.00661842 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.03231 @ 95%CL (1 toyMC)
median expected limit: r < 5.03231 @ 95%CL (1 toyMC)
   68% expected band : 5.03231 < r < 5.03231
   95% expected band : 5.03231 < r < 5.03231
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2094377862
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47453 +/- 0.00638233 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.47453 @ 95%CL (1 toyMC)
median expected limit: r < 2.47453 @ 95%CL (1 toyMC)
   68% expected band : 2.47453 < r < 2.47453
   95% expected band : 2.47453 < r < 2.47453
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -486161449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.06514 +/- 0.00701353 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.06514 @ 95%CL (1 toyMC)
median expected limit: r < 4.06514 @ 95%CL (1 toyMC)
   68% expected band : 4.06514 < r < 4.06514
   95% expected band : 4.06514 < r < 4.06514
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1203994866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99627 +/- 0.00515706 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.99627 @ 95%CL (1 toyMC)
median expected limit: r < 2.99627 @ 95%CL (1 toyMC)
   68% expected band : 2.99627 < r < 2.99627
   95% expected band : 2.99627 < r < 2.99627
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1608916542
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27276 +/- 0.0061016 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.27276 @ 95%CL (1 toyMC)
median expected limit: r < 2.27276 @ 95%CL (1 toyMC)
   68% expected band : 2.27276 < r < 2.27276
   95% expected band : 2.27276 < r < 2.27276
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1766227750
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.75532 +/- 0.0087852 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.75532 @ 95%CL (1 toyMC)
median expected limit: r < 3.75532 @ 95%CL (1 toyMC)
   68% expected band : 3.75532 < r < 3.75532
   95% expected band : 3.75532 < r < 3.75532
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 188930738
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.39927 +/- 0.00756613 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.39927 @ 95%CL (1 toyMC)
median expected limit: r < 3.39927 @ 95%CL (1 toyMC)
   68% expected band : 3.39927 < r < 3.39927
   95% expected band : 3.39927 < r < 3.39927
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 22403471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4202 +/- 0.00635821 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.4202 @ 95%CL (1 toyMC)
median expected limit: r < 3.4202 @ 95%CL (1 toyMC)
   68% expected band : 3.4202 < r < 3.4202
   95% expected band : 3.4202 < r < 3.4202
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 279268345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09533 +/- 0.00627866 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.09533 @ 95%CL (1 toyMC)
median expected limit: r < 3.09533 @ 95%CL (1 toyMC)
   68% expected band : 3.09533 < r < 3.09533
   95% expected band : 3.09533 < r < 3.09533
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 190361785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33024 +/- 0.00588738 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.33024 @ 95%CL (1 toyMC)
median expected limit: r < 2.33024 @ 95%CL (1 toyMC)
   68% expected band : 2.33024 < r < 2.33024
   95% expected band : 2.33024 < r < 2.33024
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1161657511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.38753 +/- 0.00655386 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.38753 @ 95%CL (1 toyMC)
median expected limit: r < 2.38753 @ 95%CL (1 toyMC)
   68% expected band : 2.38753 < r < 2.38753
   95% expected band : 2.38753 < r < 2.38753
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1356848747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05818 +/- 0.00635848 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.05818 @ 95%CL (1 toyMC)
median expected limit: r < 3.05818 @ 95%CL (1 toyMC)
   68% expected band : 3.05818 < r < 3.05818
   95% expected band : 3.05818 < r < 3.05818
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 669202098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.48592 +/- 0.00657286 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.48592 @ 95%CL (1 toyMC)
median expected limit: r < 3.48592 @ 95%CL (1 toyMC)
   68% expected band : 3.48592 < r < 3.48592
   95% expected band : 3.48592 < r < 3.48592
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2097202548
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.80909 +/- 0.00741345 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.80909 @ 95%CL (1 toyMC)
median expected limit: r < 2.80909 @ 95%CL (1 toyMC)
   68% expected band : 2.80909 < r < 2.80909
   95% expected band : 2.80909 < r < 2.80909
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1534279940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.73204 +/- 0.00837322 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.73204 @ 95%CL (1 toyMC)
median expected limit: r < 4.73204 @ 95%CL (1 toyMC)
   68% expected band : 4.73204 < r < 4.73204
   95% expected band : 4.73204 < r < 4.73204
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1217199937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.52859 +/- 0.00580688 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.52859 @ 95%CL (1 toyMC)
median expected limit: r < 4.52859 @ 95%CL (1 toyMC)
   68% expected band : 4.52859 < r < 4.52859
   95% expected band : 4.52859 < r < 4.52859
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -775723999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92495 +/- 0.00578799 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.92495 @ 95%CL (1 toyMC)
median expected limit: r < 2.92495 @ 95%CL (1 toyMC)
   68% expected band : 2.92495 < r < 2.92495
   95% expected band : 2.92495 < r < 2.92495
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1883515468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.74608 +/- 0.00645699 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.74608 @ 95%CL (1 toyMC)
median expected limit: r < 2.74608 @ 95%CL (1 toyMC)
   68% expected band : 2.74608 < r < 2.74608
   95% expected band : 2.74608 < r < 2.74608
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -89014760
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0815 +/- 0.00770198 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.0815 @ 95%CL (1 toyMC)
median expected limit: r < 3.0815 @ 95%CL (1 toyMC)
   68% expected band : 3.0815 < r < 3.0815
   95% expected band : 3.0815 < r < 3.0815
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1845353973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.81721 +/- 0.00630941 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.81721 @ 95%CL (1 toyMC)
median expected limit: r < 2.81721 @ 95%CL (1 toyMC)
   68% expected band : 2.81721 < r < 2.81721
   95% expected band : 2.81721 < r < 2.81721
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1324969563
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.07836 +/- 0.00608535 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.07836 @ 95%CL (1 toyMC)
median expected limit: r < 4.07836 @ 95%CL (1 toyMC)
   68% expected band : 4.07836 < r < 4.07836
   95% expected band : 4.07836 < r < 4.07836
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1677117030
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43307 +/- 0.00601894 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.43307 @ 95%CL (1 toyMC)
median expected limit: r < 2.43307 @ 95%CL (1 toyMC)
   68% expected band : 2.43307 < r < 2.43307
   95% expected band : 2.43307 < r < 2.43307
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1138315843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.39727 +/- 0.00736278 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.39727 @ 95%CL (1 toyMC)
median expected limit: r < 3.39727 @ 95%CL (1 toyMC)
   68% expected band : 3.39727 < r < 3.39727
   95% expected band : 3.39727 < r < 3.39727
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1922205895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.55792 +/- 0.00601348 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.55792 @ 95%CL (1 toyMC)
median expected limit: r < 2.55792 @ 95%CL (1 toyMC)
   68% expected band : 2.55792 < r < 2.55792
   95% expected band : 2.55792 < r < 2.55792
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 628511832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.14361 +/- 0.00576458 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.14361 @ 95%CL (1 toyMC)
median expected limit: r < 4.14361 @ 95%CL (1 toyMC)
   68% expected band : 4.14361 < r < 4.14361
   95% expected band : 4.14361 < r < 4.14361
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1725392196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.26448 +/- 0.00684759 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.26448 @ 95%CL (1 toyMC)
median expected limit: r < 4.26448 @ 95%CL (1 toyMC)
   68% expected band : 4.26448 < r < 4.26448
   95% expected band : 4.26448 < r < 4.26448
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2056073266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.37168 +/- 0.00625843 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.37168 @ 95%CL (1 toyMC)
median expected limit: r < 3.37168 @ 95%CL (1 toyMC)
   68% expected band : 3.37168 < r < 3.37168
   95% expected band : 3.37168 < r < 3.37168
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1976700009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88643 +/- 0.00745609 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.88643 @ 95%CL (1 toyMC)
median expected limit: r < 2.88643 @ 95%CL (1 toyMC)
   68% expected band : 2.88643 < r < 2.88643
   95% expected band : 2.88643 < r < 2.88643
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1997355052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.03066 +/- 0.00743701 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.03066 @ 95%CL (1 toyMC)
median expected limit: r < 4.03066 @ 95%CL (1 toyMC)
   68% expected band : 4.03066 < r < 4.03066
   95% expected band : 4.03066 < r < 4.03066
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -879570746
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2652 +/- 0.00566936 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.2652 @ 95%CL (1 toyMC)
median expected limit: r < 2.2652 @ 95%CL (1 toyMC)
   68% expected band : 2.2652 < r < 2.2652
   95% expected band : 2.2652 < r < 2.2652
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1962344266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.53088 +/- 0.00885641 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.53088 @ 95%CL (1 toyMC)
median expected limit: r < 3.53088 @ 95%CL (1 toyMC)
   68% expected band : 3.53088 < r < 3.53088
   95% expected band : 3.53088 < r < 3.53088
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 20687055
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.25633 +/- 0.00597981 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.25633 @ 95%CL (1 toyMC)
median expected limit: r < 2.25633 @ 95%CL (1 toyMC)
   68% expected band : 2.25633 < r < 2.25633
   95% expected band : 2.25633 < r < 2.25633
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -748286642
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88216 +/- 0.00529465 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.88216 @ 95%CL (1 toyMC)
median expected limit: r < 2.88216 @ 95%CL (1 toyMC)
   68% expected band : 2.88216 < r < 2.88216
   95% expected band : 2.88216 < r < 2.88216
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1809763640
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.04204 +/- 0.00743945 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.04204 @ 95%CL (1 toyMC)
median expected limit: r < 4.04204 @ 95%CL (1 toyMC)
   68% expected band : 4.04204 < r < 4.04204
   95% expected band : 4.04204 < r < 4.04204
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1206104500
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.37856 +/- 0.00632959 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.37856 @ 95%CL (1 toyMC)
median expected limit: r < 4.37856 @ 95%CL (1 toyMC)
   68% expected band : 4.37856 < r < 4.37856
   95% expected band : 4.37856 < r < 4.37856
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -459103939
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.6247 +/- 0.0066133 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.6247 @ 95%CL (1 toyMC)
median expected limit: r < 4.6247 @ 95%CL (1 toyMC)
   68% expected band : 4.6247 < r < 4.6247
   95% expected band : 4.6247 < r < 4.6247
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1742381725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.14984 +/- 0.00693762 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.14984 @ 95%CL (1 toyMC)
median expected limit: r < 3.14984 @ 95%CL (1 toyMC)
   68% expected band : 3.14984 < r < 3.14984
   95% expected band : 3.14984 < r < 3.14984
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1885025730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93796 +/- 0.00626887 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.93796 @ 95%CL (1 toyMC)
median expected limit: r < 2.93796 @ 95%CL (1 toyMC)
   68% expected band : 2.93796 < r < 2.93796
   95% expected band : 2.93796 < r < 2.93796
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 190711821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.31706 +/- 0.00766755 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.31706 @ 95%CL (1 toyMC)
median expected limit: r < 3.31706 @ 95%CL (1 toyMC)
   68% expected band : 3.31706 < r < 3.31706
   95% expected band : 3.31706 < r < 3.31706
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1428727107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99074 +/- 0.00638481 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.99074 @ 95%CL (1 toyMC)
median expected limit: r < 2.99074 @ 95%CL (1 toyMC)
   68% expected band : 2.99074 < r < 2.99074
   95% expected band : 2.99074 < r < 2.99074
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1664349002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52914 +/- 0.00603482 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.52914 @ 95%CL (1 toyMC)
median expected limit: r < 2.52914 @ 95%CL (1 toyMC)
   68% expected band : 2.52914 < r < 2.52914
   95% expected band : 2.52914 < r < 2.52914
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1383027748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.723 +/- 0.0106438 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.723 @ 95%CL (1 toyMC)
median expected limit: r < 7.723 @ 95%CL (1 toyMC)
   68% expected band : 7.723 < r < 7.723
   95% expected band : 7.723 < r < 7.723
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 109360403
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.67543 +/- 0.00734777 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.67543 @ 95%CL (1 toyMC)
median expected limit: r < 4.67543 @ 95%CL (1 toyMC)
   68% expected band : 4.67543 < r < 4.67543
   95% expected band : 4.67543 < r < 4.67543
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1430589005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.70093 +/- 0.0070258 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.70093 @ 95%CL (1 toyMC)
median expected limit: r < 3.70093 @ 95%CL (1 toyMC)
   68% expected band : 3.70093 < r < 3.70093
   95% expected band : 3.70093 < r < 3.70093
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1248192540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.41468 +/- 0.00800833 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.41468 @ 95%CL (1 toyMC)
median expected limit: r < 3.41468 @ 95%CL (1 toyMC)
   68% expected band : 3.41468 < r < 3.41468
   95% expected band : 3.41468 < r < 3.41468
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1374222548
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99791 +/- 0.00648189 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.99791 @ 95%CL (1 toyMC)
median expected limit: r < 2.99791 @ 95%CL (1 toyMC)
   68% expected band : 2.99791 < r < 2.99791
   95% expected band : 2.99791 < r < 2.99791
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 431205997
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.85791 +/- 0.00666259 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.85791 @ 95%CL (1 toyMC)
median expected limit: r < 4.85791 @ 95%CL (1 toyMC)
   68% expected band : 4.85791 < r < 4.85791
   95% expected band : 4.85791 < r < 4.85791
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -270726326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.68194 +/- 0.00742703 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.68194 @ 95%CL (1 toyMC)
median expected limit: r < 3.68194 @ 95%CL (1 toyMC)
   68% expected band : 3.68194 < r < 3.68194
   95% expected band : 3.68194 < r < 3.68194
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -892642769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.96056 +/- 0.00572822 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.96056 @ 95%CL (1 toyMC)
median expected limit: r < 2.96056 @ 95%CL (1 toyMC)
   68% expected band : 2.96056 < r < 2.96056
   95% expected band : 2.96056 < r < 2.96056
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1151033260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.32012 +/- 0.0097923 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.32012 @ 95%CL (1 toyMC)
median expected limit: r < 5.32012 @ 95%CL (1 toyMC)
   68% expected band : 5.32012 < r < 5.32012
   95% expected band : 5.32012 < r < 5.32012
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1044385389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32027 +/- 0.00567887 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.32027 @ 95%CL (1 toyMC)
median expected limit: r < 2.32027 @ 95%CL (1 toyMC)
   68% expected band : 2.32027 < r < 2.32027
   95% expected band : 2.32027 < r < 2.32027
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1281516170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.606 +/- 0.00588056 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.606 @ 95%CL (1 toyMC)
median expected limit: r < 2.606 @ 95%CL (1 toyMC)
   68% expected band : 2.606 < r < 2.606
   95% expected band : 2.606 < r < 2.606
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1649952408
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.81621 +/- 0.00680732 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.81621 @ 95%CL (1 toyMC)
median expected limit: r < 3.81621 @ 95%CL (1 toyMC)
   68% expected band : 3.81621 < r < 3.81621
   95% expected band : 3.81621 < r < 3.81621
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 684769186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.47181 +/- 0.00693213 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.47181 @ 95%CL (1 toyMC)
median expected limit: r < 4.47181 @ 95%CL (1 toyMC)
   68% expected band : 4.47181 < r < 4.47181
   95% expected band : 4.47181 < r < 4.47181
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2000427894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65272 +/- 0.00581951 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.65272 @ 95%CL (1 toyMC)
median expected limit: r < 2.65272 @ 95%CL (1 toyMC)
   68% expected band : 2.65272 < r < 2.65272
   95% expected band : 2.65272 < r < 2.65272
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 835236946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.84031 +/- 0.00582932 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.84031 @ 95%CL (1 toyMC)
median expected limit: r < 3.84031 @ 95%CL (1 toyMC)
   68% expected band : 3.84031 < r < 3.84031
   95% expected band : 3.84031 < r < 3.84031
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1170617824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.53084 +/- 0.00724555 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.53084 @ 95%CL (1 toyMC)
median expected limit: r < 3.53084 @ 95%CL (1 toyMC)
   68% expected band : 3.53084 < r < 3.53084
   95% expected band : 3.53084 < r < 3.53084
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 901809651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.79891 +/- 0.00708281 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.79891 @ 95%CL (1 toyMC)
median expected limit: r < 3.79891 @ 95%CL (1 toyMC)
   68% expected band : 3.79891 < r < 3.79891
   95% expected band : 3.79891 < r < 3.79891
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2118120861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77432 +/- 0.0080753 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.77432 @ 95%CL (1 toyMC)
median expected limit: r < 2.77432 @ 95%CL (1 toyMC)
   68% expected band : 2.77432 < r < 2.77432
   95% expected band : 2.77432 < r < 2.77432
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1867093910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.76804 +/- 0.00805343 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.76804 @ 95%CL (1 toyMC)
median expected limit: r < 3.76804 @ 95%CL (1 toyMC)
   68% expected band : 3.76804 < r < 3.76804
   95% expected band : 3.76804 < r < 3.76804
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1733848626
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65665 +/- 0.00674734 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.65665 @ 95%CL (1 toyMC)
median expected limit: r < 2.65665 @ 95%CL (1 toyMC)
   68% expected band : 2.65665 < r < 2.65665
   95% expected band : 2.65665 < r < 2.65665
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2075234753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92126 +/- 0.00707213 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.92126 @ 95%CL (1 toyMC)
median expected limit: r < 3.92126 @ 95%CL (1 toyMC)
   68% expected band : 3.92126 < r < 3.92126
   95% expected band : 3.92126 < r < 3.92126
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 53469528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.86567 +/- 0.00587683 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.86567 @ 95%CL (1 toyMC)
median expected limit: r < 2.86567 @ 95%CL (1 toyMC)
   68% expected band : 2.86567 < r < 2.86567
   95% expected band : 2.86567 < r < 2.86567
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -502237555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.84088 +/- 0.00753082 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.84088 @ 95%CL (1 toyMC)
median expected limit: r < 3.84088 @ 95%CL (1 toyMC)
   68% expected band : 3.84088 < r < 3.84088
   95% expected band : 3.84088 < r < 3.84088
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1814814316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4621 +/- 0.00699307 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.4621 @ 95%CL (1 toyMC)
median expected limit: r < 2.4621 @ 95%CL (1 toyMC)
   68% expected band : 2.4621 < r < 2.4621
   95% expected band : 2.4621 < r < 2.4621
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -471742208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59728 +/- 0.00543203 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.59728 @ 95%CL (1 toyMC)
median expected limit: r < 2.59728 @ 95%CL (1 toyMC)
   68% expected band : 2.59728 < r < 2.59728
   95% expected band : 2.59728 < r < 2.59728
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1653812544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.24668 +/- 0.00523084 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.24668 @ 95%CL (1 toyMC)
median expected limit: r < 2.24668 @ 95%CL (1 toyMC)
   68% expected band : 2.24668 < r < 2.24668
   95% expected band : 2.24668 < r < 2.24668
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 120104441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.25513 +/- 0.00566474 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.25513 @ 95%CL (1 toyMC)
median expected limit: r < 2.25513 @ 95%CL (1 toyMC)
   68% expected band : 2.25513 < r < 2.25513
   95% expected band : 2.25513 < r < 2.25513
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1069084473
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.29571 +/- 0.00631456 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.29571 @ 95%CL (1 toyMC)
median expected limit: r < 3.29571 @ 95%CL (1 toyMC)
   68% expected band : 3.29571 < r < 3.29571
   95% expected band : 3.29571 < r < 3.29571
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -731509271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.67297 +/- 0.00726022 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.67297 @ 95%CL (1 toyMC)
median expected limit: r < 3.67297 @ 95%CL (1 toyMC)
   68% expected band : 3.67297 < r < 3.67297
   95% expected band : 3.67297 < r < 3.67297
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 919914393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08776 +/- 0.00674338 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.08776 @ 95%CL (1 toyMC)
median expected limit: r < 3.08776 @ 95%CL (1 toyMC)
   68% expected band : 3.08776 < r < 3.08776
   95% expected band : 3.08776 < r < 3.08776
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1197494734
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.98833 +/- 0.00750599 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.98833 @ 95%CL (1 toyMC)
median expected limit: r < 3.98833 @ 95%CL (1 toyMC)
   68% expected band : 3.98833 < r < 3.98833
   95% expected band : 3.98833 < r < 3.98833
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1533831279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.97695 +/- 0.00607939 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.97695 @ 95%CL (1 toyMC)
median expected limit: r < 2.97695 @ 95%CL (1 toyMC)
   68% expected band : 2.97695 < r < 2.97695
   95% expected band : 2.97695 < r < 2.97695
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1940420385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.56255 +/- 0.007103 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.56255 @ 95%CL (1 toyMC)
median expected limit: r < 2.56255 @ 95%CL (1 toyMC)
   68% expected band : 2.56255 < r < 2.56255
   95% expected band : 2.56255 < r < 2.56255
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1796806386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.74984 +/- 0.0067695 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.74984 @ 95%CL (1 toyMC)
median expected limit: r < 2.74984 @ 95%CL (1 toyMC)
   68% expected band : 2.74984 < r < 2.74984
   95% expected band : 2.74984 < r < 2.74984
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1879792196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63716 +/- 0.0065302 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63716 @ 95%CL (1 toyMC)
median expected limit: r < 2.63716 @ 95%CL (1 toyMC)
   68% expected band : 2.63716 < r < 2.63716
   95% expected band : 2.63716 < r < 2.63716
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 828530647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4856 +/- 0.0054183 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.4856 @ 95%CL (1 toyMC)
median expected limit: r < 3.4856 @ 95%CL (1 toyMC)
   68% expected band : 3.4856 < r < 3.4856
   95% expected band : 3.4856 < r < 3.4856
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -570680173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.50581 +/- 0.00758001 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.50581 @ 95%CL (1 toyMC)
median expected limit: r < 3.50581 @ 95%CL (1 toyMC)
   68% expected band : 3.50581 < r < 3.50581
   95% expected band : 3.50581 < r < 3.50581
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1443353660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.08164 +/- 0.0078995 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.08164 @ 95%CL (1 toyMC)
median expected limit: r < 4.08164 @ 95%CL (1 toyMC)
   68% expected band : 4.08164 < r < 4.08164
   95% expected band : 4.08164 < r < 4.08164
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -326382929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.23717 +/- 0.00895875 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.23717 @ 95%CL (1 toyMC)
median expected limit: r < 4.23717 @ 95%CL (1 toyMC)
   68% expected band : 4.23717 < r < 4.23717
   95% expected band : 4.23717 < r < 4.23717
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1072270373
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.95944 +/- 0.00616654 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.95944 @ 95%CL (1 toyMC)
median expected limit: r < 2.95944 @ 95%CL (1 toyMC)
   68% expected band : 2.95944 < r < 2.95944
   95% expected band : 2.95944 < r < 2.95944
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1488087634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.68597 +/- 0.00700775 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.68597 @ 95%CL (1 toyMC)
median expected limit: r < 4.68597 @ 95%CL (1 toyMC)
   68% expected band : 4.68597 < r < 4.68597
   95% expected band : 4.68597 < r < 4.68597
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -258069691
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.37394 +/- 0.0092077 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.37394 @ 95%CL (1 toyMC)
median expected limit: r < 5.37394 @ 95%CL (1 toyMC)
   68% expected band : 5.37394 < r < 5.37394
   95% expected band : 5.37394 < r < 5.37394
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -744154501
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.72738 +/- 0.00762782 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.72738 @ 95%CL (1 toyMC)
median expected limit: r < 3.72738 @ 95%CL (1 toyMC)
   68% expected band : 3.72738 < r < 3.72738
   95% expected band : 3.72738 < r < 3.72738
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1389454427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87057 +/- 0.00639126 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.87057 @ 95%CL (1 toyMC)
median expected limit: r < 2.87057 @ 95%CL (1 toyMC)
   68% expected band : 2.87057 < r < 2.87057
   95% expected band : 2.87057 < r < 2.87057
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 109312980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.31879 +/- 0.00552575 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.31879 @ 95%CL (1 toyMC)
median expected limit: r < 2.31879 @ 95%CL (1 toyMC)
   68% expected band : 2.31879 < r < 2.31879
   95% expected band : 2.31879 < r < 2.31879
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -10803084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23008 +/- 0.0054833 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.23008 @ 95%CL (1 toyMC)
median expected limit: r < 3.23008 @ 95%CL (1 toyMC)
   68% expected band : 3.23008 < r < 3.23008
   95% expected band : 3.23008 < r < 3.23008
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1296952134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.60404 +/- 0.00407835 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.60404 @ 95%CL (1 toyMC)
median expected limit: r < 3.60404 @ 95%CL (1 toyMC)
   68% expected band : 3.60404 < r < 3.60404
   95% expected band : 3.60404 < r < 3.60404
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 220558834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.32555 +/- 0.00869888 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.32555 @ 95%CL (1 toyMC)
median expected limit: r < 5.32555 @ 95%CL (1 toyMC)
   68% expected band : 5.32555 < r < 5.32555
   95% expected band : 5.32555 < r < 5.32555
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 517885312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91488 +/- 0.00816694 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.91488 @ 95%CL (1 toyMC)
median expected limit: r < 2.91488 @ 95%CL (1 toyMC)
   68% expected band : 2.91488 < r < 2.91488
   95% expected band : 2.91488 < r < 2.91488
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 666348834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.25494 +/- 0.00615283 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.25494 @ 95%CL (1 toyMC)
median expected limit: r < 2.25494 @ 95%CL (1 toyMC)
   68% expected band : 2.25494 < r < 2.25494
   95% expected band : 2.25494 < r < 2.25494
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2129711003
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.00278 +/- 0.0060028 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.00278 @ 95%CL (1 toyMC)
median expected limit: r < 3.00278 @ 95%CL (1 toyMC)
   68% expected band : 3.00278 < r < 3.00278
   95% expected band : 3.00278 < r < 3.00278
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1742033240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40279 +/- 0.00665916 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.40279 @ 95%CL (1 toyMC)
median expected limit: r < 2.40279 @ 95%CL (1 toyMC)
   68% expected band : 2.40279 < r < 2.40279
   95% expected band : 2.40279 < r < 2.40279
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 943124569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.96061 +/- 0.00642642 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.96061 @ 95%CL (1 toyMC)
median expected limit: r < 2.96061 @ 95%CL (1 toyMC)
   68% expected band : 2.96061 < r < 2.96061
   95% expected band : 2.96061 < r < 2.96061
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -785830936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.74768 +/- 0.00697655 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.74768 @ 95%CL (1 toyMC)
median expected limit: r < 2.74768 @ 95%CL (1 toyMC)
   68% expected band : 2.74768 < r < 2.74768
   95% expected band : 2.74768 < r < 2.74768
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -789736831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.86484 +/- 0.00609932 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.86484 @ 95%CL (1 toyMC)
median expected limit: r < 3.86484 @ 95%CL (1 toyMC)
   68% expected band : 3.86484 < r < 3.86484
   95% expected band : 3.86484 < r < 3.86484
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -415040247
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.10629 +/- 0.00717431 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.10629 @ 95%CL (1 toyMC)
median expected limit: r < 4.10629 @ 95%CL (1 toyMC)
   68% expected band : 4.10629 < r < 4.10629
   95% expected band : 4.10629 < r < 4.10629
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -245772436
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06051 +/- 0.00740645 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.06051 @ 95%CL (1 toyMC)
median expected limit: r < 3.06051 @ 95%CL (1 toyMC)
   68% expected band : 3.06051 < r < 3.06051
   95% expected band : 3.06051 < r < 3.06051
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1044385389.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1069084473.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-10803084.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1151033260.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1161657511.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1170617824.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1281516170.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1324969563.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1356848747.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1374222548.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1383027748.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1430589005.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1533831279.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1534279940.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1649952408.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1653812544.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1664349002.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1677117030.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1733848626.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1742033240.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1742381725.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1766227750.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1806304079.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1809763640.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1814814316.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1867093910.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-1879792196.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-1885025730.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-1940420385.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-1962344266.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-1976700009.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-1997355052.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-2094377862.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-245772436.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-258069691.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-270726326.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-326382929.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-415040247.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-459103939.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-471742208.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-486161449.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-502237555.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-570680173.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-731509271.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-744154501.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-748286642.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-775723999.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-785830936.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-789736831.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-879570746.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.-89014760.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.-892642769.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1072270373.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.109312980.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.109360403.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1127107891.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1138315843.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1197494734.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.120104441.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1203994866.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1206104500.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1217199937.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1248192540.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1296952134.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1389454427.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1428727107.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1443353660.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1488087634.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1608916542.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1725392196.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1796806386.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1845353973.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1883515468.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.188930738.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.190361785.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.190711821.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.1922205895.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.2000427894.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.2056073266.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.20687055.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.2075234753.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.2097202548.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.2118120861.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.2129711003.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.220558834.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.22403471.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.279268345.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.431205997.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.517885312.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.53469528.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.628511832.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.666348834.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.669202098.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.684769186.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.828530647.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.835236946.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.899944928.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.901809651.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.919914393.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.943124569.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -93123787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.9716 +/- 0.00818493 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.9716 @ 95%CL (1 toyMC)
median expected limit: r < 3.9716 @ 95%CL (1 toyMC)
   68% expected band : 3.9716 < r < 3.9716
   95% expected band : 3.9716 < r < 3.9716
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 266394171
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.1363 +/- 0.00642397 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.1363 @ 95%CL (1 toyMC)
median expected limit: r < 4.1363 @ 95%CL (1 toyMC)
   68% expected band : 4.1363 < r < 4.1363
   95% expected band : 4.1363 < r < 4.1363
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1433912970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.89294 +/- 0.00637096 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.89294 @ 95%CL (1 toyMC)
median expected limit: r < 2.89294 @ 95%CL (1 toyMC)
   68% expected band : 2.89294 < r < 2.89294
   95% expected band : 2.89294 < r < 2.89294
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 578313770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77492 +/- 0.00687473 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.77492 @ 95%CL (1 toyMC)
median expected limit: r < 2.77492 @ 95%CL (1 toyMC)
   68% expected band : 2.77492 < r < 2.77492
   95% expected band : 2.77492 < r < 2.77492
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 422507368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.34011 +/- 0.00667971 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.34011 @ 95%CL (1 toyMC)
median expected limit: r < 3.34011 @ 95%CL (1 toyMC)
   68% expected band : 3.34011 < r < 3.34011
   95% expected band : 3.34011 < r < 3.34011
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1821809404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89544 +/- 0.0068708 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.89544 @ 95%CL (1 toyMC)
median expected limit: r < 3.89544 @ 95%CL (1 toyMC)
   68% expected band : 3.89544 < r < 3.89544
   95% expected band : 3.89544 < r < 3.89544
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 65913733
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2713 +/- 0.0068646 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.2713 @ 95%CL (1 toyMC)
median expected limit: r < 2.2713 @ 95%CL (1 toyMC)
   68% expected band : 2.2713 < r < 2.2713
   95% expected band : 2.2713 < r < 2.2713
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1522265025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.21614 +/- 0.00736004 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.21614 @ 95%CL (1 toyMC)
median expected limit: r < 3.21614 @ 95%CL (1 toyMC)
   68% expected band : 3.21614 < r < 3.21614
   95% expected band : 3.21614 < r < 3.21614
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1131079314
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59291 +/- 0.00598046 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.59291 @ 95%CL (1 toyMC)
median expected limit: r < 2.59291 @ 95%CL (1 toyMC)
   68% expected band : 2.59291 < r < 2.59291
   95% expected band : 2.59291 < r < 2.59291
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1440863553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.85984 +/- 0.0069988 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.85984 @ 95%CL (1 toyMC)
median expected limit: r < 3.85984 @ 95%CL (1 toyMC)
   68% expected band : 3.85984 < r < 3.85984
   95% expected band : 3.85984 < r < 3.85984
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1279912620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.02554 +/- 0.00672492 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.02554 @ 95%CL (1 toyMC)
median expected limit: r < 3.02554 @ 95%CL (1 toyMC)
   68% expected band : 3.02554 < r < 3.02554
   95% expected band : 3.02554 < r < 3.02554
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2087421123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25526 +/- 0.00737468 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.25526 @ 95%CL (1 toyMC)
median expected limit: r < 3.25526 @ 95%CL (1 toyMC)
   68% expected band : 3.25526 < r < 3.25526
   95% expected band : 3.25526 < r < 3.25526
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1998780004
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5908 +/- 0.00595341 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.5908 @ 95%CL (1 toyMC)
median expected limit: r < 2.5908 @ 95%CL (1 toyMC)
   68% expected band : 2.5908 < r < 2.5908
   95% expected band : 2.5908 < r < 2.5908
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1932380571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.51287 +/- 0.00643771 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.51287 @ 95%CL (1 toyMC)
median expected limit: r < 4.51287 @ 95%CL (1 toyMC)
   68% expected band : 4.51287 < r < 4.51287
   95% expected band : 4.51287 < r < 4.51287
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 354413798
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.81175 +/- 0.00689913 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.81175 @ 95%CL (1 toyMC)
median expected limit: r < 4.81175 @ 95%CL (1 toyMC)
   68% expected band : 4.81175 < r < 4.81175
   95% expected band : 4.81175 < r < 4.81175
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 6365343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.85628 +/- 0.0058566 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.85628 @ 95%CL (1 toyMC)
median expected limit: r < 2.85628 @ 95%CL (1 toyMC)
   68% expected band : 2.85628 < r < 2.85628
   95% expected band : 2.85628 < r < 2.85628
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1694035757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.28938 +/- 0.0083144 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.28938 @ 95%CL (1 toyMC)
median expected limit: r < 4.28938 @ 95%CL (1 toyMC)
   68% expected band : 4.28938 < r < 4.28938
   95% expected band : 4.28938 < r < 4.28938
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -525512386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.82008 +/- 0.00741697 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.82008 @ 95%CL (1 toyMC)
median expected limit: r < 2.82008 @ 95%CL (1 toyMC)
   68% expected band : 2.82008 < r < 2.82008
   95% expected band : 2.82008 < r < 2.82008
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1919427773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.69432 +/- 0.0066913 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.69432 @ 95%CL (1 toyMC)
median expected limit: r < 3.69432 @ 95%CL (1 toyMC)
   68% expected band : 3.69432 < r < 3.69432
   95% expected band : 3.69432 < r < 3.69432
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1763358409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24434 +/- 0.00535895 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.24434 @ 95%CL (1 toyMC)
median expected limit: r < 3.24434 @ 95%CL (1 toyMC)
   68% expected band : 3.24434 < r < 3.24434
   95% expected band : 3.24434 < r < 3.24434
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -744408780
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.54176 +/- 0.00552948 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.54176 @ 95%CL (1 toyMC)
median expected limit: r < 3.54176 @ 95%CL (1 toyMC)
   68% expected band : 3.54176 < r < 3.54176
   95% expected band : 3.54176 < r < 3.54176
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2100410447
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.16845 +/- 0.00971523 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 8.16845 @ 95%CL (1 toyMC)
median expected limit: r < 8.16845 @ 95%CL (1 toyMC)
   68% expected band : 8.16845 < r < 8.16845
   95% expected band : 8.16845 < r < 8.16845
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -401795960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.06151 +/- 0.00670598 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.06151 @ 95%CL (1 toyMC)
median expected limit: r < 4.06151 @ 95%CL (1 toyMC)
   68% expected band : 4.06151 < r < 4.06151
   95% expected band : 4.06151 < r < 4.06151
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -237942488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.37038 +/- 0.00692738 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 6.37038 @ 95%CL (1 toyMC)
median expected limit: r < 6.37038 @ 95%CL (1 toyMC)
   68% expected band : 6.37038 < r < 6.37038
   95% expected band : 6.37038 < r < 6.37038
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 270659636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.00587 +/- 0.0076084 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.00587 @ 95%CL (1 toyMC)
median expected limit: r < 4.00587 @ 95%CL (1 toyMC)
   68% expected band : 4.00587 < r < 4.00587
   95% expected band : 4.00587 < r < 4.00587
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 865189022
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29701 +/- 0.00626764 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.29701 @ 95%CL (1 toyMC)
median expected limit: r < 2.29701 @ 95%CL (1 toyMC)
   68% expected band : 2.29701 < r < 2.29701
   95% expected band : 2.29701 < r < 2.29701
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 255515719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.98418 +/- 0.00811802 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.98418 @ 95%CL (1 toyMC)
median expected limit: r < 5.98418 @ 95%CL (1 toyMC)
   68% expected band : 5.98418 < r < 5.98418
   95% expected band : 5.98418 < r < 5.98418
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -797757727
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.74744 +/- 0.0061364 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.74744 @ 95%CL (1 toyMC)
median expected limit: r < 2.74744 @ 95%CL (1 toyMC)
   68% expected band : 2.74744 < r < 2.74744
   95% expected band : 2.74744 < r < 2.74744
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -413177690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59391 +/- 0.005693 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.59391 @ 95%CL (1 toyMC)
median expected limit: r < 2.59391 @ 95%CL (1 toyMC)
   68% expected band : 2.59391 < r < 2.59391
   95% expected band : 2.59391 < r < 2.59391
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 831568966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.97209 +/- 0.00747006 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.97209 @ 95%CL (1 toyMC)
median expected limit: r < 4.97209 @ 95%CL (1 toyMC)
   68% expected band : 4.97209 < r < 4.97209
   95% expected band : 4.97209 < r < 4.97209
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 411912696
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27768 +/- 0.00623856 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.27768 @ 95%CL (1 toyMC)
median expected limit: r < 2.27768 @ 95%CL (1 toyMC)
   68% expected band : 2.27768 < r < 2.27768
   95% expected band : 2.27768 < r < 2.27768
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -106495268
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.75762 +/- 0.00595886 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.75762 @ 95%CL (1 toyMC)
median expected limit: r < 2.75762 @ 95%CL (1 toyMC)
   68% expected band : 2.75762 < r < 2.75762
   95% expected band : 2.75762 < r < 2.75762
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 911221243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27396 +/- 0.00577168 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.27396 @ 95%CL (1 toyMC)
median expected limit: r < 3.27396 @ 95%CL (1 toyMC)
   68% expected band : 3.27396 < r < 3.27396
   95% expected band : 3.27396 < r < 3.27396
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1854833110
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77101 +/- 0.00623114 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.77101 @ 95%CL (1 toyMC)
median expected limit: r < 2.77101 @ 95%CL (1 toyMC)
   68% expected band : 2.77101 < r < 2.77101
   95% expected band : 2.77101 < r < 2.77101
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -498104764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5038 +/- 0.00672162 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.5038 @ 95%CL (1 toyMC)
median expected limit: r < 2.5038 @ 95%CL (1 toyMC)
   68% expected band : 2.5038 < r < 2.5038
   95% expected band : 2.5038 < r < 2.5038
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1672080490
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.14404 +/- 0.00700752 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.14404 @ 95%CL (1 toyMC)
median expected limit: r < 3.14404 @ 95%CL (1 toyMC)
   68% expected band : 3.14404 < r < 3.14404
   95% expected band : 3.14404 < r < 3.14404
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 781673314
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.85436 +/- 0.00542123 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.85436 @ 95%CL (1 toyMC)
median expected limit: r < 2.85436 @ 95%CL (1 toyMC)
   68% expected band : 2.85436 < r < 2.85436
   95% expected band : 2.85436 < r < 2.85436
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 776145820
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16303 +/- 0.00708237 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.16303 @ 95%CL (1 toyMC)
median expected limit: r < 3.16303 @ 95%CL (1 toyMC)
   68% expected band : 3.16303 < r < 3.16303
   95% expected band : 3.16303 < r < 3.16303
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -429242919
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.57493 +/- 0.00795752 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 6.57493 @ 95%CL (1 toyMC)
median expected limit: r < 6.57493 @ 95%CL (1 toyMC)
   68% expected band : 6.57493 < r < 6.57493
   95% expected band : 6.57493 < r < 6.57493
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -42293755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.26004 +/- 0.00450773 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.26004 @ 95%CL (1 toyMC)
median expected limit: r < 3.26004 @ 95%CL (1 toyMC)
   68% expected band : 3.26004 < r < 3.26004
   95% expected band : 3.26004 < r < 3.26004
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1535508430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28676 +/- 0.0057253 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.28676 @ 95%CL (1 toyMC)
median expected limit: r < 2.28676 @ 95%CL (1 toyMC)
   68% expected band : 2.28676 < r < 2.28676
   95% expected band : 2.28676 < r < 2.28676
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 565026213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.68142 +/- 0.00631726 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.68142 @ 95%CL (1 toyMC)
median expected limit: r < 2.68142 @ 95%CL (1 toyMC)
   68% expected band : 2.68142 < r < 2.68142
   95% expected band : 2.68142 < r < 2.68142
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1001502126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.57678 +/- 0.00608089 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.57678 @ 95%CL (1 toyMC)
median expected limit: r < 2.57678 @ 95%CL (1 toyMC)
   68% expected band : 2.57678 < r < 2.57678
   95% expected band : 2.57678 < r < 2.57678
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1372649092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7943 +/- 0.004856 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.7943 @ 95%CL (1 toyMC)
median expected limit: r < 2.7943 @ 95%CL (1 toyMC)
   68% expected band : 2.7943 < r < 2.7943
   95% expected band : 2.7943 < r < 2.7943
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1071891788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63607 +/- 0.00771454 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.63607 @ 95%CL (1 toyMC)
median expected limit: r < 3.63607 @ 95%CL (1 toyMC)
   68% expected band : 3.63607 < r < 3.63607
   95% expected band : 3.63607 < r < 3.63607
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1319470347
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76466 +/- 0.0053443 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.76466 @ 95%CL (1 toyMC)
median expected limit: r < 2.76466 @ 95%CL (1 toyMC)
   68% expected band : 2.76466 < r < 2.76466
   95% expected band : 2.76466 < r < 2.76466
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1413532169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22973 +/- 0.00695882 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.22973 @ 95%CL (1 toyMC)
median expected limit: r < 3.22973 @ 95%CL (1 toyMC)
   68% expected band : 3.22973 < r < 3.22973
   95% expected band : 3.22973 < r < 3.22973
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 679867056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.28263 +/- 0.00774185 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.28263 @ 95%CL (1 toyMC)
median expected limit: r < 4.28263 @ 95%CL (1 toyMC)
   68% expected band : 4.28263 < r < 4.28263
   95% expected band : 4.28263 < r < 4.28263
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1147865988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.96126 +/- 0.00776524 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.96126 @ 95%CL (1 toyMC)
median expected limit: r < 3.96126 @ 95%CL (1 toyMC)
   68% expected band : 3.96126 < r < 3.96126
   95% expected band : 3.96126 < r < 3.96126
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1618742001
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50105 +/- 0.00546364 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.50105 @ 95%CL (1 toyMC)
median expected limit: r < 2.50105 @ 95%CL (1 toyMC)
   68% expected band : 2.50105 < r < 2.50105
   95% expected band : 2.50105 < r < 2.50105
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2019814039
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.30954 +/- 0.00698377 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.30954 @ 95%CL (1 toyMC)
median expected limit: r < 3.30954 @ 95%CL (1 toyMC)
   68% expected band : 3.30954 < r < 3.30954
   95% expected band : 3.30954 < r < 3.30954
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 787710183
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5508 +/- 0.00597584 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.5508 @ 95%CL (1 toyMC)
median expected limit: r < 2.5508 @ 95%CL (1 toyMC)
   68% expected band : 2.5508 < r < 2.5508
   95% expected band : 2.5508 < r < 2.5508
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1230215441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42532 +/- 0.00629344 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.42532 @ 95%CL (1 toyMC)
median expected limit: r < 2.42532 @ 95%CL (1 toyMC)
   68% expected band : 2.42532 < r < 2.42532
   95% expected band : 2.42532 < r < 2.42532
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1399302366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29368 +/- 0.00528171 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.29368 @ 95%CL (1 toyMC)
median expected limit: r < 2.29368 @ 95%CL (1 toyMC)
   68% expected band : 2.29368 < r < 2.29368
   95% expected band : 2.29368 < r < 2.29368
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1338150785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.86181 +/- 0.00649151 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.86181 @ 95%CL (1 toyMC)
median expected limit: r < 2.86181 @ 95%CL (1 toyMC)
   68% expected band : 2.86181 < r < 2.86181
   95% expected band : 2.86181 < r < 2.86181
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1443724855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.11276 +/- 0.00655156 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.11276 @ 95%CL (1 toyMC)
median expected limit: r < 5.11276 @ 95%CL (1 toyMC)
   68% expected band : 5.11276 < r < 5.11276
   95% expected band : 5.11276 < r < 5.11276
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1853772931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.74111 +/- 0.00647081 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.74111 @ 95%CL (1 toyMC)
median expected limit: r < 2.74111 @ 95%CL (1 toyMC)
   68% expected band : 2.74111 < r < 2.74111
   95% expected band : 2.74111 < r < 2.74111
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1083532898
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.45624 +/- 0.00562794 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.45624 @ 95%CL (1 toyMC)
median expected limit: r < 2.45624 @ 95%CL (1 toyMC)
   68% expected band : 2.45624 < r < 2.45624
   95% expected band : 2.45624 < r < 2.45624
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1350211384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.96319 +/- 0.0076241 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.96319 @ 95%CL (1 toyMC)
median expected limit: r < 2.96319 @ 95%CL (1 toyMC)
   68% expected band : 2.96319 < r < 2.96319
   95% expected band : 2.96319 < r < 2.96319
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2075931785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98983 +/- 0.00575218 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.98983 @ 95%CL (1 toyMC)
median expected limit: r < 2.98983 @ 95%CL (1 toyMC)
   68% expected band : 2.98983 < r < 2.98983
   95% expected band : 2.98983 < r < 2.98983
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -173665013
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.28907 +/- 0.00707502 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.28907 @ 95%CL (1 toyMC)
median expected limit: r < 3.28907 @ 95%CL (1 toyMC)
   68% expected band : 3.28907 < r < 3.28907
   95% expected band : 3.28907 < r < 3.28907
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1686018844
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.19667 +/- 0.00595445 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.19667 @ 95%CL (1 toyMC)
median expected limit: r < 3.19667 @ 95%CL (1 toyMC)
   68% expected band : 3.19667 < r < 3.19667
   95% expected band : 3.19667 < r < 3.19667
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2028765949
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63898 +/- 0.0064391 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.63898 @ 95%CL (1 toyMC)
median expected limit: r < 2.63898 @ 95%CL (1 toyMC)
   68% expected band : 2.63898 < r < 2.63898
   95% expected band : 2.63898 < r < 2.63898
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 646979780
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.81788 +/- 0.00492169 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.81788 @ 95%CL (1 toyMC)
median expected limit: r < 2.81788 @ 95%CL (1 toyMC)
   68% expected band : 2.81788 < r < 2.81788
   95% expected band : 2.81788 < r < 2.81788
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 201444162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2816 +/- 0.00570539 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.2816 @ 95%CL (1 toyMC)
median expected limit: r < 2.2816 @ 95%CL (1 toyMC)
   68% expected band : 2.2816 < r < 2.2816
   95% expected band : 2.2816 < r < 2.2816
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1967648056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.73141 +/- 0.00656043 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.73141 @ 95%CL (1 toyMC)
median expected limit: r < 2.73141 @ 95%CL (1 toyMC)
   68% expected band : 2.73141 < r < 2.73141
   95% expected band : 2.73141 < r < 2.73141
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -506366885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13932 +/- 0.00662152 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.13932 @ 95%CL (1 toyMC)
median expected limit: r < 3.13932 @ 95%CL (1 toyMC)
   68% expected band : 3.13932 < r < 3.13932
   95% expected band : 3.13932 < r < 3.13932
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 878810676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.38931 +/- 0.00611896 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.38931 @ 95%CL (1 toyMC)
median expected limit: r < 3.38931 @ 95%CL (1 toyMC)
   68% expected band : 3.38931 < r < 3.38931
   95% expected band : 3.38931 < r < 3.38931
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1188096728
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.25013 +/- 0.00728379 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.25013 @ 95%CL (1 toyMC)
median expected limit: r < 4.25013 @ 95%CL (1 toyMC)
   68% expected band : 4.25013 < r < 4.25013
   95% expected band : 4.25013 < r < 4.25013
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1247531208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.73825 +/- 0.00672556 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.73825 @ 95%CL (1 toyMC)
median expected limit: r < 2.73825 @ 95%CL (1 toyMC)
   68% expected band : 2.73825 < r < 2.73825
   95% expected band : 2.73825 < r < 2.73825
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 480773886
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.74701 +/- 0.00649195 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.74701 @ 95%CL (1 toyMC)
median expected limit: r < 3.74701 @ 95%CL (1 toyMC)
   68% expected band : 3.74701 < r < 3.74701
   95% expected band : 3.74701 < r < 3.74701
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1961673717
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.80796 +/- 0.00443863 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.80796 @ 95%CL (1 toyMC)
median expected limit: r < 4.80796 @ 95%CL (1 toyMC)
   68% expected band : 4.80796 < r < 4.80796
   95% expected band : 4.80796 < r < 4.80796
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1388671529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05855 +/- 0.00659253 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.05855 @ 95%CL (1 toyMC)
median expected limit: r < 3.05855 @ 95%CL (1 toyMC)
   68% expected band : 3.05855 < r < 3.05855
   95% expected band : 3.05855 < r < 3.05855
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1303771413
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.61008 +/- 0.00486239 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.61008 @ 95%CL (1 toyMC)
median expected limit: r < 2.61008 @ 95%CL (1 toyMC)
   68% expected band : 2.61008 < r < 2.61008
   95% expected band : 2.61008 < r < 2.61008
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1965170523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16391 +/- 0.00659293 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.16391 @ 95%CL (1 toyMC)
median expected limit: r < 3.16391 @ 95%CL (1 toyMC)
   68% expected band : 3.16391 < r < 3.16391
   95% expected band : 3.16391 < r < 3.16391
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1809206551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6254 +/- 0.0072919 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.6254 @ 95%CL (1 toyMC)
median expected limit: r < 2.6254 @ 95%CL (1 toyMC)
   68% expected band : 2.6254 < r < 2.6254
   95% expected band : 2.6254 < r < 2.6254
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1238653658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.06221 +/- 0.0073627 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.06221 @ 95%CL (1 toyMC)
median expected limit: r < 5.06221 @ 95%CL (1 toyMC)
   68% expected band : 5.06221 < r < 5.06221
   95% expected band : 5.06221 < r < 5.06221
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2125473737
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.00307 +/- 0.00653564 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.00307 @ 95%CL (1 toyMC)
median expected limit: r < 3.00307 @ 95%CL (1 toyMC)
   68% expected band : 3.00307 < r < 3.00307
   95% expected band : 3.00307 < r < 3.00307
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1225517536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.85434 +/- 0.00605567 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.85434 @ 95%CL (1 toyMC)
median expected limit: r < 2.85434 @ 95%CL (1 toyMC)
   68% expected band : 2.85434 < r < 2.85434
   95% expected band : 2.85434 < r < 2.85434
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1854923555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.37179 +/- 0.00612716 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.37179 @ 95%CL (1 toyMC)
median expected limit: r < 3.37179 @ 95%CL (1 toyMC)
   68% expected band : 3.37179 < r < 3.37179
   95% expected band : 3.37179 < r < 3.37179
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1440498985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05489 +/- 0.00625401 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.05489 @ 95%CL (1 toyMC)
median expected limit: r < 3.05489 @ 95%CL (1 toyMC)
   68% expected band : 3.05489 < r < 3.05489
   95% expected band : 3.05489 < r < 3.05489
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1578867947
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.86977 +/- 0.00661215 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.86977 @ 95%CL (1 toyMC)
median expected limit: r < 3.86977 @ 95%CL (1 toyMC)
   68% expected band : 3.86977 < r < 3.86977
   95% expected band : 3.86977 < r < 3.86977
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1965700472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.20284 +/- 0.00704466 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.20284 @ 95%CL (1 toyMC)
median expected limit: r < 5.20284 @ 95%CL (1 toyMC)
   68% expected band : 5.20284 < r < 5.20284
   95% expected band : 5.20284 < r < 5.20284
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1769432279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93755 +/- 0.00749541 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.93755 @ 95%CL (1 toyMC)
median expected limit: r < 2.93755 @ 95%CL (1 toyMC)
   68% expected band : 2.93755 < r < 2.93755
   95% expected band : 2.93755 < r < 2.93755
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1186794303
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29637 +/- 0.00598097 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.29637 @ 95%CL (1 toyMC)
median expected limit: r < 2.29637 @ 95%CL (1 toyMC)
   68% expected band : 2.29637 < r < 2.29637
   95% expected band : 2.29637 < r < 2.29637
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 377825007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.4725 +/- 0.00683913 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.4725 @ 95%CL (1 toyMC)
median expected limit: r < 6.4725 @ 95%CL (1 toyMC)
   68% expected band : 6.4725 < r < 6.4725
   95% expected band : 6.4725 < r < 6.4725
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -265288122
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09319 +/- 0.00681295 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.09319 @ 95%CL (1 toyMC)
median expected limit: r < 3.09319 @ 95%CL (1 toyMC)
   68% expected band : 3.09319 < r < 3.09319
   95% expected band : 3.09319 < r < 3.09319
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -884568207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98588 +/- 0.00709226 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.98588 @ 95%CL (1 toyMC)
median expected limit: r < 2.98588 @ 95%CL (1 toyMC)
   68% expected band : 2.98588 < r < 2.98588
   95% expected band : 2.98588 < r < 2.98588
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -717027909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99408 +/- 0.00608214 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.99408 @ 95%CL (1 toyMC)
median expected limit: r < 2.99408 @ 95%CL (1 toyMC)
   68% expected band : 2.99408 < r < 2.99408
   95% expected band : 2.99408 < r < 2.99408
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -432574968
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62213 +/- 0.00776314 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.62213 @ 95%CL (1 toyMC)
median expected limit: r < 2.62213 @ 95%CL (1 toyMC)
   68% expected band : 2.62213 < r < 2.62213
   95% expected band : 2.62213 < r < 2.62213
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1584211078
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.85721 +/- 0.00597941 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.85721 @ 95%CL (1 toyMC)
median expected limit: r < 2.85721 @ 95%CL (1 toyMC)
   68% expected band : 2.85721 < r < 2.85721
   95% expected band : 2.85721 < r < 2.85721
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1285325407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.33013 +/- 0.00777839 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.33013 @ 95%CL (1 toyMC)
median expected limit: r < 4.33013 @ 95%CL (1 toyMC)
   68% expected band : 4.33013 < r < 4.33013
   95% expected band : 4.33013 < r < 4.33013
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -946781845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64437 +/- 0.00685494 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.64437 @ 95%CL (1 toyMC)
median expected limit: r < 2.64437 @ 95%CL (1 toyMC)
   68% expected band : 2.64437 < r < 2.64437
   95% expected band : 2.64437 < r < 2.64437
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1432544526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.67239 +/- 0.00605146 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.67239 @ 95%CL (1 toyMC)
median expected limit: r < 3.67239 @ 95%CL (1 toyMC)
   68% expected band : 3.67239 < r < 3.67239
   95% expected band : 3.67239 < r < 3.67239
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1496571208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.35216 +/- 0.006961 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.35216 @ 95%CL (1 toyMC)
median expected limit: r < 3.35216 @ 95%CL (1 toyMC)
   68% expected band : 3.35216 < r < 3.35216
   95% expected band : 3.35216 < r < 3.35216
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -172090177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.37159 +/- 0.00858113 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.37159 @ 95%CL (1 toyMC)
median expected limit: r < 4.37159 @ 95%CL (1 toyMC)
   68% expected band : 4.37159 < r < 4.37159
   95% expected band : 4.37159 < r < 4.37159
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1881350297
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10571 +/- 0.00624885 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.10571 @ 95%CL (1 toyMC)
median expected limit: r < 3.10571 @ 95%CL (1 toyMC)
   68% expected band : 3.10571 < r < 3.10571
   95% expected band : 3.10571 < r < 3.10571
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1601199707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66061 +/- 0.00692436 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.66061 @ 95%CL (1 toyMC)
median expected limit: r < 3.66061 @ 95%CL (1 toyMC)
   68% expected band : 3.66061 < r < 3.66061
   95% expected band : 3.66061 < r < 3.66061
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1512637538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.808 +/- 0.00677611 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.808 @ 95%CL (1 toyMC)
median expected limit: r < 2.808 @ 95%CL (1 toyMC)
   68% expected band : 2.808 < r < 2.808
   95% expected band : 2.808 < r < 2.808
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 875534523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.08607 +/- 0.00914791 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.08607 @ 95%CL (1 toyMC)
median expected limit: r < 7.08607 @ 95%CL (1 toyMC)
   68% expected band : 7.08607 < r < 7.08607
   95% expected band : 7.08607 < r < 7.08607
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1001502126.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-106495268.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1147865988.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1186794303.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1188096728.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1238653658.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1279912620.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1285325407.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1388671529.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1432544526.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1433912970.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1496571208.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1512637538.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1535508430.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1578867947.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1584211078.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1601199707.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1618742001.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1686018844.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-172090177.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-173665013.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1809206551.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1821809404.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1919427773.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1932380571.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1961673717.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-1965170523.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-2028765949.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-2075931785.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-2087421123.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-2125473737.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-237942488.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-265288122.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-401795960.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-413177690.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-42293755.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-429242919.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-432574968.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-498104764.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-506366885.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-525512386.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-717027909.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-744408780.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-797757727.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-884568207.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-93123787.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-946781845.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.1071891788.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.1083532898.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.1131079314.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.1225517536.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1230215441.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1247531208.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1303771413.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1319470347.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1338150785.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1350211384.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1372649092.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1399302366.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1413532169.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1440498985.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1440863553.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1443724855.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1522265025.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1672080490.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1694035757.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1763358409.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1769432279.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1853772931.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1854833110.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1854923555.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1881350297.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1965700472.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1967648056.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.1998780004.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.201444162.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.2019814039.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.2100410447.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.255515719.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.266394171.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.270659636.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.354413798.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.377825007.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.411912696.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.422507368.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.480773886.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.565026213.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.578313770.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.6365343.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.646979780.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.65913733.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.679867056.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.776145820.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.781673314.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.787710183.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.831568966.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.865189022.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.875534523.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.878810676.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.911221243.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 363358985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.96646 +/- 0.00706117 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.96646 @ 95%CL (1 toyMC)
median expected limit: r < 4.96646 @ 95%CL (1 toyMC)
   68% expected band : 4.96646 < r < 4.96646
   95% expected band : 4.96646 < r < 4.96646
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1525907641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.73866 +/- 0.00709844 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.73866 @ 95%CL (1 toyMC)
median expected limit: r < 2.73866 @ 95%CL (1 toyMC)
   68% expected band : 2.73866 < r < 2.73866
   95% expected band : 2.73866 < r < 2.73866
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2078646976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92041 +/- 0.00688465 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.92041 @ 95%CL (1 toyMC)
median expected limit: r < 2.92041 @ 95%CL (1 toyMC)
   68% expected band : 2.92041 < r < 2.92041
   95% expected band : 2.92041 < r < 2.92041
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1844825816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.72035 +/- 0.00610231 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.72035 @ 95%CL (1 toyMC)
median expected limit: r < 2.72035 @ 95%CL (1 toyMC)
   68% expected band : 2.72035 < r < 2.72035
   95% expected band : 2.72035 < r < 2.72035
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -450016910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.9036 +/- 0.00519194 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.9036 @ 95%CL (1 toyMC)
median expected limit: r < 2.9036 @ 95%CL (1 toyMC)
   68% expected band : 2.9036 < r < 2.9036
   95% expected band : 2.9036 < r < 2.9036
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1995941446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60986 +/- 0.00440176 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.60986 @ 95%CL (1 toyMC)
median expected limit: r < 2.60986 @ 95%CL (1 toyMC)
   68% expected band : 2.60986 < r < 2.60986
   95% expected band : 2.60986 < r < 2.60986
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 65020218
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.21757 +/- 0.0091681 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.21757 @ 95%CL (1 toyMC)
median expected limit: r < 8.21757 @ 95%CL (1 toyMC)
   68% expected band : 8.21757 < r < 8.21757
   95% expected band : 8.21757 < r < 8.21757
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 166585127
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.96517 +/- 0.00829286 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.96517 @ 95%CL (1 toyMC)
median expected limit: r < 2.96517 @ 95%CL (1 toyMC)
   68% expected band : 2.96517 < r < 2.96517
   95% expected band : 2.96517 < r < 2.96517
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1592894374
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40539 +/- 0.00581167 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.40539 @ 95%CL (1 toyMC)
median expected limit: r < 2.40539 @ 95%CL (1 toyMC)
   68% expected band : 2.40539 < r < 2.40539
   95% expected band : 2.40539 < r < 2.40539
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1842600784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.36889 +/- 0.00583613 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.36889 @ 95%CL (1 toyMC)
median expected limit: r < 2.36889 @ 95%CL (1 toyMC)
   68% expected band : 2.36889 < r < 2.36889
   95% expected band : 2.36889 < r < 2.36889
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1490128227
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39183 +/- 0.00740221 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.39183 @ 95%CL (1 toyMC)
median expected limit: r < 2.39183 @ 95%CL (1 toyMC)
   68% expected band : 2.39183 < r < 2.39183
   95% expected band : 2.39183 < r < 2.39183
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1060236828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27372 +/- 0.00861202 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.27372 @ 95%CL (1 toyMC)
median expected limit: r < 3.27372 @ 95%CL (1 toyMC)
   68% expected band : 3.27372 < r < 3.27372
   95% expected band : 3.27372 < r < 3.27372
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1026987416
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93875 +/- 0.00694024 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.93875 @ 95%CL (1 toyMC)
median expected limit: r < 2.93875 @ 95%CL (1 toyMC)
   68% expected band : 2.93875 < r < 2.93875
   95% expected band : 2.93875 < r < 2.93875
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 16690808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.95866 +/- 0.00628589 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.95866 @ 95%CL (1 toyMC)
median expected limit: r < 2.95866 @ 95%CL (1 toyMC)
   68% expected band : 2.95866 < r < 2.95866
   95% expected band : 2.95866 < r < 2.95866
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 373401923
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.56031 +/- 0.00801609 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.56031 @ 95%CL (1 toyMC)
median expected limit: r < 3.56031 @ 95%CL (1 toyMC)
   68% expected band : 3.56031 < r < 3.56031
   95% expected band : 3.56031 < r < 3.56031
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1480002412
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.51721 +/- 0.00850316 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.51721 @ 95%CL (1 toyMC)
median expected limit: r < 3.51721 @ 95%CL (1 toyMC)
   68% expected band : 3.51721 < r < 3.51721
   95% expected band : 3.51721 < r < 3.51721
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1303139055
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.38109 +/- 0.00802328 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.38109 @ 95%CL (1 toyMC)
median expected limit: r < 3.38109 @ 95%CL (1 toyMC)
   68% expected band : 3.38109 < r < 3.38109
   95% expected band : 3.38109 < r < 3.38109
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1050334939
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.54412 +/- 0.00682513 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.54412 @ 95%CL (1 toyMC)
median expected limit: r < 4.54412 @ 95%CL (1 toyMC)
   68% expected band : 4.54412 < r < 4.54412
   95% expected band : 4.54412 < r < 4.54412
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1807952321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.81408 +/- 0.00580275 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.81408 @ 95%CL (1 toyMC)
median expected limit: r < 2.81408 @ 95%CL (1 toyMC)
   68% expected band : 2.81408 < r < 2.81408
   95% expected band : 2.81408 < r < 2.81408
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1174571929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58087 +/- 0.00579076 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.58087 @ 95%CL (1 toyMC)
median expected limit: r < 2.58087 @ 95%CL (1 toyMC)
   68% expected band : 2.58087 < r < 2.58087
   95% expected band : 2.58087 < r < 2.58087
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1184107591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.35002 +/- 0.0104374 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.35002 @ 95%CL (1 toyMC)
median expected limit: r < 9.35002 @ 95%CL (1 toyMC)
   68% expected band : 9.35002 < r < 9.35002
   95% expected band : 9.35002 < r < 9.35002
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1796870795
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.61557 +/- 0.00669878 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.61557 @ 95%CL (1 toyMC)
median expected limit: r < 3.61557 @ 95%CL (1 toyMC)
   68% expected band : 3.61557 < r < 3.61557
   95% expected band : 3.61557 < r < 3.61557
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2088303222
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.53628 +/- 0.00697935 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.53628 @ 95%CL (1 toyMC)
median expected limit: r < 3.53628 @ 95%CL (1 toyMC)
   68% expected band : 3.53628 < r < 3.53628
   95% expected band : 3.53628 < r < 3.53628
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1986754550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.82321 +/- 0.00694571 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.82321 @ 95%CL (1 toyMC)
median expected limit: r < 2.82321 @ 95%CL (1 toyMC)
   68% expected band : 2.82321 < r < 2.82321
   95% expected band : 2.82321 < r < 2.82321
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -965366068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.06111 +/- 0.00706684 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.06111 @ 95%CL (1 toyMC)
median expected limit: r < 4.06111 @ 95%CL (1 toyMC)
   68% expected band : 4.06111 < r < 4.06111
   95% expected band : 4.06111 < r < 4.06111
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1676520925
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67695 +/- 0.00646481 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.67695 @ 95%CL (1 toyMC)
median expected limit: r < 2.67695 @ 95%CL (1 toyMC)
   68% expected band : 2.67695 < r < 2.67695
   95% expected band : 2.67695 < r < 2.67695
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2013487115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.89799 +/- 0.00555125 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.89799 @ 95%CL (1 toyMC)
median expected limit: r < 2.89799 @ 95%CL (1 toyMC)
   68% expected band : 2.89799 < r < 2.89799
   95% expected band : 2.89799 < r < 2.89799
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -278533088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27222 +/- 0.00716698 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.27222 @ 95%CL (1 toyMC)
median expected limit: r < 3.27222 @ 95%CL (1 toyMC)
   68% expected band : 3.27222 < r < 3.27222
   95% expected band : 3.27222 < r < 3.27222
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 754248537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04043 +/- 0.00527666 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.04043 @ 95%CL (1 toyMC)
median expected limit: r < 3.04043 @ 95%CL (1 toyMC)
   68% expected band : 3.04043 < r < 3.04043
   95% expected band : 3.04043 < r < 3.04043
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1869965418
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.85162 +/- 0.00638266 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.85162 @ 95%CL (1 toyMC)
median expected limit: r < 3.85162 @ 95%CL (1 toyMC)
   68% expected band : 3.85162 < r < 3.85162
   95% expected band : 3.85162 < r < 3.85162
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -115953012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.89622 +/- 0.00680121 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.89622 @ 95%CL (1 toyMC)
median expected limit: r < 2.89622 @ 95%CL (1 toyMC)
   68% expected band : 2.89622 < r < 2.89622
   95% expected band : 2.89622 < r < 2.89622
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 345523448
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78196 +/- 0.00530639 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.78196 @ 95%CL (1 toyMC)
median expected limit: r < 2.78196 @ 95%CL (1 toyMC)
   68% expected band : 2.78196 < r < 2.78196
   95% expected band : 2.78196 < r < 2.78196
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 310762041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.83588 +/- 0.00871609 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.83588 @ 95%CL (1 toyMC)
median expected limit: r < 3.83588 @ 95%CL (1 toyMC)
   68% expected band : 3.83588 < r < 3.83588
   95% expected band : 3.83588 < r < 3.83588
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1960889918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.76342 +/- 0.00657761 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.76342 @ 95%CL (1 toyMC)
median expected limit: r < 4.76342 @ 95%CL (1 toyMC)
   68% expected band : 4.76342 < r < 4.76342
   95% expected band : 4.76342 < r < 4.76342
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1226052606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39243 +/- 0.00583184 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.39243 @ 95%CL (1 toyMC)
median expected limit: r < 2.39243 @ 95%CL (1 toyMC)
   68% expected band : 2.39243 < r < 2.39243
   95% expected band : 2.39243 < r < 2.39243
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1065189763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6962 +/- 0.00773038 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.6962 @ 95%CL (1 toyMC)
median expected limit: r < 2.6962 @ 95%CL (1 toyMC)
   68% expected band : 2.6962 < r < 2.6962
   95% expected band : 2.6962 < r < 2.6962
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 216196411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.47554 +/- 0.00756135 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.47554 @ 95%CL (1 toyMC)
median expected limit: r < 4.47554 @ 95%CL (1 toyMC)
   68% expected band : 4.47554 < r < 4.47554
   95% expected band : 4.47554 < r < 4.47554
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1162024397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.7621 +/- 0.00815044 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.7621 @ 95%CL (1 toyMC)
median expected limit: r < 4.7621 @ 95%CL (1 toyMC)
   68% expected band : 4.7621 < r < 4.7621
   95% expected band : 4.7621 < r < 4.7621
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 765897374
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.75191 +/- 0.00758281 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.75191 @ 95%CL (1 toyMC)
median expected limit: r < 2.75191 @ 95%CL (1 toyMC)
   68% expected band : 2.75191 < r < 2.75191
   95% expected band : 2.75191 < r < 2.75191
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1937105847
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.50995 +/- 0.00919318 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.50995 @ 95%CL (1 toyMC)
median expected limit: r < 6.50995 @ 95%CL (1 toyMC)
   68% expected band : 6.50995 < r < 6.50995
   95% expected band : 6.50995 < r < 6.50995
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1661866677
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37896 +/- 0.00655806 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.37896 @ 95%CL (1 toyMC)
median expected limit: r < 2.37896 @ 95%CL (1 toyMC)
   68% expected band : 2.37896 < r < 2.37896
   95% expected band : 2.37896 < r < 2.37896
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1053717652
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.19821 +/- 0.00692806 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.19821 @ 95%CL (1 toyMC)
median expected limit: r < 3.19821 @ 95%CL (1 toyMC)
   68% expected band : 3.19821 < r < 3.19821
   95% expected band : 3.19821 < r < 3.19821
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1458618684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.70543 +/- 0.00625332 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.70543 @ 95%CL (1 toyMC)
median expected limit: r < 2.70543 @ 95%CL (1 toyMC)
   68% expected band : 2.70543 < r < 2.70543
   95% expected band : 2.70543 < r < 2.70543
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1004440853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.3453 +/- 0.0067611 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.3453 @ 95%CL (1 toyMC)
median expected limit: r < 3.3453 @ 95%CL (1 toyMC)
   68% expected band : 3.3453 < r < 3.3453
   95% expected band : 3.3453 < r < 3.3453
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 104406430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.57415 +/- 0.00673281 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.57415 @ 95%CL (1 toyMC)
median expected limit: r < 2.57415 @ 95%CL (1 toyMC)
   68% expected band : 2.57415 < r < 2.57415
   95% expected band : 2.57415 < r < 2.57415
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -740670822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05226 +/- 0.00779145 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.05226 @ 95%CL (1 toyMC)
median expected limit: r < 3.05226 @ 95%CL (1 toyMC)
   68% expected band : 3.05226 < r < 3.05226
   95% expected band : 3.05226 < r < 3.05226
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -163527299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37722 +/- 0.00587045 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.37722 @ 95%CL (1 toyMC)
median expected limit: r < 2.37722 @ 95%CL (1 toyMC)
   68% expected band : 2.37722 < r < 2.37722
   95% expected band : 2.37722 < r < 2.37722
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -269568312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.28043 +/- 0.00865001 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.28043 @ 95%CL (1 toyMC)
median expected limit: r < 6.28043 @ 95%CL (1 toyMC)
   68% expected band : 6.28043 < r < 6.28043
   95% expected band : 6.28043 < r < 6.28043
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -976988315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59404 +/- 0.00735748 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.59404 @ 95%CL (1 toyMC)
median expected limit: r < 2.59404 @ 95%CL (1 toyMC)
   68% expected band : 2.59404 < r < 2.59404
   95% expected band : 2.59404 < r < 2.59404
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1833823829
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.42607 +/- 0.00762472 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.42607 @ 95%CL (1 toyMC)
median expected limit: r < 3.42607 @ 95%CL (1 toyMC)
   68% expected band : 3.42607 < r < 3.42607
   95% expected band : 3.42607 < r < 3.42607
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1017355677
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.72882 +/- 0.0068613 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.72882 @ 95%CL (1 toyMC)
median expected limit: r < 2.72882 @ 95%CL (1 toyMC)
   68% expected band : 2.72882 < r < 2.72882
   95% expected band : 2.72882 < r < 2.72882
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 960880447
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.57929 +/- 0.00708455 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.57929 @ 95%CL (1 toyMC)
median expected limit: r < 2.57929 @ 95%CL (1 toyMC)
   68% expected band : 2.57929 < r < 2.57929
   95% expected band : 2.57929 < r < 2.57929
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -374573544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.95184 +/- 0.00844125 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.95184 @ 95%CL (1 toyMC)
median expected limit: r < 3.95184 @ 95%CL (1 toyMC)
   68% expected band : 3.95184 < r < 3.95184
   95% expected band : 3.95184 < r < 3.95184
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1728352414
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37107 +/- 0.00586325 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.37107 @ 95%CL (1 toyMC)
median expected limit: r < 2.37107 @ 95%CL (1 toyMC)
   68% expected band : 2.37107 < r < 2.37107
   95% expected band : 2.37107 < r < 2.37107
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -981910774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.59715 +/- 0.00897805 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 6.59715 @ 95%CL (1 toyMC)
median expected limit: r < 6.59715 @ 95%CL (1 toyMC)
   68% expected band : 6.59715 < r < 6.59715
   95% expected band : 6.59715 < r < 6.59715
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 564284329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.62156 +/- 0.00654486 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.62156 @ 95%CL (1 toyMC)
median expected limit: r < 3.62156 @ 95%CL (1 toyMC)
   68% expected band : 3.62156 < r < 3.62156
   95% expected band : 3.62156 < r < 3.62156
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1525991680
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.84713 +/- 0.00696339 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.84713 @ 95%CL (1 toyMC)
median expected limit: r < 2.84713 @ 95%CL (1 toyMC)
   68% expected band : 2.84713 < r < 2.84713
   95% expected band : 2.84713 < r < 2.84713
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 801697039
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16649 +/- 0.00868905 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.16649 @ 95%CL (1 toyMC)
median expected limit: r < 4.16649 @ 95%CL (1 toyMC)
   68% expected band : 4.16649 < r < 4.16649
   95% expected band : 4.16649 < r < 4.16649
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1156683155
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.19359 +/- 0.00621705 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.19359 @ 95%CL (1 toyMC)
median expected limit: r < 3.19359 @ 95%CL (1 toyMC)
   68% expected band : 3.19359 < r < 3.19359
   95% expected band : 3.19359 < r < 3.19359
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1347798113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.80267 +/- 0.00799092 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.80267 @ 95%CL (1 toyMC)
median expected limit: r < 4.80267 @ 95%CL (1 toyMC)
   68% expected band : 4.80267 < r < 4.80267
   95% expected band : 4.80267 < r < 4.80267
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2023968638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.67087 +/- 0.00677502 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.67087 @ 95%CL (1 toyMC)
median expected limit: r < 3.67087 @ 95%CL (1 toyMC)
   68% expected band : 3.67087 < r < 3.67087
   95% expected band : 3.67087 < r < 3.67087
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1766020403
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40075 +/- 0.00522455 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.40075 @ 95%CL (1 toyMC)
median expected limit: r < 2.40075 @ 95%CL (1 toyMC)
   68% expected band : 2.40075 < r < 2.40075
   95% expected band : 2.40075 < r < 2.40075
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -165200047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.42962 +/- 0.00547054 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.42962 @ 95%CL (1 toyMC)
median expected limit: r < 3.42962 @ 95%CL (1 toyMC)
   68% expected band : 3.42962 < r < 3.42962
   95% expected band : 3.42962 < r < 3.42962
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 88099698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8458 +/- 0.00836752 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.8458 @ 95%CL (1 toyMC)
median expected limit: r < 2.8458 @ 95%CL (1 toyMC)
   68% expected band : 2.8458 < r < 2.8458
   95% expected band : 2.8458 < r < 2.8458
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1080905522
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.20298 +/- 0.00792043 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.20298 @ 95%CL (1 toyMC)
median expected limit: r < 4.20298 @ 95%CL (1 toyMC)
   68% expected band : 4.20298 < r < 4.20298
   95% expected band : 4.20298 < r < 4.20298
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 85447533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.80229 +/- 0.00758797 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 5.80229 @ 95%CL (1 toyMC)
median expected limit: r < 5.80229 @ 95%CL (1 toyMC)
   68% expected band : 5.80229 < r < 5.80229
   95% expected band : 5.80229 < r < 5.80229
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2099554800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.9244 +/- 0.00623647 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.9244 @ 95%CL (1 toyMC)
median expected limit: r < 2.9244 @ 95%CL (1 toyMC)
   68% expected band : 2.9244 < r < 2.9244
   95% expected band : 2.9244 < r < 2.9244
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 742374758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.97592 +/- 0.0075878 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.97592 @ 95%CL (1 toyMC)
median expected limit: r < 2.97592 @ 95%CL (1 toyMC)
   68% expected band : 2.97592 < r < 2.97592
   95% expected band : 2.97592 < r < 2.97592
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 245241676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39191 +/- 0.00703922 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.39191 @ 95%CL (1 toyMC)
median expected limit: r < 2.39191 @ 95%CL (1 toyMC)
   68% expected band : 2.39191 < r < 2.39191
   95% expected band : 2.39191 < r < 2.39191
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1065711322
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40427 +/- 0.00662715 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.40427 @ 95%CL (1 toyMC)
median expected limit: r < 2.40427 @ 95%CL (1 toyMC)
   68% expected band : 2.40427 < r < 2.40427
   95% expected band : 2.40427 < r < 2.40427
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -955481199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.14711 +/- 0.00722743 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.14711 @ 95%CL (1 toyMC)
median expected limit: r < 3.14711 @ 95%CL (1 toyMC)
   68% expected band : 3.14711 < r < 3.14711
   95% expected band : 3.14711 < r < 3.14711
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1585752232
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39322 +/- 0.00688771 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.39322 @ 95%CL (1 toyMC)
median expected limit: r < 2.39322 @ 95%CL (1 toyMC)
   68% expected band : 2.39322 < r < 2.39322
   95% expected band : 2.39322 < r < 2.39322
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1313123952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.32218 +/- 0.0072098 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.32218 @ 95%CL (1 toyMC)
median expected limit: r < 3.32218 @ 95%CL (1 toyMC)
   68% expected band : 3.32218 < r < 3.32218
   95% expected band : 3.32218 < r < 3.32218
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1185502324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37607 +/- 0.00679304 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.37607 @ 95%CL (1 toyMC)
median expected limit: r < 2.37607 @ 95%CL (1 toyMC)
   68% expected band : 2.37607 < r < 2.37607
   95% expected band : 2.37607 < r < 2.37607
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1505857234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.38909 +/- 0.00765029 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.38909 @ 95%CL (1 toyMC)
median expected limit: r < 3.38909 @ 95%CL (1 toyMC)
   68% expected band : 3.38909 < r < 3.38909
   95% expected band : 3.38909 < r < 3.38909
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -139551367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.29611 +/- 0.00676321 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.29611 @ 95%CL (1 toyMC)
median expected limit: r < 3.29611 @ 95%CL (1 toyMC)
   68% expected band : 3.29611 < r < 3.29611
   95% expected band : 3.29611 < r < 3.29611
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -384363115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05138 +/- 0.00721407 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.05138 @ 95%CL (1 toyMC)
median expected limit: r < 3.05138 @ 95%CL (1 toyMC)
   68% expected band : 3.05138 < r < 3.05138
   95% expected band : 3.05138 < r < 3.05138
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -144678986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.38061 +/- 0.00711945 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.38061 @ 95%CL (1 toyMC)
median expected limit: r < 4.38061 @ 95%CL (1 toyMC)
   68% expected band : 4.38061 < r < 4.38061
   95% expected band : 4.38061 < r < 4.38061
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1105098332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.3562 +/- 0.00592767 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.3562 @ 95%CL (1 toyMC)
median expected limit: r < 3.3562 @ 95%CL (1 toyMC)
   68% expected band : 3.3562 < r < 3.3562
   95% expected band : 3.3562 < r < 3.3562
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1075941834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16146 +/- 0.00676115 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.16146 @ 95%CL (1 toyMC)
median expected limit: r < 3.16146 @ 95%CL (1 toyMC)
   68% expected band : 3.16146 < r < 3.16146
   95% expected band : 3.16146 < r < 3.16146
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1909887578
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.483 +/- 0.00835394 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.483 @ 95%CL (1 toyMC)
median expected limit: r < 4.483 @ 95%CL (1 toyMC)
   68% expected band : 4.483 < r < 4.483
   95% expected band : 4.483 < r < 4.483
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1900088124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.62061 +/- 0.00817131 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.62061 @ 95%CL (1 toyMC)
median expected limit: r < 4.62061 @ 95%CL (1 toyMC)
   68% expected band : 4.62061 < r < 4.62061
   95% expected band : 4.62061 < r < 4.62061
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -303855865
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.35671 +/- 0.00631882 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.35671 @ 95%CL (1 toyMC)
median expected limit: r < 3.35671 @ 95%CL (1 toyMC)
   68% expected band : 3.35671 < r < 3.35671
   95% expected band : 3.35671 < r < 3.35671
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -674767603
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.29572 +/- 0.00740154 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.29572 @ 95%CL (1 toyMC)
median expected limit: r < 4.29572 @ 95%CL (1 toyMC)
   68% expected band : 4.29572 < r < 4.29572
   95% expected band : 4.29572 < r < 4.29572
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -633868707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.58275 +/- 0.00870649 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.58275 @ 95%CL (1 toyMC)
median expected limit: r < 6.58275 @ 95%CL (1 toyMC)
   68% expected band : 6.58275 < r < 6.58275
   95% expected band : 6.58275 < r < 6.58275
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1026976246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05816 +/- 0.00610518 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.05816 @ 95%CL (1 toyMC)
median expected limit: r < 3.05816 @ 95%CL (1 toyMC)
   68% expected band : 3.05816 < r < 3.05816
   95% expected band : 3.05816 < r < 3.05816
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1043791895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37723 +/- 0.00588708 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.37723 @ 95%CL (1 toyMC)
median expected limit: r < 2.37723 @ 95%CL (1 toyMC)
   68% expected band : 2.37723 < r < 2.37723
   95% expected band : 2.37723 < r < 2.37723
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2095464134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54884 +/- 0.00773022 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.54884 @ 95%CL (1 toyMC)
median expected limit: r < 2.54884 @ 95%CL (1 toyMC)
   68% expected band : 2.54884 < r < 2.54884
   95% expected band : 2.54884 < r < 2.54884
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1321436497
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.73691 +/- 0.00727677 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.73691 @ 95%CL (1 toyMC)
median expected limit: r < 2.73691 @ 95%CL (1 toyMC)
   68% expected band : 2.73691 < r < 2.73691
   95% expected band : 2.73691 < r < 2.73691
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1980013087
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.34388 +/- 0.00819821 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.34388 @ 95%CL (1 toyMC)
median expected limit: r < 5.34388 @ 95%CL (1 toyMC)
   68% expected band : 5.34388 < r < 5.34388
   95% expected band : 5.34388 < r < 5.34388
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1376860011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05983 +/- 0.0070517 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.05983 @ 95%CL (1 toyMC)
median expected limit: r < 3.05983 @ 95%CL (1 toyMC)
   68% expected band : 3.05983 < r < 3.05983
   95% expected band : 3.05983 < r < 3.05983
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -930752417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39281 +/- 0.00659204 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.39281 @ 95%CL (1 toyMC)
median expected limit: r < 2.39281 @ 95%CL (1 toyMC)
   68% expected band : 2.39281 < r < 2.39281
   95% expected band : 2.39281 < r < 2.39281
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -248507453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.31583 +/- 0.00553024 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.31583 @ 95%CL (1 toyMC)
median expected limit: r < 3.31583 @ 95%CL (1 toyMC)
   68% expected band : 3.31583 < r < 3.31583
   95% expected band : 3.31583 < r < 3.31583
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 455228515
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37894 +/- 0.00554256 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.37894 @ 95%CL (1 toyMC)
median expected limit: r < 2.37894 @ 95%CL (1 toyMC)
   68% expected band : 2.37894 < r < 2.37894
   95% expected band : 2.37894 < r < 2.37894
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -732059387
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.7216 +/- 0.00903719 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.7216 @ 95%CL (1 toyMC)
median expected limit: r < 5.7216 @ 95%CL (1 toyMC)
   68% expected band : 5.7216 < r < 5.7216
   95% expected band : 5.7216 < r < 5.7216
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 513659817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76155 +/- 0.00635795 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.76155 @ 95%CL (1 toyMC)
median expected limit: r < 2.76155 @ 95%CL (1 toyMC)
   68% expected band : 2.76155 < r < 2.76155
   95% expected band : 2.76155 < r < 2.76155
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 302764262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.3868 +/- 0.00595523 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.3868 @ 95%CL (1 toyMC)
median expected limit: r < 2.3868 @ 95%CL (1 toyMC)
   68% expected band : 2.3868 < r < 2.3868
   95% expected band : 2.3868 < r < 2.3868
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1124115032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17473 +/- 0.00708153 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.17473 @ 95%CL (1 toyMC)
median expected limit: r < 4.17473 @ 95%CL (1 toyMC)
   68% expected band : 4.17473 < r < 4.17473
   95% expected band : 4.17473 < r < 4.17473
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1004821732
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62739 +/- 0.00645114 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.62739 @ 95%CL (1 toyMC)
median expected limit: r < 2.62739 @ 95%CL (1 toyMC)
   68% expected band : 2.62739 < r < 2.62739
   95% expected band : 2.62739 < r < 2.62739
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -897593874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.53289 +/- 0.00709525 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.53289 @ 95%CL (1 toyMC)
median expected limit: r < 3.53289 @ 95%CL (1 toyMC)
   68% expected band : 3.53289 < r < 3.53289
   95% expected band : 3.53289 < r < 3.53289
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1004440853.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1017355677.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1026987416.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1053717652.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1065189763.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-115953012.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1184107591.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1185502324.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1226052606.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1313123952.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1376860011.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-139551367.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-144678986.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1490128227.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-163527299.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-165200047.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1661866677.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1676520925.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1728352414.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1766020403.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1796870795.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1833823829.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1869965418.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1909887578.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1937105847.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1960889918.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-1980013087.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-1995941446.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-2088303222.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-2099554800.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-248507453.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-269568312.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-278533088.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-303855865.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-374573544.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-384363115.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-450016910.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-633868707.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-674767603.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-732059387.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-740670822.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-897593874.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-930752417.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-955481199.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-965366068.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-976988315.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-981910774.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.1004821732.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.1026976246.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.1043791895.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.104406430.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1050334939.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1060236828.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1065711322.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1075941834.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1080905522.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1105098332.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1124115032.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1156683155.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1162024397.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1174571929.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1303139055.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1321436497.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1347798113.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1458618684.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1480002412.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1505857234.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1525907641.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1525991680.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1585752232.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1592894374.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.166585127.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.16690808.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1807952321.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.1842600784.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.1844825816.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.1900088124.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.1986754550.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.2013487115.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.2023968638.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.2078646976.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.2095464134.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.216196411.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.245241676.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.302764262.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.310762041.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.345523448.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.363358985.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.373401923.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.455228515.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.513659817.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.564284329.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.65020218.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.742374758.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.754248537.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.765897374.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.801697039.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.85447533.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.88099698.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.960880447.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 529181545
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52901 +/- 0.00464111 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.52901 @ 95%CL (1 toyMC)
median expected limit: r < 2.52901 @ 95%CL (1 toyMC)
   68% expected band : 2.52901 < r < 2.52901
   95% expected band : 2.52901 < r < 2.52901
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1810676376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.51827 +/- 0.00645473 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.51827 @ 95%CL (1 toyMC)
median expected limit: r < 2.51827 @ 95%CL (1 toyMC)
   68% expected band : 2.51827 < r < 2.51827
   95% expected band : 2.51827 < r < 2.51827
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 267025766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.80573 +/- 0.00792398 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.80573 @ 95%CL (1 toyMC)
median expected limit: r < 2.80573 @ 95%CL (1 toyMC)
   68% expected band : 2.80573 < r < 2.80573
   95% expected band : 2.80573 < r < 2.80573
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1172830616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50455 +/- 0.00656729 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.50455 @ 95%CL (1 toyMC)
median expected limit: r < 2.50455 @ 95%CL (1 toyMC)
   68% expected band : 2.50455 < r < 2.50455
   95% expected band : 2.50455 < r < 2.50455
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 460175279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.27278 +/- 0.00765364 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.27278 @ 95%CL (1 toyMC)
median expected limit: r < 4.27278 @ 95%CL (1 toyMC)
   68% expected band : 4.27278 < r < 4.27278
   95% expected band : 4.27278 < r < 4.27278
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -560470100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.74551 +/- 0.00718761 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.74551 @ 95%CL (1 toyMC)
median expected limit: r < 2.74551 @ 95%CL (1 toyMC)
   68% expected band : 2.74551 < r < 2.74551
   95% expected band : 2.74551 < r < 2.74551
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2128504999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.00867 +/- 0.00665799 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.00867 @ 95%CL (1 toyMC)
median expected limit: r < 3.00867 @ 95%CL (1 toyMC)
   68% expected band : 3.00867 < r < 3.00867
   95% expected band : 3.00867 < r < 3.00867
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 266956087
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27857 +/- 0.00559355 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.27857 @ 95%CL (1 toyMC)
median expected limit: r < 3.27857 @ 95%CL (1 toyMC)
   68% expected band : 3.27857 < r < 3.27857
   95% expected band : 3.27857 < r < 3.27857
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1395371167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.05618 +/- 0.00649895 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.05618 @ 95%CL (1 toyMC)
median expected limit: r < 4.05618 @ 95%CL (1 toyMC)
   68% expected band : 4.05618 < r < 4.05618
   95% expected band : 4.05618 < r < 4.05618
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1130109062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2614 +/- 0.00734496 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.2614 @ 95%CL (1 toyMC)
median expected limit: r < 3.2614 @ 95%CL (1 toyMC)
   68% expected band : 3.2614 < r < 3.2614
   95% expected band : 3.2614 < r < 3.2614
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -561644970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.95278 +/- 0.00572332 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.95278 @ 95%CL (1 toyMC)
median expected limit: r < 2.95278 @ 95%CL (1 toyMC)
   68% expected band : 2.95278 < r < 2.95278
   95% expected band : 2.95278 < r < 2.95278
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1081619852
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.61109 +/- 0.00690876 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.61109 @ 95%CL (1 toyMC)
median expected limit: r < 3.61109 @ 95%CL (1 toyMC)
   68% expected band : 3.61109 < r < 3.61109
   95% expected band : 3.61109 < r < 3.61109
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -331612831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.32412 +/- 0.00667728 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.32412 @ 95%CL (1 toyMC)
median expected limit: r < 3.32412 @ 95%CL (1 toyMC)
   68% expected band : 3.32412 < r < 3.32412
   95% expected band : 3.32412 < r < 3.32412
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1207771592
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53455 +/- 0.00657927 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.53455 @ 95%CL (1 toyMC)
median expected limit: r < 2.53455 @ 95%CL (1 toyMC)
   68% expected band : 2.53455 < r < 2.53455
   95% expected band : 2.53455 < r < 2.53455
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 442371137
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52269 +/- 0.00659118 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.52269 @ 95%CL (1 toyMC)
median expected limit: r < 2.52269 @ 95%CL (1 toyMC)
   68% expected band : 2.52269 < r < 2.52269
   95% expected band : 2.52269 < r < 2.52269
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -69025130
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.00293 +/- 0.00641823 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.00293 @ 95%CL (1 toyMC)
median expected limit: r < 3.00293 @ 95%CL (1 toyMC)
   68% expected band : 3.00293 < r < 3.00293
   95% expected band : 3.00293 < r < 3.00293
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1165933609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.51978 +/- 0.00654396 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.51978 @ 95%CL (1 toyMC)
median expected limit: r < 2.51978 @ 95%CL (1 toyMC)
   68% expected band : 2.51978 < r < 2.51978
   95% expected band : 2.51978 < r < 2.51978
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1107924188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.04142 +/- 0.00889311 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.04142 @ 95%CL (1 toyMC)
median expected limit: r < 5.04142 @ 95%CL (1 toyMC)
   68% expected band : 5.04142 < r < 5.04142
   95% expected band : 5.04142 < r < 5.04142
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 758867706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.58 +/- 0.00603585 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.58 @ 95%CL (1 toyMC)
median expected limit: r < 3.58 @ 95%CL (1 toyMC)
   68% expected band : 3.58 < r < 3.58
   95% expected band : 3.58 < r < 3.58
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1512574840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8982 +/- 0.00640341 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.8982 @ 95%CL (1 toyMC)
median expected limit: r < 2.8982 @ 95%CL (1 toyMC)
   68% expected band : 2.8982 < r < 2.8982
   95% expected band : 2.8982 < r < 2.8982
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1439376452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.80362 +/- 0.00700834 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.80362 @ 95%CL (1 toyMC)
median expected limit: r < 2.80362 @ 95%CL (1 toyMC)
   68% expected band : 2.80362 < r < 2.80362
   95% expected band : 2.80362 < r < 2.80362
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1143990275
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1805 +/- 0.00731614 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.1805 @ 95%CL (1 toyMC)
median expected limit: r < 3.1805 @ 95%CL (1 toyMC)
   68% expected band : 3.1805 < r < 3.1805
   95% expected band : 3.1805 < r < 3.1805
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1296198131
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12062 +/- 0.00839902 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.12062 @ 95%CL (1 toyMC)
median expected limit: r < 3.12062 @ 95%CL (1 toyMC)
   68% expected band : 3.12062 < r < 3.12062
   95% expected band : 3.12062 < r < 3.12062
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 357931715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1756 +/- 0.00823889 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.1756 @ 95%CL (1 toyMC)
median expected limit: r < 3.1756 @ 95%CL (1 toyMC)
   68% expected band : 3.1756 < r < 3.1756
   95% expected band : 3.1756 < r < 3.1756
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1755999400
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98012 +/- 0.0072015 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.98012 @ 95%CL (1 toyMC)
median expected limit: r < 2.98012 @ 95%CL (1 toyMC)
   68% expected band : 2.98012 < r < 2.98012
   95% expected band : 2.98012 < r < 2.98012
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1543027502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.18429 +/- 0.00578903 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.18429 @ 95%CL (1 toyMC)
median expected limit: r < 3.18429 @ 95%CL (1 toyMC)
   68% expected band : 3.18429 < r < 3.18429
   95% expected band : 3.18429 < r < 3.18429
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1886264485
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54692 +/- 0.0055893 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.54692 @ 95%CL (1 toyMC)
median expected limit: r < 2.54692 @ 95%CL (1 toyMC)
   68% expected band : 2.54692 < r < 2.54692
   95% expected band : 2.54692 < r < 2.54692
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 218347384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.34825 +/- 0.00596908 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.34825 @ 95%CL (1 toyMC)
median expected limit: r < 3.34825 @ 95%CL (1 toyMC)
   68% expected band : 3.34825 < r < 3.34825
   95% expected band : 3.34825 < r < 3.34825
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 307469296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.80692 +/- 0.00765846 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.80692 @ 95%CL (1 toyMC)
median expected limit: r < 2.80692 @ 95%CL (1 toyMC)
   68% expected band : 2.80692 < r < 2.80692
   95% expected band : 2.80692 < r < 2.80692
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 528411867
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53521 +/- 0.00646773 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.53521 @ 95%CL (1 toyMC)
median expected limit: r < 2.53521 @ 95%CL (1 toyMC)
   68% expected band : 2.53521 < r < 2.53521
   95% expected band : 2.53521 < r < 2.53521
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 640786870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6187 +/- 0.00670798 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.6187 @ 95%CL (1 toyMC)
median expected limit: r < 3.6187 @ 95%CL (1 toyMC)
   68% expected band : 3.6187 < r < 3.6187
   95% expected band : 3.6187 < r < 3.6187
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1043265336
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.00916 +/- 0.00604641 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.00916 @ 95%CL (1 toyMC)
median expected limit: r < 3.00916 @ 95%CL (1 toyMC)
   68% expected band : 3.00916 < r < 3.00916
   95% expected band : 3.00916 < r < 3.00916
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -207691552
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45793 +/- 0.00668727 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.45793 @ 95%CL (1 toyMC)
median expected limit: r < 3.45793 @ 95%CL (1 toyMC)
   68% expected band : 3.45793 < r < 3.45793
   95% expected band : 3.45793 < r < 3.45793
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1817378344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53893 +/- 0.00563471 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.53893 @ 95%CL (1 toyMC)
median expected limit: r < 2.53893 @ 95%CL (1 toyMC)
   68% expected band : 2.53893 < r < 2.53893
   95% expected band : 2.53893 < r < 2.53893
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1096942838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13362 +/- 0.00824752 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.13362 @ 95%CL (1 toyMC)
median expected limit: r < 3.13362 @ 95%CL (1 toyMC)
   68% expected band : 3.13362 < r < 3.13362
   95% expected band : 3.13362 < r < 3.13362
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -113541005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53406 +/- 0.00710785 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.53406 @ 95%CL (1 toyMC)
median expected limit: r < 2.53406 @ 95%CL (1 toyMC)
   68% expected band : 2.53406 < r < 2.53406
   95% expected band : 2.53406 < r < 2.53406
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 29509043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76081 +/- 0.00690653 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.76081 @ 95%CL (1 toyMC)
median expected limit: r < 2.76081 @ 95%CL (1 toyMC)
   68% expected band : 2.76081 < r < 2.76081
   95% expected band : 2.76081 < r < 2.76081
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 25300103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93955 +/- 0.00688242 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.93955 @ 95%CL (1 toyMC)
median expected limit: r < 2.93955 @ 95%CL (1 toyMC)
   68% expected band : 2.93955 < r < 2.93955
   95% expected band : 2.93955 < r < 2.93955
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 309236230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.55679 +/- 0.00549752 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.55679 @ 95%CL (1 toyMC)
median expected limit: r < 2.55679 @ 95%CL (1 toyMC)
   68% expected band : 2.55679 < r < 2.55679
   95% expected band : 2.55679 < r < 2.55679
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1395490863
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53379 +/- 0.00656996 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.53379 @ 95%CL (1 toyMC)
median expected limit: r < 2.53379 @ 95%CL (1 toyMC)
   68% expected band : 2.53379 < r < 2.53379
   95% expected band : 2.53379 < r < 2.53379
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 173500126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.51995 +/- 0.0062963 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.51995 @ 95%CL (1 toyMC)
median expected limit: r < 2.51995 @ 95%CL (1 toyMC)
   68% expected band : 2.51995 < r < 2.51995
   95% expected band : 2.51995 < r < 2.51995
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1250972940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.58723 +/- 0.00693117 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.58723 @ 95%CL (1 toyMC)
median expected limit: r < 4.58723 @ 95%CL (1 toyMC)
   68% expected band : 4.58723 < r < 4.58723
   95% expected band : 4.58723 < r < 4.58723
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1232608492
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.17855 +/- 0.00792126 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.17855 @ 95%CL (1 toyMC)
median expected limit: r < 3.17855 @ 95%CL (1 toyMC)
   68% expected band : 3.17855 < r < 3.17855
   95% expected band : 3.17855 < r < 3.17855
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1147124318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79991 +/- 0.00639785 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.79991 @ 95%CL (1 toyMC)
median expected limit: r < 2.79991 @ 95%CL (1 toyMC)
   68% expected band : 2.79991 < r < 2.79991
   95% expected band : 2.79991 < r < 2.79991
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 655042908
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.81976 +/- 0.00676346 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.81976 @ 95%CL (1 toyMC)
median expected limit: r < 2.81976 @ 95%CL (1 toyMC)
   68% expected band : 2.81976 < r < 2.81976
   95% expected band : 2.81976 < r < 2.81976
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1385338506
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.2292 +/- 0.00758748 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.2292 @ 95%CL (1 toyMC)
median expected limit: r < 4.2292 @ 95%CL (1 toyMC)
   68% expected band : 4.2292 < r < 4.2292
   95% expected band : 4.2292 < r < 4.2292
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1978122951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.99651 +/- 0.0073609 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.99651 @ 95%CL (1 toyMC)
median expected limit: r < 3.99651 @ 95%CL (1 toyMC)
   68% expected band : 3.99651 < r < 3.99651
   95% expected band : 3.99651 < r < 3.99651
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -222431833
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16631 +/- 0.00619769 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.16631 @ 95%CL (1 toyMC)
median expected limit: r < 3.16631 @ 95%CL (1 toyMC)
   68% expected band : 3.16631 < r < 3.16631
   95% expected band : 3.16631 < r < 3.16631
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1613071916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89016 +/- 0.00872159 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.89016 @ 95%CL (1 toyMC)
median expected limit: r < 3.89016 @ 95%CL (1 toyMC)
   68% expected band : 3.89016 < r < 3.89016
   95% expected band : 3.89016 < r < 3.89016
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -386001716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.95283 +/- 0.00729081 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.95283 @ 95%CL (1 toyMC)
median expected limit: r < 2.95283 @ 95%CL (1 toyMC)
   68% expected band : 2.95283 < r < 2.95283
   95% expected band : 2.95283 < r < 2.95283
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -255343027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2288 +/- 0.00636005 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.2288 @ 95%CL (1 toyMC)
median expected limit: r < 3.2288 @ 95%CL (1 toyMC)
   68% expected band : 3.2288 < r < 3.2288
   95% expected band : 3.2288 < r < 3.2288
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 171116193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79789 +/- 0.00636968 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.79789 @ 95%CL (1 toyMC)
median expected limit: r < 2.79789 @ 95%CL (1 toyMC)
   68% expected band : 2.79789 < r < 2.79789
   95% expected band : 2.79789 < r < 2.79789
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1615623475
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.95238 +/- 0.00744385 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.95238 @ 95%CL (1 toyMC)
median expected limit: r < 4.95238 @ 95%CL (1 toyMC)
   68% expected band : 4.95238 < r < 4.95238
   95% expected band : 4.95238 < r < 4.95238
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 682145573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53043 +/- 0.00647753 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.53043 @ 95%CL (1 toyMC)
median expected limit: r < 2.53043 @ 95%CL (1 toyMC)
   68% expected band : 2.53043 < r < 2.53043
   95% expected band : 2.53043 < r < 2.53043
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1443334056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.56987 +/- 0.00709428 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.56987 @ 95%CL (1 toyMC)
median expected limit: r < 4.56987 @ 95%CL (1 toyMC)
   68% expected band : 4.56987 < r < 4.56987
   95% expected band : 4.56987 < r < 4.56987
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1013885989
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54574 +/- 0.00531622 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.54574 @ 95%CL (1 toyMC)
median expected limit: r < 2.54574 @ 95%CL (1 toyMC)
   68% expected band : 2.54574 < r < 2.54574
   95% expected band : 2.54574 < r < 2.54574
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1405443497
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.02702 +/- 0.0081362 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.02702 @ 95%CL (1 toyMC)
median expected limit: r < 4.02702 @ 95%CL (1 toyMC)
   68% expected band : 4.02702 < r < 4.02702
   95% expected band : 4.02702 < r < 4.02702
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2106960072
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44549 +/- 0.00866719 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.44549 @ 95%CL (1 toyMC)
median expected limit: r < 3.44549 @ 95%CL (1 toyMC)
   68% expected band : 3.44549 < r < 3.44549
   95% expected band : 3.44549 < r < 3.44549
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -246367637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.02322 +/- 0.00518525 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.02322 @ 95%CL (1 toyMC)
median expected limit: r < 3.02322 @ 95%CL (1 toyMC)
   68% expected band : 3.02322 < r < 3.02322
   95% expected band : 3.02322 < r < 3.02322
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1490310427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.78319 +/- 0.00722639 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.78319 @ 95%CL (1 toyMC)
median expected limit: r < 3.78319 @ 95%CL (1 toyMC)
   68% expected band : 3.78319 < r < 3.78319
   95% expected band : 3.78319 < r < 3.78319
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1868036618
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92813 +/- 0.00599934 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.92813 @ 95%CL (1 toyMC)
median expected limit: r < 3.92813 @ 95%CL (1 toyMC)
   68% expected band : 3.92813 < r < 3.92813
   95% expected band : 3.92813 < r < 3.92813
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 665030672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.55835 +/- 0.00736405 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.55835 @ 95%CL (1 toyMC)
median expected limit: r < 3.55835 @ 95%CL (1 toyMC)
   68% expected band : 3.55835 < r < 3.55835
   95% expected band : 3.55835 < r < 3.55835
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2146081114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5352 +/- 0.00647004 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.5352 @ 95%CL (1 toyMC)
median expected limit: r < 2.5352 @ 95%CL (1 toyMC)
   68% expected band : 2.5352 < r < 2.5352
   95% expected band : 2.5352 < r < 2.5352
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1475420547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52369 +/- 0.00675731 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.52369 @ 95%CL (1 toyMC)
median expected limit: r < 2.52369 @ 95%CL (1 toyMC)
   68% expected band : 2.52369 < r < 2.52369
   95% expected band : 2.52369 < r < 2.52369
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 57256472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.74955 +/- 0.00692681 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.74955 @ 95%CL (1 toyMC)
median expected limit: r < 2.74955 @ 95%CL (1 toyMC)
   68% expected band : 2.74955 < r < 2.74955
   95% expected band : 2.74955 < r < 2.74955
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 755611355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.85675 +/- 0.00790649 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.85675 @ 95%CL (1 toyMC)
median expected limit: r < 3.85675 @ 95%CL (1 toyMC)
   68% expected band : 3.85675 < r < 3.85675
   95% expected band : 3.85675 < r < 3.85675
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 211840971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91165 +/- 0.0083853 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.91165 @ 95%CL (1 toyMC)
median expected limit: r < 2.91165 @ 95%CL (1 toyMC)
   68% expected band : 2.91165 < r < 2.91165
   95% expected band : 2.91165 < r < 2.91165
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -766837391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66442 +/- 0.00492855 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.66442 @ 95%CL (1 toyMC)
median expected limit: r < 3.66442 @ 95%CL (1 toyMC)
   68% expected band : 3.66442 < r < 3.66442
   95% expected band : 3.66442 < r < 3.66442
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1261267743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.12533 +/- 0.00525607 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.12533 @ 95%CL (1 toyMC)
median expected limit: r < 4.12533 @ 95%CL (1 toyMC)
   68% expected band : 4.12533 < r < 4.12533
   95% expected band : 4.12533 < r < 4.12533
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2108005657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91108 +/- 0.00688375 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.91108 @ 95%CL (1 toyMC)
median expected limit: r < 2.91108 @ 95%CL (1 toyMC)
   68% expected band : 2.91108 < r < 2.91108
   95% expected band : 2.91108 < r < 2.91108
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -142907658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.05326 +/- 0.00772865 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.05326 @ 95%CL (1 toyMC)
median expected limit: r < 6.05326 @ 95%CL (1 toyMC)
   68% expected band : 6.05326 < r < 6.05326
   95% expected band : 6.05326 < r < 6.05326
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -924636768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.83369 +/- 0.00697336 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.83369 @ 95%CL (1 toyMC)
median expected limit: r < 4.83369 @ 95%CL (1 toyMC)
   68% expected band : 4.83369 < r < 4.83369
   95% expected band : 4.83369 < r < 4.83369
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2025721542
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.91597 +/- 0.00740885 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.91597 @ 95%CL (1 toyMC)
median expected limit: r < 4.91597 @ 95%CL (1 toyMC)
   68% expected band : 4.91597 < r < 4.91597
   95% expected band : 4.91597 < r < 4.91597
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1960651536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.26056 +/- 0.0086844 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.26056 @ 95%CL (1 toyMC)
median expected limit: r < 3.26056 @ 95%CL (1 toyMC)
   68% expected band : 3.26056 < r < 3.26056
   95% expected band : 3.26056 < r < 3.26056
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1271926862
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.9994 +/- 0.00909175 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.9994 @ 95%CL (1 toyMC)
median expected limit: r < 4.9994 @ 95%CL (1 toyMC)
   68% expected band : 4.9994 < r < 4.9994
   95% expected band : 4.9994 < r < 4.9994
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1156145260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5148 +/- 0.00593894 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.5148 @ 95%CL (1 toyMC)
median expected limit: r < 2.5148 @ 95%CL (1 toyMC)
   68% expected band : 2.5148 < r < 2.5148
   95% expected band : 2.5148 < r < 2.5148
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1894329097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16272 +/- 0.00664169 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.16272 @ 95%CL (1 toyMC)
median expected limit: r < 3.16272 @ 95%CL (1 toyMC)
   68% expected band : 3.16272 < r < 3.16272
   95% expected band : 3.16272 < r < 3.16272
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -744737050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53809 +/- 0.00651854 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.53809 @ 95%CL (1 toyMC)
median expected limit: r < 2.53809 @ 95%CL (1 toyMC)
   68% expected band : 2.53809 < r < 2.53809
   95% expected band : 2.53809 < r < 2.53809
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1115237860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.38106 +/- 0.00831284 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.38106 @ 95%CL (1 toyMC)
median expected limit: r < 3.38106 @ 95%CL (1 toyMC)
   68% expected band : 3.38106 < r < 3.38106
   95% expected band : 3.38106 < r < 3.38106
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -807010818
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.60176 +/- 0.00722934 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.60176 @ 95%CL (1 toyMC)
median expected limit: r < 3.60176 @ 95%CL (1 toyMC)
   68% expected band : 3.60176 < r < 3.60176
   95% expected band : 3.60176 < r < 3.60176
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -160999535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.86861 +/- 0.00659371 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.86861 @ 95%CL (1 toyMC)
median expected limit: r < 2.86861 @ 95%CL (1 toyMC)
   68% expected band : 2.86861 < r < 2.86861
   95% expected band : 2.86861 < r < 2.86861
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1896296943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.17055 +/- 0.00695411 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.17055 @ 95%CL (1 toyMC)
median expected limit: r < 3.17055 @ 95%CL (1 toyMC)
   68% expected band : 3.17055 < r < 3.17055
   95% expected band : 3.17055 < r < 3.17055
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1516974494
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.34121 +/- 0.00742957 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.34121 @ 95%CL (1 toyMC)
median expected limit: r < 3.34121 @ 95%CL (1 toyMC)
   68% expected band : 3.34121 < r < 3.34121
   95% expected band : 3.34121 < r < 3.34121
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1717969411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.2419 +/- 0.00876292 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.2419 @ 95%CL (1 toyMC)
median expected limit: r < 5.2419 @ 95%CL (1 toyMC)
   68% expected band : 5.2419 < r < 5.2419
   95% expected band : 5.2419 < r < 5.2419
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 713631285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52871 +/- 0.00521879 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.52871 @ 95%CL (1 toyMC)
median expected limit: r < 2.52871 @ 95%CL (1 toyMC)
   68% expected band : 2.52871 < r < 2.52871
   95% expected band : 2.52871 < r < 2.52871
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -93070699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87407 +/- 0.00774874 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.87407 @ 95%CL (1 toyMC)
median expected limit: r < 2.87407 @ 95%CL (1 toyMC)
   68% expected band : 2.87407 < r < 2.87407
   95% expected band : 2.87407 < r < 2.87407
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -309349757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.75875 +/- 0.00617459 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.75875 @ 95%CL (1 toyMC)
median expected limit: r < 2.75875 @ 95%CL (1 toyMC)
   68% expected band : 2.75875 < r < 2.75875
   95% expected band : 2.75875 < r < 2.75875
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1880397759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6837 +/- 0.00601027 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.6837 @ 95%CL (1 toyMC)
median expected limit: r < 3.6837 @ 95%CL (1 toyMC)
   68% expected band : 3.6837 < r < 3.6837
   95% expected band : 3.6837 < r < 3.6837
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 476218942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.3916 +/- 0.00839695 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.3916 @ 95%CL (1 toyMC)
median expected limit: r < 4.3916 @ 95%CL (1 toyMC)
   68% expected band : 4.3916 < r < 4.3916
   95% expected band : 4.3916 < r < 4.3916
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1954025168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.17694 +/- 0.00716924 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.17694 @ 95%CL (1 toyMC)
median expected limit: r < 3.17694 @ 95%CL (1 toyMC)
   68% expected band : 3.17694 < r < 3.17694
   95% expected band : 3.17694 < r < 3.17694
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -669877741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25056 +/- 0.00505549 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.25056 @ 95%CL (1 toyMC)
median expected limit: r < 3.25056 @ 95%CL (1 toyMC)
   68% expected band : 3.25056 < r < 3.25056
   95% expected band : 3.25056 < r < 3.25056
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1115081064
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.43194 +/- 0.00728519 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.43194 @ 95%CL (1 toyMC)
median expected limit: r < 4.43194 @ 95%CL (1 toyMC)
   68% expected band : 4.43194 < r < 4.43194
   95% expected band : 4.43194 < r < 4.43194
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -244274602
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99404 +/- 0.0053398 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.99404 @ 95%CL (1 toyMC)
median expected limit: r < 2.99404 @ 95%CL (1 toyMC)
   68% expected band : 2.99404 < r < 2.99404
   95% expected band : 2.99404 < r < 2.99404
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1166720083
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98609 +/- 0.00696518 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.98609 @ 95%CL (1 toyMC)
median expected limit: r < 2.98609 @ 95%CL (1 toyMC)
   68% expected band : 2.98609 < r < 2.98609
   95% expected band : 2.98609 < r < 2.98609
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2124268404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.42065 +/- 0.00822558 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.42065 @ 95%CL (1 toyMC)
median expected limit: r < 5.42065 @ 95%CL (1 toyMC)
   68% expected band : 5.42065 < r < 5.42065
   95% expected band : 5.42065 < r < 5.42065
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 876174199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54936 +/- 0.00742332 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.54936 @ 95%CL (1 toyMC)
median expected limit: r < 2.54936 @ 95%CL (1 toyMC)
   68% expected band : 2.54936 < r < 2.54936
   95% expected band : 2.54936 < r < 2.54936
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 207615301
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53235 +/- 0.00543909 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.53235 @ 95%CL (1 toyMC)
median expected limit: r < 2.53235 @ 95%CL (1 toyMC)
   68% expected band : 2.53235 < r < 2.53235
   95% expected band : 2.53235 < r < 2.53235
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1644990383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.83399 +/- 0.0077161 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.83399 @ 95%CL (1 toyMC)
median expected limit: r < 3.83399 @ 95%CL (1 toyMC)
   68% expected band : 3.83399 < r < 3.83399
   95% expected band : 3.83399 < r < 3.83399
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1707995783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.31518 +/- 0.00584389 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.31518 @ 95%CL (1 toyMC)
median expected limit: r < 3.31518 @ 95%CL (1 toyMC)
   68% expected band : 3.31518 < r < 3.31518
   95% expected band : 3.31518 < r < 3.31518
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1469936814
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91254 +/- 0.0069708 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.91254 @ 95%CL (1 toyMC)
median expected limit: r < 2.91254 @ 95%CL (1 toyMC)
   68% expected band : 2.91254 < r < 2.91254
   95% expected band : 2.91254 < r < 2.91254
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1013885989.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1115081064.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1115237860.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1130109062.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-113541005.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1143990275.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1147124318.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1156145260.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1165933609.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1166720083.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1172830616.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1250972940.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1271926862.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1385338506.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1395371167.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1395490863.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-142907658.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1443334056.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1475420547.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1543027502.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-160999535.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1615623475.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1717969411.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1817378344.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1868036618.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1880397759.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-1886264485.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-1894329097.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-1896296943.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-1960651536.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-1978122951.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-2025721542.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-207691552.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-2106960072.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-2146081114.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-222431833.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-244274602.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-246367637.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-255343027.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-309349757.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-331612831.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-386001716.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-560470100.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-561644970.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-669877741.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-69025130.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-744737050.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-766837391.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-807010818.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-924636768.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.-93070699.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1043265336.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1081619852.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1096942838.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1107924188.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1207771592.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1232608492.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1261267743.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1296198131.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1405443497.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1439376452.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1469936814.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1490310427.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1512574840.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1516974494.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1613071916.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1644990383.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1707995783.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.171116193.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.173500126.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1755999400.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1810676376.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1954025168.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.207615301.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.2108005657.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.211840971.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.2124268404.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.2128504999.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.218347384.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.25300103.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.266956087.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.267025766.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.29509043.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.307469296.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.309236230.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.357931715.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.442371137.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.460175279.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.476218942.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.528411867.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.529181545.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.57256472.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.640786870.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.655042908.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.665030672.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.682145573.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.713631285.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.755611355.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.758867706.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.876174199.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 801554067
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6482 +/- 0.00760248 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.6482 @ 95%CL (1 toyMC)
median expected limit: r < 2.6482 @ 95%CL (1 toyMC)
   68% expected band : 2.6482 < r < 2.6482
   95% expected band : 2.6482 < r < 2.6482
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1853287025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.15426 +/- 0.00709766 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.15426 @ 95%CL (1 toyMC)
median expected limit: r < 3.15426 @ 95%CL (1 toyMC)
   68% expected band : 3.15426 < r < 3.15426
   95% expected band : 3.15426 < r < 3.15426
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1297906383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.88205 +/- 0.00834907 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.88205 @ 95%CL (1 toyMC)
median expected limit: r < 3.88205 @ 95%CL (1 toyMC)
   68% expected band : 3.88205 < r < 3.88205
   95% expected band : 3.88205 < r < 3.88205
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -258797269
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16533 +/- 0.00784283 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.16533 @ 95%CL (1 toyMC)
median expected limit: r < 3.16533 @ 95%CL (1 toyMC)
   68% expected band : 3.16533 < r < 3.16533
   95% expected band : 3.16533 < r < 3.16533
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 135302462
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.61275 +/- 0.00651964 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.61275 @ 95%CL (1 toyMC)
median expected limit: r < 4.61275 @ 95%CL (1 toyMC)
   68% expected band : 4.61275 < r < 4.61275
   95% expected band : 4.61275 < r < 4.61275
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1224058316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62259 +/- 0.00714347 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.62259 @ 95%CL (1 toyMC)
median expected limit: r < 2.62259 @ 95%CL (1 toyMC)
   68% expected band : 2.62259 < r < 2.62259
   95% expected band : 2.62259 < r < 2.62259
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 295517358
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.15586 +/- 0.0081889 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.15586 @ 95%CL (1 toyMC)
median expected limit: r < 3.15586 @ 95%CL (1 toyMC)
   68% expected band : 3.15586 < r < 3.15586
   95% expected band : 3.15586 < r < 3.15586
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1943961484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.32144 +/- 0.00701961 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.32144 @ 95%CL (1 toyMC)
median expected limit: r < 3.32144 @ 95%CL (1 toyMC)
   68% expected band : 3.32144 < r < 3.32144
   95% expected band : 3.32144 < r < 3.32144
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -285094182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63883 +/- 0.00674667 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63883 @ 95%CL (1 toyMC)
median expected limit: r < 2.63883 @ 95%CL (1 toyMC)
   68% expected band : 2.63883 < r < 2.63883
   95% expected band : 2.63883 < r < 2.63883
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1173674008
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12861 +/- 0.00839541 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.12861 @ 95%CL (1 toyMC)
median expected limit: r < 3.12861 @ 95%CL (1 toyMC)
   68% expected band : 3.12861 < r < 3.12861
   95% expected band : 3.12861 < r < 3.12861
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1176234659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.97418 +/- 0.00640251 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.97418 @ 95%CL (1 toyMC)
median expected limit: r < 2.97418 @ 95%CL (1 toyMC)
   68% expected band : 2.97418 < r < 2.97418
   95% expected band : 2.97418 < r < 2.97418
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 477783497
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.55474 +/- 0.00790659 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.55474 @ 95%CL (1 toyMC)
median expected limit: r < 5.55474 @ 95%CL (1 toyMC)
   68% expected band : 5.55474 < r < 5.55474
   95% expected band : 5.55474 < r < 5.55474
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1368173768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65493 +/- 0.00694158 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.65493 @ 95%CL (1 toyMC)
median expected limit: r < 2.65493 @ 95%CL (1 toyMC)
   68% expected band : 2.65493 < r < 2.65493
   95% expected band : 2.65493 < r < 2.65493
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -740070126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.3022 +/- 0.00544597 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.3022 @ 95%CL (1 toyMC)
median expected limit: r < 3.3022 @ 95%CL (1 toyMC)
   68% expected band : 3.3022 < r < 3.3022
   95% expected band : 3.3022 < r < 3.3022
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1571847714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65077 +/- 0.00563236 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.65077 @ 95%CL (1 toyMC)
median expected limit: r < 2.65077 @ 95%CL (1 toyMC)
   68% expected band : 2.65077 < r < 2.65077
   95% expected band : 2.65077 < r < 2.65077
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 701121953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.39946 +/- 0.00628595 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.39946 @ 95%CL (1 toyMC)
median expected limit: r < 3.39946 @ 95%CL (1 toyMC)
   68% expected band : 3.39946 < r < 3.39946
   95% expected band : 3.39946 < r < 3.39946
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 458589611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13271 +/- 0.00721449 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.13271 @ 95%CL (1 toyMC)
median expected limit: r < 3.13271 @ 95%CL (1 toyMC)
   68% expected band : 3.13271 < r < 3.13271
   95% expected band : 3.13271 < r < 3.13271
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1155541821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63145 +/- 0.00548878 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63145 @ 95%CL (1 toyMC)
median expected limit: r < 2.63145 @ 95%CL (1 toyMC)
   68% expected band : 2.63145 < r < 2.63145
   95% expected band : 2.63145 < r < 2.63145
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 651103662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65437 +/- 0.00527029 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.65437 @ 95%CL (1 toyMC)
median expected limit: r < 2.65437 @ 95%CL (1 toyMC)
   68% expected band : 2.65437 < r < 2.65437
   95% expected band : 2.65437 < r < 2.65437
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 997473969
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0354 +/- 0.00788316 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.0354 @ 95%CL (1 toyMC)
median expected limit: r < 3.0354 @ 95%CL (1 toyMC)
   68% expected band : 3.0354 < r < 3.0354
   95% expected band : 3.0354 < r < 3.0354
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -222375305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62963 +/- 0.00551126 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.62963 @ 95%CL (1 toyMC)
median expected limit: r < 2.62963 @ 95%CL (1 toyMC)
   68% expected band : 2.62963 < r < 2.62963
   95% expected band : 2.62963 < r < 2.62963
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1163155086
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.30159 +/- 0.00809311 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.30159 @ 95%CL (1 toyMC)
median expected limit: r < 5.30159 @ 95%CL (1 toyMC)
   68% expected band : 5.30159 < r < 5.30159
   95% expected band : 5.30159 < r < 5.30159
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1079621386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63548 +/- 0.00619397 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63548 @ 95%CL (1 toyMC)
median expected limit: r < 2.63548 @ 95%CL (1 toyMC)
   68% expected band : 2.63548 < r < 2.63548
   95% expected band : 2.63548 < r < 2.63548
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1658400762
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62823 +/- 0.00671534 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.62823 @ 95%CL (1 toyMC)
median expected limit: r < 2.62823 @ 95%CL (1 toyMC)
   68% expected band : 2.62823 < r < 2.62823
   95% expected band : 2.62823 < r < 2.62823
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1218986846
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.95718 +/- 0.00852133 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.95718 @ 95%CL (1 toyMC)
median expected limit: r < 3.95718 @ 95%CL (1 toyMC)
   68% expected band : 3.95718 < r < 3.95718
   95% expected band : 3.95718 < r < 3.95718
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1461737770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.11443 +/- 0.00737919 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.11443 @ 95%CL (1 toyMC)
median expected limit: r < 3.11443 @ 95%CL (1 toyMC)
   68% expected band : 3.11443 < r < 3.11443
   95% expected band : 3.11443 < r < 3.11443
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1574360755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.71656 +/- 0.00683105 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.71656 @ 95%CL (1 toyMC)
median expected limit: r < 3.71656 @ 95%CL (1 toyMC)
   68% expected band : 3.71656 < r < 3.71656
   95% expected band : 3.71656 < r < 3.71656
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1341922786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64161 +/- 0.00641986 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.64161 @ 95%CL (1 toyMC)
median expected limit: r < 2.64161 @ 95%CL (1 toyMC)
   68% expected band : 2.64161 < r < 2.64161
   95% expected band : 2.64161 < r < 2.64161
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 291906426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.73988 +/- 0.00712497 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.73988 @ 95%CL (1 toyMC)
median expected limit: r < 3.73988 @ 95%CL (1 toyMC)
   68% expected band : 3.73988 < r < 3.73988
   95% expected band : 3.73988 < r < 3.73988
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 534289785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.42135 +/- 0.00844309 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.42135 @ 95%CL (1 toyMC)
median expected limit: r < 3.42135 @ 95%CL (1 toyMC)
   68% expected band : 3.42135 < r < 3.42135
   95% expected band : 3.42135 < r < 3.42135
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1290364897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99594 +/- 0.00674637 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.99594 @ 95%CL (1 toyMC)
median expected limit: r < 2.99594 @ 95%CL (1 toyMC)
   68% expected band : 2.99594 < r < 2.99594
   95% expected band : 2.99594 < r < 2.99594
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -508668622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.30994 +/- 0.00647366 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.30994 @ 95%CL (1 toyMC)
median expected limit: r < 5.30994 @ 95%CL (1 toyMC)
   68% expected band : 5.30994 < r < 5.30994
   95% expected band : 5.30994 < r < 5.30994
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 810762070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63214 +/- 0.00524393 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63214 @ 95%CL (1 toyMC)
median expected limit: r < 2.63214 @ 95%CL (1 toyMC)
   68% expected band : 2.63214 < r < 2.63214
   95% expected band : 2.63214 < r < 2.63214
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 228942379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63872 +/- 0.00502619 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63872 @ 95%CL (1 toyMC)
median expected limit: r < 2.63872 @ 95%CL (1 toyMC)
   68% expected band : 2.63872 < r < 2.63872
   95% expected band : 2.63872 < r < 2.63872
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -911589008
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.76515 +/- 0.00578739 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.76515 @ 95%CL (1 toyMC)
median expected limit: r < 3.76515 @ 95%CL (1 toyMC)
   68% expected band : 3.76515 < r < 3.76515
   95% expected band : 3.76515 < r < 3.76515
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 226020901
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64632 +/- 0.00678216 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.64632 @ 95%CL (1 toyMC)
median expected limit: r < 2.64632 @ 95%CL (1 toyMC)
   68% expected band : 2.64632 < r < 2.64632
   95% expected band : 2.64632 < r < 2.64632
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1838333931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63658 +/- 0.00727813 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63658 @ 95%CL (1 toyMC)
median expected limit: r < 2.63658 @ 95%CL (1 toyMC)
   68% expected band : 2.63658 < r < 2.63658
   95% expected band : 2.63658 < r < 2.63658
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -483333729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62273 +/- 0.00626341 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.62273 @ 95%CL (1 toyMC)
median expected limit: r < 2.62273 @ 95%CL (1 toyMC)
   68% expected band : 2.62273 < r < 2.62273
   95% expected band : 2.62273 < r < 2.62273
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 335102885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.05196 +/- 0.00683342 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.05196 @ 95%CL (1 toyMC)
median expected limit: r < 4.05196 @ 95%CL (1 toyMC)
   68% expected band : 4.05196 < r < 4.05196
   95% expected band : 4.05196 < r < 4.05196
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -808931538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.0329 +/- 0.00739063 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.0329 @ 95%CL (1 toyMC)
median expected limit: r < 4.0329 @ 95%CL (1 toyMC)
   68% expected band : 4.0329 < r < 4.0329
   95% expected band : 4.0329 < r < 4.0329
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1337489748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65291 +/- 0.00576591 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.65291 @ 95%CL (1 toyMC)
median expected limit: r < 2.65291 @ 95%CL (1 toyMC)
   68% expected band : 2.65291 < r < 2.65291
   95% expected band : 2.65291 < r < 2.65291
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -910299298
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.32008 +/- 0.00679713 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.32008 @ 95%CL (1 toyMC)
median expected limit: r < 3.32008 @ 95%CL (1 toyMC)
   68% expected band : 3.32008 < r < 3.32008
   95% expected band : 3.32008 < r < 3.32008
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -814929588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.14459 +/- 0.00729854 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.14459 @ 95%CL (1 toyMC)
median expected limit: r < 4.14459 @ 95%CL (1 toyMC)
   68% expected band : 4.14459 < r < 4.14459
   95% expected band : 4.14459 < r < 4.14459
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -26475827
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.39902 +/- 0.00721556 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.39902 @ 95%CL (1 toyMC)
median expected limit: r < 4.39902 @ 95%CL (1 toyMC)
   68% expected band : 4.39902 < r < 4.39902
   95% expected band : 4.39902 < r < 4.39902
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2016790058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64588 +/- 0.00549687 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.64588 @ 95%CL (1 toyMC)
median expected limit: r < 2.64588 @ 95%CL (1 toyMC)
   68% expected band : 2.64588 < r < 2.64588
   95% expected band : 2.64588 < r < 2.64588
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 609052483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.11887 +/- 0.00725673 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.11887 @ 95%CL (1 toyMC)
median expected limit: r < 3.11887 @ 95%CL (1 toyMC)
   68% expected band : 3.11887 < r < 3.11887
   95% expected band : 3.11887 < r < 3.11887
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1068678211
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.72503 +/- 0.00893141 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.72503 @ 95%CL (1 toyMC)
median expected limit: r < 5.72503 @ 95%CL (1 toyMC)
   68% expected band : 5.72503 < r < 5.72503
   95% expected band : 5.72503 < r < 5.72503
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -5581321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.74785 +/- 0.00849427 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.74785 @ 95%CL (1 toyMC)
median expected limit: r < 3.74785 @ 95%CL (1 toyMC)
   68% expected band : 3.74785 < r < 3.74785
   95% expected band : 3.74785 < r < 3.74785
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1677164465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.99672 +/- 0.00696553 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.99672 @ 95%CL (1 toyMC)
median expected limit: r < 3.99672 @ 95%CL (1 toyMC)
   68% expected band : 3.99672 < r < 3.99672
   95% expected band : 3.99672 < r < 3.99672
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 803769785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63088 +/- 0.005974 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63088 @ 95%CL (1 toyMC)
median expected limit: r < 2.63088 @ 95%CL (1 toyMC)
   68% expected band : 2.63088 < r < 2.63088
   95% expected band : 2.63088 < r < 2.63088
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -373190696
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.68152 +/- 0.00925991 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.68152 @ 95%CL (1 toyMC)
median expected limit: r < 3.68152 @ 95%CL (1 toyMC)
   68% expected band : 3.68152 < r < 3.68152
   95% expected band : 3.68152 < r < 3.68152
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1466054355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64737 +/- 0.0076139 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.64737 @ 95%CL (1 toyMC)
median expected limit: r < 2.64737 @ 95%CL (1 toyMC)
   68% expected band : 2.64737 < r < 2.64737
   95% expected band : 2.64737 < r < 2.64737
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1802989733
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.48477 +/- 0.00698379 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.48477 @ 95%CL (1 toyMC)
median expected limit: r < 4.48477 @ 95%CL (1 toyMC)
   68% expected band : 4.48477 < r < 4.48477
   95% expected band : 4.48477 < r < 4.48477
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -701442815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.7837 +/- 0.00737082 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.7837 @ 95%CL (1 toyMC)
median expected limit: r < 4.7837 @ 95%CL (1 toyMC)
   68% expected band : 4.7837 < r < 4.7837
   95% expected band : 4.7837 < r < 4.7837
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -63630312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.7644 +/- 0.00806225 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.7644 @ 95%CL (1 toyMC)
median expected limit: r < 3.7644 @ 95%CL (1 toyMC)
   68% expected band : 3.7644 < r < 3.7644
   95% expected band : 3.7644 < r < 3.7644
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2101046983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.50398 +/- 0.00836022 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.50398 @ 95%CL (1 toyMC)
median expected limit: r < 3.50398 @ 95%CL (1 toyMC)
   68% expected band : 3.50398 < r < 3.50398
   95% expected band : 3.50398 < r < 3.50398
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 808431210
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.78861 +/- 0.0062401 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.78861 @ 95%CL (1 toyMC)
median expected limit: r < 3.78861 @ 95%CL (1 toyMC)
   68% expected band : 3.78861 < r < 3.78861
   95% expected band : 3.78861 < r < 3.78861
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 211915230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63207 +/- 0.00598023 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63207 @ 95%CL (1 toyMC)
median expected limit: r < 2.63207 @ 95%CL (1 toyMC)
   68% expected band : 2.63207 < r < 2.63207
   95% expected band : 2.63207 < r < 2.63207
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1606848350
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.95812 +/- 0.00645185 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.95812 @ 95%CL (1 toyMC)
median expected limit: r < 3.95812 @ 95%CL (1 toyMC)
   68% expected band : 3.95812 < r < 3.95812
   95% expected band : 3.95812 < r < 3.95812
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 28643769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63777 +/- 0.00813773 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.63777 @ 95%CL (1 toyMC)
median expected limit: r < 2.63777 @ 95%CL (1 toyMC)
   68% expected band : 2.63777 < r < 2.63777
   95% expected band : 2.63777 < r < 2.63777
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1149989958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65248 +/- 0.0061724 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.65248 @ 95%CL (1 toyMC)
median expected limit: r < 2.65248 @ 95%CL (1 toyMC)
   68% expected band : 2.65248 < r < 2.65248
   95% expected band : 2.65248 < r < 2.65248
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -76429809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06542 +/- 0.00491882 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.06542 @ 95%CL (1 toyMC)
median expected limit: r < 3.06542 @ 95%CL (1 toyMC)
   68% expected band : 3.06542 < r < 3.06542
   95% expected band : 3.06542 < r < 3.06542
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -423796711
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.88352 +/- 0.00695635 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.88352 @ 95%CL (1 toyMC)
median expected limit: r < 3.88352 @ 95%CL (1 toyMC)
   68% expected band : 3.88352 < r < 3.88352
   95% expected band : 3.88352 < r < 3.88352
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 479792473
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6318 +/- 0.00689414 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.6318 @ 95%CL (1 toyMC)
median expected limit: r < 2.6318 @ 95%CL (1 toyMC)
   68% expected band : 2.6318 < r < 2.6318
   95% expected band : 2.6318 < r < 2.6318
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -818849764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65542 +/- 0.00766737 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.65542 @ 95%CL (1 toyMC)
median expected limit: r < 2.65542 @ 95%CL (1 toyMC)
   68% expected band : 2.65542 < r < 2.65542
   95% expected band : 2.65542 < r < 2.65542
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1193739708
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63283 +/- 0.00773888 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63283 @ 95%CL (1 toyMC)
median expected limit: r < 2.63283 @ 95%CL (1 toyMC)
   68% expected band : 2.63283 < r < 2.63283
   95% expected band : 2.63283 < r < 2.63283
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2006194468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.14793 +/- 0.0067297 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.14793 @ 95%CL (1 toyMC)
median expected limit: r < 4.14793 @ 95%CL (1 toyMC)
   68% expected band : 4.14793 < r < 4.14793
   95% expected band : 4.14793 < r < 4.14793
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -719727914
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.653 +/- 0.00636877 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.653 @ 95%CL (1 toyMC)
median expected limit: r < 2.653 @ 95%CL (1 toyMC)
   68% expected band : 2.653 < r < 2.653
   95% expected band : 2.653 < r < 2.653
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 214414504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63605 +/- 0.0068658 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63605 @ 95%CL (1 toyMC)
median expected limit: r < 2.63605 @ 95%CL (1 toyMC)
   68% expected band : 2.63605 < r < 2.63605
   95% expected band : 2.63605 < r < 2.63605
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -238924171
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13912 +/- 0.00618353 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.13912 @ 95%CL (1 toyMC)
median expected limit: r < 3.13912 @ 95%CL (1 toyMC)
   68% expected band : 3.13912 < r < 3.13912
   95% expected band : 3.13912 < r < 3.13912
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1637152769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.47792 +/- 0.00631876 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.47792 @ 95%CL (1 toyMC)
median expected limit: r < 3.47792 @ 95%CL (1 toyMC)
   68% expected band : 3.47792 < r < 3.47792
   95% expected band : 3.47792 < r < 3.47792
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1709169995
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63164 +/- 0.00605392 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63164 @ 95%CL (1 toyMC)
median expected limit: r < 2.63164 @ 95%CL (1 toyMC)
   68% expected band : 2.63164 < r < 2.63164
   95% expected band : 2.63164 < r < 2.63164
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1589319913
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65711 +/- 0.00824155 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.65711 @ 95%CL (1 toyMC)
median expected limit: r < 3.65711 @ 95%CL (1 toyMC)
   68% expected band : 3.65711 < r < 3.65711
   95% expected band : 3.65711 < r < 3.65711
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -244646472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6216 +/- 0.00763961 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.6216 @ 95%CL (1 toyMC)
median expected limit: r < 2.6216 @ 95%CL (1 toyMC)
   68% expected band : 2.6216 < r < 2.6216
   95% expected band : 2.6216 < r < 2.6216
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -422828334
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.65153 +/- 0.00803314 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.65153 @ 95%CL (1 toyMC)
median expected limit: r < 4.65153 @ 95%CL (1 toyMC)
   68% expected band : 4.65153 < r < 4.65153
   95% expected band : 4.65153 < r < 4.65153
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 991523952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.46657 +/- 0.00670541 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.46657 @ 95%CL (1 toyMC)
median expected limit: r < 4.46657 @ 95%CL (1 toyMC)
   68% expected band : 4.46657 < r < 4.46657
   95% expected band : 4.46657 < r < 4.46657
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1636465697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07323 +/- 0.00649131 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.07323 @ 95%CL (1 toyMC)
median expected limit: r < 3.07323 @ 95%CL (1 toyMC)
   68% expected band : 3.07323 < r < 3.07323
   95% expected band : 3.07323 < r < 3.07323
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -600895521
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62963 +/- 0.00681212 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.62963 @ 95%CL (1 toyMC)
median expected limit: r < 2.62963 @ 95%CL (1 toyMC)
   68% expected band : 2.62963 < r < 2.62963
   95% expected band : 2.62963 < r < 2.62963
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -419068991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.29324 +/- 0.0100219 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.29324 @ 95%CL (1 toyMC)
median expected limit: r < 5.29324 @ 95%CL (1 toyMC)
   68% expected band : 5.29324 < r < 5.29324
   95% expected band : 5.29324 < r < 5.29324
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 531140725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62625 +/- 0.00728973 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.62625 @ 95%CL (1 toyMC)
median expected limit: r < 2.62625 @ 95%CL (1 toyMC)
   68% expected band : 2.62625 < r < 2.62625
   95% expected band : 2.62625 < r < 2.62625
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 457363007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6487 +/- 0.00701127 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.6487 @ 95%CL (1 toyMC)
median expected limit: r < 2.6487 @ 95%CL (1 toyMC)
   68% expected band : 2.6487 < r < 2.6487
   95% expected band : 2.6487 < r < 2.6487
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1724119090
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64946 +/- 0.00718957 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.64946 @ 95%CL (1 toyMC)
median expected limit: r < 2.64946 @ 95%CL (1 toyMC)
   68% expected band : 2.64946 < r < 2.64946
   95% expected band : 2.64946 < r < 2.64946
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 115273746
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64564 +/- 0.00678141 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.64564 @ 95%CL (1 toyMC)
median expected limit: r < 2.64564 @ 95%CL (1 toyMC)
   68% expected band : 2.64564 < r < 2.64564
   95% expected band : 2.64564 < r < 2.64564
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 182734359
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65387 +/- 0.00800099 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.65387 @ 95%CL (1 toyMC)
median expected limit: r < 3.65387 @ 95%CL (1 toyMC)
   68% expected band : 3.65387 < r < 3.65387
   95% expected band : 3.65387 < r < 3.65387
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 837122540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63721 +/- 0.00732222 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.63721 @ 95%CL (1 toyMC)
median expected limit: r < 2.63721 @ 95%CL (1 toyMC)
   68% expected band : 2.63721 < r < 2.63721
   95% expected band : 2.63721 < r < 2.63721
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1125543361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64858 +/- 0.00607297 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.64858 @ 95%CL (1 toyMC)
median expected limit: r < 2.64858 @ 95%CL (1 toyMC)
   68% expected band : 2.64858 < r < 2.64858
   95% expected band : 2.64858 < r < 2.64858
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -399819818
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63908 +/- 0.00729709 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63908 @ 95%CL (1 toyMC)
median expected limit: r < 2.63908 @ 95%CL (1 toyMC)
   68% expected band : 2.63908 < r < 2.63908
   95% expected band : 2.63908 < r < 2.63908
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2074202205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64504 +/- 0.006632 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.64504 @ 95%CL (1 toyMC)
median expected limit: r < 2.64504 @ 95%CL (1 toyMC)
   68% expected band : 2.64504 < r < 2.64504
   95% expected band : 2.64504 < r < 2.64504
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1010670822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.057 +/- 0.00664951 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.057 @ 95%CL (1 toyMC)
median expected limit: r < 3.057 @ 95%CL (1 toyMC)
   68% expected band : 3.057 < r < 3.057
   95% expected band : 3.057 < r < 3.057
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1490481553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6281 +/- 0.00520938 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.6281 @ 95%CL (1 toyMC)
median expected limit: r < 2.6281 @ 95%CL (1 toyMC)
   68% expected band : 2.6281 < r < 2.6281
   95% expected band : 2.6281 < r < 2.6281
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1949691265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63698 +/- 0.00630469 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.63698 @ 95%CL (1 toyMC)
median expected limit: r < 2.63698 @ 95%CL (1 toyMC)
   68% expected band : 2.63698 < r < 2.63698
   95% expected band : 2.63698 < r < 2.63698
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1692791155
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.02762 +/- 0.00698705 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.02762 @ 95%CL (1 toyMC)
median expected limit: r < 3.02762 @ 95%CL (1 toyMC)
   68% expected band : 3.02762 < r < 3.02762
   95% expected band : 3.02762 < r < 3.02762
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 455514666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.51994 +/- 0.00789517 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.51994 @ 95%CL (1 toyMC)
median expected limit: r < 4.51994 @ 95%CL (1 toyMC)
   68% expected band : 4.51994 < r < 4.51994
   95% expected band : 4.51994 < r < 4.51994
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1432748483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.53553 +/- 0.00720003 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.53553 @ 95%CL (1 toyMC)
median expected limit: r < 3.53553 @ 95%CL (1 toyMC)
   68% expected band : 3.53553 < r < 3.53553
   95% expected band : 3.53553 < r < 3.53553
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1526165345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63514 +/- 0.00790751 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.63514 @ 95%CL (1 toyMC)
median expected limit: r < 2.63514 @ 95%CL (1 toyMC)
   68% expected band : 2.63514 < r < 2.63514
   95% expected band : 2.63514 < r < 2.63514
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 854039821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98708 +/- 0.00659742 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.98708 @ 95%CL (1 toyMC)
median expected limit: r < 2.98708 @ 95%CL (1 toyMC)
   68% expected band : 2.98708 < r < 2.98708
   95% expected band : 2.98708 < r < 2.98708
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1470217121
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.56408 +/- 0.00747988 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.56408 @ 95%CL (1 toyMC)
median expected limit: r < 3.56408 @ 95%CL (1 toyMC)
   68% expected band : 3.56408 < r < 3.56408
   95% expected band : 3.56408 < r < 3.56408
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 714042634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.61626 +/- 0.00700729 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.61626 @ 95%CL (1 toyMC)
median expected limit: r < 2.61626 @ 95%CL (1 toyMC)
   68% expected band : 2.61626 < r < 2.61626
   95% expected band : 2.61626 < r < 2.61626
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -17101229
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.129 +/- 0.00750397 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.129 @ 95%CL (1 toyMC)
median expected limit: r < 3.129 @ 95%CL (1 toyMC)
   68% expected band : 3.129 < r < 3.129
   95% expected band : 3.129 < r < 3.129
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1486786149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27119 +/- 0.00552289 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.27119 @ 95%CL (1 toyMC)
median expected limit: r < 3.27119 @ 95%CL (1 toyMC)
   68% expected band : 3.27119 < r < 3.27119
   95% expected band : 3.27119 < r < 3.27119
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1079621386.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1125543361.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1149989958.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1173674008.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1176234659.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1193739708.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1290364897.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1337489748.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1341922786.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1461737770.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1466054355.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1490481553.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1526165345.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1589319913.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1606848350.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1636465697.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1637152769.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1677164465.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1692791155.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-17101229.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1724119090.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1838333931.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1853287025.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1943961484.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-2006194468.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-2016790058.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-222375305.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-238924171.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-244646472.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-258797269.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-26475827.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-285094182.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-373190696.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-399819818.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-419068991.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-422828334.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-423796711.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-483333729.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-508668622.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-5581321.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-600895521.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-63630312.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-701442815.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-719727914.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-740070126.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-76429809.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-808931538.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-814929588.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-818849764.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-910299298.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.-911589008.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1010670822.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1068678211.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.115273746.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1155541821.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1163155086.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1218986846.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1224058316.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1297906383.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.135302462.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1368173768.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1432748483.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1470217121.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1486786149.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1571847714.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1574360755.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1658400762.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1709169995.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1802989733.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.182734359.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1949691265.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.2074202205.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.2101046983.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.211915230.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.214414504.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.226020901.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.228942379.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.28643769.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.291906426.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.295517358.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.335102885.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.455514666.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.457363007.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.458589611.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.477783497.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.479792473.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.531140725.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.534289785.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.609052483.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.651103662.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.701121953.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.714042634.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.801554067.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.803769785.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.808431210.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.810762070.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.837122540.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.854039821.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.991523952.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.997473969.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 503973482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78129 +/- 0.00755479 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.78129 @ 95%CL (1 toyMC)
median expected limit: r < 2.78129 @ 95%CL (1 toyMC)
   68% expected band : 2.78129 < r < 2.78129
   95% expected band : 2.78129 < r < 2.78129
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1020755626
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.75299 +/- 0.00694253 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.75299 @ 95%CL (1 toyMC)
median expected limit: r < 2.75299 @ 95%CL (1 toyMC)
   68% expected band : 2.75299 < r < 2.75299
   95% expected band : 2.75299 < r < 2.75299
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1222984324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78621 +/- 0.00548115 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.78621 @ 95%CL (1 toyMC)
median expected limit: r < 2.78621 @ 95%CL (1 toyMC)
   68% expected band : 2.78621 < r < 2.78621
   95% expected band : 2.78621 < r < 2.78621
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1372266719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79081 +/- 0.00709272 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.79081 @ 95%CL (1 toyMC)
median expected limit: r < 2.79081 @ 95%CL (1 toyMC)
   68% expected band : 2.79081 < r < 2.79081
   95% expected band : 2.79081 < r < 2.79081
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1502107288
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.32899 +/- 0.00682806 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.32899 @ 95%CL (1 toyMC)
median expected limit: r < 3.32899 @ 95%CL (1 toyMC)
   68% expected band : 3.32899 < r < 3.32899
   95% expected band : 3.32899 < r < 3.32899
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1044567707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77304 +/- 0.00578074 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.77304 @ 95%CL (1 toyMC)
median expected limit: r < 2.77304 @ 95%CL (1 toyMC)
   68% expected band : 2.77304 < r < 2.77304
   95% expected band : 2.77304 < r < 2.77304
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1638108273
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91921 +/- 0.00713337 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.91921 @ 95%CL (1 toyMC)
median expected limit: r < 3.91921 @ 95%CL (1 toyMC)
   68% expected band : 3.91921 < r < 3.91921
   95% expected band : 3.91921 < r < 3.91921
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 452782734
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78622 +/- 0.00660406 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.78622 @ 95%CL (1 toyMC)
median expected limit: r < 2.78622 @ 95%CL (1 toyMC)
   68% expected band : 2.78622 < r < 2.78622
   95% expected band : 2.78622 < r < 2.78622
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -965118680
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79023 +/- 0.00549039 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.79023 @ 95%CL (1 toyMC)
median expected limit: r < 2.79023 @ 95%CL (1 toyMC)
   68% expected band : 2.79023 < r < 2.79023
   95% expected band : 2.79023 < r < 2.79023
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1786649669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25343 +/- 0.00608095 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.25343 @ 95%CL (1 toyMC)
median expected limit: r < 3.25343 @ 95%CL (1 toyMC)
   68% expected band : 3.25343 < r < 3.25343
   95% expected band : 3.25343 < r < 3.25343
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2085341515
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.01212 +/- 0.00711978 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.01212 @ 95%CL (1 toyMC)
median expected limit: r < 4.01212 @ 95%CL (1 toyMC)
   68% expected band : 4.01212 < r < 4.01212
   95% expected band : 4.01212 < r < 4.01212
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1476801606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.65294 +/- 0.00734096 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.65294 @ 95%CL (1 toyMC)
median expected limit: r < 4.65294 @ 95%CL (1 toyMC)
   68% expected band : 4.65294 < r < 4.65294
   95% expected band : 4.65294 < r < 4.65294
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1331620723
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78618 +/- 0.00696656 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.78618 @ 95%CL (1 toyMC)
median expected limit: r < 2.78618 @ 95%CL (1 toyMC)
   68% expected band : 2.78618 < r < 2.78618
   95% expected band : 2.78618 < r < 2.78618
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -10732466
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7804 +/- 0.00413663 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.7804 @ 95%CL (1 toyMC)
median expected limit: r < 2.7804 @ 95%CL (1 toyMC)
   68% expected band : 2.7804 < r < 2.7804
   95% expected band : 2.7804 < r < 2.7804
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1093383361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78578 +/- 0.00730479 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.78578 @ 95%CL (1 toyMC)
median expected limit: r < 2.78578 @ 95%CL (1 toyMC)
   68% expected band : 2.78578 < r < 2.78578
   95% expected band : 2.78578 < r < 2.78578
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 356216687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77425 +/- 0.0063053 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.77425 @ 95%CL (1 toyMC)
median expected limit: r < 2.77425 @ 95%CL (1 toyMC)
   68% expected band : 2.77425 < r < 2.77425
   95% expected band : 2.77425 < r < 2.77425
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1445882185
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78654 +/- 0.00709996 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.78654 @ 95%CL (1 toyMC)
median expected limit: r < 2.78654 @ 95%CL (1 toyMC)
   68% expected band : 2.78654 < r < 2.78654
   95% expected band : 2.78654 < r < 2.78654
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 573460104
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77553 +/- 0.00556567 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.77553 @ 95%CL (1 toyMC)
median expected limit: r < 2.77553 @ 95%CL (1 toyMC)
   68% expected band : 2.77553 < r < 2.77553
   95% expected band : 2.77553 < r < 2.77553
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 281947212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.32198 +/- 0.00711609 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.32198 @ 95%CL (1 toyMC)
median expected limit: r < 3.32198 @ 95%CL (1 toyMC)
   68% expected band : 3.32198 < r < 3.32198
   95% expected band : 3.32198 < r < 3.32198
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 245941033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.34776 +/- 0.00762318 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.34776 @ 95%CL (1 toyMC)
median expected limit: r < 4.34776 @ 95%CL (1 toyMC)
   68% expected band : 4.34776 < r < 4.34776
   95% expected band : 4.34776 < r < 4.34776
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1893294194
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.75817 +/- 0.0057446 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.75817 @ 95%CL (1 toyMC)
median expected limit: r < 2.75817 @ 95%CL (1 toyMC)
   68% expected band : 2.75817 < r < 2.75817
   95% expected band : 2.75817 < r < 2.75817
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1326230929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78955 +/- 0.00734929 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.78955 @ 95%CL (1 toyMC)
median expected limit: r < 2.78955 @ 95%CL (1 toyMC)
   68% expected band : 2.78955 < r < 2.78955
   95% expected band : 2.78955 < r < 2.78955
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1092354326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.52513 +/- 0.00837348 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.52513 @ 95%CL (1 toyMC)
median expected limit: r < 4.52513 @ 95%CL (1 toyMC)
   68% expected band : 4.52513 < r < 4.52513
   95% expected band : 4.52513 < r < 4.52513
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2069835574
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79436 +/- 0.00551794 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.79436 @ 95%CL (1 toyMC)
median expected limit: r < 2.79436 @ 95%CL (1 toyMC)
   68% expected band : 2.79436 < r < 2.79436
   95% expected band : 2.79436 < r < 2.79436
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 727221038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.48194 +/- 0.00705993 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.48194 @ 95%CL (1 toyMC)
median expected limit: r < 3.48194 @ 95%CL (1 toyMC)
   68% expected band : 3.48194 < r < 3.48194
   95% expected band : 3.48194 < r < 3.48194
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 245800348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.26805 +/- 0.00802328 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.26805 @ 95%CL (1 toyMC)
median expected limit: r < 5.26805 @ 95%CL (1 toyMC)
   68% expected band : 5.26805 < r < 5.26805
   95% expected band : 5.26805 < r < 5.26805
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1039858968
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.63355 +/- 0.00919365 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.63355 @ 95%CL (1 toyMC)
median expected limit: r < 4.63355 @ 95%CL (1 toyMC)
   68% expected band : 4.63355 < r < 4.63355
   95% expected band : 4.63355 < r < 4.63355
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1278137608
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.96605 +/- 0.00744547 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.96605 @ 95%CL (1 toyMC)
median expected limit: r < 3.96605 @ 95%CL (1 toyMC)
   68% expected band : 3.96605 < r < 3.96605
   95% expected band : 3.96605 < r < 3.96605
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1493714336
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17472 +/- 0.0078396 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.17472 @ 95%CL (1 toyMC)
median expected limit: r < 4.17472 @ 95%CL (1 toyMC)
   68% expected band : 4.17472 < r < 4.17472
   95% expected band : 4.17472 < r < 4.17472
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -674544653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.7222 +/- 0.00853364 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.7222 @ 95%CL (1 toyMC)
median expected limit: r < 5.7222 @ 95%CL (1 toyMC)
   68% expected band : 5.7222 < r < 5.7222
   95% expected band : 5.7222 < r < 5.7222
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 277190315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77568 +/- 0.00698783 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.77568 @ 95%CL (1 toyMC)
median expected limit: r < 2.77568 @ 95%CL (1 toyMC)
   68% expected band : 2.77568 < r < 2.77568
   95% expected band : 2.77568 < r < 2.77568
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2087028542
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.30046 +/- 0.00679556 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.30046 @ 95%CL (1 toyMC)
median expected limit: r < 3.30046 @ 95%CL (1 toyMC)
   68% expected band : 3.30046 < r < 3.30046
   95% expected band : 3.30046 < r < 3.30046
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -582187927
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.67405 +/- 0.00860763 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.67405 @ 95%CL (1 toyMC)
median expected limit: r < 3.67405 @ 95%CL (1 toyMC)
   68% expected band : 3.67405 < r < 3.67405
   95% expected band : 3.67405 < r < 3.67405
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 876567724
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.09576 +/- 0.00733653 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.09576 @ 95%CL (1 toyMC)
median expected limit: r < 4.09576 @ 95%CL (1 toyMC)
   68% expected band : 4.09576 < r < 4.09576
   95% expected band : 4.09576 < r < 4.09576
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2104206707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77532 +/- 0.00589674 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.77532 @ 95%CL (1 toyMC)
median expected limit: r < 2.77532 @ 95%CL (1 toyMC)
   68% expected band : 2.77532 < r < 2.77532
   95% expected band : 2.77532 < r < 2.77532
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2118896988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33791 +/- 0.00759616 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.33791 @ 95%CL (1 toyMC)
median expected limit: r < 3.33791 @ 95%CL (1 toyMC)
   68% expected band : 3.33791 < r < 3.33791
   95% expected band : 3.33791 < r < 3.33791
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 211838515
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.23819 +/- 0.00760941 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.23819 @ 95%CL (1 toyMC)
median expected limit: r < 4.23819 @ 95%CL (1 toyMC)
   68% expected band : 4.23819 < r < 4.23819
   95% expected band : 4.23819 < r < 4.23819
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -354502427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.20794 +/- 0.00721568 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.20794 @ 95%CL (1 toyMC)
median expected limit: r < 4.20794 @ 95%CL (1 toyMC)
   68% expected band : 4.20794 < r < 4.20794
   95% expected band : 4.20794 < r < 4.20794
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1913535932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77784 +/- 0.00604564 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.77784 @ 95%CL (1 toyMC)
median expected limit: r < 2.77784 @ 95%CL (1 toyMC)
   68% expected band : 2.77784 < r < 2.77784
   95% expected band : 2.77784 < r < 2.77784
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1008837698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.30229 +/- 0.00675013 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.30229 @ 95%CL (1 toyMC)
median expected limit: r < 3.30229 @ 95%CL (1 toyMC)
   68% expected band : 3.30229 < r < 3.30229
   95% expected band : 3.30229 < r < 3.30229
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 446504027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.33688 +/- 0.00755626 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.33688 @ 95%CL (1 toyMC)
median expected limit: r < 4.33688 @ 95%CL (1 toyMC)
   68% expected band : 4.33688 < r < 4.33688
   95% expected band : 4.33688 < r < 4.33688
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2031874488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78871 +/- 0.00748092 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.78871 @ 95%CL (1 toyMC)
median expected limit: r < 2.78871 @ 95%CL (1 toyMC)
   68% expected band : 2.78871 < r < 2.78871
   95% expected band : 2.78871 < r < 2.78871
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1201541251
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78491 +/- 0.0064906 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.78491 @ 95%CL (1 toyMC)
median expected limit: r < 2.78491 @ 95%CL (1 toyMC)
   68% expected band : 2.78491 < r < 2.78491
   95% expected band : 2.78491 < r < 2.78491
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -350934091
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44343 +/- 0.00713839 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.44343 @ 95%CL (1 toyMC)
median expected limit: r < 3.44343 @ 95%CL (1 toyMC)
   68% expected band : 3.44343 < r < 3.44343
   95% expected band : 3.44343 < r < 3.44343
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1670915295
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76506 +/- 0.00711871 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.76506 @ 95%CL (1 toyMC)
median expected limit: r < 2.76506 @ 95%CL (1 toyMC)
   68% expected band : 2.76506 < r < 2.76506
   95% expected band : 2.76506 < r < 2.76506
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -13211255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77383 +/- 0.0064072 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.77383 @ 95%CL (1 toyMC)
median expected limit: r < 2.77383 @ 95%CL (1 toyMC)
   68% expected band : 2.77383 < r < 2.77383
   95% expected band : 2.77383 < r < 2.77383
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1338773877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79004 +/- 0.00708476 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.79004 @ 95%CL (1 toyMC)
median expected limit: r < 2.79004 @ 95%CL (1 toyMC)
   68% expected band : 2.79004 < r < 2.79004
   95% expected band : 2.79004 < r < 2.79004
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -149453255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.50145 +/- 0.00688051 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.50145 @ 95%CL (1 toyMC)
median expected limit: r < 3.50145 @ 95%CL (1 toyMC)
   68% expected band : 3.50145 < r < 3.50145
   95% expected band : 3.50145 < r < 3.50145
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1205212989
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.61036 +/- 0.00764829 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.61036 @ 95%CL (1 toyMC)
median expected limit: r < 3.61036 @ 95%CL (1 toyMC)
   68% expected band : 3.61036 < r < 3.61036
   95% expected band : 3.61036 < r < 3.61036
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1630796105
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.76855 +/- 0.00603194 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.76855 @ 95%CL (1 toyMC)
median expected limit: r < 3.76855 @ 95%CL (1 toyMC)
   68% expected band : 3.76855 < r < 3.76855
   95% expected band : 3.76855 < r < 3.76855
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1143621784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.24873 +/- 0.00717993 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.24873 @ 95%CL (1 toyMC)
median expected limit: r < 4.24873 @ 95%CL (1 toyMC)
   68% expected band : 4.24873 < r < 4.24873
   95% expected band : 4.24873 < r < 4.24873
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2023147585
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77899 +/- 0.00606247 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.77899 @ 95%CL (1 toyMC)
median expected limit: r < 2.77899 @ 95%CL (1 toyMC)
   68% expected band : 2.77899 < r < 2.77899
   95% expected band : 2.77899 < r < 2.77899
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 505835792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77341 +/- 0.00767328 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.77341 @ 95%CL (1 toyMC)
median expected limit: r < 2.77341 @ 95%CL (1 toyMC)
   68% expected band : 2.77341 < r < 2.77341
   95% expected band : 2.77341 < r < 2.77341
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 243705746
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79425 +/- 0.0068638 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.79425 @ 95%CL (1 toyMC)
median expected limit: r < 2.79425 @ 95%CL (1 toyMC)
   68% expected band : 2.79425 < r < 2.79425
   95% expected band : 2.79425 < r < 2.79425
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 556194880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.83618 +/- 0.0071536 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.83618 @ 95%CL (1 toyMC)
median expected limit: r < 3.83618 @ 95%CL (1 toyMC)
   68% expected band : 3.83618 < r < 3.83618
   95% expected band : 3.83618 < r < 3.83618
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 644685242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.99122 +/- 0.00911579 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.99122 @ 95%CL (1 toyMC)
median expected limit: r < 4.99122 @ 95%CL (1 toyMC)
   68% expected band : 4.99122 < r < 4.99122
   95% expected band : 4.99122 < r < 4.99122
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1892096098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77595 +/- 0.00592591 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.77595 @ 95%CL (1 toyMC)
median expected limit: r < 2.77595 @ 95%CL (1 toyMC)
   68% expected band : 2.77595 < r < 2.77595
   95% expected band : 2.77595 < r < 2.77595
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1914526211
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.09767 +/- 0.00721908 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.09767 @ 95%CL (1 toyMC)
median expected limit: r < 4.09767 @ 95%CL (1 toyMC)
   68% expected band : 4.09767 < r < 4.09767
   95% expected band : 4.09767 < r < 4.09767
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1282514947
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.02216 +/- 0.00748755 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.02216 @ 95%CL (1 toyMC)
median expected limit: r < 4.02216 @ 95%CL (1 toyMC)
   68% expected band : 4.02216 < r < 4.02216
   95% expected band : 4.02216 < r < 4.02216
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1255496766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.96396 +/- 0.00825762 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.96396 @ 95%CL (1 toyMC)
median expected limit: r < 6.96396 @ 95%CL (1 toyMC)
   68% expected band : 6.96396 < r < 6.96396
   95% expected band : 6.96396 < r < 6.96396
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1588505721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89442 +/- 0.00659009 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.89442 @ 95%CL (1 toyMC)
median expected limit: r < 3.89442 @ 95%CL (1 toyMC)
   68% expected band : 3.89442 < r < 3.89442
   95% expected band : 3.89442 < r < 3.89442
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1937453414
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.41211 +/- 0.00873889 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.41211 @ 95%CL (1 toyMC)
median expected limit: r < 5.41211 @ 95%CL (1 toyMC)
   68% expected band : 5.41211 < r < 5.41211
   95% expected band : 5.41211 < r < 5.41211
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1774734730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.37624 +/- 0.0070149 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.37624 @ 95%CL (1 toyMC)
median expected limit: r < 4.37624 @ 95%CL (1 toyMC)
   68% expected band : 4.37624 < r < 4.37624
   95% expected band : 4.37624 < r < 4.37624
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -519641653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.8973 +/- 0.0073698 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.8973 @ 95%CL (1 toyMC)
median expected limit: r < 3.8973 @ 95%CL (1 toyMC)
   68% expected band : 3.8973 < r < 3.8973
   95% expected band : 3.8973 < r < 3.8973
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -290556427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25983 +/- 0.00783469 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.25983 @ 95%CL (1 toyMC)
median expected limit: r < 3.25983 @ 95%CL (1 toyMC)
   68% expected band : 3.25983 < r < 3.25983
   95% expected band : 3.25983 < r < 3.25983
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 258373565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.7066 +/- 0.00744286 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.7066 @ 95%CL (1 toyMC)
median expected limit: r < 3.7066 @ 95%CL (1 toyMC)
   68% expected band : 3.7066 < r < 3.7066
   95% expected band : 3.7066 < r < 3.7066
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1825725625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77618 +/- 0.00806576 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.77618 @ 95%CL (1 toyMC)
median expected limit: r < 2.77618 @ 95%CL (1 toyMC)
   68% expected band : 2.77618 < r < 2.77618
   95% expected band : 2.77618 < r < 2.77618
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1420265934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78133 +/- 0.00740372 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.78133 @ 95%CL (1 toyMC)
median expected limit: r < 2.78133 @ 95%CL (1 toyMC)
   68% expected band : 2.78133 < r < 2.78133
   95% expected band : 2.78133 < r < 2.78133
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1562390866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.45403 +/- 0.00762771 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.45403 @ 95%CL (1 toyMC)
median expected limit: r < 4.45403 @ 95%CL (1 toyMC)
   68% expected band : 4.45403 < r < 4.45403
   95% expected band : 4.45403 < r < 4.45403
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1098183024
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79943 +/- 0.00749206 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.79943 @ 95%CL (1 toyMC)
median expected limit: r < 2.79943 @ 95%CL (1 toyMC)
   68% expected band : 2.79943 < r < 2.79943
   95% expected band : 2.79943 < r < 2.79943
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 16747457
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77664 +/- 0.00615384 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.77664 @ 95%CL (1 toyMC)
median expected limit: r < 2.77664 @ 95%CL (1 toyMC)
   68% expected band : 2.77664 < r < 2.77664
   95% expected band : 2.77664 < r < 2.77664
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1447948584
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.1002 +/- 0.00872234 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.1002 @ 95%CL (1 toyMC)
median expected limit: r < 4.1002 @ 95%CL (1 toyMC)
   68% expected band : 4.1002 < r < 4.1002
   95% expected band : 4.1002 < r < 4.1002
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1522285294
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78496 +/- 0.00743592 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.78496 @ 95%CL (1 toyMC)
median expected limit: r < 2.78496 @ 95%CL (1 toyMC)
   68% expected band : 2.78496 < r < 2.78496
   95% expected band : 2.78496 < r < 2.78496
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -643782909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.77959 +/- 0.00684557 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.77959 @ 95%CL (1 toyMC)
median expected limit: r < 4.77959 @ 95%CL (1 toyMC)
   68% expected band : 4.77959 < r < 4.77959
   95% expected band : 4.77959 < r < 4.77959
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1545484040
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25316 +/- 0.00644129 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.25316 @ 95%CL (1 toyMC)
median expected limit: r < 3.25316 @ 95%CL (1 toyMC)
   68% expected band : 3.25316 < r < 3.25316
   95% expected band : 3.25316 < r < 3.25316
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 52836885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78527 +/- 0.00714063 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.78527 @ 95%CL (1 toyMC)
median expected limit: r < 2.78527 @ 95%CL (1 toyMC)
   68% expected band : 2.78527 < r < 2.78527
   95% expected band : 2.78527 < r < 2.78527
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -406900196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25282 +/- 0.00964913 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.25282 @ 95%CL (1 toyMC)
median expected limit: r < 3.25282 @ 95%CL (1 toyMC)
   68% expected band : 3.25282 < r < 3.25282
   95% expected band : 3.25282 < r < 3.25282
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 329566084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.75985 +/- 0.00747488 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.75985 @ 95%CL (1 toyMC)
median expected limit: r < 2.75985 @ 95%CL (1 toyMC)
   68% expected band : 2.75985 < r < 2.75985
   95% expected band : 2.75985 < r < 2.75985
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -65505590
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.03647 +/- 0.00925407 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.03647 @ 95%CL (1 toyMC)
median expected limit: r < 4.03647 @ 95%CL (1 toyMC)
   68% expected band : 4.03647 < r < 4.03647
   95% expected band : 4.03647 < r < 4.03647
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1144652973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78067 +/- 0.00621334 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.78067 @ 95%CL (1 toyMC)
median expected limit: r < 2.78067 @ 95%CL (1 toyMC)
   68% expected band : 2.78067 < r < 2.78067
   95% expected band : 2.78067 < r < 2.78067
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 639685044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.36482 +/- 0.00775111 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.36482 @ 95%CL (1 toyMC)
median expected limit: r < 5.36482 @ 95%CL (1 toyMC)
   68% expected band : 5.36482 < r < 5.36482
   95% expected band : 5.36482 < r < 5.36482
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1814438474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79622 +/- 0.00590092 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.79622 @ 95%CL (1 toyMC)
median expected limit: r < 2.79622 @ 95%CL (1 toyMC)
   68% expected band : 2.79622 < r < 2.79622
   95% expected band : 2.79622 < r < 2.79622
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 694795120
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.87562 +/- 0.00942352 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.87562 @ 95%CL (1 toyMC)
median expected limit: r < 4.87562 @ 95%CL (1 toyMC)
   68% expected band : 4.87562 < r < 4.87562
   95% expected band : 4.87562 < r < 4.87562
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -249805984
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76916 +/- 0.00565338 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.76916 @ 95%CL (1 toyMC)
median expected limit: r < 2.76916 @ 95%CL (1 toyMC)
   68% expected band : 2.76916 < r < 2.76916
   95% expected band : 2.76916 < r < 2.76916
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1448793714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77458 +/- 0.00646263 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.77458 @ 95%CL (1 toyMC)
median expected limit: r < 2.77458 @ 95%CL (1 toyMC)
   68% expected band : 2.77458 < r < 2.77458
   95% expected band : 2.77458 < r < 2.77458
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 307926287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.26153 +/- 0.00670523 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.26153 @ 95%CL (1 toyMC)
median expected limit: r < 4.26153 @ 95%CL (1 toyMC)
   68% expected band : 4.26153 < r < 4.26153
   95% expected band : 4.26153 < r < 4.26153
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -632421412
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.70043 +/- 0.00671253 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.70043 @ 95%CL (1 toyMC)
median expected limit: r < 3.70043 @ 95%CL (1 toyMC)
   68% expected band : 3.70043 < r < 3.70043
   95% expected band : 3.70043 < r < 3.70043
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -26091053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.16547 +/- 0.00665689 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.16547 @ 95%CL (1 toyMC)
median expected limit: r < 5.16547 @ 95%CL (1 toyMC)
   68% expected band : 5.16547 < r < 5.16547
   95% expected band : 5.16547 < r < 5.16547
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1514180492
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.05454 +/- 0.00620675 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.05454 @ 95%CL (1 toyMC)
median expected limit: r < 4.05454 @ 95%CL (1 toyMC)
   68% expected band : 4.05454 < r < 4.05454
   95% expected band : 4.05454 < r < 4.05454
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -106432761
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.86553 +/- 0.00648104 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.86553 @ 95%CL (1 toyMC)
median expected limit: r < 3.86553 @ 95%CL (1 toyMC)
   68% expected band : 3.86553 < r < 3.86553
   95% expected band : 3.86553 < r < 3.86553
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1757673323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.13798 +/- 0.00847242 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.13798 @ 95%CL (1 toyMC)
median expected limit: r < 5.13798 @ 95%CL (1 toyMC)
   68% expected band : 5.13798 < r < 5.13798
   95% expected band : 5.13798 < r < 5.13798
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 273913493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.783 +/- 0.00700962 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.783 @ 95%CL (1 toyMC)
median expected limit: r < 2.783 @ 95%CL (1 toyMC)
   68% expected band : 2.783 < r < 2.783
   95% expected band : 2.783 < r < 2.783
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -504885397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.29833 +/- 0.0072654 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.29833 @ 95%CL (1 toyMC)
median expected limit: r < 3.29833 @ 95%CL (1 toyMC)
   68% expected band : 3.29833 < r < 3.29833
   95% expected band : 3.29833 < r < 3.29833
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2144196352
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.30091 +/- 0.00782066 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.30091 @ 95%CL (1 toyMC)
median expected limit: r < 3.30091 @ 95%CL (1 toyMC)
   68% expected band : 3.30091 < r < 3.30091
   95% expected band : 3.30091 < r < 3.30091
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1716556990
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78681 +/- 0.00703292 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.78681 @ 95%CL (1 toyMC)
median expected limit: r < 2.78681 @ 95%CL (1 toyMC)
   68% expected band : 2.78681 < r < 2.78681
   95% expected band : 2.78681 < r < 2.78681
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 766069754
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.25523 +/- 0.00623581 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.25523 @ 95%CL (1 toyMC)
median expected limit: r < 5.25523 @ 95%CL (1 toyMC)
   68% expected band : 5.25523 < r < 5.25523
   95% expected band : 5.25523 < r < 5.25523
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 269486963
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33379 +/- 0.00638426 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.33379 @ 95%CL (1 toyMC)
median expected limit: r < 3.33379 @ 95%CL (1 toyMC)
   68% expected band : 3.33379 < r < 3.33379
   95% expected band : 3.33379 < r < 3.33379
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1341684780
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92001 +/- 0.00610454 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.92001 @ 95%CL (1 toyMC)
median expected limit: r < 3.92001 @ 95%CL (1 toyMC)
   68% expected band : 3.92001 < r < 3.92001
   95% expected band : 3.92001 < r < 3.92001
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -526956878
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6147 +/- 0.00738341 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.6147 @ 95%CL (1 toyMC)
median expected limit: r < 3.6147 @ 95%CL (1 toyMC)
   68% expected band : 3.6147 < r < 3.6147
   95% expected band : 3.6147 < r < 3.6147
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -455974105
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.68321 +/- 0.00774191 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.68321 @ 95%CL (1 toyMC)
median expected limit: r < 4.68321 @ 95%CL (1 toyMC)
   68% expected band : 4.68321 < r < 4.68321
   95% expected band : 4.68321 < r < 4.68321
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1008837698.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1044567707.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-106432761.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-10732466.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1092354326.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1098183024.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1143621784.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1201541251.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1205212989.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1255496766.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1278137608.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-13211255.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1326230929.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1372266719.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1420265934.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1445882185.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-149453255.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1502107288.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1522285294.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1774734730.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1786649669.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1825725625.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1892096098.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1937453414.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-2023147585.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-2031874488.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-2069835574.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-2085341515.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-2087028542.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-2104206707.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-2118896988.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-249805984.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-26091053.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-290556427.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-350934091.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-354502427.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-406900196.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-455974105.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-504885397.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-519641653.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-526956878.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-582187927.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-632421412.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-643782909.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-65505590.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-674544653.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-965118680.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.1020755626.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.1039858968.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.1093383361.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.1144652973.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1222984324.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1282514947.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1331620723.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1338773877.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1341684780.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1447948584.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1448793714.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1476801606.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1493714336.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1514180492.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1545484040.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1562390866.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1588505721.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1630796105.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1638108273.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1670915295.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.16747457.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1716556990.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1757673323.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1814438474.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1893294194.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1913535932.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1914526211.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.211838515.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.2144196352.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.243705746.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.245800348.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.245941033.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.258373565.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.269486963.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.273913493.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.277190315.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.281947212.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.307926287.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.329566084.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.356216687.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.446504027.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.452782734.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.503973482.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.505835792.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.52836885.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.556194880.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.573460104.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.639685044.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.644685242.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.694795120.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.727221038.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.766069754.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.876567724.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2069661496
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.9152 +/- 0.0068962 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.9152 @ 95%CL (1 toyMC)
median expected limit: r < 2.9152 @ 95%CL (1 toyMC)
   68% expected band : 2.9152 < r < 2.9152
   95% expected band : 2.9152 < r < 2.9152
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1527666551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90871 +/- 0.00612786 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.90871 @ 95%CL (1 toyMC)
median expected limit: r < 2.90871 @ 95%CL (1 toyMC)
   68% expected band : 2.90871 < r < 2.90871
   95% expected band : 2.90871 < r < 2.90871
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1292607539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.9201 +/- 0.00543917 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.9201 @ 95%CL (1 toyMC)
median expected limit: r < 2.9201 @ 95%CL (1 toyMC)
   68% expected band : 2.9201 < r < 2.9201
   95% expected band : 2.9201 < r < 2.9201
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2134843095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93401 +/- 0.00825555 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.93401 @ 95%CL (1 toyMC)
median expected limit: r < 2.93401 @ 95%CL (1 toyMC)
   68% expected band : 2.93401 < r < 2.93401
   95% expected band : 2.93401 < r < 2.93401
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -370668950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91632 +/- 0.00619067 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.91632 @ 95%CL (1 toyMC)
median expected limit: r < 2.91632 @ 95%CL (1 toyMC)
   68% expected band : 2.91632 < r < 2.91632
   95% expected band : 2.91632 < r < 2.91632
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2108510676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93646 +/- 0.00708766 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.93646 @ 95%CL (1 toyMC)
median expected limit: r < 2.93646 @ 95%CL (1 toyMC)
   68% expected band : 2.93646 < r < 2.93646
   95% expected band : 2.93646 < r < 2.93646
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1147606156
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92768 +/- 0.00737032 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.92768 @ 95%CL (1 toyMC)
median expected limit: r < 2.92768 @ 95%CL (1 toyMC)
   68% expected band : 2.92768 < r < 2.92768
   95% expected band : 2.92768 < r < 2.92768
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 937540130
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91448 +/- 0.0052782 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.91448 @ 95%CL (1 toyMC)
median expected limit: r < 2.91448 @ 95%CL (1 toyMC)
   68% expected band : 2.91448 < r < 2.91448
   95% expected band : 2.91448 < r < 2.91448
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 618593453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.22778 +/- 0.00734117 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.22778 @ 95%CL (1 toyMC)
median expected limit: r < 5.22778 @ 95%CL (1 toyMC)
   68% expected band : 5.22778 < r < 5.22778
   95% expected band : 5.22778 < r < 5.22778
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1823534720
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.52229 +/- 0.00792874 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.52229 @ 95%CL (1 toyMC)
median expected limit: r < 3.52229 @ 95%CL (1 toyMC)
   68% expected band : 3.52229 < r < 3.52229
   95% expected band : 3.52229 < r < 3.52229
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2041610072
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.81303 +/- 0.0074703 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.81303 @ 95%CL (1 toyMC)
median expected limit: r < 4.81303 @ 95%CL (1 toyMC)
   68% expected band : 4.81303 < r < 4.81303
   95% expected band : 4.81303 < r < 4.81303
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 223051116
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92241 +/- 0.00551963 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.92241 @ 95%CL (1 toyMC)
median expected limit: r < 2.92241 @ 95%CL (1 toyMC)
   68% expected band : 2.92241 < r < 2.92241
   95% expected band : 2.92241 < r < 2.92241
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1231025809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.021 +/- 0.00826601 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.021 @ 95%CL (1 toyMC)
median expected limit: r < 5.021 @ 95%CL (1 toyMC)
   68% expected band : 5.021 < r < 5.021
   95% expected band : 5.021 < r < 5.021
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2007340420
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90293 +/- 0.00831138 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.90293 @ 95%CL (1 toyMC)
median expected limit: r < 2.90293 @ 95%CL (1 toyMC)
   68% expected band : 2.90293 < r < 2.90293
   95% expected band : 2.90293 < r < 2.90293
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 598509756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.29791 +/- 0.00940426 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.29791 @ 95%CL (1 toyMC)
median expected limit: r < 5.29791 @ 95%CL (1 toyMC)
   68% expected band : 5.29791 < r < 5.29791
   95% expected band : 5.29791 < r < 5.29791
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -118466931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92894 +/- 0.00625323 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.92894 @ 95%CL (1 toyMC)
median expected limit: r < 2.92894 @ 95%CL (1 toyMC)
   68% expected band : 2.92894 < r < 2.92894
   95% expected band : 2.92894 < r < 2.92894
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -135762399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92645 +/- 0.00636575 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.92645 @ 95%CL (1 toyMC)
median expected limit: r < 2.92645 @ 95%CL (1 toyMC)
   68% expected band : 2.92645 < r < 2.92645
   95% expected band : 2.92645 < r < 2.92645
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 456614422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91676 +/- 0.00694251 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.91676 @ 95%CL (1 toyMC)
median expected limit: r < 3.91676 @ 95%CL (1 toyMC)
   68% expected band : 3.91676 < r < 3.91676
   95% expected band : 3.91676 < r < 3.91676
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 550035252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91588 +/- 0.00764653 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.91588 @ 95%CL (1 toyMC)
median expected limit: r < 3.91588 @ 95%CL (1 toyMC)
   68% expected band : 3.91588 < r < 3.91588
   95% expected band : 3.91588 < r < 3.91588
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1278172606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.61598 +/- 0.00527343 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.61598 @ 95%CL (1 toyMC)
median expected limit: r < 4.61598 @ 95%CL (1 toyMC)
   68% expected band : 4.61598 < r < 4.61598
   95% expected band : 4.61598 < r < 4.61598
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -104768107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63465 +/- 0.00795317 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.63465 @ 95%CL (1 toyMC)
median expected limit: r < 3.63465 @ 95%CL (1 toyMC)
   68% expected band : 3.63465 < r < 3.63465
   95% expected band : 3.63465 < r < 3.63465
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1587167005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93649 +/- 0.00858418 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.93649 @ 95%CL (1 toyMC)
median expected limit: r < 2.93649 @ 95%CL (1 toyMC)
   68% expected band : 2.93649 < r < 2.93649
   95% expected band : 2.93649 < r < 2.93649
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -996012342
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93548 +/- 0.00713678 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.93548 @ 95%CL (1 toyMC)
median expected limit: r < 2.93548 @ 95%CL (1 toyMC)
   68% expected band : 2.93548 < r < 2.93548
   95% expected band : 2.93548 < r < 2.93548
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 43931302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.54702 +/- 0.00738397 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.54702 @ 95%CL (1 toyMC)
median expected limit: r < 3.54702 @ 95%CL (1 toyMC)
   68% expected band : 3.54702 < r < 3.54702
   95% expected band : 3.54702 < r < 3.54702
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1385470050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93663 +/- 0.00718921 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.93663 @ 95%CL (1 toyMC)
median expected limit: r < 2.93663 @ 95%CL (1 toyMC)
   68% expected band : 2.93663 < r < 2.93663
   95% expected band : 2.93663 < r < 2.93663
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 124025561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.49365 +/- 0.00729582 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.49365 @ 95%CL (1 toyMC)
median expected limit: r < 5.49365 @ 95%CL (1 toyMC)
   68% expected band : 5.49365 < r < 5.49365
   95% expected band : 5.49365 < r < 5.49365
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 47590081
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93924 +/- 0.0078618 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.93924 @ 95%CL (1 toyMC)
median expected limit: r < 2.93924 @ 95%CL (1 toyMC)
   68% expected band : 2.93924 < r < 2.93924
   95% expected band : 2.93924 < r < 2.93924
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1954554610
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91817 +/- 0.00651145 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.91817 @ 95%CL (1 toyMC)
median expected limit: r < 2.91817 @ 95%CL (1 toyMC)
   68% expected band : 2.91817 < r < 2.91817
   95% expected band : 2.91817 < r < 2.91817
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -830126009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92988 +/- 0.00576605 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.92988 @ 95%CL (1 toyMC)
median expected limit: r < 2.92988 @ 95%CL (1 toyMC)
   68% expected band : 2.92988 < r < 2.92988
   95% expected band : 2.92988 < r < 2.92988
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -392002468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91394 +/- 0.00647882 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.91394 @ 95%CL (1 toyMC)
median expected limit: r < 2.91394 @ 95%CL (1 toyMC)
   68% expected band : 2.91394 < r < 2.91394
   95% expected band : 2.91394 < r < 2.91394
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1910637779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.67332 +/- 0.00663997 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.67332 @ 95%CL (1 toyMC)
median expected limit: r < 3.67332 @ 95%CL (1 toyMC)
   68% expected band : 3.67332 < r < 3.67332
   95% expected band : 3.67332 < r < 3.67332
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 529380265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66609 +/- 0.00774986 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.66609 @ 95%CL (1 toyMC)
median expected limit: r < 3.66609 @ 95%CL (1 toyMC)
   68% expected band : 3.66609 < r < 3.66609
   95% expected band : 3.66609 < r < 3.66609
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -841845894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66366 +/- 0.00622811 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.66366 @ 95%CL (1 toyMC)
median expected limit: r < 3.66366 @ 95%CL (1 toyMC)
   68% expected band : 3.66366 < r < 3.66366
   95% expected band : 3.66366 < r < 3.66366
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -932225564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.84196 +/- 0.00700235 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.84196 @ 95%CL (1 toyMC)
median expected limit: r < 4.84196 @ 95%CL (1 toyMC)
   68% expected band : 4.84196 < r < 4.84196
   95% expected band : 4.84196 < r < 4.84196
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -384385361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.72058 +/- 0.00821138 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.72058 @ 95%CL (1 toyMC)
median expected limit: r < 5.72058 @ 95%CL (1 toyMC)
   68% expected band : 5.72058 < r < 5.72058
   95% expected band : 5.72058 < r < 5.72058
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 449700617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.05076 +/- 0.00540826 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.05076 @ 95%CL (1 toyMC)
median expected limit: r < 6.05076 @ 95%CL (1 toyMC)
   68% expected band : 6.05076 < r < 6.05076
   95% expected band : 6.05076 < r < 6.05076
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1713208578
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.93978 +/- 0.00947352 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.93978 @ 95%CL (1 toyMC)
median expected limit: r < 4.93978 @ 95%CL (1 toyMC)
   68% expected band : 4.93978 < r < 4.93978
   95% expected band : 4.93978 < r < 4.93978
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1141598647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.79173 +/- 0.00886518 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.79173 @ 95%CL (1 toyMC)
median expected limit: r < 5.79173 @ 95%CL (1 toyMC)
   68% expected band : 5.79173 < r < 5.79173
   95% expected band : 5.79173 < r < 5.79173
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -472848615
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.72469 +/- 0.0079568 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.72469 @ 95%CL (1 toyMC)
median expected limit: r < 3.72469 @ 95%CL (1 toyMC)
   68% expected band : 3.72469 < r < 3.72469
   95% expected band : 3.72469 < r < 3.72469
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1065494224
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.49159 +/- 0.00844285 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.49159 @ 95%CL (1 toyMC)
median expected limit: r < 4.49159 @ 95%CL (1 toyMC)
   68% expected band : 4.49159 < r < 4.49159
   95% expected band : 4.49159 < r < 4.49159
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -560174025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.25764 +/- 0.00799432 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.25764 @ 95%CL (1 toyMC)
median expected limit: r < 4.25764 @ 95%CL (1 toyMC)
   68% expected band : 4.25764 < r < 4.25764
   95% expected band : 4.25764 < r < 4.25764
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1628081505
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.52888 +/- 0.00678471 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.52888 @ 95%CL (1 toyMC)
median expected limit: r < 3.52888 @ 95%CL (1 toyMC)
   68% expected band : 3.52888 < r < 3.52888
   95% expected band : 3.52888 < r < 3.52888
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1990661730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64691 +/- 0.00612918 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.64691 @ 95%CL (1 toyMC)
median expected limit: r < 3.64691 @ 95%CL (1 toyMC)
   68% expected band : 3.64691 < r < 3.64691
   95% expected band : 3.64691 < r < 3.64691
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1920797000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93839 +/- 0.00718647 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.93839 @ 95%CL (1 toyMC)
median expected limit: r < 2.93839 @ 95%CL (1 toyMC)
   68% expected band : 2.93839 < r < 2.93839
   95% expected band : 2.93839 < r < 2.93839
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -712421000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.23936 +/- 0.00755237 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.23936 @ 95%CL (1 toyMC)
median expected limit: r < 5.23936 @ 95%CL (1 toyMC)
   68% expected band : 5.23936 < r < 5.23936
   95% expected band : 5.23936 < r < 5.23936
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -871726755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90506 +/- 0.0084384 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.90506 @ 95%CL (1 toyMC)
median expected limit: r < 2.90506 @ 95%CL (1 toyMC)
   68% expected band : 2.90506 < r < 2.90506
   95% expected band : 2.90506 < r < 2.90506
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1718867945
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.3693 +/- 0.006778 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.3693 @ 95%CL (1 toyMC)
median expected limit: r < 4.3693 @ 95%CL (1 toyMC)
   68% expected band : 4.3693 < r < 4.3693
   95% expected band : 4.3693 < r < 4.3693
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1891554353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92908 +/- 0.00660908 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.92908 @ 95%CL (1 toyMC)
median expected limit: r < 2.92908 @ 95%CL (1 toyMC)
   68% expected band : 2.92908 < r < 2.92908
   95% expected band : 2.92908 < r < 2.92908
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2047335436
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.53422 +/- 0.00578974 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.53422 @ 95%CL (1 toyMC)
median expected limit: r < 3.53422 @ 95%CL (1 toyMC)
   68% expected band : 3.53422 < r < 3.53422
   95% expected band : 3.53422 < r < 3.53422
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 330468892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.94804 +/- 0.00801392 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.94804 @ 95%CL (1 toyMC)
median expected limit: r < 3.94804 @ 95%CL (1 toyMC)
   68% expected band : 3.94804 < r < 3.94804
   95% expected band : 3.94804 < r < 3.94804
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 699405559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93646 +/- 0.00782814 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.93646 @ 95%CL (1 toyMC)
median expected limit: r < 2.93646 @ 95%CL (1 toyMC)
   68% expected band : 2.93646 < r < 2.93646
   95% expected band : 2.93646 < r < 2.93646
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 872857034
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91115 +/- 0.00694079 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.91115 @ 95%CL (1 toyMC)
median expected limit: r < 2.91115 @ 95%CL (1 toyMC)
   68% expected band : 2.91115 < r < 2.91115
   95% expected band : 2.91115 < r < 2.91115
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1742139800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.13048 +/- 0.00727598 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.13048 @ 95%CL (1 toyMC)
median expected limit: r < 4.13048 @ 95%CL (1 toyMC)
   68% expected band : 4.13048 < r < 4.13048
   95% expected band : 4.13048 < r < 4.13048
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 234435779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.48766 +/- 0.0077357 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.48766 @ 95%CL (1 toyMC)
median expected limit: r < 4.48766 @ 95%CL (1 toyMC)
   68% expected band : 4.48766 < r < 4.48766
   95% expected band : 4.48766 < r < 4.48766
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 305526471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90827 +/- 0.0062601 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.90827 @ 95%CL (1 toyMC)
median expected limit: r < 3.90827 @ 95%CL (1 toyMC)
   68% expected band : 3.90827 < r < 3.90827
   95% expected band : 3.90827 < r < 3.90827
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 948018731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92376 +/- 0.00755515 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.92376 @ 95%CL (1 toyMC)
median expected limit: r < 2.92376 @ 95%CL (1 toyMC)
   68% expected band : 2.92376 < r < 2.92376
   95% expected band : 2.92376 < r < 2.92376
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1761104041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6498 +/- 0.00922394 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.6498 @ 95%CL (1 toyMC)
median expected limit: r < 3.6498 @ 95%CL (1 toyMC)
   68% expected band : 3.6498 < r < 3.6498
   95% expected band : 3.6498 < r < 3.6498
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1629251019
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.53974 +/- 0.0099396 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.53974 @ 95%CL (1 toyMC)
median expected limit: r < 7.53974 @ 95%CL (1 toyMC)
   68% expected band : 7.53974 < r < 7.53974
   95% expected band : 7.53974 < r < 7.53974
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -852680016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.27371 +/- 0.00778087 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.27371 @ 95%CL (1 toyMC)
median expected limit: r < 4.27371 @ 95%CL (1 toyMC)
   68% expected band : 4.27371 < r < 4.27371
   95% expected band : 4.27371 < r < 4.27371
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -549189887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.94615 +/- 0.00728642 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.94615 @ 95%CL (1 toyMC)
median expected limit: r < 2.94615 @ 95%CL (1 toyMC)
   68% expected band : 2.94615 < r < 2.94615
   95% expected band : 2.94615 < r < 2.94615
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1059367242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64658 +/- 0.00857266 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.64658 @ 95%CL (1 toyMC)
median expected limit: r < 3.64658 @ 95%CL (1 toyMC)
   68% expected band : 3.64658 < r < 3.64658
   95% expected band : 3.64658 < r < 3.64658
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1146147280
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.74461 +/- 0.00804817 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.74461 @ 95%CL (1 toyMC)
median expected limit: r < 6.74461 @ 95%CL (1 toyMC)
   68% expected band : 6.74461 < r < 6.74461
   95% expected band : 6.74461 < r < 6.74461
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2030326917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.72446 +/- 0.00694537 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.72446 @ 95%CL (1 toyMC)
median expected limit: r < 3.72446 @ 95%CL (1 toyMC)
   68% expected band : 3.72446 < r < 3.72446
   95% expected band : 3.72446 < r < 3.72446
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -15614952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.19571 +/- 0.00596715 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.19571 @ 95%CL (1 toyMC)
median expected limit: r < 4.19571 @ 95%CL (1 toyMC)
   68% expected band : 4.19571 < r < 4.19571
   95% expected band : 4.19571 < r < 4.19571
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1800413398
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.92471 +/- 0.00967049 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.92471 @ 95%CL (1 toyMC)
median expected limit: r < 5.92471 @ 95%CL (1 toyMC)
   68% expected band : 5.92471 < r < 5.92471
   95% expected band : 5.92471 < r < 5.92471
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2068952178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64212 +/- 0.0065857 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.64212 @ 95%CL (1 toyMC)
median expected limit: r < 3.64212 @ 95%CL (1 toyMC)
   68% expected band : 3.64212 < r < 3.64212
   95% expected band : 3.64212 < r < 3.64212
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -480428238
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.38558 +/- 0.0078568 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.38558 @ 95%CL (1 toyMC)
median expected limit: r < 4.38558 @ 95%CL (1 toyMC)
   68% expected band : 4.38558 < r < 4.38558
   95% expected band : 4.38558 < r < 4.38558
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1920444111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.53163 +/- 0.00768326 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.53163 @ 95%CL (1 toyMC)
median expected limit: r < 3.53163 @ 95%CL (1 toyMC)
   68% expected band : 3.53163 < r < 3.53163
   95% expected band : 3.53163 < r < 3.53163
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -175197792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89776 +/- 0.00690994 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.89776 @ 95%CL (1 toyMC)
median expected limit: r < 3.89776 @ 95%CL (1 toyMC)
   68% expected band : 3.89776 < r < 3.89776
   95% expected band : 3.89776 < r < 3.89776
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1100025554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.94176 +/- 0.00765509 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.94176 @ 95%CL (1 toyMC)
median expected limit: r < 2.94176 @ 95%CL (1 toyMC)
   68% expected band : 2.94176 < r < 2.94176
   95% expected band : 2.94176 < r < 2.94176
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -508652727
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64856 +/- 0.0069259 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.64856 @ 95%CL (1 toyMC)
median expected limit: r < 3.64856 @ 95%CL (1 toyMC)
   68% expected band : 3.64856 < r < 3.64856
   95% expected band : 3.64856 < r < 3.64856
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 255907366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.80368 +/- 0.00920855 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.80368 @ 95%CL (1 toyMC)
median expected limit: r < 5.80368 @ 95%CL (1 toyMC)
   68% expected band : 5.80368 < r < 5.80368
   95% expected band : 5.80368 < r < 5.80368
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1374949943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.53925 +/- 0.00715666 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.53925 @ 95%CL (1 toyMC)
median expected limit: r < 3.53925 @ 95%CL (1 toyMC)
   68% expected band : 3.53925 < r < 3.53925
   95% expected band : 3.53925 < r < 3.53925
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1151612867
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.57714 +/- 0.00665914 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.57714 @ 95%CL (1 toyMC)
median expected limit: r < 4.57714 @ 95%CL (1 toyMC)
   68% expected band : 4.57714 < r < 4.57714
   95% expected band : 4.57714 < r < 4.57714
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 600748040
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.39528 +/- 0.00844371 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.39528 @ 95%CL (1 toyMC)
median expected limit: r < 4.39528 @ 95%CL (1 toyMC)
   68% expected band : 4.39528 < r < 4.39528
   95% expected band : 4.39528 < r < 4.39528
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2013969072
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.27115 +/- 0.00736506 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.27115 @ 95%CL (1 toyMC)
median expected limit: r < 5.27115 @ 95%CL (1 toyMC)
   68% expected band : 5.27115 < r < 5.27115
   95% expected band : 5.27115 < r < 5.27115
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -110032550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.24939 +/- 0.00775828 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.24939 @ 95%CL (1 toyMC)
median expected limit: r < 4.24939 @ 95%CL (1 toyMC)
   68% expected band : 4.24939 < r < 4.24939
   95% expected band : 4.24939 < r < 4.24939
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -588275909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.42655 +/- 0.00839061 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.42655 @ 95%CL (1 toyMC)
median expected limit: r < 5.42655 @ 95%CL (1 toyMC)
   68% expected band : 5.42655 < r < 5.42655
   95% expected band : 5.42655 < r < 5.42655
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -484789971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.50878 +/- 0.00714644 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.50878 @ 95%CL (1 toyMC)
median expected limit: r < 3.50878 @ 95%CL (1 toyMC)
   68% expected band : 3.50878 < r < 3.50878
   95% expected band : 3.50878 < r < 3.50878
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 13223335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.135 +/- 0.00664701 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.135 @ 95%CL (1 toyMC)
median expected limit: r < 4.135 @ 95%CL (1 toyMC)
   68% expected band : 4.135 < r < 4.135
   95% expected band : 4.135 < r < 4.135
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1644538975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15864 +/- 0.00793794 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.15864 @ 95%CL (1 toyMC)
median expected limit: r < 4.15864 @ 95%CL (1 toyMC)
   68% expected band : 4.15864 < r < 4.15864
   95% expected band : 4.15864 < r < 4.15864
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -528831909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.59464 +/- 0.00863214 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.59464 @ 95%CL (1 toyMC)
median expected limit: r < 5.59464 @ 95%CL (1 toyMC)
   68% expected band : 5.59464 < r < 5.59464
   95% expected band : 5.59464 < r < 5.59464
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -280392767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.94319 +/- 0.00695098 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.94319 @ 95%CL (1 toyMC)
median expected limit: r < 2.94319 @ 95%CL (1 toyMC)
   68% expected band : 2.94319 < r < 2.94319
   95% expected band : 2.94319 < r < 2.94319
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1224849495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.49809 +/- 0.00957495 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.49809 @ 95%CL (1 toyMC)
median expected limit: r < 4.49809 @ 95%CL (1 toyMC)
   68% expected band : 4.49809 < r < 4.49809
   95% expected band : 4.49809 < r < 4.49809
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1799367704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92418 +/- 0.00721324 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.92418 @ 95%CL (1 toyMC)
median expected limit: r < 2.92418 @ 95%CL (1 toyMC)
   68% expected band : 2.92418 < r < 2.92418
   95% expected band : 2.92418 < r < 2.92418
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 31404142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.80567 +/- 0.0114452 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.80567 @ 95%CL (1 toyMC)
median expected limit: r < 5.80567 @ 95%CL (1 toyMC)
   68% expected band : 5.80567 < r < 5.80567
   95% expected band : 5.80567 < r < 5.80567
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1575249725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.55035 +/- 0.00782278 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.55035 @ 95%CL (1 toyMC)
median expected limit: r < 4.55035 @ 95%CL (1 toyMC)
   68% expected band : 4.55035 < r < 4.55035
   95% expected band : 4.55035 < r < 4.55035
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 791136258
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92498 +/- 0.00695534 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.92498 @ 95%CL (1 toyMC)
median expected limit: r < 2.92498 @ 95%CL (1 toyMC)
   68% expected band : 2.92498 < r < 2.92498
   95% expected band : 2.92498 < r < 2.92498
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2046877386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.82539 +/- 0.00803865 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.82539 @ 95%CL (1 toyMC)
median expected limit: r < 3.82539 @ 95%CL (1 toyMC)
   68% expected band : 3.82539 < r < 3.82539
   95% expected band : 3.82539 < r < 3.82539
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1776415749
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93569 +/- 0.00729201 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.93569 @ 95%CL (1 toyMC)
median expected limit: r < 2.93569 @ 95%CL (1 toyMC)
   68% expected band : 2.93569 < r < 2.93569
   95% expected band : 2.93569 < r < 2.93569
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1767732035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.5113 +/- 0.00661067 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.5113 @ 95%CL (1 toyMC)
median expected limit: r < 3.5113 @ 95%CL (1 toyMC)
   68% expected band : 3.5113 < r < 3.5113
   95% expected band : 3.5113 < r < 3.5113
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1717290281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92322 +/- 0.00620665 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.92322 @ 95%CL (1 toyMC)
median expected limit: r < 2.92322 @ 95%CL (1 toyMC)
   68% expected band : 2.92322 < r < 2.92322
   95% expected band : 2.92322 < r < 2.92322
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1661877177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93619 +/- 0.00635926 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.93619 @ 95%CL (1 toyMC)
median expected limit: r < 2.93619 @ 95%CL (1 toyMC)
   68% expected band : 2.93619 < r < 2.93619
   95% expected band : 2.93619 < r < 2.93619
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2020009273
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93402 +/- 0.0084125 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.93402 @ 95%CL (1 toyMC)
median expected limit: r < 2.93402 @ 95%CL (1 toyMC)
   68% expected band : 2.93402 < r < 2.93402
   95% expected band : 2.93402 < r < 2.93402
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -765198189
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.9544 +/- 0.00660106 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.9544 @ 95%CL (1 toyMC)
median expected limit: r < 2.9544 @ 95%CL (1 toyMC)
   68% expected band : 2.9544 < r < 2.9544
   95% expected band : 2.9544 < r < 2.9544
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1875268649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93313 +/- 0.00665848 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.93313 @ 95%CL (1 toyMC)
median expected limit: r < 2.93313 @ 95%CL (1 toyMC)
   68% expected band : 2.93313 < r < 2.93313
   95% expected band : 2.93313 < r < 2.93313
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 590281866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90662 +/- 0.00847653 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.90662 @ 95%CL (1 toyMC)
median expected limit: r < 3.90662 @ 95%CL (1 toyMC)
   68% expected band : 3.90662 < r < 3.90662
   95% expected band : 3.90662 < r < 3.90662
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1297274837
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.69412 +/- 0.00796913 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.69412 @ 95%CL (1 toyMC)
median expected limit: r < 4.69412 @ 95%CL (1 toyMC)
   68% expected band : 4.69412 < r < 4.69412
   95% expected band : 4.69412 < r < 4.69412
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1439564816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90797 +/- 0.00618784 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.90797 @ 95%CL (1 toyMC)
median expected limit: r < 2.90797 @ 95%CL (1 toyMC)
   68% expected band : 2.90797 < r < 2.90797
   95% expected band : 2.90797 < r < 2.90797
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -885698854
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.01116 +/- 0.00788593 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.01116 @ 95%CL (1 toyMC)
median expected limit: r < 4.01116 @ 95%CL (1 toyMC)
   68% expected band : 4.01116 < r < 4.01116
   95% expected band : 4.01116 < r < 4.01116
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-104768107.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-110032550.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1141598647.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1147606156.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-118466931.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-135762399.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1439564816.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1527666551.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-15614952.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1575249725.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1628081505.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1629251019.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1644538975.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1717290281.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1718867945.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-175197792.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1761104041.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1800413398.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1823534720.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1875268649.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1891554353.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1920797000.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1954554610.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-2007340420.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-2047335436.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-2069661496.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-2108510676.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-280392767.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-370668950.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-384385361.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-392002468.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-472848615.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-480428238.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-484789971.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-508652727.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-528831909.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-549189887.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-560174025.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-588275909.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-712421000.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-765198189.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-830126009.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-841845894.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-852680016.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-871726755.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-885698854.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-932225564.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-996012342.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.1059367242.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.1065494224.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.1100025554.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1146147280.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1151612867.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1224849495.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1231025809.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.124025561.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1278172606.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1292607539.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1297274837.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.13223335.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1374949943.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1385470050.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1587167005.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1661877177.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1713208578.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1742139800.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1767732035.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1776415749.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1799367704.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1910637779.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1920444111.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1990661730.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.2013969072.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.2020009273.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.2030326917.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.2041610072.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.2046877386.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.2068952178.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.2134843095.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.223051116.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.234435779.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.255907366.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.305526471.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.31404142.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.330468892.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.43931302.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.449700617.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.456614422.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.47590081.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.529380265.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.550035252.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.590281866.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.598509756.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.600748040.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.618593453.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.699405559.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.791136258.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.872857034.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.937540130.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.948018731.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1461788975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09896 +/- 0.0083101 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.09896 @ 95%CL (1 toyMC)
median expected limit: r < 3.09896 @ 95%CL (1 toyMC)
   68% expected band : 3.09896 < r < 3.09896
   95% expected band : 3.09896 < r < 3.09896
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -330616389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07326 +/- 0.00814676 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.07326 @ 95%CL (1 toyMC)
median expected limit: r < 3.07326 @ 95%CL (1 toyMC)
   68% expected band : 3.07326 < r < 3.07326
   95% expected band : 3.07326 < r < 3.07326
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -149485476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.11065 +/- 0.00777149 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.11065 @ 95%CL (1 toyMC)
median expected limit: r < 3.11065 @ 95%CL (1 toyMC)
   68% expected band : 3.11065 < r < 3.11065
   95% expected band : 3.11065 < r < 3.11065
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1207460042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17834 +/- 0.00874393 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.17834 @ 95%CL (1 toyMC)
median expected limit: r < 4.17834 @ 95%CL (1 toyMC)
   68% expected band : 4.17834 < r < 4.17834
   95% expected band : 4.17834 < r < 4.17834
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1919407196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10126 +/- 0.00730211 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.10126 @ 95%CL (1 toyMC)
median expected limit: r < 3.10126 @ 95%CL (1 toyMC)
   68% expected band : 3.10126 < r < 3.10126
   95% expected band : 3.10126 < r < 3.10126
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 330153140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09116 +/- 0.00632955 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.09116 @ 95%CL (1 toyMC)
median expected limit: r < 3.09116 @ 95%CL (1 toyMC)
   68% expected band : 3.09116 < r < 3.09116
   95% expected band : 3.09116 < r < 3.09116
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1870404912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08073 +/- 0.00672085 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.08073 @ 95%CL (1 toyMC)
median expected limit: r < 3.08073 @ 95%CL (1 toyMC)
   68% expected band : 3.08073 < r < 3.08073
   95% expected band : 3.08073 < r < 3.08073
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1879833511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08155 +/- 0.00856245 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.08155 @ 95%CL (1 toyMC)
median expected limit: r < 3.08155 @ 95%CL (1 toyMC)
   68% expected band : 3.08155 < r < 3.08155
   95% expected band : 3.08155 < r < 3.08155
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1586300820
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08698 +/- 0.00681616 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.08698 @ 95%CL (1 toyMC)
median expected limit: r < 3.08698 @ 95%CL (1 toyMC)
   68% expected band : 3.08698 < r < 3.08698
   95% expected band : 3.08698 < r < 3.08698
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -655921258
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09317 +/- 0.00788747 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.09317 @ 95%CL (1 toyMC)
median expected limit: r < 3.09317 @ 95%CL (1 toyMC)
   68% expected band : 3.09317 < r < 3.09317
   95% expected band : 3.09317 < r < 3.09317
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -477447515
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.71744 +/- 0.00798832 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.71744 @ 95%CL (1 toyMC)
median expected limit: r < 4.71744 @ 95%CL (1 toyMC)
   68% expected band : 4.71744 < r < 4.71744
   95% expected band : 4.71744 < r < 4.71744
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -649657895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0801 +/- 0.00893871 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.0801 @ 95%CL (1 toyMC)
median expected limit: r < 3.0801 @ 95%CL (1 toyMC)
   68% expected band : 3.0801 < r < 3.0801
   95% expected band : 3.0801 < r < 3.0801
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1622783290
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08966 +/- 0.00714735 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.08966 @ 95%CL (1 toyMC)
median expected limit: r < 3.08966 @ 95%CL (1 toyMC)
   68% expected band : 3.08966 < r < 3.08966
   95% expected band : 3.08966 < r < 3.08966
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -700750290
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.42606 +/- 0.00737676 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.42606 @ 95%CL (1 toyMC)
median expected limit: r < 4.42606 @ 95%CL (1 toyMC)
   68% expected band : 4.42606 < r < 4.42606
   95% expected band : 4.42606 < r < 4.42606
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 402368399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09138 +/- 0.00786598 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.09138 @ 95%CL (1 toyMC)
median expected limit: r < 3.09138 @ 95%CL (1 toyMC)
   68% expected band : 3.09138 < r < 3.09138
   95% expected band : 3.09138 < r < 3.09138
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1663192673
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.19602 +/- 0.00972994 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.19602 @ 95%CL (1 toyMC)
median expected limit: r < 7.19602 @ 95%CL (1 toyMC)
   68% expected band : 7.19602 < r < 7.19602
   95% expected band : 7.19602 < r < 7.19602
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 968663969
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.05245 +/- 0.00854025 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.05245 @ 95%CL (1 toyMC)
median expected limit: r < 4.05245 @ 95%CL (1 toyMC)
   68% expected band : 4.05245 < r < 4.05245
   95% expected band : 4.05245 < r < 4.05245
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -689889243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.47925 +/- 0.00761351 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.47925 @ 95%CL (1 toyMC)
median expected limit: r < 4.47925 @ 95%CL (1 toyMC)
   68% expected band : 4.47925 < r < 4.47925
   95% expected band : 4.47925 < r < 4.47925
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1522392767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07724 +/- 0.00714683 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.07724 @ 95%CL (1 toyMC)
median expected limit: r < 3.07724 @ 95%CL (1 toyMC)
   68% expected band : 3.07724 < r < 3.07724
   95% expected band : 3.07724 < r < 3.07724
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1660261085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09486 +/- 0.00590268 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.09486 @ 95%CL (1 toyMC)
median expected limit: r < 3.09486 @ 95%CL (1 toyMC)
   68% expected band : 3.09486 < r < 3.09486
   95% expected band : 3.09486 < r < 3.09486
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1706760722
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.17395 +/- 0.00760925 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.17395 @ 95%CL (1 toyMC)
median expected limit: r < 6.17395 @ 95%CL (1 toyMC)
   68% expected band : 6.17395 < r < 6.17395
   95% expected band : 6.17395 < r < 6.17395
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2009551953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09997 +/- 0.0076107 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.09997 @ 95%CL (1 toyMC)
median expected limit: r < 3.09997 @ 95%CL (1 toyMC)
   68% expected band : 3.09997 < r < 3.09997
   95% expected band : 3.09997 < r < 3.09997
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -529006018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.3956 +/- 0.00757493 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.3956 @ 95%CL (1 toyMC)
median expected limit: r < 5.3956 @ 95%CL (1 toyMC)
   68% expected band : 5.3956 < r < 5.3956
   95% expected band : 5.3956 < r < 5.3956
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1535885375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06999 +/- 0.00645364 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.06999 @ 95%CL (1 toyMC)
median expected limit: r < 3.06999 @ 95%CL (1 toyMC)
   68% expected band : 3.06999 < r < 3.06999
   95% expected band : 3.06999 < r < 3.06999
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1934576978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.06302 +/- 0.00956724 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.06302 @ 95%CL (1 toyMC)
median expected limit: r < 4.06302 @ 95%CL (1 toyMC)
   68% expected band : 4.06302 < r < 4.06302
   95% expected band : 4.06302 < r < 4.06302
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 518329402
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04895 +/- 0.0066958 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.04895 @ 95%CL (1 toyMC)
median expected limit: r < 3.04895 @ 95%CL (1 toyMC)
   68% expected band : 3.04895 < r < 3.04895
   95% expected band : 3.04895 < r < 3.04895
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -912493733
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08723 +/- 0.00585221 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.08723 @ 95%CL (1 toyMC)
median expected limit: r < 3.08723 @ 95%CL (1 toyMC)
   68% expected band : 3.08723 < r < 3.08723
   95% expected band : 3.08723 < r < 3.08723
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -574829197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06125 +/- 0.00928194 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.06125 @ 95%CL (1 toyMC)
median expected limit: r < 3.06125 @ 95%CL (1 toyMC)
   68% expected band : 3.06125 < r < 3.06125
   95% expected band : 3.06125 < r < 3.06125
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1190304993
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08016 +/- 0.0076496 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.08016 @ 95%CL (1 toyMC)
median expected limit: r < 3.08016 @ 95%CL (1 toyMC)
   68% expected band : 3.08016 < r < 3.08016
   95% expected band : 3.08016 < r < 3.08016
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -309140752
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.7191 +/- 0.00905397 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.7191 @ 95%CL (1 toyMC)
median expected limit: r < 5.7191 @ 95%CL (1 toyMC)
   68% expected band : 5.7191 < r < 5.7191
   95% expected band : 5.7191 < r < 5.7191
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -250103548
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89336 +/- 0.00860238 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.89336 @ 95%CL (1 toyMC)
median expected limit: r < 3.89336 @ 95%CL (1 toyMC)
   68% expected band : 3.89336 < r < 3.89336
   95% expected band : 3.89336 < r < 3.89336
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -559232446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.37773 +/- 0.00721262 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.37773 @ 95%CL (1 toyMC)
median expected limit: r < 4.37773 @ 95%CL (1 toyMC)
   68% expected band : 4.37773 < r < 4.37773
   95% expected band : 4.37773 < r < 4.37773
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1416753186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08847 +/- 0.00631273 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.08847 @ 95%CL (1 toyMC)
median expected limit: r < 3.08847 @ 95%CL (1 toyMC)
   68% expected band : 3.08847 < r < 3.08847
   95% expected band : 3.08847 < r < 3.08847
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1222056204
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.35851 +/- 0.00892527 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.35851 @ 95%CL (1 toyMC)
median expected limit: r < 4.35851 @ 95%CL (1 toyMC)
   68% expected band : 4.35851 < r < 4.35851
   95% expected band : 4.35851 < r < 4.35851
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1045571377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08231 +/- 0.00859047 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.08231 @ 95%CL (1 toyMC)
median expected limit: r < 3.08231 @ 95%CL (1 toyMC)
   68% expected band : 3.08231 < r < 3.08231
   95% expected band : 3.08231 < r < 3.08231
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1645958543
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08604 +/- 0.0059331 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.08604 @ 95%CL (1 toyMC)
median expected limit: r < 3.08604 @ 95%CL (1 toyMC)
   68% expected band : 3.08604 < r < 3.08604
   95% expected band : 3.08604 < r < 3.08604
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1420827295
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1012 +/- 0.00748079 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.1012 @ 95%CL (1 toyMC)
median expected limit: r < 3.1012 @ 95%CL (1 toyMC)
   68% expected band : 3.1012 < r < 3.1012
   95% expected band : 3.1012 < r < 3.1012
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1480126560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09499 +/- 0.00759073 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.09499 @ 95%CL (1 toyMC)
median expected limit: r < 3.09499 @ 95%CL (1 toyMC)
   68% expected band : 3.09499 < r < 3.09499
   95% expected band : 3.09499 < r < 3.09499
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1670299883
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10318 +/- 0.00835652 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.10318 @ 95%CL (1 toyMC)
median expected limit: r < 3.10318 @ 95%CL (1 toyMC)
   68% expected band : 3.10318 < r < 3.10318
   95% expected band : 3.10318 < r < 3.10318
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -736967256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05809 +/- 0.00714538 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.05809 @ 95%CL (1 toyMC)
median expected limit: r < 3.05809 @ 95%CL (1 toyMC)
   68% expected band : 3.05809 < r < 3.05809
   95% expected band : 3.05809 < r < 3.05809
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -728317958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06857 +/- 0.00770923 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.06857 @ 95%CL (1 toyMC)
median expected limit: r < 3.06857 @ 95%CL (1 toyMC)
   68% expected band : 3.06857 < r < 3.06857
   95% expected band : 3.06857 < r < 3.06857
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 813843201
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.71239 +/- 0.00903623 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.71239 @ 95%CL (1 toyMC)
median expected limit: r < 4.71239 @ 95%CL (1 toyMC)
   68% expected band : 4.71239 < r < 4.71239
   95% expected band : 4.71239 < r < 4.71239
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -80910327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07424 +/- 0.00649913 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.07424 @ 95%CL (1 toyMC)
median expected limit: r < 3.07424 @ 95%CL (1 toyMC)
   68% expected band : 3.07424 < r < 3.07424
   95% expected band : 3.07424 < r < 3.07424
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -317714616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08828 +/- 0.00865997 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.08828 @ 95%CL (1 toyMC)
median expected limit: r < 3.08828 @ 95%CL (1 toyMC)
   68% expected band : 3.08828 < r < 3.08828
   95% expected band : 3.08828 < r < 3.08828
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 247160231
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09923 +/- 0.00832783 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.09923 @ 95%CL (1 toyMC)
median expected limit: r < 3.09923 @ 95%CL (1 toyMC)
   68% expected band : 3.09923 < r < 3.09923
   95% expected band : 3.09923 < r < 3.09923
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 343505443
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.78358 +/- 0.00810517 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.78358 @ 95%CL (1 toyMC)
median expected limit: r < 5.78358 @ 95%CL (1 toyMC)
   68% expected band : 5.78358 < r < 5.78358
   95% expected band : 5.78358 < r < 5.78358
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1587090981
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07258 +/- 0.00788476 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.07258 @ 95%CL (1 toyMC)
median expected limit: r < 3.07258 @ 95%CL (1 toyMC)
   68% expected band : 3.07258 < r < 3.07258
   95% expected band : 3.07258 < r < 3.07258
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 914977983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09512 +/- 0.00690698 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.09512 @ 95%CL (1 toyMC)
median expected limit: r < 3.09512 @ 95%CL (1 toyMC)
   68% expected band : 3.09512 < r < 3.09512
   95% expected band : 3.09512 < r < 3.09512
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 460629176
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.9248 +/- 0.00780321 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.9248 @ 95%CL (1 toyMC)
median expected limit: r < 4.9248 @ 95%CL (1 toyMC)
   68% expected band : 4.9248 < r < 4.9248
   95% expected band : 4.9248 < r < 4.9248
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -428061660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.85891 +/- 0.0093909 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.85891 @ 95%CL (1 toyMC)
median expected limit: r < 3.85891 @ 95%CL (1 toyMC)
   68% expected band : 3.85891 < r < 3.85891
   95% expected band : 3.85891 < r < 3.85891
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -307893685
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.0404 +/- 0.00862537 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.0404 @ 95%CL (1 toyMC)
median expected limit: r < 4.0404 @ 95%CL (1 toyMC)
   68% expected band : 4.0404 < r < 4.0404
   95% expected band : 4.0404 < r < 4.0404
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -674213118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06958 +/- 0.00927649 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.06958 @ 95%CL (1 toyMC)
median expected limit: r < 3.06958 @ 95%CL (1 toyMC)
   68% expected band : 3.06958 < r < 3.06958
   95% expected band : 3.06958 < r < 3.06958
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2084946682
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07612 +/- 0.0070826 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.07612 @ 95%CL (1 toyMC)
median expected limit: r < 3.07612 @ 95%CL (1 toyMC)
   68% expected band : 3.07612 < r < 3.07612
   95% expected band : 3.07612 < r < 3.07612
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 636426852
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07165 +/- 0.00847051 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.07165 @ 95%CL (1 toyMC)
median expected limit: r < 3.07165 @ 95%CL (1 toyMC)
   68% expected band : 3.07165 < r < 3.07165
   95% expected band : 3.07165 < r < 3.07165
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1114515639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.88821 +/- 0.00752016 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.88821 @ 95%CL (1 toyMC)
median expected limit: r < 3.88821 @ 95%CL (1 toyMC)
   68% expected band : 3.88821 < r < 3.88821
   95% expected band : 3.88821 < r < 3.88821
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 240281674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09021 +/- 0.00690316 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.09021 @ 95%CL (1 toyMC)
median expected limit: r < 3.09021 @ 95%CL (1 toyMC)
   68% expected band : 3.09021 < r < 3.09021
   95% expected band : 3.09021 < r < 3.09021
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1156883282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08513 +/- 0.00877717 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.08513 @ 95%CL (1 toyMC)
median expected limit: r < 3.08513 @ 95%CL (1 toyMC)
   68% expected band : 3.08513 < r < 3.08513
   95% expected band : 3.08513 < r < 3.08513
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 576486369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.66817 +/- 0.00673861 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.66817 @ 95%CL (1 toyMC)
median expected limit: r < 4.66817 @ 95%CL (1 toyMC)
   68% expected band : 4.66817 < r < 4.66817
   95% expected band : 4.66817 < r < 4.66817
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1478103856
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10178 +/- 0.00780718 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.10178 @ 95%CL (1 toyMC)
median expected limit: r < 3.10178 @ 95%CL (1 toyMC)
   68% expected band : 3.10178 < r < 3.10178
   95% expected band : 3.10178 < r < 3.10178
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2127204577
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08455 +/- 0.00825844 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 3.08455 @ 95%CL (1 toyMC)
median expected limit: r < 3.08455 @ 95%CL (1 toyMC)
   68% expected band : 3.08455 < r < 3.08455
   95% expected band : 3.08455 < r < 3.08455
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1704905624
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.56137 +/- 0.0102915 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.56137 @ 95%CL (1 toyMC)
median expected limit: r < 4.56137 @ 95%CL (1 toyMC)
   68% expected band : 4.56137 < r < 4.56137
   95% expected band : 4.56137 < r < 4.56137
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 9681905
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.04147 +/- 0.00571305 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.04147 @ 95%CL (1 toyMC)
median expected limit: r < 4.04147 @ 95%CL (1 toyMC)
   68% expected band : 4.04147 < r < 4.04147
   95% expected band : 4.04147 < r < 4.04147
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -397739868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07648 +/- 0.00764528 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.07648 @ 95%CL (1 toyMC)
median expected limit: r < 3.07648 @ 95%CL (1 toyMC)
   68% expected band : 3.07648 < r < 3.07648
   95% expected band : 3.07648 < r < 3.07648
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1944788406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.02603 +/- 0.00663967 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.02603 @ 95%CL (1 toyMC)
median expected limit: r < 4.02603 @ 95%CL (1 toyMC)
   68% expected band : 4.02603 < r < 4.02603
   95% expected band : 4.02603 < r < 4.02603
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 651842550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09022 +/- 0.00628987 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.09022 @ 95%CL (1 toyMC)
median expected limit: r < 3.09022 @ 95%CL (1 toyMC)
   68% expected band : 3.09022 < r < 3.09022
   95% expected band : 3.09022 < r < 3.09022
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1725164637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09865 +/- 0.00769826 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.09865 @ 95%CL (1 toyMC)
median expected limit: r < 3.09865 @ 95%CL (1 toyMC)
   68% expected band : 3.09865 < r < 3.09865
   95% expected band : 3.09865 < r < 3.09865
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1995324846
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08993 +/- 0.00673762 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.08993 @ 95%CL (1 toyMC)
median expected limit: r < 3.08993 @ 95%CL (1 toyMC)
   68% expected band : 3.08993 < r < 3.08993
   95% expected band : 3.08993 < r < 3.08993
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 713538880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.03165 +/- 0.00744461 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.03165 @ 95%CL (1 toyMC)
median expected limit: r < 4.03165 @ 95%CL (1 toyMC)
   68% expected band : 4.03165 < r < 4.03165
   95% expected band : 4.03165 < r < 4.03165
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -915278679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08247 +/- 0.00600176 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.08247 @ 95%CL (1 toyMC)
median expected limit: r < 3.08247 @ 95%CL (1 toyMC)
   68% expected band : 3.08247 < r < 3.08247
   95% expected band : 3.08247 < r < 3.08247
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -273655164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09509 +/- 0.00793181 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.09509 @ 95%CL (1 toyMC)
median expected limit: r < 3.09509 @ 95%CL (1 toyMC)
   68% expected band : 3.09509 < r < 3.09509
   95% expected band : 3.09509 < r < 3.09509
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1165808836
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.37328 +/- 0.00761753 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.37328 @ 95%CL (1 toyMC)
median expected limit: r < 4.37328 @ 95%CL (1 toyMC)
   68% expected band : 4.37328 < r < 4.37328
   95% expected band : 4.37328 < r < 4.37328
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1760737144
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08638 +/- 0.00826996 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.08638 @ 95%CL (1 toyMC)
median expected limit: r < 3.08638 @ 95%CL (1 toyMC)
   68% expected band : 3.08638 < r < 3.08638
   95% expected band : 3.08638 < r < 3.08638
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 210485344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.56947 +/- 0.00982633 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.56947 @ 95%CL (1 toyMC)
median expected limit: r < 5.56947 @ 95%CL (1 toyMC)
   68% expected band : 5.56947 < r < 5.56947
   95% expected band : 5.56947 < r < 5.56947
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2067532904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09418 +/- 0.00812952 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.09418 @ 95%CL (1 toyMC)
median expected limit: r < 3.09418 @ 95%CL (1 toyMC)
   68% expected band : 3.09418 < r < 3.09418
   95% expected band : 3.09418 < r < 3.09418
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1458404090
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0808 +/- 0.00678067 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.0808 @ 95%CL (1 toyMC)
median expected limit: r < 3.0808 @ 95%CL (1 toyMC)
   68% expected band : 3.0808 < r < 3.0808
   95% expected band : 3.0808 < r < 3.0808
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2036778597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07839 +/- 0.00559611 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.07839 @ 95%CL (1 toyMC)
median expected limit: r < 3.07839 @ 95%CL (1 toyMC)
   68% expected band : 3.07839 < r < 3.07839
   95% expected band : 3.07839 < r < 3.07839
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 907714043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09261 +/- 0.00611287 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.09261 @ 95%CL (1 toyMC)
median expected limit: r < 3.09261 @ 95%CL (1 toyMC)
   68% expected band : 3.09261 < r < 3.09261
   95% expected band : 3.09261 < r < 3.09261
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1300149601
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08 +/- 0.00779559 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.08 @ 95%CL (1 toyMC)
median expected limit: r < 3.08 @ 95%CL (1 toyMC)
   68% expected band : 3.08 < r < 3.08
   95% expected band : 3.08 < r < 3.08
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2127060156
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06621 +/- 0.00627438 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.06621 @ 95%CL (1 toyMC)
median expected limit: r < 3.06621 @ 95%CL (1 toyMC)
   68% expected band : 3.06621 < r < 3.06621
   95% expected band : 3.06621 < r < 3.06621
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1020845665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07995 +/- 0.0083139 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.07995 @ 95%CL (1 toyMC)
median expected limit: r < 3.07995 @ 95%CL (1 toyMC)
   68% expected band : 3.07995 < r < 3.07995
   95% expected band : 3.07995 < r < 3.07995
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 623637672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07613 +/- 0.00648512 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.07613 @ 95%CL (1 toyMC)
median expected limit: r < 3.07613 @ 95%CL (1 toyMC)
   68% expected band : 3.07613 < r < 3.07613
   95% expected band : 3.07613 < r < 3.07613
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 938693966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.66183 +/- 0.00812647 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.66183 @ 95%CL (1 toyMC)
median expected limit: r < 4.66183 @ 95%CL (1 toyMC)
   68% expected band : 4.66183 < r < 4.66183
   95% expected band : 4.66183 < r < 4.66183
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -103236437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.95191 +/- 0.00827351 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.95191 @ 95%CL (1 toyMC)
median expected limit: r < 3.95191 @ 95%CL (1 toyMC)
   68% expected band : 3.95191 < r < 3.95191
   95% expected band : 3.95191 < r < 3.95191
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -734585178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08151 +/- 0.00784722 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.08151 @ 95%CL (1 toyMC)
median expected limit: r < 3.08151 @ 95%CL (1 toyMC)
   68% expected band : 3.08151 < r < 3.08151
   95% expected band : 3.08151 < r < 3.08151
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1940641516
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.61645 +/- 0.00841134 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.61645 @ 95%CL (1 toyMC)
median expected limit: r < 4.61645 @ 95%CL (1 toyMC)
   68% expected band : 4.61645 < r < 4.61645
   95% expected band : 4.61645 < r < 4.61645
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 548796913
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.06948 +/- 0.00744136 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.06948 @ 95%CL (1 toyMC)
median expected limit: r < 4.06948 @ 95%CL (1 toyMC)
   68% expected band : 4.06948 < r < 4.06948
   95% expected band : 4.06948 < r < 4.06948
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 359996044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08488 +/- 0.00705184 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.08488 @ 95%CL (1 toyMC)
median expected limit: r < 3.08488 @ 95%CL (1 toyMC)
   68% expected band : 3.08488 < r < 3.08488
   95% expected band : 3.08488 < r < 3.08488
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -42745539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.88917 +/- 0.00800824 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.88917 @ 95%CL (1 toyMC)
median expected limit: r < 3.88917 @ 95%CL (1 toyMC)
   68% expected band : 3.88917 < r < 3.88917
   95% expected band : 3.88917 < r < 3.88917
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 957737320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.03846 +/- 0.00894632 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.03846 @ 95%CL (1 toyMC)
median expected limit: r < 4.03846 @ 95%CL (1 toyMC)
   68% expected band : 4.03846 < r < 4.03846
   95% expected band : 4.03846 < r < 4.03846
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1900789342
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10219 +/- 0.00646957 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.10219 @ 95%CL (1 toyMC)
median expected limit: r < 3.10219 @ 95%CL (1 toyMC)
   68% expected band : 3.10219 < r < 3.10219
   95% expected band : 3.10219 < r < 3.10219
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2092497709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.11462 +/- 0.00728421 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.11462 @ 95%CL (1 toyMC)
median expected limit: r < 3.11462 @ 95%CL (1 toyMC)
   68% expected band : 3.11462 < r < 3.11462
   95% expected band : 3.11462 < r < 3.11462
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -35822704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09767 +/- 0.00768463 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.09767 @ 95%CL (1 toyMC)
median expected limit: r < 3.09767 @ 95%CL (1 toyMC)
   68% expected band : 3.09767 < r < 3.09767
   95% expected band : 3.09767 < r < 3.09767
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1314293064
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.56583 +/- 0.00894834 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.56583 @ 95%CL (1 toyMC)
median expected limit: r < 5.56583 @ 95%CL (1 toyMC)
   68% expected band : 5.56583 < r < 5.56583
   95% expected band : 5.56583 < r < 5.56583
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -934141778
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.85832 +/- 0.00806935 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.85832 @ 95%CL (1 toyMC)
median expected limit: r < 3.85832 @ 95%CL (1 toyMC)
   68% expected band : 3.85832 < r < 3.85832
   95% expected band : 3.85832 < r < 3.85832
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 260063523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.39983 +/- 0.00819757 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.39983 @ 95%CL (1 toyMC)
median expected limit: r < 4.39983 @ 95%CL (1 toyMC)
   68% expected band : 4.39983 < r < 4.39983
   95% expected band : 4.39983 < r < 4.39983
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1478304418
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.63073 +/- 0.00801691 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.63073 @ 95%CL (1 toyMC)
median expected limit: r < 4.63073 @ 95%CL (1 toyMC)
   68% expected band : 4.63073 < r < 4.63073
   95% expected band : 4.63073 < r < 4.63073
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1523035699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08114 +/- 0.00660363 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.08114 @ 95%CL (1 toyMC)
median expected limit: r < 3.08114 @ 95%CL (1 toyMC)
   68% expected band : 3.08114 < r < 3.08114
   95% expected band : 3.08114 < r < 3.08114
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1139282323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06708 +/- 0.00617914 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.06708 @ 95%CL (1 toyMC)
median expected limit: r < 3.06708 @ 95%CL (1 toyMC)
   68% expected band : 3.06708 < r < 3.06708
   95% expected band : 3.06708 < r < 3.06708
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -208594338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.05159 +/- 0.00768111 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.05159 @ 95%CL (1 toyMC)
median expected limit: r < 4.05159 @ 95%CL (1 toyMC)
   68% expected band : 4.05159 < r < 4.05159
   95% expected band : 4.05159 < r < 4.05159
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 192776394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08594 +/- 0.00650326 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.08594 @ 95%CL (1 toyMC)
median expected limit: r < 3.08594 @ 95%CL (1 toyMC)
   68% expected band : 3.08594 < r < 3.08594
   95% expected band : 3.08594 < r < 3.08594
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1020845665.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-103236437.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1045571377.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1139282323.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1165808836.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1207460042.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1222056204.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1314293064.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1416753186.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1420827295.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1478304418.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1480126560.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-149485476.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1522392767.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1535885375.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1586300820.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1587090981.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1645958543.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1660261085.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1704905624.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1725164637.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1879833511.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1900789342.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1919407196.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1940641516.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-2036778597.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-2084946682.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-208594338.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-2127060156.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-2127204577.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-250103548.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-273655164.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-307893685.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-309140752.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-317714616.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-330616389.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-35822704.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-397739868.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-42745539.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-428061660.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-477447515.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-529006018.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-559232446.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-574829197.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-649657895.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-655921258.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-674213118.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-689889243.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-700750290.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-728317958.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.-734585178.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.-736967256.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.-80910327.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.-912493733.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.-915278679.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.-934141778.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1114515639.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1156883282.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1190304993.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1300149601.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1458404090.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1461788975.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1478103856.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1523035699.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1622783290.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1663192673.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1670299883.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1706760722.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1760737144.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1870404912.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.192776394.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1934576978.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1944788406.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1995324846.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.2009551953.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.2067532904.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.2092497709.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.210485344.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.240281674.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.247160231.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.260063523.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.330153140.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.343505443.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.359996044.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.402368399.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.460629176.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.518329402.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.548796913.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.576486369.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.623637672.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.636426852.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.651842550.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.713538880.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.813843201.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.907714043.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.914977983.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.938693966.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.957737320.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.9681905.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.968663969.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -475895618
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.85313 +/- 0.00858284 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.85313 @ 95%CL (1 toyMC)
median expected limit: r < 4.85313 @ 95%CL (1 toyMC)
   68% expected band : 4.85313 < r < 4.85313
   95% expected band : 4.85313 < r < 4.85313
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1660023272
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24952 +/- 0.00877422 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.24952 @ 95%CL (1 toyMC)
median expected limit: r < 3.24952 @ 95%CL (1 toyMC)
   68% expected band : 3.24952 < r < 3.24952
   95% expected band : 3.24952 < r < 3.24952
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -587678482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.72887 +/- 0.00847227 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.72887 @ 95%CL (1 toyMC)
median expected limit: r < 4.72887 @ 95%CL (1 toyMC)
   68% expected band : 4.72887 < r < 4.72887
   95% expected band : 4.72887 < r < 4.72887
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1354683977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.07822 +/- 0.00750675 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.07822 @ 95%CL (1 toyMC)
median expected limit: r < 6.07822 @ 95%CL (1 toyMC)
   68% expected band : 6.07822 < r < 6.07822
   95% expected band : 6.07822 < r < 6.07822
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 129571355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23151 +/- 0.00707401 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.23151 @ 95%CL (1 toyMC)
median expected limit: r < 3.23151 @ 95%CL (1 toyMC)
   68% expected band : 3.23151 < r < 3.23151
   95% expected band : 3.23151 < r < 3.23151
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -797983207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.57903 +/- 0.00782357 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.57903 @ 95%CL (1 toyMC)
median expected limit: r < 4.57903 @ 95%CL (1 toyMC)
   68% expected band : 4.57903 < r < 4.57903
   95% expected band : 4.57903 < r < 4.57903
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2008150947
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25009 +/- 0.00860731 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.25009 @ 95%CL (1 toyMC)
median expected limit: r < 3.25009 @ 95%CL (1 toyMC)
   68% expected band : 3.25009 < r < 3.25009
   95% expected band : 3.25009 < r < 3.25009
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 563149343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.95489 +/- 0.00841136 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.95489 @ 95%CL (1 toyMC)
median expected limit: r < 4.95489 @ 95%CL (1 toyMC)
   68% expected band : 4.95489 < r < 4.95489
   95% expected band : 4.95489 < r < 4.95489
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 252924705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25492 +/- 0.00750501 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.25492 @ 95%CL (1 toyMC)
median expected limit: r < 3.25492 @ 95%CL (1 toyMC)
   68% expected band : 3.25492 < r < 3.25492
   95% expected band : 3.25492 < r < 3.25492
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1114428284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22315 +/- 0.0088291 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.22315 @ 95%CL (1 toyMC)
median expected limit: r < 3.22315 @ 95%CL (1 toyMC)
   68% expected band : 3.22315 < r < 3.22315
   95% expected band : 3.22315 < r < 3.22315
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1511123900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.78271 +/- 0.00869652 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.78271 @ 95%CL (1 toyMC)
median expected limit: r < 4.78271 @ 95%CL (1 toyMC)
   68% expected band : 4.78271 < r < 4.78271
   95% expected band : 4.78271 < r < 4.78271
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1567857777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2601 +/- 0.00761961 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.2601 @ 95%CL (1 toyMC)
median expected limit: r < 3.2601 @ 95%CL (1 toyMC)
   68% expected band : 3.2601 < r < 3.2601
   95% expected band : 3.2601 < r < 3.2601
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 868040686
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2301 +/- 0.00757686 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.2301 @ 95%CL (1 toyMC)
median expected limit: r < 3.2301 @ 95%CL (1 toyMC)
   68% expected band : 3.2301 < r < 3.2301
   95% expected band : 3.2301 < r < 3.2301
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2000350016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.30859 +/- 0.00671921 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.30859 @ 95%CL (1 toyMC)
median expected limit: r < 4.30859 @ 95%CL (1 toyMC)
   68% expected band : 4.30859 < r < 4.30859
   95% expected band : 4.30859 < r < 4.30859
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -152901169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24697 +/- 0.0065842 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.24697 @ 95%CL (1 toyMC)
median expected limit: r < 3.24697 @ 95%CL (1 toyMC)
   68% expected band : 3.24697 < r < 3.24697
   95% expected band : 3.24697 < r < 3.24697
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -52502118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.193 +/- 0.00804705 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.193 @ 95%CL (1 toyMC)
median expected limit: r < 4.193 @ 95%CL (1 toyMC)
   68% expected band : 4.193 < r < 4.193
   95% expected band : 4.193 < r < 4.193
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1212353467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23386 +/- 0.00811068 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.23386 @ 95%CL (1 toyMC)
median expected limit: r < 3.23386 @ 95%CL (1 toyMC)
   68% expected band : 3.23386 < r < 3.23386
   95% expected band : 3.23386 < r < 3.23386
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1081233923
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.63447 +/- 0.00822893 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.63447 @ 95%CL (1 toyMC)
median expected limit: r < 4.63447 @ 95%CL (1 toyMC)
   68% expected band : 4.63447 < r < 4.63447
   95% expected band : 4.63447 < r < 4.63447
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1431954393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25137 +/- 0.00692312 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.25137 @ 95%CL (1 toyMC)
median expected limit: r < 3.25137 @ 95%CL (1 toyMC)
   68% expected band : 3.25137 < r < 3.25137
   95% expected band : 3.25137 < r < 3.25137
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1504282175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.21869 +/- 0.00846519 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.21869 @ 95%CL (1 toyMC)
median expected limit: r < 3.21869 @ 95%CL (1 toyMC)
   68% expected band : 3.21869 < r < 3.21869
   95% expected band : 3.21869 < r < 3.21869
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 866823880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.37498 +/- 0.00971003 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.37498 @ 95%CL (1 toyMC)
median expected limit: r < 4.37498 @ 95%CL (1 toyMC)
   68% expected band : 4.37498 < r < 4.37498
   95% expected band : 4.37498 < r < 4.37498
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -398160199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.94884 +/- 0.00782827 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.94884 @ 95%CL (1 toyMC)
median expected limit: r < 4.94884 @ 95%CL (1 toyMC)
   68% expected band : 4.94884 < r < 4.94884
   95% expected band : 4.94884 < r < 4.94884
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 687187032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25388 +/- 0.00909658 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.25388 @ 95%CL (1 toyMC)
median expected limit: r < 3.25388 @ 95%CL (1 toyMC)
   68% expected band : 3.25388 < r < 3.25388
   95% expected band : 3.25388 < r < 3.25388
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1973227618
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.3046 +/- 0.00799195 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.3046 @ 95%CL (1 toyMC)
median expected limit: r < 4.3046 @ 95%CL (1 toyMC)
   68% expected band : 4.3046 < r < 4.3046
   95% expected band : 4.3046 < r < 4.3046
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1143979356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.76078 +/- 0.00972044 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.76078 @ 95%CL (1 toyMC)
median expected limit: r < 5.76078 @ 95%CL (1 toyMC)
   68% expected band : 5.76078 < r < 5.76078
   95% expected band : 5.76078 < r < 5.76078
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 5472650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.69658 +/- 0.00858555 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.69658 @ 95%CL (1 toyMC)
median expected limit: r < 4.69658 @ 95%CL (1 toyMC)
   68% expected band : 4.69658 < r < 4.69658
   95% expected band : 4.69658 < r < 4.69658
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -345718212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25216 +/- 0.00808485 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.25216 @ 95%CL (1 toyMC)
median expected limit: r < 3.25216 @ 95%CL (1 toyMC)
   68% expected band : 3.25216 < r < 3.25216
   95% expected band : 3.25216 < r < 3.25216
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1149763387
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25993 +/- 0.00685769 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.25993 @ 95%CL (1 toyMC)
median expected limit: r < 3.25993 @ 95%CL (1 toyMC)
   68% expected band : 3.25993 < r < 3.25993
   95% expected band : 3.25993 < r < 3.25993
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1386837656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.26096 +/- 0.00732312 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.26096 @ 95%CL (1 toyMC)
median expected limit: r < 3.26096 @ 95%CL (1 toyMC)
   68% expected band : 3.26096 < r < 3.26096
   95% expected band : 3.26096 < r < 3.26096
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -524828370
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.62249 +/- 0.00728824 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.62249 @ 95%CL (1 toyMC)
median expected limit: r < 4.62249 @ 95%CL (1 toyMC)
   68% expected band : 4.62249 < r < 4.62249
   95% expected band : 4.62249 < r < 4.62249
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -431193217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25596 +/- 0.00684494 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.25596 @ 95%CL (1 toyMC)
median expected limit: r < 3.25596 @ 95%CL (1 toyMC)
   68% expected band : 3.25596 < r < 3.25596
   95% expected band : 3.25596 < r < 3.25596
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -382350382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.29692 +/- 0.00700628 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.29692 @ 95%CL (1 toyMC)
median expected limit: r < 4.29692 @ 95%CL (1 toyMC)
   68% expected band : 4.29692 < r < 4.29692
   95% expected band : 4.29692 < r < 4.29692
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -631407751
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.81063 +/- 0.00803812 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.81063 @ 95%CL (1 toyMC)
median expected limit: r < 4.81063 @ 95%CL (1 toyMC)
   68% expected band : 4.81063 < r < 4.81063
   95% expected band : 4.81063 < r < 4.81063
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 18899773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23417 +/- 0.0062779 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.23417 @ 95%CL (1 toyMC)
median expected limit: r < 3.23417 @ 95%CL (1 toyMC)
   68% expected band : 3.23417 < r < 3.23417
   95% expected band : 3.23417 < r < 3.23417
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 657640259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2496 +/- 0.00718288 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.2496 @ 95%CL (1 toyMC)
median expected limit: r < 3.2496 @ 95%CL (1 toyMC)
   68% expected band : 3.2496 < r < 3.2496
   95% expected band : 3.2496 < r < 3.2496
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -113740000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22494 +/- 0.00651289 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.22494 @ 95%CL (1 toyMC)
median expected limit: r < 3.22494 @ 95%CL (1 toyMC)
   68% expected band : 3.22494 < r < 3.22494
   95% expected band : 3.22494 < r < 3.22494
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 627748357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.9335 +/- 0.00911519 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.9335 @ 95%CL (1 toyMC)
median expected limit: r < 5.9335 @ 95%CL (1 toyMC)
   68% expected band : 5.9335 < r < 5.9335
   95% expected band : 5.9335 < r < 5.9335
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 319245358
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.26846 +/- 0.00777999 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.26846 @ 95%CL (1 toyMC)
median expected limit: r < 3.26846 @ 95%CL (1 toyMC)
   68% expected band : 3.26846 < r < 3.26846
   95% expected band : 3.26846 < r < 3.26846
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -435608101
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27085 +/- 0.00762896 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.27085 @ 95%CL (1 toyMC)
median expected limit: r < 3.27085 @ 95%CL (1 toyMC)
   68% expected band : 3.27085 < r < 3.27085
   95% expected band : 3.27085 < r < 3.27085
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 982147375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24397 +/- 0.00771669 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.24397 @ 95%CL (1 toyMC)
median expected limit: r < 3.24397 @ 95%CL (1 toyMC)
   68% expected band : 3.24397 < r < 3.24397
   95% expected band : 3.24397 < r < 3.24397
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1424450818
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2461 +/- 0.00715428 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.2461 @ 95%CL (1 toyMC)
median expected limit: r < 3.2461 @ 95%CL (1 toyMC)
   68% expected band : 3.2461 < r < 3.2461
   95% expected band : 3.2461 < r < 3.2461
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1812274015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.30505 +/- 0.00781554 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.30505 @ 95%CL (1 toyMC)
median expected limit: r < 4.30505 @ 95%CL (1 toyMC)
   68% expected band : 4.30505 < r < 4.30505
   95% expected band : 4.30505 < r < 4.30505
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 614240571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2779 +/- 0.00699898 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.2779 @ 95%CL (1 toyMC)
median expected limit: r < 3.2779 @ 95%CL (1 toyMC)
   68% expected band : 3.2779 < r < 3.2779
   95% expected band : 3.2779 < r < 3.2779
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -315748537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24611 +/- 0.00758526 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.24611 @ 95%CL (1 toyMC)
median expected limit: r < 3.24611 @ 95%CL (1 toyMC)
   68% expected band : 3.24611 < r < 3.24611
   95% expected band : 3.24611 < r < 3.24611
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1257182584
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.30274 +/- 0.00828343 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.30274 @ 95%CL (1 toyMC)
median expected limit: r < 4.30274 @ 95%CL (1 toyMC)
   68% expected band : 4.30274 < r < 4.30274
   95% expected band : 4.30274 < r < 4.30274
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -379038829
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24314 +/- 0.00898302 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.24314 @ 95%CL (1 toyMC)
median expected limit: r < 3.24314 @ 95%CL (1 toyMC)
   68% expected band : 3.24314 < r < 3.24314
   95% expected band : 3.24314 < r < 3.24314
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -146777113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24751 +/- 0.00750243 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.24751 @ 95%CL (1 toyMC)
median expected limit: r < 3.24751 @ 95%CL (1 toyMC)
   68% expected band : 3.24751 < r < 3.24751
   95% expected band : 3.24751 < r < 3.24751
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 181411470
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22769 +/- 0.00759514 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.22769 @ 95%CL (1 toyMC)
median expected limit: r < 3.22769 @ 95%CL (1 toyMC)
   68% expected band : 3.22769 < r < 3.22769
   95% expected band : 3.22769 < r < 3.22769
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1704019378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25975 +/- 0.00594447 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.25975 @ 95%CL (1 toyMC)
median expected limit: r < 3.25975 @ 95%CL (1 toyMC)
   68% expected band : 3.25975 < r < 3.25975
   95% expected band : 3.25975 < r < 3.25975
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -910600619
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.3402 +/- 0.0113527 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.3402 @ 95%CL (1 toyMC)
median expected limit: r < 6.3402 @ 95%CL (1 toyMC)
   68% expected band : 6.3402 < r < 6.3402
   95% expected band : 6.3402 < r < 6.3402
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1372847484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27323 +/- 0.00657775 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.27323 @ 95%CL (1 toyMC)
median expected limit: r < 3.27323 @ 95%CL (1 toyMC)
   68% expected band : 3.27323 < r < 3.27323
   95% expected band : 3.27323 < r < 3.27323
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1806426299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18057 +/- 0.00796453 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.18057 @ 95%CL (1 toyMC)
median expected limit: r < 4.18057 @ 95%CL (1 toyMC)
   68% expected band : 4.18057 < r < 4.18057
   95% expected band : 4.18057 < r < 4.18057
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -807143598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27168 +/- 0.00772838 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.27168 @ 95%CL (1 toyMC)
median expected limit: r < 3.27168 @ 95%CL (1 toyMC)
   68% expected band : 3.27168 < r < 3.27168
   95% expected band : 3.27168 < r < 3.27168
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 611700255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2412 +/- 0.00701388 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.2412 @ 95%CL (1 toyMC)
median expected limit: r < 3.2412 @ 95%CL (1 toyMC)
   68% expected band : 3.2412 < r < 3.2412
   95% expected band : 3.2412 < r < 3.2412
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -322898850
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24626 +/- 0.00853034 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.24626 @ 95%CL (1 toyMC)
median expected limit: r < 3.24626 @ 95%CL (1 toyMC)
   68% expected band : 3.24626 < r < 3.24626
   95% expected band : 3.24626 < r < 3.24626
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -899246657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.26268 +/- 0.00770904 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.26268 @ 95%CL (1 toyMC)
median expected limit: r < 3.26268 @ 95%CL (1 toyMC)
   68% expected band : 3.26268 < r < 3.26268
   95% expected band : 3.26268 < r < 3.26268
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1486474844
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.20049 +/- 0.00792708 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.20049 @ 95%CL (1 toyMC)
median expected limit: r < 4.20049 @ 95%CL (1 toyMC)
   68% expected band : 4.20049 < r < 4.20049
   95% expected band : 4.20049 < r < 4.20049
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -499906723
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.28676 +/- 0.00844613 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.28676 @ 95%CL (1 toyMC)
median expected limit: r < 3.28676 @ 95%CL (1 toyMC)
   68% expected band : 3.28676 < r < 3.28676
   95% expected band : 3.28676 < r < 3.28676
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 607568936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27006 +/- 0.00632228 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.27006 @ 95%CL (1 toyMC)
median expected limit: r < 3.27006 @ 95%CL (1 toyMC)
   68% expected band : 3.27006 < r < 3.27006
   95% expected band : 3.27006 < r < 3.27006
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -651466553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23574 +/- 0.00662139 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.23574 @ 95%CL (1 toyMC)
median expected limit: r < 3.23574 @ 95%CL (1 toyMC)
   68% expected band : 3.23574 < r < 3.23574
   95% expected band : 3.23574 < r < 3.23574
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1920119362
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23182 +/- 0.00694504 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.23182 @ 95%CL (1 toyMC)
median expected limit: r < 3.23182 @ 95%CL (1 toyMC)
   68% expected band : 3.23182 < r < 3.23182
   95% expected band : 3.23182 < r < 3.23182
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 269053597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23924 +/- 0.00841016 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.23924 @ 95%CL (1 toyMC)
median expected limit: r < 3.23924 @ 95%CL (1 toyMC)
   68% expected band : 3.23924 < r < 3.23924
   95% expected band : 3.23924 < r < 3.23924
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2107107539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22344 +/- 0.00711394 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.22344 @ 95%CL (1 toyMC)
median expected limit: r < 3.22344 @ 95%CL (1 toyMC)
   68% expected band : 3.22344 < r < 3.22344
   95% expected band : 3.22344 < r < 3.22344
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 516417576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2415 +/- 0.00638048 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.2415 @ 95%CL (1 toyMC)
median expected limit: r < 3.2415 @ 95%CL (1 toyMC)
   68% expected band : 3.2415 < r < 3.2415
   95% expected band : 3.2415 < r < 3.2415
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1637837497
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22828 +/- 0.00768438 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.22828 @ 95%CL (1 toyMC)
median expected limit: r < 3.22828 @ 95%CL (1 toyMC)
   68% expected band : 3.22828 < r < 3.22828
   95% expected band : 3.22828 < r < 3.22828
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1195677128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24064 +/- 0.00833406 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.24064 @ 95%CL (1 toyMC)
median expected limit: r < 3.24064 @ 95%CL (1 toyMC)
   68% expected band : 3.24064 < r < 3.24064
   95% expected band : 3.24064 < r < 3.24064
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -96163787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24281 +/- 0.00730002 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.24281 @ 95%CL (1 toyMC)
median expected limit: r < 3.24281 @ 95%CL (1 toyMC)
   68% expected band : 3.24281 < r < 3.24281
   95% expected band : 3.24281 < r < 3.24281
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1844710045
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.69655 +/- 0.00996045 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.69655 @ 95%CL (1 toyMC)
median expected limit: r < 4.69655 @ 95%CL (1 toyMC)
   68% expected band : 4.69655 < r < 4.69655
   95% expected band : 4.69655 < r < 4.69655
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 151832958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24588 +/- 0.00826898 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.24588 @ 95%CL (1 toyMC)
median expected limit: r < 3.24588 @ 95%CL (1 toyMC)
   68% expected band : 3.24588 < r < 3.24588
   95% expected band : 3.24588 < r < 3.24588
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 37833979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25979 +/- 0.00776308 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.25979 @ 95%CL (1 toyMC)
median expected limit: r < 3.25979 @ 95%CL (1 toyMC)
   68% expected band : 3.25979 < r < 3.25979
   95% expected band : 3.25979 < r < 3.25979
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1866058366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.28549 +/- 0.00877618 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.28549 @ 95%CL (1 toyMC)
median expected limit: r < 4.28549 @ 95%CL (1 toyMC)
   68% expected band : 4.28549 < r < 4.28549
   95% expected band : 4.28549 < r < 4.28549
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -530020579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.61164 +/- 0.00801934 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.61164 @ 95%CL (1 toyMC)
median expected limit: r < 4.61164 @ 95%CL (1 toyMC)
   68% expected band : 4.61164 < r < 4.61164
   95% expected band : 4.61164 < r < 4.61164
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1073896764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.98578 +/- 0.00983713 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.98578 @ 95%CL (1 toyMC)
median expected limit: r < 4.98578 @ 95%CL (1 toyMC)
   68% expected band : 4.98578 < r < 4.98578
   95% expected band : 4.98578 < r < 4.98578
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -610381806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24159 +/- 0.00748611 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.24159 @ 95%CL (1 toyMC)
median expected limit: r < 3.24159 @ 95%CL (1 toyMC)
   68% expected band : 3.24159 < r < 3.24159
   95% expected band : 3.24159 < r < 3.24159
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -883318365
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24878 +/- 0.0074166 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.24878 @ 95%CL (1 toyMC)
median expected limit: r < 3.24878 @ 95%CL (1 toyMC)
   68% expected band : 3.24878 < r < 3.24878
   95% expected band : 3.24878 < r < 3.24878
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2094502837
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24904 +/- 0.00700558 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.24904 @ 95%CL (1 toyMC)
median expected limit: r < 3.24904 @ 95%CL (1 toyMC)
   68% expected band : 3.24904 < r < 3.24904
   95% expected band : 3.24904 < r < 3.24904
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1059373681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.28378 +/- 0.00823068 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.28378 @ 95%CL (1 toyMC)
median expected limit: r < 4.28378 @ 95%CL (1 toyMC)
   68% expected band : 4.28378 < r < 4.28378
   95% expected band : 4.28378 < r < 4.28378
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1104147606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24442 +/- 0.0076392 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.24442 @ 95%CL (1 toyMC)
median expected limit: r < 3.24442 @ 95%CL (1 toyMC)
   68% expected band : 3.24442 < r < 3.24442
   95% expected band : 3.24442 < r < 3.24442
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -21396077
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.19096 +/- 0.00926396 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.19096 @ 95%CL (1 toyMC)
median expected limit: r < 4.19096 @ 95%CL (1 toyMC)
   68% expected band : 4.19096 < r < 4.19096
   95% expected band : 4.19096 < r < 4.19096
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -985114181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.237 +/- 0.00775161 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.237 @ 95%CL (1 toyMC)
median expected limit: r < 3.237 @ 95%CL (1 toyMC)
   68% expected band : 3.237 < r < 3.237
   95% expected band : 3.237 < r < 3.237
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1884547331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.62729 +/- 0.00817903 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.62729 @ 95%CL (1 toyMC)
median expected limit: r < 4.62729 @ 95%CL (1 toyMC)
   68% expected band : 4.62729 < r < 4.62729
   95% expected band : 4.62729 < r < 4.62729
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 441155321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.35631 +/- 0.00806616 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.35631 @ 95%CL (1 toyMC)
median expected limit: r < 4.35631 @ 95%CL (1 toyMC)
   68% expected band : 4.35631 < r < 4.35631
   95% expected band : 4.35631 < r < 4.35631
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -526705460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22991 +/- 0.00714471 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.22991 @ 95%CL (1 toyMC)
median expected limit: r < 3.22991 @ 95%CL (1 toyMC)
   68% expected band : 3.22991 < r < 3.22991
   95% expected band : 3.22991 < r < 3.22991
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 998647864
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24191 +/- 0.00644782 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.24191 @ 95%CL (1 toyMC)
median expected limit: r < 3.24191 @ 95%CL (1 toyMC)
   68% expected band : 3.24191 < r < 3.24191
   95% expected band : 3.24191 < r < 3.24191
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1605101450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.28126 +/- 0.0080166 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.28126 @ 95%CL (1 toyMC)
median expected limit: r < 3.28126 @ 95%CL (1 toyMC)
   68% expected band : 3.28126 < r < 3.28126
   95% expected band : 3.28126 < r < 3.28126
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -273541985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.62845 +/- 0.00893961 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.62845 @ 95%CL (1 toyMC)
median expected limit: r < 4.62845 @ 95%CL (1 toyMC)
   68% expected band : 4.62845 < r < 4.62845
   95% expected band : 4.62845 < r < 4.62845
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1140232003
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24656 +/- 0.00706028 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.24656 @ 95%CL (1 toyMC)
median expected limit: r < 3.24656 @ 95%CL (1 toyMC)
   68% expected band : 3.24656 < r < 3.24656
   95% expected band : 3.24656 < r < 3.24656
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -333042502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.07019 +/- 0.0109732 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.07019 @ 95%CL (1 toyMC)
median expected limit: r < 6.07019 @ 95%CL (1 toyMC)
   68% expected band : 6.07019 < r < 6.07019
   95% expected band : 6.07019 < r < 6.07019
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -597440092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25639 +/- 0.00712212 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.25639 @ 95%CL (1 toyMC)
median expected limit: r < 3.25639 @ 95%CL (1 toyMC)
   68% expected band : 3.25639 < r < 3.25639
   95% expected band : 3.25639 < r < 3.25639
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1965132406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22493 +/- 0.00825017 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.22493 @ 95%CL (1 toyMC)
median expected limit: r < 3.22493 @ 95%CL (1 toyMC)
   68% expected band : 3.22493 < r < 3.22493
   95% expected band : 3.22493 < r < 3.22493
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -647671179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24259 +/- 0.00665882 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.24259 @ 95%CL (1 toyMC)
median expected limit: r < 3.24259 @ 95%CL (1 toyMC)
   68% expected band : 3.24259 < r < 3.24259
   95% expected band : 3.24259 < r < 3.24259
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 391261791
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22906 +/- 0.00707964 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.22906 @ 95%CL (1 toyMC)
median expected limit: r < 3.22906 @ 95%CL (1 toyMC)
   68% expected band : 3.22906 < r < 3.22906
   95% expected band : 3.22906 < r < 3.22906
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1823611531
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2571 +/- 0.00793895 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.2571 @ 95%CL (1 toyMC)
median expected limit: r < 3.2571 @ 95%CL (1 toyMC)
   68% expected band : 3.2571 < r < 3.2571
   95% expected band : 3.2571 < r < 3.2571
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -708370243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.61534 +/- 0.00770275 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.61534 @ 95%CL (1 toyMC)
median expected limit: r < 4.61534 @ 95%CL (1 toyMC)
   68% expected band : 4.61534 < r < 4.61534
   95% expected band : 4.61534 < r < 4.61534
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 863651172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.6546 +/- 0.00885463 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.6546 @ 95%CL (1 toyMC)
median expected limit: r < 4.6546 @ 95%CL (1 toyMC)
   68% expected band : 4.6546 < r < 4.6546
   95% expected band : 4.6546 < r < 4.6546
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -908023009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.16001 +/- 0.00880266 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.16001 @ 95%CL (1 toyMC)
median expected limit: r < 5.16001 @ 95%CL (1 toyMC)
   68% expected band : 5.16001 < r < 5.16001
   95% expected band : 5.16001 < r < 5.16001
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1350907575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.40317 +/- 0.00775831 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.40317 @ 95%CL (1 toyMC)
median expected limit: r < 4.40317 @ 95%CL (1 toyMC)
   68% expected band : 4.40317 < r < 4.40317
   95% expected band : 4.40317 < r < 4.40317
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -249719159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.0362 +/- 0.00963751 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.0362 @ 95%CL (1 toyMC)
median expected limit: r < 5.0362 @ 95%CL (1 toyMC)
   68% expected band : 5.0362 < r < 5.0362
   95% expected band : 5.0362 < r < 5.0362
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -799554293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.81466 +/- 0.00823615 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.81466 @ 95%CL (1 toyMC)
median expected limit: r < 5.81466 @ 95%CL (1 toyMC)
   68% expected band : 5.81466 < r < 5.81466
   95% expected band : 5.81466 < r < 5.81466
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -800264252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.74779 +/- 0.00786035 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.74779 @ 95%CL (1 toyMC)
median expected limit: r < 4.74779 @ 95%CL (1 toyMC)
   68% expected band : 4.74779 < r < 4.74779
   95% expected band : 4.74779 < r < 4.74779
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1073896764.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1081233923.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1114428284.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-113740000.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1140232003.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1149763387.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1195677128.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1350907575.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1354683977.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1431954393.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-146777113.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1486474844.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1504282175.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1511123900.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-152901169.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1605101450.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1637837497.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1704019378.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1806426299.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1812274015.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1823611531.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1866058366.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1920119362.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-2008150947.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-21396077.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-249719159.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-273541985.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-315748537.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-322898850.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-333042502.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-345718212.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-379038829.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-382350382.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-398160199.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-431193217.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-435608101.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-475895618.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-499906723.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-524828370.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-52502118.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-526705460.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-530020579.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-587678482.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-597440092.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-610381806.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-631407751.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-647671179.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-651466553.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-708370243.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-797983207.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.-799554293.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.-800264252.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.-807143598.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.-883318365.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.-899246657.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.-908023009.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.-910600619.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.-96163787.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.-985114181.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1059373681.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1104147606.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1143979356.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1212353467.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1257182584.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.129571355.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1372847484.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1386837656.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1424450818.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.151832958.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1567857777.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1660023272.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.181411470.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1844710045.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1884547331.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.18899773.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.1965132406.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.1973227618.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.2000350016.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.2094502837.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.2107107539.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.252924705.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.269053597.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.319245358.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.37833979.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.391261791.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.441155321.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.516417576.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.5472650.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.563149343.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.607568936.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.611700255.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.614240571.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.627748357.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.657640259.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.687187032.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.863651172.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.866823880.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.868040686.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.982147375.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.998647864.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1397531855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.43705 +/- 0.00946287 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.43705 @ 95%CL (1 toyMC)
median expected limit: r < 3.43705 @ 95%CL (1 toyMC)
   68% expected band : 3.43705 < r < 3.43705
   95% expected band : 3.43705 < r < 3.43705
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1960883615
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45752 +/- 0.00867691 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.45752 @ 95%CL (1 toyMC)
median expected limit: r < 3.45752 @ 95%CL (1 toyMC)
   68% expected band : 3.45752 < r < 3.45752
   95% expected band : 3.45752 < r < 3.45752
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 319854116
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46349 +/- 0.00781814 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.46349 @ 95%CL (1 toyMC)
median expected limit: r < 3.46349 @ 95%CL (1 toyMC)
   68% expected band : 3.46349 < r < 3.46349
   95% expected band : 3.46349 < r < 3.46349
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 493700954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45511 +/- 0.00812575 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.45511 @ 95%CL (1 toyMC)
median expected limit: r < 3.45511 @ 95%CL (1 toyMC)
   68% expected band : 3.45511 < r < 3.45511
   95% expected band : 3.45511 < r < 3.45511
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1447085420
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.47495 +/- 0.00893988 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.47495 @ 95%CL (1 toyMC)
median expected limit: r < 3.47495 @ 95%CL (1 toyMC)
   68% expected band : 3.47495 < r < 3.47495
   95% expected band : 3.47495 < r < 3.47495
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -569148792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44386 +/- 0.00798859 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.44386 @ 95%CL (1 toyMC)
median expected limit: r < 3.44386 @ 95%CL (1 toyMC)
   68% expected band : 3.44386 < r < 3.44386
   95% expected band : 3.44386 < r < 3.44386
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1280559674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.47124 +/- 0.00752007 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.47124 @ 95%CL (1 toyMC)
median expected limit: r < 3.47124 @ 95%CL (1 toyMC)
   68% expected band : 3.47124 < r < 3.47124
   95% expected band : 3.47124 < r < 3.47124
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2037211572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44193 +/- 0.00708932 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.44193 @ 95%CL (1 toyMC)
median expected limit: r < 3.44193 @ 95%CL (1 toyMC)
   68% expected band : 3.44193 < r < 3.44193
   95% expected band : 3.44193 < r < 3.44193
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2006913517
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.76569 +/- 0.00842221 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.76569 @ 95%CL (1 toyMC)
median expected limit: r < 4.76569 @ 95%CL (1 toyMC)
   68% expected band : 4.76569 < r < 4.76569
   95% expected band : 4.76569 < r < 4.76569
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1520444213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.43438 +/- 0.00822953 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.43438 @ 95%CL (1 toyMC)
median expected limit: r < 3.43438 @ 95%CL (1 toyMC)
   68% expected band : 3.43438 < r < 3.43438
   95% expected band : 3.43438 < r < 3.43438
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 104449673
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.47004 +/- 0.00848282 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.47004 @ 95%CL (1 toyMC)
median expected limit: r < 3.47004 @ 95%CL (1 toyMC)
   68% expected band : 3.47004 < r < 3.47004
   95% expected band : 3.47004 < r < 3.47004
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1720462035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.447 +/- 0.00732642 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.447 @ 95%CL (1 toyMC)
median expected limit: r < 3.447 @ 95%CL (1 toyMC)
   68% expected band : 3.447 < r < 3.447
   95% expected band : 3.447 < r < 3.447
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 326571093
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.94395 +/- 0.00924237 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.94395 @ 95%CL (1 toyMC)
median expected limit: r < 4.94395 @ 95%CL (1 toyMC)
   68% expected band : 4.94395 < r < 4.94395
   95% expected band : 4.94395 < r < 4.94395
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2098711154
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44464 +/- 0.00698759 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.44464 @ 95%CL (1 toyMC)
median expected limit: r < 3.44464 @ 95%CL (1 toyMC)
   68% expected band : 3.44464 < r < 3.44464
   95% expected band : 3.44464 < r < 3.44464
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 321898840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.84642 +/- 0.00944744 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.84642 @ 95%CL (1 toyMC)
median expected limit: r < 6.84642 @ 95%CL (1 toyMC)
   68% expected band : 6.84642 < r < 6.84642
   95% expected band : 6.84642 < r < 6.84642
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1943515162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44609 +/- 0.00891199 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.44609 @ 95%CL (1 toyMC)
median expected limit: r < 3.44609 @ 95%CL (1 toyMC)
   68% expected band : 3.44609 < r < 3.44609
   95% expected band : 3.44609 < r < 3.44609
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -534222805
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.80327 +/- 0.00827938 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.80327 @ 95%CL (1 toyMC)
median expected limit: r < 4.80327 @ 95%CL (1 toyMC)
   68% expected band : 4.80327 < r < 4.80327
   95% expected band : 4.80327 < r < 4.80327
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1532994641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46123 +/- 0.00712723 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.46123 @ 95%CL (1 toyMC)
median expected limit: r < 3.46123 @ 95%CL (1 toyMC)
   68% expected band : 3.46123 < r < 3.46123
   95% expected band : 3.46123 < r < 3.46123
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1699821241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45841 +/- 0.00888282 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.45841 @ 95%CL (1 toyMC)
median expected limit: r < 3.45841 @ 95%CL (1 toyMC)
   68% expected band : 3.45841 < r < 3.45841
   95% expected band : 3.45841 < r < 3.45841
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -717220487
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46878 +/- 0.00728224 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.46878 @ 95%CL (1 toyMC)
median expected limit: r < 3.46878 @ 95%CL (1 toyMC)
   68% expected band : 3.46878 < r < 3.46878
   95% expected band : 3.46878 < r < 3.46878
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1188272889
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.72323 +/- 0.00890201 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.72323 @ 95%CL (1 toyMC)
median expected limit: r < 4.72323 @ 95%CL (1 toyMC)
   68% expected band : 4.72323 < r < 4.72323
   95% expected band : 4.72323 < r < 4.72323
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -806012234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.94975 +/- 0.0110254 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.94975 @ 95%CL (1 toyMC)
median expected limit: r < 6.94975 @ 95%CL (1 toyMC)
   68% expected band : 6.94975 < r < 6.94975
   95% expected band : 6.94975 < r < 6.94975
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -315404656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.80143 +/- 0.0102003 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.80143 @ 95%CL (1 toyMC)
median expected limit: r < 4.80143 @ 95%CL (1 toyMC)
   68% expected band : 4.80143 < r < 4.80143
   95% expected band : 4.80143 < r < 4.80143
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 554633178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44662 +/- 0.00935648 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.44662 @ 95%CL (1 toyMC)
median expected limit: r < 3.44662 @ 95%CL (1 toyMC)
   68% expected band : 3.44662 < r < 3.44662
   95% expected band : 3.44662 < r < 3.44662
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2119531877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.47683 +/- 0.00839609 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.47683 @ 95%CL (1 toyMC)
median expected limit: r < 3.47683 @ 95%CL (1 toyMC)
   68% expected band : 3.47683 < r < 3.47683
   95% expected band : 3.47683 < r < 3.47683
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1952662313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.48814 +/- 0.00691661 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.48814 @ 95%CL (1 toyMC)
median expected limit: r < 3.48814 @ 95%CL (1 toyMC)
   68% expected band : 3.48814 < r < 3.48814
   95% expected band : 3.48814 < r < 3.48814
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1576627888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.7127 +/- 0.01028 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.7127 @ 95%CL (1 toyMC)
median expected limit: r < 4.7127 @ 95%CL (1 toyMC)
   68% expected band : 4.7127 < r < 4.7127
   95% expected band : 4.7127 < r < 4.7127
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 103082884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4386 +/- 0.00926177 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.4386 @ 95%CL (1 toyMC)
median expected limit: r < 3.4386 @ 95%CL (1 toyMC)
   68% expected band : 3.4386 < r < 3.4386
   95% expected band : 3.4386 < r < 3.4386
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -526068904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44062 +/- 0.00821586 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.44062 @ 95%CL (1 toyMC)
median expected limit: r < 3.44062 @ 95%CL (1 toyMC)
   68% expected band : 3.44062 < r < 3.44062
   95% expected band : 3.44062 < r < 3.44062
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1023425656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45744 +/- 0.00912078 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.45744 @ 95%CL (1 toyMC)
median expected limit: r < 3.45744 @ 95%CL (1 toyMC)
   68% expected band : 3.45744 < r < 3.45744
   95% expected band : 3.45744 < r < 3.45744
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1977841669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.16724 +/- 0.00907303 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.16724 @ 95%CL (1 toyMC)
median expected limit: r < 5.16724 @ 95%CL (1 toyMC)
   68% expected band : 5.16724 < r < 5.16724
   95% expected band : 5.16724 < r < 5.16724
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1994321263
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44904 +/- 0.00715969 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.44904 @ 95%CL (1 toyMC)
median expected limit: r < 3.44904 @ 95%CL (1 toyMC)
   68% expected band : 3.44904 < r < 3.44904
   95% expected band : 3.44904 < r < 3.44904
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -144541017
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45719 +/- 0.0076288 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.45719 @ 95%CL (1 toyMC)
median expected limit: r < 3.45719 @ 95%CL (1 toyMC)
   68% expected band : 3.45719 < r < 3.45719
   95% expected band : 3.45719 < r < 3.45719
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1503788786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.17349 +/- 0.0095048 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.17349 @ 95%CL (1 toyMC)
median expected limit: r < 5.17349 @ 95%CL (1 toyMC)
   68% expected band : 5.17349 < r < 5.17349
   95% expected band : 5.17349 < r < 5.17349
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -742906719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.01322 +/- 0.00922141 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.01322 @ 95%CL (1 toyMC)
median expected limit: r < 5.01322 @ 95%CL (1 toyMC)
   68% expected band : 5.01322 < r < 5.01322
   95% expected band : 5.01322 < r < 5.01322
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1195564731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45583 +/- 0.00801926 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.45583 @ 95%CL (1 toyMC)
median expected limit: r < 3.45583 @ 95%CL (1 toyMC)
   68% expected band : 3.45583 < r < 3.45583
   95% expected band : 3.45583 < r < 3.45583
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 771125057
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.68043 +/- 0.00897267 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.68043 @ 95%CL (1 toyMC)
median expected limit: r < 4.68043 @ 95%CL (1 toyMC)
   68% expected band : 4.68043 < r < 4.68043
   95% expected band : 4.68043 < r < 4.68043
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1051395625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.27819 +/- 0.00956512 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.27819 @ 95%CL (1 toyMC)
median expected limit: r < 5.27819 @ 95%CL (1 toyMC)
   68% expected band : 5.27819 < r < 5.27819
   95% expected band : 5.27819 < r < 5.27819
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -89952950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.01424 +/- 0.00933083 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 5.01424 @ 95%CL (1 toyMC)
median expected limit: r < 5.01424 @ 95%CL (1 toyMC)
   68% expected band : 5.01424 < r < 5.01424
   95% expected band : 5.01424 < r < 5.01424
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -169574707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44428 +/- 0.00630261 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.44428 @ 95%CL (1 toyMC)
median expected limit: r < 3.44428 @ 95%CL (1 toyMC)
   68% expected band : 3.44428 < r < 3.44428
   95% expected band : 3.44428 < r < 3.44428
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1988836643
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45334 +/- 0.00778073 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.45334 @ 95%CL (1 toyMC)
median expected limit: r < 3.45334 @ 95%CL (1 toyMC)
   68% expected band : 3.45334 < r < 3.45334
   95% expected band : 3.45334 < r < 3.45334
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1775383706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46109 +/- 0.00721327 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.46109 @ 95%CL (1 toyMC)
median expected limit: r < 3.46109 @ 95%CL (1 toyMC)
   68% expected band : 3.46109 < r < 3.46109
   95% expected band : 3.46109 < r < 3.46109
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 936184017
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.47649 +/- 0.00650397 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.47649 @ 95%CL (1 toyMC)
median expected limit: r < 3.47649 @ 95%CL (1 toyMC)
   68% expected band : 3.47649 < r < 3.47649
   95% expected band : 3.47649 < r < 3.47649
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 317456886
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46837 +/- 0.00972161 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.46837 @ 95%CL (1 toyMC)
median expected limit: r < 3.46837 @ 95%CL (1 toyMC)
   68% expected band : 3.46837 < r < 3.46837
   95% expected band : 3.46837 < r < 3.46837
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -419240948
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.48654 +/- 0.00867946 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.48654 @ 95%CL (1 toyMC)
median expected limit: r < 3.48654 @ 95%CL (1 toyMC)
   68% expected band : 3.48654 < r < 3.48654
   95% expected band : 3.48654 < r < 3.48654
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2017987426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.19196 +/- 0.00870345 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.19196 @ 95%CL (1 toyMC)
median expected limit: r < 5.19196 @ 95%CL (1 toyMC)
   68% expected band : 5.19196 < r < 5.19196
   95% expected band : 5.19196 < r < 5.19196
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1079561647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.55167 +/- 0.00807524 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.55167 @ 95%CL (1 toyMC)
median expected limit: r < 4.55167 @ 95%CL (1 toyMC)
   68% expected band : 4.55167 < r < 4.55167
   95% expected band : 4.55167 < r < 4.55167
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -743023832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.92014 +/- 0.00869093 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.92014 @ 95%CL (1 toyMC)
median expected limit: r < 4.92014 @ 95%CL (1 toyMC)
   68% expected band : 4.92014 < r < 4.92014
   95% expected band : 4.92014 < r < 4.92014
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1482264446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.56515 +/- 0.00863199 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.56515 @ 95%CL (1 toyMC)
median expected limit: r < 4.56515 @ 95%CL (1 toyMC)
   68% expected band : 4.56515 < r < 4.56515
   95% expected band : 4.56515 < r < 4.56515
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -931482880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45239 +/- 0.00728077 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.45239 @ 95%CL (1 toyMC)
median expected limit: r < 3.45239 @ 95%CL (1 toyMC)
   68% expected band : 3.45239 < r < 3.45239
   95% expected band : 3.45239 < r < 3.45239
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 123364845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.57479 +/- 0.0102191 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.57479 @ 95%CL (1 toyMC)
median expected limit: r < 4.57479 @ 95%CL (1 toyMC)
   68% expected band : 4.57479 < r < 4.57479
   95% expected band : 4.57479 < r < 4.57479
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1335153469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4632 +/- 0.00736852 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.4632 @ 95%CL (1 toyMC)
median expected limit: r < 3.4632 @ 95%CL (1 toyMC)
   68% expected band : 3.4632 < r < 3.4632
   95% expected band : 3.4632 < r < 3.4632
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1559921986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45818 +/- 0.00850141 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.45818 @ 95%CL (1 toyMC)
median expected limit: r < 3.45818 @ 95%CL (1 toyMC)
   68% expected band : 3.45818 < r < 3.45818
   95% expected band : 3.45818 < r < 3.45818
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1272267150
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.43323 +/- 0.00733742 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.43323 @ 95%CL (1 toyMC)
median expected limit: r < 3.43323 @ 95%CL (1 toyMC)
   68% expected band : 3.43323 < r < 3.43323
   95% expected band : 3.43323 < r < 3.43323
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2039411763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45958 +/- 0.00913789 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.45958 @ 95%CL (1 toyMC)
median expected limit: r < 3.45958 @ 95%CL (1 toyMC)
   68% expected band : 3.45958 < r < 3.45958
   95% expected band : 3.45958 < r < 3.45958
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1422533454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.23564 +/- 0.00967625 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.23564 @ 95%CL (1 toyMC)
median expected limit: r < 5.23564 @ 95%CL (1 toyMC)
   68% expected band : 5.23564 < r < 5.23564
   95% expected band : 5.23564 < r < 5.23564
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1604971253
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4526 +/- 0.0067446 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.4526 @ 95%CL (1 toyMC)
median expected limit: r < 3.4526 @ 95%CL (1 toyMC)
   68% expected band : 3.4526 < r < 3.4526
   95% expected band : 3.4526 < r < 3.4526
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -442259363
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.12239 +/- 0.0118087 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.12239 @ 95%CL (1 toyMC)
median expected limit: r < 6.12239 @ 95%CL (1 toyMC)
   68% expected band : 6.12239 < r < 6.12239
   95% expected band : 6.12239 < r < 6.12239
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1553936585
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45938 +/- 0.00846321 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.45938 @ 95%CL (1 toyMC)
median expected limit: r < 3.45938 @ 95%CL (1 toyMC)
   68% expected band : 3.45938 < r < 3.45938
   95% expected band : 3.45938 < r < 3.45938
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -951642337
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46082 +/- 0.00919593 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.46082 @ 95%CL (1 toyMC)
median expected limit: r < 3.46082 @ 95%CL (1 toyMC)
   68% expected band : 3.46082 < r < 3.46082
   95% expected band : 3.46082 < r < 3.46082
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -155543364
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.48468 +/- 0.00876868 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.48468 @ 95%CL (1 toyMC)
median expected limit: r < 3.48468 @ 95%CL (1 toyMC)
   68% expected band : 3.48468 < r < 3.48468
   95% expected band : 3.48468 < r < 3.48468
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1995540857
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44714 +/- 0.00807268 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.44714 @ 95%CL (1 toyMC)
median expected limit: r < 3.44714 @ 95%CL (1 toyMC)
   68% expected band : 3.44714 < r < 3.44714
   95% expected band : 3.44714 < r < 3.44714
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 525918757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.43137 +/- 0.00894316 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.43137 @ 95%CL (1 toyMC)
median expected limit: r < 3.43137 @ 95%CL (1 toyMC)
   68% expected band : 3.43137 < r < 3.43137
   95% expected band : 3.43137 < r < 3.43137
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -92613698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46283 +/- 0.00707466 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.46283 @ 95%CL (1 toyMC)
median expected limit: r < 3.46283 @ 95%CL (1 toyMC)
   68% expected band : 3.46283 < r < 3.46283
   95% expected band : 3.46283 < r < 3.46283
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -126478650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.60104 +/- 0.0104238 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.60104 @ 95%CL (1 toyMC)
median expected limit: r < 4.60104 @ 95%CL (1 toyMC)
   68% expected band : 4.60104 < r < 4.60104
   95% expected band : 4.60104 < r < 4.60104
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -90929625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.53436 +/- 0.00971941 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.53436 @ 95%CL (1 toyMC)
median expected limit: r < 6.53436 @ 95%CL (1 toyMC)
   68% expected band : 6.53436 < r < 6.53436
   95% expected band : 6.53436 < r < 6.53436
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1446070702
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44716 +/- 0.00622886 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.44716 @ 95%CL (1 toyMC)
median expected limit: r < 3.44716 @ 95%CL (1 toyMC)
   68% expected band : 3.44716 < r < 3.44716
   95% expected band : 3.44716 < r < 3.44716
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 259350882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44058 +/- 0.00670796 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.44058 @ 95%CL (1 toyMC)
median expected limit: r < 3.44058 @ 95%CL (1 toyMC)
   68% expected band : 3.44058 < r < 3.44058
   95% expected band : 3.44058 < r < 3.44058
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1193470466
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.47092 +/- 0.00848905 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.47092 @ 95%CL (1 toyMC)
median expected limit: r < 3.47092 @ 95%CL (1 toyMC)
   68% expected band : 3.47092 < r < 3.47092
   95% expected band : 3.47092 < r < 3.47092
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1037276728
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.68881 +/- 0.0109624 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.68881 @ 95%CL (1 toyMC)
median expected limit: r < 4.68881 @ 95%CL (1 toyMC)
   68% expected band : 4.68881 < r < 4.68881
   95% expected band : 4.68881 < r < 4.68881
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1905443712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.08399 +/- 0.0097908 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.08399 @ 95%CL (1 toyMC)
median expected limit: r < 5.08399 @ 95%CL (1 toyMC)
   68% expected band : 5.08399 < r < 5.08399
   95% expected band : 5.08399 < r < 5.08399
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1111764851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44797 +/- 0.00786624 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.44797 @ 95%CL (1 toyMC)
median expected limit: r < 3.44797 @ 95%CL (1 toyMC)
   68% expected band : 3.44797 < r < 3.44797
   95% expected band : 3.44797 < r < 3.44797
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1797593383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.47366 +/- 0.00809135 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.47366 @ 95%CL (1 toyMC)
median expected limit: r < 3.47366 @ 95%CL (1 toyMC)
   68% expected band : 3.47366 < r < 3.47366
   95% expected band : 3.47366 < r < 3.47366
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 426708617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.02259 +/- 0.00922291 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 5.02259 @ 95%CL (1 toyMC)
median expected limit: r < 5.02259 @ 95%CL (1 toyMC)
   68% expected band : 5.02259 < r < 5.02259
   95% expected band : 5.02259 < r < 5.02259
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2115857936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4386 +/- 0.00816366 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.4386 @ 95%CL (1 toyMC)
median expected limit: r < 3.4386 @ 95%CL (1 toyMC)
   68% expected band : 3.4386 < r < 3.4386
   95% expected band : 3.4386 < r < 3.4386
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -190479970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46557 +/- 0.00700225 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.46557 @ 95%CL (1 toyMC)
median expected limit: r < 3.46557 @ 95%CL (1 toyMC)
   68% expected band : 3.46557 < r < 3.46557
   95% expected band : 3.46557 < r < 3.46557
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -554547235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45298 +/- 0.00737398 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.45298 @ 95%CL (1 toyMC)
median expected limit: r < 3.45298 @ 95%CL (1 toyMC)
   68% expected band : 3.45298 < r < 3.45298
   95% expected band : 3.45298 < r < 3.45298
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 975415158
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.43785 +/- 0.00638572 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.43785 @ 95%CL (1 toyMC)
median expected limit: r < 3.43785 @ 95%CL (1 toyMC)
   68% expected band : 3.43785 < r < 3.43785
   95% expected band : 3.43785 < r < 3.43785
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 609304572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45929 +/- 0.00808265 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.45929 @ 95%CL (1 toyMC)
median expected limit: r < 3.45929 @ 95%CL (1 toyMC)
   68% expected band : 3.45929 < r < 3.45929
   95% expected band : 3.45929 < r < 3.45929
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -745818259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4549 +/- 0.00785181 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.4549 @ 95%CL (1 toyMC)
median expected limit: r < 3.4549 @ 95%CL (1 toyMC)
   68% expected band : 3.4549 < r < 3.4549
   95% expected band : 3.4549 < r < 3.4549
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2144426141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.67677 +/- 0.00844629 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.67677 @ 95%CL (1 toyMC)
median expected limit: r < 4.67677 @ 95%CL (1 toyMC)
   68% expected band : 4.67677 < r < 4.67677
   95% expected band : 4.67677 < r < 4.67677
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1894149472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44011 +/- 0.00832907 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.44011 @ 95%CL (1 toyMC)
median expected limit: r < 3.44011 @ 95%CL (1 toyMC)
   68% expected band : 3.44011 < r < 3.44011
   95% expected band : 3.44011 < r < 3.44011
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1614663647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46485 +/- 0.00917403 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.46485 @ 95%CL (1 toyMC)
median expected limit: r < 3.46485 @ 95%CL (1 toyMC)
   68% expected band : 3.46485 < r < 3.46485
   95% expected band : 3.46485 < r < 3.46485
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 317367532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45768 +/- 0.00723265 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.45768 @ 95%CL (1 toyMC)
median expected limit: r < 3.45768 @ 95%CL (1 toyMC)
   68% expected band : 3.45768 < r < 3.45768
   95% expected band : 3.45768 < r < 3.45768
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1766728169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.93643 +/- 0.00860899 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.93643 @ 95%CL (1 toyMC)
median expected limit: r < 4.93643 @ 95%CL (1 toyMC)
   68% expected band : 4.93643 < r < 4.93643
   95% expected band : 4.93643 < r < 4.93643
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1427168804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45102 +/- 0.0075271 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.45102 @ 95%CL (1 toyMC)
median expected limit: r < 3.45102 @ 95%CL (1 toyMC)
   68% expected band : 3.45102 < r < 3.45102
   95% expected band : 3.45102 < r < 3.45102
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2087855014
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45758 +/- 0.006906 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.45758 @ 95%CL (1 toyMC)
median expected limit: r < 3.45758 @ 95%CL (1 toyMC)
   68% expected band : 3.45758 < r < 3.45758
   95% expected band : 3.45758 < r < 3.45758
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -392000159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.42581 +/- 0.00836746 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.42581 @ 95%CL (1 toyMC)
median expected limit: r < 3.42581 @ 95%CL (1 toyMC)
   68% expected band : 3.42581 < r < 3.42581
   95% expected band : 3.42581 < r < 3.42581
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -276999848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.69284 +/- 0.00910412 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.69284 @ 95%CL (1 toyMC)
median expected limit: r < 4.69284 @ 95%CL (1 toyMC)
   68% expected band : 4.69284 < r < 4.69284
   95% expected band : 4.69284 < r < 4.69284
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1915693025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45264 +/- 0.00795219 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.45264 @ 95%CL (1 toyMC)
median expected limit: r < 3.45264 @ 95%CL (1 toyMC)
   68% expected band : 3.45264 < r < 3.45264
   95% expected band : 3.45264 < r < 3.45264
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -298739748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45508 +/- 0.0102022 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.45508 @ 95%CL (1 toyMC)
median expected limit: r < 3.45508 @ 95%CL (1 toyMC)
   68% expected band : 3.45508 < r < 3.45508
   95% expected band : 3.45508 < r < 3.45508
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 227012992
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46689 +/- 0.00713629 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.46689 @ 95%CL (1 toyMC)
median expected limit: r < 3.46689 @ 95%CL (1 toyMC)
   68% expected band : 3.46689 < r < 3.46689
   95% expected band : 3.46689 < r < 3.46689
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -756590040
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.47398 +/- 0.00792177 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.47398 @ 95%CL (1 toyMC)
median expected limit: r < 3.47398 @ 95%CL (1 toyMC)
   68% expected band : 3.47398 < r < 3.47398
   95% expected band : 3.47398 < r < 3.47398
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1648627257
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.96138 +/- 0.00810948 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.96138 @ 95%CL (1 toyMC)
median expected limit: r < 4.96138 @ 95%CL (1 toyMC)
   68% expected band : 4.96138 < r < 4.96138
   95% expected band : 4.96138 < r < 4.96138
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -792855771
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.99475 +/- 0.00823793 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.99475 @ 95%CL (1 toyMC)
median expected limit: r < 4.99475 @ 95%CL (1 toyMC)
   68% expected band : 4.99475 < r < 4.99475
   95% expected band : 4.99475 < r < 4.99475
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1753410450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45755 +/- 0.00726118 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.45755 @ 95%CL (1 toyMC)
median expected limit: r < 3.45755 @ 95%CL (1 toyMC)
   68% expected band : 3.45755 < r < 3.45755
   95% expected band : 3.45755 < r < 3.45755
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 71502416
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46551 +/- 0.0061655 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.46551 @ 95%CL (1 toyMC)
median expected limit: r < 3.46551 @ 95%CL (1 toyMC)
   68% expected band : 3.46551 < r < 3.46551
   95% expected band : 3.46551 < r < 3.46551
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1771164880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46847 +/- 0.00810183 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.46847 @ 95%CL (1 toyMC)
median expected limit: r < 3.46847 @ 95%CL (1 toyMC)
   68% expected band : 3.46847 < r < 3.46847
   95% expected band : 3.46847 < r < 3.46847
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1667735977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44603 +/- 0.00720634 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.44603 @ 95%CL (1 toyMC)
median expected limit: r < 3.44603 @ 95%CL (1 toyMC)
   68% expected band : 3.44603 < r < 3.44603
   95% expected band : 3.44603 < r < 3.44603
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1826989368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.42986 +/- 0.00894478 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.42986 @ 95%CL (1 toyMC)
median expected limit: r < 3.42986 @ 95%CL (1 toyMC)
   68% expected band : 3.42986 < r < 3.42986
   95% expected band : 3.42986 < r < 3.42986
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1037276728.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1195564731.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-126478650.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1280559674.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1427168804.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-144541017.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1447085420.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-155543364.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1576627888.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1667735977.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-169574707.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1699821241.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1720462035.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1766728169.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1797593383.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1826989368.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1894149472.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-190479970.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1905443712.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1988836643.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1994321263.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-2006913517.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-2017987426.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-2098711154.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-2115857936.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-2119531877.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-2144426141.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-276999848.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-298739748.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-315404656.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-392000159.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-419240948.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-442259363.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-526068904.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-534222805.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-554547235.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-569148792.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-717220487.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-742906719.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-743023832.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-745818259.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-756590040.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-792855771.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-806012234.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-89952950.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-90929625.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-92613698.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-931482880.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-951642337.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.1023425656.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.103082884.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.104449673.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1051395625.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1079561647.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1111764851.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1188272889.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1193470466.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.123364845.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1272267150.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1335153469.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1397531855.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1422533454.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1446070702.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1482264446.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1503788786.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1520444213.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1532994641.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1553936585.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1559921986.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1604971253.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1614663647.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1648627257.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1753410450.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1771164880.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.1775383706.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.1915693025.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.1943515162.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.1952662313.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.1960883615.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.1977841669.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.1995540857.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.2037211572.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.2039411763.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.2087855014.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.227012992.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.259350882.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.317367532.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.317456886.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.319854116.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.321898840.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.326571093.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.426708617.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.493700954.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.525918757.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.554633178.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.609304572.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.71502416.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.771125057.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.936184017.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.975415158.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -657723889
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65915 +/- 0.00786642 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.65915 @ 95%CL (1 toyMC)
median expected limit: r < 3.65915 @ 95%CL (1 toyMC)
   68% expected band : 3.65915 < r < 3.65915
   95% expected band : 3.65915 < r < 3.65915
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -865417979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.61543 +/- 0.0107533 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.61543 @ 95%CL (1 toyMC)
median expected limit: r < 6.61543 @ 95%CL (1 toyMC)
   68% expected band : 6.61543 < r < 6.61543
   95% expected band : 6.61543 < r < 6.61543
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -289604697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.03616 +/- 0.0104438 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 5.03616 @ 95%CL (1 toyMC)
median expected limit: r < 5.03616 @ 95%CL (1 toyMC)
   68% expected band : 5.03616 < r < 5.03616
   95% expected band : 5.03616 < r < 5.03616
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1047118756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64539 +/- 0.00814044 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.64539 @ 95%CL (1 toyMC)
median expected limit: r < 3.64539 @ 95%CL (1 toyMC)
   68% expected band : 3.64539 < r < 3.64539
   95% expected band : 3.64539 < r < 3.64539
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1568246011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63823 +/- 0.0071619 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.63823 @ 95%CL (1 toyMC)
median expected limit: r < 3.63823 @ 95%CL (1 toyMC)
   68% expected band : 3.63823 < r < 3.63823
   95% expected band : 3.63823 < r < 3.63823
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1502085863
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64473 +/- 0.0100061 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.64473 @ 95%CL (1 toyMC)
median expected limit: r < 3.64473 @ 95%CL (1 toyMC)
   68% expected band : 3.64473 < r < 3.64473
   95% expected band : 3.64473 < r < 3.64473
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1217893786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64813 +/- 0.00867652 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.64813 @ 95%CL (1 toyMC)
median expected limit: r < 3.64813 @ 95%CL (1 toyMC)
   68% expected band : 3.64813 < r < 3.64813
   95% expected band : 3.64813 < r < 3.64813
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1080691557
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64986 +/- 0.00827685 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.64986 @ 95%CL (1 toyMC)
median expected limit: r < 3.64986 @ 95%CL (1 toyMC)
   68% expected band : 3.64986 < r < 3.64986
   95% expected band : 3.64986 < r < 3.64986
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1207881605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.20975 +/- 0.0106643 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.20975 @ 95%CL (1 toyMC)
median expected limit: r < 5.20975 @ 95%CL (1 toyMC)
   68% expected band : 5.20975 < r < 5.20975
   95% expected band : 5.20975 < r < 5.20975
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1112789699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.05798 +/- 0.0108204 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.05798 @ 95%CL (1 toyMC)
median expected limit: r < 5.05798 @ 95%CL (1 toyMC)
   68% expected band : 5.05798 < r < 5.05798
   95% expected band : 5.05798 < r < 5.05798
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1367490152
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.40856 +/- 0.0101637 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.40856 @ 95%CL (1 toyMC)
median expected limit: r < 5.40856 @ 95%CL (1 toyMC)
   68% expected band : 5.40856 < r < 5.40856
   95% expected band : 5.40856 < r < 5.40856
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1806062673
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64739 +/- 0.00824024 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.64739 @ 95%CL (1 toyMC)
median expected limit: r < 3.64739 @ 95%CL (1 toyMC)
   68% expected band : 3.64739 < r < 3.64739
   95% expected band : 3.64739 < r < 3.64739
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -564124682
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.83433 +/- 0.00796898 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.83433 @ 95%CL (1 toyMC)
median expected limit: r < 5.83433 @ 95%CL (1 toyMC)
   68% expected band : 5.83433 < r < 5.83433
   95% expected band : 5.83433 < r < 5.83433
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1593179311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.61612 +/- 0.0074012 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.61612 @ 95%CL (1 toyMC)
median expected limit: r < 3.61612 @ 95%CL (1 toyMC)
   68% expected band : 3.61612 < r < 3.61612
   95% expected band : 3.61612 < r < 3.61612
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1862312691
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65188 +/- 0.00736813 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.65188 @ 95%CL (1 toyMC)
median expected limit: r < 3.65188 @ 95%CL (1 toyMC)
   68% expected band : 3.65188 < r < 3.65188
   95% expected band : 3.65188 < r < 3.65188
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1931136172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6423 +/- 0.00905763 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.6423 @ 95%CL (1 toyMC)
median expected limit: r < 3.6423 @ 95%CL (1 toyMC)
   68% expected band : 3.6423 < r < 3.6423
   95% expected band : 3.6423 < r < 3.6423
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 518437009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66214 +/- 0.00793567 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.66214 @ 95%CL (1 toyMC)
median expected limit: r < 3.66214 @ 95%CL (1 toyMC)
   68% expected band : 3.66214 < r < 3.66214
   95% expected band : 3.66214 < r < 3.66214
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 89286133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64057 +/- 0.00783283 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.64057 @ 95%CL (1 toyMC)
median expected limit: r < 3.64057 @ 95%CL (1 toyMC)
   68% expected band : 3.64057 < r < 3.64057
   95% expected band : 3.64057 < r < 3.64057
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1388829069
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.23613 +/- 0.0101213 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.23613 @ 95%CL (1 toyMC)
median expected limit: r < 5.23613 @ 95%CL (1 toyMC)
   68% expected band : 5.23613 < r < 5.23613
   95% expected band : 5.23613 < r < 5.23613
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -614119831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63888 +/- 0.00693365 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.63888 @ 95%CL (1 toyMC)
median expected limit: r < 3.63888 @ 95%CL (1 toyMC)
   68% expected band : 3.63888 < r < 3.63888
   95% expected band : 3.63888 < r < 3.63888
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1966438210
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65641 +/- 0.00858563 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.65641 @ 95%CL (1 toyMC)
median expected limit: r < 3.65641 @ 95%CL (1 toyMC)
   68% expected band : 3.65641 < r < 3.65641
   95% expected band : 3.65641 < r < 3.65641
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -857905474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63934 +/- 0.00713385 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.63934 @ 95%CL (1 toyMC)
median expected limit: r < 3.63934 @ 95%CL (1 toyMC)
   68% expected band : 3.63934 < r < 3.63934
   95% expected band : 3.63934 < r < 3.63934
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -773326148
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64755 +/- 0.00885661 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.64755 @ 95%CL (1 toyMC)
median expected limit: r < 3.64755 @ 95%CL (1 toyMC)
   68% expected band : 3.64755 < r < 3.64755
   95% expected band : 3.64755 < r < 3.64755
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1264304106
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66875 +/- 0.0104308 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.66875 @ 95%CL (1 toyMC)
median expected limit: r < 3.66875 @ 95%CL (1 toyMC)
   68% expected band : 3.66875 < r < 3.66875
   95% expected band : 3.66875 < r < 3.66875
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 860475486
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.26168 +/- 0.00982919 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.26168 @ 95%CL (1 toyMC)
median expected limit: r < 5.26168 @ 95%CL (1 toyMC)
   68% expected band : 5.26168 < r < 5.26168
   95% expected band : 5.26168 < r < 5.26168
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1613134666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65798 +/- 0.0083307 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.65798 @ 95%CL (1 toyMC)
median expected limit: r < 3.65798 @ 95%CL (1 toyMC)
   68% expected band : 3.65798 < r < 3.65798
   95% expected band : 3.65798 < r < 3.65798
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -140067497
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65257 +/- 0.00943714 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.65257 @ 95%CL (1 toyMC)
median expected limit: r < 3.65257 @ 95%CL (1 toyMC)
   68% expected band : 3.65257 < r < 3.65257
   95% expected band : 3.65257 < r < 3.65257
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1320751996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6421 +/- 0.00894808 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.6421 @ 95%CL (1 toyMC)
median expected limit: r < 3.6421 @ 95%CL (1 toyMC)
   68% expected band : 3.6421 < r < 3.6421
   95% expected band : 3.6421 < r < 3.6421
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1198742135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64645 +/- 0.00856175 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.64645 @ 95%CL (1 toyMC)
median expected limit: r < 3.64645 @ 95%CL (1 toyMC)
   68% expected band : 3.64645 < r < 3.64645
   95% expected band : 3.64645 < r < 3.64645
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1847007432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.40462 +/- 0.00858775 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.40462 @ 95%CL (1 toyMC)
median expected limit: r < 5.40462 @ 95%CL (1 toyMC)
   68% expected band : 5.40462 < r < 5.40462
   95% expected band : 5.40462 < r < 5.40462
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 760251871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64542 +/- 0.00718082 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.64542 @ 95%CL (1 toyMC)
median expected limit: r < 3.64542 @ 95%CL (1 toyMC)
   68% expected band : 3.64542 < r < 3.64542
   95% expected band : 3.64542 < r < 3.64542
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1661083235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64025 +/- 0.00698578 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.64025 @ 95%CL (1 toyMC)
median expected limit: r < 3.64025 @ 95%CL (1 toyMC)
   68% expected band : 3.64025 < r < 3.64025
   95% expected band : 3.64025 < r < 3.64025
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1962602757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66524 +/- 0.00774657 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.66524 @ 95%CL (1 toyMC)
median expected limit: r < 3.66524 @ 95%CL (1 toyMC)
   68% expected band : 3.66524 < r < 3.66524
   95% expected band : 3.66524 < r < 3.66524
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 492455423
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65266 +/- 0.00702628 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 3.65266 @ 95%CL (1 toyMC)
median expected limit: r < 3.65266 @ 95%CL (1 toyMC)
   68% expected band : 3.65266 < r < 3.65266
   95% expected band : 3.65266 < r < 3.65266
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2019814923
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64841 +/- 0.0101081 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.64841 @ 95%CL (1 toyMC)
median expected limit: r < 3.64841 @ 95%CL (1 toyMC)
   68% expected band : 3.64841 < r < 3.64841
   95% expected band : 3.64841 < r < 3.64841
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -156293920
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6406 +/- 0.00787125 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.6406 @ 95%CL (1 toyMC)
median expected limit: r < 3.6406 @ 95%CL (1 toyMC)
   68% expected band : 3.6406 < r < 3.6406
   95% expected band : 3.6406 < r < 3.6406
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1348336007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.03852 +/- 0.0116658 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.03852 @ 95%CL (1 toyMC)
median expected limit: r < 5.03852 @ 95%CL (1 toyMC)
   68% expected band : 5.03852 < r < 5.03852
   95% expected band : 5.03852 < r < 5.03852
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1082792340
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64887 +/- 0.00772942 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.64887 @ 95%CL (1 toyMC)
median expected limit: r < 3.64887 @ 95%CL (1 toyMC)
   68% expected band : 3.64887 < r < 3.64887
   95% expected band : 3.64887 < r < 3.64887
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 405750656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63984 +/- 0.00748973 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.63984 @ 95%CL (1 toyMC)
median expected limit: r < 3.63984 @ 95%CL (1 toyMC)
   68% expected band : 3.63984 < r < 3.63984
   95% expected band : 3.63984 < r < 3.63984
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 537977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.62317 +/- 0.00830212 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.62317 @ 95%CL (1 toyMC)
median expected limit: r < 3.62317 @ 95%CL (1 toyMC)
   68% expected band : 3.62317 < r < 3.62317
   95% expected band : 3.62317 < r < 3.62317
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1537179021
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66355 +/- 0.00930635 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.66355 @ 95%CL (1 toyMC)
median expected limit: r < 3.66355 @ 95%CL (1 toyMC)
   68% expected band : 3.66355 < r < 3.66355
   95% expected band : 3.66355 < r < 3.66355
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1789914278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63657 +/- 0.00876179 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.63657 @ 95%CL (1 toyMC)
median expected limit: r < 3.63657 @ 95%CL (1 toyMC)
   68% expected band : 3.63657 < r < 3.63657
   95% expected band : 3.63657 < r < 3.63657
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -775718337
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.67014 +/- 0.00764856 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.67014 @ 95%CL (1 toyMC)
median expected limit: r < 3.67014 @ 95%CL (1 toyMC)
   68% expected band : 3.67014 < r < 3.67014
   95% expected band : 3.67014 < r < 3.67014
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -315785919
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.2267 +/- 0.00956605 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 5.2267 @ 95%CL (1 toyMC)
median expected limit: r < 5.2267 @ 95%CL (1 toyMC)
   68% expected band : 5.2267 < r < 5.2267
   95% expected band : 5.2267 < r < 5.2267
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 285068583
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64425 +/- 0.00857979 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.64425 @ 95%CL (1 toyMC)
median expected limit: r < 3.64425 @ 95%CL (1 toyMC)
   68% expected band : 3.64425 < r < 3.64425
   95% expected band : 3.64425 < r < 3.64425
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -928607748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.21895 +/- 0.00937279 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.21895 @ 95%CL (1 toyMC)
median expected limit: r < 5.21895 @ 95%CL (1 toyMC)
   68% expected band : 5.21895 < r < 5.21895
   95% expected band : 5.21895 < r < 5.21895
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -885131413
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.25312 +/- 0.00900484 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.25312 @ 95%CL (1 toyMC)
median expected limit: r < 5.25312 @ 95%CL (1 toyMC)
   68% expected band : 5.25312 < r < 5.25312
   95% expected band : 5.25312 < r < 5.25312
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1939174904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.50371 +/- 0.00909375 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.50371 @ 95%CL (1 toyMC)
median expected limit: r < 5.50371 @ 95%CL (1 toyMC)
   68% expected band : 5.50371 < r < 5.50371
   95% expected band : 5.50371 < r < 5.50371
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 979400202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.99668 +/- 0.0094488 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.99668 @ 95%CL (1 toyMC)
median expected limit: r < 4.99668 @ 95%CL (1 toyMC)
   68% expected band : 4.99668 < r < 4.99668
   95% expected band : 4.99668 < r < 4.99668
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -954618514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.0278 +/- 0.00858248 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.0278 @ 95%CL (1 toyMC)
median expected limit: r < 5.0278 @ 95%CL (1 toyMC)
   68% expected band : 5.0278 < r < 5.0278
   95% expected band : 5.0278 < r < 5.0278
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1859337133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63412 +/- 0.00810806 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.63412 @ 95%CL (1 toyMC)
median expected limit: r < 3.63412 @ 95%CL (1 toyMC)
   68% expected band : 3.63412 < r < 3.63412
   95% expected band : 3.63412 < r < 3.63412
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -442845664
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63027 +/- 0.01034 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.63027 @ 95%CL (1 toyMC)
median expected limit: r < 3.63027 @ 95%CL (1 toyMC)
   68% expected band : 3.63027 < r < 3.63027
   95% expected band : 3.63027 < r < 3.63027
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 713546487
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65495 +/- 0.0087966 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.65495 @ 95%CL (1 toyMC)
median expected limit: r < 3.65495 @ 95%CL (1 toyMC)
   68% expected band : 3.65495 < r < 3.65495
   95% expected band : 3.65495 < r < 3.65495
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1696682787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63274 +/- 0.00777778 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.63274 @ 95%CL (1 toyMC)
median expected limit: r < 3.63274 @ 95%CL (1 toyMC)
   68% expected band : 3.63274 < r < 3.63274
   95% expected band : 3.63274 < r < 3.63274
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1433962058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66931 +/- 0.00795304 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.66931 @ 95%CL (1 toyMC)
median expected limit: r < 3.66931 @ 95%CL (1 toyMC)
   68% expected band : 3.66931 < r < 3.66931
   95% expected band : 3.66931 < r < 3.66931
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -397877499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.62296 +/- 0.0104533 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.62296 @ 95%CL (1 toyMC)
median expected limit: r < 3.62296 @ 95%CL (1 toyMC)
   68% expected band : 3.62296 < r < 3.62296
   95% expected band : 3.62296 < r < 3.62296
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1759816409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66006 +/- 0.00750251 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.66006 @ 95%CL (1 toyMC)
median expected limit: r < 3.66006 @ 95%CL (1 toyMC)
   68% expected band : 3.66006 < r < 3.66006
   95% expected band : 3.66006 < r < 3.66006
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1842525145
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64622 +/- 0.00833867 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.64622 @ 95%CL (1 toyMC)
median expected limit: r < 3.64622 @ 95%CL (1 toyMC)
   68% expected band : 3.64622 < r < 3.64622
   95% expected band : 3.64622 < r < 3.64622
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 176852015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65793 +/- 0.00744172 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.65793 @ 95%CL (1 toyMC)
median expected limit: r < 3.65793 @ 95%CL (1 toyMC)
   68% expected band : 3.65793 < r < 3.65793
   95% expected band : 3.65793 < r < 3.65793
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2036434168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64831 +/- 0.00986186 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.64831 @ 95%CL (1 toyMC)
median expected limit: r < 3.64831 @ 95%CL (1 toyMC)
   68% expected band : 3.64831 < r < 3.64831
   95% expected band : 3.64831 < r < 3.64831
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 207800804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6546 +/- 0.010069 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.6546 @ 95%CL (1 toyMC)
median expected limit: r < 3.6546 @ 95%CL (1 toyMC)
   68% expected band : 3.6546 < r < 3.6546
   95% expected band : 3.6546 < r < 3.6546
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 935754149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65194 +/- 0.00780196 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.65194 @ 95%CL (1 toyMC)
median expected limit: r < 3.65194 @ 95%CL (1 toyMC)
   68% expected band : 3.65194 < r < 3.65194
   95% expected band : 3.65194 < r < 3.65194
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 389983634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65939 +/- 0.00805037 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.65939 @ 95%CL (1 toyMC)
median expected limit: r < 3.65939 @ 95%CL (1 toyMC)
   68% expected band : 3.65939 < r < 3.65939
   95% expected band : 3.65939 < r < 3.65939
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1013641202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66922 +/- 0.00729528 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.66922 @ 95%CL (1 toyMC)
median expected limit: r < 3.66922 @ 95%CL (1 toyMC)
   68% expected band : 3.66922 < r < 3.66922
   95% expected band : 3.66922 < r < 3.66922
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1069343746
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6313 +/- 0.00725659 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.6313 @ 95%CL (1 toyMC)
median expected limit: r < 3.6313 @ 95%CL (1 toyMC)
   68% expected band : 3.6313 < r < 3.6313
   95% expected band : 3.6313 < r < 3.6313
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -309740168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66479 +/- 0.00866987 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.66479 @ 95%CL (1 toyMC)
median expected limit: r < 3.66479 @ 95%CL (1 toyMC)
   68% expected band : 3.66479 < r < 3.66479
   95% expected band : 3.66479 < r < 3.66479
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -960490693
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.62936 +/- 0.00681562 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.62936 @ 95%CL (1 toyMC)
median expected limit: r < 3.62936 @ 95%CL (1 toyMC)
   68% expected band : 3.62936 < r < 3.62936
   95% expected band : 3.62936 < r < 3.62936
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -307551198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64271 +/- 0.00898179 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.64271 @ 95%CL (1 toyMC)
median expected limit: r < 3.64271 @ 95%CL (1 toyMC)
   68% expected band : 3.64271 < r < 3.64271
   95% expected band : 3.64271 < r < 3.64271
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1639015721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.67281 +/- 0.00889891 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.67281 @ 95%CL (1 toyMC)
median expected limit: r < 5.67281 @ 95%CL (1 toyMC)
   68% expected band : 5.67281 < r < 5.67281
   95% expected band : 5.67281 < r < 5.67281
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1138211752
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65815 +/- 0.00924413 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.65815 @ 95%CL (1 toyMC)
median expected limit: r < 3.65815 @ 95%CL (1 toyMC)
   68% expected band : 3.65815 < r < 3.65815
   95% expected band : 3.65815 < r < 3.65815
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -142119736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.20876 +/- 0.0103511 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.20876 @ 95%CL (1 toyMC)
median expected limit: r < 5.20876 @ 95%CL (1 toyMC)
   68% expected band : 5.20876 < r < 5.20876
   95% expected band : 5.20876 < r < 5.20876
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -219834206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.01987 +/- 0.0085406 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.01987 @ 95%CL (1 toyMC)
median expected limit: r < 5.01987 @ 95%CL (1 toyMC)
   68% expected band : 5.01987 < r < 5.01987
   95% expected band : 5.01987 < r < 5.01987
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 620583692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6305 +/- 0.00816656 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.6305 @ 95%CL (1 toyMC)
median expected limit: r < 3.6305 @ 95%CL (1 toyMC)
   68% expected band : 3.6305 < r < 3.6305
   95% expected band : 3.6305 < r < 3.6305
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1672249793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64089 +/- 0.00905631 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.64089 @ 95%CL (1 toyMC)
median expected limit: r < 3.64089 @ 95%CL (1 toyMC)
   68% expected band : 3.64089 < r < 3.64089
   95% expected band : 3.64089 < r < 3.64089
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1259654500
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64989 +/- 0.00640691 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.64989 @ 95%CL (1 toyMC)
median expected limit: r < 3.64989 @ 95%CL (1 toyMC)
   68% expected band : 3.64989 < r < 3.64989
   95% expected band : 3.64989 < r < 3.64989
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1075699652
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.60616 +/- 0.010988 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.60616 @ 95%CL (1 toyMC)
median expected limit: r < 5.60616 @ 95%CL (1 toyMC)
   68% expected band : 5.60616 < r < 5.60616
   95% expected band : 5.60616 < r < 5.60616
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1185108517
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.40587 +/- 0.00968203 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.40587 @ 95%CL (1 toyMC)
median expected limit: r < 5.40587 @ 95%CL (1 toyMC)
   68% expected band : 5.40587 < r < 5.40587
   95% expected band : 5.40587 < r < 5.40587
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -878852594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.21241 +/- 0.00852762 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.21241 @ 95%CL (1 toyMC)
median expected limit: r < 5.21241 @ 95%CL (1 toyMC)
   68% expected band : 5.21241 < r < 5.21241
   95% expected band : 5.21241 < r < 5.21241
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -925529319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63685 +/- 0.00861958 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.63685 @ 95%CL (1 toyMC)
median expected limit: r < 3.63685 @ 95%CL (1 toyMC)
   68% expected band : 3.63685 < r < 3.63685
   95% expected band : 3.63685 < r < 3.63685
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1441337946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63095 +/- 0.00702284 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.63095 @ 95%CL (1 toyMC)
median expected limit: r < 3.63095 @ 95%CL (1 toyMC)
   68% expected band : 3.63095 < r < 3.63095
   95% expected band : 3.63095 < r < 3.63095
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1067825107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64755 +/- 0.00842388 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.64755 @ 95%CL (1 toyMC)
median expected limit: r < 3.64755 @ 95%CL (1 toyMC)
   68% expected band : 3.64755 < r < 3.64755
   95% expected band : 3.64755 < r < 3.64755
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2139790951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.0727 +/- 0.00938426 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 5.0727 @ 95%CL (1 toyMC)
median expected limit: r < 5.0727 @ 95%CL (1 toyMC)
   68% expected band : 5.0727 < r < 5.0727
   95% expected band : 5.0727 < r < 5.0727
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1692994472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66171 +/- 0.00825949 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.66171 @ 95%CL (1 toyMC)
median expected limit: r < 3.66171 @ 95%CL (1 toyMC)
   68% expected band : 3.66171 < r < 3.66171
   95% expected band : 3.66171 < r < 3.66171
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -26324722
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.10909 +/- 0.00894401 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.10909 @ 95%CL (1 toyMC)
median expected limit: r < 5.10909 @ 95%CL (1 toyMC)
   68% expected band : 5.10909 < r < 5.10909
   95% expected band : 5.10909 < r < 5.10909
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1529415455
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.61521 +/- 0.00911683 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.61521 @ 95%CL (1 toyMC)
median expected limit: r < 3.61521 @ 95%CL (1 toyMC)
   68% expected band : 3.61521 < r < 3.61521
   95% expected band : 3.61521 < r < 3.61521
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 619650461
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65135 +/- 0.00640589 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.65135 @ 95%CL (1 toyMC)
median expected limit: r < 3.65135 @ 95%CL (1 toyMC)
   68% expected band : 3.65135 < r < 3.65135
   95% expected band : 3.65135 < r < 3.65135
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 837890520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64546 +/- 0.00833563 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.64546 @ 95%CL (1 toyMC)
median expected limit: r < 3.64546 @ 95%CL (1 toyMC)
   68% expected band : 3.64546 < r < 3.64546
   95% expected band : 3.64546 < r < 3.64546
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -933198711
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66774 +/- 0.00800343 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.66774 @ 95%CL (1 toyMC)
median expected limit: r < 3.66774 @ 95%CL (1 toyMC)
   68% expected band : 3.66774 < r < 3.66774
   95% expected band : 3.66774 < r < 3.66774
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1976112565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66328 +/- 0.00878603 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.66328 @ 95%CL (1 toyMC)
median expected limit: r < 3.66328 @ 95%CL (1 toyMC)
   68% expected band : 3.66328 < r < 3.66328
   95% expected band : 3.66328 < r < 3.66328
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 543382864
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63529 +/- 0.00959374 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.63529 @ 95%CL (1 toyMC)
median expected limit: r < 3.63529 @ 95%CL (1 toyMC)
   68% expected band : 3.63529 < r < 3.63529
   95% expected band : 3.63529 < r < 3.63529
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 887567002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.20944 +/- 0.00991492 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.20944 @ 95%CL (1 toyMC)
median expected limit: r < 5.20944 @ 95%CL (1 toyMC)
   68% expected band : 5.20944 < r < 5.20944
   95% expected band : 5.20944 < r < 5.20944
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1091866916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.24536 +/- 0.00939823 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.24536 @ 95%CL (1 toyMC)
median expected limit: r < 5.24536 @ 95%CL (1 toyMC)
   68% expected band : 5.24536 < r < 5.24536
   95% expected band : 5.24536 < r < 5.24536
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -369558622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65547 +/- 0.00698669 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.65547 @ 95%CL (1 toyMC)
median expected limit: r < 3.65547 @ 95%CL (1 toyMC)
   68% expected band : 3.65547 < r < 3.65547
   95% expected band : 3.65547 < r < 3.65547
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -955344135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66257 +/- 0.00917167 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.66257 @ 95%CL (1 toyMC)
median expected limit: r < 3.66257 @ 95%CL (1 toyMC)
   68% expected band : 3.66257 < r < 3.66257
   95% expected band : 3.66257 < r < 3.66257
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1808670580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.32994 +/- 0.00936935 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.32994 @ 95%CL (1 toyMC)
median expected limit: r < 5.32994 @ 95%CL (1 toyMC)
   68% expected band : 5.32994 < r < 5.32994
   95% expected band : 5.32994 < r < 5.32994
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1006520784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65044 +/- 0.00788052 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.65044 @ 95%CL (1 toyMC)
median expected limit: r < 3.65044 @ 95%CL (1 toyMC)
   68% expected band : 3.65044 < r < 3.65044
   95% expected band : 3.65044 < r < 3.65044
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1478662715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6525 +/- 0.0091109 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.6525 @ 95%CL (1 toyMC)
median expected limit: r < 3.6525 @ 95%CL (1 toyMC)
   68% expected band : 3.6525 < r < 3.6525
   95% expected band : 3.6525 < r < 3.6525
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 171163988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.24763 +/- 0.00857656 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.24763 @ 95%CL (1 toyMC)
median expected limit: r < 5.24763 @ 95%CL (1 toyMC)
   68% expected band : 5.24763 < r < 5.24763
   95% expected band : 5.24763 < r < 5.24763
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1006810202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64575 +/- 0.00748065 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.64575 @ 95%CL (1 toyMC)
median expected limit: r < 3.64575 @ 95%CL (1 toyMC)
   68% expected band : 3.64575 < r < 3.64575
   95% expected band : 3.64575 < r < 3.64575
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -691041168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64547 +/- 0.00621897 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.64547 @ 95%CL (1 toyMC)
median expected limit: r < 3.64547 @ 95%CL (1 toyMC)
   68% expected band : 3.64547 < r < 3.64547
   95% expected band : 3.64547 < r < 3.64547
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1006810202.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1013641202.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1047118756.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1069343746.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1080691557.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1082792340.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1185108517.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1217893786.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1259654500.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1264304106.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1348336007.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1367490152.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-140067497.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-142119736.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1433962058.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1441337946.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1478662715.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1502085863.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1529415455.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1537179021.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-156293920.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1568246011.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-1639015721.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-1672249793.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-1696682787.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-1759816409.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-1808670580.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-1847007432.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-1859337133.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-1862312691.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-1931136172.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-1939174904.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-2036434168.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-2139790951.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-219834206.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-26324722.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-289604697.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-307551198.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-309740168.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-315785919.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-369558622.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-397877499.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-442845664.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-564124682.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-614119831.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-657723889.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.-691041168.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.-773326148.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.-775718337.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.-857905474.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.-865417979.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.-878852594.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.-885131413.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.-925529319.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.-928607748.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.-933198711.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.-954618514.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.-955344135.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.-960490693.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1006520784.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1067825107.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1075699652.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1091866916.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1112789699.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1138211752.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1198742135.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1207881605.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1320751996.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1388829069.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1593179311.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1613134666.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1661083235.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1692994472.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.171163988.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.176852015.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.1789914278.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.1806062673.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.1842525145.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.1962602757.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.1966438210.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.1976112565.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.2019814923.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.207800804.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.285068583.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.389983634.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.405750656.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.492455423.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.518437009.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.537977.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.543382864.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.619650461.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.620583692.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.713546487.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.760251871.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.837890520.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.860475486.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.887567002.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.89286133.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.935754149.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.979400202.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1150676810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.94829 +/- 0.010275 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.94829 @ 95%CL (1 toyMC)
median expected limit: r < 3.94829 @ 95%CL (1 toyMC)
   68% expected band : 3.94829 < r < 3.94829
   95% expected band : 3.94829 < r < 3.94829
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 154170716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.13209 +/- 0.00959006 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 6.13209 @ 95%CL (1 toyMC)
median expected limit: r < 6.13209 @ 95%CL (1 toyMC)
   68% expected band : 6.13209 < r < 6.13209
   95% expected band : 6.13209 < r < 6.13209
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1351912338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.83003 +/- 0.0103502 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 5.83003 @ 95%CL (1 toyMC)
median expected limit: r < 5.83003 @ 95%CL (1 toyMC)
   68% expected band : 5.83003 < r < 5.83003
   95% expected band : 5.83003 < r < 5.83003
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 619853609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91805 +/- 0.00857482 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.91805 @ 95%CL (1 toyMC)
median expected limit: r < 3.91805 @ 95%CL (1 toyMC)
   68% expected band : 3.91805 < r < 3.91805
   95% expected band : 3.91805 < r < 3.91805
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 608939904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91351 +/- 0.00998798 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.91351 @ 95%CL (1 toyMC)
median expected limit: r < 3.91351 @ 95%CL (1 toyMC)
   68% expected band : 3.91351 < r < 3.91351
   95% expected band : 3.91351 < r < 3.91351
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -32595943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93607 +/- 0.00884333 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.93607 @ 95%CL (1 toyMC)
median expected limit: r < 3.93607 @ 95%CL (1 toyMC)
   68% expected band : 3.93607 < r < 3.93607
   95% expected band : 3.93607 < r < 3.93607
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1728629593
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89135 +/- 0.00890382 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.89135 @ 95%CL (1 toyMC)
median expected limit: r < 3.89135 @ 95%CL (1 toyMC)
   68% expected band : 3.89135 < r < 3.89135
   95% expected band : 3.89135 < r < 3.89135
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -265065526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.67829 +/- 0.00933093 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.67829 @ 95%CL (1 toyMC)
median expected limit: r < 5.67829 @ 95%CL (1 toyMC)
   68% expected band : 5.67829 < r < 5.67829
   95% expected band : 5.67829 < r < 5.67829
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -352799896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.8804 +/- 0.00850153 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.8804 @ 95%CL (1 toyMC)
median expected limit: r < 3.8804 @ 95%CL (1 toyMC)
   68% expected band : 3.8804 < r < 3.8804
   95% expected band : 3.8804 < r < 3.8804
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1653343755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93808 +/- 0.00748056 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.93808 @ 95%CL (1 toyMC)
median expected limit: r < 3.93808 @ 95%CL (1 toyMC)
   68% expected band : 3.93808 < r < 3.93808
   95% expected band : 3.93808 < r < 3.93808
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 458913771
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93927 +/- 0.00943966 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.93927 @ 95%CL (1 toyMC)
median expected limit: r < 3.93927 @ 95%CL (1 toyMC)
   68% expected band : 3.93927 < r < 3.93927
   95% expected band : 3.93927 < r < 3.93927
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1666018595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89699 +/- 0.00802832 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.89699 @ 95%CL (1 toyMC)
median expected limit: r < 3.89699 @ 95%CL (1 toyMC)
   68% expected band : 3.89699 < r < 3.89699
   95% expected band : 3.89699 < r < 3.89699
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1747521075
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92591 +/- 0.0095692 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.92591 @ 95%CL (1 toyMC)
median expected limit: r < 3.92591 @ 95%CL (1 toyMC)
   68% expected band : 3.92591 < r < 3.92591
   95% expected band : 3.92591 < r < 3.92591
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1829211051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93399 +/- 0.00744979 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.93399 @ 95%CL (1 toyMC)
median expected limit: r < 3.93399 @ 95%CL (1 toyMC)
   68% expected band : 3.93399 < r < 3.93399
   95% expected band : 3.93399 < r < 3.93399
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 104045321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91818 +/- 0.00913635 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.91818 @ 95%CL (1 toyMC)
median expected limit: r < 3.91818 @ 95%CL (1 toyMC)
   68% expected band : 3.91818 < r < 3.91818
   95% expected band : 3.91818 < r < 3.91818
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1448923315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.68911 +/- 0.00909438 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.68911 @ 95%CL (1 toyMC)
median expected limit: r < 5.68911 @ 95%CL (1 toyMC)
   68% expected band : 5.68911 < r < 5.68911
   95% expected band : 5.68911 < r < 5.68911
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1780982645
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92913 +/- 0.00916952 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.92913 @ 95%CL (1 toyMC)
median expected limit: r < 3.92913 @ 95%CL (1 toyMC)
   68% expected band : 3.92913 < r < 3.92913
   95% expected band : 3.92913 < r < 3.92913
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -836770571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89967 +/- 0.00875821 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.89967 @ 95%CL (1 toyMC)
median expected limit: r < 3.89967 @ 95%CL (1 toyMC)
   68% expected band : 3.89967 < r < 3.89967
   95% expected band : 3.89967 < r < 3.89967
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1980730466
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91859 +/- 0.0081744 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.91859 @ 95%CL (1 toyMC)
median expected limit: r < 3.91859 @ 95%CL (1 toyMC)
   68% expected band : 3.91859 < r < 3.91859
   95% expected band : 3.91859 < r < 3.91859
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1730036009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91342 +/- 0.00783938 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.91342 @ 95%CL (1 toyMC)
median expected limit: r < 3.91342 @ 95%CL (1 toyMC)
   68% expected band : 3.91342 < r < 3.91342
   95% expected band : 3.91342 < r < 3.91342
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1981107455
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.91558 +/- 0.0106754 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.91558 @ 95%CL (1 toyMC)
median expected limit: r < 5.91558 @ 95%CL (1 toyMC)
   68% expected band : 5.91558 < r < 5.91558
   95% expected band : 5.91558 < r < 5.91558
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1092747947
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.88672 +/- 0.00872364 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.88672 @ 95%CL (1 toyMC)
median expected limit: r < 3.88672 @ 95%CL (1 toyMC)
   68% expected band : 3.88672 < r < 3.88672
   95% expected band : 3.88672 < r < 3.88672
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1268567660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.68927 +/- 0.0108425 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.68927 @ 95%CL (1 toyMC)
median expected limit: r < 5.68927 @ 95%CL (1 toyMC)
   68% expected band : 5.68927 < r < 5.68927
   95% expected band : 5.68927 < r < 5.68927
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 327529185
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.64009 +/- 0.0100302 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.64009 @ 95%CL (1 toyMC)
median expected limit: r < 5.64009 @ 95%CL (1 toyMC)
   68% expected band : 5.64009 < r < 5.64009
   95% expected band : 5.64009 < r < 5.64009
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -236965434
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89173 +/- 0.00838142 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.89173 @ 95%CL (1 toyMC)
median expected limit: r < 3.89173 @ 95%CL (1 toyMC)
   68% expected band : 3.89173 < r < 3.89173
   95% expected band : 3.89173 < r < 3.89173
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 212056751
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92685 +/- 0.00888703 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.92685 @ 95%CL (1 toyMC)
median expected limit: r < 3.92685 @ 95%CL (1 toyMC)
   68% expected band : 3.92685 < r < 3.92685
   95% expected band : 3.92685 < r < 3.92685
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -155387673
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91138 +/- 0.00904387 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.91138 @ 95%CL (1 toyMC)
median expected limit: r < 3.91138 @ 95%CL (1 toyMC)
   68% expected band : 3.91138 < r < 3.91138
   95% expected band : 3.91138 < r < 3.91138
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1870293111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.96824 +/- 0.00890564 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.96824 @ 95%CL (1 toyMC)
median expected limit: r < 3.96824 @ 95%CL (1 toyMC)
   68% expected band : 3.96824 < r < 3.96824
   95% expected band : 3.96824 < r < 3.96824
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2053857815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92516 +/- 0.00750314 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.92516 @ 95%CL (1 toyMC)
median expected limit: r < 3.92516 @ 95%CL (1 toyMC)
   68% expected band : 3.92516 < r < 3.92516
   95% expected band : 3.92516 < r < 3.92516
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 830966536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.76525 +/- 0.0143894 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.76525 @ 95%CL (1 toyMC)
median expected limit: r < 5.76525 @ 95%CL (1 toyMC)
   68% expected band : 5.76525 < r < 5.76525
   95% expected band : 5.76525 < r < 5.76525
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 323528860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.94214 +/- 0.00842503 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.94214 @ 95%CL (1 toyMC)
median expected limit: r < 3.94214 @ 95%CL (1 toyMC)
   68% expected band : 3.94214 < r < 3.94214
   95% expected band : 3.94214 < r < 3.94214
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -265916994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91383 +/- 0.00947711 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.91383 @ 95%CL (1 toyMC)
median expected limit: r < 3.91383 @ 95%CL (1 toyMC)
   68% expected band : 3.91383 < r < 3.91383
   95% expected band : 3.91383 < r < 3.91383
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1410407897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92635 +/- 0.0101875 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.92635 @ 95%CL (1 toyMC)
median expected limit: r < 3.92635 @ 95%CL (1 toyMC)
   68% expected band : 3.92635 < r < 3.92635
   95% expected band : 3.92635 < r < 3.92635
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 361571682
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91382 +/- 0.00782179 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.91382 @ 95%CL (1 toyMC)
median expected limit: r < 3.91382 @ 95%CL (1 toyMC)
   68% expected band : 3.91382 < r < 3.91382
   95% expected band : 3.91382 < r < 3.91382
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -874139914
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.9011 +/- 0.00927037 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.9011 @ 95%CL (1 toyMC)
median expected limit: r < 3.9011 @ 95%CL (1 toyMC)
   68% expected band : 3.9011 < r < 3.9011
   95% expected band : 3.9011 < r < 3.9011
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1440279586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92177 +/- 0.0095356 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.92177 @ 95%CL (1 toyMC)
median expected limit: r < 3.92177 @ 95%CL (1 toyMC)
   68% expected band : 3.92177 < r < 3.92177
   95% expected band : 3.92177 < r < 3.92177
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 96517900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91485 +/- 0.00956255 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.91485 @ 95%CL (1 toyMC)
median expected limit: r < 3.91485 @ 95%CL (1 toyMC)
   68% expected band : 3.91485 < r < 3.91485
   95% expected band : 3.91485 < r < 3.91485
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1277906518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90183 +/- 0.00707314 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.90183 @ 95%CL (1 toyMC)
median expected limit: r < 3.90183 @ 95%CL (1 toyMC)
   68% expected band : 3.90183 < r < 3.90183
   95% expected band : 3.90183 < r < 3.90183
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -410875227
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.88048 +/- 0.0109318 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.88048 @ 95%CL (1 toyMC)
median expected limit: r < 5.88048 @ 95%CL (1 toyMC)
   68% expected band : 5.88048 < r < 5.88048
   95% expected band : 5.88048 < r < 5.88048
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 976771255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.94269 +/- 0.0104393 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.94269 @ 95%CL (1 toyMC)
median expected limit: r < 3.94269 @ 95%CL (1 toyMC)
   68% expected band : 3.94269 < r < 3.94269
   95% expected band : 3.94269 < r < 3.94269
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1236068157
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90371 +/- 0.00797391 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.90371 @ 95%CL (1 toyMC)
median expected limit: r < 3.90371 @ 95%CL (1 toyMC)
   68% expected band : 3.90371 < r < 3.90371
   95% expected band : 3.90371 < r < 3.90371
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -657570095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92372 +/- 0.00864275 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.92372 @ 95%CL (1 toyMC)
median expected limit: r < 3.92372 @ 95%CL (1 toyMC)
   68% expected band : 3.92372 < r < 3.92372
   95% expected band : 3.92372 < r < 3.92372
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -90722636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.69863 +/- 0.0108393 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.69863 @ 95%CL (1 toyMC)
median expected limit: r < 5.69863 @ 95%CL (1 toyMC)
   68% expected band : 5.69863 < r < 5.69863
   95% expected band : 5.69863 < r < 5.69863
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1145041698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90777 +/- 0.00640425 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.90777 @ 95%CL (1 toyMC)
median expected limit: r < 3.90777 @ 95%CL (1 toyMC)
   68% expected band : 3.90777 < r < 3.90777
   95% expected band : 3.90777 < r < 3.90777
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1479473082
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.06766 +/- 0.0107197 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.06766 @ 95%CL (1 toyMC)
median expected limit: r < 6.06766 @ 95%CL (1 toyMC)
   68% expected band : 6.06766 < r < 6.06766
   95% expected band : 6.06766 < r < 6.06766
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1590368670
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90405 +/- 0.00846313 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.90405 @ 95%CL (1 toyMC)
median expected limit: r < 3.90405 @ 95%CL (1 toyMC)
   68% expected band : 3.90405 < r < 3.90405
   95% expected band : 3.90405 < r < 3.90405
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2110049114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90552 +/- 0.00943527 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.90552 @ 95%CL (1 toyMC)
median expected limit: r < 3.90552 @ 95%CL (1 toyMC)
   68% expected band : 3.90552 < r < 3.90552
   95% expected band : 3.90552 < r < 3.90552
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1860222430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.02329 +/- 0.00857733 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.02329 @ 95%CL (1 toyMC)
median expected limit: r < 6.02329 @ 95%CL (1 toyMC)
   68% expected band : 6.02329 < r < 6.02329
   95% expected band : 6.02329 < r < 6.02329
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1294227717
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.94437 +/- 0.00946886 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.94437 @ 95%CL (1 toyMC)
median expected limit: r < 3.94437 @ 95%CL (1 toyMC)
   68% expected band : 3.94437 < r < 3.94437
   95% expected band : 3.94437 < r < 3.94437
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1190539850
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91682 +/- 0.0101637 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.91682 @ 95%CL (1 toyMC)
median expected limit: r < 3.91682 @ 95%CL (1 toyMC)
   68% expected band : 3.91682 < r < 3.91682
   95% expected band : 3.91682 < r < 3.91682
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1823581249
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.16246 +/- 0.0104514 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.16246 @ 95%CL (1 toyMC)
median expected limit: r < 6.16246 @ 95%CL (1 toyMC)
   68% expected band : 6.16246 < r < 6.16246
   95% expected band : 6.16246 < r < 6.16246
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 782553883
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.88269 +/- 0.00875649 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.88269 @ 95%CL (1 toyMC)
median expected limit: r < 3.88269 @ 95%CL (1 toyMC)
   68% expected band : 3.88269 < r < 3.88269
   95% expected band : 3.88269 < r < 3.88269
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 931979635
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91691 +/- 0.00949801 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.91691 @ 95%CL (1 toyMC)
median expected limit: r < 3.91691 @ 95%CL (1 toyMC)
   68% expected band : 3.91691 < r < 3.91691
   95% expected band : 3.91691 < r < 3.91691
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1329287501
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92029 +/- 0.00976282 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.92029 @ 95%CL (1 toyMC)
median expected limit: r < 3.92029 @ 95%CL (1 toyMC)
   68% expected band : 3.92029 < r < 3.92029
   95% expected band : 3.92029 < r < 3.92029
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1253902540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.88438 +/- 0.00868953 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.88438 @ 95%CL (1 toyMC)
median expected limit: r < 3.88438 @ 95%CL (1 toyMC)
   68% expected band : 3.88438 < r < 3.88438
   95% expected band : 3.88438 < r < 3.88438
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 508671397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89349 +/- 0.00841609 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.89349 @ 95%CL (1 toyMC)
median expected limit: r < 3.89349 @ 95%CL (1 toyMC)
   68% expected band : 3.89349 < r < 3.89349
   95% expected band : 3.89349 < r < 3.89349
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -627246416
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90402 +/- 0.00937637 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.90402 @ 95%CL (1 toyMC)
median expected limit: r < 3.90402 @ 95%CL (1 toyMC)
   68% expected band : 3.90402 < r < 3.90402
   95% expected band : 3.90402 < r < 3.90402
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1950900578
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.9178 +/- 0.00801125 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.9178 @ 95%CL (1 toyMC)
median expected limit: r < 3.9178 @ 95%CL (1 toyMC)
   68% expected band : 3.9178 < r < 3.9178
   95% expected band : 3.9178 < r < 3.9178
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2052266024
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.94188 +/- 0.00827514 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.94188 @ 95%CL (1 toyMC)
median expected limit: r < 3.94188 @ 95%CL (1 toyMC)
   68% expected band : 3.94188 < r < 3.94188
   95% expected band : 3.94188 < r < 3.94188
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1164470719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90905 +/- 0.00742865 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.90905 @ 95%CL (1 toyMC)
median expected limit: r < 3.90905 @ 95%CL (1 toyMC)
   68% expected band : 3.90905 < r < 3.90905
   95% expected band : 3.90905 < r < 3.90905
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1364771308
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90666 +/- 0.00862116 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.90666 @ 95%CL (1 toyMC)
median expected limit: r < 3.90666 @ 95%CL (1 toyMC)
   68% expected band : 3.90666 < r < 3.90666
   95% expected band : 3.90666 < r < 3.90666
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2122776612
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89604 +/- 0.00834396 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.89604 @ 95%CL (1 toyMC)
median expected limit: r < 3.89604 @ 95%CL (1 toyMC)
   68% expected band : 3.89604 < r < 3.89604
   95% expected band : 3.89604 < r < 3.89604
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2058607253
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93022 +/- 0.00970404 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.93022 @ 95%CL (1 toyMC)
median expected limit: r < 3.93022 @ 95%CL (1 toyMC)
   68% expected band : 3.93022 < r < 3.93022
   95% expected band : 3.93022 < r < 3.93022
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -483567331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.9284 +/- 0.00746001 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.9284 @ 95%CL (1 toyMC)
median expected limit: r < 3.9284 @ 95%CL (1 toyMC)
   68% expected band : 3.9284 < r < 3.9284
   95% expected band : 3.9284 < r < 3.9284
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1588707558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.94814 +/- 0.0101282 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.94814 @ 95%CL (1 toyMC)
median expected limit: r < 3.94814 @ 95%CL (1 toyMC)
   68% expected band : 3.94814 < r < 3.94814
   95% expected band : 3.94814 < r < 3.94814
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1417836287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.94287 +/- 0.0107907 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.94287 @ 95%CL (1 toyMC)
median expected limit: r < 3.94287 @ 95%CL (1 toyMC)
   68% expected band : 3.94287 < r < 3.94287
   95% expected band : 3.94287 < r < 3.94287
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 534661328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.9022 +/- 0.00820206 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.9022 @ 95%CL (1 toyMC)
median expected limit: r < 3.9022 @ 95%CL (1 toyMC)
   68% expected band : 3.9022 < r < 3.9022
   95% expected band : 3.9022 < r < 3.9022
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -833014970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.62416 +/- 0.0102617 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.62416 @ 95%CL (1 toyMC)
median expected limit: r < 5.62416 @ 95%CL (1 toyMC)
   68% expected band : 5.62416 < r < 5.62416
   95% expected band : 5.62416 < r < 5.62416
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1904981287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.88936 +/- 0.0103657 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.88936 @ 95%CL (1 toyMC)
median expected limit: r < 5.88936 @ 95%CL (1 toyMC)
   68% expected band : 5.88936 < r < 5.88936
   95% expected band : 5.88936 < r < 5.88936
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1976437324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.9241 +/- 0.0103546 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.9241 @ 95%CL (1 toyMC)
median expected limit: r < 3.9241 @ 95%CL (1 toyMC)
   68% expected band : 3.9241 < r < 3.9241
   95% expected band : 3.9241 < r < 3.9241
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 92614979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90274 +/- 0.00962528 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.90274 @ 95%CL (1 toyMC)
median expected limit: r < 3.90274 @ 95%CL (1 toyMC)
   68% expected band : 3.90274 < r < 3.90274
   95% expected band : 3.90274 < r < 3.90274
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1339989819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.95286 +/- 0.0106621 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.95286 @ 95%CL (1 toyMC)
median expected limit: r < 3.95286 @ 95%CL (1 toyMC)
   68% expected band : 3.95286 < r < 3.95286
   95% expected band : 3.95286 < r < 3.95286
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -253721479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.9032 +/- 0.00754751 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.9032 @ 95%CL (1 toyMC)
median expected limit: r < 3.9032 @ 95%CL (1 toyMC)
   68% expected band : 3.9032 < r < 3.9032
   95% expected band : 3.9032 < r < 3.9032
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2006593941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.12492 +/- 0.0111419 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.12492 @ 95%CL (1 toyMC)
median expected limit: r < 6.12492 @ 95%CL (1 toyMC)
   68% expected band : 6.12492 < r < 6.12492
   95% expected band : 6.12492 < r < 6.12492
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -832334588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.80503 +/- 0.0103667 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.80503 @ 95%CL (1 toyMC)
median expected limit: r < 5.80503 @ 95%CL (1 toyMC)
   68% expected band : 5.80503 < r < 5.80503
   95% expected band : 5.80503 < r < 5.80503
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 322453812
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91981 +/- 0.00960389 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.91981 @ 95%CL (1 toyMC)
median expected limit: r < 3.91981 @ 95%CL (1 toyMC)
   68% expected band : 3.91981 < r < 3.91981
   95% expected band : 3.91981 < r < 3.91981
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -488030172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90827 +/- 0.00753576 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.90827 @ 95%CL (1 toyMC)
median expected limit: r < 3.90827 @ 95%CL (1 toyMC)
   68% expected band : 3.90827 < r < 3.90827
   95% expected band : 3.90827 < r < 3.90827
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -678165115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90979 +/- 0.00994042 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.90979 @ 95%CL (1 toyMC)
median expected limit: r < 3.90979 @ 95%CL (1 toyMC)
   68% expected band : 3.90979 < r < 3.90979
   95% expected band : 3.90979 < r < 3.90979
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 628972941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92511 +/- 0.00947031 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.92511 @ 95%CL (1 toyMC)
median expected limit: r < 3.92511 @ 95%CL (1 toyMC)
   68% expected band : 3.92511 < r < 3.92511
   95% expected band : 3.92511 < r < 3.92511
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -71622741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92018 +/- 0.00911018 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.92018 @ 95%CL (1 toyMC)
median expected limit: r < 3.92018 @ 95%CL (1 toyMC)
   68% expected band : 3.92018 < r < 3.92018
   95% expected band : 3.92018 < r < 3.92018
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 71361475
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93393 +/- 0.00978671 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.93393 @ 95%CL (1 toyMC)
median expected limit: r < 3.93393 @ 95%CL (1 toyMC)
   68% expected band : 3.93393 < r < 3.93393
   95% expected band : 3.93393 < r < 3.93393
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1638442545
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93965 +/- 0.00851662 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.93965 @ 95%CL (1 toyMC)
median expected limit: r < 3.93965 @ 95%CL (1 toyMC)
   68% expected band : 3.93965 < r < 3.93965
   95% expected band : 3.93965 < r < 3.93965
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 562477129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.8951 +/- 0.00969843 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.8951 @ 95%CL (1 toyMC)
median expected limit: r < 3.8951 @ 95%CL (1 toyMC)
   68% expected band : 3.8951 < r < 3.8951
   95% expected band : 3.8951 < r < 3.8951
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1683142353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92839 +/- 0.00846515 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.92839 @ 95%CL (1 toyMC)
median expected limit: r < 3.92839 @ 95%CL (1 toyMC)
   68% expected band : 3.92839 < r < 3.92839
   95% expected band : 3.92839 < r < 3.92839
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 537401489
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92512 +/- 0.0108237 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.92512 @ 95%CL (1 toyMC)
median expected limit: r < 3.92512 @ 95%CL (1 toyMC)
   68% expected band : 3.92512 < r < 3.92512
   95% expected band : 3.92512 < r < 3.92512
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 927992690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91324 +/- 0.0104331 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.91324 @ 95%CL (1 toyMC)
median expected limit: r < 3.91324 @ 95%CL (1 toyMC)
   68% expected band : 3.91324 < r < 3.91324
   95% expected band : 3.91324 < r < 3.91324
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -944582596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91905 +/- 0.0100585 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.91905 @ 95%CL (1 toyMC)
median expected limit: r < 3.91905 @ 95%CL (1 toyMC)
   68% expected band : 3.91905 < r < 3.91905
   95% expected band : 3.91905 < r < 3.91905
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -287607854
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91766 +/- 0.00891334 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.91766 @ 95%CL (1 toyMC)
median expected limit: r < 3.91766 @ 95%CL (1 toyMC)
   68% expected band : 3.91766 < r < 3.91766
   95% expected band : 3.91766 < r < 3.91766
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1401538419
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.9226 +/- 0.00791131 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.9226 @ 95%CL (1 toyMC)
median expected limit: r < 3.9226 @ 95%CL (1 toyMC)
   68% expected band : 3.9226 < r < 3.9226
   95% expected band : 3.9226 < r < 3.9226
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -700175257
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89265 +/- 0.00837709 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.89265 @ 95%CL (1 toyMC)
median expected limit: r < 3.89265 @ 95%CL (1 toyMC)
   68% expected band : 3.89265 < r < 3.89265
   95% expected band : 3.89265 < r < 3.89265
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1827708690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.94625 +/- 0.0089408 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.94625 @ 95%CL (1 toyMC)
median expected limit: r < 3.94625 @ 95%CL (1 toyMC)
   68% expected band : 3.94625 < r < 3.94625
   95% expected band : 3.94625 < r < 3.94625
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1468211915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90067 +/- 0.00832612 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.90067 @ 95%CL (1 toyMC)
median expected limit: r < 3.90067 @ 95%CL (1 toyMC)
   68% expected band : 3.90067 < r < 3.90067
   95% expected band : 3.90067 < r < 3.90067
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 230555715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93771 +/- 0.00899693 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.93771 @ 95%CL (1 toyMC)
median expected limit: r < 3.93771 @ 95%CL (1 toyMC)
   68% expected band : 3.93771 < r < 3.93771
   95% expected band : 3.93771 < r < 3.93771
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1281182700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90841 +/- 0.00970782 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.90841 @ 95%CL (1 toyMC)
median expected limit: r < 3.90841 @ 95%CL (1 toyMC)
   68% expected band : 3.90841 < r < 3.90841
   95% expected band : 3.90841 < r < 3.90841
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1729991950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93635 +/- 0.0108697 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.93635 @ 95%CL (1 toyMC)
median expected limit: r < 3.93635 @ 95%CL (1 toyMC)
   68% expected band : 3.93635 < r < 3.93635
   95% expected band : 3.93635 < r < 3.93635
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -296751804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.91515 +/- 0.0101727 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.91515 @ 95%CL (1 toyMC)
median expected limit: r < 5.91515 @ 95%CL (1 toyMC)
   68% expected band : 5.91515 < r < 5.91515
   95% expected band : 5.91515 < r < 5.91515
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1189354367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93813 +/- 0.00857392 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.93813 @ 95%CL (1 toyMC)
median expected limit: r < 3.93813 @ 95%CL (1 toyMC)
   68% expected band : 3.93813 < r < 3.93813
   95% expected band : 3.93813 < r < 3.93813
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1787275796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92808 +/- 0.00837043 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.92808 @ 95%CL (1 toyMC)
median expected limit: r < 3.92808 @ 95%CL (1 toyMC)
   68% expected band : 3.92808 < r < 3.92808
   95% expected band : 3.92808 < r < 3.92808
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1970372980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92616 +/- 0.00942911 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 3.92616 @ 95%CL (1 toyMC)
median expected limit: r < 3.92616 @ 95%CL (1 toyMC)
   68% expected band : 3.92616 < r < 3.92616
   95% expected band : 3.92616 < r < 3.92616
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1951475058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93343 +/- 0.00889302 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.93343 @ 95%CL (1 toyMC)
median expected limit: r < 3.93343 @ 95%CL (1 toyMC)
   68% expected band : 3.93343 < r < 3.93343
   95% expected band : 3.93343 < r < 3.93343
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1092747947.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1164470719.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1189354367.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1236068157.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-1277906518.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1329287501.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1339989819.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1351912338.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1364771308.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-155387673.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-1590368670.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1653343755.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1683142353.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1747521075.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1787275796.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1823581249.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1827708690.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1870293111.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1904981287.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1950900578.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1981107455.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-2006593941.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-2052266024.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-2053857815.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-236965434.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-253721479.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-265065526.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-265916994.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-287607854.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-296751804.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-32595943.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-352799896.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-410875227.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-483567331.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-488030172.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-627246416.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-657570095.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-678165115.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-700175257.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-71622741.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-832334588.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-833014970.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-836770571.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-874139914.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-90722636.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.-944582596.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.104045321.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.1145041698.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.1150676810.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.1190539850.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.1253902540.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1268567660.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1281182700.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1294227717.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1401538419.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1410407897.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1417836287.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1440279586.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1448923315.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1468211915.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.1479473082.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.154170716.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1588707558.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1638442545.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1666018595.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1728629593.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1729991950.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1730036009.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1780982645.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1829211051.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1860222430.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1951475058.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.1970372980.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.1976437324.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.1980730466.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.2058607253.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.2110049114.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.212056751.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.2122776612.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.230555715.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.322453812.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.323528860.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.327529185.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.361571682.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.458913771.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.508671397.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.534661328.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.537401489.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.562477129.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.608939904.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.619853609.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.628972941.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.71361475.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.782553883.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.830966536.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.92614979.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.927992690.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.931979635.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.96517900.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.976771255.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 696959784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16257 +/- 0.00845457 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.16257 @ 95%CL (1 toyMC)
median expected limit: r < 4.16257 @ 95%CL (1 toyMC)
   68% expected band : 4.16257 < r < 4.16257
   95% expected band : 4.16257 < r < 4.16257
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -643608702
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.22017 +/- 0.011718 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.22017 @ 95%CL (1 toyMC)
median expected limit: r < 6.22017 @ 95%CL (1 toyMC)
   68% expected band : 6.22017 < r < 6.22017
   95% expected band : 6.22017 < r < 6.22017
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 261765171
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.1568 +/- 0.00872169 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.1568 @ 95%CL (1 toyMC)
median expected limit: r < 4.1568 @ 95%CL (1 toyMC)
   68% expected band : 4.1568 < r < 4.1568
   95% expected band : 4.1568 < r < 4.1568
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 496479557
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17957 +/- 0.00935679 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.17957 @ 95%CL (1 toyMC)
median expected limit: r < 4.17957 @ 95%CL (1 toyMC)
   68% expected band : 4.17957 < r < 4.17957
   95% expected band : 4.17957 < r < 4.17957
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1506521103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16648 +/- 0.0101694 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.16648 @ 95%CL (1 toyMC)
median expected limit: r < 4.16648 @ 95%CL (1 toyMC)
   68% expected band : 4.16648 < r < 4.16648
   95% expected band : 4.16648 < r < 4.16648
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -503524945
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.20192 +/- 0.00700266 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.20192 @ 95%CL (1 toyMC)
median expected limit: r < 4.20192 @ 95%CL (1 toyMC)
   68% expected band : 4.20192 < r < 4.20192
   95% expected band : 4.20192 < r < 4.20192
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 23642275
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17282 +/- 0.00946162 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.17282 @ 95%CL (1 toyMC)
median expected limit: r < 4.17282 @ 95%CL (1 toyMC)
   68% expected band : 4.17282 < r < 4.17282
   95% expected band : 4.17282 < r < 4.17282
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1899519843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.19458 +/- 0.00921154 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.19458 @ 95%CL (1 toyMC)
median expected limit: r < 4.19458 @ 95%CL (1 toyMC)
   68% expected band : 4.19458 < r < 4.19458
   95% expected band : 4.19458 < r < 4.19458
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1334312611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16391 +/- 0.00953278 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.16391 @ 95%CL (1 toyMC)
median expected limit: r < 4.16391 @ 95%CL (1 toyMC)
   68% expected band : 4.16391 < r < 4.16391
   95% expected band : 4.16391 < r < 4.16391
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1275702685
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16061 +/- 0.0102172 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.16061 @ 95%CL (1 toyMC)
median expected limit: r < 4.16061 @ 95%CL (1 toyMC)
   68% expected band : 4.16061 < r < 4.16061
   95% expected band : 4.16061 < r < 4.16061
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1130068922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15371 +/- 0.00936149 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.15371 @ 95%CL (1 toyMC)
median expected limit: r < 4.15371 @ 95%CL (1 toyMC)
   68% expected band : 4.15371 < r < 4.15371
   95% expected band : 4.15371 < r < 4.15371
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1324698144
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.19909 +/- 0.00874497 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.19909 @ 95%CL (1 toyMC)
median expected limit: r < 4.19909 @ 95%CL (1 toyMC)
   68% expected band : 4.19909 < r < 4.19909
   95% expected band : 4.19909 < r < 4.19909
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 674032715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18166 +/- 0.0102388 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.18166 @ 95%CL (1 toyMC)
median expected limit: r < 4.18166 @ 95%CL (1 toyMC)
   68% expected band : 4.18166 < r < 4.18166
   95% expected band : 4.18166 < r < 4.18166
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1009681010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17511 +/- 0.0105025 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.17511 @ 95%CL (1 toyMC)
median expected limit: r < 4.17511 @ 95%CL (1 toyMC)
   68% expected band : 4.17511 < r < 4.17511
   95% expected band : 4.17511 < r < 4.17511
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1837484618
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.59307 +/- 0.0109479 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.59307 @ 95%CL (1 toyMC)
median expected limit: r < 6.59307 @ 95%CL (1 toyMC)
   68% expected band : 6.59307 < r < 6.59307
   95% expected band : 6.59307 < r < 6.59307
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 779499034
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.21445 +/- 0.0077377 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.21445 @ 95%CL (1 toyMC)
median expected limit: r < 4.21445 @ 95%CL (1 toyMC)
   68% expected band : 4.21445 < r < 4.21445
   95% expected band : 4.21445 < r < 4.21445
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1024438785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18869 +/- 0.0114079 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.18869 @ 95%CL (1 toyMC)
median expected limit: r < 4.18869 @ 95%CL (1 toyMC)
   68% expected band : 4.18869 < r < 4.18869
   95% expected band : 4.18869 < r < 4.18869
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1389195536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16856 +/- 0.010161 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.16856 @ 95%CL (1 toyMC)
median expected limit: r < 4.16856 @ 95%CL (1 toyMC)
   68% expected band : 4.16856 < r < 4.16856
   95% expected band : 4.16856 < r < 4.16856
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1131665027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18539 +/- 0.00742204 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 4.18539 @ 95%CL (1 toyMC)
median expected limit: r < 4.18539 @ 95%CL (1 toyMC)
   68% expected band : 4.18539 < r < 4.18539
   95% expected band : 4.18539 < r < 4.18539
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 431131321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18913 +/- 0.00829295 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.18913 @ 95%CL (1 toyMC)
median expected limit: r < 4.18913 @ 95%CL (1 toyMC)
   68% expected band : 4.18913 < r < 4.18913
   95% expected band : 4.18913 < r < 4.18913
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 499634407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17822 +/- 0.00979393 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.17822 @ 95%CL (1 toyMC)
median expected limit: r < 4.17822 @ 95%CL (1 toyMC)
   68% expected band : 4.17822 < r < 4.17822
   95% expected band : 4.17822 < r < 4.17822
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -230802744
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15803 +/- 0.00931567 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.15803 @ 95%CL (1 toyMC)
median expected limit: r < 4.15803 @ 95%CL (1 toyMC)
   68% expected band : 4.15803 < r < 4.15803
   95% expected band : 4.15803 < r < 4.15803
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -710923492
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16936 +/- 0.00930577 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.16936 @ 95%CL (1 toyMC)
median expected limit: r < 4.16936 @ 95%CL (1 toyMC)
   68% expected band : 4.16936 < r < 4.16936
   95% expected band : 4.16936 < r < 4.16936
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 241997184
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16588 +/- 0.0108706 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.16588 @ 95%CL (1 toyMC)
median expected limit: r < 4.16588 @ 95%CL (1 toyMC)
   68% expected band : 4.16588 < r < 4.16588
   95% expected band : 4.16588 < r < 4.16588
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1581332935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17169 +/- 0.00943529 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.17169 @ 95%CL (1 toyMC)
median expected limit: r < 4.17169 @ 95%CL (1 toyMC)
   68% expected band : 4.17169 < r < 4.17169
   95% expected band : 4.17169 < r < 4.17169
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1527890217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18818 +/- 0.00807323 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.18818 @ 95%CL (1 toyMC)
median expected limit: r < 4.18818 @ 95%CL (1 toyMC)
   68% expected band : 4.18818 < r < 4.18818
   95% expected band : 4.18818 < r < 4.18818
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2015804808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16361 +/- 0.00984308 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.16361 @ 95%CL (1 toyMC)
median expected limit: r < 4.16361 @ 95%CL (1 toyMC)
   68% expected band : 4.16361 < r < 4.16361
   95% expected band : 4.16361 < r < 4.16361
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -402810059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.31535 +/- 0.00990912 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.31535 @ 95%CL (1 toyMC)
median expected limit: r < 6.31535 @ 95%CL (1 toyMC)
   68% expected band : 6.31535 < r < 6.31535
   95% expected band : 6.31535 < r < 6.31535
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2147218834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15645 +/- 0.0101758 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.15645 @ 95%CL (1 toyMC)
median expected limit: r < 4.15645 @ 95%CL (1 toyMC)
   68% expected band : 4.15645 < r < 4.15645
   95% expected band : 4.15645 < r < 4.15645
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1843819783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16351 +/- 0.00920802 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.16351 @ 95%CL (1 toyMC)
median expected limit: r < 4.16351 @ 95%CL (1 toyMC)
   68% expected band : 4.16351 < r < 4.16351
   95% expected band : 4.16351 < r < 4.16351
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1227476175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17694 +/- 0.0103245 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.17694 @ 95%CL (1 toyMC)
median expected limit: r < 4.17694 @ 95%CL (1 toyMC)
   68% expected band : 4.17694 < r < 4.17694
   95% expected band : 4.17694 < r < 4.17694
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1003137800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17935 +/- 0.0090525 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 4.17935 @ 95%CL (1 toyMC)
median expected limit: r < 4.17935 @ 95%CL (1 toyMC)
   68% expected band : 4.17935 < r < 4.17935
   95% expected band : 4.17935 < r < 4.17935
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1530237085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.19511 +/- 0.00817099 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.19511 @ 95%CL (1 toyMC)
median expected limit: r < 4.19511 @ 95%CL (1 toyMC)
   68% expected band : 4.19511 < r < 4.19511
   95% expected band : 4.19511 < r < 4.19511
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1125495324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16488 +/- 0.0115626 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.16488 @ 95%CL (1 toyMC)
median expected limit: r < 4.16488 @ 95%CL (1 toyMC)
   68% expected band : 4.16488 < r < 4.16488
   95% expected band : 4.16488 < r < 4.16488
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1998061808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18005 +/- 0.00982694 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.18005 @ 95%CL (1 toyMC)
median expected limit: r < 4.18005 @ 95%CL (1 toyMC)
   68% expected band : 4.18005 < r < 4.18005
   95% expected band : 4.18005 < r < 4.18005
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1732953938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17989 +/- 0.00879867 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.17989 @ 95%CL (1 toyMC)
median expected limit: r < 4.17989 @ 95%CL (1 toyMC)
   68% expected band : 4.17989 < r < 4.17989
   95% expected band : 4.17989 < r < 4.17989
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1381990225
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15912 +/- 0.00950616 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 4.15912 @ 95%CL (1 toyMC)
median expected limit: r < 4.15912 @ 95%CL (1 toyMC)
   68% expected band : 4.15912 < r < 4.15912
   95% expected band : 4.15912 < r < 4.15912
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1751249635
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18659 +/- 0.00838206 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.18659 @ 95%CL (1 toyMC)
median expected limit: r < 4.18659 @ 95%CL (1 toyMC)
   68% expected band : 4.18659 < r < 4.18659
   95% expected band : 4.18659 < r < 4.18659
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1607328532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.46649 +/- 0.0100114 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.46649 @ 95%CL (1 toyMC)
median expected limit: r < 6.46649 @ 95%CL (1 toyMC)
   68% expected band : 6.46649 < r < 6.46649
   95% expected band : 6.46649 < r < 6.46649
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 417873471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18386 +/- 0.0102125 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.18386 @ 95%CL (1 toyMC)
median expected limit: r < 4.18386 @ 95%CL (1 toyMC)
   68% expected band : 4.18386 < r < 4.18386
   95% expected band : 4.18386 < r < 4.18386
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 568295801
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.18351 +/- 0.0117729 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.18351 @ 95%CL (1 toyMC)
median expected limit: r < 6.18351 @ 95%CL (1 toyMC)
   68% expected band : 6.18351 < r < 6.18351
   95% expected band : 6.18351 < r < 6.18351
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1547871413
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.20283 +/- 0.00957462 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.20283 @ 95%CL (1 toyMC)
median expected limit: r < 4.20283 @ 95%CL (1 toyMC)
   68% expected band : 4.20283 < r < 4.20283
   95% expected band : 4.20283 < r < 4.20283
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1634448822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15996 +/- 0.00921277 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.15996 @ 95%CL (1 toyMC)
median expected limit: r < 4.15996 @ 95%CL (1 toyMC)
   68% expected band : 4.15996 < r < 4.15996
   95% expected band : 4.15996 < r < 4.15996
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -217565878
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.14598 +/- 0.00745898 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.14598 @ 95%CL (1 toyMC)
median expected limit: r < 4.14598 @ 95%CL (1 toyMC)
   68% expected band : 4.14598 < r < 4.14598
   95% expected band : 4.14598 < r < 4.14598
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1664745146
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16633 +/- 0.0082668 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.16633 @ 95%CL (1 toyMC)
median expected limit: r < 4.16633 @ 95%CL (1 toyMC)
   68% expected band : 4.16633 < r < 4.16633
   95% expected band : 4.16633 < r < 4.16633
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2135792629
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.1572 +/- 0.00878803 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.1572 @ 95%CL (1 toyMC)
median expected limit: r < 4.1572 @ 95%CL (1 toyMC)
   68% expected band : 4.1572 < r < 4.1572
   95% expected band : 4.1572 < r < 4.1572
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 329510082
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.47959 +/- 0.0115714 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.47959 @ 95%CL (1 toyMC)
median expected limit: r < 6.47959 @ 95%CL (1 toyMC)
   68% expected band : 6.47959 < r < 6.47959
   95% expected band : 6.47959 < r < 6.47959
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2077872095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17905 +/- 0.00982239 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.17905 @ 95%CL (1 toyMC)
median expected limit: r < 4.17905 @ 95%CL (1 toyMC)
   68% expected band : 4.17905 < r < 4.17905
   95% expected band : 4.17905 < r < 4.17905
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1749326400
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.02769 +/- 0.0114402 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.02769 @ 95%CL (1 toyMC)
median expected limit: r < 6.02769 @ 95%CL (1 toyMC)
   68% expected band : 6.02769 < r < 6.02769
   95% expected band : 6.02769 < r < 6.02769
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1006809851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15568 +/- 0.00956544 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.15568 @ 95%CL (1 toyMC)
median expected limit: r < 4.15568 @ 95%CL (1 toyMC)
   68% expected band : 4.15568 < r < 4.15568
   95% expected band : 4.15568 < r < 4.15568
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1938608747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.20881 +/- 0.00945267 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.20881 @ 95%CL (1 toyMC)
median expected limit: r < 4.20881 @ 95%CL (1 toyMC)
   68% expected band : 4.20881 < r < 4.20881
   95% expected band : 4.20881 < r < 4.20881
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 892520977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.1724 +/- 0.00843361 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.1724 @ 95%CL (1 toyMC)
median expected limit: r < 4.1724 @ 95%CL (1 toyMC)
   68% expected band : 4.1724 < r < 4.1724
   95% expected band : 4.1724 < r < 4.1724
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 276687816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18295 +/- 0.0113316 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.18295 @ 95%CL (1 toyMC)
median expected limit: r < 4.18295 @ 95%CL (1 toyMC)
   68% expected band : 4.18295 < r < 4.18295
   95% expected band : 4.18295 < r < 4.18295
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 438303725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.2022 +/- 0.00869285 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.2022 @ 95%CL (1 toyMC)
median expected limit: r < 4.2022 @ 95%CL (1 toyMC)
   68% expected band : 4.2022 < r < 4.2022
   95% expected band : 4.2022 < r < 4.2022
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1878671496
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15503 +/- 0.00862898 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.15503 @ 95%CL (1 toyMC)
median expected limit: r < 4.15503 @ 95%CL (1 toyMC)
   68% expected band : 4.15503 < r < 4.15503
   95% expected band : 4.15503 < r < 4.15503
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1296571389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15023 +/- 0.00963585 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.15023 @ 95%CL (1 toyMC)
median expected limit: r < 4.15023 @ 95%CL (1 toyMC)
   68% expected band : 4.15023 < r < 4.15023
   95% expected band : 4.15023 < r < 4.15023
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 112175559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18227 +/- 0.00835826 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.18227 @ 95%CL (1 toyMC)
median expected limit: r < 4.18227 @ 95%CL (1 toyMC)
   68% expected band : 4.18227 < r < 4.18227
   95% expected band : 4.18227 < r < 4.18227
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 985144690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.19855 +/- 0.00967346 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.19855 @ 95%CL (1 toyMC)
median expected limit: r < 4.19855 @ 95%CL (1 toyMC)
   68% expected band : 4.19855 < r < 4.19855
   95% expected band : 4.19855 < r < 4.19855
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 194189918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18775 +/- 0.0100141 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.18775 @ 95%CL (1 toyMC)
median expected limit: r < 4.18775 @ 95%CL (1 toyMC)
   68% expected band : 4.18775 < r < 4.18775
   95% expected band : 4.18775 < r < 4.18775
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1551626602
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17087 +/- 0.00952964 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.17087 @ 95%CL (1 toyMC)
median expected limit: r < 4.17087 @ 95%CL (1 toyMC)
   68% expected band : 4.17087 < r < 4.17087
   95% expected band : 4.17087 < r < 4.17087
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -141103728
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.1622 +/- 0.0105985 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.1622 @ 95%CL (1 toyMC)
median expected limit: r < 4.1622 @ 95%CL (1 toyMC)
   68% expected band : 4.1622 < r < 4.1622
   95% expected band : 4.1622 < r < 4.1622
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2140461375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.14854 +/- 0.00911199 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.14854 @ 95%CL (1 toyMC)
median expected limit: r < 4.14854 @ 95%CL (1 toyMC)
   68% expected band : 4.14854 < r < 4.14854
   95% expected band : 4.14854 < r < 4.14854
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -932892141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16678 +/- 0.00945979 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.16678 @ 95%CL (1 toyMC)
median expected limit: r < 4.16678 @ 95%CL (1 toyMC)
   68% expected band : 4.16678 < r < 4.16678
   95% expected band : 4.16678 < r < 4.16678
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -439526229
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.20112 +/- 0.0114224 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.20112 @ 95%CL (1 toyMC)
median expected limit: r < 4.20112 @ 95%CL (1 toyMC)
   68% expected band : 4.20112 < r < 4.20112
   95% expected band : 4.20112 < r < 4.20112
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 110803964
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16782 +/- 0.00943994 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.16782 @ 95%CL (1 toyMC)
median expected limit: r < 4.16782 @ 95%CL (1 toyMC)
   68% expected band : 4.16782 < r < 4.16782
   95% expected band : 4.16782 < r < 4.16782
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 594702800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16194 +/- 0.00816368 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.16194 @ 95%CL (1 toyMC)
median expected limit: r < 4.16194 @ 95%CL (1 toyMC)
   68% expected band : 4.16194 < r < 4.16194
   95% expected band : 4.16194 < r < 4.16194
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2017123049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.05997 +/- 0.0103627 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.05997 @ 95%CL (1 toyMC)
median expected limit: r < 6.05997 @ 95%CL (1 toyMC)
   68% expected band : 6.05997 < r < 6.05997
   95% expected band : 6.05997 < r < 6.05997
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1912668166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17954 +/- 0.00844623 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.17954 @ 95%CL (1 toyMC)
median expected limit: r < 4.17954 @ 95%CL (1 toyMC)
   68% expected band : 4.17954 < r < 4.17954
   95% expected band : 4.17954 < r < 4.17954
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1286091289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.14445 +/- 0.00889919 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.14445 @ 95%CL (1 toyMC)
median expected limit: r < 4.14445 @ 95%CL (1 toyMC)
   68% expected band : 4.14445 < r < 4.14445
   95% expected band : 4.14445 < r < 4.14445
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -99739649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.60939 +/- 0.0116021 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.60939 @ 95%CL (1 toyMC)
median expected limit: r < 6.60939 @ 95%CL (1 toyMC)
   68% expected band : 6.60939 < r < 6.60939
   95% expected band : 6.60939 < r < 6.60939
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1509005168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17611 +/- 0.00872544 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.17611 @ 95%CL (1 toyMC)
median expected limit: r < 4.17611 @ 95%CL (1 toyMC)
   68% expected band : 4.17611 < r < 4.17611
   95% expected band : 4.17611 < r < 4.17611
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 797977324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.20141 +/- 0.00851981 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.20141 @ 95%CL (1 toyMC)
median expected limit: r < 4.20141 @ 95%CL (1 toyMC)
   68% expected band : 4.20141 < r < 4.20141
   95% expected band : 4.20141 < r < 4.20141
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -446708424
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.14184 +/- 0.0109537 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.14184 @ 95%CL (1 toyMC)
median expected limit: r < 4.14184 @ 95%CL (1 toyMC)
   68% expected band : 4.14184 < r < 4.14184
   95% expected band : 4.14184 < r < 4.14184
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -600595910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17688 +/- 0.010037 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.17688 @ 95%CL (1 toyMC)
median expected limit: r < 4.17688 @ 95%CL (1 toyMC)
   68% expected band : 4.17688 < r < 4.17688
   95% expected band : 4.17688 < r < 4.17688
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1399846044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.1734 +/- 0.00764118 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.1734 @ 95%CL (1 toyMC)
median expected limit: r < 4.1734 @ 95%CL (1 toyMC)
   68% expected band : 4.1734 < r < 4.1734
   95% expected band : 4.1734 < r < 4.1734
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 157924994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18347 +/- 0.00957723 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.18347 @ 95%CL (1 toyMC)
median expected limit: r < 4.18347 @ 95%CL (1 toyMC)
   68% expected band : 4.18347 < r < 4.18347
   95% expected band : 4.18347 < r < 4.18347
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2142593261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15428 +/- 0.0103396 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.15428 @ 95%CL (1 toyMC)
median expected limit: r < 4.15428 @ 95%CL (1 toyMC)
   68% expected band : 4.15428 < r < 4.15428
   95% expected band : 4.15428 < r < 4.15428
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1032595897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18889 +/- 0.00866916 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.18889 @ 95%CL (1 toyMC)
median expected limit: r < 4.18889 @ 95%CL (1 toyMC)
   68% expected band : 4.18889 < r < 4.18889
   95% expected band : 4.18889 < r < 4.18889
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1108411444
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.19671 +/- 0.0105497 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.19671 @ 95%CL (1 toyMC)
median expected limit: r < 4.19671 @ 95%CL (1 toyMC)
   68% expected band : 4.19671 < r < 4.19671
   95% expected band : 4.19671 < r < 4.19671
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 750582582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.1851 +/- 0.0086072 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 4.1851 @ 95%CL (1 toyMC)
median expected limit: r < 4.1851 @ 95%CL (1 toyMC)
   68% expected band : 4.1851 < r < 4.1851
   95% expected band : 4.1851 < r < 4.1851
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 898758692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.20146 +/- 0.0111373 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.20146 @ 95%CL (1 toyMC)
median expected limit: r < 4.20146 @ 95%CL (1 toyMC)
   68% expected band : 4.20146 < r < 4.20146
   95% expected band : 4.20146 < r < 4.20146
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1446404030
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.19883 +/- 0.0100232 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.19883 @ 95%CL (1 toyMC)
median expected limit: r < 4.19883 @ 95%CL (1 toyMC)
   68% expected band : 4.19883 < r < 4.19883
   95% expected band : 4.19883 < r < 4.19883
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -469601301
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15416 +/- 0.00763559 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 4.15416 @ 95%CL (1 toyMC)
median expected limit: r < 4.15416 @ 95%CL (1 toyMC)
   68% expected band : 4.15416 < r < 4.15416
   95% expected band : 4.15416 < r < 4.15416
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -249561241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18145 +/- 0.00992665 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.18145 @ 95%CL (1 toyMC)
median expected limit: r < 4.18145 @ 95%CL (1 toyMC)
   68% expected band : 4.18145 < r < 4.18145
   95% expected band : 4.18145 < r < 4.18145
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1771692128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.14708 +/- 0.0092083 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.14708 @ 95%CL (1 toyMC)
median expected limit: r < 4.14708 @ 95%CL (1 toyMC)
   68% expected band : 4.14708 < r < 4.14708
   95% expected band : 4.14708 < r < 4.14708
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2055808391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18572 +/- 0.00854865 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 4.18572 @ 95%CL (1 toyMC)
median expected limit: r < 4.18572 @ 95%CL (1 toyMC)
   68% expected band : 4.18572 < r < 4.18572
   95% expected band : 4.18572 < r < 4.18572
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2053562915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.64869 +/- 0.0126183 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.64869 @ 95%CL (1 toyMC)
median expected limit: r < 6.64869 @ 95%CL (1 toyMC)
   68% expected band : 6.64869 < r < 6.64869
   95% expected band : 6.64869 < r < 6.64869
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1869607871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16379 +/- 0.00964882 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.16379 @ 95%CL (1 toyMC)
median expected limit: r < 4.16379 @ 95%CL (1 toyMC)
   68% expected band : 4.16379 < r < 4.16379
   95% expected band : 4.16379 < r < 4.16379
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1717758959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15276 +/- 0.00832529 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.15276 @ 95%CL (1 toyMC)
median expected limit: r < 4.15276 @ 95%CL (1 toyMC)
   68% expected band : 4.15276 < r < 4.15276
   95% expected band : 4.15276 < r < 4.15276
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -239827653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.19179 +/- 0.0107959 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.19179 @ 95%CL (1 toyMC)
median expected limit: r < 4.19179 @ 95%CL (1 toyMC)
   68% expected band : 4.19179 < r < 4.19179
   95% expected band : 4.19179 < r < 4.19179
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -103528624
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.14741 +/- 0.0108591 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.14741 @ 95%CL (1 toyMC)
median expected limit: r < 4.14741 @ 95%CL (1 toyMC)
   68% expected band : 4.14741 < r < 4.14741
   95% expected band : 4.14741 < r < 4.14741
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -954122421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17459 +/- 0.00967785 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.17459 @ 95%CL (1 toyMC)
median expected limit: r < 4.17459 @ 95%CL (1 toyMC)
   68% expected band : 4.17459 < r < 4.17459
   95% expected band : 4.17459 < r < 4.17459
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 236169213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18059 +/- 0.0086448 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.18059 @ 95%CL (1 toyMC)
median expected limit: r < 4.18059 @ 95%CL (1 toyMC)
   68% expected band : 4.18059 < r < 4.18059
   95% expected band : 4.18059 < r < 4.18059
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1144295349
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17042 +/- 0.00992943 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.17042 @ 95%CL (1 toyMC)
median expected limit: r < 4.17042 @ 95%CL (1 toyMC)
   68% expected band : 4.17042 < r < 4.17042
   95% expected band : 4.17042 < r < 4.17042
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 319174060
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15395 +/- 0.00815007 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.15395 @ 95%CL (1 toyMC)
median expected limit: r < 4.15395 @ 95%CL (1 toyMC)
   68% expected band : 4.15395 < r < 4.15395
   95% expected band : 4.15395 < r < 4.15395
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -608644320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17184 +/- 0.00960573 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.17184 @ 95%CL (1 toyMC)
median expected limit: r < 4.17184 @ 95%CL (1 toyMC)
   68% expected band : 4.17184 < r < 4.17184
   95% expected band : 4.17184 < r < 4.17184
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1612962570
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.1791 +/- 0.0106304 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 4.1791 @ 95%CL (1 toyMC)
median expected limit: r < 4.1791 @ 95%CL (1 toyMC)
   68% expected band : 4.1791 < r < 4.1791
   95% expected band : 4.1791 < r < 4.1791
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 970826592
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18816 +/- 0.00976631 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.18816 @ 95%CL (1 toyMC)
median expected limit: r < 4.18816 @ 95%CL (1 toyMC)
   68% expected band : 4.18816 < r < 4.18816
   95% expected band : 4.18816 < r < 4.18816
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -622762787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.16883 +/- 0.00881291 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.16883 @ 95%CL (1 toyMC)
median expected limit: r < 4.16883 @ 95%CL (1 toyMC)
   68% expected band : 4.16883 < r < 4.16883
   95% expected band : 4.16883 < r < 4.16883
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -276153715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17134 +/- 0.00935827 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 4.17134 @ 95%CL (1 toyMC)
median expected limit: r < 4.17134 @ 95%CL (1 toyMC)
   68% expected band : 4.17134 < r < 4.17134
   95% expected band : 4.17134 < r < 4.17134
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine7000.MarkovChainMC.mH7000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH7000.-1003137800.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH7000.-1006809851.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH7000.-1009681010.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH7000.-1032595897.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH7000.-103528624.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH7000.-1130068922.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH7000.-1227476175.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH7000.-1324698144.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH7000.-1381990225.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH7000.-1399846044.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH7000.-141103728.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH7000.-1506521103.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH7000.-1509005168.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH7000.-1527890217.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH7000.-1551626602.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH7000.-1607328532.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH7000.-1634448822.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH7000.-1664745146.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH7000.-1749326400.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH7000.-1869607871.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH7000.-1912668166.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH7000.-1998061808.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH7000.-2053562915.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH7000.-2077872095.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH7000.-2140461375.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH7000.-2142593261.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH7000.-2147218834.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH7000.-217565878.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH7000.-230802744.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH7000.-239827653.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH7000.-249561241.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH7000.-276153715.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH7000.-402810059.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH7000.-439526229.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH7000.-446708424.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH7000.-469601301.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH7000.-503524945.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH7000.-600595910.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH7000.-608644320.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH7000.-622762787.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH7000.-643608702.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH7000.-710923492.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH7000.-932892141.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH7000.-954122421.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH7000.-99739649.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH7000.1024438785.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH7000.110803964.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH7000.1108411444.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH7000.112175559.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH7000.1125495324.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH7000.1131665027.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH7000.1144295349.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH7000.1275702685.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH7000.1286091289.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH7000.1296571389.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH7000.1334312611.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH7000.1389195536.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH7000.1446404030.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH7000.1530237085.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH7000.1547871413.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH7000.157924994.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH7000.1581332935.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH7000.1612962570.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH7000.1717758959.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH7000.1732953938.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH7000.1751249635.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH7000.1771692128.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH7000.1837484618.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH7000.1843819783.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH7000.1878671496.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH7000.1899519843.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH7000.1938608747.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH7000.194189918.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH7000.2015804808.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH7000.2017123049.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH7000.2055808391.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH7000.2135792629.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH7000.236169213.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH7000.23642275.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH7000.241997184.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH7000.261765171.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH7000.276687816.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH7000.319174060.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH7000.329510082.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH7000.417873471.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH7000.431131321.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH7000.438303725.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH7000.496479557.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH7000.499634407.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH7000.568295801.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH7000.594702800.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH7000.674032715.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH7000.696959784.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH7000.750582582.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH7000.779499034.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH7000.797977324.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH7000.892520977.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH7000.898758692.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH7000.970826592.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH7000.985144690.root
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/
hadd Target path: higgsCombine7000.MarkovChainMC.mH7000.root:/toys
