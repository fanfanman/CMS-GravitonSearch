 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1843768300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4143 +/- 0.00396508 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.4143 @ 95%CL (1 toyMC)
median expected limit: r < 2.4143 @ 95%CL (1 toyMC)
   68% expected band : 2.4143 < r < 2.4143
   95% expected band : 2.4143 < r < 2.4143
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -165869904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.35434 +/- 0.00597234 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.35434 @ 95%CL (1 toyMC)
median expected limit: r < 2.35434 @ 95%CL (1 toyMC)
   68% expected band : 2.35434 < r < 2.35434
   95% expected band : 2.35434 < r < 2.35434
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1189868308
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59363 +/- 0.00578758 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.59363 @ 95%CL (1 toyMC)
median expected limit: r < 2.59363 @ 95%CL (1 toyMC)
   68% expected band : 2.59363 < r < 2.59363
   95% expected band : 2.59363 < r < 2.59363
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1409740787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.08603 +/- 0.00555224 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.08603 @ 95%CL (1 toyMC)
median expected limit: r < 2.08603 @ 95%CL (1 toyMC)
   68% expected band : 2.08603 < r < 2.08603
   95% expected band : 2.08603 < r < 2.08603
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 569822270
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2789 +/- 0.00516076 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.2789 @ 95%CL (1 toyMC)
median expected limit: r < 1.2789 @ 95%CL (1 toyMC)
   68% expected band : 1.2789 < r < 1.2789
   95% expected band : 1.2789 < r < 1.2789
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -312324570
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.945 +/- 0.00396641 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.945 @ 95%CL (1 toyMC)
median expected limit: r < 2.945 @ 95%CL (1 toyMC)
   68% expected band : 2.945 < r < 2.945
   95% expected band : 2.945 < r < 2.945
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1844335130
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10345 +/- 0.00657001 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.10345 @ 95%CL (1 toyMC)
median expected limit: r < 3.10345 @ 95%CL (1 toyMC)
   68% expected band : 3.10345 < r < 3.10345
   95% expected band : 3.10345 < r < 3.10345
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1631760897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.20369 +/- 0.00559445 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.20369 @ 95%CL (1 toyMC)
median expected limit: r < 3.20369 @ 95%CL (1 toyMC)
   68% expected band : 3.20369 < r < 3.20369
   95% expected band : 3.20369 < r < 3.20369
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1711489067
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.06052 +/- 0.00507288 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.06052 @ 95%CL (1 toyMC)
median expected limit: r < 2.06052 @ 95%CL (1 toyMC)
   68% expected band : 2.06052 < r < 2.06052
   95% expected band : 2.06052 < r < 2.06052
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1340157609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76192 +/- 0.00476757 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.76192 @ 95%CL (1 toyMC)
median expected limit: r < 1.76192 @ 95%CL (1 toyMC)
   68% expected band : 1.76192 < r < 1.76192
   95% expected band : 1.76192 < r < 1.76192
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 614017335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.97867 +/- 0.00528995 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.97867 @ 95%CL (1 toyMC)
median expected limit: r < 2.97867 @ 95%CL (1 toyMC)
   68% expected band : 2.97867 < r < 2.97867
   95% expected band : 2.97867 < r < 2.97867
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -596380802
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59799 +/- 0.00586015 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.59799 @ 95%CL (1 toyMC)
median expected limit: r < 2.59799 @ 95%CL (1 toyMC)
   68% expected band : 2.59799 < r < 2.59799
   95% expected band : 2.59799 < r < 2.59799
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -356375592
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.746 +/- 0.00750331 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.746 @ 95%CL (1 toyMC)
median expected limit: r < 2.746 @ 95%CL (1 toyMC)
   68% expected band : 2.746 < r < 2.746
   95% expected band : 2.746 < r < 2.746
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1247911545
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13553 +/- 0.00608009 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.13553 @ 95%CL (1 toyMC)
median expected limit: r < 2.13553 @ 95%CL (1 toyMC)
   68% expected band : 2.13553 < r < 2.13553
   95% expected band : 2.13553 < r < 2.13553
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 182820071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8148 +/- 0.0046663 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.8148 @ 95%CL (1 toyMC)
median expected limit: r < 1.8148 @ 95%CL (1 toyMC)
   68% expected band : 1.8148 < r < 1.8148
   95% expected band : 1.8148 < r < 1.8148
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 496138471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6592 +/- 0.00631615 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.6592 @ 95%CL (1 toyMC)
median expected limit: r < 2.6592 @ 95%CL (1 toyMC)
   68% expected band : 2.6592 < r < 2.6592
   95% expected band : 2.6592 < r < 2.6592
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -232037565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64849 +/- 0.00502147 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.64849 @ 95%CL (1 toyMC)
median expected limit: r < 1.64849 @ 95%CL (1 toyMC)
   68% expected band : 1.64849 < r < 1.64849
   95% expected band : 1.64849 < r < 1.64849
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2120282538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.45224 +/- 0.00642319 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.45224 @ 95%CL (1 toyMC)
median expected limit: r < 2.45224 @ 95%CL (1 toyMC)
   68% expected band : 2.45224 < r < 2.45224
   95% expected band : 2.45224 < r < 2.45224
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1590950212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47444 +/- 0.00521919 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.47444 @ 95%CL (1 toyMC)
median expected limit: r < 2.47444 @ 95%CL (1 toyMC)
   68% expected band : 2.47444 < r < 2.47444
   95% expected band : 2.47444 < r < 2.47444
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 61163407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63952 +/- 0.00569648 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.63952 @ 95%CL (1 toyMC)
median expected limit: r < 1.63952 @ 95%CL (1 toyMC)
   68% expected band : 1.63952 < r < 1.63952
   95% expected band : 1.63952 < r < 1.63952
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 522474450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12644 +/- 0.00622527 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.12644 @ 95%CL (1 toyMC)
median expected limit: r < 2.12644 @ 95%CL (1 toyMC)
   68% expected band : 2.12644 < r < 2.12644
   95% expected band : 2.12644 < r < 2.12644
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1215681991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4565 +/- 0.0048614 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.4565 @ 95%CL (1 toyMC)
median expected limit: r < 1.4565 @ 95%CL (1 toyMC)
   68% expected band : 1.4565 < r < 1.4565
   95% expected band : 1.4565 < r < 1.4565
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1141320796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39072 +/- 0.00512502 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.39072 @ 95%CL (1 toyMC)
median expected limit: r < 2.39072 @ 95%CL (1 toyMC)
   68% expected band : 2.39072 < r < 2.39072
   95% expected band : 2.39072 < r < 2.39072
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1078297636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8215 +/- 0.0056737 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.8215 @ 95%CL (1 toyMC)
median expected limit: r < 1.8215 @ 95%CL (1 toyMC)
   68% expected band : 1.8215 < r < 1.8215
   95% expected band : 1.8215 < r < 1.8215
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 750936649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.15586 +/- 0.00484352 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.15586 @ 95%CL (1 toyMC)
median expected limit: r < 3.15586 @ 95%CL (1 toyMC)
   68% expected band : 3.15586 < r < 3.15586
   95% expected band : 3.15586 < r < 3.15586
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -778372140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42024 +/- 0.00504311 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.42024 @ 95%CL (1 toyMC)
median expected limit: r < 2.42024 @ 95%CL (1 toyMC)
   68% expected band : 2.42024 < r < 2.42024
   95% expected band : 2.42024 < r < 2.42024
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1153633267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13794 +/- 0.00525067 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.13794 @ 95%CL (1 toyMC)
median expected limit: r < 3.13794 @ 95%CL (1 toyMC)
   68% expected band : 3.13794 < r < 3.13794
   95% expected band : 3.13794 < r < 3.13794
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1995416171
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.97846 +/- 0.00610236 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.97846 @ 95%CL (1 toyMC)
median expected limit: r < 1.97846 @ 95%CL (1 toyMC)
   68% expected band : 1.97846 < r < 1.97846
   95% expected band : 1.97846 < r < 1.97846
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1702248670
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81017 +/- 0.00519081 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.81017 @ 95%CL (1 toyMC)
median expected limit: r < 1.81017 @ 95%CL (1 toyMC)
   68% expected band : 1.81017 < r < 1.81017
   95% expected band : 1.81017 < r < 1.81017
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1981631943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.90527 +/- 0.00591561 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.90527 @ 95%CL (1 toyMC)
median expected limit: r < 1.90527 @ 95%CL (1 toyMC)
   68% expected band : 1.90527 < r < 1.90527
   95% expected band : 1.90527 < r < 1.90527
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1198345602
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.31389 +/- 0.00544427 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.31389 @ 95%CL (1 toyMC)
median expected limit: r < 2.31389 @ 95%CL (1 toyMC)
   68% expected band : 2.31389 < r < 2.31389
   95% expected band : 2.31389 < r < 2.31389
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1260800276
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59345 +/- 0.00530471 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.59345 @ 95%CL (1 toyMC)
median expected limit: r < 1.59345 @ 95%CL (1 toyMC)
   68% expected band : 1.59345 < r < 1.59345
   95% expected band : 1.59345 < r < 1.59345
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1793676804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.62984 +/- 0.0042574 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.62984 @ 95%CL (1 toyMC)
median expected limit: r < 1.62984 @ 95%CL (1 toyMC)
   68% expected band : 1.62984 < r < 1.62984
   95% expected band : 1.62984 < r < 1.62984
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1651030654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.44515 +/- 0.00486825 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.44515 @ 95%CL (1 toyMC)
median expected limit: r < 2.44515 @ 95%CL (1 toyMC)
   68% expected band : 2.44515 < r < 2.44515
   95% expected band : 2.44515 < r < 2.44515
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -127038277
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.97232 +/- 0.00474936 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.97232 @ 95%CL (1 toyMC)
median expected limit: r < 1.97232 @ 95%CL (1 toyMC)
   68% expected band : 1.97232 < r < 1.97232
   95% expected band : 1.97232 < r < 1.97232
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 855995617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.16959 +/- 0.00613177 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.16959 @ 95%CL (1 toyMC)
median expected limit: r < 2.16959 @ 95%CL (1 toyMC)
   68% expected band : 2.16959 < r < 2.16959
   95% expected band : 2.16959 < r < 2.16959
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -490585430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10607 +/- 0.00574623 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.10607 @ 95%CL (1 toyMC)
median expected limit: r < 2.10607 @ 95%CL (1 toyMC)
   68% expected band : 2.10607 < r < 2.10607
   95% expected band : 2.10607 < r < 2.10607
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 829642666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6343 +/- 0.00545211 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.6343 @ 95%CL (1 toyMC)
median expected limit: r < 1.6343 @ 95%CL (1 toyMC)
   68% expected band : 1.6343 < r < 1.6343
   95% expected band : 1.6343 < r < 1.6343
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2127608259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.32928 +/- 0.00491208 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.32928 @ 95%CL (1 toyMC)
median expected limit: r < 3.32928 @ 95%CL (1 toyMC)
   68% expected band : 3.32928 < r < 3.32928
   95% expected band : 3.32928 < r < 3.32928
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1468894772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.25909 +/- 0.0059364 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.25909 @ 95%CL (1 toyMC)
median expected limit: r < 2.25909 @ 95%CL (1 toyMC)
   68% expected band : 2.25909 < r < 2.25909
   95% expected band : 2.25909 < r < 2.25909
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -565248945
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.44636 +/- 0.00489761 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.44636 @ 95%CL (1 toyMC)
median expected limit: r < 2.44636 @ 95%CL (1 toyMC)
   68% expected band : 2.44636 < r < 2.44636
   95% expected band : 2.44636 < r < 2.44636
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1133058764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29197 +/- 0.00658345 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.29197 @ 95%CL (1 toyMC)
median expected limit: r < 2.29197 @ 95%CL (1 toyMC)
   68% expected band : 2.29197 < r < 2.29197
   95% expected band : 2.29197 < r < 2.29197
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1350211483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.62722 +/- 0.00493902 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.62722 @ 95%CL (1 toyMC)
median expected limit: r < 1.62722 @ 95%CL (1 toyMC)
   68% expected band : 1.62722 < r < 1.62722
   95% expected band : 1.62722 < r < 1.62722
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -675025231
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.16364 +/- 0.0046038 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.16364 @ 95%CL (1 toyMC)
median expected limit: r < 2.16364 @ 95%CL (1 toyMC)
   68% expected band : 2.16364 < r < 2.16364
   95% expected band : 2.16364 < r < 2.16364
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1879039548
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.02853 +/- 0.00495838 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.02853 @ 95%CL (1 toyMC)
median expected limit: r < 2.02853 @ 95%CL (1 toyMC)
   68% expected band : 2.02853 < r < 2.02853
   95% expected band : 2.02853 < r < 2.02853
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1636865188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59213 +/- 0.00394546 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.59213 @ 95%CL (1 toyMC)
median expected limit: r < 1.59213 @ 95%CL (1 toyMC)
   68% expected band : 1.59213 < r < 1.59213
   95% expected band : 1.59213 < r < 1.59213
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1252009813
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45394 +/- 0.00552542 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.45394 @ 95%CL (1 toyMC)
median expected limit: r < 1.45394 @ 95%CL (1 toyMC)
   68% expected band : 1.45394 < r < 1.45394
   95% expected band : 1.45394 < r < 1.45394
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1428393793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37839 +/- 0.00613785 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.37839 @ 95%CL (1 toyMC)
median expected limit: r < 2.37839 @ 95%CL (1 toyMC)
   68% expected band : 2.37839 < r < 2.37839
   95% expected band : 2.37839 < r < 2.37839
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1049471323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.97398 +/- 0.00466122 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.97398 @ 95%CL (1 toyMC)
median expected limit: r < 1.97398 @ 95%CL (1 toyMC)
   68% expected band : 1.97398 < r < 1.97398
   95% expected band : 1.97398 < r < 1.97398
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1272139393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.19925 +/- 0.00484142 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.19925 @ 95%CL (1 toyMC)
median expected limit: r < 2.19925 @ 95%CL (1 toyMC)
   68% expected band : 2.19925 < r < 2.19925
   95% expected band : 2.19925 < r < 2.19925
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1051464530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.20868 +/- 0.00464657 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.20868 @ 95%CL (1 toyMC)
median expected limit: r < 2.20868 @ 95%CL (1 toyMC)
   68% expected band : 2.20868 < r < 2.20868
   95% expected band : 2.20868 < r < 2.20868
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1437882623
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.62307 +/- 0.00557227 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.62307 @ 95%CL (1 toyMC)
median expected limit: r < 1.62307 @ 95%CL (1 toyMC)
   68% expected band : 1.62307 < r < 1.62307
   95% expected band : 1.62307 < r < 1.62307
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 913431689
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25793 +/- 0.0048037 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.25793 @ 95%CL (1 toyMC)
median expected limit: r < 1.25793 @ 95%CL (1 toyMC)
   68% expected band : 1.25793 < r < 1.25793
   95% expected band : 1.25793 < r < 1.25793
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -80432374
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81021 +/- 0.00462919 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.81021 @ 95%CL (1 toyMC)
median expected limit: r < 1.81021 @ 95%CL (1 toyMC)
   68% expected band : 1.81021 < r < 1.81021
   95% expected band : 1.81021 < r < 1.81021
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1657384299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51538 +/- 0.00364877 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.51538 @ 95%CL (1 toyMC)
median expected limit: r < 1.51538 @ 95%CL (1 toyMC)
   68% expected band : 1.51538 < r < 1.51538
   95% expected band : 1.51538 < r < 1.51538
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1499357587
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.15955 +/- 0.00511037 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.15955 @ 95%CL (1 toyMC)
median expected limit: r < 2.15955 @ 95%CL (1 toyMC)
   68% expected band : 2.15955 < r < 2.15955
   95% expected band : 2.15955 < r < 2.15955
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1454627307
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69279 +/- 0.00537303 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.69279 @ 95%CL (1 toyMC)
median expected limit: r < 1.69279 @ 95%CL (1 toyMC)
   68% expected band : 1.69279 < r < 1.69279
   95% expected band : 1.69279 < r < 1.69279
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -518495954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.69352 +/- 0.00563254 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.69352 @ 95%CL (1 toyMC)
median expected limit: r < 2.69352 @ 95%CL (1 toyMC)
   68% expected band : 2.69352 < r < 2.69352
   95% expected band : 2.69352 < r < 2.69352
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -506383762
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68396 +/- 0.00448373 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.68396 @ 95%CL (1 toyMC)
median expected limit: r < 1.68396 @ 95%CL (1 toyMC)
   68% expected band : 1.68396 < r < 1.68396
   95% expected band : 1.68396 < r < 1.68396
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1628141975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43103 +/- 0.00462777 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.43103 @ 95%CL (1 toyMC)
median expected limit: r < 1.43103 @ 95%CL (1 toyMC)
   68% expected band : 1.43103 < r < 1.43103
   95% expected band : 1.43103 < r < 1.43103
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1739146040
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.38199 +/- 0.00644834 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.38199 @ 95%CL (1 toyMC)
median expected limit: r < 3.38199 @ 95%CL (1 toyMC)
   68% expected band : 3.38199 < r < 3.38199
   95% expected band : 3.38199 < r < 3.38199
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -839249708
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78697 +/- 0.00728067 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.78697 @ 95%CL (1 toyMC)
median expected limit: r < 2.78697 @ 95%CL (1 toyMC)
   68% expected band : 2.78697 < r < 2.78697
   95% expected band : 2.78697 < r < 2.78697
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 972131645
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74261 +/- 0.00537133 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.74261 @ 95%CL (1 toyMC)
median expected limit: r < 1.74261 @ 95%CL (1 toyMC)
   68% expected band : 1.74261 < r < 1.74261
   95% expected band : 1.74261 < r < 1.74261
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1952680907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99756 +/- 0.00529913 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.99756 @ 95%CL (1 toyMC)
median expected limit: r < 1.99756 @ 95%CL (1 toyMC)
   68% expected band : 1.99756 < r < 1.99756
   95% expected band : 1.99756 < r < 1.99756
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 175936765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58406 +/- 0.00578159 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.58406 @ 95%CL (1 toyMC)
median expected limit: r < 2.58406 @ 95%CL (1 toyMC)
   68% expected band : 2.58406 < r < 2.58406
   95% expected band : 2.58406 < r < 2.58406
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 856257993
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.43717 +/- 0.00516152 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.43717 @ 95%CL (1 toyMC)
median expected limit: r < 3.43717 @ 95%CL (1 toyMC)
   68% expected band : 3.43717 < r < 3.43717
   95% expected band : 3.43717 < r < 3.43717
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1868163795
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00114 +/- 0.00494489 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.00114 @ 95%CL (1 toyMC)
median expected limit: r < 2.00114 @ 95%CL (1 toyMC)
   68% expected band : 2.00114 < r < 2.00114
   95% expected band : 2.00114 < r < 2.00114
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 150660955
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.44415 +/- 0.00571548 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.44415 @ 95%CL (1 toyMC)
median expected limit: r < 2.44415 @ 95%CL (1 toyMC)
   68% expected band : 2.44415 < r < 2.44415
   95% expected band : 2.44415 < r < 2.44415
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1967649744
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60933 +/- 0.00534223 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.60933 @ 95%CL (1 toyMC)
median expected limit: r < 2.60933 @ 95%CL (1 toyMC)
   68% expected band : 2.60933 < r < 2.60933
   95% expected band : 2.60933 < r < 2.60933
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 618527378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.90525 +/- 0.00538137 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.90525 @ 95%CL (1 toyMC)
median expected limit: r < 1.90525 @ 95%CL (1 toyMC)
   68% expected band : 1.90525 < r < 1.90525
   95% expected band : 1.90525 < r < 1.90525
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -157371865
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70617 +/- 0.00539404 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.70617 @ 95%CL (1 toyMC)
median expected limit: r < 1.70617 @ 95%CL (1 toyMC)
   68% expected band : 1.70617 < r < 1.70617
   95% expected band : 1.70617 < r < 1.70617
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1378196422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.19166 +/- 0.00511843 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.19166 @ 95%CL (1 toyMC)
median expected limit: r < 2.19166 @ 95%CL (1 toyMC)
   68% expected band : 2.19166 < r < 2.19166
   95% expected band : 2.19166 < r < 2.19166
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1889416874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6376 +/- 0.00751242 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.6376 @ 95%CL (1 toyMC)
median expected limit: r < 2.6376 @ 95%CL (1 toyMC)
   68% expected band : 2.6376 < r < 2.6376
   95% expected band : 2.6376 < r < 2.6376
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -714001962
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.88534 +/- 0.00557905 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.88534 @ 95%CL (1 toyMC)
median expected limit: r < 1.88534 @ 95%CL (1 toyMC)
   68% expected band : 1.88534 < r < 1.88534
   95% expected band : 1.88534 < r < 1.88534
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2146488010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46109 +/- 0.00503611 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.46109 @ 95%CL (1 toyMC)
median expected limit: r < 2.46109 @ 95%CL (1 toyMC)
   68% expected band : 2.46109 < r < 2.46109
   95% expected band : 2.46109 < r < 2.46109
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1662663004
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.23534 +/- 0.00489107 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.23534 @ 95%CL (1 toyMC)
median expected limit: r < 2.23534 @ 95%CL (1 toyMC)
   68% expected band : 2.23534 < r < 2.23534
   95% expected band : 2.23534 < r < 2.23534
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2035860494
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58572 +/- 0.00657797 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.58572 @ 95%CL (1 toyMC)
median expected limit: r < 2.58572 @ 95%CL (1 toyMC)
   68% expected band : 2.58572 < r < 2.58572
   95% expected band : 2.58572 < r < 2.58572
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1540587680
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80756 +/- 0.00430951 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.80756 @ 95%CL (1 toyMC)
median expected limit: r < 1.80756 @ 95%CL (1 toyMC)
   68% expected band : 1.80756 < r < 1.80756
   95% expected band : 1.80756 < r < 1.80756
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1583698388
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61393 +/- 0.00427138 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.61393 @ 95%CL (1 toyMC)
median expected limit: r < 1.61393 @ 95%CL (1 toyMC)
   68% expected band : 1.61393 < r < 1.61393
   95% expected band : 1.61393 < r < 1.61393
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1731820692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.35538 +/- 0.00534854 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.35538 @ 95%CL (1 toyMC)
median expected limit: r < 2.35538 @ 95%CL (1 toyMC)
   68% expected band : 2.35538 < r < 2.35538
   95% expected band : 2.35538 < r < 2.35538
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1633790314
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58966 +/- 0.00405094 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.58966 @ 95%CL (1 toyMC)
median expected limit: r < 1.58966 @ 95%CL (1 toyMC)
   68% expected band : 1.58966 < r < 1.58966
   95% expected band : 1.58966 < r < 1.58966
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1142004485
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57725 +/- 0.0049332 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.57725 @ 95%CL (1 toyMC)
median expected limit: r < 1.57725 @ 95%CL (1 toyMC)
   68% expected band : 1.57725 < r < 1.57725
   95% expected band : 1.57725 < r < 1.57725
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -137792286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38023 +/- 0.00511756 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.38023 @ 95%CL (1 toyMC)
median expected limit: r < 1.38023 @ 95%CL (1 toyMC)
   68% expected band : 1.38023 < r < 1.38023
   95% expected band : 1.38023 < r < 1.38023
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -874401117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6187 +/- 0.00520291 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.6187 @ 95%CL (1 toyMC)
median expected limit: r < 1.6187 @ 95%CL (1 toyMC)
   68% expected band : 1.6187 < r < 1.6187
   95% expected band : 1.6187 < r < 1.6187
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1600280859
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.95397 +/- 0.00725983 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 3.95397 @ 95%CL (1 toyMC)
median expected limit: r < 3.95397 @ 95%CL (1 toyMC)
   68% expected band : 3.95397 < r < 3.95397
   95% expected band : 3.95397 < r < 3.95397
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1333936316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39168 +/- 0.0058661 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.39168 @ 95%CL (1 toyMC)
median expected limit: r < 2.39168 @ 95%CL (1 toyMC)
   68% expected band : 2.39168 < r < 2.39168
   95% expected band : 2.39168 < r < 2.39168
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -947508482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6768 +/- 0.00523436 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.6768 @ 95%CL (1 toyMC)
median expected limit: r < 2.6768 @ 95%CL (1 toyMC)
   68% expected band : 2.6768 < r < 2.6768
   95% expected band : 2.6768 < r < 2.6768
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1062825169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33151 +/- 0.00492069 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.33151 @ 95%CL (1 toyMC)
median expected limit: r < 1.33151 @ 95%CL (1 toyMC)
   68% expected band : 1.33151 < r < 1.33151
   95% expected band : 1.33151 < r < 1.33151
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2128466071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85634 +/- 0.0060068 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.85634 @ 95%CL (1 toyMC)
median expected limit: r < 1.85634 @ 95%CL (1 toyMC)
   68% expected band : 1.85634 < r < 1.85634
   95% expected band : 1.85634 < r < 1.85634
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1962855518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42661 +/- 0.00487235 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.42661 @ 95%CL (1 toyMC)
median expected limit: r < 1.42661 @ 95%CL (1 toyMC)
   68% expected band : 1.42661 < r < 1.42661
   95% expected band : 1.42661 < r < 1.42661
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1114215801
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.80945 +/- 0.00494102 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.80945 @ 95%CL (1 toyMC)
median expected limit: r < 2.80945 @ 95%CL (1 toyMC)
   68% expected band : 2.80945 < r < 2.80945
   95% expected band : 2.80945 < r < 2.80945
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2044342892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60339 +/- 0.00568546 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.60339 @ 95%CL (1 toyMC)
median expected limit: r < 2.60339 @ 95%CL (1 toyMC)
   68% expected band : 2.60339 < r < 2.60339
   95% expected band : 2.60339 < r < 2.60339
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1887998774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.29341 +/- 0.0068784 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.29341 @ 95%CL (1 toyMC)
median expected limit: r < 3.29341 @ 95%CL (1 toyMC)
   68% expected band : 3.29341 < r < 3.29341
   95% expected band : 3.29341 < r < 3.29341
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1064570615
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85368 +/- 0.00469821 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.85368 @ 95%CL (1 toyMC)
median expected limit: r < 1.85368 @ 95%CL (1 toyMC)
   68% expected band : 1.85368 < r < 1.85368
   95% expected band : 1.85368 < r < 1.85368
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1966297888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78638 +/- 0.00507138 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.78638 @ 95%CL (1 toyMC)
median expected limit: r < 2.78638 @ 95%CL (1 toyMC)
   68% expected band : 2.78638 < r < 2.78638
   95% expected band : 2.78638 < r < 2.78638
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -272192157
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.94711 +/- 0.00573835 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.94711 @ 95%CL (1 toyMC)
median expected limit: r < 2.94711 @ 95%CL (1 toyMC)
   68% expected band : 2.94711 < r < 2.94711
   95% expected band : 2.94711 < r < 2.94711
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1106046789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81145 +/- 0.00539535 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.81145 @ 95%CL (1 toyMC)
median expected limit: r < 1.81145 @ 95%CL (1 toyMC)
   68% expected band : 1.81145 < r < 1.81145
   95% expected band : 1.81145 < r < 1.81145
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1243029084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26782 +/- 0.00383791 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.26782 @ 95%CL (1 toyMC)
median expected limit: r < 1.26782 @ 95%CL (1 toyMC)
   68% expected band : 1.26782 < r < 1.26782
   95% expected band : 1.26782 < r < 1.26782
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1346938241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33398 +/- 0.00563717 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.33398 @ 95%CL (1 toyMC)
median expected limit: r < 2.33398 @ 95%CL (1 toyMC)
   68% expected band : 2.33398 < r < 2.33398
   95% expected band : 2.33398 < r < 2.33398
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1833654217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.03868 +/- 0.00483897 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.03868 @ 95%CL (1 toyMC)
median expected limit: r < 2.03868 @ 95%CL (1 toyMC)
   68% expected band : 2.03868 < r < 2.03868
   95% expected band : 2.03868 < r < 2.03868
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1049471323.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1106046789.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1153633267.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1189868308.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1243029084.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1252009813.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-127038277.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1272139393.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1340157609.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1346938241.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1350211483.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-137792286.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1378196422.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1409740787.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1454627307.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1468894772.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-157371865.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1583698388.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1600280859.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1628141975.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1633790314.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1651030654.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-165869904.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-1662663004.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-1731820692.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-1739146040.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-1843768300.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-1868163795.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-1962855518.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-1966297888.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-2044342892.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-2120282538.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-2128466071.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-2146488010.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-232037565.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-272192157.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-312324570.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-356375592.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-490585430.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-506383762.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-518495954.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-565248945.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-596380802.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-675025231.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-714001962.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-778372140.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-80432374.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-839249708.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-874401117.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.-947508482.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1051464530.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1062825169.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1064570615.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1078297636.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1114215801.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1133058764.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1141320796.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1142004485.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1198345602.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1215681991.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1247911545.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1260800276.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1333936316.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1428393793.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1437882623.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1499357587.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.150660955.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1540587680.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1590950212.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1631760897.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1636865188.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1657384299.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1702248670.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1711489067.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.175936765.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.1793676804.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.182820071.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.1833654217.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.1844335130.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.1879039548.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.1887998774.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.1889416874.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.1952680907.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.1967649744.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.1981631943.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.1995416171.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.2035860494.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.2127608259.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.496138471.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.522474450.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.569822270.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.61163407.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.614017335.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.618527378.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.750936649.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.829642666.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.855995617.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.856257993.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.913431689.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.972131645.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1676242450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.921678 +/- 0.00329957 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.921678 @ 95%CL (1 toyMC)
median expected limit: r < 0.921678 @ 95%CL (1 toyMC)
   68% expected band : 0.921678 < r < 0.921678
   95% expected band : 0.921678 < r < 0.921678
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1379953988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.935863 +/- 0.00375301 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.935863 @ 95%CL (1 toyMC)
median expected limit: r < 0.935863 @ 95%CL (1 toyMC)
   68% expected band : 0.935863 < r < 0.935863
   95% expected band : 0.935863 < r < 0.935863
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 404958964
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13653 +/- 0.00458568 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.13653 @ 95%CL (1 toyMC)
median expected limit: r < 1.13653 @ 95%CL (1 toyMC)
   68% expected band : 1.13653 < r < 1.13653
   95% expected band : 1.13653 < r < 1.13653
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 925005270
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.944119 +/- 0.00430003 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.944119 @ 95%CL (1 toyMC)
median expected limit: r < 0.944119 @ 95%CL (1 toyMC)
   68% expected band : 0.944119 < r < 0.944119
   95% expected band : 0.944119 < r < 0.944119
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -348883119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.8289 +/- 0.00385241 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.8289 @ 95%CL (1 toyMC)
median expected limit: r < 0.8289 @ 95%CL (1 toyMC)
   68% expected band : 0.8289 < r < 0.8289
   95% expected band : 0.8289 < r < 0.8289
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -662443797
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.83037 +/- 0.0035881 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.83037 @ 95%CL (1 toyMC)
median expected limit: r < 0.83037 @ 95%CL (1 toyMC)
   68% expected band : 0.83037 < r < 0.83037
   95% expected band : 0.83037 < r < 0.83037
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -302469228
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01887 +/- 0.00448143 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.01887 @ 95%CL (1 toyMC)
median expected limit: r < 1.01887 @ 95%CL (1 toyMC)
   68% expected band : 1.01887 < r < 1.01887
   95% expected band : 1.01887 < r < 1.01887
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1079953246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24821 +/- 0.00327655 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.24821 @ 95%CL (1 toyMC)
median expected limit: r < 1.24821 @ 95%CL (1 toyMC)
   68% expected band : 1.24821 < r < 1.24821
   95% expected band : 1.24821 < r < 1.24821
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2146783247
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50171 +/- 0.00328007 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.50171 @ 95%CL (1 toyMC)
median expected limit: r < 1.50171 @ 95%CL (1 toyMC)
   68% expected band : 1.50171 < r < 1.50171
   95% expected band : 1.50171 < r < 1.50171
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -558216961
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23979 +/- 0.00401146 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.23979 @ 95%CL (1 toyMC)
median expected limit: r < 1.23979 @ 95%CL (1 toyMC)
   68% expected band : 1.23979 < r < 1.23979
   95% expected band : 1.23979 < r < 1.23979
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1824352714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34194 +/- 0.00428045 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.34194 @ 95%CL (1 toyMC)
median expected limit: r < 1.34194 @ 95%CL (1 toyMC)
   68% expected band : 1.34194 < r < 1.34194
   95% expected band : 1.34194 < r < 1.34194
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 366889706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57775 +/- 0.00362734 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.57775 @ 95%CL (1 toyMC)
median expected limit: r < 1.57775 @ 95%CL (1 toyMC)
   68% expected band : 1.57775 < r < 1.57775
   95% expected band : 1.57775 < r < 1.57775
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1068279530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06195 +/- 0.00424731 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.06195 @ 95%CL (1 toyMC)
median expected limit: r < 1.06195 @ 95%CL (1 toyMC)
   68% expected band : 1.06195 < r < 1.06195
   95% expected band : 1.06195 < r < 1.06195
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1016915645
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2442 +/- 0.00428708 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.2442 @ 95%CL (1 toyMC)
median expected limit: r < 1.2442 @ 95%CL (1 toyMC)
   68% expected band : 1.2442 < r < 1.2442
   95% expected band : 1.2442 < r < 1.2442
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1981646381
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64713 +/- 0.00408973 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.64713 @ 95%CL (1 toyMC)
median expected limit: r < 1.64713 @ 95%CL (1 toyMC)
   68% expected band : 1.64713 < r < 1.64713
   95% expected band : 1.64713 < r < 1.64713
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1412300750
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45399 +/- 0.00450547 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.45399 @ 95%CL (1 toyMC)
median expected limit: r < 1.45399 @ 95%CL (1 toyMC)
   68% expected band : 1.45399 < r < 1.45399
   95% expected band : 1.45399 < r < 1.45399
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 997374500
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03171 +/- 0.00400673 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.03171 @ 95%CL (1 toyMC)
median expected limit: r < 1.03171 @ 95%CL (1 toyMC)
   68% expected band : 1.03171 < r < 1.03171
   95% expected band : 1.03171 < r < 1.03171
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1637294541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09249 +/- 0.0041164 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.09249 @ 95%CL (1 toyMC)
median expected limit: r < 1.09249 @ 95%CL (1 toyMC)
   68% expected band : 1.09249 < r < 1.09249
   95% expected band : 1.09249 < r < 1.09249
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1303848942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.727566 +/- 0.00308465 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.727566 @ 95%CL (1 toyMC)
median expected limit: r < 0.727566 @ 95%CL (1 toyMC)
   68% expected band : 0.727566 < r < 0.727566
   95% expected band : 0.727566 < r < 0.727566
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1111659477
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.876877 +/- 0.00316566 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.876877 @ 95%CL (1 toyMC)
median expected limit: r < 0.876877 @ 95%CL (1 toyMC)
   68% expected band : 0.876877 < r < 0.876877
   95% expected band : 0.876877 < r < 0.876877
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -697484768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.97531 +/- 0.00362878 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.97531 @ 95%CL (1 toyMC)
median expected limit: r < 0.97531 @ 95%CL (1 toyMC)
   68% expected band : 0.97531 < r < 0.97531
   95% expected band : 0.97531 < r < 0.97531
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1905763988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.797298 +/- 0.00443039 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.797298 @ 95%CL (1 toyMC)
median expected limit: r < 0.797298 @ 95%CL (1 toyMC)
   68% expected band : 0.797298 < r < 0.797298
   95% expected band : 0.797298 < r < 0.797298
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2101306269
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28224 +/- 0.00447126 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.28224 @ 95%CL (1 toyMC)
median expected limit: r < 1.28224 @ 95%CL (1 toyMC)
   68% expected band : 1.28224 < r < 1.28224
   95% expected band : 1.28224 < r < 1.28224
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 344618501
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07524 +/- 0.00386262 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.07524 @ 95%CL (1 toyMC)
median expected limit: r < 1.07524 @ 95%CL (1 toyMC)
   68% expected band : 1.07524 < r < 1.07524
   95% expected band : 1.07524 < r < 1.07524
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1917214497
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12229 +/- 0.00387932 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.12229 @ 95%CL (1 toyMC)
median expected limit: r < 1.12229 @ 95%CL (1 toyMC)
   68% expected band : 1.12229 < r < 1.12229
   95% expected band : 1.12229 < r < 1.12229
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1156096325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02317 +/- 0.00409237 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.02317 @ 95%CL (1 toyMC)
median expected limit: r < 1.02317 @ 95%CL (1 toyMC)
   68% expected band : 1.02317 < r < 1.02317
   95% expected band : 1.02317 < r < 1.02317
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1972894754
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23501 +/- 0.0042948 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.23501 @ 95%CL (1 toyMC)
median expected limit: r < 1.23501 @ 95%CL (1 toyMC)
   68% expected band : 1.23501 < r < 1.23501
   95% expected band : 1.23501 < r < 1.23501
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1467194403
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.995443 +/- 0.00412344 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.995443 @ 95%CL (1 toyMC)
median expected limit: r < 0.995443 @ 95%CL (1 toyMC)
   68% expected band : 0.995443 < r < 0.995443
   95% expected band : 0.995443 < r < 0.995443
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -359627596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14371 +/- 0.00375429 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.14371 @ 95%CL (1 toyMC)
median expected limit: r < 1.14371 @ 95%CL (1 toyMC)
   68% expected band : 1.14371 < r < 1.14371
   95% expected band : 1.14371 < r < 1.14371
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -198974765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.0892 +/- 0.00403212 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.0892 @ 95%CL (1 toyMC)
median expected limit: r < 2.0892 @ 95%CL (1 toyMC)
   68% expected band : 2.0892 < r < 2.0892
   95% expected band : 2.0892 < r < 2.0892
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 493835248
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00864 +/- 0.00567872 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.00864 @ 95%CL (1 toyMC)
median expected limit: r < 1.00864 @ 95%CL (1 toyMC)
   68% expected band : 1.00864 < r < 1.00864
   95% expected band : 1.00864 < r < 1.00864
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 932414414
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.6646 +/- 0.00326299 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.6646 @ 95%CL (1 toyMC)
median expected limit: r < 0.6646 @ 95%CL (1 toyMC)
   68% expected band : 0.6646 < r < 0.6646
   95% expected band : 0.6646 < r < 0.6646
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -731167878
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31446 +/- 0.00456862 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.31446 @ 95%CL (1 toyMC)
median expected limit: r < 1.31446 @ 95%CL (1 toyMC)
   68% expected band : 1.31446 < r < 1.31446
   95% expected band : 1.31446 < r < 1.31446
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 512076605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.30655 +/- 0.00480689 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.30655 @ 95%CL (1 toyMC)
median expected limit: r < 2.30655 @ 95%CL (1 toyMC)
   68% expected band : 2.30655 < r < 2.30655
   95% expected band : 2.30655 < r < 2.30655
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1255394616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37143 +/- 0.00427632 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.37143 @ 95%CL (1 toyMC)
median expected limit: r < 2.37143 @ 95%CL (1 toyMC)
   68% expected band : 2.37143 < r < 2.37143
   95% expected band : 2.37143 < r < 2.37143
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -622592676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67966 +/- 0.00438537 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.67966 @ 95%CL (1 toyMC)
median expected limit: r < 1.67966 @ 95%CL (1 toyMC)
   68% expected band : 1.67966 < r < 1.67966
   95% expected band : 1.67966 < r < 1.67966
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 607553134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33775 +/- 0.00390368 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.33775 @ 95%CL (1 toyMC)
median expected limit: r < 1.33775 @ 95%CL (1 toyMC)
   68% expected band : 1.33775 < r < 1.33775
   95% expected band : 1.33775 < r < 1.33775
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 23825168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04684 +/- 0.00457338 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.04684 @ 95%CL (1 toyMC)
median expected limit: r < 2.04684 @ 95%CL (1 toyMC)
   68% expected band : 2.04684 < r < 2.04684
   95% expected band : 2.04684 < r < 2.04684
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2087239492
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0678 +/- 0.00418465 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.0678 @ 95%CL (1 toyMC)
median expected limit: r < 1.0678 @ 95%CL (1 toyMC)
   68% expected band : 1.0678 < r < 1.0678
   95% expected band : 1.0678 < r < 1.0678
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -203613862
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.910496 +/- 0.0041493 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.910496 @ 95%CL (1 toyMC)
median expected limit: r < 0.910496 @ 95%CL (1 toyMC)
   68% expected band : 0.910496 < r < 0.910496
   95% expected band : 0.910496 < r < 0.910496
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -617786353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.93962 +/- 0.00384726 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.93962 @ 95%CL (1 toyMC)
median expected limit: r < 1.93962 @ 95%CL (1 toyMC)
   68% expected band : 1.93962 < r < 1.93962
   95% expected band : 1.93962 < r < 1.93962
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1975541550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36206 +/- 0.00497487 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.36206 @ 95%CL (1 toyMC)
median expected limit: r < 1.36206 @ 95%CL (1 toyMC)
   68% expected band : 1.36206 < r < 1.36206
   95% expected band : 1.36206 < r < 1.36206
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -613456268
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39471 +/- 0.00461163 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.39471 @ 95%CL (1 toyMC)
median expected limit: r < 1.39471 @ 95%CL (1 toyMC)
   68% expected band : 1.39471 < r < 1.39471
   95% expected band : 1.39471 < r < 1.39471
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 94273770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37458 +/- 0.00432754 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.37458 @ 95%CL (1 toyMC)
median expected limit: r < 1.37458 @ 95%CL (1 toyMC)
   68% expected band : 1.37458 < r < 1.37458
   95% expected band : 1.37458 < r < 1.37458
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1177022851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13139 +/- 0.00395274 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.13139 @ 95%CL (1 toyMC)
median expected limit: r < 1.13139 @ 95%CL (1 toyMC)
   68% expected band : 1.13139 < r < 1.13139
   95% expected band : 1.13139 < r < 1.13139
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2059858421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22329 +/- 0.00442572 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.22329 @ 95%CL (1 toyMC)
median expected limit: r < 1.22329 @ 95%CL (1 toyMC)
   68% expected band : 1.22329 < r < 1.22329
   95% expected band : 1.22329 < r < 1.22329
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1576979713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30885 +/- 0.00354897 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.30885 @ 95%CL (1 toyMC)
median expected limit: r < 1.30885 @ 95%CL (1 toyMC)
   68% expected band : 1.30885 < r < 1.30885
   95% expected band : 1.30885 < r < 1.30885
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1762942381
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31503 +/- 0.00518922 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.31503 @ 95%CL (1 toyMC)
median expected limit: r < 1.31503 @ 95%CL (1 toyMC)
   68% expected band : 1.31503 < r < 1.31503
   95% expected band : 1.31503 < r < 1.31503
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 696786525
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73831 +/- 0.00378515 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.73831 @ 95%CL (1 toyMC)
median expected limit: r < 1.73831 @ 95%CL (1 toyMC)
   68% expected band : 1.73831 < r < 1.73831
   95% expected band : 1.73831 < r < 1.73831
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -575995173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.919725 +/- 0.00365138 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.919725 @ 95%CL (1 toyMC)
median expected limit: r < 0.919725 @ 95%CL (1 toyMC)
   68% expected band : 0.919725 < r < 0.919725
   95% expected band : 0.919725 < r < 0.919725
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2006007756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.956159 +/- 0.00443351 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.956159 @ 95%CL (1 toyMC)
median expected limit: r < 0.956159 @ 95%CL (1 toyMC)
   68% expected band : 0.956159 < r < 0.956159
   95% expected band : 0.956159 < r < 0.956159
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 618076044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50306 +/- 0.00442488 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.50306 @ 95%CL (1 toyMC)
median expected limit: r < 1.50306 @ 95%CL (1 toyMC)
   68% expected band : 1.50306 < r < 1.50306
   95% expected band : 1.50306 < r < 1.50306
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -382249445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.770422 +/- 0.00397824 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.770422 @ 95%CL (1 toyMC)
median expected limit: r < 0.770422 @ 95%CL (1 toyMC)
   68% expected band : 0.770422 < r < 0.770422
   95% expected band : 0.770422 < r < 0.770422
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1998119978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.928956 +/- 0.00411615 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.928956 @ 95%CL (1 toyMC)
median expected limit: r < 0.928956 @ 95%CL (1 toyMC)
   68% expected band : 0.928956 < r < 0.928956
   95% expected band : 0.928956 < r < 0.928956
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 628586907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22126 +/- 0.00363859 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.22126 @ 95%CL (1 toyMC)
median expected limit: r < 1.22126 @ 95%CL (1 toyMC)
   68% expected band : 1.22126 < r < 1.22126
   95% expected band : 1.22126 < r < 1.22126
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1275659974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51526 +/- 0.00370868 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.51526 @ 95%CL (1 toyMC)
median expected limit: r < 1.51526 @ 95%CL (1 toyMC)
   68% expected band : 1.51526 < r < 1.51526
   95% expected band : 1.51526 < r < 1.51526
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1030972140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.88268 +/- 0.00444758 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.88268 @ 95%CL (1 toyMC)
median expected limit: r < 1.88268 @ 95%CL (1 toyMC)
   68% expected band : 1.88268 < r < 1.88268
   95% expected band : 1.88268 < r < 1.88268
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1434605062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31148 +/- 0.00394775 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.31148 @ 95%CL (1 toyMC)
median expected limit: r < 1.31148 @ 95%CL (1 toyMC)
   68% expected band : 1.31148 < r < 1.31148
   95% expected band : 1.31148 < r < 1.31148
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2033914089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.986032 +/- 0.00341539 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.986032 @ 95%CL (1 toyMC)
median expected limit: r < 0.986032 @ 95%CL (1 toyMC)
   68% expected band : 0.986032 < r < 0.986032
   95% expected band : 0.986032 < r < 0.986032
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -342291079
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07844 +/- 0.00413241 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.07844 @ 95%CL (1 toyMC)
median expected limit: r < 1.07844 @ 95%CL (1 toyMC)
   68% expected band : 1.07844 < r < 1.07844
   95% expected band : 1.07844 < r < 1.07844
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -102283946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.862968 +/- 0.00411935 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.862968 @ 95%CL (1 toyMC)
median expected limit: r < 0.862968 @ 95%CL (1 toyMC)
   68% expected band : 0.862968 < r < 0.862968
   95% expected band : 0.862968 < r < 0.862968
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1851695587
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.95851 +/- 0.00483112 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.95851 @ 95%CL (1 toyMC)
median expected limit: r < 2.95851 @ 95%CL (1 toyMC)
   68% expected band : 2.95851 < r < 2.95851
   95% expected band : 2.95851 < r < 2.95851
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2139614418
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54766 +/- 0.00310551 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.54766 @ 95%CL (1 toyMC)
median expected limit: r < 1.54766 @ 95%CL (1 toyMC)
   68% expected band : 1.54766 < r < 1.54766
   95% expected band : 1.54766 < r < 1.54766
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1634925299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.966507 +/- 0.00431242 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.966507 @ 95%CL (1 toyMC)
median expected limit: r < 0.966507 @ 95%CL (1 toyMC)
   68% expected band : 0.966507 < r < 0.966507
   95% expected band : 0.966507 < r < 0.966507
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 562968716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2393 +/- 0.00369016 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.2393 @ 95%CL (1 toyMC)
median expected limit: r < 1.2393 @ 95%CL (1 toyMC)
   68% expected band : 1.2393 < r < 1.2393
   95% expected band : 1.2393 < r < 1.2393
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -668155069
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65962 +/- 0.00646857 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.65962 @ 95%CL (1 toyMC)
median expected limit: r < 1.65962 @ 95%CL (1 toyMC)
   68% expected band : 1.65962 < r < 1.65962
   95% expected band : 1.65962 < r < 1.65962
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1487381791
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15798 +/- 0.0040321 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.15798 @ 95%CL (1 toyMC)
median expected limit: r < 1.15798 @ 95%CL (1 toyMC)
   68% expected band : 1.15798 < r < 1.15798
   95% expected band : 1.15798 < r < 1.15798
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1990880462
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36723 +/- 0.00357874 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.36723 @ 95%CL (1 toyMC)
median expected limit: r < 1.36723 @ 95%CL (1 toyMC)
   68% expected band : 1.36723 < r < 1.36723
   95% expected band : 1.36723 < r < 1.36723
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 902469417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.920644 +/- 0.00317824 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.920644 @ 95%CL (1 toyMC)
median expected limit: r < 0.920644 @ 95%CL (1 toyMC)
   68% expected band : 0.920644 < r < 0.920644
   95% expected band : 0.920644 < r < 0.920644
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 760027456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13828 +/- 0.00414887 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.13828 @ 95%CL (1 toyMC)
median expected limit: r < 1.13828 @ 95%CL (1 toyMC)
   68% expected band : 1.13828 < r < 1.13828
   95% expected band : 1.13828 < r < 1.13828
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -269195582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22581 +/- 0.00469339 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.22581 @ 95%CL (1 toyMC)
median expected limit: r < 1.22581 @ 95%CL (1 toyMC)
   68% expected band : 1.22581 < r < 1.22581
   95% expected band : 1.22581 < r < 1.22581
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 342037110
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.909056 +/- 0.00440654 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.909056 @ 95%CL (1 toyMC)
median expected limit: r < 0.909056 @ 95%CL (1 toyMC)
   68% expected band : 0.909056 < r < 0.909056
   95% expected band : 0.909056 < r < 0.909056
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -460481184
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59682 +/- 0.00378245 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.59682 @ 95%CL (1 toyMC)
median expected limit: r < 1.59682 @ 95%CL (1 toyMC)
   68% expected band : 1.59682 < r < 1.59682
   95% expected band : 1.59682 < r < 1.59682
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1683381098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17997 +/- 0.00360454 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.17997 @ 95%CL (1 toyMC)
median expected limit: r < 2.17997 @ 95%CL (1 toyMC)
   68% expected band : 2.17997 < r < 2.17997
   95% expected band : 2.17997 < r < 2.17997
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1816998488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.922325 +/- 0.00400002 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.922325 @ 95%CL (1 toyMC)
median expected limit: r < 0.922325 @ 95%CL (1 toyMC)
   68% expected band : 0.922325 < r < 0.922325
   95% expected band : 0.922325 < r < 0.922325
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1169391605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22373 +/- 0.00421599 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.22373 @ 95%CL (1 toyMC)
median expected limit: r < 1.22373 @ 95%CL (1 toyMC)
   68% expected band : 1.22373 < r < 1.22373
   95% expected band : 1.22373 < r < 1.22373
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1153360214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02558 +/- 0.00390696 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.02558 @ 95%CL (1 toyMC)
median expected limit: r < 1.02558 @ 95%CL (1 toyMC)
   68% expected band : 1.02558 < r < 1.02558
   95% expected band : 1.02558 < r < 1.02558
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 859730613
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32148 +/- 0.00447127 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.32148 @ 95%CL (1 toyMC)
median expected limit: r < 1.32148 @ 95%CL (1 toyMC)
   68% expected band : 1.32148 < r < 1.32148
   95% expected band : 1.32148 < r < 1.32148
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1124743321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05819 +/- 0.00382111 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.05819 @ 95%CL (1 toyMC)
median expected limit: r < 1.05819 @ 95%CL (1 toyMC)
   68% expected band : 1.05819 < r < 1.05819
   95% expected band : 1.05819 < r < 1.05819
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1439808455
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3051 +/- 0.0045201 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.3051 @ 95%CL (1 toyMC)
median expected limit: r < 1.3051 @ 95%CL (1 toyMC)
   68% expected band : 1.3051 < r < 1.3051
   95% expected band : 1.3051 < r < 1.3051
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1586056518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44503 +/- 0.00397357 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.44503 @ 95%CL (1 toyMC)
median expected limit: r < 1.44503 @ 95%CL (1 toyMC)
   68% expected band : 1.44503 < r < 1.44503
   95% expected band : 1.44503 < r < 1.44503
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1437008731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73747 +/- 0.00406879 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.73747 @ 95%CL (1 toyMC)
median expected limit: r < 1.73747 @ 95%CL (1 toyMC)
   68% expected band : 1.73747 < r < 1.73747
   95% expected band : 1.73747 < r < 1.73747
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -230740867
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01563 +/- 0.00412201 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.01563 @ 95%CL (1 toyMC)
median expected limit: r < 1.01563 @ 95%CL (1 toyMC)
   68% expected band : 1.01563 < r < 1.01563
   95% expected band : 1.01563 < r < 1.01563
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2085525066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51441 +/- 0.00476784 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.51441 @ 95%CL (1 toyMC)
median expected limit: r < 1.51441 @ 95%CL (1 toyMC)
   68% expected band : 1.51441 < r < 1.51441
   95% expected band : 1.51441 < r < 1.51441
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 739145267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28588 +/- 0.00507125 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.28588 @ 95%CL (1 toyMC)
median expected limit: r < 1.28588 @ 95%CL (1 toyMC)
   68% expected band : 1.28588 < r < 1.28588
   95% expected band : 1.28588 < r < 1.28588
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -810617526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50938 +/- 0.00384481 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.50938 @ 95%CL (1 toyMC)
median expected limit: r < 1.50938 @ 95%CL (1 toyMC)
   68% expected band : 1.50938 < r < 1.50938
   95% expected band : 1.50938 < r < 1.50938
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 519481451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20416 +/- 0.00391845 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.20416 @ 95%CL (1 toyMC)
median expected limit: r < 1.20416 @ 95%CL (1 toyMC)
   68% expected band : 1.20416 < r < 1.20416
   95% expected band : 1.20416 < r < 1.20416
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1521467511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.916877 +/- 0.00385243 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.916877 @ 95%CL (1 toyMC)
median expected limit: r < 0.916877 @ 95%CL (1 toyMC)
   68% expected band : 0.916877 < r < 0.916877
   95% expected band : 0.916877 < r < 0.916877
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 158876424
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26994 +/- 0.00504986 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.26994 @ 95%CL (1 toyMC)
median expected limit: r < 1.26994 @ 95%CL (1 toyMC)
   68% expected band : 1.26994 < r < 1.26994
   95% expected band : 1.26994 < r < 1.26994
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -647861404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27126 +/- 0.00373395 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.27126 @ 95%CL (1 toyMC)
median expected limit: r < 1.27126 @ 95%CL (1 toyMC)
   68% expected band : 1.27126 < r < 1.27126
   95% expected band : 1.27126 < r < 1.27126
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -693779917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31467 +/- 0.00469871 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.31467 @ 95%CL (1 toyMC)
median expected limit: r < 1.31467 @ 95%CL (1 toyMC)
   68% expected band : 1.31467 < r < 1.31467
   95% expected band : 1.31467 < r < 1.31467
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -858974501
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.89835 +/- 0.00411638 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.89835 @ 95%CL (1 toyMC)
median expected limit: r < 0.89835 @ 95%CL (1 toyMC)
   68% expected band : 0.89835 < r < 0.89835
   95% expected band : 0.89835 < r < 0.89835
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -740920625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55922 +/- 0.00484053 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.55922 @ 95%CL (1 toyMC)
median expected limit: r < 1.55922 @ 95%CL (1 toyMC)
   68% expected band : 1.55922 < r < 1.55922
   95% expected band : 1.55922 < r < 1.55922
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 801836417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12608 +/- 0.00377534 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.12608 @ 95%CL (1 toyMC)
median expected limit: r < 1.12608 @ 95%CL (1 toyMC)
   68% expected band : 1.12608 < r < 1.12608
   95% expected band : 1.12608 < r < 1.12608
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 920272409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07828 +/- 0.00399705 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.07828 @ 95%CL (1 toyMC)
median expected limit: r < 1.07828 @ 95%CL (1 toyMC)
   68% expected band : 1.07828 < r < 1.07828
   95% expected band : 1.07828 < r < 1.07828
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1903025960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14901 +/- 0.00471263 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.14901 @ 95%CL (1 toyMC)
median expected limit: r < 1.14901 @ 95%CL (1 toyMC)
   68% expected band : 1.14901 < r < 1.14901
   95% expected band : 1.14901 < r < 1.14901
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -530237681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.836036 +/- 0.00358695 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.836036 @ 95%CL (1 toyMC)
median expected limit: r < 0.836036 @ 95%CL (1 toyMC)
   68% expected band : 0.836036 < r < 0.836036
   95% expected band : 0.836036 < r < 0.836036
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1156129375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44736 +/- 0.00424565 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.44736 @ 95%CL (1 toyMC)
median expected limit: r < 1.44736 @ 95%CL (1 toyMC)
   68% expected band : 1.44736 < r < 1.44736
   95% expected band : 1.44736 < r < 1.44736
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1858408799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04716 +/- 0.0035846 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.04716 @ 95%CL (1 toyMC)
median expected limit: r < 1.04716 @ 95%CL (1 toyMC)
   68% expected band : 1.04716 < r < 1.04716
   95% expected band : 1.04716 < r < 1.04716
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 36615498
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30002 +/- 0.00345401 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.30002 @ 95%CL (1 toyMC)
median expected limit: r < 1.30002 @ 95%CL (1 toyMC)
   68% expected band : 1.30002 < r < 1.30002
   95% expected band : 1.30002 < r < 1.30002
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1016915645.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-102283946.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1030972140.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1068279530.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1079953246.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1124743321.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1153360214.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1156129375.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1169391605.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1275659974.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1439808455.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1467194403.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1487381791.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1521467511.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1586056518.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1683381098.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1816998488.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1858408799.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1917214497.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1975541550.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1981646381.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-198974765.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-203613862.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-2087239492.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-2139614418.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-2146783247.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-230740867.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-269195582.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-302469228.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-342291079.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-348883119.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-359627596.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-382249445.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-460481184.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-530237681.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-558216961.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-575995173.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-613456268.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-617786353.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-622592676.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-647861404.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-662443797.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-668155069.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-693779917.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-697484768.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-731167878.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-740920625.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-810617526.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-858974501.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.1111659477.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1156096325.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1177022851.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1255394616.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1303848942.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1379953988.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1412300750.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1434605062.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1437008731.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1576979713.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.158876424.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1634925299.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1637294541.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1676242450.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1762942381.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1824352714.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1851695587.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1903025960.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1905763988.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1972894754.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1990880462.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1998119978.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.2006007756.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.2033914089.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.2059858421.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.2085525066.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.2101306269.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.23825168.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.342037110.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.344618501.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.36615498.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.366889706.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.404958964.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.493835248.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.512076605.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.519481451.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.562968716.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.607553134.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.618076044.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.628586907.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.696786525.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.739145267.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.760027456.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.801836417.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.859730613.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.902469417.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.920272409.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.925005270.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.932414414.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.94273770.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.997374500.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 804710513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.666773 +/- 0.00349373 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.666773 @ 95%CL (1 toyMC)
median expected limit: r < 0.666773 @ 95%CL (1 toyMC)
   68% expected band : 0.666773 < r < 0.666773
   95% expected band : 0.666773 < r < 0.666773
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1609656457
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.962892 +/- 0.00431944 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.962892 @ 95%CL (1 toyMC)
median expected limit: r < 0.962892 @ 95%CL (1 toyMC)
   68% expected band : 0.962892 < r < 0.962892
   95% expected band : 0.962892 < r < 0.962892
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -153112878
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.672299 +/- 0.00348719 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.672299 @ 95%CL (1 toyMC)
median expected limit: r < 0.672299 @ 95%CL (1 toyMC)
   68% expected band : 0.672299 < r < 0.672299
   95% expected band : 0.672299 < r < 0.672299
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -115616566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.881483 +/- 0.00377264 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.881483 @ 95%CL (1 toyMC)
median expected limit: r < 0.881483 @ 95%CL (1 toyMC)
   68% expected band : 0.881483 < r < 0.881483
   95% expected band : 0.881483 < r < 0.881483
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 704066907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.686731 +/- 0.00413428 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.686731 @ 95%CL (1 toyMC)
median expected limit: r < 0.686731 @ 95%CL (1 toyMC)
   68% expected band : 0.686731 < r < 0.686731
   95% expected band : 0.686731 < r < 0.686731
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1695462102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07509 +/- 0.00375595 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.07509 @ 95%CL (1 toyMC)
median expected limit: r < 1.07509 @ 95%CL (1 toyMC)
   68% expected band : 1.07509 < r < 1.07509
   95% expected band : 1.07509 < r < 1.07509
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 59024319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.674656 +/- 0.00446505 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.674656 @ 95%CL (1 toyMC)
median expected limit: r < 0.674656 @ 95%CL (1 toyMC)
   68% expected band : 0.674656 < r < 0.674656
   95% expected band : 0.674656 < r < 0.674656
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 711691386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05171 +/- 0.00358978 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.05171 @ 95%CL (1 toyMC)
median expected limit: r < 1.05171 @ 95%CL (1 toyMC)
   68% expected band : 1.05171 < r < 1.05171
   95% expected band : 1.05171 < r < 1.05171
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1293579113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.657639 +/- 0.00426266 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.657639 @ 95%CL (1 toyMC)
median expected limit: r < 0.657639 @ 95%CL (1 toyMC)
   68% expected band : 0.657639 < r < 0.657639
   95% expected band : 0.657639 < r < 0.657639
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -52989778
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33093 +/- 0.00340112 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.33093 @ 95%CL (1 toyMC)
median expected limit: r < 1.33093 @ 95%CL (1 toyMC)
   68% expected band : 1.33093 < r < 1.33093
   95% expected band : 1.33093 < r < 1.33093
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -307297660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.860211 +/- 0.00325719 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.860211 @ 95%CL (1 toyMC)
median expected limit: r < 0.860211 @ 95%CL (1 toyMC)
   68% expected band : 0.860211 < r < 0.860211
   95% expected band : 0.860211 < r < 0.860211
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -932201279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23593 +/- 0.00384311 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.23593 @ 95%CL (1 toyMC)
median expected limit: r < 1.23593 @ 95%CL (1 toyMC)
   68% expected band : 1.23593 < r < 1.23593
   95% expected band : 1.23593 < r < 1.23593
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 500122997
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.892694 +/- 0.00367138 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.892694 @ 95%CL (1 toyMC)
median expected limit: r < 0.892694 @ 95%CL (1 toyMC)
   68% expected band : 0.892694 < r < 0.892694
   95% expected band : 0.892694 < r < 0.892694
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1711447239
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36085 +/- 0.00354671 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.36085 @ 95%CL (1 toyMC)
median expected limit: r < 1.36085 @ 95%CL (1 toyMC)
   68% expected band : 1.36085 < r < 1.36085
   95% expected band : 1.36085 < r < 1.36085
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -813689191
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.970967 +/- 0.00408369 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.970967 @ 95%CL (1 toyMC)
median expected limit: r < 0.970967 @ 95%CL (1 toyMC)
   68% expected band : 0.970967 < r < 0.970967
   95% expected band : 0.970967 < r < 0.970967
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1204101712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.732863 +/- 0.00323358 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.732863 @ 95%CL (1 toyMC)
median expected limit: r < 0.732863 @ 95%CL (1 toyMC)
   68% expected band : 0.732863 < r < 0.732863
   95% expected band : 0.732863 < r < 0.732863
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1926492954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.989939 +/- 0.00362731 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.989939 @ 95%CL (1 toyMC)
median expected limit: r < 0.989939 @ 95%CL (1 toyMC)
   68% expected band : 0.989939 < r < 0.989939
   95% expected band : 0.989939 < r < 0.989939
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 739247116
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.977929 +/- 0.00373002 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.977929 @ 95%CL (1 toyMC)
median expected limit: r < 0.977929 @ 95%CL (1 toyMC)
   68% expected band : 0.977929 < r < 0.977929
   95% expected band : 0.977929 < r < 0.977929
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1711286384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22767 +/- 0.00392386 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.22767 @ 95%CL (1 toyMC)
median expected limit: r < 1.22767 @ 95%CL (1 toyMC)
   68% expected band : 1.22767 < r < 1.22767
   95% expected band : 1.22767 < r < 1.22767
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1131580003
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12216 +/- 0.00509261 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.12216 @ 95%CL (1 toyMC)
median expected limit: r < 1.12216 @ 95%CL (1 toyMC)
   68% expected band : 1.12216 < r < 1.12216
   95% expected band : 1.12216 < r < 1.12216
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1657537946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36805 +/- 0.00437517 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.36805 @ 95%CL (1 toyMC)
median expected limit: r < 1.36805 @ 95%CL (1 toyMC)
   68% expected band : 1.36805 < r < 1.36805
   95% expected band : 1.36805 < r < 1.36805
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 454571643
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.651634 +/- 0.00336119 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.651634 @ 95%CL (1 toyMC)
median expected limit: r < 0.651634 @ 95%CL (1 toyMC)
   68% expected band : 0.651634 < r < 0.651634
   95% expected band : 0.651634 < r < 0.651634
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1584137928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.714647 +/- 0.00403826 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.714647 @ 95%CL (1 toyMC)
median expected limit: r < 0.714647 @ 95%CL (1 toyMC)
   68% expected band : 0.714647 < r < 0.714647
   95% expected band : 0.714647 < r < 0.714647
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1483228904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.818145 +/- 0.00383896 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.818145 @ 95%CL (1 toyMC)
median expected limit: r < 0.818145 @ 95%CL (1 toyMC)
   68% expected band : 0.818145 < r < 0.818145
   95% expected band : 0.818145 < r < 0.818145
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -873567613
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03629 +/- 0.00278806 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.03629 @ 95%CL (1 toyMC)
median expected limit: r < 1.03629 @ 95%CL (1 toyMC)
   68% expected band : 1.03629 < r < 1.03629
   95% expected band : 1.03629 < r < 1.03629
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1658956310
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11544 +/- 0.00337722 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.11544 @ 95%CL (1 toyMC)
median expected limit: r < 1.11544 @ 95%CL (1 toyMC)
   68% expected band : 1.11544 < r < 1.11544
   95% expected band : 1.11544 < r < 1.11544
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -370884707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2385 +/- 0.00438095 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.2385 @ 95%CL (1 toyMC)
median expected limit: r < 1.2385 @ 95%CL (1 toyMC)
   68% expected band : 1.2385 < r < 1.2385
   95% expected band : 1.2385 < r < 1.2385
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1036736689
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.956043 +/- 0.00355737 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.956043 @ 95%CL (1 toyMC)
median expected limit: r < 0.956043 @ 95%CL (1 toyMC)
   68% expected band : 0.956043 < r < 0.956043
   95% expected band : 0.956043 < r < 0.956043
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2067082451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.725165 +/- 0.00415094 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.725165 @ 95%CL (1 toyMC)
median expected limit: r < 0.725165 @ 95%CL (1 toyMC)
   68% expected band : 0.725165 < r < 0.725165
   95% expected band : 0.725165 < r < 0.725165
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1247860382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.664314 +/- 0.00358019 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.664314 @ 95%CL (1 toyMC)
median expected limit: r < 0.664314 @ 95%CL (1 toyMC)
   68% expected band : 0.664314 < r < 0.664314
   95% expected band : 0.664314 < r < 0.664314
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 185888432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.884609 +/- 0.00378434 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.884609 @ 95%CL (1 toyMC)
median expected limit: r < 0.884609 @ 95%CL (1 toyMC)
   68% expected band : 0.884609 < r < 0.884609
   95% expected band : 0.884609 < r < 0.884609
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -313751409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15704 +/- 0.00393722 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.15704 @ 95%CL (1 toyMC)
median expected limit: r < 1.15704 @ 95%CL (1 toyMC)
   68% expected band : 1.15704 < r < 1.15704
   95% expected band : 1.15704 < r < 1.15704
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1597290048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.795667 +/- 0.00383926 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.795667 @ 95%CL (1 toyMC)
median expected limit: r < 0.795667 @ 95%CL (1 toyMC)
   68% expected band : 0.795667 < r < 0.795667
   95% expected band : 0.795667 < r < 0.795667
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 557095511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.777351 +/- 0.00422846 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.777351 @ 95%CL (1 toyMC)
median expected limit: r < 0.777351 @ 95%CL (1 toyMC)
   68% expected band : 0.777351 < r < 0.777351
   95% expected band : 0.777351 < r < 0.777351
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1071093540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00384 +/- 0.00477396 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.00384 @ 95%CL (1 toyMC)
median expected limit: r < 1.00384 @ 95%CL (1 toyMC)
   68% expected band : 1.00384 < r < 1.00384
   95% expected band : 1.00384 < r < 1.00384
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1077024485
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00098 +/- 0.00417881 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.00098 @ 95%CL (1 toyMC)
median expected limit: r < 1.00098 @ 95%CL (1 toyMC)
   68% expected band : 1.00098 < r < 1.00098
   95% expected band : 1.00098 < r < 1.00098
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 382442316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10344 +/- 0.00342607 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.10344 @ 95%CL (1 toyMC)
median expected limit: r < 1.10344 @ 95%CL (1 toyMC)
   68% expected band : 1.10344 < r < 1.10344
   95% expected band : 1.10344 < r < 1.10344
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1049042991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.990007 +/- 0.00395539 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.990007 @ 95%CL (1 toyMC)
median expected limit: r < 0.990007 @ 95%CL (1 toyMC)
   68% expected band : 0.990007 < r < 0.990007
   95% expected band : 0.990007 < r < 0.990007
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1114008837
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.760369 +/- 0.00356301 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.760369 @ 95%CL (1 toyMC)
median expected limit: r < 0.760369 @ 95%CL (1 toyMC)
   68% expected band : 0.760369 < r < 0.760369
   95% expected band : 0.760369 < r < 0.760369
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -500586796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23201 +/- 0.00418273 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.23201 @ 95%CL (1 toyMC)
median expected limit: r < 1.23201 @ 95%CL (1 toyMC)
   68% expected band : 1.23201 < r < 1.23201
   95% expected band : 1.23201 < r < 1.23201
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1402037625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18615 +/- 0.00351083 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.18615 @ 95%CL (1 toyMC)
median expected limit: r < 1.18615 @ 95%CL (1 toyMC)
   68% expected band : 1.18615 < r < 1.18615
   95% expected band : 1.18615 < r < 1.18615
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 539064153
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.949067 +/- 0.00411018 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.949067 @ 95%CL (1 toyMC)
median expected limit: r < 0.949067 @ 95%CL (1 toyMC)
   68% expected band : 0.949067 < r < 0.949067
   95% expected band : 0.949067 < r < 0.949067
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1689321921
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.883706 +/- 0.00304908 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.883706 @ 95%CL (1 toyMC)
median expected limit: r < 0.883706 @ 95%CL (1 toyMC)
   68% expected band : 0.883706 < r < 0.883706
   95% expected band : 0.883706 < r < 0.883706
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1713342152
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.977967 +/- 0.00437381 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.977967 @ 95%CL (1 toyMC)
median expected limit: r < 0.977967 @ 95%CL (1 toyMC)
   68% expected band : 0.977967 < r < 0.977967
   95% expected band : 0.977967 < r < 0.977967
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1092678290
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.684637 +/- 0.00333698 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.684637 @ 95%CL (1 toyMC)
median expected limit: r < 0.684637 @ 95%CL (1 toyMC)
   68% expected band : 0.684637 < r < 0.684637
   95% expected band : 0.684637 < r < 0.684637
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1417479918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25677 +/- 0.00401392 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.25677 @ 95%CL (1 toyMC)
median expected limit: r < 1.25677 @ 95%CL (1 toyMC)
   68% expected band : 1.25677 < r < 1.25677
   95% expected band : 1.25677 < r < 1.25677
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1287577042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.823478 +/- 0.00408176 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.823478 @ 95%CL (1 toyMC)
median expected limit: r < 0.823478 @ 95%CL (1 toyMC)
   68% expected band : 0.823478 < r < 0.823478
   95% expected band : 0.823478 < r < 0.823478
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1481802275
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.686928 +/- 0.00364283 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.686928 @ 95%CL (1 toyMC)
median expected limit: r < 0.686928 @ 95%CL (1 toyMC)
   68% expected band : 0.686928 < r < 0.686928
   95% expected band : 0.686928 < r < 0.686928
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1021917764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.577132 +/- 0.0031866 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.577132 @ 95%CL (1 toyMC)
median expected limit: r < 0.577132 @ 95%CL (1 toyMC)
   68% expected band : 0.577132 < r < 0.577132
   95% expected band : 0.577132 < r < 0.577132
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2041928987
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02448 +/- 0.00420291 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.02448 @ 95%CL (1 toyMC)
median expected limit: r < 1.02448 @ 95%CL (1 toyMC)
   68% expected band : 1.02448 < r < 1.02448
   95% expected band : 1.02448 < r < 1.02448
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -662153103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.97099 +/- 0.0034561 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 1.97099 @ 95%CL (1 toyMC)
median expected limit: r < 1.97099 @ 95%CL (1 toyMC)
   68% expected band : 1.97099 < r < 1.97099
   95% expected band : 1.97099 < r < 1.97099
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2041549699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03 +/- 0.00391015 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.03 @ 95%CL (1 toyMC)
median expected limit: r < 1.03 @ 95%CL (1 toyMC)
   68% expected band : 1.03 < r < 1.03
   95% expected band : 1.03 < r < 1.03
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 483011889
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35575 +/- 0.00347045 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.35575 @ 95%CL (1 toyMC)
median expected limit: r < 1.35575 @ 95%CL (1 toyMC)
   68% expected band : 1.35575 < r < 1.35575
   95% expected band : 1.35575 < r < 1.35575
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -347651483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.853044 +/- 0.00438997 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.853044 @ 95%CL (1 toyMC)
median expected limit: r < 0.853044 @ 95%CL (1 toyMC)
   68% expected band : 0.853044 < r < 0.853044
   95% expected band : 0.853044 < r < 0.853044
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2099336966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.987069 +/- 0.00434099 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.987069 @ 95%CL (1 toyMC)
median expected limit: r < 0.987069 @ 95%CL (1 toyMC)
   68% expected band : 0.987069 < r < 0.987069
   95% expected band : 0.987069 < r < 0.987069
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -399858993
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.72344 +/- 0.00423217 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.72344 @ 95%CL (1 toyMC)
median expected limit: r < 0.72344 @ 95%CL (1 toyMC)
   68% expected band : 0.72344 < r < 0.72344
   95% expected band : 0.72344 < r < 0.72344
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -561998895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.786826 +/- 0.003586 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.786826 @ 95%CL (1 toyMC)
median expected limit: r < 0.786826 @ 95%CL (1 toyMC)
   68% expected band : 0.786826 < r < 0.786826
   95% expected band : 0.786826 < r < 0.786826
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1058637266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48692 +/- 0.00484286 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.48692 @ 95%CL (1 toyMC)
median expected limit: r < 1.48692 @ 95%CL (1 toyMC)
   68% expected band : 1.48692 < r < 1.48692
   95% expected band : 1.48692 < r < 1.48692
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -528772767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13146 +/- 0.00456718 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.13146 @ 95%CL (1 toyMC)
median expected limit: r < 1.13146 @ 95%CL (1 toyMC)
   68% expected band : 1.13146 < r < 1.13146
   95% expected band : 1.13146 < r < 1.13146
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1057198455
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.672941 +/- 0.00358004 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.672941 @ 95%CL (1 toyMC)
median expected limit: r < 0.672941 @ 95%CL (1 toyMC)
   68% expected band : 0.672941 < r < 0.672941
   95% expected band : 0.672941 < r < 0.672941
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -602888145
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.952534 +/- 0.00375113 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.952534 @ 95%CL (1 toyMC)
median expected limit: r < 0.952534 @ 95%CL (1 toyMC)
   68% expected band : 0.952534 < r < 0.952534
   95% expected band : 0.952534 < r < 0.952534
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 272325166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.818488 +/- 0.00355142 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.818488 @ 95%CL (1 toyMC)
median expected limit: r < 0.818488 @ 95%CL (1 toyMC)
   68% expected band : 0.818488 < r < 0.818488
   95% expected band : 0.818488 < r < 0.818488
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 899562786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.824493 +/- 0.00423826 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.824493 @ 95%CL (1 toyMC)
median expected limit: r < 0.824493 @ 95%CL (1 toyMC)
   68% expected band : 0.824493 < r < 0.824493
   95% expected band : 0.824493 < r < 0.824493
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -980367695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09578 +/- 0.00338381 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09578 @ 95%CL (1 toyMC)
median expected limit: r < 1.09578 @ 95%CL (1 toyMC)
   68% expected band : 1.09578 < r < 1.09578
   95% expected band : 1.09578 < r < 1.09578
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 518050180
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.833178 +/- 0.00417802 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.833178 @ 95%CL (1 toyMC)
median expected limit: r < 0.833178 @ 95%CL (1 toyMC)
   68% expected band : 0.833178 < r < 0.833178
   95% expected band : 0.833178 < r < 0.833178
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1094208069
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.830035 +/- 0.00372923 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.830035 @ 95%CL (1 toyMC)
median expected limit: r < 0.830035 @ 95%CL (1 toyMC)
   68% expected band : 0.830035 < r < 0.830035
   95% expected band : 0.830035 < r < 0.830035
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1624176658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.707556 +/- 0.00379189 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.707556 @ 95%CL (1 toyMC)
median expected limit: r < 0.707556 @ 95%CL (1 toyMC)
   68% expected band : 0.707556 < r < 0.707556
   95% expected band : 0.707556 < r < 0.707556
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -387981766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.646526 +/- 0.00426981 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.646526 @ 95%CL (1 toyMC)
median expected limit: r < 0.646526 @ 95%CL (1 toyMC)
   68% expected band : 0.646526 < r < 0.646526
   95% expected band : 0.646526 < r < 0.646526
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1379211386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.82179 +/- 0.00425609 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.82179 @ 95%CL (1 toyMC)
median expected limit: r < 0.82179 @ 95%CL (1 toyMC)
   68% expected band : 0.82179 < r < 0.82179
   95% expected band : 0.82179 < r < 0.82179
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 136228296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.581876 +/- 0.00357907 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.581876 @ 95%CL (1 toyMC)
median expected limit: r < 0.581876 @ 95%CL (1 toyMC)
   68% expected band : 0.581876 < r < 0.581876
   95% expected band : 0.581876 < r < 0.581876
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 450392287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13822 +/- 0.00400382 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.13822 @ 95%CL (1 toyMC)
median expected limit: r < 1.13822 @ 95%CL (1 toyMC)
   68% expected band : 1.13822 < r < 1.13822
   95% expected band : 1.13822 < r < 1.13822
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1832121890
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.874908 +/- 0.0045646 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 0.874908 @ 95%CL (1 toyMC)
median expected limit: r < 0.874908 @ 95%CL (1 toyMC)
   68% expected band : 0.874908 < r < 0.874908
   95% expected band : 0.874908 < r < 0.874908
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1762190557
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.835519 +/- 0.00312417 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.835519 @ 95%CL (1 toyMC)
median expected limit: r < 0.835519 @ 95%CL (1 toyMC)
   68% expected band : 0.835519 < r < 0.835519
   95% expected band : 0.835519 < r < 0.835519
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2112393320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.800662 +/- 0.00428668 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.800662 @ 95%CL (1 toyMC)
median expected limit: r < 0.800662 @ 95%CL (1 toyMC)
   68% expected band : 0.800662 < r < 0.800662
   95% expected band : 0.800662 < r < 0.800662
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 896003896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1739 +/- 0.00450587 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.1739 @ 95%CL (1 toyMC)
median expected limit: r < 1.1739 @ 95%CL (1 toyMC)
   68% expected band : 1.1739 < r < 1.1739
   95% expected band : 1.1739 < r < 1.1739
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 401078892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12388 +/- 0.00343955 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.12388 @ 95%CL (1 toyMC)
median expected limit: r < 1.12388 @ 95%CL (1 toyMC)
   68% expected band : 1.12388 < r < 1.12388
   95% expected band : 1.12388 < r < 1.12388
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1689733263
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.674651 +/- 0.0029533 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.674651 @ 95%CL (1 toyMC)
median expected limit: r < 0.674651 @ 95%CL (1 toyMC)
   68% expected band : 0.674651 < r < 0.674651
   95% expected band : 0.674651 < r < 0.674651
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1397818781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.880069 +/- 0.00332611 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.880069 @ 95%CL (1 toyMC)
median expected limit: r < 0.880069 @ 95%CL (1 toyMC)
   68% expected band : 0.880069 < r < 0.880069
   95% expected band : 0.880069 < r < 0.880069
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1349187021
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.948785 +/- 0.00370088 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.948785 @ 95%CL (1 toyMC)
median expected limit: r < 0.948785 @ 95%CL (1 toyMC)
   68% expected band : 0.948785 < r < 0.948785
   95% expected band : 0.948785 < r < 0.948785
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1145238216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.880698 +/- 0.00459263 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.880698 @ 95%CL (1 toyMC)
median expected limit: r < 0.880698 @ 95%CL (1 toyMC)
   68% expected band : 0.880698 < r < 0.880698
   95% expected band : 0.880698 < r < 0.880698
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1805963072
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.853629 +/- 0.00318773 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.853629 @ 95%CL (1 toyMC)
median expected limit: r < 0.853629 @ 95%CL (1 toyMC)
   68% expected band : 0.853629 < r < 0.853629
   95% expected band : 0.853629 < r < 0.853629
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1961693766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36273 +/- 0.0033794 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.36273 @ 95%CL (1 toyMC)
median expected limit: r < 1.36273 @ 95%CL (1 toyMC)
   68% expected band : 1.36273 < r < 1.36273
   95% expected band : 1.36273 < r < 1.36273
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -375516182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.752396 +/- 0.00353334 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.752396 @ 95%CL (1 toyMC)
median expected limit: r < 0.752396 @ 95%CL (1 toyMC)
   68% expected band : 0.752396 < r < 0.752396
   95% expected band : 0.752396 < r < 0.752396
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1053106413
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.634855 +/- 0.00274196 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.634855 @ 95%CL (1 toyMC)
median expected limit: r < 0.634855 @ 95%CL (1 toyMC)
   68% expected band : 0.634855 < r < 0.634855
   95% expected band : 0.634855 < r < 0.634855
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 887677278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.864485 +/- 0.00342146 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.864485 @ 95%CL (1 toyMC)
median expected limit: r < 0.864485 @ 95%CL (1 toyMC)
   68% expected band : 0.864485 < r < 0.864485
   95% expected band : 0.864485 < r < 0.864485
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1098676229
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.654487 +/- 0.00325488 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.654487 @ 95%CL (1 toyMC)
median expected limit: r < 0.654487 @ 95%CL (1 toyMC)
   68% expected band : 0.654487 < r < 0.654487
   95% expected band : 0.654487 < r < 0.654487
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 834231915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55668 +/- 0.00465847 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.55668 @ 95%CL (1 toyMC)
median expected limit: r < 1.55668 @ 95%CL (1 toyMC)
   68% expected band : 1.55668 < r < 1.55668
   95% expected band : 1.55668 < r < 1.55668
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -404001286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15763 +/- 0.00341896 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.15763 @ 95%CL (1 toyMC)
median expected limit: r < 1.15763 @ 95%CL (1 toyMC)
   68% expected band : 1.15763 < r < 1.15763
   95% expected band : 1.15763 < r < 1.15763
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1125001781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.859106 +/- 0.00307966 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.859106 @ 95%CL (1 toyMC)
median expected limit: r < 0.859106 @ 95%CL (1 toyMC)
   68% expected band : 0.859106 < r < 0.859106
   95% expected band : 0.859106 < r < 0.859106
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -70429564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99213 +/- 0.00427922 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.99213 @ 95%CL (1 toyMC)
median expected limit: r < 1.99213 @ 95%CL (1 toyMC)
   68% expected band : 1.99213 < r < 1.99213
   95% expected band : 1.99213 < r < 1.99213
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2103094885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.763213 +/- 0.00319151 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.763213 @ 95%CL (1 toyMC)
median expected limit: r < 0.763213 @ 95%CL (1 toyMC)
   68% expected band : 0.763213 < r < 0.763213
   95% expected band : 0.763213 < r < 0.763213
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -835215658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15111 +/- 0.00328849 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.15111 @ 95%CL (1 toyMC)
median expected limit: r < 1.15111 @ 95%CL (1 toyMC)
   68% expected band : 1.15111 < r < 1.15111
   95% expected band : 1.15111 < r < 1.15111
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 113917544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.752207 +/- 0.0041557 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.752207 @ 95%CL (1 toyMC)
median expected limit: r < 0.752207 @ 95%CL (1 toyMC)
   68% expected band : 0.752207 < r < 0.752207
   95% expected band : 0.752207 < r < 0.752207
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -727776029
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33285 +/- 0.00370325 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.33285 @ 95%CL (1 toyMC)
median expected limit: r < 1.33285 @ 95%CL (1 toyMC)
   68% expected band : 1.33285 < r < 1.33285
   95% expected band : 1.33285 < r < 1.33285
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1786877476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07401 +/- 0.00426506 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.07401 @ 95%CL (1 toyMC)
median expected limit: r < 1.07401 @ 95%CL (1 toyMC)
   68% expected band : 1.07401 < r < 1.07401
   95% expected band : 1.07401 < r < 1.07401
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1693069180
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.812603 +/- 0.00444035 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.812603 @ 95%CL (1 toyMC)
median expected limit: r < 0.812603 @ 95%CL (1 toyMC)
   68% expected band : 0.812603 < r < 0.812603
   95% expected band : 0.812603 < r < 0.812603
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 143773932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.638575 +/- 0.00349826 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.638575 @ 95%CL (1 toyMC)
median expected limit: r < 0.638575 @ 95%CL (1 toyMC)
   68% expected band : 0.638575 < r < 0.638575
   95% expected band : 0.638575 < r < 0.638575
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 261713355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30709 +/- 0.00403836 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.30709 @ 95%CL (1 toyMC)
median expected limit: r < 1.30709 @ 95%CL (1 toyMC)
   68% expected band : 1.30709 < r < 1.30709
   95% expected band : 1.30709 < r < 1.30709
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1444065661
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12661 +/- 0.00421279 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.12661 @ 95%CL (1 toyMC)
median expected limit: r < 1.12661 @ 95%CL (1 toyMC)
   68% expected band : 1.12661 < r < 1.12661
   95% expected band : 1.12661 < r < 1.12661
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2027474456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05648 +/- 0.00366976 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.05648 @ 95%CL (1 toyMC)
median expected limit: r < 1.05648 @ 95%CL (1 toyMC)
   68% expected band : 1.05648 < r < 1.05648
   95% expected band : 1.05648 < r < 1.05648
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1053106413.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1092678290.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1098676229.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1114008837.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1125001781.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1131580003.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-115616566.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1204101712.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1247860382.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1293579113.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1349187021.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1397818781.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1402037625.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1417479918.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1483228904.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-153112878.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1657537946.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1693069180.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1695462102.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1762190557.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1786877476.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1926492954.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1961693766.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-2027474456.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-2067082451.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-2099336966.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-307297660.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-313751409.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-347651483.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-370884707.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-375516182.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-387981766.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-399858993.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-404001286.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-500586796.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-528772767.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-52989778.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-561998895.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-602888145.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-662153103.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-70429564.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-727776029.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-813689191.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-835215658.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-873567613.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-932201279.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-980367695.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.1021917764.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.1036736689.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.1049042991.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1057198455.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1058637266.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1071093540.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1077024485.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1094208069.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.113917544.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1145238216.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1287577042.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.136228296.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1379211386.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.143773932.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1444065661.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1481802275.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1584137928.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1597290048.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1609656457.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1624176658.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1658956310.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1689321921.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1689733263.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1711286384.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1711447239.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1713342152.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1805963072.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.1832121890.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.185888432.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.2041549699.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.2041928987.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.2103094885.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.2112393320.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.261713355.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.272325166.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.382442316.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.401078892.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.450392287.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.454571643.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.483011889.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.500122997.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.518050180.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.539064153.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.557095511.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.59024319.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.704066907.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.711691386.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.739247116.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.804710513.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.834231915.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.887677278.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.896003896.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.899562786.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 52209437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.981275 +/- 0.0041797 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.981275 @ 95%CL (1 toyMC)
median expected limit: r < 0.981275 @ 95%CL (1 toyMC)
   68% expected band : 0.981275 < r < 0.981275
   95% expected band : 0.981275 < r < 0.981275
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 693865716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.737565 +/- 0.00369176 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.737565 @ 95%CL (1 toyMC)
median expected limit: r < 0.737565 @ 95%CL (1 toyMC)
   68% expected band : 0.737565 < r < 0.737565
   95% expected band : 0.737565 < r < 0.737565
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1566758991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64994 +/- 0.00398281 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.64994 @ 95%CL (1 toyMC)
median expected limit: r < 1.64994 @ 95%CL (1 toyMC)
   68% expected band : 1.64994 < r < 1.64994
   95% expected band : 1.64994 < r < 1.64994
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1708870581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11558 +/- 0.0037286 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.11558 @ 95%CL (1 toyMC)
median expected limit: r < 1.11558 @ 95%CL (1 toyMC)
   68% expected band : 1.11558 < r < 1.11558
   95% expected band : 1.11558 < r < 1.11558
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -834994320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.896734 +/- 0.00326488 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.896734 @ 95%CL (1 toyMC)
median expected limit: r < 0.896734 @ 95%CL (1 toyMC)
   68% expected band : 0.896734 < r < 0.896734
   95% expected band : 0.896734 < r < 0.896734
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1620188156
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.73749 +/- 0.00304257 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.73749 @ 95%CL (1 toyMC)
median expected limit: r < 0.73749 @ 95%CL (1 toyMC)
   68% expected band : 0.73749 < r < 0.73749
   95% expected band : 0.73749 < r < 0.73749
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 329193366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61981 +/- 0.00486644 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.61981 @ 95%CL (1 toyMC)
median expected limit: r < 1.61981 @ 95%CL (1 toyMC)
   68% expected band : 1.61981 < r < 1.61981
   95% expected band : 1.61981 < r < 1.61981
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1044900957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.76614 +/- 0.00365664 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.76614 @ 95%CL (1 toyMC)
median expected limit: r < 0.76614 @ 95%CL (1 toyMC)
   68% expected band : 0.76614 < r < 0.76614
   95% expected band : 0.76614 < r < 0.76614
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1151535087
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.839134 +/- 0.00436384 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.839134 @ 95%CL (1 toyMC)
median expected limit: r < 0.839134 @ 95%CL (1 toyMC)
   68% expected band : 0.839134 < r < 0.839134
   95% expected band : 0.839134 < r < 0.839134
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 193919046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0166 +/- 0.00294015 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.0166 @ 95%CL (1 toyMC)
median expected limit: r < 1.0166 @ 95%CL (1 toyMC)
   68% expected band : 1.0166 < r < 1.0166
   95% expected band : 1.0166 < r < 1.0166
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1283520533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10206 +/- 0.00374453 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.10206 @ 95%CL (1 toyMC)
median expected limit: r < 1.10206 @ 95%CL (1 toyMC)
   68% expected band : 1.10206 < r < 1.10206
   95% expected band : 1.10206 < r < 1.10206
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 128629451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.723379 +/- 0.00352813 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.723379 @ 95%CL (1 toyMC)
median expected limit: r < 0.723379 @ 95%CL (1 toyMC)
   68% expected band : 0.723379 < r < 0.723379
   95% expected band : 0.723379 < r < 0.723379
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1793862339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.930911 +/- 0.00364127 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.930911 @ 95%CL (1 toyMC)
median expected limit: r < 0.930911 @ 95%CL (1 toyMC)
   68% expected band : 0.930911 < r < 0.930911
   95% expected band : 0.930911 < r < 0.930911
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 124056997
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.832864 +/- 0.00303865 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.832864 @ 95%CL (1 toyMC)
median expected limit: r < 0.832864 @ 95%CL (1 toyMC)
   68% expected band : 0.832864 < r < 0.832864
   95% expected band : 0.832864 < r < 0.832864
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 206353054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.760523 +/- 0.00343832 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.760523 @ 95%CL (1 toyMC)
median expected limit: r < 0.760523 @ 95%CL (1 toyMC)
   68% expected band : 0.760523 < r < 0.760523
   95% expected band : 0.760523 < r < 0.760523
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 433465839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.686144 +/- 0.00298715 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.686144 @ 95%CL (1 toyMC)
median expected limit: r < 0.686144 @ 95%CL (1 toyMC)
   68% expected band : 0.686144 < r < 0.686144
   95% expected band : 0.686144 < r < 0.686144
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -589663883
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.967501 +/- 0.00342863 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.967501 @ 95%CL (1 toyMC)
median expected limit: r < 0.967501 @ 95%CL (1 toyMC)
   68% expected band : 0.967501 < r < 0.967501
   95% expected band : 0.967501 < r < 0.967501
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -701532978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.833156 +/- 0.00327738 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.833156 @ 95%CL (1 toyMC)
median expected limit: r < 0.833156 @ 95%CL (1 toyMC)
   68% expected band : 0.833156 < r < 0.833156
   95% expected band : 0.833156 < r < 0.833156
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -829535456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.800319 +/- 0.0038834 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.800319 @ 95%CL (1 toyMC)
median expected limit: r < 0.800319 @ 95%CL (1 toyMC)
   68% expected band : 0.800319 < r < 0.800319
   95% expected band : 0.800319 < r < 0.800319
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2061359660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16524 +/- 0.00401537 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.16524 @ 95%CL (1 toyMC)
median expected limit: r < 1.16524 @ 95%CL (1 toyMC)
   68% expected band : 1.16524 < r < 1.16524
   95% expected band : 1.16524 < r < 1.16524
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -257058571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25202 +/- 0.00310856 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.25202 @ 95%CL (1 toyMC)
median expected limit: r < 1.25202 @ 95%CL (1 toyMC)
   68% expected band : 1.25202 < r < 1.25202
   95% expected band : 1.25202 < r < 1.25202
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -104092097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17758 +/- 0.00312281 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.17758 @ 95%CL (1 toyMC)
median expected limit: r < 1.17758 @ 95%CL (1 toyMC)
   68% expected band : 1.17758 < r < 1.17758
   95% expected band : 1.17758 < r < 1.17758
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -952318904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.762684 +/- 0.00355156 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.762684 @ 95%CL (1 toyMC)
median expected limit: r < 0.762684 @ 95%CL (1 toyMC)
   68% expected band : 0.762684 < r < 0.762684
   95% expected band : 0.762684 < r < 0.762684
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 968131132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.606103 +/- 0.00343561 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.606103 @ 95%CL (1 toyMC)
median expected limit: r < 0.606103 @ 95%CL (1 toyMC)
   68% expected band : 0.606103 < r < 0.606103
   95% expected band : 0.606103 < r < 0.606103
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1573069814
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.854981 +/- 0.00363918 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.854981 @ 95%CL (1 toyMC)
median expected limit: r < 0.854981 @ 95%CL (1 toyMC)
   68% expected band : 0.854981 < r < 0.854981
   95% expected band : 0.854981 < r < 0.854981
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1060460645
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28699 +/- 0.0038355 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.28699 @ 95%CL (1 toyMC)
median expected limit: r < 1.28699 @ 95%CL (1 toyMC)
   68% expected band : 1.28699 < r < 1.28699
   95% expected band : 1.28699 < r < 1.28699
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1536682464
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52352 +/- 0.00381274 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.52352 @ 95%CL (1 toyMC)
median expected limit: r < 1.52352 @ 95%CL (1 toyMC)
   68% expected band : 1.52352 < r < 1.52352
   95% expected band : 1.52352 < r < 1.52352
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -13697811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41692 +/- 0.00400198 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.41692 @ 95%CL (1 toyMC)
median expected limit: r < 1.41692 @ 95%CL (1 toyMC)
   68% expected band : 1.41692 < r < 1.41692
   95% expected band : 1.41692 < r < 1.41692
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1437700796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.884618 +/- 0.00342643 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.884618 @ 95%CL (1 toyMC)
median expected limit: r < 0.884618 @ 95%CL (1 toyMC)
   68% expected band : 0.884618 < r < 0.884618
   95% expected band : 0.884618 < r < 0.884618
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1119996327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.70338 +/- 0.00365804 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.70338 @ 95%CL (1 toyMC)
median expected limit: r < 0.70338 @ 95%CL (1 toyMC)
   68% expected band : 0.70338 < r < 0.70338
   95% expected band : 0.70338 < r < 0.70338
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1023405880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.692109 +/- 0.00345504 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.692109 @ 95%CL (1 toyMC)
median expected limit: r < 0.692109 @ 95%CL (1 toyMC)
   68% expected band : 0.692109 < r < 0.692109
   95% expected band : 0.692109 < r < 0.692109
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1215048709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.993912 +/- 0.00339367 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.993912 @ 95%CL (1 toyMC)
median expected limit: r < 0.993912 @ 95%CL (1 toyMC)
   68% expected band : 0.993912 < r < 0.993912
   95% expected band : 0.993912 < r < 0.993912
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 471392459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.904443 +/- 0.003483 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.904443 @ 95%CL (1 toyMC)
median expected limit: r < 0.904443 @ 95%CL (1 toyMC)
   68% expected band : 0.904443 < r < 0.904443
   95% expected band : 0.904443 < r < 0.904443
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -300656598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.84383 +/- 0.00334593 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.84383 @ 95%CL (1 toyMC)
median expected limit: r < 0.84383 @ 95%CL (1 toyMC)
   68% expected band : 0.84383 < r < 0.84383
   95% expected band : 0.84383 < r < 0.84383
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1451287661
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.79706 +/- 0.00363211 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.79706 @ 95%CL (1 toyMC)
median expected limit: r < 0.79706 @ 95%CL (1 toyMC)
   68% expected band : 0.79706 < r < 0.79706
   95% expected band : 0.79706 < r < 0.79706
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2050406343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.905525 +/- 0.00309744 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.905525 @ 95%CL (1 toyMC)
median expected limit: r < 0.905525 @ 95%CL (1 toyMC)
   68% expected band : 0.905525 < r < 0.905525
   95% expected band : 0.905525 < r < 0.905525
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -986454589
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.707531 +/- 0.0035549 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.707531 @ 95%CL (1 toyMC)
median expected limit: r < 0.707531 @ 95%CL (1 toyMC)
   68% expected band : 0.707531 < r < 0.707531
   95% expected band : 0.707531 < r < 0.707531
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1649067954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.728345 +/- 0.00326997 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.728345 @ 95%CL (1 toyMC)
median expected limit: r < 0.728345 @ 95%CL (1 toyMC)
   68% expected band : 0.728345 < r < 0.728345
   95% expected band : 0.728345 < r < 0.728345
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -820861662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.84083 +/- 0.00306067 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.84083 @ 95%CL (1 toyMC)
median expected limit: r < 0.84083 @ 95%CL (1 toyMC)
   68% expected band : 0.84083 < r < 0.84083
   95% expected band : 0.84083 < r < 0.84083
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1620914239
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.906343 +/- 0.0031015 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.906343 @ 95%CL (1 toyMC)
median expected limit: r < 0.906343 @ 95%CL (1 toyMC)
   68% expected band : 0.906343 < r < 0.906343
   95% expected band : 0.906343 < r < 0.906343
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1963969591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.659043 +/- 0.002964 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.659043 @ 95%CL (1 toyMC)
median expected limit: r < 0.659043 @ 95%CL (1 toyMC)
   68% expected band : 0.659043 < r < 0.659043
   95% expected band : 0.659043 < r < 0.659043
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 484614525
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.650986 +/- 0.00334083 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.650986 @ 95%CL (1 toyMC)
median expected limit: r < 0.650986 @ 95%CL (1 toyMC)
   68% expected band : 0.650986 < r < 0.650986
   95% expected band : 0.650986 < r < 0.650986
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -172443752
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.875863 +/- 0.00407729 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.875863 @ 95%CL (1 toyMC)
median expected limit: r < 0.875863 @ 95%CL (1 toyMC)
   68% expected band : 0.875863 < r < 0.875863
   95% expected band : 0.875863 < r < 0.875863
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 12968632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.673196 +/- 0.00377452 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.673196 @ 95%CL (1 toyMC)
median expected limit: r < 0.673196 @ 95%CL (1 toyMC)
   68% expected band : 0.673196 < r < 0.673196
   95% expected band : 0.673196 < r < 0.673196
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 498315055
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39806 +/- 0.00305058 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.39806 @ 95%CL (1 toyMC)
median expected limit: r < 1.39806 @ 95%CL (1 toyMC)
   68% expected band : 1.39806 < r < 1.39806
   95% expected band : 1.39806 < r < 1.39806
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 883827976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15273 +/- 0.00409487 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.15273 @ 95%CL (1 toyMC)
median expected limit: r < 1.15273 @ 95%CL (1 toyMC)
   68% expected band : 1.15273 < r < 1.15273
   95% expected band : 1.15273 < r < 1.15273
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1425074651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.902926 +/- 0.00350773 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.902926 @ 95%CL (1 toyMC)
median expected limit: r < 0.902926 @ 95%CL (1 toyMC)
   68% expected band : 0.902926 < r < 0.902926
   95% expected band : 0.902926 < r < 0.902926
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2077983412
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.795079 +/- 0.00381398 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.795079 @ 95%CL (1 toyMC)
median expected limit: r < 0.795079 @ 95%CL (1 toyMC)
   68% expected band : 0.795079 < r < 0.795079
   95% expected band : 0.795079 < r < 0.795079
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1538954731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00259 +/- 0.00391972 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.00259 @ 95%CL (1 toyMC)
median expected limit: r < 1.00259 @ 95%CL (1 toyMC)
   68% expected band : 1.00259 < r < 1.00259
   95% expected band : 1.00259 < r < 1.00259
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 267328456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37966 +/- 0.0040042 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.37966 @ 95%CL (1 toyMC)
median expected limit: r < 1.37966 @ 95%CL (1 toyMC)
   68% expected band : 1.37966 < r < 1.37966
   95% expected band : 1.37966 < r < 1.37966
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1215516240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09451 +/- 0.00346781 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.09451 @ 95%CL (1 toyMC)
median expected limit: r < 1.09451 @ 95%CL (1 toyMC)
   68% expected band : 1.09451 < r < 1.09451
   95% expected band : 1.09451 < r < 1.09451
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -384087810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.934828 +/- 0.00396274 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.934828 @ 95%CL (1 toyMC)
median expected limit: r < 0.934828 @ 95%CL (1 toyMC)
   68% expected band : 0.934828 < r < 0.934828
   95% expected band : 0.934828 < r < 0.934828
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 783823807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33012 +/- 0.00340961 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.33012 @ 95%CL (1 toyMC)
median expected limit: r < 1.33012 @ 95%CL (1 toyMC)
   68% expected band : 1.33012 < r < 1.33012
   95% expected band : 1.33012 < r < 1.33012
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1928928986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00109 +/- 0.00321805 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.00109 @ 95%CL (1 toyMC)
median expected limit: r < 1.00109 @ 95%CL (1 toyMC)
   68% expected band : 1.00109 < r < 1.00109
   95% expected band : 1.00109 < r < 1.00109
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 893022512
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18001 +/- 0.00449697 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.18001 @ 95%CL (1 toyMC)
median expected limit: r < 1.18001 @ 95%CL (1 toyMC)
   68% expected band : 1.18001 < r < 1.18001
   95% expected band : 1.18001 < r < 1.18001
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 764051911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.797941 +/- 0.00298284 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.797941 @ 95%CL (1 toyMC)
median expected limit: r < 0.797941 @ 95%CL (1 toyMC)
   68% expected band : 0.797941 < r < 0.797941
   95% expected band : 0.797941 < r < 0.797941
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1731703823
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2147 +/- 0.00356581 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.2147 @ 95%CL (1 toyMC)
median expected limit: r < 1.2147 @ 95%CL (1 toyMC)
   68% expected band : 1.2147 < r < 1.2147
   95% expected band : 1.2147 < r < 1.2147
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 944249881
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13422 +/- 0.00311708 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.13422 @ 95%CL (1 toyMC)
median expected limit: r < 1.13422 @ 95%CL (1 toyMC)
   68% expected band : 1.13422 < r < 1.13422
   95% expected band : 1.13422 < r < 1.13422
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 135934672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.66666 +/- 0.00372428 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.66666 @ 95%CL (1 toyMC)
median expected limit: r < 0.66666 @ 95%CL (1 toyMC)
   68% expected band : 0.66666 < r < 0.66666
   95% expected band : 0.66666 < r < 0.66666
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1988731048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.930272 +/- 0.00333292 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.930272 @ 95%CL (1 toyMC)
median expected limit: r < 0.930272 @ 95%CL (1 toyMC)
   68% expected band : 0.930272 < r < 0.930272
   95% expected band : 0.930272 < r < 0.930272
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1290382843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.849203 +/- 0.00411451 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.849203 @ 95%CL (1 toyMC)
median expected limit: r < 0.849203 @ 95%CL (1 toyMC)
   68% expected band : 0.849203 < r < 0.849203
   95% expected band : 0.849203 < r < 0.849203
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -440946258
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38849 +/- 0.00312791 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.38849 @ 95%CL (1 toyMC)
median expected limit: r < 1.38849 @ 95%CL (1 toyMC)
   68% expected band : 1.38849 < r < 1.38849
   95% expected band : 1.38849 < r < 1.38849
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -492944065
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.695554 +/- 0.00316261 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.695554 @ 95%CL (1 toyMC)
median expected limit: r < 0.695554 @ 95%CL (1 toyMC)
   68% expected band : 0.695554 < r < 0.695554
   95% expected band : 0.695554 < r < 0.695554
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1353067837
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20435 +/- 0.00372283 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.20435 @ 95%CL (1 toyMC)
median expected limit: r < 1.20435 @ 95%CL (1 toyMC)
   68% expected band : 1.20435 < r < 1.20435
   95% expected band : 1.20435 < r < 1.20435
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -930066380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.936258 +/- 0.00380451 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.936258 @ 95%CL (1 toyMC)
median expected limit: r < 0.936258 @ 95%CL (1 toyMC)
   68% expected band : 0.936258 < r < 0.936258
   95% expected band : 0.936258 < r < 0.936258
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 524400573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.750942 +/- 0.00351741 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.750942 @ 95%CL (1 toyMC)
median expected limit: r < 0.750942 @ 95%CL (1 toyMC)
   68% expected band : 0.750942 < r < 0.750942
   95% expected band : 0.750942 < r < 0.750942
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 593911818
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.893951 +/- 0.00411461 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.893951 @ 95%CL (1 toyMC)
median expected limit: r < 0.893951 @ 95%CL (1 toyMC)
   68% expected band : 0.893951 < r < 0.893951
   95% expected band : 0.893951 < r < 0.893951
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1330794194
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08987 +/- 0.00349742 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.08987 @ 95%CL (1 toyMC)
median expected limit: r < 1.08987 @ 95%CL (1 toyMC)
   68% expected band : 1.08987 < r < 1.08987
   95% expected band : 1.08987 < r < 1.08987
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 687792160
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.57458 +/- 0.00423044 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.57458 @ 95%CL (1 toyMC)
median expected limit: r < 0.57458 @ 95%CL (1 toyMC)
   68% expected band : 0.57458 < r < 0.57458
   95% expected band : 0.57458 < r < 0.57458
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 491207481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.889795 +/- 0.0032326 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.889795 @ 95%CL (1 toyMC)
median expected limit: r < 0.889795 @ 95%CL (1 toyMC)
   68% expected band : 0.889795 < r < 0.889795
   95% expected band : 0.889795 < r < 0.889795
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1816570596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.785022 +/- 0.00418758 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.785022 @ 95%CL (1 toyMC)
median expected limit: r < 0.785022 @ 95%CL (1 toyMC)
   68% expected band : 0.785022 < r < 0.785022
   95% expected band : 0.785022 < r < 0.785022
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1482454391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.818963 +/- 0.00289159 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.818963 @ 95%CL (1 toyMC)
median expected limit: r < 0.818963 @ 95%CL (1 toyMC)
   68% expected band : 0.818963 < r < 0.818963
   95% expected band : 0.818963 < r < 0.818963
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -353626472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25757 +/- 0.00371124 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.25757 @ 95%CL (1 toyMC)
median expected limit: r < 1.25757 @ 95%CL (1 toyMC)
   68% expected band : 1.25757 < r < 1.25757
   95% expected band : 1.25757 < r < 1.25757
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -518482967
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.788725 +/- 0.00339248 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.788725 @ 95%CL (1 toyMC)
median expected limit: r < 0.788725 @ 95%CL (1 toyMC)
   68% expected band : 0.788725 < r < 0.788725
   95% expected band : 0.788725 < r < 0.788725
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1517053698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.859728 +/- 0.00355683 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.859728 @ 95%CL (1 toyMC)
median expected limit: r < 0.859728 @ 95%CL (1 toyMC)
   68% expected band : 0.859728 < r < 0.859728
   95% expected band : 0.859728 < r < 0.859728
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -551823788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51337 +/- 0.00344546 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.51337 @ 95%CL (1 toyMC)
median expected limit: r < 1.51337 @ 95%CL (1 toyMC)
   68% expected band : 1.51337 < r < 1.51337
   95% expected band : 1.51337 < r < 1.51337
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1429544660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.839425 +/- 0.00271738 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.839425 @ 95%CL (1 toyMC)
median expected limit: r < 0.839425 @ 95%CL (1 toyMC)
   68% expected band : 0.839425 < r < 0.839425
   95% expected band : 0.839425 < r < 0.839425
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1649628143
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.840396 +/- 0.00315895 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.840396 @ 95%CL (1 toyMC)
median expected limit: r < 0.840396 @ 95%CL (1 toyMC)
   68% expected band : 0.840396 < r < 0.840396
   95% expected band : 0.840396 < r < 0.840396
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 789466113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39505 +/- 0.00324013 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.39505 @ 95%CL (1 toyMC)
median expected limit: r < 1.39505 @ 95%CL (1 toyMC)
   68% expected band : 1.39505 < r < 1.39505
   95% expected band : 1.39505 < r < 1.39505
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1309950466
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.978645 +/- 0.00324047 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.978645 @ 95%CL (1 toyMC)
median expected limit: r < 0.978645 @ 95%CL (1 toyMC)
   68% expected band : 0.978645 < r < 0.978645
   95% expected band : 0.978645 < r < 0.978645
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2055313373
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.637172 +/- 0.00360058 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.637172 @ 95%CL (1 toyMC)
median expected limit: r < 0.637172 @ 95%CL (1 toyMC)
   68% expected band : 0.637172 < r < 0.637172
   95% expected band : 0.637172 < r < 0.637172
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 572240697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11837 +/- 0.00419468 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.11837 @ 95%CL (1 toyMC)
median expected limit: r < 1.11837 @ 95%CL (1 toyMC)
   68% expected band : 1.11837 < r < 1.11837
   95% expected band : 1.11837 < r < 1.11837
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1397641297
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71357 +/- 0.00429836 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.71357 @ 95%CL (1 toyMC)
median expected limit: r < 1.71357 @ 95%CL (1 toyMC)
   68% expected band : 1.71357 < r < 1.71357
   95% expected band : 1.71357 < r < 1.71357
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -961901804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33209 +/- 0.00365648 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.33209 @ 95%CL (1 toyMC)
median expected limit: r < 1.33209 @ 95%CL (1 toyMC)
   68% expected band : 1.33209 < r < 1.33209
   95% expected band : 1.33209 < r < 1.33209
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2095299679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.931651 +/- 0.003615 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.931651 @ 95%CL (1 toyMC)
median expected limit: r < 0.931651 @ 95%CL (1 toyMC)
   68% expected band : 0.931651 < r < 0.931651
   95% expected band : 0.931651 < r < 0.931651
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 714747448
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.709347 +/- 0.00338814 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.709347 @ 95%CL (1 toyMC)
median expected limit: r < 0.709347 @ 95%CL (1 toyMC)
   68% expected band : 0.709347 < r < 0.709347
   95% expected band : 0.709347 < r < 0.709347
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1934668080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.775295 +/- 0.00342431 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.775295 @ 95%CL (1 toyMC)
median expected limit: r < 0.775295 @ 95%CL (1 toyMC)
   68% expected band : 0.775295 < r < 0.775295
   95% expected band : 0.775295 < r < 0.775295
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -240906799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06375 +/- 0.00334506 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.06375 @ 95%CL (1 toyMC)
median expected limit: r < 1.06375 @ 95%CL (1 toyMC)
   68% expected band : 1.06375 < r < 1.06375
   95% expected band : 1.06375 < r < 1.06375
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2089258047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.983311 +/- 0.00305216 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.983311 @ 95%CL (1 toyMC)
median expected limit: r < 0.983311 @ 95%CL (1 toyMC)
   68% expected band : 0.983311 < r < 0.983311
   95% expected band : 0.983311 < r < 0.983311
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2046511036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.618614 +/- 0.00410991 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.618614 @ 95%CL (1 toyMC)
median expected limit: r < 0.618614 @ 95%CL (1 toyMC)
   68% expected band : 0.618614 < r < 0.618614
   95% expected band : 0.618614 < r < 0.618614
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1287424024
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.852596 +/- 0.00385888 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.852596 @ 95%CL (1 toyMC)
median expected limit: r < 0.852596 @ 95%CL (1 toyMC)
   68% expected band : 0.852596 < r < 0.852596
   95% expected band : 0.852596 < r < 0.852596
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -689662055
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49672 +/- 0.00321148 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.49672 @ 95%CL (1 toyMC)
median expected limit: r < 1.49672 @ 95%CL (1 toyMC)
   68% expected band : 1.49672 < r < 1.49672
   95% expected band : 1.49672 < r < 1.49672
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2092914258
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02704 +/- 0.00373456 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.02704 @ 95%CL (1 toyMC)
median expected limit: r < 1.02704 @ 95%CL (1 toyMC)
   68% expected band : 1.02704 < r < 1.02704
   95% expected band : 1.02704 < r < 1.02704
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1688019098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.701511 +/- 0.00268107 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.701511 @ 95%CL (1 toyMC)
median expected limit: r < 0.701511 @ 95%CL (1 toyMC)
   68% expected band : 0.701511 < r < 0.701511
   95% expected band : 0.701511 < r < 0.701511
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1618971800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.730523 +/- 0.00395895 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.730523 @ 95%CL (1 toyMC)
median expected limit: r < 0.730523 @ 95%CL (1 toyMC)
   68% expected band : 0.730523 < r < 0.730523
   95% expected band : 0.730523 < r < 0.730523
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1638442275
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06586 +/- 0.00458 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.06586 @ 95%CL (1 toyMC)
median expected limit: r < 1.06586 @ 95%CL (1 toyMC)
   68% expected band : 1.06586 < r < 1.06586
   95% expected band : 1.06586 < r < 1.06586
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 439306781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18324 +/- 0.00280511 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.18324 @ 95%CL (1 toyMC)
median expected limit: r < 1.18324 @ 95%CL (1 toyMC)
   68% expected band : 1.18324 < r < 1.18324
   95% expected band : 1.18324 < r < 1.18324
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1417325583
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13494 +/- 0.00384997 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.13494 @ 95%CL (1 toyMC)
median expected limit: r < 1.13494 @ 95%CL (1 toyMC)
   68% expected band : 1.13494 < r < 1.13494
   95% expected band : 1.13494 < r < 1.13494
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1749792985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01154 +/- 0.00377764 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.01154 @ 95%CL (1 toyMC)
median expected limit: r < 1.01154 @ 95%CL (1 toyMC)
   68% expected band : 1.01154 < r < 1.01154
   95% expected band : 1.01154 < r < 1.01154
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -335670444
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35829 +/- 0.00357999 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.35829 @ 95%CL (1 toyMC)
median expected limit: r < 1.35829 @ 95%CL (1 toyMC)
   68% expected band : 1.35829 < r < 1.35829
   95% expected band : 1.35829 < r < 1.35829
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-104092097.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1060460645.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1151535087.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1215516240.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1283520533.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1290382843.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1309950466.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1330794194.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-13697811.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1429544660.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1437700796.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1451287661.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1536682464.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1538954731.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1618971800.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1620188156.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1620914239.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1638442275.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1649628143.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-172443752.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1749792985.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1934668080.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1963969591.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-1988731048.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-2055313373.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-2061359660.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-240906799.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-257058571.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-300656598.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-335670444.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-353626472.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-384087810.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-440946258.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-492944065.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-518482967.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-551823788.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-589663883.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-689662055.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-701532978.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-820861662.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-829535456.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-834994320.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-930066380.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-952318904.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-961901804.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-986454589.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.1023405880.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.1044900957.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.1119996327.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.1215048709.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.124056997.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.128629451.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1287424024.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.12968632.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1353067837.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.135934672.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1397641297.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1417325583.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1425074651.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1482454391.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1517053698.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1566758991.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1573069814.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1649067954.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1688019098.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1708870581.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1731703823.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1793862339.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1816570596.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1928928986.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.193919046.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.2046511036.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.2050406343.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.206353054.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.2077983412.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.2089258047.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.2092914258.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.2095299679.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.267328456.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.329193366.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.433465839.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.439306781.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.471392459.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.484614525.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.491207481.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.498315055.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.52209437.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.524400573.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.572240697.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.593911818.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.687792160.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.693865716.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.714747448.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.764051911.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.783823807.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.789466113.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.883827976.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.893022512.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.944249881.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.968131132.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1431375186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40039 +/- 0.0031939 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.40039 @ 95%CL (1 toyMC)
median expected limit: r < 1.40039 @ 95%CL (1 toyMC)
   68% expected band : 1.40039 < r < 1.40039
   95% expected band : 1.40039 < r < 1.40039
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1789681957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.957458 +/- 0.00336281 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.957458 @ 95%CL (1 toyMC)
median expected limit: r < 0.957458 @ 95%CL (1 toyMC)
   68% expected band : 0.957458 < r < 0.957458
   95% expected band : 0.957458 < r < 0.957458
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 20601243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18058 +/- 0.00346799 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.18058 @ 95%CL (1 toyMC)
median expected limit: r < 1.18058 @ 95%CL (1 toyMC)
   68% expected band : 1.18058 < r < 1.18058
   95% expected band : 1.18058 < r < 1.18058
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2084984335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.987108 +/- 0.00422269 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.987108 @ 95%CL (1 toyMC)
median expected limit: r < 0.987108 @ 95%CL (1 toyMC)
   68% expected band : 0.987108 < r < 0.987108
   95% expected band : 0.987108 < r < 0.987108
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 94393252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.663114 +/- 0.00299824 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.663114 @ 95%CL (1 toyMC)
median expected limit: r < 0.663114 @ 95%CL (1 toyMC)
   68% expected band : 0.663114 < r < 0.663114
   95% expected band : 0.663114 < r < 0.663114
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -476179041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.877598 +/- 0.00376746 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.877598 @ 95%CL (1 toyMC)
median expected limit: r < 0.877598 @ 95%CL (1 toyMC)
   68% expected band : 0.877598 < r < 0.877598
   95% expected band : 0.877598 < r < 0.877598
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1264557684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08539 +/- 0.00455995 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.08539 @ 95%CL (1 toyMC)
median expected limit: r < 1.08539 @ 95%CL (1 toyMC)
   68% expected band : 1.08539 < r < 1.08539
   95% expected band : 1.08539 < r < 1.08539
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1373507324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.824658 +/- 0.00361734 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.824658 @ 95%CL (1 toyMC)
median expected limit: r < 0.824658 @ 95%CL (1 toyMC)
   68% expected band : 0.824658 < r < 0.824658
   95% expected band : 0.824658 < r < 0.824658
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1482656943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.974582 +/- 0.00408719 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.974582 @ 95%CL (1 toyMC)
median expected limit: r < 0.974582 @ 95%CL (1 toyMC)
   68% expected band : 0.974582 < r < 0.974582
   95% expected band : 0.974582 < r < 0.974582
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 799029909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.963633 +/- 0.00357799 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.963633 @ 95%CL (1 toyMC)
median expected limit: r < 0.963633 @ 95%CL (1 toyMC)
   68% expected band : 0.963633 < r < 0.963633
   95% expected band : 0.963633 < r < 0.963633
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -927442779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.818502 +/- 0.00336374 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.818502 @ 95%CL (1 toyMC)
median expected limit: r < 0.818502 @ 95%CL (1 toyMC)
   68% expected band : 0.818502 < r < 0.818502
   95% expected band : 0.818502 < r < 0.818502
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1325511471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.830272 +/- 0.00240544 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.830272 @ 95%CL (1 toyMC)
median expected limit: r < 0.830272 @ 95%CL (1 toyMC)
   68% expected band : 0.830272 < r < 0.830272
   95% expected band : 0.830272 < r < 0.830272
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1035666966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.861655 +/- 0.00289835 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.861655 @ 95%CL (1 toyMC)
median expected limit: r < 0.861655 @ 95%CL (1 toyMC)
   68% expected band : 0.861655 < r < 0.861655
   95% expected band : 0.861655 < r < 0.861655
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 715763009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.686447 +/- 0.00318791 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.686447 @ 95%CL (1 toyMC)
median expected limit: r < 0.686447 @ 95%CL (1 toyMC)
   68% expected band : 0.686447 < r < 0.686447
   95% expected band : 0.686447 < r < 0.686447
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2068974660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.709332 +/- 0.00322012 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.709332 @ 95%CL (1 toyMC)
median expected limit: r < 0.709332 @ 95%CL (1 toyMC)
   68% expected band : 0.709332 < r < 0.709332
   95% expected band : 0.709332 < r < 0.709332
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 231982538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.65675 +/- 0.0029594 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.65675 @ 95%CL (1 toyMC)
median expected limit: r < 0.65675 @ 95%CL (1 toyMC)
   68% expected band : 0.65675 < r < 0.65675
   95% expected band : 0.65675 < r < 0.65675
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 272651222
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.721225 +/- 0.00284864 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.721225 @ 95%CL (1 toyMC)
median expected limit: r < 0.721225 @ 95%CL (1 toyMC)
   68% expected band : 0.721225 < r < 0.721225
   95% expected band : 0.721225 < r < 0.721225
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 389677929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.696066 +/- 0.00329687 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.696066 @ 95%CL (1 toyMC)
median expected limit: r < 0.696066 @ 95%CL (1 toyMC)
   68% expected band : 0.696066 < r < 0.696066
   95% expected band : 0.696066 < r < 0.696066
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2085931692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04142 +/- 0.00417393 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04142 @ 95%CL (1 toyMC)
median expected limit: r < 1.04142 @ 95%CL (1 toyMC)
   68% expected band : 1.04142 < r < 1.04142
   95% expected band : 1.04142 < r < 1.04142
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1521517738
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08043 +/- 0.00435163 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.08043 @ 95%CL (1 toyMC)
median expected limit: r < 1.08043 @ 95%CL (1 toyMC)
   68% expected band : 1.08043 < r < 1.08043
   95% expected band : 1.08043 < r < 1.08043
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1938091857
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.614434 +/- 0.00293807 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.614434 @ 95%CL (1 toyMC)
median expected limit: r < 0.614434 @ 95%CL (1 toyMC)
   68% expected band : 0.614434 < r < 0.614434
   95% expected band : 0.614434 < r < 0.614434
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1183272990
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.62337 +/- 0.00322668 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.62337 @ 95%CL (1 toyMC)
median expected limit: r < 0.62337 @ 95%CL (1 toyMC)
   68% expected band : 0.62337 < r < 0.62337
   95% expected band : 0.62337 < r < 0.62337
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -794240102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.778915 +/- 0.00374722 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.778915 @ 95%CL (1 toyMC)
median expected limit: r < 0.778915 @ 95%CL (1 toyMC)
   68% expected band : 0.778915 < r < 0.778915
   95% expected band : 0.778915 < r < 0.778915
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1412805119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09098 +/- 0.00299224 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.09098 @ 95%CL (1 toyMC)
median expected limit: r < 1.09098 @ 95%CL (1 toyMC)
   68% expected band : 1.09098 < r < 1.09098
   95% expected band : 1.09098 < r < 1.09098
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1844274543
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.842117 +/- 0.00376013 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.842117 @ 95%CL (1 toyMC)
median expected limit: r < 0.842117 @ 95%CL (1 toyMC)
   68% expected band : 0.842117 < r < 0.842117
   95% expected band : 0.842117 < r < 0.842117
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 331725173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30075 +/- 0.00350321 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.30075 @ 95%CL (1 toyMC)
median expected limit: r < 1.30075 @ 95%CL (1 toyMC)
   68% expected band : 1.30075 < r < 1.30075
   95% expected band : 1.30075 < r < 1.30075
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -325990392
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.769561 +/- 0.00336591 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.769561 @ 95%CL (1 toyMC)
median expected limit: r < 0.769561 @ 95%CL (1 toyMC)
   68% expected band : 0.769561 < r < 0.769561
   95% expected band : 0.769561 < r < 0.769561
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1170641956
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.673484 +/- 0.00360323 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.673484 @ 95%CL (1 toyMC)
median expected limit: r < 0.673484 @ 95%CL (1 toyMC)
   68% expected band : 0.673484 < r < 0.673484
   95% expected band : 0.673484 < r < 0.673484
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1985656265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.86172 +/- 0.00295933 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.86172 @ 95%CL (1 toyMC)
median expected limit: r < 0.86172 @ 95%CL (1 toyMC)
   68% expected band : 0.86172 < r < 0.86172
   95% expected band : 0.86172 < r < 0.86172
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 500315942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.677596 +/- 0.0038123 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.677596 @ 95%CL (1 toyMC)
median expected limit: r < 0.677596 @ 95%CL (1 toyMC)
   68% expected band : 0.677596 < r < 0.677596
   95% expected band : 0.677596 < r < 0.677596
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1238126171
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.628868 +/- 0.00368631 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.628868 @ 95%CL (1 toyMC)
median expected limit: r < 0.628868 @ 95%CL (1 toyMC)
   68% expected band : 0.628868 < r < 0.628868
   95% expected band : 0.628868 < r < 0.628868
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 700586113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56065 +/- 0.00269309 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.56065 @ 95%CL (1 toyMC)
median expected limit: r < 1.56065 @ 95%CL (1 toyMC)
   68% expected band : 1.56065 < r < 1.56065
   95% expected band : 1.56065 < r < 1.56065
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 458389935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09392 +/- 0.0042223 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09392 @ 95%CL (1 toyMC)
median expected limit: r < 1.09392 @ 95%CL (1 toyMC)
   68% expected band : 1.09392 < r < 1.09392
   95% expected band : 1.09392 < r < 1.09392
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -296963562
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.871588 +/- 0.00354087 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.871588 @ 95%CL (1 toyMC)
median expected limit: r < 0.871588 @ 95%CL (1 toyMC)
   68% expected band : 0.871588 < r < 0.871588
   95% expected band : 0.871588 < r < 0.871588
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 539647081
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12795 +/- 0.00338166 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.12795 @ 95%CL (1 toyMC)
median expected limit: r < 1.12795 @ 95%CL (1 toyMC)
   68% expected band : 1.12795 < r < 1.12795
   95% expected band : 1.12795 < r < 1.12795
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1653738121
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.958166 +/- 0.00344886 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.958166 @ 95%CL (1 toyMC)
median expected limit: r < 0.958166 @ 95%CL (1 toyMC)
   68% expected band : 0.958166 < r < 0.958166
   95% expected band : 0.958166 < r < 0.958166
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1244285534
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.991938 +/- 0.00397028 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.991938 @ 95%CL (1 toyMC)
median expected limit: r < 0.991938 @ 95%CL (1 toyMC)
   68% expected band : 0.991938 < r < 0.991938
   95% expected band : 0.991938 < r < 0.991938
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1667990627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.722893 +/- 0.00323927 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.722893 @ 95%CL (1 toyMC)
median expected limit: r < 0.722893 @ 95%CL (1 toyMC)
   68% expected band : 0.722893 < r < 0.722893
   95% expected band : 0.722893 < r < 0.722893
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1275738531
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.84026 +/- 0.00329908 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.84026 @ 95%CL (1 toyMC)
median expected limit: r < 0.84026 @ 95%CL (1 toyMC)
   68% expected band : 0.84026 < r < 0.84026
   95% expected band : 0.84026 < r < 0.84026
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 744192440
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.7741 +/- 0.00396082 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.7741 @ 95%CL (1 toyMC)
median expected limit: r < 0.7741 @ 95%CL (1 toyMC)
   68% expected band : 0.7741 < r < 0.7741
   95% expected band : 0.7741 < r < 0.7741
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1572033327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.798366 +/- 0.00279289 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.798366 @ 95%CL (1 toyMC)
median expected limit: r < 0.798366 @ 95%CL (1 toyMC)
   68% expected band : 0.798366 < r < 0.798366
   95% expected band : 0.798366 < r < 0.798366
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1576857205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08232 +/- 0.00297427 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.08232 @ 95%CL (1 toyMC)
median expected limit: r < 1.08232 @ 95%CL (1 toyMC)
   68% expected band : 1.08232 < r < 1.08232
   95% expected band : 1.08232 < r < 1.08232
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1534809896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22254 +/- 0.00379432 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.22254 @ 95%CL (1 toyMC)
median expected limit: r < 1.22254 @ 95%CL (1 toyMC)
   68% expected band : 1.22254 < r < 1.22254
   95% expected band : 1.22254 < r < 1.22254
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1655578990
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28698 +/- 0.00336355 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.28698 @ 95%CL (1 toyMC)
median expected limit: r < 1.28698 @ 95%CL (1 toyMC)
   68% expected band : 1.28698 < r < 1.28698
   95% expected band : 1.28698 < r < 1.28698
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1847175803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12057 +/- 0.00374236 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.12057 @ 95%CL (1 toyMC)
median expected limit: r < 1.12057 @ 95%CL (1 toyMC)
   68% expected band : 1.12057 < r < 1.12057
   95% expected band : 1.12057 < r < 1.12057
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1526624659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.959453 +/- 0.00328385 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.959453 @ 95%CL (1 toyMC)
median expected limit: r < 0.959453 @ 95%CL (1 toyMC)
   68% expected band : 0.959453 < r < 0.959453
   95% expected band : 0.959453 < r < 0.959453
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1813809973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.62217 +/- 0.00281136 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.62217 @ 95%CL (1 toyMC)
median expected limit: r < 0.62217 @ 95%CL (1 toyMC)
   68% expected band : 0.62217 < r < 0.62217
   95% expected band : 0.62217 < r < 0.62217
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1350763699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.762812 +/- 0.00364349 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.762812 @ 95%CL (1 toyMC)
median expected limit: r < 0.762812 @ 95%CL (1 toyMC)
   68% expected band : 0.762812 < r < 0.762812
   95% expected band : 0.762812 < r < 0.762812
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1431272454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.833439 +/- 0.0034829 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.833439 @ 95%CL (1 toyMC)
median expected limit: r < 0.833439 @ 95%CL (1 toyMC)
   68% expected band : 0.833439 < r < 0.833439
   95% expected band : 0.833439 < r < 0.833439
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1722557001
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.741908 +/- 0.00393021 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.741908 @ 95%CL (1 toyMC)
median expected limit: r < 0.741908 @ 95%CL (1 toyMC)
   68% expected band : 0.741908 < r < 0.741908
   95% expected band : 0.741908 < r < 0.741908
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1691941447
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.6739 +/- 0.00331288 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.6739 @ 95%CL (1 toyMC)
median expected limit: r < 0.6739 @ 95%CL (1 toyMC)
   68% expected band : 0.6739 < r < 0.6739
   95% expected band : 0.6739 < r < 0.6739
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1738275794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16897 +/- 0.00344893 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.16897 @ 95%CL (1 toyMC)
median expected limit: r < 1.16897 @ 95%CL (1 toyMC)
   68% expected band : 1.16897 < r < 1.16897
   95% expected band : 1.16897 < r < 1.16897
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 418148327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21173 +/- 0.00381064 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.21173 @ 95%CL (1 toyMC)
median expected limit: r < 1.21173 @ 95%CL (1 toyMC)
   68% expected band : 1.21173 < r < 1.21173
   95% expected band : 1.21173 < r < 1.21173
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 659160540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.842797 +/- 0.00360471 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.842797 @ 95%CL (1 toyMC)
median expected limit: r < 0.842797 @ 95%CL (1 toyMC)
   68% expected band : 0.842797 < r < 0.842797
   95% expected band : 0.842797 < r < 0.842797
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1342015800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99004 +/- 0.00416179 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.99004 @ 95%CL (1 toyMC)
median expected limit: r < 1.99004 @ 95%CL (1 toyMC)
   68% expected band : 1.99004 < r < 1.99004
   95% expected band : 1.99004 < r < 1.99004
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1555281971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0827 +/- 0.00298912 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.0827 @ 95%CL (1 toyMC)
median expected limit: r < 1.0827 @ 95%CL (1 toyMC)
   68% expected band : 1.0827 < r < 1.0827
   95% expected band : 1.0827 < r < 1.0827
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1756849110
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.855607 +/- 0.00345658 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.855607 @ 95%CL (1 toyMC)
median expected limit: r < 0.855607 @ 95%CL (1 toyMC)
   68% expected band : 0.855607 < r < 0.855607
   95% expected band : 0.855607 < r < 0.855607
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1846912893
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0431 +/- 0.00409743 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.0431 @ 95%CL (1 toyMC)
median expected limit: r < 1.0431 @ 95%CL (1 toyMC)
   68% expected band : 1.0431 < r < 1.0431
   95% expected band : 1.0431 < r < 1.0431
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -127929423
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.816083 +/- 0.00352165 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.816083 @ 95%CL (1 toyMC)
median expected limit: r < 0.816083 @ 95%CL (1 toyMC)
   68% expected band : 0.816083 < r < 0.816083
   95% expected band : 0.816083 < r < 0.816083
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -157538893
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.979068 +/- 0.00341789 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.979068 @ 95%CL (1 toyMC)
median expected limit: r < 0.979068 @ 95%CL (1 toyMC)
   68% expected band : 0.979068 < r < 0.979068
   95% expected band : 0.979068 < r < 0.979068
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -198756123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.69576 +/- 0.00344469 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.69576 @ 95%CL (1 toyMC)
median expected limit: r < 0.69576 @ 95%CL (1 toyMC)
   68% expected band : 0.69576 < r < 0.69576
   95% expected band : 0.69576 < r < 0.69576
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1407908203
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.666693 +/- 0.00354167 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.666693 @ 95%CL (1 toyMC)
median expected limit: r < 0.666693 @ 95%CL (1 toyMC)
   68% expected band : 0.666693 < r < 0.666693
   95% expected band : 0.666693 < r < 0.666693
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -654735937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.761452 +/- 0.00359924 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.761452 @ 95%CL (1 toyMC)
median expected limit: r < 0.761452 @ 95%CL (1 toyMC)
   68% expected band : 0.761452 < r < 0.761452
   95% expected band : 0.761452 < r < 0.761452
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2139940430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00252 +/- 0.00265763 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.00252 @ 95%CL (1 toyMC)
median expected limit: r < 1.00252 @ 95%CL (1 toyMC)
   68% expected band : 1.00252 < r < 1.00252
   95% expected band : 1.00252 < r < 1.00252
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 266182012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29403 +/- 0.00346216 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.29403 @ 95%CL (1 toyMC)
median expected limit: r < 1.29403 @ 95%CL (1 toyMC)
   68% expected band : 1.29403 < r < 1.29403
   95% expected band : 1.29403 < r < 1.29403
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 180413149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28504 +/- 0.00350302 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.28504 @ 95%CL (1 toyMC)
median expected limit: r < 1.28504 @ 95%CL (1 toyMC)
   68% expected band : 1.28504 < r < 1.28504
   95% expected band : 1.28504 < r < 1.28504
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -484375912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.793768 +/- 0.00329205 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.793768 @ 95%CL (1 toyMC)
median expected limit: r < 0.793768 @ 95%CL (1 toyMC)
   68% expected band : 0.793768 < r < 0.793768
   95% expected band : 0.793768 < r < 0.793768
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 844910605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.704596 +/- 0.00321934 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.704596 @ 95%CL (1 toyMC)
median expected limit: r < 0.704596 @ 95%CL (1 toyMC)
   68% expected band : 0.704596 < r < 0.704596
   95% expected band : 0.704596 < r < 0.704596
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -3314935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.806242 +/- 0.00403832 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.806242 @ 95%CL (1 toyMC)
median expected limit: r < 0.806242 @ 95%CL (1 toyMC)
   68% expected band : 0.806242 < r < 0.806242
   95% expected band : 0.806242 < r < 0.806242
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2048051568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29219 +/- 0.00264952 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.29219 @ 95%CL (1 toyMC)
median expected limit: r < 1.29219 @ 95%CL (1 toyMC)
   68% expected band : 1.29219 < r < 1.29219
   95% expected band : 1.29219 < r < 1.29219
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 688401977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58318 +/- 0.00384838 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.58318 @ 95%CL (1 toyMC)
median expected limit: r < 1.58318 @ 95%CL (1 toyMC)
   68% expected band : 1.58318 < r < 1.58318
   95% expected band : 1.58318 < r < 1.58318
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -336246276
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00393 +/- 0.0034276 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.00393 @ 95%CL (1 toyMC)
median expected limit: r < 1.00393 @ 95%CL (1 toyMC)
   68% expected band : 1.00393 < r < 1.00393
   95% expected band : 1.00393 < r < 1.00393
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1675943340
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37285 +/- 0.00321526 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.37285 @ 95%CL (1 toyMC)
median expected limit: r < 1.37285 @ 95%CL (1 toyMC)
   68% expected band : 1.37285 < r < 1.37285
   95% expected band : 1.37285 < r < 1.37285
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1251258319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.83941 +/- 0.00394579 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.83941 @ 95%CL (1 toyMC)
median expected limit: r < 1.83941 @ 95%CL (1 toyMC)
   68% expected band : 1.83941 < r < 1.83941
   95% expected band : 1.83941 < r < 1.83941
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 188235348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06747 +/- 0.00241088 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.06747 @ 95%CL (1 toyMC)
median expected limit: r < 1.06747 @ 95%CL (1 toyMC)
   68% expected band : 1.06747 < r < 1.06747
   95% expected band : 1.06747 < r < 1.06747
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2102360478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.755098 +/- 0.00358447 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.755098 @ 95%CL (1 toyMC)
median expected limit: r < 0.755098 @ 95%CL (1 toyMC)
   68% expected band : 0.755098 < r < 0.755098
   95% expected band : 0.755098 < r < 0.755098
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2101950494
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.959744 +/- 0.00323542 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.959744 @ 95%CL (1 toyMC)
median expected limit: r < 0.959744 @ 95%CL (1 toyMC)
   68% expected band : 0.959744 < r < 0.959744
   95% expected band : 0.959744 < r < 0.959744
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1698049187
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.911203 +/- 0.00325096 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.911203 @ 95%CL (1 toyMC)
median expected limit: r < 0.911203 @ 95%CL (1 toyMC)
   68% expected band : 0.911203 < r < 0.911203
   95% expected band : 0.911203 < r < 0.911203
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 75702302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.764457 +/- 0.00382964 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.764457 @ 95%CL (1 toyMC)
median expected limit: r < 0.764457 @ 95%CL (1 toyMC)
   68% expected band : 0.764457 < r < 0.764457
   95% expected band : 0.764457 < r < 0.764457
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1980595147
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.842908 +/- 0.00419508 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.842908 @ 95%CL (1 toyMC)
median expected limit: r < 0.842908 @ 95%CL (1 toyMC)
   68% expected band : 0.842908 < r < 0.842908
   95% expected band : 0.842908 < r < 0.842908
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1572408194
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41044 +/- 0.00366073 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.41044 @ 95%CL (1 toyMC)
median expected limit: r < 1.41044 @ 95%CL (1 toyMC)
   68% expected band : 1.41044 < r < 1.41044
   95% expected band : 1.41044 < r < 1.41044
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -851765394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.93712 +/- 0.00316703 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.93712 @ 95%CL (1 toyMC)
median expected limit: r < 0.93712 @ 95%CL (1 toyMC)
   68% expected band : 0.93712 < r < 0.93712
   95% expected band : 0.93712 < r < 0.93712
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -823864863
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.719103 +/- 0.00354657 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 0.719103 @ 95%CL (1 toyMC)
median expected limit: r < 0.719103 @ 95%CL (1 toyMC)
   68% expected band : 0.719103 < r < 0.719103
   95% expected band : 0.719103 < r < 0.719103
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2102437475
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.6821 +/- 0.00364582 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.6821 @ 95%CL (1 toyMC)
median expected limit: r < 0.6821 @ 95%CL (1 toyMC)
   68% expected band : 0.6821 < r < 0.6821
   95% expected band : 0.6821 < r < 0.6821
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1763688734
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08106 +/- 0.00344348 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.08106 @ 95%CL (1 toyMC)
median expected limit: r < 1.08106 @ 95%CL (1 toyMC)
   68% expected band : 1.08106 < r < 1.08106
   95% expected band : 1.08106 < r < 1.08106
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1750288291
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.95968 +/- 0.00322061 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.95968 @ 95%CL (1 toyMC)
median expected limit: r < 0.95968 @ 95%CL (1 toyMC)
   68% expected band : 0.95968 < r < 0.95968
   95% expected band : 0.95968 < r < 0.95968
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -638632346
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.788853 +/- 0.00379293 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.788853 @ 95%CL (1 toyMC)
median expected limit: r < 0.788853 @ 95%CL (1 toyMC)
   68% expected band : 0.788853 < r < 0.788853
   95% expected band : 0.788853 < r < 0.788853
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1810051247
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18052 +/- 0.00336735 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.18052 @ 95%CL (1 toyMC)
median expected limit: r < 1.18052 @ 95%CL (1 toyMC)
   68% expected band : 1.18052 < r < 1.18052
   95% expected band : 1.18052 < r < 1.18052
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1528125893
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.745023 +/- 0.00408323 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.745023 @ 95%CL (1 toyMC)
median expected limit: r < 0.745023 @ 95%CL (1 toyMC)
   68% expected band : 0.745023 < r < 0.745023
   95% expected band : 0.745023 < r < 0.745023
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 101005235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.804868 +/- 0.00322542 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.804868 @ 95%CL (1 toyMC)
median expected limit: r < 0.804868 @ 95%CL (1 toyMC)
   68% expected band : 0.804868 < r < 0.804868
   95% expected band : 0.804868 < r < 0.804868
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1644521805
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.772838 +/- 0.00414817 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.772838 @ 95%CL (1 toyMC)
median expected limit: r < 0.772838 @ 95%CL (1 toyMC)
   68% expected band : 0.772838 < r < 0.772838
   95% expected band : 0.772838 < r < 0.772838
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 16729114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.964619 +/- 0.00379718 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.964619 @ 95%CL (1 toyMC)
median expected limit: r < 0.964619 @ 95%CL (1 toyMC)
   68% expected band : 0.964619 < r < 0.964619
   95% expected band : 0.964619 < r < 0.964619
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1075143825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.853833 +/- 0.00390409 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.853833 @ 95%CL (1 toyMC)
median expected limit: r < 0.853833 @ 95%CL (1 toyMC)
   68% expected band : 0.853833 < r < 0.853833
   95% expected band : 0.853833 < r < 0.853833
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2104311494
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.804163 +/- 0.00432843 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.804163 @ 95%CL (1 toyMC)
median expected limit: r < 0.804163 @ 95%CL (1 toyMC)
   68% expected band : 0.804163 < r < 0.804163
   95% expected band : 0.804163 < r < 0.804163
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -885901900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.762201 +/- 0.00394362 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.762201 @ 95%CL (1 toyMC)
median expected limit: r < 0.762201 @ 95%CL (1 toyMC)
   68% expected band : 0.762201 < r < 0.762201
   95% expected band : 0.762201 < r < 0.762201
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 725472783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.780974 +/- 0.00337786 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.780974 @ 95%CL (1 toyMC)
median expected limit: r < 0.780974 @ 95%CL (1 toyMC)
   68% expected band : 0.780974 < r < 0.780974
   95% expected band : 0.780974 < r < 0.780974
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1559094580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.668248 +/- 0.003438 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.668248 @ 95%CL (1 toyMC)
median expected limit: r < 0.668248 @ 95%CL (1 toyMC)
   68% expected band : 0.668248 < r < 0.668248
   95% expected band : 0.668248 < r < 0.668248
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 306176748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.720832 +/- 0.00381195 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.720832 @ 95%CL (1 toyMC)
median expected limit: r < 0.720832 @ 95%CL (1 toyMC)
   68% expected band : 0.720832 < r < 0.720832
   95% expected band : 0.720832 < r < 0.720832
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1809568429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34486 +/- 0.00330372 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.34486 @ 95%CL (1 toyMC)
median expected limit: r < 1.34486 @ 95%CL (1 toyMC)
   68% expected band : 1.34486 < r < 1.34486
   95% expected band : 1.34486 < r < 1.34486
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1672357473
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.754337 +/- 0.00340861 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.754337 @ 95%CL (1 toyMC)
median expected limit: r < 0.754337 @ 95%CL (1 toyMC)
   68% expected band : 0.754337 < r < 0.754337
   95% expected band : 0.754337 < r < 0.754337
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1035666966.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1244285534.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-127929423.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1325511471.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1342015800.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1350763699.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1373507324.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1521517738.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1555281971.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1572033327.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-157538893.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1644521805.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1653738121.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1667990627.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1691941447.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1750288291.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1756849110.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1810051247.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1813809973.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1846912893.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1938091857.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-198756123.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-2068974660.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-2084984335.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-2085931692.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-2101950494.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-2102360478.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-296963562.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-325990392.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-3314935.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-336246276.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-476179041.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-484375912.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-638632346.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-654735937.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-794240102.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-823864863.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-851765394.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-885901900.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-927442779.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.101005235.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.1075143825.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.1170641956.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.1183272990.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.1238126171.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.1251258319.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.1264557684.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.1275738531.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.1407908203.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.1412805119.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1431272454.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1431375186.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1482656943.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1526624659.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1528125893.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1534809896.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1559094580.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1572408194.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1576857205.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1655578990.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1672357473.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.16729114.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1675943340.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1698049187.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1722557001.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1738275794.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1763688734.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1789681957.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.180413149.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1809568429.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1844274543.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1847175803.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.188235348.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1980595147.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.1985656265.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.2048051568.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.20601243.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.2102437475.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.2104311494.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.2139940430.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.231982538.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.266182012.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.272651222.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.306176748.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.331725173.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.389677929.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.418148327.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.458389935.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.500315942.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.539647081.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.659160540.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.688401977.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.700586113.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.715763009.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.725472783.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.744192440.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.75702302.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.799029909.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.844910605.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.94393252.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -631856137
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20855 +/- 0.00413801 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.20855 @ 95%CL (1 toyMC)
median expected limit: r < 1.20855 @ 95%CL (1 toyMC)
   68% expected band : 1.20855 < r < 1.20855
   95% expected band : 1.20855 < r < 1.20855
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 972928081
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60655 +/- 0.00292717 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.60655 @ 95%CL (1 toyMC)
median expected limit: r < 1.60655 @ 95%CL (1 toyMC)
   68% expected band : 1.60655 < r < 1.60655
   95% expected band : 1.60655 < r < 1.60655
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 774582971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.764889 +/- 0.00378607 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.764889 @ 95%CL (1 toyMC)
median expected limit: r < 0.764889 @ 95%CL (1 toyMC)
   68% expected band : 0.764889 < r < 0.764889
   95% expected band : 0.764889 < r < 0.764889
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 750050541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.763323 +/- 0.00305677 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.763323 @ 95%CL (1 toyMC)
median expected limit: r < 0.763323 @ 95%CL (1 toyMC)
   68% expected band : 0.763323 < r < 0.763323
   95% expected band : 0.763323 < r < 0.763323
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 666908841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.777653 +/- 0.00302219 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.777653 @ 95%CL (1 toyMC)
median expected limit: r < 0.777653 @ 95%CL (1 toyMC)
   68% expected band : 0.777653 < r < 0.777653
   95% expected band : 0.777653 < r < 0.777653
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 202847251
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.701171 +/- 0.00413069 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.701171 @ 95%CL (1 toyMC)
median expected limit: r < 0.701171 @ 95%CL (1 toyMC)
   68% expected band : 0.701171 < r < 0.701171
   95% expected band : 0.701171 < r < 0.701171
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1800785172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55879 +/- 0.00353656 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.55879 @ 95%CL (1 toyMC)
median expected limit: r < 1.55879 @ 95%CL (1 toyMC)
   68% expected band : 1.55879 < r < 1.55879
   95% expected band : 1.55879 < r < 1.55879
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1064843309
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1 +/- 0.0034614 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1 @ 95%CL (1 toyMC)
median expected limit: r < 1 @ 95%CL (1 toyMC)
   68% expected band : 1 < r < 1
   95% expected band : 1 < r < 1
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -259740905
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38687 +/- 0.00356357 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.38687 @ 95%CL (1 toyMC)
median expected limit: r < 1.38687 @ 95%CL (1 toyMC)
   68% expected band : 1.38687 < r < 1.38687
   95% expected band : 1.38687 < r < 1.38687
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1878969814
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.905238 +/- 0.00355453 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.905238 @ 95%CL (1 toyMC)
median expected limit: r < 0.905238 @ 95%CL (1 toyMC)
   68% expected band : 0.905238 < r < 0.905238
   95% expected band : 0.905238 < r < 0.905238
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -76053817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29597 +/- 0.00412513 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.29597 @ 95%CL (1 toyMC)
median expected limit: r < 1.29597 @ 95%CL (1 toyMC)
   68% expected band : 1.29597 < r < 1.29597
   95% expected band : 1.29597 < r < 1.29597
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 950472967
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10353 +/- 0.00302928 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.10353 @ 95%CL (1 toyMC)
median expected limit: r < 1.10353 @ 95%CL (1 toyMC)
   68% expected band : 1.10353 < r < 1.10353
   95% expected band : 1.10353 < r < 1.10353
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -601817793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10693 +/- 0.00359585 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.10693 @ 95%CL (1 toyMC)
median expected limit: r < 1.10693 @ 95%CL (1 toyMC)
   68% expected band : 1.10693 < r < 1.10693
   95% expected band : 1.10693 < r < 1.10693
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 762293376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.62405 +/- 0.00372114 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.62405 @ 95%CL (1 toyMC)
median expected limit: r < 1.62405 @ 95%CL (1 toyMC)
   68% expected band : 1.62405 < r < 1.62405
   95% expected band : 1.62405 < r < 1.62405
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 78946745
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.728964 +/- 0.00314504 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.728964 @ 95%CL (1 toyMC)
median expected limit: r < 0.728964 @ 95%CL (1 toyMC)
   68% expected band : 0.728964 < r < 0.728964
   95% expected band : 0.728964 < r < 0.728964
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -640834524
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.808837 +/- 0.00359727 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.808837 @ 95%CL (1 toyMC)
median expected limit: r < 0.808837 @ 95%CL (1 toyMC)
   68% expected band : 0.808837 < r < 0.808837
   95% expected band : 0.808837 < r < 0.808837
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2117051371
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.836049 +/- 0.00421633 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.836049 @ 95%CL (1 toyMC)
median expected limit: r < 0.836049 @ 95%CL (1 toyMC)
   68% expected band : 0.836049 < r < 0.836049
   95% expected band : 0.836049 < r < 0.836049
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -473198707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.857612 +/- 0.00330729 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.857612 @ 95%CL (1 toyMC)
median expected limit: r < 0.857612 @ 95%CL (1 toyMC)
   68% expected band : 0.857612 < r < 0.857612
   95% expected band : 0.857612 < r < 0.857612
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -917518883
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.884643 +/- 0.00319308 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.884643 @ 95%CL (1 toyMC)
median expected limit: r < 0.884643 @ 95%CL (1 toyMC)
   68% expected band : 0.884643 < r < 0.884643
   95% expected band : 0.884643 < r < 0.884643
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -41447640
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.681836 +/- 0.00337307 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.681836 @ 95%CL (1 toyMC)
median expected limit: r < 0.681836 @ 95%CL (1 toyMC)
   68% expected band : 0.681836 < r < 0.681836
   95% expected band : 0.681836 < r < 0.681836
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 180138388
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.950936 +/- 0.00345095 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.950936 @ 95%CL (1 toyMC)
median expected limit: r < 0.950936 @ 95%CL (1 toyMC)
   68% expected band : 0.950936 < r < 0.950936
   95% expected band : 0.950936 < r < 0.950936
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1772261700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.760214 +/- 0.00350786 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.760214 @ 95%CL (1 toyMC)
median expected limit: r < 0.760214 @ 95%CL (1 toyMC)
   68% expected band : 0.760214 < r < 0.760214
   95% expected band : 0.760214 < r < 0.760214
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 647791229
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.867728 +/- 0.0037788 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.867728 @ 95%CL (1 toyMC)
median expected limit: r < 0.867728 @ 95%CL (1 toyMC)
   68% expected band : 0.867728 < r < 0.867728
   95% expected band : 0.867728 < r < 0.867728
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1697781604
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.700398 +/- 0.00395091 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.700398 @ 95%CL (1 toyMC)
median expected limit: r < 0.700398 @ 95%CL (1 toyMC)
   68% expected band : 0.700398 < r < 0.700398
   95% expected band : 0.700398 < r < 0.700398
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -605775672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30018 +/- 0.00329436 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.30018 @ 95%CL (1 toyMC)
median expected limit: r < 1.30018 @ 95%CL (1 toyMC)
   68% expected band : 1.30018 < r < 1.30018
   95% expected band : 1.30018 < r < 1.30018
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1752592353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05103 +/- 0.00365603 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.05103 @ 95%CL (1 toyMC)
median expected limit: r < 1.05103 @ 95%CL (1 toyMC)
   68% expected band : 1.05103 < r < 1.05103
   95% expected band : 1.05103 < r < 1.05103
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 595105588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12389 +/- 0.00379385 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.12389 @ 95%CL (1 toyMC)
median expected limit: r < 1.12389 @ 95%CL (1 toyMC)
   68% expected band : 1.12389 < r < 1.12389
   95% expected band : 1.12389 < r < 1.12389
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1827969472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15237 +/- 0.00401504 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.15237 @ 95%CL (1 toyMC)
median expected limit: r < 1.15237 @ 95%CL (1 toyMC)
   68% expected band : 1.15237 < r < 1.15237
   95% expected band : 1.15237 < r < 1.15237
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1396290192
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40517 +/- 0.00382864 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.40517 @ 95%CL (1 toyMC)
median expected limit: r < 1.40517 @ 95%CL (1 toyMC)
   68% expected band : 1.40517 < r < 1.40517
   95% expected band : 1.40517 < r < 1.40517
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1830377502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.981071 +/- 0.00370919 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.981071 @ 95%CL (1 toyMC)
median expected limit: r < 0.981071 @ 95%CL (1 toyMC)
   68% expected band : 0.981071 < r < 0.981071
   95% expected band : 0.981071 < r < 0.981071
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 587237578
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.866529 +/- 0.00367061 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.866529 @ 95%CL (1 toyMC)
median expected limit: r < 0.866529 @ 95%CL (1 toyMC)
   68% expected band : 0.866529 < r < 0.866529
   95% expected band : 0.866529 < r < 0.866529
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2114591978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41251 +/- 0.00425018 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 1.41251 @ 95%CL (1 toyMC)
median expected limit: r < 1.41251 @ 95%CL (1 toyMC)
   68% expected band : 1.41251 < r < 1.41251
   95% expected band : 1.41251 < r < 1.41251
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1677499828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.78015 +/- 0.00334364 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.78015 @ 95%CL (1 toyMC)
median expected limit: r < 0.78015 @ 95%CL (1 toyMC)
   68% expected band : 0.78015 < r < 0.78015
   95% expected band : 0.78015 < r < 0.78015
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -358306977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.618243 +/- 0.00278325 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.618243 @ 95%CL (1 toyMC)
median expected limit: r < 0.618243 @ 95%CL (1 toyMC)
   68% expected band : 0.618243 < r < 0.618243
   95% expected band : 0.618243 < r < 0.618243
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 499660478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10961 +/- 0.00310992 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.10961 @ 95%CL (1 toyMC)
median expected limit: r < 1.10961 @ 95%CL (1 toyMC)
   68% expected band : 1.10961 < r < 1.10961
   95% expected band : 1.10961 < r < 1.10961
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -7541803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17973 +/- 0.00380661 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.17973 @ 95%CL (1 toyMC)
median expected limit: r < 1.17973 @ 95%CL (1 toyMC)
   68% expected band : 1.17973 < r < 1.17973
   95% expected band : 1.17973 < r < 1.17973
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1042458016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.812662 +/- 0.00371515 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.812662 @ 95%CL (1 toyMC)
median expected limit: r < 0.812662 @ 95%CL (1 toyMC)
   68% expected band : 0.812662 < r < 0.812662
   95% expected band : 0.812662 < r < 0.812662
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 143371994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.742996 +/- 0.00301629 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.742996 @ 95%CL (1 toyMC)
median expected limit: r < 0.742996 @ 95%CL (1 toyMC)
   68% expected band : 0.742996 < r < 0.742996
   95% expected band : 0.742996 < r < 0.742996
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1347180391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43475 +/- 0.00412939 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.43475 @ 95%CL (1 toyMC)
median expected limit: r < 1.43475 @ 95%CL (1 toyMC)
   68% expected band : 1.43475 < r < 1.43475
   95% expected band : 1.43475 < r < 1.43475
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -382507979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.863962 +/- 0.00325634 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.863962 @ 95%CL (1 toyMC)
median expected limit: r < 0.863962 @ 95%CL (1 toyMC)
   68% expected band : 0.863962 < r < 0.863962
   95% expected band : 0.863962 < r < 0.863962
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -799270767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.828159 +/- 0.00326273 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.828159 @ 95%CL (1 toyMC)
median expected limit: r < 0.828159 @ 95%CL (1 toyMC)
   68% expected band : 0.828159 < r < 0.828159
   95% expected band : 0.828159 < r < 0.828159
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1128001276
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.971045 +/- 0.00312852 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.971045 @ 95%CL (1 toyMC)
median expected limit: r < 0.971045 @ 95%CL (1 toyMC)
   68% expected band : 0.971045 < r < 0.971045
   95% expected band : 0.971045 < r < 0.971045
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1490227466
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.658487 +/- 0.00328631 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.658487 @ 95%CL (1 toyMC)
median expected limit: r < 0.658487 @ 95%CL (1 toyMC)
   68% expected band : 0.658487 < r < 0.658487
   95% expected band : 0.658487 < r < 0.658487
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2060441301
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34372 +/- 0.00369814 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.34372 @ 95%CL (1 toyMC)
median expected limit: r < 1.34372 @ 95%CL (1 toyMC)
   68% expected band : 1.34372 < r < 1.34372
   95% expected band : 1.34372 < r < 1.34372
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1367551851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.840214 +/- 0.0030396 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.840214 @ 95%CL (1 toyMC)
median expected limit: r < 0.840214 @ 95%CL (1 toyMC)
   68% expected band : 0.840214 < r < 0.840214
   95% expected band : 0.840214 < r < 0.840214
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1017414750
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.681734 +/- 0.00352335 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.681734 @ 95%CL (1 toyMC)
median expected limit: r < 0.681734 @ 95%CL (1 toyMC)
   68% expected band : 0.681734 < r < 0.681734
   95% expected band : 0.681734 < r < 0.681734
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1149131291
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.814016 +/- 0.00372064 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.814016 @ 95%CL (1 toyMC)
median expected limit: r < 0.814016 @ 95%CL (1 toyMC)
   68% expected band : 0.814016 < r < 0.814016
   95% expected band : 0.814016 < r < 0.814016
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1804985466
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.968637 +/- 0.00397691 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.968637 @ 95%CL (1 toyMC)
median expected limit: r < 0.968637 @ 95%CL (1 toyMC)
   68% expected band : 0.968637 < r < 0.968637
   95% expected band : 0.968637 < r < 0.968637
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -718653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.744906 +/- 0.00353375 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.744906 @ 95%CL (1 toyMC)
median expected limit: r < 0.744906 @ 95%CL (1 toyMC)
   68% expected band : 0.744906 < r < 0.744906
   95% expected band : 0.744906 < r < 0.744906
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -119812853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21109 +/- 0.00303579 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.21109 @ 95%CL (1 toyMC)
median expected limit: r < 1.21109 @ 95%CL (1 toyMC)
   68% expected band : 1.21109 < r < 1.21109
   95% expected band : 1.21109 < r < 1.21109
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -392977720
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.915043 +/- 0.00365481 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.915043 @ 95%CL (1 toyMC)
median expected limit: r < 0.915043 @ 95%CL (1 toyMC)
   68% expected band : 0.915043 < r < 0.915043
   95% expected band : 0.915043 < r < 0.915043
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -127096795
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08705 +/- 0.00293463 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.08705 @ 95%CL (1 toyMC)
median expected limit: r < 1.08705 @ 95%CL (1 toyMC)
   68% expected band : 1.08705 < r < 1.08705
   95% expected band : 1.08705 < r < 1.08705
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2103901342
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.963461 +/- 0.00377794 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.963461 @ 95%CL (1 toyMC)
median expected limit: r < 0.963461 @ 95%CL (1 toyMC)
   68% expected band : 0.963461 < r < 0.963461
   95% expected band : 0.963461 < r < 0.963461
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1496126542
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.792766 +/- 0.00399735 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.792766 @ 95%CL (1 toyMC)
median expected limit: r < 0.792766 @ 95%CL (1 toyMC)
   68% expected band : 0.792766 < r < 0.792766
   95% expected band : 0.792766 < r < 0.792766
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -741912620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53935 +/- 0.00422041 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.53935 @ 95%CL (1 toyMC)
median expected limit: r < 1.53935 @ 95%CL (1 toyMC)
   68% expected band : 1.53935 < r < 1.53935
   95% expected band : 1.53935 < r < 1.53935
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 144906869
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.804788 +/- 0.00406412 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.804788 @ 95%CL (1 toyMC)
median expected limit: r < 0.804788 @ 95%CL (1 toyMC)
   68% expected band : 0.804788 < r < 0.804788
   95% expected band : 0.804788 < r < 0.804788
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 227773790
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18945 +/- 0.00350622 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.18945 @ 95%CL (1 toyMC)
median expected limit: r < 1.18945 @ 95%CL (1 toyMC)
   68% expected band : 1.18945 < r < 1.18945
   95% expected band : 1.18945 < r < 1.18945
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -439071355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06966 +/- 0.00335404 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.06966 @ 95%CL (1 toyMC)
median expected limit: r < 1.06966 @ 95%CL (1 toyMC)
   68% expected band : 1.06966 < r < 1.06966
   95% expected band : 1.06966 < r < 1.06966
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2113689288
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.752917 +/- 0.00404089 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.752917 @ 95%CL (1 toyMC)
median expected limit: r < 0.752917 @ 95%CL (1 toyMC)
   68% expected band : 0.752917 < r < 0.752917
   95% expected band : 0.752917 < r < 0.752917
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -182687317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34285 +/- 0.00320862 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.34285 @ 95%CL (1 toyMC)
median expected limit: r < 1.34285 @ 95%CL (1 toyMC)
   68% expected band : 1.34285 < r < 1.34285
   95% expected band : 1.34285 < r < 1.34285
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1848374223
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.641782 +/- 0.00326242 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.641782 @ 95%CL (1 toyMC)
median expected limit: r < 0.641782 @ 95%CL (1 toyMC)
   68% expected band : 0.641782 < r < 0.641782
   95% expected band : 0.641782 < r < 0.641782
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -518710824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01697 +/- 0.00346661 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.01697 @ 95%CL (1 toyMC)
median expected limit: r < 1.01697 @ 95%CL (1 toyMC)
   68% expected band : 1.01697 < r < 1.01697
   95% expected band : 1.01697 < r < 1.01697
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1576956220
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21515 +/- 0.00300465 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.21515 @ 95%CL (1 toyMC)
median expected limit: r < 1.21515 @ 95%CL (1 toyMC)
   68% expected band : 1.21515 < r < 1.21515
   95% expected band : 1.21515 < r < 1.21515
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1041263012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.700075 +/- 0.00429016 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.700075 @ 95%CL (1 toyMC)
median expected limit: r < 0.700075 @ 95%CL (1 toyMC)
   68% expected band : 0.700075 < r < 0.700075
   95% expected band : 0.700075 < r < 0.700075
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -109509971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.633882 +/- 0.00296145 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.633882 @ 95%CL (1 toyMC)
median expected limit: r < 0.633882 @ 95%CL (1 toyMC)
   68% expected band : 0.633882 < r < 0.633882
   95% expected band : 0.633882 < r < 0.633882
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -893573077
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.705331 +/- 0.00326986 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.705331 @ 95%CL (1 toyMC)
median expected limit: r < 0.705331 @ 95%CL (1 toyMC)
   68% expected band : 0.705331 < r < 0.705331
   95% expected band : 0.705331 < r < 0.705331
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1447489518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27481 +/- 0.00286131 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.27481 @ 95%CL (1 toyMC)
median expected limit: r < 1.27481 @ 95%CL (1 toyMC)
   68% expected band : 1.27481 < r < 1.27481
   95% expected band : 1.27481 < r < 1.27481
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 475533132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.77745 +/- 0.00444765 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.77745 @ 95%CL (1 toyMC)
median expected limit: r < 0.77745 @ 95%CL (1 toyMC)
   68% expected band : 0.77745 < r < 0.77745
   95% expected band : 0.77745 < r < 0.77745
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 59951869
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.986989 +/- 0.0027777 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.986989 @ 95%CL (1 toyMC)
median expected limit: r < 0.986989 @ 95%CL (1 toyMC)
   68% expected band : 0.986989 < r < 0.986989
   95% expected band : 0.986989 < r < 0.986989
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -797932092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.856725 +/- 0.00342121 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.856725 @ 95%CL (1 toyMC)
median expected limit: r < 0.856725 @ 95%CL (1 toyMC)
   68% expected band : 0.856725 < r < 0.856725
   95% expected band : 0.856725 < r < 0.856725
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2135785990
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.766946 +/- 0.00363921 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.766946 @ 95%CL (1 toyMC)
median expected limit: r < 0.766946 @ 95%CL (1 toyMC)
   68% expected band : 0.766946 < r < 0.766946
   95% expected band : 0.766946 < r < 0.766946
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1925027430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26157 +/- 0.00327563 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.26157 @ 95%CL (1 toyMC)
median expected limit: r < 1.26157 @ 95%CL (1 toyMC)
   68% expected band : 1.26157 < r < 1.26157
   95% expected band : 1.26157 < r < 1.26157
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -122523840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.888315 +/- 0.00259279 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.888315 @ 95%CL (1 toyMC)
median expected limit: r < 0.888315 @ 95%CL (1 toyMC)
   68% expected band : 0.888315 < r < 0.888315
   95% expected band : 0.888315 < r < 0.888315
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 512846703
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.934084 +/- 0.0024285 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.934084 @ 95%CL (1 toyMC)
median expected limit: r < 0.934084 @ 95%CL (1 toyMC)
   68% expected band : 0.934084 < r < 0.934084
   95% expected band : 0.934084 < r < 0.934084
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2074785668
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.81349 +/- 0.00310553 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.81349 @ 95%CL (1 toyMC)
median expected limit: r < 0.81349 @ 95%CL (1 toyMC)
   68% expected band : 0.81349 < r < 0.81349
   95% expected band : 0.81349 < r < 0.81349
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1645118194
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.759323 +/- 0.00291344 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.759323 @ 95%CL (1 toyMC)
median expected limit: r < 0.759323 @ 95%CL (1 toyMC)
   68% expected band : 0.759323 < r < 0.759323
   95% expected band : 0.759323 < r < 0.759323
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1076098323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.688786 +/- 0.00328947 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.688786 @ 95%CL (1 toyMC)
median expected limit: r < 0.688786 @ 95%CL (1 toyMC)
   68% expected band : 0.688786 < r < 0.688786
   95% expected band : 0.688786 < r < 0.688786
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -344572876
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14941 +/- 0.00374053 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.14941 @ 95%CL (1 toyMC)
median expected limit: r < 1.14941 @ 95%CL (1 toyMC)
   68% expected band : 1.14941 < r < 1.14941
   95% expected band : 1.14941 < r < 1.14941
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -701672373
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.752041 +/- 0.00299458 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.752041 @ 95%CL (1 toyMC)
median expected limit: r < 0.752041 @ 95%CL (1 toyMC)
   68% expected band : 0.752041 < r < 0.752041
   95% expected band : 0.752041 < r < 0.752041
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1430133281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16546 +/- 0.00281435 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.16546 @ 95%CL (1 toyMC)
median expected limit: r < 1.16546 @ 95%CL (1 toyMC)
   68% expected band : 1.16546 < r < 1.16546
   95% expected band : 1.16546 < r < 1.16546
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 244830695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.963625 +/- 0.00401193 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.963625 @ 95%CL (1 toyMC)
median expected limit: r < 0.963625 @ 95%CL (1 toyMC)
   68% expected band : 0.963625 < r < 0.963625
   95% expected band : 0.963625 < r < 0.963625
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 394098851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.928032 +/- 0.00355038 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.928032 @ 95%CL (1 toyMC)
median expected limit: r < 0.928032 @ 95%CL (1 toyMC)
   68% expected band : 0.928032 < r < 0.928032
   95% expected band : 0.928032 < r < 0.928032
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 958670141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03407 +/- 0.00391494 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.03407 @ 95%CL (1 toyMC)
median expected limit: r < 1.03407 @ 95%CL (1 toyMC)
   68% expected band : 1.03407 < r < 1.03407
   95% expected band : 1.03407 < r < 1.03407
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1954889839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.949944 +/- 0.00410709 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.949944 @ 95%CL (1 toyMC)
median expected limit: r < 0.949944 @ 95%CL (1 toyMC)
   68% expected band : 0.949944 < r < 0.949944
   95% expected band : 0.949944 < r < 0.949944
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2020712010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.884969 +/- 0.00288758 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.884969 @ 95%CL (1 toyMC)
median expected limit: r < 0.884969 @ 95%CL (1 toyMC)
   68% expected band : 0.884969 < r < 0.884969
   95% expected band : 0.884969 < r < 0.884969
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1371500042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01715 +/- 0.00379701 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.01715 @ 95%CL (1 toyMC)
median expected limit: r < 1.01715 @ 95%CL (1 toyMC)
   68% expected band : 1.01715 < r < 1.01715
   95% expected band : 1.01715 < r < 1.01715
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1028132617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.725298 +/- 0.00355034 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.725298 @ 95%CL (1 toyMC)
median expected limit: r < 0.725298 @ 95%CL (1 toyMC)
   68% expected band : 0.725298 < r < 0.725298
   95% expected band : 0.725298 < r < 0.725298
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1901066506
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.909085 +/- 0.00366768 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.909085 @ 95%CL (1 toyMC)
median expected limit: r < 0.909085 @ 95%CL (1 toyMC)
   68% expected band : 0.909085 < r < 0.909085
   95% expected band : 0.909085 < r < 0.909085
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1566555357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21052 +/- 0.00388198 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.21052 @ 95%CL (1 toyMC)
median expected limit: r < 1.21052 @ 95%CL (1 toyMC)
   68% expected band : 1.21052 < r < 1.21052
   95% expected band : 1.21052 < r < 1.21052
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -252991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.949823 +/- 0.00316919 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.949823 @ 95%CL (1 toyMC)
median expected limit: r < 0.949823 @ 95%CL (1 toyMC)
   68% expected band : 0.949823 < r < 0.949823
   95% expected band : 0.949823 < r < 0.949823
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1862866118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.874698 +/- 0.00331556 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.874698 @ 95%CL (1 toyMC)
median expected limit: r < 0.874698 @ 95%CL (1 toyMC)
   68% expected band : 0.874698 < r < 0.874698
   95% expected band : 0.874698 < r < 0.874698
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1539046196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38395 +/- 0.00391476 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.38395 @ 95%CL (1 toyMC)
median expected limit: r < 1.38395 @ 95%CL (1 toyMC)
   68% expected band : 1.38395 < r < 1.38395
   95% expected band : 1.38395 < r < 1.38395
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 521347784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.777835 +/- 0.00384012 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.777835 @ 95%CL (1 toyMC)
median expected limit: r < 0.777835 @ 95%CL (1 toyMC)
   68% expected band : 0.777835 < r < 0.777835
   95% expected band : 0.777835 < r < 0.777835
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -977750090
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.959639 +/- 0.00386565 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.959639 @ 95%CL (1 toyMC)
median expected limit: r < 0.959639 @ 95%CL (1 toyMC)
   68% expected band : 0.959639 < r < 0.959639
   95% expected band : 0.959639 < r < 0.959639
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2107873144
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02368 +/- 0.00374951 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.02368 @ 95%CL (1 toyMC)
median expected limit: r < 1.02368 @ 95%CL (1 toyMC)
   68% expected band : 1.02368 < r < 1.02368
   95% expected band : 1.02368 < r < 1.02368
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1355045406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04443 +/- 0.00317618 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.04443 @ 95%CL (1 toyMC)
median expected limit: r < 1.04443 @ 95%CL (1 toyMC)
   68% expected band : 1.04443 < r < 1.04443
   95% expected band : 1.04443 < r < 1.04443
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1724204343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03807 +/- 0.00345757 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.03807 @ 95%CL (1 toyMC)
median expected limit: r < 1.03807 @ 95%CL (1 toyMC)
   68% expected band : 1.03807 < r < 1.03807
   95% expected band : 1.03807 < r < 1.03807
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1017575022
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.839139 +/- 0.00379748 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.839139 @ 95%CL (1 toyMC)
median expected limit: r < 0.839139 @ 95%CL (1 toyMC)
   68% expected band : 0.839139 < r < 0.839139
   95% expected band : 0.839139 < r < 0.839139
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1490615849
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.729412 +/- 0.00345556 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.729412 @ 95%CL (1 toyMC)
median expected limit: r < 0.729412 @ 95%CL (1 toyMC)
   68% expected band : 0.729412 < r < 0.729412
   95% expected band : 0.729412 < r < 0.729412
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 98615663
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.718381 +/- 0.00284655 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.718381 @ 95%CL (1 toyMC)
median expected limit: r < 0.718381 @ 95%CL (1 toyMC)
   68% expected band : 0.718381 < r < 0.718381
   95% expected band : 0.718381 < r < 0.718381
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1017414750.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1028132617.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1042458016.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1064843309.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1076098323.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-109509971.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1128001276.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-119812853.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-122523840.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-127096795.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1396290192.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1752592353.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-182687317.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1827969472.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1830377502.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1878969814.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1925027430.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1954889839.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-2020712010.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-2074785668.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-2103901342.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-2107873144.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-2114591978.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-2117051371.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-2135785990.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-252991.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-259740905.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-344572876.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-358306977.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-382507979.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-392977720.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-41447640.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-439071355.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-473198707.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-518710824.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-601817793.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-605775672.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-631856137.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-640834524.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-701672373.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-718653.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-741912620.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-7541803.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-76053817.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-797932092.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-799270767.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-893573077.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-917518883.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-977750090.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.1017575022.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1041263012.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1149131291.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1347180391.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1355045406.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1367551851.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1371500042.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1430133281.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.143371994.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1447489518.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.144906869.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1490227466.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1490615849.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1496126542.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1539046196.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1566555357.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1576956220.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1645118194.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1677499828.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1697781604.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1724204343.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1772261700.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1800785172.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.180138388.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1804985466.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.1848374223.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.1862866118.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.1901066506.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.202847251.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.2060441301.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.2113689288.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.227773790.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.244830695.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.394098851.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.475533132.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.499660478.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.512846703.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.521347784.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.587237578.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.595105588.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.59951869.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.647791229.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.666908841.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.750050541.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.762293376.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.774582971.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.78946745.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.950472967.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.958670141.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.972928081.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.98615663.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1931526568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13309 +/- 0.00361952 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.13309 @ 95%CL (1 toyMC)
median expected limit: r < 1.13309 @ 95%CL (1 toyMC)
   68% expected band : 1.13309 < r < 1.13309
   95% expected band : 1.13309 < r < 1.13309
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -103822832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23651 +/- 0.00373127 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.23651 @ 95%CL (1 toyMC)
median expected limit: r < 1.23651 @ 95%CL (1 toyMC)
   68% expected band : 1.23651 < r < 1.23651
   95% expected band : 1.23651 < r < 1.23651
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1410533817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.78797 +/- 0.00363051 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.78797 @ 95%CL (1 toyMC)
median expected limit: r < 0.78797 @ 95%CL (1 toyMC)
   68% expected band : 0.78797 < r < 0.78797
   95% expected band : 0.78797 < r < 0.78797
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2062459050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.9369 +/- 0.00279668 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.9369 @ 95%CL (1 toyMC)
median expected limit: r < 0.9369 @ 95%CL (1 toyMC)
   68% expected band : 0.9369 < r < 0.9369
   95% expected band : 0.9369 < r < 0.9369
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -376340549
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.645416 +/- 0.00306098 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.645416 @ 95%CL (1 toyMC)
median expected limit: r < 0.645416 @ 95%CL (1 toyMC)
   68% expected band : 0.645416 < r < 0.645416
   95% expected band : 0.645416 < r < 0.645416
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -127699606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52909 +/- 0.00427002 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.52909 @ 95%CL (1 toyMC)
median expected limit: r < 1.52909 @ 95%CL (1 toyMC)
   68% expected band : 1.52909 < r < 1.52909
   95% expected band : 1.52909 < r < 1.52909
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 379726188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.717326 +/- 0.0029013 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.717326 @ 95%CL (1 toyMC)
median expected limit: r < 0.717326 @ 95%CL (1 toyMC)
   68% expected band : 0.717326 < r < 0.717326
   95% expected band : 0.717326 < r < 0.717326
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 611626064
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.837431 +/- 0.00373446 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.837431 @ 95%CL (1 toyMC)
median expected limit: r < 0.837431 @ 95%CL (1 toyMC)
   68% expected band : 0.837431 < r < 0.837431
   95% expected band : 0.837431 < r < 0.837431
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1800618758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.77374 +/- 0.00373699 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.77374 @ 95%CL (1 toyMC)
median expected limit: r < 0.77374 @ 95%CL (1 toyMC)
   68% expected band : 0.77374 < r < 0.77374
   95% expected band : 0.77374 < r < 0.77374
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1480192466
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16768 +/- 0.00368908 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.16768 @ 95%CL (1 toyMC)
median expected limit: r < 1.16768 @ 95%CL (1 toyMC)
   68% expected band : 1.16768 < r < 1.16768
   95% expected band : 1.16768 < r < 1.16768
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1963696062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.702564 +/- 0.00369347 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.702564 @ 95%CL (1 toyMC)
median expected limit: r < 0.702564 @ 95%CL (1 toyMC)
   68% expected band : 0.702564 < r < 0.702564
   95% expected band : 0.702564 < r < 0.702564
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1290716187
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.912336 +/- 0.00327133 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.912336 @ 95%CL (1 toyMC)
median expected limit: r < 0.912336 @ 95%CL (1 toyMC)
   68% expected band : 0.912336 < r < 0.912336
   95% expected band : 0.912336 < r < 0.912336
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 119068088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0956 +/- 0.00256632 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.0956 @ 95%CL (1 toyMC)
median expected limit: r < 1.0956 @ 95%CL (1 toyMC)
   68% expected band : 1.0956 < r < 1.0956
   95% expected band : 1.0956 < r < 1.0956
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1101396893
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.646778 +/- 0.00300969 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.646778 @ 95%CL (1 toyMC)
median expected limit: r < 0.646778 @ 95%CL (1 toyMC)
   68% expected band : 0.646778 < r < 0.646778
   95% expected band : 0.646778 < r < 0.646778
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1059768179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.8089 +/- 0.00329617 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.8089 @ 95%CL (1 toyMC)
median expected limit: r < 0.8089 @ 95%CL (1 toyMC)
   68% expected band : 0.8089 < r < 0.8089
   95% expected band : 0.8089 < r < 0.8089
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2122084559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.759197 +/- 0.00355231 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.759197 @ 95%CL (1 toyMC)
median expected limit: r < 0.759197 @ 95%CL (1 toyMC)
   68% expected band : 0.759197 < r < 0.759197
   95% expected band : 0.759197 < r < 0.759197
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1323732787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.725201 +/- 0.00314551 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.725201 @ 95%CL (1 toyMC)
median expected limit: r < 0.725201 @ 95%CL (1 toyMC)
   68% expected band : 0.725201 < r < 0.725201
   95% expected band : 0.725201 < r < 0.725201
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 260445837
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08905 +/- 0.00416751 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.08905 @ 95%CL (1 toyMC)
median expected limit: r < 1.08905 @ 95%CL (1 toyMC)
   68% expected band : 1.08905 < r < 1.08905
   95% expected band : 1.08905 < r < 1.08905
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 929814166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.963093 +/- 0.00375232 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.963093 @ 95%CL (1 toyMC)
median expected limit: r < 0.963093 @ 95%CL (1 toyMC)
   68% expected band : 0.963093 < r < 0.963093
   95% expected band : 0.963093 < r < 0.963093
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1332752153
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.917261 +/- 0.00331248 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.917261 @ 95%CL (1 toyMC)
median expected limit: r < 0.917261 @ 95%CL (1 toyMC)
   68% expected band : 0.917261 < r < 0.917261
   95% expected band : 0.917261 < r < 0.917261
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -707865897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.906404 +/- 0.00329514 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.906404 @ 95%CL (1 toyMC)
median expected limit: r < 0.906404 @ 95%CL (1 toyMC)
   68% expected band : 0.906404 < r < 0.906404
   95% expected band : 0.906404 < r < 0.906404
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 945543663
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.883373 +/- 0.00342131 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.883373 @ 95%CL (1 toyMC)
median expected limit: r < 0.883373 @ 95%CL (1 toyMC)
   68% expected band : 0.883373 < r < 0.883373
   95% expected band : 0.883373 < r < 0.883373
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2066335673
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.846004 +/- 0.00357223 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.846004 @ 95%CL (1 toyMC)
median expected limit: r < 0.846004 @ 95%CL (1 toyMC)
   68% expected band : 0.846004 < r < 0.846004
   95% expected band : 0.846004 < r < 0.846004
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1883448999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.780307 +/- 0.00317691 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.780307 @ 95%CL (1 toyMC)
median expected limit: r < 0.780307 @ 95%CL (1 toyMC)
   68% expected band : 0.780307 < r < 0.780307
   95% expected band : 0.780307 < r < 0.780307
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 756927973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.899623 +/- 0.00404857 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.899623 @ 95%CL (1 toyMC)
median expected limit: r < 0.899623 @ 95%CL (1 toyMC)
   68% expected band : 0.899623 < r < 0.899623
   95% expected band : 0.899623 < r < 0.899623
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1283944362
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3106 +/- 0.00357209 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.3106 @ 95%CL (1 toyMC)
median expected limit: r < 1.3106 @ 95%CL (1 toyMC)
   68% expected band : 1.3106 < r < 1.3106
   95% expected band : 1.3106 < r < 1.3106
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -173947293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.953168 +/- 0.00393493 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.953168 @ 95%CL (1 toyMC)
median expected limit: r < 0.953168 @ 95%CL (1 toyMC)
   68% expected band : 0.953168 < r < 0.953168
   95% expected band : 0.953168 < r < 0.953168
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -524213091
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37146 +/- 0.00324085 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.37146 @ 95%CL (1 toyMC)
median expected limit: r < 1.37146 @ 95%CL (1 toyMC)
   68% expected band : 1.37146 < r < 1.37146
   95% expected band : 1.37146 < r < 1.37146
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1956199417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0592 +/- 0.00399801 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.0592 @ 95%CL (1 toyMC)
median expected limit: r < 1.0592 @ 95%CL (1 toyMC)
   68% expected band : 1.0592 < r < 1.0592
   95% expected band : 1.0592 < r < 1.0592
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 127794676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02838 +/- 0.00290757 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.02838 @ 95%CL (1 toyMC)
median expected limit: r < 1.02838 @ 95%CL (1 toyMC)
   68% expected band : 1.02838 < r < 1.02838
   95% expected band : 1.02838 < r < 1.02838
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1876334383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.617299 +/- 0.002678 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.617299 @ 95%CL (1 toyMC)
median expected limit: r < 0.617299 @ 95%CL (1 toyMC)
   68% expected band : 0.617299 < r < 0.617299
   95% expected band : 0.617299 < r < 0.617299
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1990116379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.945445 +/- 0.00298501 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.945445 @ 95%CL (1 toyMC)
median expected limit: r < 0.945445 @ 95%CL (1 toyMC)
   68% expected band : 0.945445 < r < 0.945445
   95% expected band : 0.945445 < r < 0.945445
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1877138372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.726668 +/- 0.00412744 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.726668 @ 95%CL (1 toyMC)
median expected limit: r < 0.726668 @ 95%CL (1 toyMC)
   68% expected band : 0.726668 < r < 0.726668
   95% expected band : 0.726668 < r < 0.726668
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -708043352
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.710985 +/- 0.00231229 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.710985 @ 95%CL (1 toyMC)
median expected limit: r < 0.710985 @ 95%CL (1 toyMC)
   68% expected band : 0.710985 < r < 0.710985
   95% expected band : 0.710985 < r < 0.710985
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -128434119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.764332 +/- 0.00396541 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.764332 @ 95%CL (1 toyMC)
median expected limit: r < 0.764332 @ 95%CL (1 toyMC)
   68% expected band : 0.764332 < r < 0.764332
   95% expected band : 0.764332 < r < 0.764332
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2048394133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.881311 +/- 0.00391296 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.881311 @ 95%CL (1 toyMC)
median expected limit: r < 0.881311 @ 95%CL (1 toyMC)
   68% expected band : 0.881311 < r < 0.881311
   95% expected band : 0.881311 < r < 0.881311
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1389858112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.733103 +/- 0.00312832 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.733103 @ 95%CL (1 toyMC)
median expected limit: r < 0.733103 @ 95%CL (1 toyMC)
   68% expected band : 0.733103 < r < 0.733103
   95% expected band : 0.733103 < r < 0.733103
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -605836175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.924639 +/- 0.00388499 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.924639 @ 95%CL (1 toyMC)
median expected limit: r < 0.924639 @ 95%CL (1 toyMC)
   68% expected band : 0.924639 < r < 0.924639
   95% expected band : 0.924639 < r < 0.924639
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -658688158
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.656646 +/- 0.00384725 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.656646 @ 95%CL (1 toyMC)
median expected limit: r < 0.656646 @ 95%CL (1 toyMC)
   68% expected band : 0.656646 < r < 0.656646
   95% expected band : 0.656646 < r < 0.656646
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -666402816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.690185 +/- 0.002736 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.690185 @ 95%CL (1 toyMC)
median expected limit: r < 0.690185 @ 95%CL (1 toyMC)
   68% expected band : 0.690185 < r < 0.690185
   95% expected band : 0.690185 < r < 0.690185
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 352384004
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.799765 +/- 0.00336495 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.799765 @ 95%CL (1 toyMC)
median expected limit: r < 0.799765 @ 95%CL (1 toyMC)
   68% expected band : 0.799765 < r < 0.799765
   95% expected band : 0.799765 < r < 0.799765
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1347337487
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.813673 +/- 0.00393022 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.813673 @ 95%CL (1 toyMC)
median expected limit: r < 0.813673 @ 95%CL (1 toyMC)
   68% expected band : 0.813673 < r < 0.813673
   95% expected band : 0.813673 < r < 0.813673
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1285797886
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.597485 +/- 0.00359186 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.597485 @ 95%CL (1 toyMC)
median expected limit: r < 0.597485 @ 95%CL (1 toyMC)
   68% expected band : 0.597485 < r < 0.597485
   95% expected band : 0.597485 < r < 0.597485
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 204376272
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.770822 +/- 0.00361884 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.770822 @ 95%CL (1 toyMC)
median expected limit: r < 0.770822 @ 95%CL (1 toyMC)
   68% expected band : 0.770822 < r < 0.770822
   95% expected band : 0.770822 < r < 0.770822
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -357405233
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.760791 +/- 0.00333829 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.760791 @ 95%CL (1 toyMC)
median expected limit: r < 0.760791 @ 95%CL (1 toyMC)
   68% expected band : 0.760791 < r < 0.760791
   95% expected band : 0.760791 < r < 0.760791
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1817586297
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48859 +/- 0.00391635 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.48859 @ 95%CL (1 toyMC)
median expected limit: r < 1.48859 @ 95%CL (1 toyMC)
   68% expected band : 1.48859 < r < 1.48859
   95% expected band : 1.48859 < r < 1.48859
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 951040293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.818368 +/- 0.0034521 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.818368 @ 95%CL (1 toyMC)
median expected limit: r < 0.818368 @ 95%CL (1 toyMC)
   68% expected band : 0.818368 < r < 0.818368
   95% expected band : 0.818368 < r < 0.818368
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 389420340
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.76786 +/- 0.00341702 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.76786 @ 95%CL (1 toyMC)
median expected limit: r < 0.76786 @ 95%CL (1 toyMC)
   68% expected band : 0.76786 < r < 0.76786
   95% expected band : 0.76786 < r < 0.76786
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1483871522
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.90008 +/- 0.00349816 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.90008 @ 95%CL (1 toyMC)
median expected limit: r < 1.90008 @ 95%CL (1 toyMC)
   68% expected band : 1.90008 < r < 1.90008
   95% expected band : 1.90008 < r < 1.90008
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -294412211
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03273 +/- 0.0028786 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.03273 @ 95%CL (1 toyMC)
median expected limit: r < 1.03273 @ 95%CL (1 toyMC)
   68% expected band : 1.03273 < r < 1.03273
   95% expected band : 1.03273 < r < 1.03273
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2044664319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.811407 +/- 0.00329459 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.811407 @ 95%CL (1 toyMC)
median expected limit: r < 0.811407 @ 95%CL (1 toyMC)
   68% expected band : 0.811407 < r < 0.811407
   95% expected band : 0.811407 < r < 0.811407
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -441519185
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.86138 +/- 0.00416748 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.86138 @ 95%CL (1 toyMC)
median expected limit: r < 0.86138 @ 95%CL (1 toyMC)
   68% expected band : 0.86138 < r < 0.86138
   95% expected band : 0.86138 < r < 0.86138
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1874909369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24349 +/- 0.00384602 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.24349 @ 95%CL (1 toyMC)
median expected limit: r < 1.24349 @ 95%CL (1 toyMC)
   68% expected band : 1.24349 < r < 1.24349
   95% expected band : 1.24349 < r < 1.24349
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -759350830
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04075 +/- 0.00376804 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04075 @ 95%CL (1 toyMC)
median expected limit: r < 1.04075 @ 95%CL (1 toyMC)
   68% expected band : 1.04075 < r < 1.04075
   95% expected band : 1.04075 < r < 1.04075
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1897011563
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.773517 +/- 0.00369076 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.773517 @ 95%CL (1 toyMC)
median expected limit: r < 0.773517 @ 95%CL (1 toyMC)
   68% expected band : 0.773517 < r < 0.773517
   95% expected band : 0.773517 < r < 0.773517
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1637794560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09488 +/- 0.003231 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09488 @ 95%CL (1 toyMC)
median expected limit: r < 1.09488 @ 95%CL (1 toyMC)
   68% expected band : 1.09488 < r < 1.09488
   95% expected band : 1.09488 < r < 1.09488
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 530873551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.710593 +/- 0.00304328 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.710593 @ 95%CL (1 toyMC)
median expected limit: r < 0.710593 @ 95%CL (1 toyMC)
   68% expected band : 0.710593 < r < 0.710593
   95% expected band : 0.710593 < r < 0.710593
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -962033361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04632 +/- 0.00377565 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.04632 @ 95%CL (1 toyMC)
median expected limit: r < 1.04632 @ 95%CL (1 toyMC)
   68% expected band : 1.04632 < r < 1.04632
   95% expected band : 1.04632 < r < 1.04632
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2018690388
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23713 +/- 0.00272988 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.23713 @ 95%CL (1 toyMC)
median expected limit: r < 1.23713 @ 95%CL (1 toyMC)
   68% expected band : 1.23713 < r < 1.23713
   95% expected band : 1.23713 < r < 1.23713
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1418539138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.709254 +/- 0.00338312 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.709254 @ 95%CL (1 toyMC)
median expected limit: r < 0.709254 @ 95%CL (1 toyMC)
   68% expected band : 0.709254 < r < 0.709254
   95% expected band : 0.709254 < r < 0.709254
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1442067743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.892836 +/- 0.00374256 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.892836 @ 95%CL (1 toyMC)
median expected limit: r < 0.892836 @ 95%CL (1 toyMC)
   68% expected band : 0.892836 < r < 0.892836
   95% expected band : 0.892836 < r < 0.892836
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1787968283
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31757 +/- 0.00375569 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.31757 @ 95%CL (1 toyMC)
median expected limit: r < 1.31757 @ 95%CL (1 toyMC)
   68% expected band : 1.31757 < r < 1.31757
   95% expected band : 1.31757 < r < 1.31757
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1608260579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.920833 +/- 0.00379109 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.920833 @ 95%CL (1 toyMC)
median expected limit: r < 0.920833 @ 95%CL (1 toyMC)
   68% expected band : 0.920833 < r < 0.920833
   95% expected band : 0.920833 < r < 0.920833
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 640852390
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.769062 +/- 0.00367266 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.769062 @ 95%CL (1 toyMC)
median expected limit: r < 0.769062 @ 95%CL (1 toyMC)
   68% expected band : 0.769062 < r < 0.769062
   95% expected band : 0.769062 < r < 0.769062
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1084749825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04731 +/- 0.00373639 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04731 @ 95%CL (1 toyMC)
median expected limit: r < 1.04731 @ 95%CL (1 toyMC)
   68% expected band : 1.04731 < r < 1.04731
   95% expected band : 1.04731 < r < 1.04731
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1988005970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21901 +/- 0.00432271 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.21901 @ 95%CL (1 toyMC)
median expected limit: r < 1.21901 @ 95%CL (1 toyMC)
   68% expected band : 1.21901 < r < 1.21901
   95% expected band : 1.21901 < r < 1.21901
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1422543125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50192 +/- 0.00302862 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.50192 @ 95%CL (1 toyMC)
median expected limit: r < 1.50192 @ 95%CL (1 toyMC)
   68% expected band : 1.50192 < r < 1.50192
   95% expected band : 1.50192 < r < 1.50192
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1257437579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.875509 +/- 0.0027634 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.875509 @ 95%CL (1 toyMC)
median expected limit: r < 0.875509 @ 95%CL (1 toyMC)
   68% expected band : 0.875509 < r < 0.875509
   95% expected band : 0.875509 < r < 0.875509
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1836248617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48089 +/- 0.00326159 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.48089 @ 95%CL (1 toyMC)
median expected limit: r < 1.48089 @ 95%CL (1 toyMC)
   68% expected band : 1.48089 < r < 1.48089
   95% expected band : 1.48089 < r < 1.48089
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 514267077
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.743525 +/- 0.00325733 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.743525 @ 95%CL (1 toyMC)
median expected limit: r < 0.743525 @ 95%CL (1 toyMC)
   68% expected band : 0.743525 < r < 0.743525
   95% expected band : 0.743525 < r < 0.743525
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -223682526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.834989 +/- 0.00342727 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.834989 @ 95%CL (1 toyMC)
median expected limit: r < 0.834989 @ 95%CL (1 toyMC)
   68% expected band : 0.834989 < r < 0.834989
   95% expected band : 0.834989 < r < 0.834989
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -787480331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02759 +/- 0.00384624 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.02759 @ 95%CL (1 toyMC)
median expected limit: r < 1.02759 @ 95%CL (1 toyMC)
   68% expected band : 1.02759 < r < 1.02759
   95% expected band : 1.02759 < r < 1.02759
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1046131228
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.821262 +/- 0.00348255 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.821262 @ 95%CL (1 toyMC)
median expected limit: r < 0.821262 @ 95%CL (1 toyMC)
   68% expected band : 0.821262 < r < 0.821262
   95% expected band : 0.821262 < r < 0.821262
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 104987790
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.760046 +/- 0.00403912 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.760046 @ 95%CL (1 toyMC)
median expected limit: r < 0.760046 @ 95%CL (1 toyMC)
   68% expected band : 0.760046 < r < 0.760046
   95% expected band : 0.760046 < r < 0.760046
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 98814717
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07353 +/- 0.00339532 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.07353 @ 95%CL (1 toyMC)
median expected limit: r < 1.07353 @ 95%CL (1 toyMC)
   68% expected band : 1.07353 < r < 1.07353
   95% expected band : 1.07353 < r < 1.07353
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -314635720
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.797429 +/- 0.00368409 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.797429 @ 95%CL (1 toyMC)
median expected limit: r < 0.797429 @ 95%CL (1 toyMC)
   68% expected band : 0.797429 < r < 0.797429
   95% expected band : 0.797429 < r < 0.797429
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2103136596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.713999 +/- 0.00323655 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.713999 @ 95%CL (1 toyMC)
median expected limit: r < 0.713999 @ 95%CL (1 toyMC)
   68% expected band : 0.713999 < r < 0.713999
   95% expected band : 0.713999 < r < 0.713999
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1910648267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64644 +/- 0.0030706 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.64644 @ 95%CL (1 toyMC)
median expected limit: r < 1.64644 @ 95%CL (1 toyMC)
   68% expected band : 1.64644 < r < 1.64644
   95% expected band : 1.64644 < r < 1.64644
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1067909424
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.726335 +/- 0.00333274 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.726335 @ 95%CL (1 toyMC)
median expected limit: r < 0.726335 @ 95%CL (1 toyMC)
   68% expected band : 0.726335 < r < 0.726335
   95% expected band : 0.726335 < r < 0.726335
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1423670075
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02611 +/- 0.00345644 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.02611 @ 95%CL (1 toyMC)
median expected limit: r < 1.02611 @ 95%CL (1 toyMC)
   68% expected band : 1.02611 < r < 1.02611
   95% expected band : 1.02611 < r < 1.02611
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 713084793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.639427 +/- 0.00307311 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.639427 @ 95%CL (1 toyMC)
median expected limit: r < 0.639427 @ 95%CL (1 toyMC)
   68% expected band : 0.639427 < r < 0.639427
   95% expected band : 0.639427 < r < 0.639427
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1567689325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37566 +/- 0.00340972 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.37566 @ 95%CL (1 toyMC)
median expected limit: r < 1.37566 @ 95%CL (1 toyMC)
   68% expected band : 1.37566 < r < 1.37566
   95% expected band : 1.37566 < r < 1.37566
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1320141881
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01191 +/- 0.00357507 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.01191 @ 95%CL (1 toyMC)
median expected limit: r < 1.01191 @ 95%CL (1 toyMC)
   68% expected band : 1.01191 < r < 1.01191
   95% expected band : 1.01191 < r < 1.01191
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1165125359
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.980732 +/- 0.00360855 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.980732 @ 95%CL (1 toyMC)
median expected limit: r < 0.980732 @ 95%CL (1 toyMC)
   68% expected band : 0.980732 < r < 0.980732
   95% expected band : 0.980732 < r < 0.980732
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1727163482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.72873 +/- 0.00325562 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.72873 @ 95%CL (1 toyMC)
median expected limit: r < 0.72873 @ 95%CL (1 toyMC)
   68% expected band : 0.72873 < r < 0.72873
   95% expected band : 0.72873 < r < 0.72873
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 50317109
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.975161 +/- 0.00386926 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.975161 @ 95%CL (1 toyMC)
median expected limit: r < 0.975161 @ 95%CL (1 toyMC)
   68% expected band : 0.975161 < r < 0.975161
   95% expected band : 0.975161 < r < 0.975161
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1991705142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.748707 +/- 0.00463178 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.748707 @ 95%CL (1 toyMC)
median expected limit: r < 0.748707 @ 95%CL (1 toyMC)
   68% expected band : 0.748707 < r < 0.748707
   95% expected band : 0.748707 < r < 0.748707
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1033422968
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37143 +/- 0.00346178 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.37143 @ 95%CL (1 toyMC)
median expected limit: r < 1.37143 @ 95%CL (1 toyMC)
   68% expected band : 1.37143 < r < 1.37143
   95% expected band : 1.37143 < r < 1.37143
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1643508089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.874004 +/- 0.00285944 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.874004 @ 95%CL (1 toyMC)
median expected limit: r < 0.874004 @ 95%CL (1 toyMC)
   68% expected band : 0.874004 < r < 0.874004
   95% expected band : 0.874004 < r < 0.874004
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 267847199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.730295 +/- 0.00371415 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.730295 @ 95%CL (1 toyMC)
median expected limit: r < 0.730295 @ 95%CL (1 toyMC)
   68% expected band : 0.730295 < r < 0.730295
   95% expected band : 0.730295 < r < 0.730295
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 190691934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.676654 +/- 0.00313791 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.676654 @ 95%CL (1 toyMC)
median expected limit: r < 0.676654 @ 95%CL (1 toyMC)
   68% expected band : 0.676654 < r < 0.676654
   95% expected band : 0.676654 < r < 0.676654
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 553090848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.829257 +/- 0.00392956 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.829257 @ 95%CL (1 toyMC)
median expected limit: r < 0.829257 @ 95%CL (1 toyMC)
   68% expected band : 0.829257 < r < 0.829257
   95% expected band : 0.829257 < r < 0.829257
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1530520199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.96147 +/- 0.00421099 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.96147 @ 95%CL (1 toyMC)
median expected limit: r < 0.96147 @ 95%CL (1 toyMC)
   68% expected band : 0.96147 < r < 0.96147
   95% expected band : 0.96147 < r < 0.96147
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1775504044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.925277 +/- 0.00394984 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.925277 @ 95%CL (1 toyMC)
median expected limit: r < 0.925277 @ 95%CL (1 toyMC)
   68% expected band : 0.925277 < r < 0.925277
   95% expected band : 0.925277 < r < 0.925277
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1257263712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.710624 +/- 0.00381166 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.710624 @ 95%CL (1 toyMC)
median expected limit: r < 0.710624 @ 95%CL (1 toyMC)
   68% expected band : 0.710624 < r < 0.710624
   95% expected band : 0.710624 < r < 0.710624
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1465640570
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04145 +/- 0.0036704 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.04145 @ 95%CL (1 toyMC)
median expected limit: r < 1.04145 @ 95%CL (1 toyMC)
   68% expected band : 1.04145 < r < 1.04145
   95% expected band : 1.04145 < r < 1.04145
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 634606234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08797 +/- 0.00344545 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.08797 @ 95%CL (1 toyMC)
median expected limit: r < 1.08797 @ 95%CL (1 toyMC)
   68% expected band : 1.08797 < r < 1.08797
   95% expected band : 1.08797 < r < 1.08797
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2030918933
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07083 +/- 0.00346585 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.07083 @ 95%CL (1 toyMC)
median expected limit: r < 1.07083 @ 95%CL (1 toyMC)
   68% expected band : 1.07083 < r < 1.07083
   95% expected band : 1.07083 < r < 1.07083
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1817079378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.799115 +/- 0.00301037 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.799115 @ 95%CL (1 toyMC)
median expected limit: r < 0.799115 @ 95%CL (1 toyMC)
   68% expected band : 0.799115 < r < 0.799115
   95% expected band : 0.799115 < r < 0.799115
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 901233509
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40262 +/- 0.00316078 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.40262 @ 95%CL (1 toyMC)
median expected limit: r < 1.40262 @ 95%CL (1 toyMC)
   68% expected band : 1.40262 < r < 1.40262
   95% expected band : 1.40262 < r < 1.40262
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-103822832.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1101396893.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1165125359.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1257437579.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-127699606.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1283944362.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-128434119.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1285797886.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1290716187.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1323732787.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1332752153.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1347337487.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1389858112.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1410533817.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1422543125.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1423670075.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1483871522.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1530520199.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1567689325.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1608260579.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1643508089.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1727163482.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-173947293.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-1775504044.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-1787968283.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-1800618758.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-1817079378.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-1817586297.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-1876334383.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-1877138372.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-1883448999.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-1897011563.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-1956199417.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-1988005970.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-1990116379.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-1991705142.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-2030918933.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-2048394133.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-2103136596.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-223682526.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-294412211.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-314635720.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-357405233.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-376340549.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-441519185.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-524213091.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-605836175.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-658688158.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-666402816.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.-707865897.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.-708043352.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.-759350830.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.-787480331.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.-962033361.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1033422968.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1046131228.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.104987790.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1059768179.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1067909424.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1084749825.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.119068088.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1257263712.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.127794676.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1320141881.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1418539138.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1442067743.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1465640570.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1480192466.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1637794560.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1836248617.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1874909369.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.190691934.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1910648267.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1931526568.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.1963696062.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.2018690388.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.204376272.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.2044664319.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.2062459050.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.2066335673.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.2122084559.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.260445837.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.267847199.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.352384004.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.379726188.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.389420340.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.50317109.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.514267077.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.530873551.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.553090848.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.611626064.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.634606234.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.640852390.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.713084793.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.756927973.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.901233509.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.929814166.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.945543663.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.951040293.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.98814717.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 610457262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.827435 +/- 0.00357856 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.827435 @ 95%CL (1 toyMC)
median expected limit: r < 0.827435 @ 95%CL (1 toyMC)
   68% expected band : 0.827435 < r < 0.827435
   95% expected band : 0.827435 < r < 0.827435
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1729122902
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.760128 +/- 0.00347282 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.760128 @ 95%CL (1 toyMC)
median expected limit: r < 0.760128 @ 95%CL (1 toyMC)
   68% expected band : 0.760128 < r < 0.760128
   95% expected band : 0.760128 < r < 0.760128
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 273505105
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.88793 +/- 0.00330484 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.88793 @ 95%CL (1 toyMC)
median expected limit: r < 0.88793 @ 95%CL (1 toyMC)
   68% expected band : 0.88793 < r < 0.88793
   95% expected band : 0.88793 < r < 0.88793
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2105586478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04214 +/- 0.00427169 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04214 @ 95%CL (1 toyMC)
median expected limit: r < 1.04214 @ 95%CL (1 toyMC)
   68% expected band : 1.04214 < r < 1.04214
   95% expected band : 1.04214 < r < 1.04214
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 515139831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.794431 +/- 0.00367665 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.794431 @ 95%CL (1 toyMC)
median expected limit: r < 0.794431 @ 95%CL (1 toyMC)
   68% expected band : 0.794431 < r < 0.794431
   95% expected band : 0.794431 < r < 0.794431
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1556561347
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.861982 +/- 0.00289687 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.861982 @ 95%CL (1 toyMC)
median expected limit: r < 0.861982 @ 95%CL (1 toyMC)
   68% expected band : 0.861982 < r < 0.861982
   95% expected band : 0.861982 < r < 0.861982
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1037915730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.917272 +/- 0.00364057 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.917272 @ 95%CL (1 toyMC)
median expected limit: r < 0.917272 @ 95%CL (1 toyMC)
   68% expected band : 0.917272 < r < 0.917272
   95% expected band : 0.917272 < r < 0.917272
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -908575228
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.969816 +/- 0.00455406 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.969816 @ 95%CL (1 toyMC)
median expected limit: r < 0.969816 @ 95%CL (1 toyMC)
   68% expected band : 0.969816 < r < 0.969816
   95% expected band : 0.969816 < r < 0.969816
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -796447637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.974092 +/- 0.00446638 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.974092 @ 95%CL (1 toyMC)
median expected limit: r < 0.974092 @ 95%CL (1 toyMC)
   68% expected band : 0.974092 < r < 0.974092
   95% expected band : 0.974092 < r < 0.974092
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1200649087
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.891999 +/- 0.00325401 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.891999 @ 95%CL (1 toyMC)
median expected limit: r < 0.891999 @ 95%CL (1 toyMC)
   68% expected band : 0.891999 < r < 0.891999
   95% expected band : 0.891999 < r < 0.891999
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -148493460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11507 +/- 0.00373239 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.11507 @ 95%CL (1 toyMC)
median expected limit: r < 1.11507 @ 95%CL (1 toyMC)
   68% expected band : 1.11507 < r < 1.11507
   95% expected band : 1.11507 < r < 1.11507
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1104444516
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65158 +/- 0.00386761 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.65158 @ 95%CL (1 toyMC)
median expected limit: r < 1.65158 @ 95%CL (1 toyMC)
   68% expected band : 1.65158 < r < 1.65158
   95% expected band : 1.65158 < r < 1.65158
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -850155481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33649 +/- 0.00357483 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.33649 @ 95%CL (1 toyMC)
median expected limit: r < 1.33649 @ 95%CL (1 toyMC)
   68% expected band : 1.33649 < r < 1.33649
   95% expected band : 1.33649 < r < 1.33649
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1660780397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.820203 +/- 0.00373516 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.820203 @ 95%CL (1 toyMC)
median expected limit: r < 0.820203 @ 95%CL (1 toyMC)
   68% expected band : 0.820203 < r < 0.820203
   95% expected band : 0.820203 < r < 0.820203
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1347148427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07354 +/- 0.00393422 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.07354 @ 95%CL (1 toyMC)
median expected limit: r < 1.07354 @ 95%CL (1 toyMC)
   68% expected band : 1.07354 < r < 1.07354
   95% expected band : 1.07354 < r < 1.07354
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1413392104
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4448 +/- 0.00317306 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.4448 @ 95%CL (1 toyMC)
median expected limit: r < 1.4448 @ 95%CL (1 toyMC)
   68% expected band : 1.4448 < r < 1.4448
   95% expected band : 1.4448 < r < 1.4448
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1146142181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27451 +/- 0.00364829 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.27451 @ 95%CL (1 toyMC)
median expected limit: r < 1.27451 @ 95%CL (1 toyMC)
   68% expected band : 1.27451 < r < 1.27451
   95% expected band : 1.27451 < r < 1.27451
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1200648295
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.694243 +/- 0.00342877 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.694243 @ 95%CL (1 toyMC)
median expected limit: r < 0.694243 @ 95%CL (1 toyMC)
   68% expected band : 0.694243 < r < 0.694243
   95% expected band : 0.694243 < r < 0.694243
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1073961419
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35693 +/- 0.00355859 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.35693 @ 95%CL (1 toyMC)
median expected limit: r < 1.35693 @ 95%CL (1 toyMC)
   68% expected band : 1.35693 < r < 1.35693
   95% expected band : 1.35693 < r < 1.35693
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1696062458
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.852057 +/- 0.0034873 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.852057 @ 95%CL (1 toyMC)
median expected limit: r < 0.852057 @ 95%CL (1 toyMC)
   68% expected band : 0.852057 < r < 0.852057
   95% expected band : 0.852057 < r < 0.852057
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -875889586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.75122 +/- 0.00378399 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.75122 @ 95%CL (1 toyMC)
median expected limit: r < 0.75122 @ 95%CL (1 toyMC)
   68% expected band : 0.75122 < r < 0.75122
   95% expected band : 0.75122 < r < 0.75122
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1264541823
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.790787 +/- 0.00396094 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.790787 @ 95%CL (1 toyMC)
median expected limit: r < 0.790787 @ 95%CL (1 toyMC)
   68% expected band : 0.790787 < r < 0.790787
   95% expected band : 0.790787 < r < 0.790787
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -846339662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.814307 +/- 0.00385437 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.814307 @ 95%CL (1 toyMC)
median expected limit: r < 0.814307 @ 95%CL (1 toyMC)
   68% expected band : 0.814307 < r < 0.814307
   95% expected band : 0.814307 < r < 0.814307
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 490623087
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.788525 +/- 0.0031192 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.788525 @ 95%CL (1 toyMC)
median expected limit: r < 0.788525 @ 95%CL (1 toyMC)
   68% expected band : 0.788525 < r < 0.788525
   95% expected band : 0.788525 < r < 0.788525
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1793854474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.815263 +/- 0.00346982 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.815263 @ 95%CL (1 toyMC)
median expected limit: r < 0.815263 @ 95%CL (1 toyMC)
   68% expected band : 0.815263 < r < 0.815263
   95% expected band : 0.815263 < r < 0.815263
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -402371406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.678478 +/- 0.00352584 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.678478 @ 95%CL (1 toyMC)
median expected limit: r < 0.678478 @ 95%CL (1 toyMC)
   68% expected band : 0.678478 < r < 0.678478
   95% expected band : 0.678478 < r < 0.678478
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1432421511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.960499 +/- 0.00391936 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.960499 @ 95%CL (1 toyMC)
median expected limit: r < 0.960499 @ 95%CL (1 toyMC)
   68% expected band : 0.960499 < r < 0.960499
   95% expected band : 0.960499 < r < 0.960499
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -500685289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.01685 +/- 0.00391188 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.01685 @ 95%CL (1 toyMC)
median expected limit: r < 2.01685 @ 95%CL (1 toyMC)
   68% expected band : 2.01685 < r < 2.01685
   95% expected band : 2.01685 < r < 2.01685
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -108937128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.829597 +/- 0.00379618 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.829597 @ 95%CL (1 toyMC)
median expected limit: r < 0.829597 @ 95%CL (1 toyMC)
   68% expected band : 0.829597 < r < 0.829597
   95% expected band : 0.829597 < r < 0.829597
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -652409435
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04516 +/- 0.00356209 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.04516 @ 95%CL (1 toyMC)
median expected limit: r < 1.04516 @ 95%CL (1 toyMC)
   68% expected band : 1.04516 < r < 1.04516
   95% expected band : 1.04516 < r < 1.04516
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1305546872
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3678 +/- 0.00303063 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.3678 @ 95%CL (1 toyMC)
median expected limit: r < 1.3678 @ 95%CL (1 toyMC)
   68% expected band : 1.3678 < r < 1.3678
   95% expected band : 1.3678 < r < 1.3678
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -916265759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24265 +/- 0.00442366 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.24265 @ 95%CL (1 toyMC)
median expected limit: r < 1.24265 @ 95%CL (1 toyMC)
   68% expected band : 1.24265 < r < 1.24265
   95% expected band : 1.24265 < r < 1.24265
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -413384445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02536 +/- 0.00394796 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.02536 @ 95%CL (1 toyMC)
median expected limit: r < 1.02536 @ 95%CL (1 toyMC)
   68% expected band : 1.02536 < r < 1.02536
   95% expected band : 1.02536 < r < 1.02536
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -443730463
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08387 +/- 0.00431508 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.08387 @ 95%CL (1 toyMC)
median expected limit: r < 1.08387 @ 95%CL (1 toyMC)
   68% expected band : 1.08387 < r < 1.08387
   95% expected band : 1.08387 < r < 1.08387
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1607736140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.709199 +/- 0.00247308 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.709199 @ 95%CL (1 toyMC)
median expected limit: r < 0.709199 @ 95%CL (1 toyMC)
   68% expected band : 0.709199 < r < 0.709199
   95% expected band : 0.709199 < r < 0.709199
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2091755523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3063 +/- 0.00400224 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.3063 @ 95%CL (1 toyMC)
median expected limit: r < 1.3063 @ 95%CL (1 toyMC)
   68% expected band : 1.3063 < r < 1.3063
   95% expected band : 1.3063 < r < 1.3063
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 43674208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29068 +/- 0.00404428 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.29068 @ 95%CL (1 toyMC)
median expected limit: r < 1.29068 @ 95%CL (1 toyMC)
   68% expected band : 1.29068 < r < 1.29068
   95% expected band : 1.29068 < r < 1.29068
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1982925016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.79424 +/- 0.00321201 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.79424 @ 95%CL (1 toyMC)
median expected limit: r < 0.79424 @ 95%CL (1 toyMC)
   68% expected band : 0.79424 < r < 0.79424
   95% expected band : 0.79424 < r < 0.79424
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -846610399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.866572 +/- 0.00335074 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.866572 @ 95%CL (1 toyMC)
median expected limit: r < 0.866572 @ 95%CL (1 toyMC)
   68% expected band : 0.866572 < r < 0.866572
   95% expected band : 0.866572 < r < 0.866572
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -286974036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.830267 +/- 0.00431179 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.830267 @ 95%CL (1 toyMC)
median expected limit: r < 0.830267 @ 95%CL (1 toyMC)
   68% expected band : 0.830267 < r < 0.830267
   95% expected band : 0.830267 < r < 0.830267
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1182845173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.847694 +/- 0.00423809 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.847694 @ 95%CL (1 toyMC)
median expected limit: r < 0.847694 @ 95%CL (1 toyMC)
   68% expected band : 0.847694 < r < 0.847694
   95% expected band : 0.847694 < r < 0.847694
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1115345885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12448 +/- 0.00365272 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.12448 @ 95%CL (1 toyMC)
median expected limit: r < 1.12448 @ 95%CL (1 toyMC)
   68% expected band : 1.12448 < r < 1.12448
   95% expected band : 1.12448 < r < 1.12448
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -619855554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.839888 +/- 0.00375933 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.839888 @ 95%CL (1 toyMC)
median expected limit: r < 0.839888 @ 95%CL (1 toyMC)
   68% expected band : 0.839888 < r < 0.839888
   95% expected band : 0.839888 < r < 0.839888
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1957841713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.733239 +/- 0.00376497 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.733239 @ 95%CL (1 toyMC)
median expected limit: r < 0.733239 @ 95%CL (1 toyMC)
   68% expected band : 0.733239 < r < 0.733239
   95% expected band : 0.733239 < r < 0.733239
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 90280912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2203 +/- 0.00373572 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.2203 @ 95%CL (1 toyMC)
median expected limit: r < 1.2203 @ 95%CL (1 toyMC)
   68% expected band : 1.2203 < r < 1.2203
   95% expected band : 1.2203 < r < 1.2203
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 858187161
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.758508 +/- 0.00338432 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.758508 @ 95%CL (1 toyMC)
median expected limit: r < 0.758508 @ 95%CL (1 toyMC)
   68% expected band : 0.758508 < r < 0.758508
   95% expected band : 0.758508 < r < 0.758508
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 379411262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.769358 +/- 0.00372 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.769358 @ 95%CL (1 toyMC)
median expected limit: r < 0.769358 @ 95%CL (1 toyMC)
   68% expected band : 0.769358 < r < 0.769358
   95% expected band : 0.769358 < r < 0.769358
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 224852325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.747404 +/- 0.0039014 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.747404 @ 95%CL (1 toyMC)
median expected limit: r < 0.747404 @ 95%CL (1 toyMC)
   68% expected band : 0.747404 < r < 0.747404
   95% expected band : 0.747404 < r < 0.747404
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1208604345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.836606 +/- 0.00359874 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.836606 @ 95%CL (1 toyMC)
median expected limit: r < 0.836606 @ 95%CL (1 toyMC)
   68% expected band : 0.836606 < r < 0.836606
   95% expected band : 0.836606 < r < 0.836606
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1641034708
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.723926 +/- 0.0034536 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.723926 @ 95%CL (1 toyMC)
median expected limit: r < 0.723926 @ 95%CL (1 toyMC)
   68% expected band : 0.723926 < r < 0.723926
   95% expected band : 0.723926 < r < 0.723926
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1619357729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.677432 +/- 0.00346811 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.677432 @ 95%CL (1 toyMC)
median expected limit: r < 0.677432 @ 95%CL (1 toyMC)
   68% expected band : 0.677432 < r < 0.677432
   95% expected band : 0.677432 < r < 0.677432
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1401649157
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35421 +/- 0.00362064 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.35421 @ 95%CL (1 toyMC)
median expected limit: r < 1.35421 @ 95%CL (1 toyMC)
   68% expected band : 1.35421 < r < 1.35421
   95% expected band : 1.35421 < r < 1.35421
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -769861496
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20033 +/- 0.00338958 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.20033 @ 95%CL (1 toyMC)
median expected limit: r < 1.20033 @ 95%CL (1 toyMC)
   68% expected band : 1.20033 < r < 1.20033
   95% expected band : 1.20033 < r < 1.20033
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -122135084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.678806 +/- 0.00336727 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.678806 @ 95%CL (1 toyMC)
median expected limit: r < 0.678806 @ 95%CL (1 toyMC)
   68% expected band : 0.678806 < r < 0.678806
   95% expected band : 0.678806 < r < 0.678806
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1720717471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.791968 +/- 0.00345076 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.791968 @ 95%CL (1 toyMC)
median expected limit: r < 0.791968 @ 95%CL (1 toyMC)
   68% expected band : 0.791968 < r < 0.791968
   95% expected band : 0.791968 < r < 0.791968
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1776120895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50778 +/- 0.00389018 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.50778 @ 95%CL (1 toyMC)
median expected limit: r < 1.50778 @ 95%CL (1 toyMC)
   68% expected band : 1.50778 < r < 1.50778
   95% expected band : 1.50778 < r < 1.50778
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2057709847
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.720575 +/- 0.00341502 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.720575 @ 95%CL (1 toyMC)
median expected limit: r < 0.720575 @ 95%CL (1 toyMC)
   68% expected band : 0.720575 < r < 0.720575
   95% expected band : 0.720575 < r < 0.720575
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 849127522
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14612 +/- 0.00421138 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.14612 @ 95%CL (1 toyMC)
median expected limit: r < 1.14612 @ 95%CL (1 toyMC)
   68% expected band : 1.14612 < r < 1.14612
   95% expected band : 1.14612 < r < 1.14612
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 632157528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.823671 +/- 0.00379009 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.823671 @ 95%CL (1 toyMC)
median expected limit: r < 0.823671 @ 95%CL (1 toyMC)
   68% expected band : 0.823671 < r < 0.823671
   95% expected band : 0.823671 < r < 0.823671
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1355524880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01793 +/- 0.0031971 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.01793 @ 95%CL (1 toyMC)
median expected limit: r < 1.01793 @ 95%CL (1 toyMC)
   68% expected band : 1.01793 < r < 1.01793
   95% expected band : 1.01793 < r < 1.01793
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1764398679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.96864 +/- 0.00381201 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.96864 @ 95%CL (1 toyMC)
median expected limit: r < 0.96864 @ 95%CL (1 toyMC)
   68% expected band : 0.96864 < r < 0.96864
   95% expected band : 0.96864 < r < 0.96864
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1015071819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.781601 +/- 0.0036061 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.781601 @ 95%CL (1 toyMC)
median expected limit: r < 0.781601 @ 95%CL (1 toyMC)
   68% expected band : 0.781601 < r < 0.781601
   95% expected band : 0.781601 < r < 0.781601
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 298195328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0173 +/- 0.00424316 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.0173 @ 95%CL (1 toyMC)
median expected limit: r < 1.0173 @ 95%CL (1 toyMC)
   68% expected band : 1.0173 < r < 1.0173
   95% expected band : 1.0173 < r < 1.0173
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -961896188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.680223 +/- 0.00311194 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.680223 @ 95%CL (1 toyMC)
median expected limit: r < 0.680223 @ 95%CL (1 toyMC)
   68% expected band : 0.680223 < r < 0.680223
   95% expected band : 0.680223 < r < 0.680223
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2099460208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.802875 +/- 0.00331718 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.802875 @ 95%CL (1 toyMC)
median expected limit: r < 0.802875 @ 95%CL (1 toyMC)
   68% expected band : 0.802875 < r < 0.802875
   95% expected band : 0.802875 < r < 0.802875
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1769200154
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.669434 +/- 0.00328339 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.669434 @ 95%CL (1 toyMC)
median expected limit: r < 0.669434 @ 95%CL (1 toyMC)
   68% expected band : 0.669434 < r < 0.669434
   95% expected band : 0.669434 < r < 0.669434
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1304728673
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24084 +/- 0.00368024 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.24084 @ 95%CL (1 toyMC)
median expected limit: r < 1.24084 @ 95%CL (1 toyMC)
   68% expected band : 1.24084 < r < 1.24084
   95% expected band : 1.24084 < r < 1.24084
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1093481128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.73794 +/- 0.00397881 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.73794 @ 95%CL (1 toyMC)
median expected limit: r < 0.73794 @ 95%CL (1 toyMC)
   68% expected band : 0.73794 < r < 0.73794
   95% expected band : 0.73794 < r < 0.73794
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 645615924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21731 +/- 0.00317759 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.21731 @ 95%CL (1 toyMC)
median expected limit: r < 1.21731 @ 95%CL (1 toyMC)
   68% expected band : 1.21731 < r < 1.21731
   95% expected band : 1.21731 < r < 1.21731
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1402974252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.781085 +/- 0.0041906 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.781085 @ 95%CL (1 toyMC)
median expected limit: r < 0.781085 @ 95%CL (1 toyMC)
   68% expected band : 0.781085 < r < 0.781085
   95% expected band : 0.781085 < r < 0.781085
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 24987181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.667777 +/- 0.00376639 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.667777 @ 95%CL (1 toyMC)
median expected limit: r < 0.667777 @ 95%CL (1 toyMC)
   68% expected band : 0.667777 < r < 0.667777
   95% expected band : 0.667777 < r < 0.667777
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1801824934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.642006 +/- 0.00364685 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.642006 @ 95%CL (1 toyMC)
median expected limit: r < 0.642006 @ 95%CL (1 toyMC)
   68% expected band : 0.642006 < r < 0.642006
   95% expected band : 0.642006 < r < 0.642006
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1786164678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13851 +/- 0.00352696 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.13851 @ 95%CL (1 toyMC)
median expected limit: r < 1.13851 @ 95%CL (1 toyMC)
   68% expected band : 1.13851 < r < 1.13851
   95% expected band : 1.13851 < r < 1.13851
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1643682966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11524 +/- 0.00276983 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.11524 @ 95%CL (1 toyMC)
median expected limit: r < 1.11524 @ 95%CL (1 toyMC)
   68% expected band : 1.11524 < r < 1.11524
   95% expected band : 1.11524 < r < 1.11524
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2121888563
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2628 +/- 0.00314327 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.2628 @ 95%CL (1 toyMC)
median expected limit: r < 1.2628 @ 95%CL (1 toyMC)
   68% expected band : 1.2628 < r < 1.2628
   95% expected band : 1.2628 < r < 1.2628
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1964151708
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03868 +/- 0.00395269 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.03868 @ 95%CL (1 toyMC)
median expected limit: r < 1.03868 @ 95%CL (1 toyMC)
   68% expected band : 1.03868 < r < 1.03868
   95% expected band : 1.03868 < r < 1.03868
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1679355186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03318 +/- 0.00299631 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.03318 @ 95%CL (1 toyMC)
median expected limit: r < 1.03318 @ 95%CL (1 toyMC)
   68% expected band : 1.03318 < r < 1.03318
   95% expected band : 1.03318 < r < 1.03318
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -897713026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.770691 +/- 0.00310806 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.770691 @ 95%CL (1 toyMC)
median expected limit: r < 0.770691 @ 95%CL (1 toyMC)
   68% expected band : 0.770691 < r < 0.770691
   95% expected band : 0.770691 < r < 0.770691
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 752373485
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32547 +/- 0.00431794 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.32547 @ 95%CL (1 toyMC)
median expected limit: r < 1.32547 @ 95%CL (1 toyMC)
   68% expected band : 1.32547 < r < 1.32547
   95% expected band : 1.32547 < r < 1.32547
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1236250217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05839 +/- 0.00312185 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.05839 @ 95%CL (1 toyMC)
median expected limit: r < 1.05839 @ 95%CL (1 toyMC)
   68% expected band : 1.05839 < r < 1.05839
   95% expected band : 1.05839 < r < 1.05839
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1069484693
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.809498 +/- 0.00353567 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.809498 @ 95%CL (1 toyMC)
median expected limit: r < 0.809498 @ 95%CL (1 toyMC)
   68% expected band : 0.809498 < r < 0.809498
   95% expected band : 0.809498 < r < 0.809498
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1197866191
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.91815 +/- 0.00321589 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.91815 @ 95%CL (1 toyMC)
median expected limit: r < 0.91815 @ 95%CL (1 toyMC)
   68% expected band : 0.91815 < r < 0.91815
   95% expected band : 0.91815 < r < 0.91815
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2118613344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.698089 +/- 0.00364102 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.698089 @ 95%CL (1 toyMC)
median expected limit: r < 0.698089 @ 95%CL (1 toyMC)
   68% expected band : 0.698089 < r < 0.698089
   95% expected band : 0.698089 < r < 0.698089
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -667897657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.742919 +/- 0.00359314 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.742919 @ 95%CL (1 toyMC)
median expected limit: r < 0.742919 @ 95%CL (1 toyMC)
   68% expected band : 0.742919 < r < 0.742919
   95% expected band : 0.742919 < r < 0.742919
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 137116652
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.704439 +/- 0.00408692 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.704439 @ 95%CL (1 toyMC)
median expected limit: r < 0.704439 @ 95%CL (1 toyMC)
   68% expected band : 0.704439 < r < 0.704439
   95% expected band : 0.704439 < r < 0.704439
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1070435267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0212 +/- 0.00347206 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.0212 @ 95%CL (1 toyMC)
median expected limit: r < 1.0212 @ 95%CL (1 toyMC)
   68% expected band : 1.0212 < r < 1.0212
   95% expected band : 1.0212 < r < 1.0212
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1948558944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.724884 +/- 0.00304084 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.724884 @ 95%CL (1 toyMC)
median expected limit: r < 0.724884 @ 95%CL (1 toyMC)
   68% expected band : 0.724884 < r < 0.724884
   95% expected band : 0.724884 < r < 0.724884
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1928248331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.977146 +/- 0.00388995 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.977146 @ 95%CL (1 toyMC)
median expected limit: r < 0.977146 @ 95%CL (1 toyMC)
   68% expected band : 0.977146 < r < 0.977146
   95% expected band : 0.977146 < r < 0.977146
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1954241772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.7831 +/- 0.00372765 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.7831 @ 95%CL (1 toyMC)
median expected limit: r < 0.7831 @ 95%CL (1 toyMC)
   68% expected band : 0.7831 < r < 0.7831
   95% expected band : 0.7831 < r < 0.7831
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1020357773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08334 +/- 0.00386474 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.08334 @ 95%CL (1 toyMC)
median expected limit: r < 1.08334 @ 95%CL (1 toyMC)
   68% expected band : 1.08334 < r < 1.08334
   95% expected band : 1.08334 < r < 1.08334
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1423481735
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.871624 +/- 0.00333926 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.871624 @ 95%CL (1 toyMC)
median expected limit: r < 0.871624 @ 95%CL (1 toyMC)
   68% expected band : 0.871624 < r < 0.871624
   95% expected band : 0.871624 < r < 0.871624
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 999986766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42163 +/- 0.00284914 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.42163 @ 95%CL (1 toyMC)
median expected limit: r < 1.42163 @ 95%CL (1 toyMC)
   68% expected band : 1.42163 < r < 1.42163
   95% expected band : 1.42163 < r < 1.42163
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -30704700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.966804 +/- 0.00304393 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.966804 @ 95%CL (1 toyMC)
median expected limit: r < 0.966804 @ 95%CL (1 toyMC)
   68% expected band : 0.966804 < r < 0.966804
   95% expected band : 0.966804 < r < 0.966804
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 892907984
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.796797 +/- 0.00372924 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.796797 @ 95%CL (1 toyMC)
median expected limit: r < 0.796797 @ 95%CL (1 toyMC)
   68% expected band : 0.796797 < r < 0.796797
   95% expected band : 0.796797 < r < 0.796797
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1835290293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.812657 +/- 0.00490069 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.812657 @ 95%CL (1 toyMC)
median expected limit: r < 0.812657 @ 95%CL (1 toyMC)
   68% expected band : 0.812657 < r < 0.812657
   95% expected band : 0.812657 < r < 0.812657
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1837792990
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36596 +/- 0.0037599 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.36596 @ 95%CL (1 toyMC)
median expected limit: r < 1.36596 @ 95%CL (1 toyMC)
   68% expected band : 1.36596 < r < 1.36596
   95% expected band : 1.36596 < r < 1.36596
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -824813725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38106 +/- 0.00417785 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.38106 @ 95%CL (1 toyMC)
median expected limit: r < 1.38106 @ 95%CL (1 toyMC)
   68% expected band : 1.38106 < r < 1.38106
   95% expected band : 1.38106 < r < 1.38106
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1906555847
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15514 +/- 0.00387508 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.15514 @ 95%CL (1 toyMC)
median expected limit: r < 1.15514 @ 95%CL (1 toyMC)
   68% expected band : 1.15514 < r < 1.15514
   95% expected band : 1.15514 < r < 1.15514
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -441249974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02595 +/- 0.00350133 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.02595 @ 95%CL (1 toyMC)
median expected limit: r < 1.02595 @ 95%CL (1 toyMC)
   68% expected band : 1.02595 < r < 1.02595
   95% expected band : 1.02595 < r < 1.02595
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 480467192
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.77213 +/- 0.00381411 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.77213 @ 95%CL (1 toyMC)
median expected limit: r < 0.77213 @ 95%CL (1 toyMC)
   68% expected band : 0.77213 < r < 0.77213
   95% expected band : 0.77213 < r < 0.77213
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1020357773.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1037915730.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1070435267.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-108937128.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1182845173.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1197866191.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1200648295.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1200649087.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1208604345.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-122135084.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1264541823.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1305546872.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1347148427.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1401649157.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1402974252.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1413392104.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1432421511.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-148493460.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1556561347.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1607736140.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1619357729.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1641034708.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1660780397.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-1696062458.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-1720717471.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-1764398679.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-1793854474.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-1801824934.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-1835290293.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-1906555847.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-1928248331.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-1954241772.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-1957841713.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-1964151708.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-1982925016.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-2091755523.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-2099460208.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-2121888563.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-286974036.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-30704700.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-402371406.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-413384445.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-441249974.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-443730463.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-500685289.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-619855554.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-652409435.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-667897657.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-769861496.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.-796447637.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.-824813725.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.-846339662.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.-846610399.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.-850155481.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.-875889586.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.-897713026.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.-908575228.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.-916265759.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.-961896188.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1015071819.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1069484693.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1073961419.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1093481128.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1104444516.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1115345885.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1146142181.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1236250217.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1304728673.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1355524880.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.137116652.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1423481735.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1643682966.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1679355186.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1729122902.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.1769200154.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.1776120895.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.1786164678.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.1837792990.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.1948558944.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.2057709847.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.2105586478.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.2118613344.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.224852325.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.24987181.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.273505105.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.298195328.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.379411262.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.43674208.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.480467192.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.490623087.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.515139831.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.610457262.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.632157528.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.645615924.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.752373485.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.849127522.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.858187161.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.892907984.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.90280912.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.999986766.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 267571345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12554 +/- 0.00334097 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.12554 @ 95%CL (1 toyMC)
median expected limit: r < 1.12554 @ 95%CL (1 toyMC)
   68% expected band : 1.12554 < r < 1.12554
   95% expected band : 1.12554 < r < 1.12554
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -502407615
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.732472 +/- 0.00291877 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.732472 @ 95%CL (1 toyMC)
median expected limit: r < 0.732472 @ 95%CL (1 toyMC)
   68% expected band : 0.732472 < r < 0.732472
   95% expected band : 0.732472 < r < 0.732472
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 121323006
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30103 +/- 0.00316661 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.30103 @ 95%CL (1 toyMC)
median expected limit: r < 1.30103 @ 95%CL (1 toyMC)
   68% expected band : 1.30103 < r < 1.30103
   95% expected band : 1.30103 < r < 1.30103
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 499935376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03124 +/- 0.00369667 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.03124 @ 95%CL (1 toyMC)
median expected limit: r < 1.03124 @ 95%CL (1 toyMC)
   68% expected band : 1.03124 < r < 1.03124
   95% expected band : 1.03124 < r < 1.03124
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -747607224
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.668088 +/- 0.00261301 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.668088 @ 95%CL (1 toyMC)
median expected limit: r < 0.668088 @ 95%CL (1 toyMC)
   68% expected band : 0.668088 < r < 0.668088
   95% expected band : 0.668088 < r < 0.668088
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 405157034
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02204 +/- 0.00359063 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.02204 @ 95%CL (1 toyMC)
median expected limit: r < 1.02204 @ 95%CL (1 toyMC)
   68% expected band : 1.02204 < r < 1.02204
   95% expected band : 1.02204 < r < 1.02204
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1156487334
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.71174 +/- 0.00339284 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.71174 @ 95%CL (1 toyMC)
median expected limit: r < 0.71174 @ 95%CL (1 toyMC)
   68% expected band : 0.71174 < r < 0.71174
   95% expected band : 0.71174 < r < 0.71174
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -71525490
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.704132 +/- 0.00274775 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.704132 @ 95%CL (1 toyMC)
median expected limit: r < 0.704132 @ 95%CL (1 toyMC)
   68% expected band : 0.704132 < r < 0.704132
   95% expected band : 0.704132 < r < 0.704132
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2134426008
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09881 +/- 0.00309157 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09881 @ 95%CL (1 toyMC)
median expected limit: r < 1.09881 @ 95%CL (1 toyMC)
   68% expected band : 1.09881 < r < 1.09881
   95% expected band : 1.09881 < r < 1.09881
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 849490204
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37941 +/- 0.0036949 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.37941 @ 95%CL (1 toyMC)
median expected limit: r < 1.37941 @ 95%CL (1 toyMC)
   68% expected band : 1.37941 < r < 1.37941
   95% expected band : 1.37941 < r < 1.37941
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1865531376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.700083 +/- 0.00304384 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.700083 @ 95%CL (1 toyMC)
median expected limit: r < 0.700083 @ 95%CL (1 toyMC)
   68% expected band : 0.700083 < r < 0.700083
   95% expected band : 0.700083 < r < 0.700083
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1559734368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12971 +/- 0.00319587 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.12971 @ 95%CL (1 toyMC)
median expected limit: r < 1.12971 @ 95%CL (1 toyMC)
   68% expected band : 1.12971 < r < 1.12971
   95% expected band : 1.12971 < r < 1.12971
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -793048784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.901759 +/- 0.00376837 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.901759 @ 95%CL (1 toyMC)
median expected limit: r < 0.901759 @ 95%CL (1 toyMC)
   68% expected band : 0.901759 < r < 0.901759
   95% expected band : 0.901759 < r < 0.901759
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1998215882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85687 +/- 0.00301471 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.85687 @ 95%CL (1 toyMC)
median expected limit: r < 1.85687 @ 95%CL (1 toyMC)
   68% expected band : 1.85687 < r < 1.85687
   95% expected band : 1.85687 < r < 1.85687
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 764226247
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04197 +/- 0.00346846 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.04197 @ 95%CL (1 toyMC)
median expected limit: r < 1.04197 @ 95%CL (1 toyMC)
   68% expected band : 1.04197 < r < 1.04197
   95% expected band : 1.04197 < r < 1.04197
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2064739129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.938039 +/- 0.00278195 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.938039 @ 95%CL (1 toyMC)
median expected limit: r < 0.938039 @ 95%CL (1 toyMC)
   68% expected band : 0.938039 < r < 0.938039
   95% expected band : 0.938039 < r < 0.938039
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1219061806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.684096 +/- 0.00341094 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.684096 @ 95%CL (1 toyMC)
median expected limit: r < 0.684096 @ 95%CL (1 toyMC)
   68% expected band : 0.684096 < r < 0.684096
   95% expected band : 0.684096 < r < 0.684096
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1710420202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.878718 +/- 0.00394362 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.878718 @ 95%CL (1 toyMC)
median expected limit: r < 0.878718 @ 95%CL (1 toyMC)
   68% expected band : 0.878718 < r < 0.878718
   95% expected band : 0.878718 < r < 0.878718
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 117116696
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.7317 +/- 0.00403149 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.7317 @ 95%CL (1 toyMC)
median expected limit: r < 0.7317 @ 95%CL (1 toyMC)
   68% expected band : 0.7317 < r < 0.7317
   95% expected band : 0.7317 < r < 0.7317
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -901148858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52817 +/- 0.00305715 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.52817 @ 95%CL (1 toyMC)
median expected limit: r < 1.52817 @ 95%CL (1 toyMC)
   68% expected band : 1.52817 < r < 1.52817
   95% expected band : 1.52817 < r < 1.52817
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -144933553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.720745 +/- 0.0027913 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.720745 @ 95%CL (1 toyMC)
median expected limit: r < 0.720745 @ 95%CL (1 toyMC)
   68% expected band : 0.720745 < r < 0.720745
   95% expected band : 0.720745 < r < 0.720745
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1100389226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1213 +/- 0.00265567 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.1213 @ 95%CL (1 toyMC)
median expected limit: r < 1.1213 @ 95%CL (1 toyMC)
   68% expected band : 1.1213 < r < 1.1213
   95% expected band : 1.1213 < r < 1.1213
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1371237911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16927 +/- 0.00282517 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.16927 @ 95%CL (1 toyMC)
median expected limit: r < 1.16927 @ 95%CL (1 toyMC)
   68% expected band : 1.16927 < r < 1.16927
   95% expected band : 1.16927 < r < 1.16927
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 426962747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.997116 +/- 0.00380853 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.997116 @ 95%CL (1 toyMC)
median expected limit: r < 0.997116 @ 95%CL (1 toyMC)
   68% expected band : 0.997116 < r < 0.997116
   95% expected band : 0.997116 < r < 0.997116
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -631388543
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.616665 +/- 0.00298846 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.616665 @ 95%CL (1 toyMC)
median expected limit: r < 0.616665 @ 95%CL (1 toyMC)
   68% expected band : 0.616665 < r < 0.616665
   95% expected band : 0.616665 < r < 0.616665
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 660541938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.934889 +/- 0.00385424 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.934889 @ 95%CL (1 toyMC)
median expected limit: r < 0.934889 @ 95%CL (1 toyMC)
   68% expected band : 0.934889 < r < 0.934889
   95% expected band : 0.934889 < r < 0.934889
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2054286206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.913819 +/- 0.00258872 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.913819 @ 95%CL (1 toyMC)
median expected limit: r < 0.913819 @ 95%CL (1 toyMC)
   68% expected band : 0.913819 < r < 0.913819
   95% expected band : 0.913819 < r < 0.913819
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1460406524
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.68056 +/- 0.00330968 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.68056 @ 95%CL (1 toyMC)
median expected limit: r < 0.68056 @ 95%CL (1 toyMC)
   68% expected band : 0.68056 < r < 0.68056
   95% expected band : 0.68056 < r < 0.68056
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2141923073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42128 +/- 0.00410327 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.42128 @ 95%CL (1 toyMC)
median expected limit: r < 1.42128 @ 95%CL (1 toyMC)
   68% expected band : 1.42128 < r < 1.42128
   95% expected band : 1.42128 < r < 1.42128
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2006236883
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03644 +/- 0.00313769 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.03644 @ 95%CL (1 toyMC)
median expected limit: r < 1.03644 @ 95%CL (1 toyMC)
   68% expected band : 1.03644 < r < 1.03644
   95% expected band : 1.03644 < r < 1.03644
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 463408908
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.837438 +/- 0.00343869 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.837438 @ 95%CL (1 toyMC)
median expected limit: r < 0.837438 @ 95%CL (1 toyMC)
   68% expected band : 0.837438 < r < 0.837438
   95% expected band : 0.837438 < r < 0.837438
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1847354091
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08123 +/- 0.0030586 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.08123 @ 95%CL (1 toyMC)
median expected limit: r < 1.08123 @ 95%CL (1 toyMC)
   68% expected band : 1.08123 < r < 1.08123
   95% expected band : 1.08123 < r < 1.08123
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 46207268
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.654247 +/- 0.00308664 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.654247 @ 95%CL (1 toyMC)
median expected limit: r < 0.654247 @ 95%CL (1 toyMC)
   68% expected band : 0.654247 < r < 0.654247
   95% expected band : 0.654247 < r < 0.654247
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1546304449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.765205 +/- 0.00328363 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.765205 @ 95%CL (1 toyMC)
median expected limit: r < 0.765205 @ 95%CL (1 toyMC)
   68% expected band : 0.765205 < r < 0.765205
   95% expected band : 0.765205 < r < 0.765205
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1389745678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51548 +/- 0.00283679 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.51548 @ 95%CL (1 toyMC)
median expected limit: r < 1.51548 @ 95%CL (1 toyMC)
   68% expected band : 1.51548 < r < 1.51548
   95% expected band : 1.51548 < r < 1.51548
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -761989797
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02008 +/- 0.00387385 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.02008 @ 95%CL (1 toyMC)
median expected limit: r < 1.02008 @ 95%CL (1 toyMC)
   68% expected band : 1.02008 < r < 1.02008
   95% expected band : 1.02008 < r < 1.02008
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 39311854
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08055 +/- 0.00359855 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.08055 @ 95%CL (1 toyMC)
median expected limit: r < 1.08055 @ 95%CL (1 toyMC)
   68% expected band : 1.08055 < r < 1.08055
   95% expected band : 1.08055 < r < 1.08055
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1525201032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50182 +/- 0.0038848 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.50182 @ 95%CL (1 toyMC)
median expected limit: r < 1.50182 @ 95%CL (1 toyMC)
   68% expected band : 1.50182 < r < 1.50182
   95% expected band : 1.50182 < r < 1.50182
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 343640643
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.834533 +/- 0.00377943 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.834533 @ 95%CL (1 toyMC)
median expected limit: r < 0.834533 @ 95%CL (1 toyMC)
   68% expected band : 0.834533 < r < 0.834533
   95% expected band : 0.834533 < r < 0.834533
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1765503431
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.766913 +/- 0.00293555 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.766913 @ 95%CL (1 toyMC)
median expected limit: r < 0.766913 @ 95%CL (1 toyMC)
   68% expected band : 0.766913 < r < 0.766913
   95% expected band : 0.766913 < r < 0.766913
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1481367648
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.900685 +/- 0.00381997 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.900685 @ 95%CL (1 toyMC)
median expected limit: r < 0.900685 @ 95%CL (1 toyMC)
   68% expected band : 0.900685 < r < 0.900685
   95% expected band : 0.900685 < r < 0.900685
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 712313012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.964815 +/- 0.00318705 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.964815 @ 95%CL (1 toyMC)
median expected limit: r < 0.964815 @ 95%CL (1 toyMC)
   68% expected band : 0.964815 < r < 0.964815
   95% expected band : 0.964815 < r < 0.964815
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1206414054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.944294 +/- 0.00400352 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.944294 @ 95%CL (1 toyMC)
median expected limit: r < 0.944294 @ 95%CL (1 toyMC)
   68% expected band : 0.944294 < r < 0.944294
   95% expected band : 0.944294 < r < 0.944294
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 333052671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60049 +/- 0.00375356 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.60049 @ 95%CL (1 toyMC)
median expected limit: r < 1.60049 @ 95%CL (1 toyMC)
   68% expected band : 1.60049 < r < 1.60049
   95% expected band : 1.60049 < r < 1.60049
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1156840578
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.880983 +/- 0.00276654 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.880983 @ 95%CL (1 toyMC)
median expected limit: r < 0.880983 @ 95%CL (1 toyMC)
   68% expected band : 0.880983 < r < 0.880983
   95% expected band : 0.880983 < r < 0.880983
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 316842793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.621919 +/- 0.00347322 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.621919 @ 95%CL (1 toyMC)
median expected limit: r < 0.621919 @ 95%CL (1 toyMC)
   68% expected band : 0.621919 < r < 0.621919
   95% expected band : 0.621919 < r < 0.621919
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1438535075
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15996 +/- 0.0043904 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.15996 @ 95%CL (1 toyMC)
median expected limit: r < 1.15996 @ 95%CL (1 toyMC)
   68% expected band : 1.15996 < r < 1.15996
   95% expected band : 1.15996 < r < 1.15996
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1909718175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0141 +/- 0.00342401 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.0141 @ 95%CL (1 toyMC)
median expected limit: r < 1.0141 @ 95%CL (1 toyMC)
   68% expected band : 1.0141 < r < 1.0141
   95% expected band : 1.0141 < r < 1.0141
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -287167633
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.871222 +/- 0.0034664 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.871222 @ 95%CL (1 toyMC)
median expected limit: r < 0.871222 @ 95%CL (1 toyMC)
   68% expected band : 0.871222 < r < 0.871222
   95% expected band : 0.871222 < r < 0.871222
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1993684725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.751225 +/- 0.00314076 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.751225 @ 95%CL (1 toyMC)
median expected limit: r < 0.751225 @ 95%CL (1 toyMC)
   68% expected band : 0.751225 < r < 0.751225
   95% expected band : 0.751225 < r < 0.751225
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 974811491
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.715598 +/- 0.00318932 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.715598 @ 95%CL (1 toyMC)
median expected limit: r < 0.715598 @ 95%CL (1 toyMC)
   68% expected band : 0.715598 < r < 0.715598
   95% expected band : 0.715598 < r < 0.715598
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1155769056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41457 +/- 0.00379076 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.41457 @ 95%CL (1 toyMC)
median expected limit: r < 1.41457 @ 95%CL (1 toyMC)
   68% expected band : 1.41457 < r < 1.41457
   95% expected band : 1.41457 < r < 1.41457
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -175649073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.675297 +/- 0.00292467 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.675297 @ 95%CL (1 toyMC)
median expected limit: r < 0.675297 @ 95%CL (1 toyMC)
   68% expected band : 0.675297 < r < 0.675297
   95% expected band : 0.675297 < r < 0.675297
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 861588833
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.724712 +/- 0.00322272 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.724712 @ 95%CL (1 toyMC)
median expected limit: r < 0.724712 @ 95%CL (1 toyMC)
   68% expected band : 0.724712 < r < 0.724712
   95% expected band : 0.724712 < r < 0.724712
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1004255049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.67028 +/- 0.00247603 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.67028 @ 95%CL (1 toyMC)
median expected limit: r < 0.67028 @ 95%CL (1 toyMC)
   68% expected band : 0.67028 < r < 0.67028
   95% expected band : 0.67028 < r < 0.67028
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2107212435
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.687839 +/- 0.00404359 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.687839 @ 95%CL (1 toyMC)
median expected limit: r < 0.687839 @ 95%CL (1 toyMC)
   68% expected band : 0.687839 < r < 0.687839
   95% expected band : 0.687839 < r < 0.687839
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1578274250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1525 +/- 0.0029495 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1525 @ 95%CL (1 toyMC)
median expected limit: r < 1.1525 @ 95%CL (1 toyMC)
   68% expected band : 1.1525 < r < 1.1525
   95% expected band : 1.1525 < r < 1.1525
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1583546868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.731558 +/- 0.00384318 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.731558 @ 95%CL (1 toyMC)
median expected limit: r < 0.731558 @ 95%CL (1 toyMC)
   68% expected band : 0.731558 < r < 0.731558
   95% expected band : 0.731558 < r < 0.731558
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 600175486
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.702121 +/- 0.00285935 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.702121 @ 95%CL (1 toyMC)
median expected limit: r < 0.702121 @ 95%CL (1 toyMC)
   68% expected band : 0.702121 < r < 0.702121
   95% expected band : 0.702121 < r < 0.702121
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1683350550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.86001 +/- 0.00314502 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.86001 @ 95%CL (1 toyMC)
median expected limit: r < 0.86001 @ 95%CL (1 toyMC)
   68% expected band : 0.86001 < r < 0.86001
   95% expected band : 0.86001 < r < 0.86001
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -256394657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36633 +/- 0.00302491 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.36633 @ 95%CL (1 toyMC)
median expected limit: r < 1.36633 @ 95%CL (1 toyMC)
   68% expected band : 1.36633 < r < 1.36633
   95% expected band : 1.36633 < r < 1.36633
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1129982532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30063 +/- 0.00341098 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.30063 @ 95%CL (1 toyMC)
median expected limit: r < 1.30063 @ 95%CL (1 toyMC)
   68% expected band : 1.30063 < r < 1.30063
   95% expected band : 1.30063 < r < 1.30063
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 202158266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.784905 +/- 0.00352519 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.784905 @ 95%CL (1 toyMC)
median expected limit: r < 0.784905 @ 95%CL (1 toyMC)
   68% expected band : 0.784905 < r < 0.784905
   95% expected band : 0.784905 < r < 0.784905
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2024664051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10429 +/- 0.00441567 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.10429 @ 95%CL (1 toyMC)
median expected limit: r < 1.10429 @ 95%CL (1 toyMC)
   68% expected band : 1.10429 < r < 1.10429
   95% expected band : 1.10429 < r < 1.10429
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1397472951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.819679 +/- 0.00291539 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.819679 @ 95%CL (1 toyMC)
median expected limit: r < 0.819679 @ 95%CL (1 toyMC)
   68% expected band : 0.819679 < r < 0.819679
   95% expected band : 0.819679 < r < 0.819679
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1871183533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.668401 +/- 0.00321625 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.668401 @ 95%CL (1 toyMC)
median expected limit: r < 0.668401 @ 95%CL (1 toyMC)
   68% expected band : 0.668401 < r < 0.668401
   95% expected band : 0.668401 < r < 0.668401
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -783483219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.926002 +/- 0.00303505 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.926002 @ 95%CL (1 toyMC)
median expected limit: r < 0.926002 @ 95%CL (1 toyMC)
   68% expected band : 0.926002 < r < 0.926002
   95% expected band : 0.926002 < r < 0.926002
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -821470392
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.731878 +/- 0.00353713 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.731878 @ 95%CL (1 toyMC)
median expected limit: r < 0.731878 @ 95%CL (1 toyMC)
   68% expected band : 0.731878 < r < 0.731878
   95% expected band : 0.731878 < r < 0.731878
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1663264049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01551 +/- 0.00351841 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.01551 @ 95%CL (1 toyMC)
median expected limit: r < 1.01551 @ 95%CL (1 toyMC)
   68% expected band : 1.01551 < r < 1.01551
   95% expected band : 1.01551 < r < 1.01551
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -61969921
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11101 +/- 0.00439393 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.11101 @ 95%CL (1 toyMC)
median expected limit: r < 1.11101 @ 95%CL (1 toyMC)
   68% expected band : 1.11101 < r < 1.11101
   95% expected band : 1.11101 < r < 1.11101
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1350649214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.811227 +/- 0.00412795 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.811227 @ 95%CL (1 toyMC)
median expected limit: r < 0.811227 @ 95%CL (1 toyMC)
   68% expected band : 0.811227 < r < 0.811227
   95% expected band : 0.811227 < r < 0.811227
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1308424906
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.62908 +/- 0.00316305 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.62908 @ 95%CL (1 toyMC)
median expected limit: r < 0.62908 @ 95%CL (1 toyMC)
   68% expected band : 0.62908 < r < 0.62908
   95% expected band : 0.62908 < r < 0.62908
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1707916168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46505 +/- 0.00383325 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.46505 @ 95%CL (1 toyMC)
median expected limit: r < 1.46505 @ 95%CL (1 toyMC)
   68% expected band : 1.46505 < r < 1.46505
   95% expected band : 1.46505 < r < 1.46505
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2140359025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.95446 +/- 0.00366284 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.95446 @ 95%CL (1 toyMC)
median expected limit: r < 0.95446 @ 95%CL (1 toyMC)
   68% expected band : 0.95446 < r < 0.95446
   95% expected band : 0.95446 < r < 0.95446
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 799419169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38951 +/- 0.00322379 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.38951 @ 95%CL (1 toyMC)
median expected limit: r < 1.38951 @ 95%CL (1 toyMC)
   68% expected band : 1.38951 < r < 1.38951
   95% expected band : 1.38951 < r < 1.38951
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1144070132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.91219 +/- 0.00315035 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.91219 @ 95%CL (1 toyMC)
median expected limit: r < 0.91219 @ 95%CL (1 toyMC)
   68% expected band : 0.91219 < r < 0.91219
   95% expected band : 0.91219 < r < 0.91219
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -429298716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22208 +/- 0.00298479 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.22208 @ 95%CL (1 toyMC)
median expected limit: r < 1.22208 @ 95%CL (1 toyMC)
   68% expected band : 1.22208 < r < 1.22208
   95% expected band : 1.22208 < r < 1.22208
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1920415226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.986306 +/- 0.00404472 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.986306 @ 95%CL (1 toyMC)
median expected limit: r < 0.986306 @ 95%CL (1 toyMC)
   68% expected band : 0.986306 < r < 0.986306
   95% expected band : 0.986306 < r < 0.986306
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -659297575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.8955 +/- 0.00388904 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.8955 @ 95%CL (1 toyMC)
median expected limit: r < 0.8955 @ 95%CL (1 toyMC)
   68% expected band : 0.8955 < r < 0.8955
   95% expected band : 0.8955 < r < 0.8955
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 251966754
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11378 +/- 0.00395421 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.11378 @ 95%CL (1 toyMC)
median expected limit: r < 1.11378 @ 95%CL (1 toyMC)
   68% expected band : 1.11378 < r < 1.11378
   95% expected band : 1.11378 < r < 1.11378
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2113162861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61513 +/- 0.00324995 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.61513 @ 95%CL (1 toyMC)
median expected limit: r < 1.61513 @ 95%CL (1 toyMC)
   68% expected band : 1.61513 < r < 1.61513
   95% expected band : 1.61513 < r < 1.61513
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -612555032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.789795 +/- 0.00367362 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.789795 @ 95%CL (1 toyMC)
median expected limit: r < 0.789795 @ 95%CL (1 toyMC)
   68% expected band : 0.789795 < r < 0.789795
   95% expected band : 0.789795 < r < 0.789795
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 917932566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.827926 +/- 0.00316888 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.827926 @ 95%CL (1 toyMC)
median expected limit: r < 0.827926 @ 95%CL (1 toyMC)
   68% expected band : 0.827926 < r < 0.827926
   95% expected band : 0.827926 < r < 0.827926
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -586784765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.984636 +/- 0.00365643 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.984636 @ 95%CL (1 toyMC)
median expected limit: r < 0.984636 @ 95%CL (1 toyMC)
   68% expected band : 0.984636 < r < 0.984636
   95% expected band : 0.984636 < r < 0.984636
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1068101625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00505 +/- 0.00337291 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.00505 @ 95%CL (1 toyMC)
median expected limit: r < 1.00505 @ 95%CL (1 toyMC)
   68% expected band : 1.00505 < r < 1.00505
   95% expected band : 1.00505 < r < 1.00505
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1517725852
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05831 +/- 0.00297003 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.05831 @ 95%CL (1 toyMC)
median expected limit: r < 1.05831 @ 95%CL (1 toyMC)
   68% expected band : 1.05831 < r < 1.05831
   95% expected band : 1.05831 < r < 1.05831
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1745519730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53984 +/- 0.00320058 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.53984 @ 95%CL (1 toyMC)
median expected limit: r < 1.53984 @ 95%CL (1 toyMC)
   68% expected band : 1.53984 < r < 1.53984
   95% expected band : 1.53984 < r < 1.53984
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1152823015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.715902 +/- 0.00373931 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.715902 @ 95%CL (1 toyMC)
median expected limit: r < 0.715902 @ 95%CL (1 toyMC)
   68% expected band : 0.715902 < r < 0.715902
   95% expected band : 0.715902 < r < 0.715902
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1852298605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.88705 +/- 0.00340876 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.88705 @ 95%CL (1 toyMC)
median expected limit: r < 0.88705 @ 95%CL (1 toyMC)
   68% expected band : 0.88705 < r < 0.88705
   95% expected band : 0.88705 < r < 0.88705
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1845797049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1328 +/- 0.00401612 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1328 @ 95%CL (1 toyMC)
median expected limit: r < 1.1328 @ 95%CL (1 toyMC)
   68% expected band : 1.1328 < r < 1.1328
   95% expected band : 1.1328 < r < 1.1328
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1412194225
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.895003 +/- 0.00377234 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.895003 @ 95%CL (1 toyMC)
median expected limit: r < 0.895003 @ 95%CL (1 toyMC)
   68% expected band : 0.895003 < r < 0.895003
   95% expected band : 0.895003 < r < 0.895003
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 892878398
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13193 +/- 0.00295324 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.13193 @ 95%CL (1 toyMC)
median expected limit: r < 1.13193 @ 95%CL (1 toyMC)
   68% expected band : 1.13193 < r < 1.13193
   95% expected band : 1.13193 < r < 1.13193
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -954145864
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.732181 +/- 0.00275797 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.732181 @ 95%CL (1 toyMC)
median expected limit: r < 0.732181 @ 95%CL (1 toyMC)
   68% expected band : 0.732181 < r < 0.732181
   95% expected band : 0.732181 < r < 0.732181
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1369577796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.678101 +/- 0.00280385 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.678101 @ 95%CL (1 toyMC)
median expected limit: r < 0.678101 @ 95%CL (1 toyMC)
   68% expected band : 0.678101 < r < 0.678101
   95% expected band : 0.678101 < r < 0.678101
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1996928844
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.933298 +/- 0.00384323 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.933298 @ 95%CL (1 toyMC)
median expected limit: r < 0.933298 @ 95%CL (1 toyMC)
   68% expected band : 0.933298 < r < 0.933298
   95% expected band : 0.933298 < r < 0.933298
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -823507015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0715 +/- 0.00337937 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.0715 @ 95%CL (1 toyMC)
median expected limit: r < 1.0715 @ 95%CL (1 toyMC)
   68% expected band : 1.0715 < r < 1.0715
   95% expected band : 1.0715 < r < 1.0715
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -720005545
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.686194 +/- 0.00300018 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.686194 @ 95%CL (1 toyMC)
median expected limit: r < 0.686194 @ 95%CL (1 toyMC)
   68% expected band : 0.686194 < r < 0.686194
   95% expected band : 0.686194 < r < 0.686194
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1437679464
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.752136 +/- 0.0031994 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.752136 @ 95%CL (1 toyMC)
median expected limit: r < 0.752136 @ 95%CL (1 toyMC)
   68% expected band : 0.752136 < r < 0.752136
   95% expected band : 0.752136 < r < 0.752136
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 193151733
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28669 +/- 0.00417753 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.28669 @ 95%CL (1 toyMC)
median expected limit: r < 1.28669 @ 95%CL (1 toyMC)
   68% expected band : 1.28669 < r < 1.28669
   95% expected band : 1.28669 < r < 1.28669
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 677220047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.866574 +/- 0.00362678 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.866574 @ 95%CL (1 toyMC)
median expected limit: r < 0.866574 @ 95%CL (1 toyMC)
   68% expected band : 0.866574 < r < 0.866574
   95% expected band : 0.866574 < r < 0.866574
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1068101625.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1100389226.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1155769056.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1206414054.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1219061806.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1308424906.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1371237911.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1397472951.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1438535075.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-144933553.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1481367648.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1525201032.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1546304449.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1559734368.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1707916168.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1745519730.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-175649073.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1852298605.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1920415226.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-2024664051.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-2054286206.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-2064739129.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-2107212435.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-2134426008.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-256394657.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-287167633.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-429298716.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-502407615.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-586784765.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-612555032.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-61969921.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-631388543.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-659297575.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-71525490.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-720005545.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-747607224.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-761989797.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-783483219.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-793048784.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-821470392.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-823507015.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-901148858.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-954145864.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.1004255049.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.1129982532.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.1144070132.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.1152823015.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.1156487334.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.1156840578.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.117116696.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.121323006.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1350649214.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1369577796.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1389745678.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1412194225.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1437679464.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1460406524.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1517725852.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1578274250.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1583546868.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1663264049.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1683350550.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1710420202.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1765503431.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1845797049.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1847354091.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1865531376.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1871183533.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1909718175.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.193151733.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1993684725.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1996928844.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1998215882.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.2006236883.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.202158266.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.2113162861.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.2140359025.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.2141923073.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.251966754.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.267571345.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.316842793.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.333052671.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.343640643.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.39311854.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.405157034.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.426962747.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.46207268.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.463408908.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.499935376.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.600175486.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.660541938.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.677220047.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.712313012.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.764226247.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.799419169.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.849490204.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.861588833.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.892878398.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.917932566.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.974811491.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 242670561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23 +/- 0.00323085 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.23 @ 95%CL (1 toyMC)
median expected limit: r < 1.23 @ 95%CL (1 toyMC)
   68% expected band : 1.23 < r < 1.23
   95% expected band : 1.23 < r < 1.23
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -776958736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.760285 +/- 0.00319099 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.760285 @ 95%CL (1 toyMC)
median expected limit: r < 0.760285 @ 95%CL (1 toyMC)
   68% expected band : 0.760285 < r < 0.760285
   95% expected band : 0.760285 < r < 0.760285
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -104212022
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15997 +/- 0.00332848 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.15997 @ 95%CL (1 toyMC)
median expected limit: r < 1.15997 @ 95%CL (1 toyMC)
   68% expected band : 1.15997 < r < 1.15997
   95% expected band : 1.15997 < r < 1.15997
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -325302305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.785103 +/- 0.0032077 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.785103 @ 95%CL (1 toyMC)
median expected limit: r < 0.785103 @ 95%CL (1 toyMC)
   68% expected band : 0.785103 < r < 0.785103
   95% expected band : 0.785103 < r < 0.785103
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 258019443
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.764887 +/- 0.00321824 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.764887 @ 95%CL (1 toyMC)
median expected limit: r < 0.764887 @ 95%CL (1 toyMC)
   68% expected band : 0.764887 < r < 0.764887
   95% expected band : 0.764887 < r < 0.764887
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 694029032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08403 +/- 0.00357373 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.08403 @ 95%CL (1 toyMC)
median expected limit: r < 1.08403 @ 95%CL (1 toyMC)
   68% expected band : 1.08403 < r < 1.08403
   95% expected band : 1.08403 < r < 1.08403
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1270890610
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.951837 +/- 0.00302659 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.951837 @ 95%CL (1 toyMC)
median expected limit: r < 0.951837 @ 95%CL (1 toyMC)
   68% expected band : 0.951837 < r < 0.951837
   95% expected band : 0.951837 < r < 0.951837
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -815194843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.648826 +/- 0.00266098 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.648826 @ 95%CL (1 toyMC)
median expected limit: r < 0.648826 @ 95%CL (1 toyMC)
   68% expected band : 0.648826 < r < 0.648826
   95% expected band : 0.648826 < r < 0.648826
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -609062143
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16991 +/- 0.00297135 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.16991 @ 95%CL (1 toyMC)
median expected limit: r < 1.16991 @ 95%CL (1 toyMC)
   68% expected band : 1.16991 < r < 1.16991
   95% expected band : 1.16991 < r < 1.16991
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 28340133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.916154 +/- 0.00325442 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.916154 @ 95%CL (1 toyMC)
median expected limit: r < 0.916154 @ 95%CL (1 toyMC)
   68% expected band : 0.916154 < r < 0.916154
   95% expected band : 0.916154 < r < 0.916154
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1225505224
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.931938 +/- 0.00353447 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.931938 @ 95%CL (1 toyMC)
median expected limit: r < 0.931938 @ 95%CL (1 toyMC)
   68% expected band : 0.931938 < r < 0.931938
   95% expected band : 0.931938 < r < 0.931938
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1602914686
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18847 +/- 0.00282675 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.18847 @ 95%CL (1 toyMC)
median expected limit: r < 1.18847 @ 95%CL (1 toyMC)
   68% expected band : 1.18847 < r < 1.18847
   95% expected band : 1.18847 < r < 1.18847
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1602859061
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.785904 +/- 0.00369799 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.785904 @ 95%CL (1 toyMC)
median expected limit: r < 0.785904 @ 95%CL (1 toyMC)
   68% expected band : 0.785904 < r < 0.785904
   95% expected band : 0.785904 < r < 0.785904
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1972923437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.771408 +/- 0.00323909 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.771408 @ 95%CL (1 toyMC)
median expected limit: r < 0.771408 @ 95%CL (1 toyMC)
   68% expected band : 0.771408 < r < 0.771408
   95% expected band : 0.771408 < r < 0.771408
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 209812759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.996736 +/- 0.00354765 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.996736 @ 95%CL (1 toyMC)
median expected limit: r < 0.996736 @ 95%CL (1 toyMC)
   68% expected band : 0.996736 < r < 0.996736
   95% expected band : 0.996736 < r < 0.996736
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1351957972
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.744448 +/- 0.00354283 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.744448 @ 95%CL (1 toyMC)
median expected limit: r < 0.744448 @ 95%CL (1 toyMC)
   68% expected band : 0.744448 < r < 0.744448
   95% expected band : 0.744448 < r < 0.744448
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 553154503
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54967 +/- 0.00311067 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.54967 @ 95%CL (1 toyMC)
median expected limit: r < 1.54967 @ 95%CL (1 toyMC)
   68% expected band : 1.54967 < r < 1.54967
   95% expected band : 1.54967 < r < 1.54967
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -444755180
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.676538 +/- 0.00359791 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.676538 @ 95%CL (1 toyMC)
median expected limit: r < 0.676538 @ 95%CL (1 toyMC)
   68% expected band : 0.676538 < r < 0.676538
   95% expected band : 0.676538 < r < 0.676538
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1089011520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.890466 +/- 0.00391832 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.890466 @ 95%CL (1 toyMC)
median expected limit: r < 0.890466 @ 95%CL (1 toyMC)
   68% expected band : 0.890466 < r < 0.890466
   95% expected band : 0.890466 < r < 0.890466
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1897567974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39311 +/- 0.00305839 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.39311 @ 95%CL (1 toyMC)
median expected limit: r < 1.39311 @ 95%CL (1 toyMC)
   68% expected band : 1.39311 < r < 1.39311
   95% expected band : 1.39311 < r < 1.39311
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1816409948
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.85006 +/- 0.00315783 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.85006 @ 95%CL (1 toyMC)
median expected limit: r < 0.85006 @ 95%CL (1 toyMC)
   68% expected band : 0.85006 < r < 0.85006
   95% expected band : 0.85006 < r < 0.85006
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 879846669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.872975 +/- 0.00345731 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.872975 @ 95%CL (1 toyMC)
median expected limit: r < 0.872975 @ 95%CL (1 toyMC)
   68% expected band : 0.872975 < r < 0.872975
   95% expected band : 0.872975 < r < 0.872975
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1198187093
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.661841 +/- 0.00391079 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.661841 @ 95%CL (1 toyMC)
median expected limit: r < 0.661841 @ 95%CL (1 toyMC)
   68% expected band : 0.661841 < r < 0.661841
   95% expected band : 0.661841 < r < 0.661841
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 908840929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13908 +/- 0.00353528 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.13908 @ 95%CL (1 toyMC)
median expected limit: r < 1.13908 @ 95%CL (1 toyMC)
   68% expected band : 1.13908 < r < 1.13908
   95% expected band : 1.13908 < r < 1.13908
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1352898285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01361 +/- 0.00352381 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.01361 @ 95%CL (1 toyMC)
median expected limit: r < 1.01361 @ 95%CL (1 toyMC)
   68% expected band : 1.01361 < r < 1.01361
   95% expected band : 1.01361 < r < 1.01361
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1520184328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.790989 +/- 0.00296093 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.790989 @ 95%CL (1 toyMC)
median expected limit: r < 0.790989 @ 95%CL (1 toyMC)
   68% expected band : 0.790989 < r < 0.790989
   95% expected band : 0.790989 < r < 0.790989
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 901482434
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.694927 +/- 0.00339463 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.694927 @ 95%CL (1 toyMC)
median expected limit: r < 0.694927 @ 95%CL (1 toyMC)
   68% expected band : 0.694927 < r < 0.694927
   95% expected band : 0.694927 < r < 0.694927
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1324854232
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00114 +/- 0.00375771 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.00114 @ 95%CL (1 toyMC)
median expected limit: r < 1.00114 @ 95%CL (1 toyMC)
   68% expected band : 1.00114 < r < 1.00114
   95% expected band : 1.00114 < r < 1.00114
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2086233173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.696839 +/- 0.00315902 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.696839 @ 95%CL (1 toyMC)
median expected limit: r < 0.696839 @ 95%CL (1 toyMC)
   68% expected band : 0.696839 < r < 0.696839
   95% expected band : 0.696839 < r < 0.696839
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 849611559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.975965 +/- 0.00343107 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.975965 @ 95%CL (1 toyMC)
median expected limit: r < 0.975965 @ 95%CL (1 toyMC)
   68% expected band : 0.975965 < r < 0.975965
   95% expected band : 0.975965 < r < 0.975965
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -664729713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07344 +/- 0.00318579 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.07344 @ 95%CL (1 toyMC)
median expected limit: r < 1.07344 @ 95%CL (1 toyMC)
   68% expected band : 1.07344 < r < 1.07344
   95% expected band : 1.07344 < r < 1.07344
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 626487003
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.999551 +/- 0.0026149 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.999551 @ 95%CL (1 toyMC)
median expected limit: r < 0.999551 @ 95%CL (1 toyMC)
   68% expected band : 0.999551 < r < 0.999551
   95% expected band : 0.999551 < r < 0.999551
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1656645313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.726463 +/- 0.00329389 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.726463 @ 95%CL (1 toyMC)
median expected limit: r < 0.726463 @ 95%CL (1 toyMC)
   68% expected band : 0.726463 < r < 0.726463
   95% expected band : 0.726463 < r < 0.726463
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 458818825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02777 +/- 0.0034765 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.02777 @ 95%CL (1 toyMC)
median expected limit: r < 1.02777 @ 95%CL (1 toyMC)
   68% expected band : 1.02777 < r < 1.02777
   95% expected band : 1.02777 < r < 1.02777
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1420254659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.271 +/- 0.0040744 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.271 @ 95%CL (1 toyMC)
median expected limit: r < 1.271 @ 95%CL (1 toyMC)
   68% expected band : 1.271 < r < 1.271
   95% expected band : 1.271 < r < 1.271
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -404355718
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.718082 +/- 0.00297746 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.718082 @ 95%CL (1 toyMC)
median expected limit: r < 0.718082 @ 95%CL (1 toyMC)
   68% expected band : 0.718082 < r < 0.718082
   95% expected band : 0.718082 < r < 0.718082
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -352258627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.668329 +/- 0.00351304 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.668329 @ 95%CL (1 toyMC)
median expected limit: r < 0.668329 @ 95%CL (1 toyMC)
   68% expected band : 0.668329 < r < 0.668329
   95% expected band : 0.668329 < r < 0.668329
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2043075752
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.917104 +/- 0.00361145 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.917104 @ 95%CL (1 toyMC)
median expected limit: r < 0.917104 @ 95%CL (1 toyMC)
   68% expected band : 0.917104 < r < 0.917104
   95% expected band : 0.917104 < r < 0.917104
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 702374119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12874 +/- 0.00451058 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.12874 @ 95%CL (1 toyMC)
median expected limit: r < 1.12874 @ 95%CL (1 toyMC)
   68% expected band : 1.12874 < r < 1.12874
   95% expected band : 1.12874 < r < 1.12874
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1702547949
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.867272 +/- 0.0032222 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.867272 @ 95%CL (1 toyMC)
median expected limit: r < 0.867272 @ 95%CL (1 toyMC)
   68% expected band : 0.867272 < r < 0.867272
   95% expected band : 0.867272 < r < 0.867272
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1471329465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.730724 +/- 0.00268052 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.730724 @ 95%CL (1 toyMC)
median expected limit: r < 0.730724 @ 95%CL (1 toyMC)
   68% expected band : 0.730724 < r < 0.730724
   95% expected band : 0.730724 < r < 0.730724
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1588246651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.791798 +/- 0.00338905 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.791798 @ 95%CL (1 toyMC)
median expected limit: r < 0.791798 @ 95%CL (1 toyMC)
   68% expected band : 0.791798 < r < 0.791798
   95% expected band : 0.791798 < r < 0.791798
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -490197217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.887592 +/- 0.00352477 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.887592 @ 95%CL (1 toyMC)
median expected limit: r < 0.887592 @ 95%CL (1 toyMC)
   68% expected band : 0.887592 < r < 0.887592
   95% expected band : 0.887592 < r < 0.887592
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1464388980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.821684 +/- 0.00297129 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.821684 @ 95%CL (1 toyMC)
median expected limit: r < 0.821684 @ 95%CL (1 toyMC)
   68% expected band : 0.821684 < r < 0.821684
   95% expected band : 0.821684 < r < 0.821684
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1571441132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05792 +/- 0.00270126 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05792 @ 95%CL (1 toyMC)
median expected limit: r < 1.05792 @ 95%CL (1 toyMC)
   68% expected band : 1.05792 < r < 1.05792
   95% expected band : 1.05792 < r < 1.05792
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 413066561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.652751 +/- 0.00311867 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.652751 @ 95%CL (1 toyMC)
median expected limit: r < 0.652751 @ 95%CL (1 toyMC)
   68% expected band : 0.652751 < r < 0.652751
   95% expected band : 0.652751 < r < 0.652751
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1529589730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08839 +/- 0.00311359 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.08839 @ 95%CL (1 toyMC)
median expected limit: r < 1.08839 @ 95%CL (1 toyMC)
   68% expected band : 1.08839 < r < 1.08839
   95% expected band : 1.08839 < r < 1.08839
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 145694983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.688025 +/- 0.00371734 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.688025 @ 95%CL (1 toyMC)
median expected limit: r < 0.688025 @ 95%CL (1 toyMC)
   68% expected band : 0.688025 < r < 0.688025
   95% expected band : 0.688025 < r < 0.688025
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 734702092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.824566 +/- 0.00368621 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.824566 @ 95%CL (1 toyMC)
median expected limit: r < 0.824566 @ 95%CL (1 toyMC)
   68% expected band : 0.824566 < r < 0.824566
   95% expected band : 0.824566 < r < 0.824566
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -896365009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.735479 +/- 0.00316496 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.735479 @ 95%CL (1 toyMC)
median expected limit: r < 0.735479 @ 95%CL (1 toyMC)
   68% expected band : 0.735479 < r < 0.735479
   95% expected band : 0.735479 < r < 0.735479
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1864052037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10758 +/- 0.00421308 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.10758 @ 95%CL (1 toyMC)
median expected limit: r < 1.10758 @ 95%CL (1 toyMC)
   68% expected band : 1.10758 < r < 1.10758
   95% expected band : 1.10758 < r < 1.10758
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1485571253
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32097 +/- 0.00276509 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.32097 @ 95%CL (1 toyMC)
median expected limit: r < 1.32097 @ 95%CL (1 toyMC)
   68% expected band : 1.32097 < r < 1.32097
   95% expected band : 1.32097 < r < 1.32097
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1831983137
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.663544 +/- 0.00317866 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.663544 @ 95%CL (1 toyMC)
median expected limit: r < 0.663544 @ 95%CL (1 toyMC)
   68% expected band : 0.663544 < r < 0.663544
   95% expected band : 0.663544 < r < 0.663544
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1890358058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44965 +/- 0.00256599 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.44965 @ 95%CL (1 toyMC)
median expected limit: r < 1.44965 @ 95%CL (1 toyMC)
   68% expected band : 1.44965 < r < 1.44965
   95% expected band : 1.44965 < r < 1.44965
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1997514105
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.785984 +/- 0.00455593 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.785984 @ 95%CL (1 toyMC)
median expected limit: r < 0.785984 @ 95%CL (1 toyMC)
   68% expected band : 0.785984 < r < 0.785984
   95% expected band : 0.785984 < r < 0.785984
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1757206344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38567 +/- 0.00355725 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.38567 @ 95%CL (1 toyMC)
median expected limit: r < 1.38567 @ 95%CL (1 toyMC)
   68% expected band : 1.38567 < r < 1.38567
   95% expected band : 1.38567 < r < 1.38567
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2133764152
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.818556 +/- 0.00372379 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.818556 @ 95%CL (1 toyMC)
median expected limit: r < 0.818556 @ 95%CL (1 toyMC)
   68% expected band : 0.818556 < r < 0.818556
   95% expected band : 0.818556 < r < 0.818556
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 767474142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17493 +/- 0.00477207 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.17493 @ 95%CL (1 toyMC)
median expected limit: r < 1.17493 @ 95%CL (1 toyMC)
   68% expected band : 1.17493 < r < 1.17493
   95% expected band : 1.17493 < r < 1.17493
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1992644098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.979087 +/- 0.00422797 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.979087 @ 95%CL (1 toyMC)
median expected limit: r < 0.979087 @ 95%CL (1 toyMC)
   68% expected band : 0.979087 < r < 0.979087
   95% expected band : 0.979087 < r < 0.979087
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1434761136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.821951 +/- 0.00296017 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.821951 @ 95%CL (1 toyMC)
median expected limit: r < 0.821951 @ 95%CL (1 toyMC)
   68% expected band : 0.821951 < r < 0.821951
   95% expected band : 0.821951 < r < 0.821951
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 978099647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.727897 +/- 0.00342272 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.727897 @ 95%CL (1 toyMC)
median expected limit: r < 0.727897 @ 95%CL (1 toyMC)
   68% expected band : 0.727897 < r < 0.727897
   95% expected band : 0.727897 < r < 0.727897
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -856187183
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29144 +/- 0.00323362 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.29144 @ 95%CL (1 toyMC)
median expected limit: r < 1.29144 @ 95%CL (1 toyMC)
   68% expected band : 1.29144 < r < 1.29144
   95% expected band : 1.29144 < r < 1.29144
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -3797913
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02037 +/- 0.00306012 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.02037 @ 95%CL (1 toyMC)
median expected limit: r < 1.02037 @ 95%CL (1 toyMC)
   68% expected band : 1.02037 < r < 1.02037
   95% expected band : 1.02037 < r < 1.02037
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1547207694
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.759688 +/- 0.00392835 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.759688 @ 95%CL (1 toyMC)
median expected limit: r < 0.759688 @ 95%CL (1 toyMC)
   68% expected band : 0.759688 < r < 0.759688
   95% expected band : 0.759688 < r < 0.759688
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1176280157
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43296 +/- 0.00430652 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.43296 @ 95%CL (1 toyMC)
median expected limit: r < 1.43296 @ 95%CL (1 toyMC)
   68% expected band : 1.43296 < r < 1.43296
   95% expected band : 1.43296 < r < 1.43296
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1538557778
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.836086 +/- 0.00370444 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.836086 @ 95%CL (1 toyMC)
median expected limit: r < 0.836086 @ 95%CL (1 toyMC)
   68% expected band : 0.836086 < r < 0.836086
   95% expected band : 0.836086 < r < 0.836086
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -442524573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.863834 +/- 0.00341143 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.863834 @ 95%CL (1 toyMC)
median expected limit: r < 0.863834 @ 95%CL (1 toyMC)
   68% expected band : 0.863834 < r < 0.863834
   95% expected band : 0.863834 < r < 0.863834
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 780600929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.829454 +/- 0.00351996 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.829454 @ 95%CL (1 toyMC)
median expected limit: r < 0.829454 @ 95%CL (1 toyMC)
   68% expected band : 0.829454 < r < 0.829454
   95% expected band : 0.829454 < r < 0.829454
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1457521409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.731843 +/- 0.00348651 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.731843 @ 95%CL (1 toyMC)
median expected limit: r < 0.731843 @ 95%CL (1 toyMC)
   68% expected band : 0.731843 < r < 0.731843
   95% expected band : 0.731843 < r < 0.731843
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2146487429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.859873 +/- 0.00320275 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.859873 @ 95%CL (1 toyMC)
median expected limit: r < 0.859873 @ 95%CL (1 toyMC)
   68% expected band : 0.859873 < r < 0.859873
   95% expected band : 0.859873 < r < 0.859873
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -539827801
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.793916 +/- 0.00353677 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.793916 @ 95%CL (1 toyMC)
median expected limit: r < 0.793916 @ 95%CL (1 toyMC)
   68% expected band : 0.793916 < r < 0.793916
   95% expected band : 0.793916 < r < 0.793916
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -390825961
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.817461 +/- 0.0030247 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.817461 @ 95%CL (1 toyMC)
median expected limit: r < 0.817461 @ 95%CL (1 toyMC)
   68% expected band : 0.817461 < r < 0.817461
   95% expected band : 0.817461 < r < 0.817461
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 212383163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.698211 +/- 0.00338028 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.698211 @ 95%CL (1 toyMC)
median expected limit: r < 0.698211 @ 95%CL (1 toyMC)
   68% expected band : 0.698211 < r < 0.698211
   95% expected band : 0.698211 < r < 0.698211
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1940618067
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12451 +/- 0.0030816 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.12451 @ 95%CL (1 toyMC)
median expected limit: r < 1.12451 @ 95%CL (1 toyMC)
   68% expected band : 1.12451 < r < 1.12451
   95% expected band : 1.12451 < r < 1.12451
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1343795771
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.685983 +/- 0.00293904 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.685983 @ 95%CL (1 toyMC)
median expected limit: r < 0.685983 @ 95%CL (1 toyMC)
   68% expected band : 0.685983 < r < 0.685983
   95% expected band : 0.685983 < r < 0.685983
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1998973408
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.963323 +/- 0.00350876 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.963323 @ 95%CL (1 toyMC)
median expected limit: r < 0.963323 @ 95%CL (1 toyMC)
   68% expected band : 0.963323 < r < 0.963323
   95% expected band : 0.963323 < r < 0.963323
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1230175910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.745244 +/- 0.00302722 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.745244 @ 95%CL (1 toyMC)
median expected limit: r < 0.745244 @ 95%CL (1 toyMC)
   68% expected band : 0.745244 < r < 0.745244
   95% expected band : 0.745244 < r < 0.745244
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 53674646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.800871 +/- 0.00343871 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.800871 @ 95%CL (1 toyMC)
median expected limit: r < 0.800871 @ 95%CL (1 toyMC)
   68% expected band : 0.800871 < r < 0.800871
   95% expected band : 0.800871 < r < 0.800871
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1299260639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.47673 +/- 0.00353884 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.47673 @ 95%CL (1 toyMC)
median expected limit: r < 1.47673 @ 95%CL (1 toyMC)
   68% expected band : 1.47673 < r < 1.47673
   95% expected band : 1.47673 < r < 1.47673
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1691661326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.92458 +/- 0.00327836 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.92458 @ 95%CL (1 toyMC)
median expected limit: r < 0.92458 @ 95%CL (1 toyMC)
   68% expected band : 0.92458 < r < 0.92458
   95% expected band : 0.92458 < r < 0.92458
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1162621538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.823457 +/- 0.00393697 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.823457 @ 95%CL (1 toyMC)
median expected limit: r < 0.823457 @ 95%CL (1 toyMC)
   68% expected band : 0.823457 < r < 0.823457
   95% expected band : 0.823457 < r < 0.823457
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -634763929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22146 +/- 0.00408343 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.22146 @ 95%CL (1 toyMC)
median expected limit: r < 1.22146 @ 95%CL (1 toyMC)
   68% expected band : 1.22146 < r < 1.22146
   95% expected band : 1.22146 < r < 1.22146
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1165715339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.683418 +/- 0.00367148 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.683418 @ 95%CL (1 toyMC)
median expected limit: r < 0.683418 @ 95%CL (1 toyMC)
   68% expected band : 0.683418 < r < 0.683418
   95% expected band : 0.683418 < r < 0.683418
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1622893517
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.82655 +/- 0.00344516 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.82655 @ 95%CL (1 toyMC)
median expected limit: r < 0.82655 @ 95%CL (1 toyMC)
   68% expected band : 0.82655 < r < 0.82655
   95% expected band : 0.82655 < r < 0.82655
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 875719481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.806704 +/- 0.00417689 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.806704 @ 95%CL (1 toyMC)
median expected limit: r < 0.806704 @ 95%CL (1 toyMC)
   68% expected band : 0.806704 < r < 0.806704
   95% expected band : 0.806704 < r < 0.806704
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1772888169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12442 +/- 0.00357248 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.12442 @ 95%CL (1 toyMC)
median expected limit: r < 1.12442 @ 95%CL (1 toyMC)
   68% expected band : 1.12442 < r < 1.12442
   95% expected band : 1.12442 < r < 1.12442
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 380794826
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.869196 +/- 0.00357623 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.869196 @ 95%CL (1 toyMC)
median expected limit: r < 0.869196 @ 95%CL (1 toyMC)
   68% expected band : 0.869196 < r < 0.869196
   95% expected band : 0.869196 < r < 0.869196
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 273239099
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.797188 +/- 0.00346702 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.797188 @ 95%CL (1 toyMC)
median expected limit: r < 0.797188 @ 95%CL (1 toyMC)
   68% expected band : 0.797188 < r < 0.797188
   95% expected band : 0.797188 < r < 0.797188
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -339244601
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38268 +/- 0.00319124 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.38268 @ 95%CL (1 toyMC)
median expected limit: r < 1.38268 @ 95%CL (1 toyMC)
   68% expected band : 1.38268 < r < 1.38268
   95% expected band : 1.38268 < r < 1.38268
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 300535659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.83546 +/- 0.00332795 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.83546 @ 95%CL (1 toyMC)
median expected limit: r < 0.83546 @ 95%CL (1 toyMC)
   68% expected band : 0.83546 < r < 0.83546
   95% expected band : 0.83546 < r < 0.83546
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -344418889
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.769596 +/- 0.00320485 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.769596 @ 95%CL (1 toyMC)
median expected limit: r < 0.769596 @ 95%CL (1 toyMC)
   68% expected band : 0.769596 < r < 0.769596
   95% expected band : 0.769596 < r < 0.769596
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -756550986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12806 +/- 0.00387723 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.12806 @ 95%CL (1 toyMC)
median expected limit: r < 1.12806 @ 95%CL (1 toyMC)
   68% expected band : 1.12806 < r < 1.12806
   95% expected band : 1.12806 < r < 1.12806
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 74469472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.755225 +/- 0.00293202 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.755225 @ 95%CL (1 toyMC)
median expected limit: r < 0.755225 @ 95%CL (1 toyMC)
   68% expected band : 0.755225 < r < 0.755225
   95% expected band : 0.755225 < r < 0.755225
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -246180979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.907465 +/- 0.003456 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.907465 @ 95%CL (1 toyMC)
median expected limit: r < 0.907465 @ 95%CL (1 toyMC)
   68% expected band : 0.907465 < r < 0.907465
   95% expected band : 0.907465 < r < 0.907465
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 859730395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.894997 +/- 0.0029044 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.894997 @ 95%CL (1 toyMC)
median expected limit: r < 0.894997 @ 95%CL (1 toyMC)
   68% expected band : 0.894997 < r < 0.894997
   95% expected band : 0.894997 < r < 0.894997
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -791741947
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1057 +/- 0.00448058 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1057 @ 95%CL (1 toyMC)
median expected limit: r < 1.1057 @ 95%CL (1 toyMC)
   68% expected band : 1.1057 < r < 1.1057
   95% expected band : 1.1057 < r < 1.1057
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1965957900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.896716 +/- 0.00373363 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.896716 @ 95%CL (1 toyMC)
median expected limit: r < 0.896716 @ 95%CL (1 toyMC)
   68% expected band : 0.896716 < r < 0.896716
   95% expected band : 0.896716 < r < 0.896716
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -65128523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.930941 +/- 0.00403732 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.930941 @ 95%CL (1 toyMC)
median expected limit: r < 0.930941 @ 95%CL (1 toyMC)
   68% expected band : 0.930941 < r < 0.930941
   95% expected band : 0.930941 < r < 0.930941
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1104856463
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.943339 +/- 0.00327528 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.943339 @ 95%CL (1 toyMC)
median expected limit: r < 0.943339 @ 95%CL (1 toyMC)
   68% expected band : 0.943339 < r < 0.943339
   95% expected band : 0.943339 < r < 0.943339
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1073159089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06331 +/- 0.00334664 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.06331 @ 95%CL (1 toyMC)
median expected limit: r < 1.06331 @ 95%CL (1 toyMC)
   68% expected band : 1.06331 < r < 1.06331
   95% expected band : 1.06331 < r < 1.06331
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-104212022.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1073159089.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1089011520.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1104856463.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1165715339.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1225505224.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1343795771.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1351957972.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1352898285.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1420254659.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1434761136.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1471329465.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1529589730.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1538557778.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1571441132.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1602859061.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1602914686.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1656645313.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1757206344.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1831983137.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1864052037.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1897567974.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1940618067.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-1965957900.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-1972923437.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-1992644098.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-1997514105.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-1998973408.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-2043075752.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-2086233173.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-2133764152.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-2146487429.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-246180979.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-325302305.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-339244601.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-344418889.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-352258627.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-3797913.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-390825961.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-404355718.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-442524573.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-444755180.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-490197217.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-539827801.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-609062143.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-634763929.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-65128523.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-664729713.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-756550986.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.-776958736.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.-791741947.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.-815194843.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.-856187183.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.-896365009.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1162621538.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1176280157.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1198187093.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1230175910.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1270890610.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1299260639.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1324854232.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.145694983.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1457521409.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1464388980.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1485571253.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1520184328.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1547207694.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1588246651.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1622893517.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1691661326.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1702547949.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1772888169.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1816409948.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1890358058.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.209812759.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.212383163.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.242670561.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.258019443.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.273239099.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.28340133.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.300535659.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.380794826.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.413066561.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.458818825.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.53674646.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.553154503.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.626487003.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.694029032.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.702374119.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.734702092.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.74469472.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.767474142.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.780600929.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.849611559.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.859730395.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.875719481.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.879846669.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.901482434.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.908840929.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.978099647.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2145820568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14851 +/- 0.003629 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.14851 @ 95%CL (1 toyMC)
median expected limit: r < 1.14851 @ 95%CL (1 toyMC)
   68% expected band : 1.14851 < r < 1.14851
   95% expected band : 1.14851 < r < 1.14851
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 329495675
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.750489 +/- 0.00385578 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.750489 @ 95%CL (1 toyMC)
median expected limit: r < 0.750489 @ 95%CL (1 toyMC)
   68% expected band : 0.750489 < r < 0.750489
   95% expected band : 0.750489 < r < 0.750489
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -44901267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.831101 +/- 0.00312652 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.831101 @ 95%CL (1 toyMC)
median expected limit: r < 0.831101 @ 95%CL (1 toyMC)
   68% expected band : 0.831101 < r < 0.831101
   95% expected band : 0.831101 < r < 0.831101
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 299068702
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07074 +/- 0.00356006 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.07074 @ 95%CL (1 toyMC)
median expected limit: r < 1.07074 @ 95%CL (1 toyMC)
   68% expected band : 1.07074 < r < 1.07074
   95% expected band : 1.07074 < r < 1.07074
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2111631036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.67898 +/- 0.00355646 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.67898 @ 95%CL (1 toyMC)
median expected limit: r < 0.67898 @ 95%CL (1 toyMC)
   68% expected band : 0.67898 < r < 0.67898
   95% expected band : 0.67898 < r < 0.67898
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1844465772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.868806 +/- 0.00338372 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.868806 @ 95%CL (1 toyMC)
median expected limit: r < 0.868806 @ 95%CL (1 toyMC)
   68% expected band : 0.868806 < r < 0.868806
   95% expected band : 0.868806 < r < 0.868806
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 862568484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.839373 +/- 0.00342048 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.839373 @ 95%CL (1 toyMC)
median expected limit: r < 0.839373 @ 95%CL (1 toyMC)
   68% expected band : 0.839373 < r < 0.839373
   95% expected band : 0.839373 < r < 0.839373
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1114639630
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.839454 +/- 0.00303327 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.839454 @ 95%CL (1 toyMC)
median expected limit: r < 0.839454 @ 95%CL (1 toyMC)
   68% expected band : 0.839454 < r < 0.839454
   95% expected band : 0.839454 < r < 0.839454
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 236187544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.759186 +/- 0.00330682 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.759186 @ 95%CL (1 toyMC)
median expected limit: r < 0.759186 @ 95%CL (1 toyMC)
   68% expected band : 0.759186 < r < 0.759186
   95% expected band : 0.759186 < r < 0.759186
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -406312106
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.711261 +/- 0.0041873 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.711261 @ 95%CL (1 toyMC)
median expected limit: r < 0.711261 @ 95%CL (1 toyMC)
   68% expected band : 0.711261 < r < 0.711261
   95% expected band : 0.711261 < r < 0.711261
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 296192377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.753581 +/- 0.00349597 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.753581 @ 95%CL (1 toyMC)
median expected limit: r < 0.753581 @ 95%CL (1 toyMC)
   68% expected band : 0.753581 < r < 0.753581
   95% expected band : 0.753581 < r < 0.753581
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1014110540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.907717 +/- 0.00370175 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.907717 @ 95%CL (1 toyMC)
median expected limit: r < 0.907717 @ 95%CL (1 toyMC)
   68% expected band : 0.907717 < r < 0.907717
   95% expected band : 0.907717 < r < 0.907717
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1718199839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15402 +/- 0.00375048 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.15402 @ 95%CL (1 toyMC)
median expected limit: r < 1.15402 @ 95%CL (1 toyMC)
   68% expected band : 1.15402 < r < 1.15402
   95% expected band : 1.15402 < r < 1.15402
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1432312212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.714193 +/- 0.00297873 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.714193 @ 95%CL (1 toyMC)
median expected limit: r < 0.714193 @ 95%CL (1 toyMC)
   68% expected band : 0.714193 < r < 0.714193
   95% expected band : 0.714193 < r < 0.714193
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1907988512
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3698 +/- 0.00327949 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.3698 @ 95%CL (1 toyMC)
median expected limit: r < 1.3698 @ 95%CL (1 toyMC)
   68% expected band : 1.3698 < r < 1.3698
   95% expected band : 1.3698 < r < 1.3698
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1614919459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02983 +/- 0.00315693 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.02983 @ 95%CL (1 toyMC)
median expected limit: r < 1.02983 @ 95%CL (1 toyMC)
   68% expected band : 1.02983 < r < 1.02983
   95% expected band : 1.02983 < r < 1.02983
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -226631261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.821534 +/- 0.00376659 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.821534 @ 95%CL (1 toyMC)
median expected limit: r < 0.821534 @ 95%CL (1 toyMC)
   68% expected band : 0.821534 < r < 0.821534
   95% expected band : 0.821534 < r < 0.821534
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1951839140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.911877 +/- 0.003358 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.911877 @ 95%CL (1 toyMC)
median expected limit: r < 0.911877 @ 95%CL (1 toyMC)
   68% expected band : 0.911877 < r < 0.911877
   95% expected band : 0.911877 < r < 0.911877
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 493675183
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.914386 +/- 0.00328208 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.914386 @ 95%CL (1 toyMC)
median expected limit: r < 0.914386 @ 95%CL (1 toyMC)
   68% expected band : 0.914386 < r < 0.914386
   95% expected band : 0.914386 < r < 0.914386
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 597594519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.920684 +/- 0.00370216 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.920684 @ 95%CL (1 toyMC)
median expected limit: r < 0.920684 @ 95%CL (1 toyMC)
   68% expected band : 0.920684 < r < 0.920684
   95% expected band : 0.920684 < r < 0.920684
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -890593934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.734491 +/- 0.00364244 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.734491 @ 95%CL (1 toyMC)
median expected limit: r < 0.734491 @ 95%CL (1 toyMC)
   68% expected band : 0.734491 < r < 0.734491
   95% expected band : 0.734491 < r < 0.734491
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -692679633
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00166 +/- 0.00442979 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.00166 @ 95%CL (1 toyMC)
median expected limit: r < 1.00166 @ 95%CL (1 toyMC)
   68% expected band : 1.00166 < r < 1.00166
   95% expected band : 1.00166 < r < 1.00166
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -733521441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.985602 +/- 0.00385584 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.985602 @ 95%CL (1 toyMC)
median expected limit: r < 0.985602 @ 95%CL (1 toyMC)
   68% expected band : 0.985602 < r < 0.985602
   95% expected band : 0.985602 < r < 0.985602
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -789474169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.970137 +/- 0.00365192 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.970137 @ 95%CL (1 toyMC)
median expected limit: r < 0.970137 @ 95%CL (1 toyMC)
   68% expected band : 0.970137 < r < 0.970137
   95% expected band : 0.970137 < r < 0.970137
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -933340948
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32204 +/- 0.00376924 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.32204 @ 95%CL (1 toyMC)
median expected limit: r < 1.32204 @ 95%CL (1 toyMC)
   68% expected band : 1.32204 < r < 1.32204
   95% expected band : 1.32204 < r < 1.32204
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 516609679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54487 +/- 0.00387407 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.54487 @ 95%CL (1 toyMC)
median expected limit: r < 1.54487 @ 95%CL (1 toyMC)
   68% expected band : 1.54487 < r < 1.54487
   95% expected band : 1.54487 < r < 1.54487
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -395427138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26109 +/- 0.00289066 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26109 @ 95%CL (1 toyMC)
median expected limit: r < 1.26109 @ 95%CL (1 toyMC)
   68% expected band : 1.26109 < r < 1.26109
   95% expected band : 1.26109 < r < 1.26109
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 509806674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.692526 +/- 0.00276505 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.692526 @ 95%CL (1 toyMC)
median expected limit: r < 0.692526 @ 95%CL (1 toyMC)
   68% expected band : 0.692526 < r < 0.692526
   95% expected band : 0.692526 < r < 0.692526
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 239940794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4691 +/- 0.0039875 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.4691 @ 95%CL (1 toyMC)
median expected limit: r < 1.4691 @ 95%CL (1 toyMC)
   68% expected band : 1.4691 < r < 1.4691
   95% expected band : 1.4691 < r < 1.4691
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 658878755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39865 +/- 0.00339822 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.39865 @ 95%CL (1 toyMC)
median expected limit: r < 1.39865 @ 95%CL (1 toyMC)
   68% expected band : 1.39865 < r < 1.39865
   95% expected band : 1.39865 < r < 1.39865
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1678792933
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.710445 +/- 0.00347117 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.710445 @ 95%CL (1 toyMC)
median expected limit: r < 0.710445 @ 95%CL (1 toyMC)
   68% expected band : 0.710445 < r < 0.710445
   95% expected band : 0.710445 < r < 0.710445
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1224501502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.622073 +/- 0.00277649 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.622073 @ 95%CL (1 toyMC)
median expected limit: r < 0.622073 @ 95%CL (1 toyMC)
   68% expected band : 0.622073 < r < 0.622073
   95% expected band : 0.622073 < r < 0.622073
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1355823816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66737 +/- 0.0035608 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.66737 @ 95%CL (1 toyMC)
median expected limit: r < 1.66737 @ 95%CL (1 toyMC)
   68% expected band : 1.66737 < r < 1.66737
   95% expected band : 1.66737 < r < 1.66737
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -154317765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.785178 +/- 0.00363683 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.785178 @ 95%CL (1 toyMC)
median expected limit: r < 0.785178 @ 95%CL (1 toyMC)
   68% expected band : 0.785178 < r < 0.785178
   95% expected band : 0.785178 < r < 0.785178
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 489995001
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.750961 +/- 0.00390758 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.750961 @ 95%CL (1 toyMC)
median expected limit: r < 0.750961 @ 95%CL (1 toyMC)
   68% expected band : 0.750961 < r < 0.750961
   95% expected band : 0.750961 < r < 0.750961
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1507382917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.677488 +/- 0.0030528 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.677488 @ 95%CL (1 toyMC)
median expected limit: r < 0.677488 @ 95%CL (1 toyMC)
   68% expected band : 0.677488 < r < 0.677488
   95% expected band : 0.677488 < r < 0.677488
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 164580844
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.690945 +/- 0.00334736 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.690945 @ 95%CL (1 toyMC)
median expected limit: r < 0.690945 @ 95%CL (1 toyMC)
   68% expected band : 0.690945 < r < 0.690945
   95% expected band : 0.690945 < r < 0.690945
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1784359226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.67391 +/- 0.00322619 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.67391 @ 95%CL (1 toyMC)
median expected limit: r < 0.67391 @ 95%CL (1 toyMC)
   68% expected band : 0.67391 < r < 0.67391
   95% expected band : 0.67391 < r < 0.67391
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1757267172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.880746 +/- 0.00350703 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.880746 @ 95%CL (1 toyMC)
median expected limit: r < 0.880746 @ 95%CL (1 toyMC)
   68% expected band : 0.880746 < r < 0.880746
   95% expected band : 0.880746 < r < 0.880746
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -11553126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.726867 +/- 0.00356022 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.726867 @ 95%CL (1 toyMC)
median expected limit: r < 0.726867 @ 95%CL (1 toyMC)
   68% expected band : 0.726867 < r < 0.726867
   95% expected band : 0.726867 < r < 0.726867
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -979020329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.890996 +/- 0.00303905 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.890996 @ 95%CL (1 toyMC)
median expected limit: r < 0.890996 @ 95%CL (1 toyMC)
   68% expected band : 0.890996 < r < 0.890996
   95% expected band : 0.890996 < r < 0.890996
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -67770825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03612 +/- 0.00407264 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.03612 @ 95%CL (1 toyMC)
median expected limit: r < 1.03612 @ 95%CL (1 toyMC)
   68% expected band : 1.03612 < r < 1.03612
   95% expected band : 1.03612 < r < 1.03612
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -452012581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.78927 +/- 0.00329999 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.78927 @ 95%CL (1 toyMC)
median expected limit: r < 0.78927 @ 95%CL (1 toyMC)
   68% expected band : 0.78927 < r < 0.78927
   95% expected band : 0.78927 < r < 0.78927
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 629552159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82302 +/- 0.00409497 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.82302 @ 95%CL (1 toyMC)
median expected limit: r < 1.82302 @ 95%CL (1 toyMC)
   68% expected band : 1.82302 < r < 1.82302
   95% expected band : 1.82302 < r < 1.82302
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1366365630
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.907391 +/- 0.00366747 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.907391 @ 95%CL (1 toyMC)
median expected limit: r < 0.907391 @ 95%CL (1 toyMC)
   68% expected band : 0.907391 < r < 0.907391
   95% expected band : 0.907391 < r < 0.907391
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2129703100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.702123 +/- 0.00325045 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.702123 @ 95%CL (1 toyMC)
median expected limit: r < 0.702123 @ 95%CL (1 toyMC)
   68% expected band : 0.702123 < r < 0.702123
   95% expected band : 0.702123 < r < 0.702123
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1751127907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3307 +/- 0.00310746 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.3307 @ 95%CL (1 toyMC)
median expected limit: r < 1.3307 @ 95%CL (1 toyMC)
   68% expected band : 1.3307 < r < 1.3307
   95% expected band : 1.3307 < r < 1.3307
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2066832956
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.738046 +/- 0.00303882 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.738046 @ 95%CL (1 toyMC)
median expected limit: r < 0.738046 @ 95%CL (1 toyMC)
   68% expected band : 0.738046 < r < 0.738046
   95% expected band : 0.738046 < r < 0.738046
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 253846770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.910948 +/- 0.0040123 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.910948 @ 95%CL (1 toyMC)
median expected limit: r < 0.910948 @ 95%CL (1 toyMC)
   68% expected band : 0.910948 < r < 0.910948
   95% expected band : 0.910948 < r < 0.910948
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1623355570
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.818371 +/- 0.00373578 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.818371 @ 95%CL (1 toyMC)
median expected limit: r < 0.818371 @ 95%CL (1 toyMC)
   68% expected band : 0.818371 < r < 0.818371
   95% expected band : 0.818371 < r < 0.818371
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1056254051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.839857 +/- 0.00357104 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.839857 @ 95%CL (1 toyMC)
median expected limit: r < 0.839857 @ 95%CL (1 toyMC)
   68% expected band : 0.839857 < r < 0.839857
   95% expected band : 0.839857 < r < 0.839857
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 383838844
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.699538 +/- 0.003549 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.699538 @ 95%CL (1 toyMC)
median expected limit: r < 0.699538 @ 95%CL (1 toyMC)
   68% expected band : 0.699538 < r < 0.699538
   95% expected band : 0.699538 < r < 0.699538
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -865734489
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.780062 +/- 0.00399752 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.780062 @ 95%CL (1 toyMC)
median expected limit: r < 0.780062 @ 95%CL (1 toyMC)
   68% expected band : 0.780062 < r < 0.780062
   95% expected band : 0.780062 < r < 0.780062
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2027756130
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01351 +/- 0.00316628 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.01351 @ 95%CL (1 toyMC)
median expected limit: r < 1.01351 @ 95%CL (1 toyMC)
   68% expected band : 1.01351 < r < 1.01351
   95% expected band : 1.01351 < r < 1.01351
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -184005392
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1042 +/- 0.00334343 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1042 @ 95%CL (1 toyMC)
median expected limit: r < 1.1042 @ 95%CL (1 toyMC)
   68% expected band : 1.1042 < r < 1.1042
   95% expected band : 1.1042 < r < 1.1042
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1248170836
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33782 +/- 0.00367955 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.33782 @ 95%CL (1 toyMC)
median expected limit: r < 1.33782 @ 95%CL (1 toyMC)
   68% expected band : 1.33782 < r < 1.33782
   95% expected band : 1.33782 < r < 1.33782
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1476815620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.837927 +/- 0.00334045 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.837927 @ 95%CL (1 toyMC)
median expected limit: r < 0.837927 @ 95%CL (1 toyMC)
   68% expected band : 0.837927 < r < 0.837927
   95% expected band : 0.837927 < r < 0.837927
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -283117588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09194 +/- 0.0035908 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09194 @ 95%CL (1 toyMC)
median expected limit: r < 1.09194 @ 95%CL (1 toyMC)
   68% expected band : 1.09194 < r < 1.09194
   95% expected band : 1.09194 < r < 1.09194
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -352140243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69987 +/- 0.00355212 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.69987 @ 95%CL (1 toyMC)
median expected limit: r < 1.69987 @ 95%CL (1 toyMC)
   68% expected band : 1.69987 < r < 1.69987
   95% expected band : 1.69987 < r < 1.69987
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1942950682
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.777528 +/- 0.00383573 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.777528 @ 95%CL (1 toyMC)
median expected limit: r < 0.777528 @ 95%CL (1 toyMC)
   68% expected band : 0.777528 < r < 0.777528
   95% expected band : 0.777528 < r < 0.777528
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1245227810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53062 +/- 0.00333466 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.53062 @ 95%CL (1 toyMC)
median expected limit: r < 1.53062 @ 95%CL (1 toyMC)
   68% expected band : 1.53062 < r < 1.53062
   95% expected band : 1.53062 < r < 1.53062
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1580620155
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34155 +/- 0.0035997 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.34155 @ 95%CL (1 toyMC)
median expected limit: r < 1.34155 @ 95%CL (1 toyMC)
   68% expected band : 1.34155 < r < 1.34155
   95% expected band : 1.34155 < r < 1.34155
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1460080956
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.772638 +/- 0.00366816 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.772638 @ 95%CL (1 toyMC)
median expected limit: r < 0.772638 @ 95%CL (1 toyMC)
   68% expected band : 0.772638 < r < 0.772638
   95% expected band : 0.772638 < r < 0.772638
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1582172036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.937583 +/- 0.00329405 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.937583 @ 95%CL (1 toyMC)
median expected limit: r < 0.937583 @ 95%CL (1 toyMC)
   68% expected band : 0.937583 < r < 0.937583
   95% expected band : 0.937583 < r < 0.937583
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1140122826
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37007 +/- 0.00393963 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.37007 @ 95%CL (1 toyMC)
median expected limit: r < 1.37007 @ 95%CL (1 toyMC)
   68% expected band : 1.37007 < r < 1.37007
   95% expected band : 1.37007 < r < 1.37007
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1684839129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.746339 +/- 0.00365339 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.746339 @ 95%CL (1 toyMC)
median expected limit: r < 0.746339 @ 95%CL (1 toyMC)
   68% expected band : 0.746339 < r < 0.746339
   95% expected band : 0.746339 < r < 0.746339
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -501082092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.716607 +/- 0.00318893 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.716607 @ 95%CL (1 toyMC)
median expected limit: r < 0.716607 @ 95%CL (1 toyMC)
   68% expected band : 0.716607 < r < 0.716607
   95% expected band : 0.716607 < r < 0.716607
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1250212203
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.879567 +/- 0.00368285 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.879567 @ 95%CL (1 toyMC)
median expected limit: r < 0.879567 @ 95%CL (1 toyMC)
   68% expected band : 0.879567 < r < 0.879567
   95% expected band : 0.879567 < r < 0.879567
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1454914343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.702185 +/- 0.00361759 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.702185 @ 95%CL (1 toyMC)
median expected limit: r < 0.702185 @ 95%CL (1 toyMC)
   68% expected band : 0.702185 < r < 0.702185
   95% expected band : 0.702185 < r < 0.702185
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1894496658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1245 +/- 0.00391748 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1245 @ 95%CL (1 toyMC)
median expected limit: r < 1.1245 @ 95%CL (1 toyMC)
   68% expected band : 1.1245 < r < 1.1245
   95% expected band : 1.1245 < r < 1.1245
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -884838960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04692 +/- 0.00396079 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04692 @ 95%CL (1 toyMC)
median expected limit: r < 1.04692 @ 95%CL (1 toyMC)
   68% expected band : 1.04692 < r < 1.04692
   95% expected band : 1.04692 < r < 1.04692
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 902277140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.869771 +/- 0.0031949 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.869771 @ 95%CL (1 toyMC)
median expected limit: r < 0.869771 @ 95%CL (1 toyMC)
   68% expected band : 0.869771 < r < 0.869771
   95% expected band : 0.869771 < r < 0.869771
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1399864656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11038 +/- 0.0035105 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.11038 @ 95%CL (1 toyMC)
median expected limit: r < 1.11038 @ 95%CL (1 toyMC)
   68% expected band : 1.11038 < r < 1.11038
   95% expected band : 1.11038 < r < 1.11038
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -604684864
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.89391 +/- 0.00348873 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.89391 @ 95%CL (1 toyMC)
median expected limit: r < 0.89391 @ 95%CL (1 toyMC)
   68% expected band : 0.89391 < r < 0.89391
   95% expected band : 0.89391 < r < 0.89391
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1525647105
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.739915 +/- 0.00312064 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.739915 @ 95%CL (1 toyMC)
median expected limit: r < 0.739915 @ 95%CL (1 toyMC)
   68% expected band : 0.739915 < r < 0.739915
   95% expected band : 0.739915 < r < 0.739915
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 160594063
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.886342 +/- 0.00323315 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.886342 @ 95%CL (1 toyMC)
median expected limit: r < 0.886342 @ 95%CL (1 toyMC)
   68% expected band : 0.886342 < r < 0.886342
   95% expected band : 0.886342 < r < 0.886342
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 822032979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.889859 +/- 0.00339713 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.889859 @ 95%CL (1 toyMC)
median expected limit: r < 0.889859 @ 95%CL (1 toyMC)
   68% expected band : 0.889859 < r < 0.889859
   95% expected band : 0.889859 < r < 0.889859
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2014598174
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.845805 +/- 0.00357883 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.845805 @ 95%CL (1 toyMC)
median expected limit: r < 0.845805 @ 95%CL (1 toyMC)
   68% expected band : 0.845805 < r < 0.845805
   95% expected band : 0.845805 < r < 0.845805
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1437702047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37493 +/- 0.00364744 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.37493 @ 95%CL (1 toyMC)
median expected limit: r < 1.37493 @ 95%CL (1 toyMC)
   68% expected band : 1.37493 < r < 1.37493
   95% expected band : 1.37493 < r < 1.37493
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 811763879
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.762723 +/- 0.00302182 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.762723 @ 95%CL (1 toyMC)
median expected limit: r < 0.762723 @ 95%CL (1 toyMC)
   68% expected band : 0.762723 < r < 0.762723
   95% expected band : 0.762723 < r < 0.762723
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1400174779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.831042 +/- 0.00365467 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.831042 @ 95%CL (1 toyMC)
median expected limit: r < 0.831042 @ 95%CL (1 toyMC)
   68% expected band : 0.831042 < r < 0.831042
   95% expected band : 0.831042 < r < 0.831042
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -342001684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.762253 +/- 0.00331864 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.762253 @ 95%CL (1 toyMC)
median expected limit: r < 0.762253 @ 95%CL (1 toyMC)
   68% expected band : 0.762253 < r < 0.762253
   95% expected band : 0.762253 < r < 0.762253
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -251946889
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.187 +/- 0.00342706 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.187 @ 95%CL (1 toyMC)
median expected limit: r < 1.187 @ 95%CL (1 toyMC)
   68% expected band : 1.187 < r < 1.187
   95% expected band : 1.187 < r < 1.187
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 429426093
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.820325 +/- 0.0031426 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.820325 @ 95%CL (1 toyMC)
median expected limit: r < 0.820325 @ 95%CL (1 toyMC)
   68% expected band : 0.820325 < r < 0.820325
   95% expected band : 0.820325 < r < 0.820325
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1584392726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.648969 +/- 0.00352451 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.648969 @ 95%CL (1 toyMC)
median expected limit: r < 0.648969 @ 95%CL (1 toyMC)
   68% expected band : 0.648969 < r < 0.648969
   95% expected band : 0.648969 < r < 0.648969
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 511883016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.76419 +/- 0.00280922 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.76419 @ 95%CL (1 toyMC)
median expected limit: r < 0.76419 @ 95%CL (1 toyMC)
   68% expected band : 0.76419 < r < 0.76419
   95% expected band : 0.76419 < r < 0.76419
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1065602645
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11513 +/- 0.00341213 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.11513 @ 95%CL (1 toyMC)
median expected limit: r < 1.11513 @ 95%CL (1 toyMC)
   68% expected band : 1.11513 < r < 1.11513
   95% expected band : 1.11513 < r < 1.11513
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 513600299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.659531 +/- 0.00310912 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.659531 @ 95%CL (1 toyMC)
median expected limit: r < 0.659531 @ 95%CL (1 toyMC)
   68% expected band : 0.659531 < r < 0.659531
   95% expected band : 0.659531 < r < 0.659531
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1667284892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.812803 +/- 0.00355378 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.812803 @ 95%CL (1 toyMC)
median expected limit: r < 0.812803 @ 95%CL (1 toyMC)
   68% expected band : 0.812803 < r < 0.812803
   95% expected band : 0.812803 < r < 0.812803
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -245289966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34899 +/- 0.00377832 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.34899 @ 95%CL (1 toyMC)
median expected limit: r < 1.34899 @ 95%CL (1 toyMC)
   68% expected band : 1.34899 < r < 1.34899
   95% expected band : 1.34899 < r < 1.34899
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1540510523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.954487 +/- 0.00369564 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.954487 @ 95%CL (1 toyMC)
median expected limit: r < 0.954487 @ 95%CL (1 toyMC)
   68% expected band : 0.954487 < r < 0.954487
   95% expected band : 0.954487 < r < 0.954487
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1761493348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.833579 +/- 0.00344749 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.833579 @ 95%CL (1 toyMC)
median expected limit: r < 0.833579 @ 95%CL (1 toyMC)
   68% expected band : 0.833579 < r < 0.833579
   95% expected band : 0.833579 < r < 0.833579
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1508778278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.807276 +/- 0.00311688 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.807276 @ 95%CL (1 toyMC)
median expected limit: r < 0.807276 @ 95%CL (1 toyMC)
   68% expected band : 0.807276 < r < 0.807276
   95% expected band : 0.807276 < r < 0.807276
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -464697584
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36668 +/- 0.00274078 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.36668 @ 95%CL (1 toyMC)
median expected limit: r < 1.36668 @ 95%CL (1 toyMC)
   68% expected band : 1.36668 < r < 1.36668
   95% expected band : 1.36668 < r < 1.36668
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 503145302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.641737 +/- 0.0030559 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.641737 @ 95%CL (1 toyMC)
median expected limit: r < 0.641737 @ 95%CL (1 toyMC)
   68% expected band : 0.641737 < r < 0.641737
   95% expected band : 0.641737 < r < 0.641737
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1402782749
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.881309 +/- 0.00338809 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.881309 @ 95%CL (1 toyMC)
median expected limit: r < 0.881309 @ 95%CL (1 toyMC)
   68% expected band : 0.881309 < r < 0.881309
   95% expected band : 0.881309 < r < 0.881309
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 464516251
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.953771 +/- 0.00348626 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.953771 @ 95%CL (1 toyMC)
median expected limit: r < 0.953771 @ 95%CL (1 toyMC)
   68% expected band : 0.953771 < r < 0.953771
   95% expected band : 0.953771 < r < 0.953771
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -494015423
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.809495 +/- 0.00360211 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.809495 @ 95%CL (1 toyMC)
median expected limit: r < 0.809495 @ 95%CL (1 toyMC)
   68% expected band : 0.809495 < r < 0.809495
   95% expected band : 0.809495 < r < 0.809495
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1867679839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.860403 +/- 0.00359979 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.860403 @ 95%CL (1 toyMC)
median expected limit: r < 0.860403 @ 95%CL (1 toyMC)
   68% expected band : 0.860403 < r < 0.860403
   95% expected band : 0.860403 < r < 0.860403
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -467790935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16707 +/- 0.00400307 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.16707 @ 95%CL (1 toyMC)
median expected limit: r < 1.16707 @ 95%CL (1 toyMC)
   68% expected band : 1.16707 < r < 1.16707
   95% expected band : 1.16707 < r < 1.16707
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1014110540.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1065602645.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-11553126.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1248170836.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1400174779.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1454914343.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1476815620.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1508778278.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1525647105.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-154317765.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1580620155.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1582172036.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1584392726.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1614919459.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1667284892.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1751127907.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1757267172.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1761493348.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1784359226.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-184005392.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1844465772.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1894496658.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1907988512.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-1942950682.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-1951839140.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-2014598174.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-2027756130.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-226631261.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-245289966.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-251946889.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-283117588.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-342001684.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-352140243.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-395427138.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-406312106.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-44901267.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-452012581.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-464697584.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-467790935.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-494015423.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-501082092.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-604684864.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-67770825.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-692679633.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-733521441.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-789474169.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-865734489.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-884838960.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-890593934.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.-933340948.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.-979020329.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1056254051.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1114639630.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1140122826.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1224501502.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1245227810.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1250212203.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1355823816.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1366365630.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1399864656.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1402782749.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1432312212.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1437702047.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1460080956.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1507382917.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1540510523.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.160594063.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1623355570.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.164580844.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1678792933.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1684839129.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1718199839.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1867679839.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.2066832956.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.2111631036.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.2129703100.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.2145820568.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.236187544.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.239940794.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.253846770.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.296192377.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.299068702.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.329495675.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.383838844.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.429426093.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.464516251.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.489995001.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.493675183.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.503145302.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.509806674.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.511883016.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.513600299.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.516609679.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.597594519.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.629552159.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.658878755.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.811763879.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.822032979.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.862568484.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.902277140.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1171659489
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.888681 +/- 0.00309696 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.888681 @ 95%CL (1 toyMC)
median expected limit: r < 0.888681 @ 95%CL (1 toyMC)
   68% expected band : 0.888681 < r < 0.888681
   95% expected band : 0.888681 < r < 0.888681
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 887443465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.741446 +/- 0.00413098 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.741446 @ 95%CL (1 toyMC)
median expected limit: r < 0.741446 @ 95%CL (1 toyMC)
   68% expected band : 0.741446 < r < 0.741446
   95% expected band : 0.741446 < r < 0.741446
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -642129435
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.700502 +/- 0.00423151 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.700502 @ 95%CL (1 toyMC)
median expected limit: r < 0.700502 @ 95%CL (1 toyMC)
   68% expected band : 0.700502 < r < 0.700502
   95% expected band : 0.700502 < r < 0.700502
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 743255523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.783745 +/- 0.00330206 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.783745 @ 95%CL (1 toyMC)
median expected limit: r < 0.783745 @ 95%CL (1 toyMC)
   68% expected band : 0.783745 < r < 0.783745
   95% expected band : 0.783745 < r < 0.783745
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -812116690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01551 +/- 0.00325283 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.01551 @ 95%CL (1 toyMC)
median expected limit: r < 1.01551 @ 95%CL (1 toyMC)
   68% expected band : 1.01551 < r < 1.01551
   95% expected band : 1.01551 < r < 1.01551
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -10675963
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2974 +/- 0.00404457 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.2974 @ 95%CL (1 toyMC)
median expected limit: r < 1.2974 @ 95%CL (1 toyMC)
   68% expected band : 1.2974 < r < 1.2974
   95% expected band : 1.2974 < r < 1.2974
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 382698875
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12785 +/- 0.00367271 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.12785 @ 95%CL (1 toyMC)
median expected limit: r < 1.12785 @ 95%CL (1 toyMC)
   68% expected band : 1.12785 < r < 1.12785
   95% expected band : 1.12785 < r < 1.12785
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2024351047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.975727 +/- 0.00398163 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.975727 @ 95%CL (1 toyMC)
median expected limit: r < 0.975727 @ 95%CL (1 toyMC)
   68% expected band : 0.975727 < r < 0.975727
   95% expected band : 0.975727 < r < 0.975727
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -866442513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.658179 +/- 0.00327655 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.658179 @ 95%CL (1 toyMC)
median expected limit: r < 0.658179 @ 95%CL (1 toyMC)
   68% expected band : 0.658179 < r < 0.658179
   95% expected band : 0.658179 < r < 0.658179
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 238542782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1794 +/- 0.00261346 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.1794 @ 95%CL (1 toyMC)
median expected limit: r < 1.1794 @ 95%CL (1 toyMC)
   68% expected band : 1.1794 < r < 1.1794
   95% expected band : 1.1794 < r < 1.1794
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -917979490
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.887092 +/- 0.00326161 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.887092 @ 95%CL (1 toyMC)
median expected limit: r < 0.887092 @ 95%CL (1 toyMC)
   68% expected band : 0.887092 < r < 0.887092
   95% expected band : 0.887092 < r < 0.887092
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 972385179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91385 +/- 0.00353461 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.91385 @ 95%CL (1 toyMC)
median expected limit: r < 1.91385 @ 95%CL (1 toyMC)
   68% expected band : 1.91385 < r < 1.91385
   95% expected band : 1.91385 < r < 1.91385
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 210517825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00397 +/- 0.00259307 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.00397 @ 95%CL (1 toyMC)
median expected limit: r < 1.00397 @ 95%CL (1 toyMC)
   68% expected band : 1.00397 < r < 1.00397
   95% expected band : 1.00397 < r < 1.00397
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -332490539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33053 +/- 0.00371277 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.33053 @ 95%CL (1 toyMC)
median expected limit: r < 1.33053 @ 95%CL (1 toyMC)
   68% expected band : 1.33053 < r < 1.33053
   95% expected band : 1.33053 < r < 1.33053
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1796947650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04897 +/- 0.00333859 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04897 @ 95%CL (1 toyMC)
median expected limit: r < 1.04897 @ 95%CL (1 toyMC)
   68% expected band : 1.04897 < r < 1.04897
   95% expected band : 1.04897 < r < 1.04897
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -26535082
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08647 +/- 0.00312727 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.08647 @ 95%CL (1 toyMC)
median expected limit: r < 1.08647 @ 95%CL (1 toyMC)
   68% expected band : 1.08647 < r < 1.08647
   95% expected band : 1.08647 < r < 1.08647
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -785962080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.717821 +/- 0.00318657 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.717821 @ 95%CL (1 toyMC)
median expected limit: r < 0.717821 @ 95%CL (1 toyMC)
   68% expected band : 0.717821 < r < 0.717821
   95% expected band : 0.717821 < r < 0.717821
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1080982236
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.817061 +/- 0.00305891 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.817061 @ 95%CL (1 toyMC)
median expected limit: r < 0.817061 @ 95%CL (1 toyMC)
   68% expected band : 0.817061 < r < 0.817061
   95% expected band : 0.817061 < r < 0.817061
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 918150093
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.827744 +/- 0.00338636 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.827744 @ 95%CL (1 toyMC)
median expected limit: r < 0.827744 @ 95%CL (1 toyMC)
   68% expected band : 0.827744 < r < 0.827744
   95% expected band : 0.827744 < r < 0.827744
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 782444729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.855897 +/- 0.00398307 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.855897 @ 95%CL (1 toyMC)
median expected limit: r < 0.855897 @ 95%CL (1 toyMC)
   68% expected band : 0.855897 < r < 0.855897
   95% expected band : 0.855897 < r < 0.855897
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 669310040
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21605 +/- 0.00326364 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.21605 @ 95%CL (1 toyMC)
median expected limit: r < 1.21605 @ 95%CL (1 toyMC)
   68% expected band : 1.21605 < r < 1.21605
   95% expected band : 1.21605 < r < 1.21605
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1939575179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20704 +/- 0.00309885 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.20704 @ 95%CL (1 toyMC)
median expected limit: r < 1.20704 @ 95%CL (1 toyMC)
   68% expected band : 1.20704 < r < 1.20704
   95% expected band : 1.20704 < r < 1.20704
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1527210422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.92038 +/- 0.00346653 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.92038 @ 95%CL (1 toyMC)
median expected limit: r < 0.92038 @ 95%CL (1 toyMC)
   68% expected band : 0.92038 < r < 0.92038
   95% expected band : 0.92038 < r < 0.92038
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -741721632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.953238 +/- 0.00321509 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.953238 @ 95%CL (1 toyMC)
median expected limit: r < 0.953238 @ 95%CL (1 toyMC)
   68% expected band : 0.953238 < r < 0.953238
   95% expected band : 0.953238 < r < 0.953238
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1499636296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03634 +/- 0.00312701 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.03634 @ 95%CL (1 toyMC)
median expected limit: r < 1.03634 @ 95%CL (1 toyMC)
   68% expected band : 1.03634 < r < 1.03634
   95% expected band : 1.03634 < r < 1.03634
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -761615534
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.741565 +/- 0.00364693 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.741565 @ 95%CL (1 toyMC)
median expected limit: r < 0.741565 @ 95%CL (1 toyMC)
   68% expected band : 0.741565 < r < 0.741565
   95% expected band : 0.741565 < r < 0.741565
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1015206005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.722937 +/- 0.00343819 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.722937 @ 95%CL (1 toyMC)
median expected limit: r < 0.722937 @ 95%CL (1 toyMC)
   68% expected band : 0.722937 < r < 0.722937
   95% expected band : 0.722937 < r < 0.722937
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 502603959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.975897 +/- 0.0032537 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.975897 @ 95%CL (1 toyMC)
median expected limit: r < 0.975897 @ 95%CL (1 toyMC)
   68% expected band : 0.975897 < r < 0.975897
   95% expected band : 0.975897 < r < 0.975897
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 137600430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.708573 +/- 0.00319843 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.708573 @ 95%CL (1 toyMC)
median expected limit: r < 0.708573 @ 95%CL (1 toyMC)
   68% expected band : 0.708573 < r < 0.708573
   95% expected band : 0.708573 < r < 0.708573
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1401553906
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18816 +/- 0.0030824 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.18816 @ 95%CL (1 toyMC)
median expected limit: r < 1.18816 @ 95%CL (1 toyMC)
   68% expected band : 1.18816 < r < 1.18816
   95% expected band : 1.18816 < r < 1.18816
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 808371815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.888305 +/- 0.00304204 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.888305 @ 95%CL (1 toyMC)
median expected limit: r < 0.888305 @ 95%CL (1 toyMC)
   68% expected band : 0.888305 < r < 0.888305
   95% expected band : 0.888305 < r < 0.888305
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1199784392
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.768084 +/- 0.00383491 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.768084 @ 95%CL (1 toyMC)
median expected limit: r < 0.768084 @ 95%CL (1 toyMC)
   68% expected band : 0.768084 < r < 0.768084
   95% expected band : 0.768084 < r < 0.768084
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 207362059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.653407 +/- 0.00213537 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.653407 @ 95%CL (1 toyMC)
median expected limit: r < 0.653407 @ 95%CL (1 toyMC)
   68% expected band : 0.653407 < r < 0.653407
   95% expected band : 0.653407 < r < 0.653407
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1132153736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.824412 +/- 0.00412847 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.824412 @ 95%CL (1 toyMC)
median expected limit: r < 0.824412 @ 95%CL (1 toyMC)
   68% expected band : 0.824412 < r < 0.824412
   95% expected band : 0.824412 < r < 0.824412
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 772202009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04826 +/- 0.00309675 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04826 @ 95%CL (1 toyMC)
median expected limit: r < 1.04826 @ 95%CL (1 toyMC)
   68% expected band : 1.04826 < r < 1.04826
   95% expected band : 1.04826 < r < 1.04826
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 66580125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.925453 +/- 0.0037243 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.925453 @ 95%CL (1 toyMC)
median expected limit: r < 0.925453 @ 95%CL (1 toyMC)
   68% expected band : 0.925453 < r < 0.925453
   95% expected band : 0.925453 < r < 0.925453
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1920369486
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.644649 +/- 0.00307799 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.644649 @ 95%CL (1 toyMC)
median expected limit: r < 0.644649 @ 95%CL (1 toyMC)
   68% expected band : 0.644649 < r < 0.644649
   95% expected band : 0.644649 < r < 0.644649
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 346362576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10356 +/- 0.00322489 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.10356 @ 95%CL (1 toyMC)
median expected limit: r < 1.10356 @ 95%CL (1 toyMC)
   68% expected band : 1.10356 < r < 1.10356
   95% expected band : 1.10356 < r < 1.10356
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 604424291
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.816789 +/- 0.00322757 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.816789 @ 95%CL (1 toyMC)
median expected limit: r < 0.816789 @ 95%CL (1 toyMC)
   68% expected band : 0.816789 < r < 0.816789
   95% expected band : 0.816789 < r < 0.816789
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1390609544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.806613 +/- 0.00282287 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.806613 @ 95%CL (1 toyMC)
median expected limit: r < 0.806613 @ 95%CL (1 toyMC)
   68% expected band : 0.806613 < r < 0.806613
   95% expected band : 0.806613 < r < 0.806613
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1996418281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.87722 +/- 0.00329336 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.87722 @ 95%CL (1 toyMC)
median expected limit: r < 0.87722 @ 95%CL (1 toyMC)
   68% expected band : 0.87722 < r < 0.87722
   95% expected band : 0.87722 < r < 0.87722
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1150975541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.883294 +/- 0.0037488 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.883294 @ 95%CL (1 toyMC)
median expected limit: r < 0.883294 @ 95%CL (1 toyMC)
   68% expected band : 0.883294 < r < 0.883294
   95% expected band : 0.883294 < r < 0.883294
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 62277233
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.72444 +/- 0.00400037 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.72444 @ 95%CL (1 toyMC)
median expected limit: r < 0.72444 @ 95%CL (1 toyMC)
   68% expected band : 0.72444 < r < 0.72444
   95% expected band : 0.72444 < r < 0.72444
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -310360164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.66117 +/- 0.00317907 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.66117 @ 95%CL (1 toyMC)
median expected limit: r < 0.66117 @ 95%CL (1 toyMC)
   68% expected band : 0.66117 < r < 0.66117
   95% expected band : 0.66117 < r < 0.66117
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -836533938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.801031 +/- 0.00268869 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.801031 @ 95%CL (1 toyMC)
median expected limit: r < 0.801031 @ 95%CL (1 toyMC)
   68% expected band : 0.801031 < r < 0.801031
   95% expected band : 0.801031 < r < 0.801031
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 160741460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.903312 +/- 0.00343462 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.903312 @ 95%CL (1 toyMC)
median expected limit: r < 0.903312 @ 95%CL (1 toyMC)
   68% expected band : 0.903312 < r < 0.903312
   95% expected band : 0.903312 < r < 0.903312
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 739533715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.737503 +/- 0.00310223 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.737503 @ 95%CL (1 toyMC)
median expected limit: r < 0.737503 @ 95%CL (1 toyMC)
   68% expected band : 0.737503 < r < 0.737503
   95% expected band : 0.737503 < r < 0.737503
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1321149816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42948 +/- 0.00318199 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.42948 @ 95%CL (1 toyMC)
median expected limit: r < 1.42948 @ 95%CL (1 toyMC)
   68% expected band : 1.42948 < r < 1.42948
   95% expected band : 1.42948 < r < 1.42948
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1941233338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01051 +/- 0.00352896 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.01051 @ 95%CL (1 toyMC)
median expected limit: r < 1.01051 @ 95%CL (1 toyMC)
   68% expected band : 1.01051 < r < 1.01051
   95% expected band : 1.01051 < r < 1.01051
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2135172539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8128 +/- 0.00413365 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.8128 @ 95%CL (1 toyMC)
median expected limit: r < 1.8128 @ 95%CL (1 toyMC)
   68% expected band : 1.8128 < r < 1.8128
   95% expected band : 1.8128 < r < 1.8128
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1068202560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30098 +/- 0.00282904 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.30098 @ 95%CL (1 toyMC)
median expected limit: r < 1.30098 @ 95%CL (1 toyMC)
   68% expected band : 1.30098 < r < 1.30098
   95% expected band : 1.30098 < r < 1.30098
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 427331406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07441 +/- 0.00291282 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.07441 @ 95%CL (1 toyMC)
median expected limit: r < 1.07441 @ 95%CL (1 toyMC)
   68% expected band : 1.07441 < r < 1.07441
   95% expected band : 1.07441 < r < 1.07441
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1883174620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23053 +/- 0.00420206 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.23053 @ 95%CL (1 toyMC)
median expected limit: r < 1.23053 @ 95%CL (1 toyMC)
   68% expected band : 1.23053 < r < 1.23053
   95% expected band : 1.23053 < r < 1.23053
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -773218654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.760343 +/- 0.00351797 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.760343 @ 95%CL (1 toyMC)
median expected limit: r < 0.760343 @ 95%CL (1 toyMC)
   68% expected band : 0.760343 < r < 0.760343
   95% expected band : 0.760343 < r < 0.760343
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1548840197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.771543 +/- 0.00334234 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.771543 @ 95%CL (1 toyMC)
median expected limit: r < 0.771543 @ 95%CL (1 toyMC)
   68% expected band : 0.771543 < r < 0.771543
   95% expected band : 0.771543 < r < 0.771543
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1005908337
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24043 +/- 0.00350462 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.24043 @ 95%CL (1 toyMC)
median expected limit: r < 1.24043 @ 95%CL (1 toyMC)
   68% expected band : 1.24043 < r < 1.24043
   95% expected band : 1.24043 < r < 1.24043
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -675804384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.970024 +/- 0.00349334 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.970024 @ 95%CL (1 toyMC)
median expected limit: r < 0.970024 @ 95%CL (1 toyMC)
   68% expected band : 0.970024 < r < 0.970024
   95% expected band : 0.970024 < r < 0.970024
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 328739356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01683 +/- 0.00348998 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.01683 @ 95%CL (1 toyMC)
median expected limit: r < 1.01683 @ 95%CL (1 toyMC)
   68% expected band : 1.01683 < r < 1.01683
   95% expected band : 1.01683 < r < 1.01683
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1447243200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43112 +/- 0.00315985 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.43112 @ 95%CL (1 toyMC)
median expected limit: r < 1.43112 @ 95%CL (1 toyMC)
   68% expected band : 1.43112 < r < 1.43112
   95% expected band : 1.43112 < r < 1.43112
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2007386206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.701102 +/- 0.00383204 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.701102 @ 95%CL (1 toyMC)
median expected limit: r < 0.701102 @ 95%CL (1 toyMC)
   68% expected band : 0.701102 < r < 0.701102
   95% expected band : 0.701102 < r < 0.701102
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1713467471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02131 +/- 0.00315377 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.02131 @ 95%CL (1 toyMC)
median expected limit: r < 1.02131 @ 95%CL (1 toyMC)
   68% expected band : 1.02131 < r < 1.02131
   95% expected band : 1.02131 < r < 1.02131
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1889885524
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.9936 +/- 0.00351879 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.9936 @ 95%CL (1 toyMC)
median expected limit: r < 0.9936 @ 95%CL (1 toyMC)
   68% expected band : 0.9936 < r < 0.9936
   95% expected band : 0.9936 < r < 0.9936
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1805532803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.953231 +/- 0.00337399 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.953231 @ 95%CL (1 toyMC)
median expected limit: r < 0.953231 @ 95%CL (1 toyMC)
   68% expected band : 0.953231 < r < 0.953231
   95% expected band : 0.953231 < r < 0.953231
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -890292054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.760713 +/- 0.00276977 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.760713 @ 95%CL (1 toyMC)
median expected limit: r < 0.760713 @ 95%CL (1 toyMC)
   68% expected band : 0.760713 < r < 0.760713
   95% expected band : 0.760713 < r < 0.760713
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1343939540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13137 +/- 0.00315636 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.13137 @ 95%CL (1 toyMC)
median expected limit: r < 1.13137 @ 95%CL (1 toyMC)
   68% expected band : 1.13137 < r < 1.13137
   95% expected band : 1.13137 < r < 1.13137
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1108008609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.89723 +/- 0.00281506 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.89723 @ 95%CL (1 toyMC)
median expected limit: r < 0.89723 @ 95%CL (1 toyMC)
   68% expected band : 0.89723 < r < 0.89723
   95% expected band : 0.89723 < r < 0.89723
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1120050445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.972812 +/- 0.00370291 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.972812 @ 95%CL (1 toyMC)
median expected limit: r < 0.972812 @ 95%CL (1 toyMC)
   68% expected band : 0.972812 < r < 0.972812
   95% expected band : 0.972812 < r < 0.972812
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -128749266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13392 +/- 0.00322103 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.13392 @ 95%CL (1 toyMC)
median expected limit: r < 1.13392 @ 95%CL (1 toyMC)
   68% expected band : 1.13392 < r < 1.13392
   95% expected band : 1.13392 < r < 1.13392
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -374566935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.700442 +/- 0.00255869 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.700442 @ 95%CL (1 toyMC)
median expected limit: r < 0.700442 @ 95%CL (1 toyMC)
   68% expected band : 0.700442 < r < 0.700442
   95% expected band : 0.700442 < r < 0.700442
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1981017012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0006 +/- 0.00402576 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.0006 @ 95%CL (1 toyMC)
median expected limit: r < 1.0006 @ 95%CL (1 toyMC)
   68% expected band : 1.0006 < r < 1.0006
   95% expected band : 1.0006 < r < 1.0006
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -203180544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.643992 +/- 0.00341376 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.643992 @ 95%CL (1 toyMC)
median expected limit: r < 0.643992 @ 95%CL (1 toyMC)
   68% expected band : 0.643992 < r < 0.643992
   95% expected band : 0.643992 < r < 0.643992
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -46602093
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.711966 +/- 0.00291502 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.711966 @ 95%CL (1 toyMC)
median expected limit: r < 0.711966 @ 95%CL (1 toyMC)
   68% expected band : 0.711966 < r < 0.711966
   95% expected band : 0.711966 < r < 0.711966
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -411345572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.733547 +/- 0.00325565 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.733547 @ 95%CL (1 toyMC)
median expected limit: r < 0.733547 @ 95%CL (1 toyMC)
   68% expected band : 0.733547 < r < 0.733547
   95% expected band : 0.733547 < r < 0.733547
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -154869928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35709 +/- 0.00398209 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.35709 @ 95%CL (1 toyMC)
median expected limit: r < 1.35709 @ 95%CL (1 toyMC)
   68% expected band : 1.35709 < r < 1.35709
   95% expected band : 1.35709 < r < 1.35709
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -53269842
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4684 +/- 0.00300073 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.4684 @ 95%CL (1 toyMC)
median expected limit: r < 1.4684 @ 95%CL (1 toyMC)
   68% expected band : 1.4684 < r < 1.4684
   95% expected band : 1.4684 < r < 1.4684
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 375381051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.729244 +/- 0.00336437 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.729244 @ 95%CL (1 toyMC)
median expected limit: r < 0.729244 @ 95%CL (1 toyMC)
   68% expected band : 0.729244 < r < 0.729244
   95% expected band : 0.729244 < r < 0.729244
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -139653860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05807 +/- 0.0031321 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.05807 @ 95%CL (1 toyMC)
median expected limit: r < 1.05807 @ 95%CL (1 toyMC)
   68% expected band : 1.05807 < r < 1.05807
   95% expected band : 1.05807 < r < 1.05807
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 17586080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24033 +/- 0.00328221 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.24033 @ 95%CL (1 toyMC)
median expected limit: r < 1.24033 @ 95%CL (1 toyMC)
   68% expected band : 1.24033 < r < 1.24033
   95% expected band : 1.24033 < r < 1.24033
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -569081793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.784546 +/- 0.00345122 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.784546 @ 95%CL (1 toyMC)
median expected limit: r < 0.784546 @ 95%CL (1 toyMC)
   68% expected band : 0.784546 < r < 0.784546
   95% expected band : 0.784546 < r < 0.784546
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -827512877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.678044 +/- 0.00323651 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.678044 @ 95%CL (1 toyMC)
median expected limit: r < 0.678044 @ 95%CL (1 toyMC)
   68% expected band : 0.678044 < r < 0.678044
   95% expected band : 0.678044 < r < 0.678044
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1514050342
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.701979 +/- 0.00363811 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.701979 @ 95%CL (1 toyMC)
median expected limit: r < 0.701979 @ 95%CL (1 toyMC)
   68% expected band : 0.701979 < r < 0.701979
   95% expected band : 0.701979 < r < 0.701979
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1725165165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.982046 +/- 0.00367269 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.982046 @ 95%CL (1 toyMC)
median expected limit: r < 0.982046 @ 95%CL (1 toyMC)
   68% expected band : 0.982046 < r < 0.982046
   95% expected band : 0.982046 < r < 0.982046
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -158165799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.991273 +/- 0.00325102 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.991273 @ 95%CL (1 toyMC)
median expected limit: r < 0.991273 @ 95%CL (1 toyMC)
   68% expected band : 0.991273 < r < 0.991273
   95% expected band : 0.991273 < r < 0.991273
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 874782632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.847313 +/- 0.00314593 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.847313 @ 95%CL (1 toyMC)
median expected limit: r < 0.847313 @ 95%CL (1 toyMC)
   68% expected band : 0.847313 < r < 0.847313
   95% expected band : 0.847313 < r < 0.847313
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 122833672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.919676 +/- 0.00302808 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.919676 @ 95%CL (1 toyMC)
median expected limit: r < 0.919676 @ 95%CL (1 toyMC)
   68% expected band : 0.919676 < r < 0.919676
   95% expected band : 0.919676 < r < 0.919676
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 838922582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14214 +/- 0.00305172 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.14214 @ 95%CL (1 toyMC)
median expected limit: r < 1.14214 @ 95%CL (1 toyMC)
   68% expected band : 1.14214 < r < 1.14214
   95% expected band : 1.14214 < r < 1.14214
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 674066810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.680097 +/- 0.00367075 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.680097 @ 95%CL (1 toyMC)
median expected limit: r < 0.680097 @ 95%CL (1 toyMC)
   68% expected band : 0.680097 < r < 0.680097
   95% expected band : 0.680097 < r < 0.680097
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2064147242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.907419 +/- 0.00368852 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.907419 @ 95%CL (1 toyMC)
median expected limit: r < 0.907419 @ 95%CL (1 toyMC)
   68% expected band : 0.907419 < r < 0.907419
   95% expected band : 0.907419 < r < 0.907419
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -802384764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.901948 +/- 0.00369218 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.901948 @ 95%CL (1 toyMC)
median expected limit: r < 0.901948 @ 95%CL (1 toyMC)
   68% expected band : 0.901948 < r < 0.901948
   95% expected band : 0.901948 < r < 0.901948
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 269822879
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45266 +/- 0.00329332 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.45266 @ 95%CL (1 toyMC)
median expected limit: r < 1.45266 @ 95%CL (1 toyMC)
   68% expected band : 1.45266 < r < 1.45266
   95% expected band : 1.45266 < r < 1.45266
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -247242889
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09529 +/- 0.00399713 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09529 @ 95%CL (1 toyMC)
median expected limit: r < 1.09529 @ 95%CL (1 toyMC)
   68% expected band : 1.09529 < r < 1.09529
   95% expected band : 1.09529 < r < 1.09529
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1749368637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16776 +/- 0.00294609 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.16776 @ 95%CL (1 toyMC)
median expected limit: r < 1.16776 @ 95%CL (1 toyMC)
   68% expected band : 1.16776 < r < 1.16776
   95% expected band : 1.16776 < r < 1.16776
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1894869626
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.682044 +/- 0.00286784 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.682044 @ 95%CL (1 toyMC)
median expected limit: r < 0.682044 @ 95%CL (1 toyMC)
   68% expected band : 0.682044 < r < 0.682044
   95% expected band : 0.682044 < r < 0.682044
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2134790072
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.774167 +/- 0.0039557 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.774167 @ 95%CL (1 toyMC)
median expected limit: r < 0.774167 @ 95%CL (1 toyMC)
   68% expected band : 0.774167 < r < 0.774167
   95% expected band : 0.774167 < r < 0.774167
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -138994344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.735734 +/- 0.00314686 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.735734 @ 95%CL (1 toyMC)
median expected limit: r < 0.735734 @ 95%CL (1 toyMC)
   68% expected band : 0.735734 < r < 0.735734
   95% expected band : 0.735734 < r < 0.735734
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1863523254
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.85476 +/- 0.00328406 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.85476 @ 95%CL (1 toyMC)
median expected limit: r < 0.85476 @ 95%CL (1 toyMC)
   68% expected band : 0.85476 < r < 0.85476
   95% expected band : 0.85476 < r < 0.85476
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 699545126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.817169 +/- 0.00388086 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.817169 @ 95%CL (1 toyMC)
median expected limit: r < 0.817169 @ 95%CL (1 toyMC)
   68% expected band : 0.817169 < r < 0.817169
   95% expected band : 0.817169 < r < 0.817169
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1340875837
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08428 +/- 0.00267763 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.08428 @ 95%CL (1 toyMC)
median expected limit: r < 1.08428 @ 95%CL (1 toyMC)
   68% expected band : 1.08428 < r < 1.08428
   95% expected band : 1.08428 < r < 1.08428
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1024671665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06259 +/- 0.00372269 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.06259 @ 95%CL (1 toyMC)
median expected limit: r < 1.06259 @ 95%CL (1 toyMC)
   68% expected band : 1.06259 < r < 1.06259
   95% expected band : 1.06259 < r < 1.06259
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2031034615
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.703726 +/- 0.00336311 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.703726 @ 95%CL (1 toyMC)
median expected limit: r < 0.703726 @ 95%CL (1 toyMC)
   68% expected band : 0.703726 < r < 0.703726
   95% expected band : 0.703726 < r < 0.703726
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1005908337.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-10675963.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1199784392.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-128749266.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1340875837.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-138994344.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-139653860.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1401553906.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1447243200.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1514050342.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-154869928.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1548840197.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-158165799.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1725165165.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1796947650.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1805532803.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1883174620.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-2024351047.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-2031034615.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-203180544.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-2064147242.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-247242889.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-26535082.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-310360164.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-332490539.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-374566935.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-411345572.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-46602093.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-53269842.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-569081793.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-642129435.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-675804384.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-741721632.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-761615534.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-773218654.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-785962080.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-802384764.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-812116690.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-827512877.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-836533938.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-866442513.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-890292054.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-917979490.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.1015206005.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.1024671665.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.1068202560.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.1080982236.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.1108008609.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.1120050445.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.1132153736.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1150975541.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1171659489.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.122833672.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1321149816.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1343939540.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.137600430.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1390609544.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1499636296.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1527210422.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.160741460.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1713467471.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1749368637.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.17586080.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1863523254.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1889885524.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1894869626.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1920369486.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1939575179.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1941233338.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1981017012.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1996418281.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.2007386206.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.207362059.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.210517825.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.2134790072.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.2135172539.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.238542782.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.269822879.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.328739356.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.346362576.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.375381051.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.382698875.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.427331406.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.502603959.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.604424291.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.62277233.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.66580125.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.669310040.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.674066810.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.699545126.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.739533715.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.743255523.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.772202009.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.782444729.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.808371815.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.838922582.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.874782632.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.887443465.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.918150093.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.972385179.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1887346722
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19926 +/- 0.00332431 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.19926 @ 95%CL (1 toyMC)
median expected limit: r < 1.19926 @ 95%CL (1 toyMC)
   68% expected band : 1.19926 < r < 1.19926
   95% expected band : 1.19926 < r < 1.19926
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 453317362
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05599 +/- 0.00306456 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05599 @ 95%CL (1 toyMC)
median expected limit: r < 1.05599 @ 95%CL (1 toyMC)
   68% expected band : 1.05599 < r < 1.05599
   95% expected band : 1.05599 < r < 1.05599
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 849412583
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.77039 +/- 0.00286729 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.77039 @ 95%CL (1 toyMC)
median expected limit: r < 0.77039 @ 95%CL (1 toyMC)
   68% expected band : 0.77039 < r < 0.77039
   95% expected band : 0.77039 < r < 0.77039
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1123043085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.924165 +/- 0.00300277 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.924165 @ 95%CL (1 toyMC)
median expected limit: r < 0.924165 @ 95%CL (1 toyMC)
   68% expected band : 0.924165 < r < 0.924165
   95% expected band : 0.924165 < r < 0.924165
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1759695264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2218 +/- 0.00303074 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.2218 @ 95%CL (1 toyMC)
median expected limit: r < 1.2218 @ 95%CL (1 toyMC)
   68% expected band : 1.2218 < r < 1.2218
   95% expected band : 1.2218 < r < 1.2218
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -925226924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1972 +/- 0.00369911 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.1972 @ 95%CL (1 toyMC)
median expected limit: r < 1.1972 @ 95%CL (1 toyMC)
   68% expected band : 1.1972 < r < 1.1972
   95% expected band : 1.1972 < r < 1.1972
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 894856590
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.801368 +/- 0.00318966 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.801368 @ 95%CL (1 toyMC)
median expected limit: r < 0.801368 @ 95%CL (1 toyMC)
   68% expected band : 0.801368 < r < 0.801368
   95% expected band : 0.801368 < r < 0.801368
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 145800750
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.875571 +/- 0.00383021 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.875571 @ 95%CL (1 toyMC)
median expected limit: r < 0.875571 @ 95%CL (1 toyMC)
   68% expected band : 0.875571 < r < 0.875571
   95% expected band : 0.875571 < r < 0.875571
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 159572628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.724631 +/- 0.00321075 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.724631 @ 95%CL (1 toyMC)
median expected limit: r < 0.724631 @ 95%CL (1 toyMC)
   68% expected band : 0.724631 < r < 0.724631
   95% expected band : 0.724631 < r < 0.724631
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -351893770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21098 +/- 0.00341362 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.21098 @ 95%CL (1 toyMC)
median expected limit: r < 1.21098 @ 95%CL (1 toyMC)
   68% expected band : 1.21098 < r < 1.21098
   95% expected band : 1.21098 < r < 1.21098
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1101156124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21277 +/- 0.00303016 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.21277 @ 95%CL (1 toyMC)
median expected limit: r < 1.21277 @ 95%CL (1 toyMC)
   68% expected band : 1.21277 < r < 1.21277
   95% expected band : 1.21277 < r < 1.21277
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2048041098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19426 +/- 0.00391643 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.19426 @ 95%CL (1 toyMC)
median expected limit: r < 1.19426 @ 95%CL (1 toyMC)
   68% expected band : 1.19426 < r < 1.19426
   95% expected band : 1.19426 < r < 1.19426
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 232773398
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.936149 +/- 0.00389474 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.936149 @ 95%CL (1 toyMC)
median expected limit: r < 0.936149 @ 95%CL (1 toyMC)
   68% expected band : 0.936149 < r < 0.936149
   95% expected band : 0.936149 < r < 0.936149
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1633340924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.685943 +/- 0.00299075 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.685943 @ 95%CL (1 toyMC)
median expected limit: r < 0.685943 @ 95%CL (1 toyMC)
   68% expected band : 0.685943 < r < 0.685943
   95% expected band : 0.685943 < r < 0.685943
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -918769941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.911794 +/- 0.00328567 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.911794 @ 95%CL (1 toyMC)
median expected limit: r < 0.911794 @ 95%CL (1 toyMC)
   68% expected band : 0.911794 < r < 0.911794
   95% expected band : 0.911794 < r < 0.911794
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -908833170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.772282 +/- 0.00420214 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.772282 @ 95%CL (1 toyMC)
median expected limit: r < 0.772282 @ 95%CL (1 toyMC)
   68% expected band : 0.772282 < r < 0.772282
   95% expected band : 0.772282 < r < 0.772282
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -791478157
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74918 +/- 0.00308909 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.74918 @ 95%CL (1 toyMC)
median expected limit: r < 1.74918 @ 95%CL (1 toyMC)
   68% expected band : 1.74918 < r < 1.74918
   95% expected band : 1.74918 < r < 1.74918
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1891760301
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38304 +/- 0.00311424 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.38304 @ 95%CL (1 toyMC)
median expected limit: r < 1.38304 @ 95%CL (1 toyMC)
   68% expected band : 1.38304 < r < 1.38304
   95% expected band : 1.38304 < r < 1.38304
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1435045631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.635626 +/- 0.00339419 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.635626 @ 95%CL (1 toyMC)
median expected limit: r < 0.635626 @ 95%CL (1 toyMC)
   68% expected band : 0.635626 < r < 0.635626
   95% expected band : 0.635626 < r < 0.635626
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1866747679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38461 +/- 0.00385606 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.38461 @ 95%CL (1 toyMC)
median expected limit: r < 1.38461 @ 95%CL (1 toyMC)
   68% expected band : 1.38461 < r < 1.38461
   95% expected band : 1.38461 < r < 1.38461
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1090352192
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24917 +/- 0.00341408 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.24917 @ 95%CL (1 toyMC)
median expected limit: r < 1.24917 @ 95%CL (1 toyMC)
   68% expected band : 1.24917 < r < 1.24917
   95% expected band : 1.24917 < r < 1.24917
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1051118473
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.915218 +/- 0.00400227 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.915218 @ 95%CL (1 toyMC)
median expected limit: r < 0.915218 @ 95%CL (1 toyMC)
   68% expected band : 0.915218 < r < 0.915218
   95% expected band : 0.915218 < r < 0.915218
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 80016606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18039 +/- 0.00364886 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.18039 @ 95%CL (1 toyMC)
median expected limit: r < 1.18039 @ 95%CL (1 toyMC)
   68% expected band : 1.18039 < r < 1.18039
   95% expected band : 1.18039 < r < 1.18039
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 388124059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.860773 +/- 0.00303639 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.860773 @ 95%CL (1 toyMC)
median expected limit: r < 0.860773 @ 95%CL (1 toyMC)
   68% expected band : 0.860773 < r < 0.860773
   95% expected band : 0.860773 < r < 0.860773
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 851589419
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29229 +/- 0.00424733 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.29229 @ 95%CL (1 toyMC)
median expected limit: r < 1.29229 @ 95%CL (1 toyMC)
   68% expected band : 1.29229 < r < 1.29229
   95% expected band : 1.29229 < r < 1.29229
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1519636945
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.66013 +/- 0.00395893 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.66013 @ 95%CL (1 toyMC)
median expected limit: r < 0.66013 @ 95%CL (1 toyMC)
   68% expected band : 0.66013 < r < 0.66013
   95% expected band : 0.66013 < r < 0.66013
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -466160961
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.761766 +/- 0.00383161 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.761766 @ 95%CL (1 toyMC)
median expected limit: r < 0.761766 @ 95%CL (1 toyMC)
   68% expected band : 0.761766 < r < 0.761766
   95% expected band : 0.761766 < r < 0.761766
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1358468349
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.891459 +/- 0.00265146 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.891459 @ 95%CL (1 toyMC)
median expected limit: r < 0.891459 @ 95%CL (1 toyMC)
   68% expected band : 0.891459 < r < 0.891459
   95% expected band : 0.891459 < r < 0.891459
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 925129070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.70017 +/- 0.00274055 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.70017 @ 95%CL (1 toyMC)
median expected limit: r < 0.70017 @ 95%CL (1 toyMC)
   68% expected band : 0.70017 < r < 0.70017
   95% expected band : 0.70017 < r < 0.70017
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 204306784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.947734 +/- 0.00316124 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.947734 @ 95%CL (1 toyMC)
median expected limit: r < 0.947734 @ 95%CL (1 toyMC)
   68% expected band : 0.947734 < r < 0.947734
   95% expected band : 0.947734 < r < 0.947734
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1804967206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10595 +/- 0.00372998 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.10595 @ 95%CL (1 toyMC)
median expected limit: r < 1.10595 @ 95%CL (1 toyMC)
   68% expected band : 1.10595 < r < 1.10595
   95% expected band : 1.10595 < r < 1.10595
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1350827339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03538 +/- 0.00290154 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03538 @ 95%CL (1 toyMC)
median expected limit: r < 1.03538 @ 95%CL (1 toyMC)
   68% expected band : 1.03538 < r < 1.03538
   95% expected band : 1.03538 < r < 1.03538
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1464961658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.82005 +/- 0.00368192 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.82005 @ 95%CL (1 toyMC)
median expected limit: r < 0.82005 @ 95%CL (1 toyMC)
   68% expected band : 0.82005 < r < 0.82005
   95% expected band : 0.82005 < r < 0.82005
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1492637085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30242 +/- 0.00390188 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.30242 @ 95%CL (1 toyMC)
median expected limit: r < 1.30242 @ 95%CL (1 toyMC)
   68% expected band : 1.30242 < r < 1.30242
   95% expected band : 1.30242 < r < 1.30242
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1091329051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.964474 +/- 0.00306227 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.964474 @ 95%CL (1 toyMC)
median expected limit: r < 0.964474 @ 95%CL (1 toyMC)
   68% expected band : 0.964474 < r < 0.964474
   95% expected band : 0.964474 < r < 0.964474
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1595184387
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3189 +/- 0.00330347 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.3189 @ 95%CL (1 toyMC)
median expected limit: r < 1.3189 @ 95%CL (1 toyMC)
   68% expected band : 1.3189 < r < 1.3189
   95% expected band : 1.3189 < r < 1.3189
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -631589726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.843 +/- 0.00373449 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.843 @ 95%CL (1 toyMC)
median expected limit: r < 0.843 @ 95%CL (1 toyMC)
   68% expected band : 0.843 < r < 0.843
   95% expected band : 0.843 < r < 0.843
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2118488334
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1921 +/- 0.00375428 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1921 @ 95%CL (1 toyMC)
median expected limit: r < 1.1921 @ 95%CL (1 toyMC)
   68% expected band : 1.1921 < r < 1.1921
   95% expected band : 1.1921 < r < 1.1921
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -895675793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42818 +/- 0.00381561 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.42818 @ 95%CL (1 toyMC)
median expected limit: r < 1.42818 @ 95%CL (1 toyMC)
   68% expected band : 1.42818 < r < 1.42818
   95% expected band : 1.42818 < r < 1.42818
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1083342592
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.735534 +/- 0.00372708 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.735534 @ 95%CL (1 toyMC)
median expected limit: r < 0.735534 @ 95%CL (1 toyMC)
   68% expected band : 0.735534 < r < 0.735534
   95% expected band : 0.735534 < r < 0.735534
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -375357539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.928643 +/- 0.00276343 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.928643 @ 95%CL (1 toyMC)
median expected limit: r < 0.928643 @ 95%CL (1 toyMC)
   68% expected band : 0.928643 < r < 0.928643
   95% expected band : 0.928643 < r < 0.928643
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1433560646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.95074 +/- 0.00342355 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.95074 @ 95%CL (1 toyMC)
median expected limit: r < 0.95074 @ 95%CL (1 toyMC)
   68% expected band : 0.95074 < r < 0.95074
   95% expected band : 0.95074 < r < 0.95074
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1931181608
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51059 +/- 0.00436245 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.51059 @ 95%CL (1 toyMC)
median expected limit: r < 1.51059 @ 95%CL (1 toyMC)
   68% expected band : 1.51059 < r < 1.51059
   95% expected band : 1.51059 < r < 1.51059
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1363609284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.998176 +/- 0.0039861 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.998176 @ 95%CL (1 toyMC)
median expected limit: r < 0.998176 @ 95%CL (1 toyMC)
   68% expected band : 0.998176 < r < 0.998176
   95% expected band : 0.998176 < r < 0.998176
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1519995046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19079 +/- 0.00355749 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.19079 @ 95%CL (1 toyMC)
median expected limit: r < 1.19079 @ 95%CL (1 toyMC)
   68% expected band : 1.19079 < r < 1.19079
   95% expected band : 1.19079 < r < 1.19079
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1757285438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26425 +/- 0.0036282 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26425 @ 95%CL (1 toyMC)
median expected limit: r < 1.26425 @ 95%CL (1 toyMC)
   68% expected band : 1.26425 < r < 1.26425
   95% expected band : 1.26425 < r < 1.26425
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1117645773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04439 +/- 0.00337666 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04439 @ 95%CL (1 toyMC)
median expected limit: r < 1.04439 @ 95%CL (1 toyMC)
   68% expected band : 1.04439 < r < 1.04439
   95% expected band : 1.04439 < r < 1.04439
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1066571887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03325 +/- 0.00300164 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03325 @ 95%CL (1 toyMC)
median expected limit: r < 1.03325 @ 95%CL (1 toyMC)
   68% expected band : 1.03325 < r < 1.03325
   95% expected band : 1.03325 < r < 1.03325
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1689433765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39656 +/- 0.00405963 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.39656 @ 95%CL (1 toyMC)
median expected limit: r < 1.39656 @ 95%CL (1 toyMC)
   68% expected band : 1.39656 < r < 1.39656
   95% expected band : 1.39656 < r < 1.39656
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1527485671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.774696 +/- 0.00317763 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.774696 @ 95%CL (1 toyMC)
median expected limit: r < 0.774696 @ 95%CL (1 toyMC)
   68% expected band : 0.774696 < r < 0.774696
   95% expected band : 0.774696 < r < 0.774696
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 577577984
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.670523 +/- 0.00296728 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.670523 @ 95%CL (1 toyMC)
median expected limit: r < 0.670523 @ 95%CL (1 toyMC)
   68% expected band : 0.670523 < r < 0.670523
   95% expected band : 0.670523 < r < 0.670523
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1972410583
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.720358 +/- 0.00319889 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.720358 @ 95%CL (1 toyMC)
median expected limit: r < 0.720358 @ 95%CL (1 toyMC)
   68% expected band : 0.720358 < r < 0.720358
   95% expected band : 0.720358 < r < 0.720358
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 623698692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.976617 +/- 0.00326747 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.976617 @ 95%CL (1 toyMC)
median expected limit: r < 0.976617 @ 95%CL (1 toyMC)
   68% expected band : 0.976617 < r < 0.976617
   95% expected band : 0.976617 < r < 0.976617
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -807227674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59083 +/- 0.00366028 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.59083 @ 95%CL (1 toyMC)
median expected limit: r < 1.59083 @ 95%CL (1 toyMC)
   68% expected band : 1.59083 < r < 1.59083
   95% expected band : 1.59083 < r < 1.59083
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -367489856
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15896 +/- 0.00346657 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.15896 @ 95%CL (1 toyMC)
median expected limit: r < 1.15896 @ 95%CL (1 toyMC)
   68% expected band : 1.15896 < r < 1.15896
   95% expected band : 1.15896 < r < 1.15896
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -524898726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.909701 +/- 0.0035941 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.909701 @ 95%CL (1 toyMC)
median expected limit: r < 0.909701 @ 95%CL (1 toyMC)
   68% expected band : 0.909701 < r < 0.909701
   95% expected band : 0.909701 < r < 0.909701
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -624210884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.87849 +/- 0.00351156 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.87849 @ 95%CL (1 toyMC)
median expected limit: r < 0.87849 @ 95%CL (1 toyMC)
   68% expected band : 0.87849 < r < 0.87849
   95% expected band : 0.87849 < r < 0.87849
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1679036431
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.88371 +/- 0.00363779 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.88371 @ 95%CL (1 toyMC)
median expected limit: r < 1.88371 @ 95%CL (1 toyMC)
   68% expected band : 1.88371 < r < 1.88371
   95% expected band : 1.88371 < r < 1.88371
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 203244478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.726863 +/- 0.00362594 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.726863 @ 95%CL (1 toyMC)
median expected limit: r < 0.726863 @ 95%CL (1 toyMC)
   68% expected band : 0.726863 < r < 0.726863
   95% expected band : 0.726863 < r < 0.726863
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2137259789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.750477 +/- 0.00389603 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.750477 @ 95%CL (1 toyMC)
median expected limit: r < 0.750477 @ 95%CL (1 toyMC)
   68% expected band : 0.750477 < r < 0.750477
   95% expected band : 0.750477 < r < 0.750477
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2124538437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49713 +/- 0.00316672 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.49713 @ 95%CL (1 toyMC)
median expected limit: r < 1.49713 @ 95%CL (1 toyMC)
   68% expected band : 1.49713 < r < 1.49713
   95% expected band : 1.49713 < r < 1.49713
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1614589758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.73669 +/- 0.00362278 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.73669 @ 95%CL (1 toyMC)
median expected limit: r < 0.73669 @ 95%CL (1 toyMC)
   68% expected band : 0.73669 < r < 0.73669
   95% expected band : 0.73669 < r < 0.73669
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1460307368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.910169 +/- 0.00372051 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.910169 @ 95%CL (1 toyMC)
median expected limit: r < 0.910169 @ 95%CL (1 toyMC)
   68% expected band : 0.910169 < r < 0.910169
   95% expected band : 0.910169 < r < 0.910169
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1976602713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.78457 +/- 0.00349916 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.78457 @ 95%CL (1 toyMC)
median expected limit: r < 0.78457 @ 95%CL (1 toyMC)
   68% expected band : 0.78457 < r < 0.78457
   95% expected band : 0.78457 < r < 0.78457
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1439640172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.854302 +/- 0.0044428 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 0.854302 @ 95%CL (1 toyMC)
median expected limit: r < 0.854302 @ 95%CL (1 toyMC)
   68% expected band : 0.854302 < r < 0.854302
   95% expected band : 0.854302 < r < 0.854302
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1721356243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.750774 +/- 0.00315784 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.750774 @ 95%CL (1 toyMC)
median expected limit: r < 0.750774 @ 95%CL (1 toyMC)
   68% expected band : 0.750774 < r < 0.750774
   95% expected band : 0.750774 < r < 0.750774
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1773123940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00426 +/- 0.00367531 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.00426 @ 95%CL (1 toyMC)
median expected limit: r < 1.00426 @ 95%CL (1 toyMC)
   68% expected band : 1.00426 < r < 1.00426
   95% expected band : 1.00426 < r < 1.00426
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1782132903
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.702224 +/- 0.00351207 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.702224 @ 95%CL (1 toyMC)
median expected limit: r < 0.702224 @ 95%CL (1 toyMC)
   68% expected band : 0.702224 < r < 0.702224
   95% expected band : 0.702224 < r < 0.702224
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -694951807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.733715 +/- 0.00413332 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.733715 @ 95%CL (1 toyMC)
median expected limit: r < 0.733715 @ 95%CL (1 toyMC)
   68% expected band : 0.733715 < r < 0.733715
   95% expected band : 0.733715 < r < 0.733715
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 606377512
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.872627 +/- 0.00308081 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.872627 @ 95%CL (1 toyMC)
median expected limit: r < 0.872627 @ 95%CL (1 toyMC)
   68% expected band : 0.872627 < r < 0.872627
   95% expected band : 0.872627 < r < 0.872627
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1003475601
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.809349 +/- 0.00370494 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.809349 @ 95%CL (1 toyMC)
median expected limit: r < 0.809349 @ 95%CL (1 toyMC)
   68% expected band : 0.809349 < r < 0.809349
   95% expected band : 0.809349 < r < 0.809349
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1673060794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.47421 +/- 0.00364135 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.47421 @ 95%CL (1 toyMC)
median expected limit: r < 1.47421 @ 95%CL (1 toyMC)
   68% expected band : 1.47421 < r < 1.47421
   95% expected band : 1.47421 < r < 1.47421
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1842297805
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.714301 +/- 0.00415554 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.714301 @ 95%CL (1 toyMC)
median expected limit: r < 0.714301 @ 95%CL (1 toyMC)
   68% expected band : 0.714301 < r < 0.714301
   95% expected band : 0.714301 < r < 0.714301
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -14308118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.744228 +/- 0.00350277 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.744228 @ 95%CL (1 toyMC)
median expected limit: r < 0.744228 @ 95%CL (1 toyMC)
   68% expected band : 0.744228 < r < 0.744228
   95% expected band : 0.744228 < r < 0.744228
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1687617705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.786228 +/- 0.00314234 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.786228 @ 95%CL (1 toyMC)
median expected limit: r < 0.786228 @ 95%CL (1 toyMC)
   68% expected band : 0.786228 < r < 0.786228
   95% expected band : 0.786228 < r < 0.786228
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 904221615
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11701 +/- 0.00274402 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.11701 @ 95%CL (1 toyMC)
median expected limit: r < 1.11701 @ 95%CL (1 toyMC)
   68% expected band : 1.11701 < r < 1.11701
   95% expected band : 1.11701 < r < 1.11701
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -145027681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.809965 +/- 0.00360168 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.809965 @ 95%CL (1 toyMC)
median expected limit: r < 0.809965 @ 95%CL (1 toyMC)
   68% expected band : 0.809965 < r < 0.809965
   95% expected band : 0.809965 < r < 0.809965
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 241892476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60973 +/- 0.00348102 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.60973 @ 95%CL (1 toyMC)
median expected limit: r < 1.60973 @ 95%CL (1 toyMC)
   68% expected band : 1.60973 < r < 1.60973
   95% expected band : 1.60973 < r < 1.60973
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1186339768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.935891 +/- 0.00360327 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.935891 @ 95%CL (1 toyMC)
median expected limit: r < 0.935891 @ 95%CL (1 toyMC)
   68% expected band : 0.935891 < r < 0.935891
   95% expected band : 0.935891 < r < 0.935891
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 902233369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.816163 +/- 0.00373849 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.816163 @ 95%CL (1 toyMC)
median expected limit: r < 0.816163 @ 95%CL (1 toyMC)
   68% expected band : 0.816163 < r < 0.816163
   95% expected band : 0.816163 < r < 0.816163
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1535570880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18763 +/- 0.00337984 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.18763 @ 95%CL (1 toyMC)
median expected limit: r < 1.18763 @ 95%CL (1 toyMC)
   68% expected band : 1.18763 < r < 1.18763
   95% expected band : 1.18763 < r < 1.18763
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -959319459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01083 +/- 0.00381711 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.01083 @ 95%CL (1 toyMC)
median expected limit: r < 1.01083 @ 95%CL (1 toyMC)
   68% expected band : 1.01083 < r < 1.01083
   95% expected band : 1.01083 < r < 1.01083
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1124037973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13682 +/- 0.00281822 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.13682 @ 95%CL (1 toyMC)
median expected limit: r < 1.13682 @ 95%CL (1 toyMC)
   68% expected band : 1.13682 < r < 1.13682
   95% expected band : 1.13682 < r < 1.13682
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2102956208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.748607 +/- 0.00376767 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.748607 @ 95%CL (1 toyMC)
median expected limit: r < 0.748607 @ 95%CL (1 toyMC)
   68% expected band : 0.748607 < r < 0.748607
   95% expected band : 0.748607 < r < 0.748607
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1618438257
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.75626 +/- 0.00332853 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.75626 @ 95%CL (1 toyMC)
median expected limit: r < 0.75626 @ 95%CL (1 toyMC)
   68% expected band : 0.75626 < r < 0.75626
   95% expected band : 0.75626 < r < 0.75626
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 358152396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.781677 +/- 0.00310965 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.781677 @ 95%CL (1 toyMC)
median expected limit: r < 0.781677 @ 95%CL (1 toyMC)
   68% expected band : 0.781677 < r < 0.781677
   95% expected band : 0.781677 < r < 0.781677
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 137943719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43327 +/- 0.00292861 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.43327 @ 95%CL (1 toyMC)
median expected limit: r < 1.43327 @ 95%CL (1 toyMC)
   68% expected band : 1.43327 < r < 1.43327
   95% expected band : 1.43327 < r < 1.43327
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -27719275
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08109 +/- 0.00389184 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.08109 @ 95%CL (1 toyMC)
median expected limit: r < 1.08109 @ 95%CL (1 toyMC)
   68% expected band : 1.08109 < r < 1.08109
   95% expected band : 1.08109 < r < 1.08109
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2042092413
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.806939 +/- 0.00339609 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.806939 @ 95%CL (1 toyMC)
median expected limit: r < 0.806939 @ 95%CL (1 toyMC)
   68% expected band : 0.806939 < r < 0.806939
   95% expected band : 0.806939 < r < 0.806939
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1090156540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.820624 +/- 0.00280546 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.820624 @ 95%CL (1 toyMC)
median expected limit: r < 0.820624 @ 95%CL (1 toyMC)
   68% expected band : 0.820624 < r < 0.820624
   95% expected band : 0.820624 < r < 0.820624
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -705642976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.980698 +/- 0.00336502 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.980698 @ 95%CL (1 toyMC)
median expected limit: r < 0.980698 @ 95%CL (1 toyMC)
   68% expected band : 0.980698 < r < 0.980698
   95% expected band : 0.980698 < r < 0.980698
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1839344630
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.718919 +/- 0.00330579 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.718919 @ 95%CL (1 toyMC)
median expected limit: r < 0.718919 @ 95%CL (1 toyMC)
   68% expected band : 0.718919 < r < 0.718919
   95% expected band : 0.718919 < r < 0.718919
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1620306517
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.999758 +/- 0.00314147 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.999758 @ 95%CL (1 toyMC)
median expected limit: r < 0.999758 @ 95%CL (1 toyMC)
   68% expected band : 0.999758 < r < 0.999758
   95% expected band : 0.999758 < r < 0.999758
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 878514002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.981202 +/- 0.00395054 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.981202 @ 95%CL (1 toyMC)
median expected limit: r < 0.981202 @ 95%CL (1 toyMC)
   68% expected band : 0.981202 < r < 0.981202
   95% expected band : 0.981202 < r < 0.981202
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 749478777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00398 +/- 0.0031978 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.00398 @ 95%CL (1 toyMC)
median expected limit: r < 1.00398 @ 95%CL (1 toyMC)
   68% expected band : 1.00398 < r < 1.00398
   95% expected band : 1.00398 < r < 1.00398
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1888880189
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1204 +/- 0.00264373 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.1204 @ 95%CL (1 toyMC)
median expected limit: r < 1.1204 @ 95%CL (1 toyMC)
   68% expected band : 1.1204 < r < 1.1204
   95% expected band : 1.1204 < r < 1.1204
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 202808508
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.956609 +/- 0.00318566 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.956609 @ 95%CL (1 toyMC)
median expected limit: r < 0.956609 @ 95%CL (1 toyMC)
   68% expected band : 0.956609 < r < 0.956609
   95% expected band : 0.956609 < r < 0.956609
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1179132948
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02773 +/- 0.00379418 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.02773 @ 95%CL (1 toyMC)
median expected limit: r < 1.02773 @ 95%CL (1 toyMC)
   68% expected band : 1.02773 < r < 1.02773
   95% expected band : 1.02773 < r < 1.02773
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -434894133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.991812 +/- 0.00320512 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.991812 @ 95%CL (1 toyMC)
median expected limit: r < 0.991812 @ 95%CL (1 toyMC)
   68% expected band : 0.991812 < r < 0.991812
   95% expected band : 0.991812 < r < 0.991812
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1394503594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05593 +/- 0.00352271 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05593 @ 95%CL (1 toyMC)
median expected limit: r < 1.05593 @ 95%CL (1 toyMC)
   68% expected band : 1.05593 < r < 1.05593
   95% expected band : 1.05593 < r < 1.05593
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1083342592.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1101156124.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1123043085.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1124037973.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1179132948.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1358468349.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-14308118.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-145027681.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1464961658.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1595184387.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1614589758.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1633340924.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1679036431.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1721356243.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1757285438.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1759695264.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1773123940.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1782132903.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1804967206.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1866747679.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1888880189.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1972410583.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1976602713.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-2048041098.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-2102956208.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-2118488334.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-2124538437.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-27719275.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-351893770.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-367489856.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-375357539.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-434894133.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-466160961.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-524898726.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-624210884.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-631589726.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-694951807.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-705642976.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-791478157.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-807227674.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-895675793.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-908833170.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-918769941.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-925226924.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-959319459.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.1003475601.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.1051118473.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.1066571887.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.1090156540.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.1090352192.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1091329051.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1117645773.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1186339768.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1350827339.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1363609284.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.137943719.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1394503594.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1433560646.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1435045631.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1439640172.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.145800750.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1460307368.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1492637085.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1519636945.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1519995046.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1527485671.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1535570880.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.159572628.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1618438257.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1620306517.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1673060794.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1687617705.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1689433765.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1839344630.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.1842297805.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.1887346722.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.1891760301.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.1931181608.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.202808508.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.203244478.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.2042092413.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.204306784.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.2137259789.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.232773398.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.241892476.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.358152396.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.388124059.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.453317362.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.577577984.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.606377512.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.623698692.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.749478777.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.80016606.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.849412583.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.851589419.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.878514002.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.894856590.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.902233369.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.904221615.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.925129070.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1781240683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78064 +/- 0.00459671 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.78064 @ 95%CL (1 toyMC)
median expected limit: r < 1.78064 @ 95%CL (1 toyMC)
   68% expected band : 1.78064 < r < 1.78064
   95% expected band : 1.78064 < r < 1.78064
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1043873219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21292 +/- 0.00518236 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.21292 @ 95%CL (1 toyMC)
median expected limit: r < 1.21292 @ 95%CL (1 toyMC)
   68% expected band : 1.21292 < r < 1.21292
   95% expected band : 1.21292 < r < 1.21292
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -277151232
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.942735 +/- 0.00388139 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.942735 @ 95%CL (1 toyMC)
median expected limit: r < 0.942735 @ 95%CL (1 toyMC)
   68% expected band : 0.942735 < r < 0.942735
   95% expected band : 0.942735 < r < 0.942735
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2095313764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46047 +/- 0.00460758 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.46047 @ 95%CL (1 toyMC)
median expected limit: r < 1.46047 @ 95%CL (1 toyMC)
   68% expected band : 1.46047 < r < 1.46047
   95% expected band : 1.46047 < r < 1.46047
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1613416366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72736 +/- 0.00398258 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.72736 @ 95%CL (1 toyMC)
median expected limit: r < 1.72736 @ 95%CL (1 toyMC)
   68% expected band : 1.72736 < r < 1.72736
   95% expected band : 1.72736 < r < 1.72736
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2130306878
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04177 +/- 0.00446883 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04177 @ 95%CL (1 toyMC)
median expected limit: r < 1.04177 @ 95%CL (1 toyMC)
   68% expected band : 1.04177 < r < 1.04177
   95% expected band : 1.04177 < r < 1.04177
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1644982332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69024 +/- 0.0046917 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.69024 @ 95%CL (1 toyMC)
median expected limit: r < 1.69024 @ 95%CL (1 toyMC)
   68% expected band : 1.69024 < r < 1.69024
   95% expected band : 1.69024 < r < 1.69024
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2060126855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.87395 +/- 0.00380209 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.87395 @ 95%CL (1 toyMC)
median expected limit: r < 0.87395 @ 95%CL (1 toyMC)
   68% expected band : 0.87395 < r < 0.87395
   95% expected band : 0.87395 < r < 0.87395
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1283823066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.997797 +/- 0.00497549 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.997797 @ 95%CL (1 toyMC)
median expected limit: r < 0.997797 @ 95%CL (1 toyMC)
   68% expected band : 0.997797 < r < 0.997797
   95% expected band : 0.997797 < r < 0.997797
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1150532238
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02263 +/- 0.00415374 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.02263 @ 95%CL (1 toyMC)
median expected limit: r < 1.02263 @ 95%CL (1 toyMC)
   68% expected band : 1.02263 < r < 1.02263
   95% expected band : 1.02263 < r < 1.02263
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2147220237
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24069 +/- 0.00516496 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.24069 @ 95%CL (1 toyMC)
median expected limit: r < 1.24069 @ 95%CL (1 toyMC)
   68% expected band : 1.24069 < r < 1.24069
   95% expected band : 1.24069 < r < 1.24069
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1654071861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17209 +/- 0.0049107 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.17209 @ 95%CL (1 toyMC)
median expected limit: r < 1.17209 @ 95%CL (1 toyMC)
   68% expected band : 1.17209 < r < 1.17209
   95% expected band : 1.17209 < r < 1.17209
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -109839582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08846 +/- 0.00345629 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.08846 @ 95%CL (1 toyMC)
median expected limit: r < 1.08846 @ 95%CL (1 toyMC)
   68% expected band : 1.08846 < r < 1.08846
   95% expected band : 1.08846 < r < 1.08846
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1333602163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.882627 +/- 0.00467366 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.882627 @ 95%CL (1 toyMC)
median expected limit: r < 0.882627 @ 95%CL (1 toyMC)
   68% expected band : 0.882627 < r < 0.882627
   95% expected band : 0.882627 < r < 0.882627
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -23554524
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.914749 +/- 0.00377716 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.914749 @ 95%CL (1 toyMC)
median expected limit: r < 0.914749 @ 95%CL (1 toyMC)
   68% expected band : 0.914749 < r < 0.914749
   95% expected band : 0.914749 < r < 0.914749
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1306586060
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.843339 +/- 0.0035302 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.843339 @ 95%CL (1 toyMC)
median expected limit: r < 0.843339 @ 95%CL (1 toyMC)
   68% expected band : 0.843339 < r < 0.843339
   95% expected band : 0.843339 < r < 0.843339
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 958898912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0572 +/- 0.00373557 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0572 @ 95%CL (1 toyMC)
median expected limit: r < 1.0572 @ 95%CL (1 toyMC)
   68% expected band : 1.0572 < r < 1.0572
   95% expected band : 1.0572 < r < 1.0572
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1516837129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.954932 +/- 0.00310246 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.954932 @ 95%CL (1 toyMC)
median expected limit: r < 0.954932 @ 95%CL (1 toyMC)
   68% expected band : 0.954932 < r < 0.954932
   95% expected band : 0.954932 < r < 0.954932
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1321723052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05758 +/- 0.00447585 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.05758 @ 95%CL (1 toyMC)
median expected limit: r < 1.05758 @ 95%CL (1 toyMC)
   68% expected band : 1.05758 < r < 1.05758
   95% expected band : 1.05758 < r < 1.05758
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1927805080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1457 +/- 0.00485055 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1457 @ 95%CL (1 toyMC)
median expected limit: r < 1.1457 @ 95%CL (1 toyMC)
   68% expected band : 1.1457 < r < 1.1457
   95% expected band : 1.1457 < r < 1.1457
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 872773687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78035 +/- 0.00460176 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.78035 @ 95%CL (1 toyMC)
median expected limit: r < 1.78035 @ 95%CL (1 toyMC)
   68% expected band : 1.78035 < r < 1.78035
   95% expected band : 1.78035 < r < 1.78035
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -531041828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02773 +/- 0.00379236 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.02773 @ 95%CL (1 toyMC)
median expected limit: r < 1.02773 @ 95%CL (1 toyMC)
   68% expected band : 1.02773 < r < 1.02773
   95% expected band : 1.02773 < r < 1.02773
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -203321201
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56063 +/- 0.00451155 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.56063 @ 95%CL (1 toyMC)
median expected limit: r < 1.56063 @ 95%CL (1 toyMC)
   68% expected band : 1.56063 < r < 1.56063
   95% expected band : 1.56063 < r < 1.56063
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 495640271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.877836 +/- 0.0041795 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.877836 @ 95%CL (1 toyMC)
median expected limit: r < 0.877836 @ 95%CL (1 toyMC)
   68% expected band : 0.877836 < r < 0.877836
   95% expected band : 0.877836 < r < 0.877836
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1016781236
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.927596 +/- 0.00396943 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.927596 @ 95%CL (1 toyMC)
median expected limit: r < 0.927596 @ 95%CL (1 toyMC)
   68% expected band : 0.927596 < r < 0.927596
   95% expected band : 0.927596 < r < 0.927596
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2081004330
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.912375 +/- 0.00405416 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.912375 @ 95%CL (1 toyMC)
median expected limit: r < 0.912375 @ 95%CL (1 toyMC)
   68% expected band : 0.912375 < r < 0.912375
   95% expected band : 0.912375 < r < 0.912375
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 3991688
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17471 +/- 0.00478036 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.17471 @ 95%CL (1 toyMC)
median expected limit: r < 1.17471 @ 95%CL (1 toyMC)
   68% expected band : 1.17471 < r < 1.17471
   95% expected band : 1.17471 < r < 1.17471
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -980676088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.820599 +/- 0.00456911 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.820599 @ 95%CL (1 toyMC)
median expected limit: r < 0.820599 @ 95%CL (1 toyMC)
   68% expected band : 0.820599 < r < 0.820599
   95% expected band : 0.820599 < r < 0.820599
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1917598056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27766 +/- 0.00416531 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.27766 @ 95%CL (1 toyMC)
median expected limit: r < 1.27766 @ 95%CL (1 toyMC)
   68% expected band : 1.27766 < r < 1.27766
   95% expected band : 1.27766 < r < 1.27766
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 868520574
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16005 +/- 0.00456536 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.16005 @ 95%CL (1 toyMC)
median expected limit: r < 1.16005 @ 95%CL (1 toyMC)
   68% expected band : 1.16005 < r < 1.16005
   95% expected band : 1.16005 < r < 1.16005
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1797171149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15331 +/- 0.00435962 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.15331 @ 95%CL (1 toyMC)
median expected limit: r < 1.15331 @ 95%CL (1 toyMC)
   68% expected band : 1.15331 < r < 1.15331
   95% expected band : 1.15331 < r < 1.15331
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 877410623
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04619 +/- 0.00440484 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04619 @ 95%CL (1 toyMC)
median expected limit: r < 1.04619 @ 95%CL (1 toyMC)
   68% expected band : 1.04619 < r < 1.04619
   95% expected band : 1.04619 < r < 1.04619
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1029508571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80356 +/- 0.00507026 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.80356 @ 95%CL (1 toyMC)
median expected limit: r < 1.80356 @ 95%CL (1 toyMC)
   68% expected band : 1.80356 < r < 1.80356
   95% expected band : 1.80356 < r < 1.80356
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 170702717
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85475 +/- 0.00432671 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.85475 @ 95%CL (1 toyMC)
median expected limit: r < 1.85475 @ 95%CL (1 toyMC)
   68% expected band : 1.85475 < r < 1.85475
   95% expected band : 1.85475 < r < 1.85475
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 882209728
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60237 +/- 0.00435047 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.60237 @ 95%CL (1 toyMC)
median expected limit: r < 1.60237 @ 95%CL (1 toyMC)
   68% expected band : 1.60237 < r < 1.60237
   95% expected band : 1.60237 < r < 1.60237
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1376759595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20048 +/- 0.00507189 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.20048 @ 95%CL (1 toyMC)
median expected limit: r < 1.20048 @ 95%CL (1 toyMC)
   68% expected band : 1.20048 < r < 1.20048
   95% expected band : 1.20048 < r < 1.20048
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 641475440
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.813901 +/- 0.00381824 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.813901 @ 95%CL (1 toyMC)
median expected limit: r < 0.813901 @ 95%CL (1 toyMC)
   68% expected band : 0.813901 < r < 0.813901
   95% expected band : 0.813901 < r < 0.813901
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 47361503
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3821 +/- 0.0046723 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.3821 @ 95%CL (1 toyMC)
median expected limit: r < 1.3821 @ 95%CL (1 toyMC)
   68% expected band : 1.3821 < r < 1.3821
   95% expected band : 1.3821 < r < 1.3821
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1586783785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01434 +/- 0.00433051 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.01434 @ 95%CL (1 toyMC)
median expected limit: r < 1.01434 @ 95%CL (1 toyMC)
   68% expected band : 1.01434 < r < 1.01434
   95% expected band : 1.01434 < r < 1.01434
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 55529535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.901164 +/- 0.00429957 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.901164 @ 95%CL (1 toyMC)
median expected limit: r < 0.901164 @ 95%CL (1 toyMC)
   68% expected band : 0.901164 < r < 0.901164
   95% expected band : 0.901164 < r < 0.901164
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 703759273
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15753 +/- 0.0046886 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.15753 @ 95%CL (1 toyMC)
median expected limit: r < 1.15753 @ 95%CL (1 toyMC)
   68% expected band : 1.15753 < r < 1.15753
   95% expected band : 1.15753 < r < 1.15753
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1458820613
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.991608 +/- 0.00398486 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.991608 @ 95%CL (1 toyMC)
median expected limit: r < 0.991608 @ 95%CL (1 toyMC)
   68% expected band : 0.991608 < r < 0.991608
   95% expected band : 0.991608 < r < 0.991608
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1931291815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35824 +/- 0.00384222 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.35824 @ 95%CL (1 toyMC)
median expected limit: r < 1.35824 @ 95%CL (1 toyMC)
   68% expected band : 1.35824 < r < 1.35824
   95% expected band : 1.35824 < r < 1.35824
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1075713220
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64942 +/- 0.00577578 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.64942 @ 95%CL (1 toyMC)
median expected limit: r < 1.64942 @ 95%CL (1 toyMC)
   68% expected band : 1.64942 < r < 1.64942
   95% expected band : 1.64942 < r < 1.64942
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1873029723
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15816 +/- 0.00312379 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.15816 @ 95%CL (1 toyMC)
median expected limit: r < 1.15816 @ 95%CL (1 toyMC)
   68% expected band : 1.15816 < r < 1.15816
   95% expected band : 1.15816 < r < 1.15816
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 555167353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.936347 +/- 0.00385106 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.936347 @ 95%CL (1 toyMC)
median expected limit: r < 0.936347 @ 95%CL (1 toyMC)
   68% expected band : 0.936347 < r < 0.936347
   95% expected band : 0.936347 < r < 0.936347
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1002308713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.8277 +/- 0.00462839 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.8277 @ 95%CL (1 toyMC)
median expected limit: r < 0.8277 @ 95%CL (1 toyMC)
   68% expected band : 0.8277 < r < 0.8277
   95% expected band : 0.8277 < r < 0.8277
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 724535996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.995834 +/- 0.00460155 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.995834 @ 95%CL (1 toyMC)
median expected limit: r < 0.995834 @ 95%CL (1 toyMC)
   68% expected band : 0.995834 < r < 0.995834
   95% expected band : 0.995834 < r < 0.995834
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 724353969
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91607 +/- 0.0052871 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.91607 @ 95%CL (1 toyMC)
median expected limit: r < 1.91607 @ 95%CL (1 toyMC)
   68% expected band : 1.91607 < r < 1.91607
   95% expected band : 1.91607 < r < 1.91607
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -803467369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10624 +/- 0.00446048 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.10624 @ 95%CL (1 toyMC)
median expected limit: r < 1.10624 @ 95%CL (1 toyMC)
   68% expected band : 1.10624 < r < 1.10624
   95% expected band : 1.10624 < r < 1.10624
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -469887607
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0869 +/- 0.00377577 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.0869 @ 95%CL (1 toyMC)
median expected limit: r < 1.0869 @ 95%CL (1 toyMC)
   68% expected band : 1.0869 < r < 1.0869
   95% expected band : 1.0869 < r < 1.0869
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 178713774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.907239 +/- 0.00463958 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.907239 @ 95%CL (1 toyMC)
median expected limit: r < 0.907239 @ 95%CL (1 toyMC)
   68% expected band : 0.907239 < r < 0.907239
   95% expected band : 0.907239 < r < 0.907239
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 10054535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.928124 +/- 0.00474022 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.928124 @ 95%CL (1 toyMC)
median expected limit: r < 0.928124 @ 95%CL (1 toyMC)
   68% expected band : 0.928124 < r < 0.928124
   95% expected band : 0.928124 < r < 0.928124
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1738927068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19925 +/- 0.00435685 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.19925 @ 95%CL (1 toyMC)
median expected limit: r < 1.19925 @ 95%CL (1 toyMC)
   68% expected band : 1.19925 < r < 1.19925
   95% expected band : 1.19925 < r < 1.19925
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1882830723
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.947364 +/- 0.00480113 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.947364 @ 95%CL (1 toyMC)
median expected limit: r < 0.947364 @ 95%CL (1 toyMC)
   68% expected band : 0.947364 < r < 0.947364
   95% expected band : 0.947364 < r < 0.947364
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1524594937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.967419 +/- 0.0049408 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.967419 @ 95%CL (1 toyMC)
median expected limit: r < 0.967419 @ 95%CL (1 toyMC)
   68% expected band : 0.967419 < r < 0.967419
   95% expected band : 0.967419 < r < 0.967419
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2040190103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.986882 +/- 0.00536959 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.986882 @ 95%CL (1 toyMC)
median expected limit: r < 0.986882 @ 95%CL (1 toyMC)
   68% expected band : 0.986882 < r < 0.986882
   95% expected band : 0.986882 < r < 0.986882
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2129436290
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.900265 +/- 0.00367811 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.900265 @ 95%CL (1 toyMC)
median expected limit: r < 0.900265 @ 95%CL (1 toyMC)
   68% expected band : 0.900265 < r < 0.900265
   95% expected band : 0.900265 < r < 0.900265
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1520636022
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.929036 +/- 0.00400477 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.929036 @ 95%CL (1 toyMC)
median expected limit: r < 0.929036 @ 95%CL (1 toyMC)
   68% expected band : 0.929036 < r < 0.929036
   95% expected band : 0.929036 < r < 0.929036
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1417337504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.980844 +/- 0.00342928 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.980844 @ 95%CL (1 toyMC)
median expected limit: r < 0.980844 @ 95%CL (1 toyMC)
   68% expected band : 0.980844 < r < 0.980844
   95% expected band : 0.980844 < r < 0.980844
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2036382216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07054 +/- 0.00406322 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.07054 @ 95%CL (1 toyMC)
median expected limit: r < 1.07054 @ 95%CL (1 toyMC)
   68% expected band : 1.07054 < r < 1.07054
   95% expected band : 1.07054 < r < 1.07054
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1778733260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.942713 +/- 0.00473452 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.942713 @ 95%CL (1 toyMC)
median expected limit: r < 0.942713 @ 95%CL (1 toyMC)
   68% expected band : 0.942713 < r < 0.942713
   95% expected band : 0.942713 < r < 0.942713
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1233301712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.871298 +/- 0.00378007 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.871298 @ 95%CL (1 toyMC)
median expected limit: r < 0.871298 @ 95%CL (1 toyMC)
   68% expected band : 0.871298 < r < 0.871298
   95% expected band : 0.871298 < r < 0.871298
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 941497314
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.19064 +/- 0.00510981 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.19064 @ 95%CL (1 toyMC)
median expected limit: r < 2.19064 @ 95%CL (1 toyMC)
   68% expected band : 2.19064 < r < 2.19064
   95% expected band : 2.19064 < r < 2.19064
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1342919523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.804144 +/- 0.0041529 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.804144 @ 95%CL (1 toyMC)
median expected limit: r < 0.804144 @ 95%CL (1 toyMC)
   68% expected band : 0.804144 < r < 0.804144
   95% expected band : 0.804144 < r < 0.804144
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 25835377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54082 +/- 0.00582891 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.54082 @ 95%CL (1 toyMC)
median expected limit: r < 1.54082 @ 95%CL (1 toyMC)
   68% expected band : 1.54082 < r < 1.54082
   95% expected band : 1.54082 < r < 1.54082
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2124765924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.929392 +/- 0.00364424 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.929392 @ 95%CL (1 toyMC)
median expected limit: r < 0.929392 @ 95%CL (1 toyMC)
   68% expected band : 0.929392 < r < 0.929392
   95% expected band : 0.929392 < r < 0.929392
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -566450764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15136 +/- 0.00491669 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.15136 @ 95%CL (1 toyMC)
median expected limit: r < 1.15136 @ 95%CL (1 toyMC)
   68% expected band : 1.15136 < r < 1.15136
   95% expected band : 1.15136 < r < 1.15136
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1824931440
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.93389 +/- 0.00524336 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.93389 @ 95%CL (1 toyMC)
median expected limit: r < 1.93389 @ 95%CL (1 toyMC)
   68% expected band : 1.93389 < r < 1.93389
   95% expected band : 1.93389 < r < 1.93389
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1795575692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.868427 +/- 0.00422109 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.868427 @ 95%CL (1 toyMC)
median expected limit: r < 0.868427 @ 95%CL (1 toyMC)
   68% expected band : 0.868427 < r < 0.868427
   95% expected band : 0.868427 < r < 0.868427
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2005177289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.992266 +/- 0.00372178 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.992266 @ 95%CL (1 toyMC)
median expected limit: r < 0.992266 @ 95%CL (1 toyMC)
   68% expected band : 0.992266 < r < 0.992266
   95% expected band : 0.992266 < r < 0.992266
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1753470852
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.985355 +/- 0.00444598 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.985355 @ 95%CL (1 toyMC)
median expected limit: r < 0.985355 @ 95%CL (1 toyMC)
   68% expected band : 0.985355 < r < 0.985355
   95% expected band : 0.985355 < r < 0.985355
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1612814865
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34544 +/- 0.00376279 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.34544 @ 95%CL (1 toyMC)
median expected limit: r < 1.34544 @ 95%CL (1 toyMC)
   68% expected band : 1.34544 < r < 1.34544
   95% expected band : 1.34544 < r < 1.34544
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -168744089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66854 +/- 0.00526701 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.66854 @ 95%CL (1 toyMC)
median expected limit: r < 1.66854 @ 95%CL (1 toyMC)
   68% expected band : 1.66854 < r < 1.66854
   95% expected band : 1.66854 < r < 1.66854
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 514141775
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.949103 +/- 0.00398433 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.949103 @ 95%CL (1 toyMC)
median expected limit: r < 0.949103 @ 95%CL (1 toyMC)
   68% expected band : 0.949103 < r < 0.949103
   95% expected band : 0.949103 < r < 0.949103
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1741554111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58064 +/- 0.00465834 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.58064 @ 95%CL (1 toyMC)
median expected limit: r < 1.58064 @ 95%CL (1 toyMC)
   68% expected band : 1.58064 < r < 1.58064
   95% expected band : 1.58064 < r < 1.58064
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1727657058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11727 +/- 0.00488881 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.11727 @ 95%CL (1 toyMC)
median expected limit: r < 1.11727 @ 95%CL (1 toyMC)
   68% expected band : 1.11727 < r < 1.11727
   95% expected band : 1.11727 < r < 1.11727
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -785352667
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.859646 +/- 0.00401615 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.859646 @ 95%CL (1 toyMC)
median expected limit: r < 0.859646 @ 95%CL (1 toyMC)
   68% expected band : 0.859646 < r < 0.859646
   95% expected band : 0.859646 < r < 0.859646
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1111584335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05788 +/- 0.00459803 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05788 @ 95%CL (1 toyMC)
median expected limit: r < 1.05788 @ 95%CL (1 toyMC)
   68% expected band : 1.05788 < r < 1.05788
   95% expected band : 1.05788 < r < 1.05788
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2000254554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.809702 +/- 0.00401305 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.809702 @ 95%CL (1 toyMC)
median expected limit: r < 0.809702 @ 95%CL (1 toyMC)
   68% expected band : 0.809702 < r < 0.809702
   95% expected band : 0.809702 < r < 0.809702
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 214602971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.951577 +/- 0.00462122 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.951577 @ 95%CL (1 toyMC)
median expected limit: r < 0.951577 @ 95%CL (1 toyMC)
   68% expected band : 0.951577 < r < 0.951577
   95% expected band : 0.951577 < r < 0.951577
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 693763127
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05106 +/- 0.00471587 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05106 @ 95%CL (1 toyMC)
median expected limit: r < 1.05106 @ 95%CL (1 toyMC)
   68% expected band : 1.05106 < r < 1.05106
   95% expected band : 1.05106 < r < 1.05106
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1600952960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.944788 +/- 0.00462715 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.944788 @ 95%CL (1 toyMC)
median expected limit: r < 0.944788 @ 95%CL (1 toyMC)
   68% expected band : 0.944788 < r < 0.944788
   95% expected band : 0.944788 < r < 0.944788
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2016699429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05057 +/- 0.00539602 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05057 @ 95%CL (1 toyMC)
median expected limit: r < 1.05057 @ 95%CL (1 toyMC)
   68% expected band : 1.05057 < r < 1.05057
   95% expected band : 1.05057 < r < 1.05057
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 798097550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.8471 +/- 0.00367227 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.8471 @ 95%CL (1 toyMC)
median expected limit: r < 0.8471 @ 95%CL (1 toyMC)
   68% expected band : 0.8471 < r < 0.8471
   95% expected band : 0.8471 < r < 0.8471
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 671940583
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.821998 +/- 0.00366063 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.821998 @ 95%CL (1 toyMC)
median expected limit: r < 0.821998 @ 95%CL (1 toyMC)
   68% expected band : 0.821998 < r < 0.821998
   95% expected band : 0.821998 < r < 0.821998
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1327659206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.859638 +/- 0.00384978 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.859638 @ 95%CL (1 toyMC)
median expected limit: r < 0.859638 @ 95%CL (1 toyMC)
   68% expected band : 0.859638 < r < 0.859638
   95% expected band : 0.859638 < r < 0.859638
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -433621731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.972271 +/- 0.00395483 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.972271 @ 95%CL (1 toyMC)
median expected limit: r < 0.972271 @ 95%CL (1 toyMC)
   68% expected band : 0.972271 < r < 0.972271
   95% expected band : 0.972271 < r < 0.972271
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1018237721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.916866 +/- 0.00408654 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.916866 @ 95%CL (1 toyMC)
median expected limit: r < 0.916866 @ 95%CL (1 toyMC)
   68% expected band : 0.916866 < r < 0.916866
   95% expected band : 0.916866 < r < 0.916866
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1710733075
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60762 +/- 0.00496042 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.60762 @ 95%CL (1 toyMC)
median expected limit: r < 1.60762 @ 95%CL (1 toyMC)
   68% expected band : 1.60762 < r < 1.60762
   95% expected band : 1.60762 < r < 1.60762
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 338929553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29274 +/- 0.0035797 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.29274 @ 95%CL (1 toyMC)
median expected limit: r < 1.29274 @ 95%CL (1 toyMC)
   68% expected band : 1.29274 < r < 1.29274
   95% expected band : 1.29274 < r < 1.29274
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -832305684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38614 +/- 0.00404649 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.38614 @ 95%CL (1 toyMC)
median expected limit: r < 1.38614 @ 95%CL (1 toyMC)
   68% expected band : 1.38614 < r < 1.38614
   95% expected band : 1.38614 < r < 1.38614
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1419141690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09466 +/- 0.00326226 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09466 @ 95%CL (1 toyMC)
median expected limit: r < 1.09466 @ 95%CL (1 toyMC)
   68% expected band : 1.09466 < r < 1.09466
   95% expected band : 1.09466 < r < 1.09466
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1961626714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05921 +/- 0.00424812 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05921 @ 95%CL (1 toyMC)
median expected limit: r < 1.05921 @ 95%CL (1 toyMC)
   68% expected band : 1.05921 < r < 1.05921
   95% expected band : 1.05921 < r < 1.05921
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1487078441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15879 +/- 0.00442792 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.15879 @ 95%CL (1 toyMC)
median expected limit: r < 1.15879 @ 95%CL (1 toyMC)
   68% expected band : 1.15879 < r < 1.15879
   95% expected band : 1.15879 < r < 1.15879
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1851331890
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38895 +/- 0.00488964 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.38895 @ 95%CL (1 toyMC)
median expected limit: r < 1.38895 @ 95%CL (1 toyMC)
   68% expected band : 1.38895 < r < 1.38895
   95% expected band : 1.38895 < r < 1.38895
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1084407669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03302 +/- 0.00404239 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.03302 @ 95%CL (1 toyMC)
median expected limit: r < 1.03302 @ 95%CL (1 toyMC)
   68% expected band : 1.03302 < r < 1.03302
   95% expected band : 1.03302 < r < 1.03302
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 807130372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25247 +/- 0.004348 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.25247 @ 95%CL (1 toyMC)
median expected limit: r < 1.25247 @ 95%CL (1 toyMC)
   68% expected band : 1.25247 < r < 1.25247
   95% expected band : 1.25247 < r < 1.25247
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1898236104
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6702 +/- 0.00471183 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.6702 @ 95%CL (1 toyMC)
median expected limit: r < 1.6702 @ 95%CL (1 toyMC)
   68% expected band : 1.6702 < r < 1.6702
   95% expected band : 1.6702 < r < 1.6702
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 495586002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.883428 +/- 0.00370732 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.883428 @ 95%CL (1 toyMC)
median expected limit: r < 0.883428 @ 95%CL (1 toyMC)
   68% expected band : 0.883428 < r < 0.883428
   95% expected band : 0.883428 < r < 0.883428
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1029508571.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1075713220.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1084407669.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-109839582.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1111584335.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1150532238.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1233301712.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1283823066.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1586783785.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1600952960.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1613416366.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1644982332.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-168744089.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1710733075.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1738927068.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1781240683.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1795575692.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1824931440.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1898236104.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1917598056.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1931291815.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1961626714.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-2000254554.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-2005177289.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-203321201.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-2081004330.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-2095313764.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-2147220237.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-23554524.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-277151232.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-433621731.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-469887607.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-531041828.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-566450764.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-785352667.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-803467369.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-832305684.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-980676088.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.1002308713.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.10054535.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.1016781236.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.1018237721.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.1043873219.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.1306586060.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.1321723052.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.1327659206.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.1333602163.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.1342919523.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.1376759595.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.1417337504.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1419141690.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1458820613.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1487078441.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1516837129.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1520636022.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1524594937.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1612814865.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1654071861.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.170702717.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1727657058.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1741554111.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1753470852.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1778733260.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.178713774.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1797171149.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1851331890.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1873029723.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1882830723.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1927805080.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.2016699429.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.2036382216.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.2040190103.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.2060126855.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.2124765924.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.2129436290.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.2130306878.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.214602971.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.25835377.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.338929553.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.3991688.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.47361503.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.495586002.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.495640271.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.514141775.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.555167353.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.55529535.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.641475440.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.671940583.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.693763127.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.703759273.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.724353969.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.724535996.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.798097550.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.807130372.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.868520574.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.872773687.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.877410623.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.882209728.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.941497314.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.958898912.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 33362754
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.982821 +/- 0.0033297 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.982821 @ 95%CL (1 toyMC)
median expected limit: r < 0.982821 @ 95%CL (1 toyMC)
   68% expected band : 0.982821 < r < 0.982821
   95% expected band : 0.982821 < r < 0.982821
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1086965526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25725 +/- 0.0029639 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.25725 @ 95%CL (1 toyMC)
median expected limit: r < 1.25725 @ 95%CL (1 toyMC)
   68% expected band : 1.25725 < r < 1.25725
   95% expected band : 1.25725 < r < 1.25725
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 467185091
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.686968 +/- 0.00337877 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.686968 @ 95%CL (1 toyMC)
median expected limit: r < 0.686968 @ 95%CL (1 toyMC)
   68% expected band : 0.686968 < r < 0.686968
   95% expected band : 0.686968 < r < 0.686968
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -523305697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10659 +/- 0.00280508 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.10659 @ 95%CL (1 toyMC)
median expected limit: r < 1.10659 @ 95%CL (1 toyMC)
   68% expected band : 1.10659 < r < 1.10659
   95% expected band : 1.10659 < r < 1.10659
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2134545496
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.923951 +/- 0.00341865 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.923951 @ 95%CL (1 toyMC)
median expected limit: r < 0.923951 @ 95%CL (1 toyMC)
   68% expected band : 0.923951 < r < 0.923951
   95% expected band : 0.923951 < r < 0.923951
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1688957939
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13045 +/- 0.00388894 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.13045 @ 95%CL (1 toyMC)
median expected limit: r < 1.13045 @ 95%CL (1 toyMC)
   68% expected band : 1.13045 < r < 1.13045
   95% expected band : 1.13045 < r < 1.13045
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1583247876
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16859 +/- 0.00304689 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.16859 @ 95%CL (1 toyMC)
median expected limit: r < 1.16859 @ 95%CL (1 toyMC)
   68% expected band : 1.16859 < r < 1.16859
   95% expected band : 1.16859 < r < 1.16859
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -862881885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.867625 +/- 0.00356965 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.867625 @ 95%CL (1 toyMC)
median expected limit: r < 0.867625 @ 95%CL (1 toyMC)
   68% expected band : 0.867625 < r < 0.867625
   95% expected band : 0.867625 < r < 0.867625
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1677568341
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19294 +/- 0.00369377 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.19294 @ 95%CL (1 toyMC)
median expected limit: r < 1.19294 @ 95%CL (1 toyMC)
   68% expected band : 1.19294 < r < 1.19294
   95% expected band : 1.19294 < r < 1.19294
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -695528870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03646 +/- 0.00357403 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.03646 @ 95%CL (1 toyMC)
median expected limit: r < 1.03646 @ 95%CL (1 toyMC)
   68% expected band : 1.03646 < r < 1.03646
   95% expected band : 1.03646 < r < 1.03646
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1518232384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.896151 +/- 0.0034919 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.896151 @ 95%CL (1 toyMC)
median expected limit: r < 0.896151 @ 95%CL (1 toyMC)
   68% expected band : 0.896151 < r < 0.896151
   95% expected band : 0.896151 < r < 0.896151
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1718670478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.66689 +/- 0.00300008 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.66689 @ 95%CL (1 toyMC)
median expected limit: r < 0.66689 @ 95%CL (1 toyMC)
   68% expected band : 0.66689 < r < 0.66689
   95% expected band : 0.66689 < r < 0.66689
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 474564176
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28783 +/- 0.00353656 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.28783 @ 95%CL (1 toyMC)
median expected limit: r < 2.28783 @ 95%CL (1 toyMC)
   68% expected band : 2.28783 < r < 2.28783
   95% expected band : 2.28783 < r < 2.28783
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1974742052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.829766 +/- 0.00348612 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.829766 @ 95%CL (1 toyMC)
median expected limit: r < 0.829766 @ 95%CL (1 toyMC)
   68% expected band : 0.829766 < r < 0.829766
   95% expected band : 0.829766 < r < 0.829766
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1683891442
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11404 +/- 0.00383618 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.11404 @ 95%CL (1 toyMC)
median expected limit: r < 1.11404 @ 95%CL (1 toyMC)
   68% expected band : 1.11404 < r < 1.11404
   95% expected band : 1.11404 < r < 1.11404
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1496087463
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.694034 +/- 0.00396222 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.694034 @ 95%CL (1 toyMC)
median expected limit: r < 0.694034 @ 95%CL (1 toyMC)
   68% expected band : 0.694034 < r < 0.694034
   95% expected band : 0.694034 < r < 0.694034
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2044917134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.672213 +/- 0.00345251 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.672213 @ 95%CL (1 toyMC)
median expected limit: r < 0.672213 @ 95%CL (1 toyMC)
   68% expected band : 0.672213 < r < 0.672213
   95% expected band : 0.672213 < r < 0.672213
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -460895179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.860937 +/- 0.00335398 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.860937 @ 95%CL (1 toyMC)
median expected limit: r < 0.860937 @ 95%CL (1 toyMC)
   68% expected band : 0.860937 < r < 0.860937
   95% expected band : 0.860937 < r < 0.860937
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1743143451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.909702 +/- 0.00340903 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.909702 @ 95%CL (1 toyMC)
median expected limit: r < 0.909702 @ 95%CL (1 toyMC)
   68% expected band : 0.909702 < r < 0.909702
   95% expected band : 0.909702 < r < 0.909702
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1136395998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09117 +/- 0.00341128 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09117 @ 95%CL (1 toyMC)
median expected limit: r < 1.09117 @ 95%CL (1 toyMC)
   68% expected band : 1.09117 < r < 1.09117
   95% expected band : 1.09117 < r < 1.09117
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2134618245
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.984671 +/- 0.00303262 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.984671 @ 95%CL (1 toyMC)
median expected limit: r < 0.984671 @ 95%CL (1 toyMC)
   68% expected band : 0.984671 < r < 0.984671
   95% expected band : 0.984671 < r < 0.984671
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2082126242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.701812 +/- 0.00347889 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.701812 @ 95%CL (1 toyMC)
median expected limit: r < 0.701812 @ 95%CL (1 toyMC)
   68% expected band : 0.701812 < r < 0.701812
   95% expected band : 0.701812 < r < 0.701812
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -457598773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.864912 +/- 0.00320539 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.864912 @ 95%CL (1 toyMC)
median expected limit: r < 0.864912 @ 95%CL (1 toyMC)
   68% expected band : 0.864912 < r < 0.864912
   95% expected band : 0.864912 < r < 0.864912
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 239296125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.852257 +/- 0.00366359 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.852257 @ 95%CL (1 toyMC)
median expected limit: r < 0.852257 @ 95%CL (1 toyMC)
   68% expected band : 0.852257 < r < 0.852257
   95% expected band : 0.852257 < r < 0.852257
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1508346794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.933385 +/- 0.00314214 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.933385 @ 95%CL (1 toyMC)
median expected limit: r < 0.933385 @ 95%CL (1 toyMC)
   68% expected band : 0.933385 < r < 0.933385
   95% expected band : 0.933385 < r < 0.933385
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -714000476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.855251 +/- 0.00332041 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.855251 @ 95%CL (1 toyMC)
median expected limit: r < 0.855251 @ 95%CL (1 toyMC)
   68% expected band : 0.855251 < r < 0.855251
   95% expected band : 0.855251 < r < 0.855251
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 470150120
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.9308 +/- 0.00396799 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.9308 @ 95%CL (1 toyMC)
median expected limit: r < 0.9308 @ 95%CL (1 toyMC)
   68% expected band : 0.9308 < r < 0.9308
   95% expected band : 0.9308 < r < 0.9308
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1643284310
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2027 +/- 0.00204472 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.2027 @ 95%CL (1 toyMC)
median expected limit: r < 1.2027 @ 95%CL (1 toyMC)
   68% expected band : 1.2027 < r < 1.2027
   95% expected band : 1.2027 < r < 1.2027
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 455021452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.840544 +/- 0.00377091 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.840544 @ 95%CL (1 toyMC)
median expected limit: r < 0.840544 @ 95%CL (1 toyMC)
   68% expected band : 0.840544 < r < 0.840544
   95% expected band : 0.840544 < r < 0.840544
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 59652651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.782828 +/- 0.00331367 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.782828 @ 95%CL (1 toyMC)
median expected limit: r < 0.782828 @ 95%CL (1 toyMC)
   68% expected band : 0.782828 < r < 0.782828
   95% expected band : 0.782828 < r < 0.782828
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -198994870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.850076 +/- 0.00330359 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.850076 @ 95%CL (1 toyMC)
median expected limit: r < 0.850076 @ 95%CL (1 toyMC)
   68% expected band : 0.850076 < r < 0.850076
   95% expected band : 0.850076 < r < 0.850076
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1622491066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.707929 +/- 0.00293037 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.707929 @ 95%CL (1 toyMC)
median expected limit: r < 0.707929 @ 95%CL (1 toyMC)
   68% expected band : 0.707929 < r < 0.707929
   95% expected band : 0.707929 < r < 0.707929
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1485560856
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.86603 +/- 0.00334455 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.86603 @ 95%CL (1 toyMC)
median expected limit: r < 0.86603 @ 95%CL (1 toyMC)
   68% expected band : 0.86603 < r < 0.86603
   95% expected band : 0.86603 < r < 0.86603
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1450613266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.7566 +/- 0.00273446 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.7566 @ 95%CL (1 toyMC)
median expected limit: r < 0.7566 @ 95%CL (1 toyMC)
   68% expected band : 0.7566 < r < 0.7566
   95% expected band : 0.7566 < r < 0.7566
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -16739630
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.706725 +/- 0.00364265 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.706725 @ 95%CL (1 toyMC)
median expected limit: r < 0.706725 @ 95%CL (1 toyMC)
   68% expected band : 0.706725 < r < 0.706725
   95% expected band : 0.706725 < r < 0.706725
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1591264096
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.886692 +/- 0.00372216 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.886692 @ 95%CL (1 toyMC)
median expected limit: r < 0.886692 @ 95%CL (1 toyMC)
   68% expected band : 0.886692 < r < 0.886692
   95% expected band : 0.886692 < r < 0.886692
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1174425543
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00062 +/- 0.00312466 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.00062 @ 95%CL (1 toyMC)
median expected limit: r < 1.00062 @ 95%CL (1 toyMC)
   68% expected band : 1.00062 < r < 1.00062
   95% expected band : 1.00062 < r < 1.00062
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1182915188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05505 +/- 0.00338107 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05505 @ 95%CL (1 toyMC)
median expected limit: r < 1.05505 @ 95%CL (1 toyMC)
   68% expected band : 1.05505 < r < 1.05505
   95% expected band : 1.05505 < r < 1.05505
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -964884952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07257 +/- 0.00372026 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.07257 @ 95%CL (1 toyMC)
median expected limit: r < 1.07257 @ 95%CL (1 toyMC)
   68% expected band : 1.07257 < r < 1.07257
   95% expected band : 1.07257 < r < 1.07257
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 196967866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.927685 +/- 0.003433 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.927685 @ 95%CL (1 toyMC)
median expected limit: r < 0.927685 @ 95%CL (1 toyMC)
   68% expected band : 0.927685 < r < 0.927685
   95% expected band : 0.927685 < r < 0.927685
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1266907530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.715179 +/- 0.00323191 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.715179 @ 95%CL (1 toyMC)
median expected limit: r < 0.715179 @ 95%CL (1 toyMC)
   68% expected band : 0.715179 < r < 0.715179
   95% expected band : 0.715179 < r < 0.715179
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -829865814
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.945462 +/- 0.00295561 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.945462 @ 95%CL (1 toyMC)
median expected limit: r < 0.945462 @ 95%CL (1 toyMC)
   68% expected band : 0.945462 < r < 0.945462
   95% expected band : 0.945462 < r < 0.945462
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1038434522
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.926376 +/- 0.00370317 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.926376 @ 95%CL (1 toyMC)
median expected limit: r < 0.926376 @ 95%CL (1 toyMC)
   68% expected band : 0.926376 < r < 0.926376
   95% expected band : 0.926376 < r < 0.926376
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 456492850
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03944 +/- 0.00280581 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.03944 @ 95%CL (1 toyMC)
median expected limit: r < 1.03944 @ 95%CL (1 toyMC)
   68% expected band : 1.03944 < r < 1.03944
   95% expected band : 1.03944 < r < 1.03944
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1343028742
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30285 +/- 0.00421485 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.30285 @ 95%CL (1 toyMC)
median expected limit: r < 1.30285 @ 95%CL (1 toyMC)
   68% expected band : 1.30285 < r < 1.30285
   95% expected band : 1.30285 < r < 1.30285
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -828409471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08614 +/- 0.00301719 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.08614 @ 95%CL (1 toyMC)
median expected limit: r < 1.08614 @ 95%CL (1 toyMC)
   68% expected band : 1.08614 < r < 1.08614
   95% expected band : 1.08614 < r < 1.08614
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -626211442
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.915832 +/- 0.00390729 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.915832 @ 95%CL (1 toyMC)
median expected limit: r < 0.915832 @ 95%CL (1 toyMC)
   68% expected band : 0.915832 < r < 0.915832
   95% expected band : 0.915832 < r < 0.915832
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -184245267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25132 +/- 0.00371695 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.25132 @ 95%CL (1 toyMC)
median expected limit: r < 1.25132 @ 95%CL (1 toyMC)
   68% expected band : 1.25132 < r < 1.25132
   95% expected band : 1.25132 < r < 1.25132
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1658355688
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06872 +/- 0.0036755 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.06872 @ 95%CL (1 toyMC)
median expected limit: r < 1.06872 @ 95%CL (1 toyMC)
   68% expected band : 1.06872 < r < 1.06872
   95% expected band : 1.06872 < r < 1.06872
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -943107160
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.699533 +/- 0.0029201 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.699533 @ 95%CL (1 toyMC)
median expected limit: r < 0.699533 @ 95%CL (1 toyMC)
   68% expected band : 0.699533 < r < 0.699533
   95% expected band : 0.699533 < r < 0.699533
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2004770493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17274 +/- 0.00378114 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.17274 @ 95%CL (1 toyMC)
median expected limit: r < 1.17274 @ 95%CL (1 toyMC)
   68% expected band : 1.17274 < r < 1.17274
   95% expected band : 1.17274 < r < 1.17274
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 404546523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05036 +/- 0.00293313 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.05036 @ 95%CL (1 toyMC)
median expected limit: r < 1.05036 @ 95%CL (1 toyMC)
   68% expected band : 1.05036 < r < 1.05036
   95% expected band : 1.05036 < r < 1.05036
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 107314885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.968371 +/- 0.00328049 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.968371 @ 95%CL (1 toyMC)
median expected limit: r < 0.968371 @ 95%CL (1 toyMC)
   68% expected band : 0.968371 < r < 0.968371
   95% expected band : 0.968371 < r < 0.968371
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1324104224
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.68985 +/- 0.0034118 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.68985 @ 95%CL (1 toyMC)
median expected limit: r < 0.68985 @ 95%CL (1 toyMC)
   68% expected band : 0.68985 < r < 0.68985
   95% expected band : 0.68985 < r < 0.68985
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1457309634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.699484 +/- 0.00369784 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.699484 @ 95%CL (1 toyMC)
median expected limit: r < 0.699484 @ 95%CL (1 toyMC)
   68% expected band : 0.699484 < r < 0.699484
   95% expected band : 0.699484 < r < 0.699484
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1682565198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.80742 +/- 0.0039104 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.80742 @ 95%CL (1 toyMC)
median expected limit: r < 0.80742 @ 95%CL (1 toyMC)
   68% expected band : 0.80742 < r < 0.80742
   95% expected band : 0.80742 < r < 0.80742
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1585158773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.920964 +/- 0.00273771 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.920964 @ 95%CL (1 toyMC)
median expected limit: r < 0.920964 @ 95%CL (1 toyMC)
   68% expected band : 0.920964 < r < 0.920964
   95% expected band : 0.920964 < r < 0.920964
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -534689264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.914489 +/- 0.00313804 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.914489 @ 95%CL (1 toyMC)
median expected limit: r < 0.914489 @ 95%CL (1 toyMC)
   68% expected band : 0.914489 < r < 0.914489
   95% expected band : 0.914489 < r < 0.914489
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 702461559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1162 +/- 0.00377187 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1162 @ 95%CL (1 toyMC)
median expected limit: r < 1.1162 @ 95%CL (1 toyMC)
   68% expected band : 1.1162 < r < 1.1162
   95% expected band : 1.1162 < r < 1.1162
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 553116894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.97357 +/- 0.00355169 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.97357 @ 95%CL (1 toyMC)
median expected limit: r < 0.97357 @ 95%CL (1 toyMC)
   68% expected band : 0.97357 < r < 0.97357
   95% expected band : 0.97357 < r < 0.97357
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 852560634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26009 +/- 0.00429282 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.26009 @ 95%CL (1 toyMC)
median expected limit: r < 1.26009 @ 95%CL (1 toyMC)
   68% expected band : 1.26009 < r < 1.26009
   95% expected band : 1.26009 < r < 1.26009
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1249324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.789366 +/- 0.00306266 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.789366 @ 95%CL (1 toyMC)
median expected limit: r < 0.789366 @ 95%CL (1 toyMC)
   68% expected band : 0.789366 < r < 0.789366
   95% expected band : 0.789366 < r < 0.789366
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1062431540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.778731 +/- 0.00328908 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.778731 @ 95%CL (1 toyMC)
median expected limit: r < 0.778731 @ 95%CL (1 toyMC)
   68% expected band : 0.778731 < r < 0.778731
   95% expected band : 0.778731 < r < 0.778731
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2006403219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.83269 +/- 0.00357372 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.83269 @ 95%CL (1 toyMC)
median expected limit: r < 0.83269 @ 95%CL (1 toyMC)
   68% expected band : 0.83269 < r < 0.83269
   95% expected band : 0.83269 < r < 0.83269
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 211899043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.238 +/- 0.00335909 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.238 @ 95%CL (1 toyMC)
median expected limit: r < 1.238 @ 95%CL (1 toyMC)
   68% expected band : 1.238 < r < 1.238
   95% expected band : 1.238 < r < 1.238
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 179826388
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.764748 +/- 0.00318022 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.764748 @ 95%CL (1 toyMC)
median expected limit: r < 0.764748 @ 95%CL (1 toyMC)
   68% expected band : 0.764748 < r < 0.764748
   95% expected band : 0.764748 < r < 0.764748
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 276035344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04774 +/- 0.00392888 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04774 @ 95%CL (1 toyMC)
median expected limit: r < 1.04774 @ 95%CL (1 toyMC)
   68% expected band : 1.04774 < r < 1.04774
   95% expected band : 1.04774 < r < 1.04774
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1837765961
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22055 +/- 0.00375179 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.22055 @ 95%CL (1 toyMC)
median expected limit: r < 1.22055 @ 95%CL (1 toyMC)
   68% expected band : 1.22055 < r < 1.22055
   95% expected band : 1.22055 < r < 1.22055
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 942716123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.799064 +/- 0.00319396 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.799064 @ 95%CL (1 toyMC)
median expected limit: r < 0.799064 @ 95%CL (1 toyMC)
   68% expected band : 0.799064 < r < 0.799064
   95% expected band : 0.799064 < r < 0.799064
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 787204872
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.788711 +/- 0.00323002 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.788711 @ 95%CL (1 toyMC)
median expected limit: r < 0.788711 @ 95%CL (1 toyMC)
   68% expected band : 0.788711 < r < 0.788711
   95% expected band : 0.788711 < r < 0.788711
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1258857318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80804 +/- 0.00347585 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.80804 @ 95%CL (1 toyMC)
median expected limit: r < 1.80804 @ 95%CL (1 toyMC)
   68% expected band : 1.80804 < r < 1.80804
   95% expected band : 1.80804 < r < 1.80804
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 884474719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.737477 +/- 0.0033015 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.737477 @ 95%CL (1 toyMC)
median expected limit: r < 0.737477 @ 95%CL (1 toyMC)
   68% expected band : 0.737477 < r < 0.737477
   95% expected band : 0.737477 < r < 0.737477
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1501327508
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31105 +/- 0.00374348 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.31105 @ 95%CL (1 toyMC)
median expected limit: r < 1.31105 @ 95%CL (1 toyMC)
   68% expected band : 1.31105 < r < 1.31105
   95% expected band : 1.31105 < r < 1.31105
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -87114792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.719272 +/- 0.00326146 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.719272 @ 95%CL (1 toyMC)
median expected limit: r < 0.719272 @ 95%CL (1 toyMC)
   68% expected band : 0.719272 < r < 0.719272
   95% expected band : 0.719272 < r < 0.719272
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1046061511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.855294 +/- 0.00369232 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.855294 @ 95%CL (1 toyMC)
median expected limit: r < 0.855294 @ 95%CL (1 toyMC)
   68% expected band : 0.855294 < r < 0.855294
   95% expected band : 0.855294 < r < 0.855294
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 109585956
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.711563 +/- 0.0033939 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.711563 @ 95%CL (1 toyMC)
median expected limit: r < 0.711563 @ 95%CL (1 toyMC)
   68% expected band : 0.711563 < r < 0.711563
   95% expected band : 0.711563 < r < 0.711563
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -596911973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35815 +/- 0.00222524 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.35815 @ 95%CL (1 toyMC)
median expected limit: r < 1.35815 @ 95%CL (1 toyMC)
   68% expected band : 1.35815 < r < 1.35815
   95% expected band : 1.35815 < r < 1.35815
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1697991943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.788004 +/- 0.00365627 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.788004 @ 95%CL (1 toyMC)
median expected limit: r < 0.788004 @ 95%CL (1 toyMC)
   68% expected band : 0.788004 < r < 0.788004
   95% expected band : 0.788004 < r < 0.788004
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1293192779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56466 +/- 0.0028443 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.56466 @ 95%CL (1 toyMC)
median expected limit: r < 1.56466 @ 95%CL (1 toyMC)
   68% expected band : 1.56466 < r < 1.56466
   95% expected band : 1.56466 < r < 1.56466
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -228534824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0609 +/- 0.00365936 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.0609 @ 95%CL (1 toyMC)
median expected limit: r < 1.0609 @ 95%CL (1 toyMC)
   68% expected band : 1.0609 < r < 1.0609
   95% expected band : 1.0609 < r < 1.0609
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 813511037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.78127 +/- 0.00332097 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.78127 @ 95%CL (1 toyMC)
median expected limit: r < 0.78127 @ 95%CL (1 toyMC)
   68% expected band : 0.78127 < r < 0.78127
   95% expected band : 0.78127 < r < 0.78127
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2100317404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55441 +/- 0.00330843 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.55441 @ 95%CL (1 toyMC)
median expected limit: r < 1.55441 @ 95%CL (1 toyMC)
   68% expected band : 1.55441 < r < 1.55441
   95% expected band : 1.55441 < r < 1.55441
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 857255032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.763979 +/- 0.00367083 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.763979 @ 95%CL (1 toyMC)
median expected limit: r < 0.763979 @ 95%CL (1 toyMC)
   68% expected band : 0.763979 < r < 0.763979
   95% expected band : 0.763979 < r < 0.763979
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1457461103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17134 +/- 0.00325777 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.17134 @ 95%CL (1 toyMC)
median expected limit: r < 1.17134 @ 95%CL (1 toyMC)
   68% expected band : 1.17134 < r < 1.17134
   95% expected band : 1.17134 < r < 1.17134
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 216260776
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.797631 +/- 0.00338407 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.797631 @ 95%CL (1 toyMC)
median expected limit: r < 0.797631 @ 95%CL (1 toyMC)
   68% expected band : 0.797631 < r < 0.797631
   95% expected band : 0.797631 < r < 0.797631
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -501545790
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07481 +/- 0.00399537 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.07481 @ 95%CL (1 toyMC)
median expected limit: r < 1.07481 @ 95%CL (1 toyMC)
   68% expected band : 1.07481 < r < 1.07481
   95% expected band : 1.07481 < r < 1.07481
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1303770226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.946389 +/- 0.00336725 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.946389 @ 95%CL (1 toyMC)
median expected limit: r < 0.946389 @ 95%CL (1 toyMC)
   68% expected band : 0.946389 < r < 0.946389
   95% expected band : 0.946389 < r < 0.946389
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1672121582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.7315 +/- 0.00339824 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.7315 @ 95%CL (1 toyMC)
median expected limit: r < 0.7315 @ 95%CL (1 toyMC)
   68% expected band : 0.7315 < r < 0.7315
   95% expected band : 0.7315 < r < 0.7315
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1608050580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.729673 +/- 0.00326724 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.729673 @ 95%CL (1 toyMC)
median expected limit: r < 0.729673 @ 95%CL (1 toyMC)
   68% expected band : 0.729673 < r < 0.729673
   95% expected band : 0.729673 < r < 0.729673
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2036278938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40305 +/- 0.00356855 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.40305 @ 95%CL (1 toyMC)
median expected limit: r < 1.40305 @ 95%CL (1 toyMC)
   68% expected band : 1.40305 < r < 1.40305
   95% expected band : 1.40305 < r < 1.40305
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1144860372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.806012 +/- 0.00298961 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.806012 @ 95%CL (1 toyMC)
median expected limit: r < 0.806012 @ 95%CL (1 toyMC)
   68% expected band : 0.806012 < r < 0.806012
   95% expected band : 0.806012 < r < 0.806012
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2033561836
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.861328 +/- 0.00348168 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.861328 @ 95%CL (1 toyMC)
median expected limit: r < 0.861328 @ 95%CL (1 toyMC)
   68% expected band : 0.861328 < r < 0.861328
   95% expected band : 0.861328 < r < 0.861328
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2092067333
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1205 +/- 0.00384098 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1205 @ 95%CL (1 toyMC)
median expected limit: r < 1.1205 @ 95%CL (1 toyMC)
   68% expected band : 1.1205 < r < 1.1205
   95% expected band : 1.1205 < r < 1.1205
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 674646481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33956 +/- 0.00338974 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.33956 @ 95%CL (1 toyMC)
median expected limit: r < 1.33956 @ 95%CL (1 toyMC)
   68% expected band : 1.33956 < r < 1.33956
   95% expected band : 1.33956 < r < 1.33956
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 87174483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.729754 +/- 0.00373736 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.729754 @ 95%CL (1 toyMC)
median expected limit: r < 0.729754 @ 95%CL (1 toyMC)
   68% expected band : 0.729754 < r < 0.729754
   95% expected band : 0.729754 < r < 0.729754
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1782410703
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.674314 +/- 0.00343652 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.674314 @ 95%CL (1 toyMC)
median expected limit: r < 0.674314 @ 95%CL (1 toyMC)
   68% expected band : 0.674314 < r < 0.674314
   95% expected band : 0.674314 < r < 0.674314
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1502549509
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00692 +/- 0.00341801 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.00692 @ 95%CL (1 toyMC)
median expected limit: r < 1.00692 @ 95%CL (1 toyMC)
   68% expected band : 1.00692 < r < 1.00692
   95% expected band : 1.00692 < r < 1.00692
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 152855785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.811006 +/- 0.00375332 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.811006 @ 95%CL (1 toyMC)
median expected limit: r < 0.811006 @ 95%CL (1 toyMC)
   68% expected band : 0.811006 < r < 0.811006
   95% expected band : 0.811006 < r < 0.811006
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -434155810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.838727 +/- 0.00356234 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.838727 @ 95%CL (1 toyMC)
median expected limit: r < 0.838727 @ 95%CL (1 toyMC)
   68% expected band : 0.838727 < r < 0.838727
   95% expected band : 0.838727 < r < 0.838727
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 986989659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.805603 +/- 0.00392182 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.805603 @ 95%CL (1 toyMC)
median expected limit: r < 0.805603 @ 95%CL (1 toyMC)
   68% expected band : 0.805603 < r < 0.805603
   95% expected band : 0.805603 < r < 0.805603
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1046061511.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1062431540.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1086965526.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1136395998.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1174425543.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1182915188.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1293192779.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1324104224.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1485560856.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1501327508.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1508346794.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1583247876.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1585158773.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1591264096.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1608050580.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1643284310.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1658355688.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-16739630.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1743143451.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-184245267.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1974742052.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-198994870.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-2004770493.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-2006403219.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-2036278938.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-2044917134.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-2082126242.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-2092067333.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-228534824.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-434155810.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-457598773.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-460895179.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-501545790.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-523305697.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-534689264.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-596911973.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-626211442.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-695528870.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-714000476.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-828409471.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-829865814.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-862881885.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-87114792.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-943107160.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-964884952.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.1038434522.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.107314885.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.109585956.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.1144860372.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.1249324.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1258857318.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1266907530.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1303770226.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1343028742.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1450613266.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1457309634.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1457461103.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1496087463.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1502549509.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1518232384.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.152855785.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1622491066.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1672121582.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1677568341.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1682565198.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1683891442.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1688957939.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1697991943.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1718670478.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1782410703.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.179826388.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1837765961.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.196967866.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.2033561836.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.2100317404.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.211899043.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.2134545496.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.2134618245.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.216260776.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.239296125.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.276035344.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.33362754.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.404546523.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.455021452.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.456492850.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.467185091.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.470150120.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.474564176.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.553116894.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.59652651.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.674646481.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.702461559.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.787204872.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.813511037.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.852560634.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.857255032.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.87174483.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.884474719.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.942716123.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.986989659.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1332198755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09245 +/- 0.00380903 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09245 @ 95%CL (1 toyMC)
median expected limit: r < 1.09245 @ 95%CL (1 toyMC)
   68% expected band : 1.09245 < r < 1.09245
   95% expected band : 1.09245 < r < 1.09245
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1950161526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.93078 +/- 0.00366093 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.93078 @ 95%CL (1 toyMC)
median expected limit: r < 0.93078 @ 95%CL (1 toyMC)
   68% expected band : 0.93078 < r < 0.93078
   95% expected band : 0.93078 < r < 0.93078
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1106402653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44149 +/- 0.00320505 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.44149 @ 95%CL (1 toyMC)
median expected limit: r < 1.44149 @ 95%CL (1 toyMC)
   68% expected band : 1.44149 < r < 1.44149
   95% expected band : 1.44149 < r < 1.44149
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -572868008
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.980814 +/- 0.00395756 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.980814 @ 95%CL (1 toyMC)
median expected limit: r < 0.980814 @ 95%CL (1 toyMC)
   68% expected band : 0.980814 < r < 0.980814
   95% expected band : 0.980814 < r < 0.980814
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1611433522
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29962 +/- 0.00273351 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.29962 @ 95%CL (1 toyMC)
median expected limit: r < 1.29962 @ 95%CL (1 toyMC)
   68% expected band : 1.29962 < r < 1.29962
   95% expected band : 1.29962 < r < 1.29962
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -667597375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.81276 +/- 0.0030742 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.81276 @ 95%CL (1 toyMC)
median expected limit: r < 0.81276 @ 95%CL (1 toyMC)
   68% expected band : 0.81276 < r < 0.81276
   95% expected band : 0.81276 < r < 0.81276
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2000987982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13314 +/- 0.00406435 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.13314 @ 95%CL (1 toyMC)
median expected limit: r < 1.13314 @ 95%CL (1 toyMC)
   68% expected band : 1.13314 < r < 1.13314
   95% expected band : 1.13314 < r < 1.13314
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -727980399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24067 +/- 0.00308546 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.24067 @ 95%CL (1 toyMC)
median expected limit: r < 1.24067 @ 95%CL (1 toyMC)
   68% expected band : 1.24067 < r < 1.24067
   95% expected band : 1.24067 < r < 1.24067
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 323640915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.827267 +/- 0.00390536 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.827267 @ 95%CL (1 toyMC)
median expected limit: r < 0.827267 @ 95%CL (1 toyMC)
   68% expected band : 0.827267 < r < 0.827267
   95% expected band : 0.827267 < r < 0.827267
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1762662517
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56553 +/- 0.00307821 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.56553 @ 95%CL (1 toyMC)
median expected limit: r < 1.56553 @ 95%CL (1 toyMC)
   68% expected band : 1.56553 < r < 1.56553
   95% expected band : 1.56553 < r < 1.56553
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1619844026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11889 +/- 0.00379004 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.11889 @ 95%CL (1 toyMC)
median expected limit: r < 1.11889 @ 95%CL (1 toyMC)
   68% expected band : 1.11889 < r < 1.11889
   95% expected band : 1.11889 < r < 1.11889
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1789954918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.799144 +/- 0.00311301 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.799144 @ 95%CL (1 toyMC)
median expected limit: r < 0.799144 @ 95%CL (1 toyMC)
   68% expected band : 0.799144 < r < 0.799144
   95% expected band : 0.799144 < r < 0.799144
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -425577565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33239 +/- 0.00370166 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.33239 @ 95%CL (1 toyMC)
median expected limit: r < 2.33239 @ 95%CL (1 toyMC)
   68% expected band : 2.33239 < r < 2.33239
   95% expected band : 2.33239 < r < 2.33239
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 246877189
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31939 +/- 0.00387764 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.31939 @ 95%CL (1 toyMC)
median expected limit: r < 1.31939 @ 95%CL (1 toyMC)
   68% expected band : 1.31939 < r < 1.31939
   95% expected band : 1.31939 < r < 1.31939
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 777333485
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.823304 +/- 0.00317647 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.823304 @ 95%CL (1 toyMC)
median expected limit: r < 0.823304 @ 95%CL (1 toyMC)
   68% expected band : 0.823304 < r < 0.823304
   95% expected band : 0.823304 < r < 0.823304
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 834753515
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.703072 +/- 0.00357302 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.703072 @ 95%CL (1 toyMC)
median expected limit: r < 0.703072 @ 95%CL (1 toyMC)
   68% expected band : 0.703072 < r < 0.703072
   95% expected band : 0.703072 < r < 0.703072
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 902298193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.82818 +/- 0.00352972 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.82818 @ 95%CL (1 toyMC)
median expected limit: r < 0.82818 @ 95%CL (1 toyMC)
   68% expected band : 0.82818 < r < 0.82818
   95% expected band : 0.82818 < r < 0.82818
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1276507739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.793372 +/- 0.00414879 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.793372 @ 95%CL (1 toyMC)
median expected limit: r < 0.793372 @ 95%CL (1 toyMC)
   68% expected band : 0.793372 < r < 0.793372
   95% expected band : 0.793372 < r < 0.793372
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2058197320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.703343 +/- 0.00371942 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.703343 @ 95%CL (1 toyMC)
median expected limit: r < 0.703343 @ 95%CL (1 toyMC)
   68% expected band : 0.703343 < r < 0.703343
   95% expected band : 0.703343 < r < 0.703343
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2060754471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01451 +/- 0.00322571 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.01451 @ 95%CL (1 toyMC)
median expected limit: r < 1.01451 @ 95%CL (1 toyMC)
   68% expected band : 1.01451 < r < 1.01451
   95% expected band : 1.01451 < r < 1.01451
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -134961369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.813696 +/- 0.00314979 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.813696 @ 95%CL (1 toyMC)
median expected limit: r < 0.813696 @ 95%CL (1 toyMC)
   68% expected band : 0.813696 < r < 0.813696
   95% expected band : 0.813696 < r < 0.813696
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1381757804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25623 +/- 0.00323357 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.25623 @ 95%CL (1 toyMC)
median expected limit: r < 1.25623 @ 95%CL (1 toyMC)
   68% expected band : 1.25623 < r < 1.25623
   95% expected band : 1.25623 < r < 1.25623
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1033978708
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.7993 +/- 0.00388261 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.7993 @ 95%CL (1 toyMC)
median expected limit: r < 1.7993 @ 95%CL (1 toyMC)
   68% expected band : 1.7993 < r < 1.7993
   95% expected band : 1.7993 < r < 1.7993
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1289267368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18142 +/- 0.00344581 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.18142 @ 95%CL (1 toyMC)
median expected limit: r < 1.18142 @ 95%CL (1 toyMC)
   68% expected band : 1.18142 < r < 1.18142
   95% expected band : 1.18142 < r < 1.18142
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 958218739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46546 +/- 0.00322579 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.46546 @ 95%CL (1 toyMC)
median expected limit: r < 1.46546 @ 95%CL (1 toyMC)
   68% expected band : 1.46546 < r < 1.46546
   95% expected band : 1.46546 < r < 1.46546
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2007335903
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.877846 +/- 0.00334765 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.877846 @ 95%CL (1 toyMC)
median expected limit: r < 0.877846 @ 95%CL (1 toyMC)
   68% expected band : 0.877846 < r < 0.877846
   95% expected band : 0.877846 < r < 0.877846
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1522121230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.752543 +/- 0.00303495 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.752543 @ 95%CL (1 toyMC)
median expected limit: r < 0.752543 @ 95%CL (1 toyMC)
   68% expected band : 0.752543 < r < 0.752543
   95% expected band : 0.752543 < r < 0.752543
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -699774264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.792277 +/- 0.00312409 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.792277 @ 95%CL (1 toyMC)
median expected limit: r < 0.792277 @ 95%CL (1 toyMC)
   68% expected band : 0.792277 < r < 0.792277
   95% expected band : 0.792277 < r < 0.792277
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -41343332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04044 +/- 0.00399285 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04044 @ 95%CL (1 toyMC)
median expected limit: r < 1.04044 @ 95%CL (1 toyMC)
   68% expected band : 1.04044 < r < 1.04044
   95% expected band : 1.04044 < r < 1.04044
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1795536071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53203 +/- 0.0040262 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.53203 @ 95%CL (1 toyMC)
median expected limit: r < 1.53203 @ 95%CL (1 toyMC)
   68% expected band : 1.53203 < r < 1.53203
   95% expected band : 1.53203 < r < 1.53203
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -524575206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65323 +/- 0.00429991 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.65323 @ 95%CL (1 toyMC)
median expected limit: r < 1.65323 @ 95%CL (1 toyMC)
   68% expected band : 1.65323 < r < 1.65323
   95% expected band : 1.65323 < r < 1.65323
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 670710133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.698654 +/- 0.0029866 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.698654 @ 95%CL (1 toyMC)
median expected limit: r < 0.698654 @ 95%CL (1 toyMC)
   68% expected band : 0.698654 < r < 0.698654
   95% expected band : 0.698654 < r < 0.698654
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1047708472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.775509 +/- 0.00366173 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.775509 @ 95%CL (1 toyMC)
median expected limit: r < 0.775509 @ 95%CL (1 toyMC)
   68% expected band : 0.775509 < r < 0.775509
   95% expected band : 0.775509 < r < 0.775509
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -579103052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22564 +/- 0.00418761 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.22564 @ 95%CL (1 toyMC)
median expected limit: r < 1.22564 @ 95%CL (1 toyMC)
   68% expected band : 1.22564 < r < 1.22564
   95% expected band : 1.22564 < r < 1.22564
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1920321896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.704049 +/- 0.00321002 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.704049 @ 95%CL (1 toyMC)
median expected limit: r < 0.704049 @ 95%CL (1 toyMC)
   68% expected band : 0.704049 < r < 0.704049
   95% expected band : 0.704049 < r < 0.704049
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1968204886
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.777329 +/- 0.00305163 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.777329 @ 95%CL (1 toyMC)
median expected limit: r < 0.777329 @ 95%CL (1 toyMC)
   68% expected band : 0.777329 < r < 0.777329
   95% expected band : 0.777329 < r < 0.777329
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1777941858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28911 +/- 0.00307372 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.28911 @ 95%CL (1 toyMC)
median expected limit: r < 1.28911 @ 95%CL (1 toyMC)
   68% expected band : 1.28911 < r < 1.28911
   95% expected band : 1.28911 < r < 1.28911
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2128857071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52025 +/- 0.00352409 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.52025 @ 95%CL (1 toyMC)
median expected limit: r < 1.52025 @ 95%CL (1 toyMC)
   68% expected band : 1.52025 < r < 1.52025
   95% expected band : 1.52025 < r < 1.52025
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1290550576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48346 +/- 0.00419255 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.48346 @ 95%CL (1 toyMC)
median expected limit: r < 1.48346 @ 95%CL (1 toyMC)
   68% expected band : 1.48346 < r < 1.48346
   95% expected band : 1.48346 < r < 1.48346
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2059646542
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.699628 +/- 0.0030237 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.699628 @ 95%CL (1 toyMC)
median expected limit: r < 0.699628 @ 95%CL (1 toyMC)
   68% expected band : 0.699628 < r < 0.699628
   95% expected band : 0.699628 < r < 0.699628
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -845477634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.818099 +/- 0.00376006 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.818099 @ 95%CL (1 toyMC)
median expected limit: r < 0.818099 @ 95%CL (1 toyMC)
   68% expected band : 0.818099 < r < 0.818099
   95% expected band : 0.818099 < r < 0.818099
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1271089595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.688084 +/- 0.00327316 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.688084 @ 95%CL (1 toyMC)
median expected limit: r < 0.688084 @ 95%CL (1 toyMC)
   68% expected band : 0.688084 < r < 0.688084
   95% expected band : 0.688084 < r < 0.688084
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 642492492
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44551 +/- 0.00253045 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.44551 @ 95%CL (1 toyMC)
median expected limit: r < 1.44551 @ 95%CL (1 toyMC)
   68% expected band : 1.44551 < r < 1.44551
   95% expected band : 1.44551 < r < 1.44551
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -693080362
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34362 +/- 0.0036908 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.34362 @ 95%CL (1 toyMC)
median expected limit: r < 1.34362 @ 95%CL (1 toyMC)
   68% expected band : 1.34362 < r < 1.34362
   95% expected band : 1.34362 < r < 1.34362
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1592964243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.876179 +/- 0.00330266 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.876179 @ 95%CL (1 toyMC)
median expected limit: r < 0.876179 @ 95%CL (1 toyMC)
   68% expected band : 0.876179 < r < 0.876179
   95% expected band : 0.876179 < r < 0.876179
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2128031207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.981177 +/- 0.00322898 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.981177 @ 95%CL (1 toyMC)
median expected limit: r < 0.981177 @ 95%CL (1 toyMC)
   68% expected band : 0.981177 < r < 0.981177
   95% expected band : 0.981177 < r < 0.981177
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 890674276
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25284 +/- 0.00466022 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.25284 @ 95%CL (1 toyMC)
median expected limit: r < 1.25284 @ 95%CL (1 toyMC)
   68% expected band : 1.25284 < r < 1.25284
   95% expected band : 1.25284 < r < 1.25284
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1839903664
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06223 +/- 0.00346177 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.06223 @ 95%CL (1 toyMC)
median expected limit: r < 1.06223 @ 95%CL (1 toyMC)
   68% expected band : 1.06223 < r < 1.06223
   95% expected band : 1.06223 < r < 1.06223
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 534546041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.880229 +/- 0.0033566 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.880229 @ 95%CL (1 toyMC)
median expected limit: r < 0.880229 @ 95%CL (1 toyMC)
   68% expected band : 0.880229 < r < 0.880229
   95% expected band : 0.880229 < r < 0.880229
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -854541480
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.873958 +/- 0.00320144 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.873958 @ 95%CL (1 toyMC)
median expected limit: r < 0.873958 @ 95%CL (1 toyMC)
   68% expected band : 0.873958 < r < 0.873958
   95% expected band : 0.873958 < r < 0.873958
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1230933018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21221 +/- 0.00280036 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.21221 @ 95%CL (1 toyMC)
median expected limit: r < 1.21221 @ 95%CL (1 toyMC)
   68% expected band : 1.21221 < r < 1.21221
   95% expected band : 1.21221 < r < 1.21221
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1749831891
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82759 +/- 0.00366506 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.82759 @ 95%CL (1 toyMC)
median expected limit: r < 1.82759 @ 95%CL (1 toyMC)
   68% expected band : 1.82759 < r < 1.82759
   95% expected band : 1.82759 < r < 1.82759
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1433356204
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.840751 +/- 0.00357139 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.840751 @ 95%CL (1 toyMC)
median expected limit: r < 0.840751 @ 95%CL (1 toyMC)
   68% expected band : 0.840751 < r < 0.840751
   95% expected band : 0.840751 < r < 0.840751
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1777040271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16183 +/- 0.0034448 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.16183 @ 95%CL (1 toyMC)
median expected limit: r < 1.16183 @ 95%CL (1 toyMC)
   68% expected band : 1.16183 < r < 1.16183
   95% expected band : 1.16183 < r < 1.16183
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1625728489
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05236 +/- 0.00378165 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.05236 @ 95%CL (1 toyMC)
median expected limit: r < 1.05236 @ 95%CL (1 toyMC)
   68% expected band : 1.05236 < r < 1.05236
   95% expected band : 1.05236 < r < 1.05236
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 448163735
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04478 +/- 0.00486906 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04478 @ 95%CL (1 toyMC)
median expected limit: r < 1.04478 @ 95%CL (1 toyMC)
   68% expected band : 1.04478 < r < 1.04478
   95% expected band : 1.04478 < r < 1.04478
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1368782093
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38832 +/- 0.0036822 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.38832 @ 95%CL (1 toyMC)
median expected limit: r < 1.38832 @ 95%CL (1 toyMC)
   68% expected band : 1.38832 < r < 1.38832
   95% expected band : 1.38832 < r < 1.38832
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1647106041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.862677 +/- 0.00284603 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.862677 @ 95%CL (1 toyMC)
median expected limit: r < 0.862677 @ 95%CL (1 toyMC)
   68% expected band : 0.862677 < r < 0.862677
   95% expected band : 0.862677 < r < 0.862677
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1432332290
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41994 +/- 0.00357287 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.41994 @ 95%CL (1 toyMC)
median expected limit: r < 1.41994 @ 95%CL (1 toyMC)
   68% expected band : 1.41994 < r < 1.41994
   95% expected band : 1.41994 < r < 1.41994
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2006179276
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43438 +/- 0.00314602 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.43438 @ 95%CL (1 toyMC)
median expected limit: r < 1.43438 @ 95%CL (1 toyMC)
   68% expected band : 1.43438 < r < 1.43438
   95% expected band : 1.43438 < r < 1.43438
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -250298108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.812976 +/- 0.00343502 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.812976 @ 95%CL (1 toyMC)
median expected limit: r < 0.812976 @ 95%CL (1 toyMC)
   68% expected band : 0.812976 < r < 0.812976
   95% expected band : 0.812976 < r < 0.812976
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -304845704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.870815 +/- 0.00327557 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.870815 @ 95%CL (1 toyMC)
median expected limit: r < 0.870815 @ 95%CL (1 toyMC)
   68% expected band : 0.870815 < r < 0.870815
   95% expected band : 0.870815 < r < 0.870815
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1846047323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48069 +/- 0.00341765 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.48069 @ 95%CL (1 toyMC)
median expected limit: r < 1.48069 @ 95%CL (1 toyMC)
   68% expected band : 1.48069 < r < 1.48069
   95% expected band : 1.48069 < r < 1.48069
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -412492282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.797844 +/- 0.00297249 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.797844 @ 95%CL (1 toyMC)
median expected limit: r < 0.797844 @ 95%CL (1 toyMC)
   68% expected band : 0.797844 < r < 0.797844
   95% expected band : 0.797844 < r < 0.797844
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 460092956
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27494 +/- 0.00313057 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.27494 @ 95%CL (1 toyMC)
median expected limit: r < 1.27494 @ 95%CL (1 toyMC)
   68% expected band : 1.27494 < r < 1.27494
   95% expected band : 1.27494 < r < 1.27494
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -336111196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08411 +/- 0.00324796 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.08411 @ 95%CL (1 toyMC)
median expected limit: r < 1.08411 @ 95%CL (1 toyMC)
   68% expected band : 1.08411 < r < 1.08411
   95% expected band : 1.08411 < r < 1.08411
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1459985706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.7502 +/- 0.00404317 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.7502 @ 95%CL (1 toyMC)
median expected limit: r < 0.7502 @ 95%CL (1 toyMC)
   68% expected band : 0.7502 < r < 0.7502
   95% expected band : 0.7502 < r < 0.7502
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1011829074
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01313 +/- 0.00374293 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.01313 @ 95%CL (1 toyMC)
median expected limit: r < 1.01313 @ 95%CL (1 toyMC)
   68% expected band : 1.01313 < r < 1.01313
   95% expected band : 1.01313 < r < 1.01313
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -44840900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.703761 +/- 0.0031375 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.703761 @ 95%CL (1 toyMC)
median expected limit: r < 0.703761 @ 95%CL (1 toyMC)
   68% expected band : 0.703761 < r < 0.703761
   95% expected band : 0.703761 < r < 0.703761
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 722672103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.870052 +/- 0.00311619 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.870052 @ 95%CL (1 toyMC)
median expected limit: r < 0.870052 @ 95%CL (1 toyMC)
   68% expected band : 0.870052 < r < 0.870052
   95% expected band : 0.870052 < r < 0.870052
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2123604283
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.93235 +/- 0.00355393 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.93235 @ 95%CL (1 toyMC)
median expected limit: r < 0.93235 @ 95%CL (1 toyMC)
   68% expected band : 0.93235 < r < 0.93235
   95% expected band : 0.93235 < r < 0.93235
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -323950260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.755042 +/- 0.00332232 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.755042 @ 95%CL (1 toyMC)
median expected limit: r < 0.755042 @ 95%CL (1 toyMC)
   68% expected band : 0.755042 < r < 0.755042
   95% expected band : 0.755042 < r < 0.755042
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 548951535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.98496 +/- 0.00360969 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.98496 @ 95%CL (1 toyMC)
median expected limit: r < 0.98496 @ 95%CL (1 toyMC)
   68% expected band : 0.98496 < r < 0.98496
   95% expected band : 0.98496 < r < 0.98496
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 364643025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.865727 +/- 0.00379752 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.865727 @ 95%CL (1 toyMC)
median expected limit: r < 0.865727 @ 95%CL (1 toyMC)
   68% expected band : 0.865727 < r < 0.865727
   95% expected band : 0.865727 < r < 0.865727
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -982575132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.986188 +/- 0.00352685 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.986188 @ 95%CL (1 toyMC)
median expected limit: r < 0.986188 @ 95%CL (1 toyMC)
   68% expected band : 0.986188 < r < 0.986188
   95% expected band : 0.986188 < r < 0.986188
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 286849386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34435 +/- 0.00393264 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.34435 @ 95%CL (1 toyMC)
median expected limit: r < 1.34435 @ 95%CL (1 toyMC)
   68% expected band : 1.34435 < r < 1.34435
   95% expected band : 1.34435 < r < 1.34435
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1882608314
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25218 +/- 0.00362667 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.25218 @ 95%CL (1 toyMC)
median expected limit: r < 1.25218 @ 95%CL (1 toyMC)
   68% expected band : 1.25218 < r < 1.25218
   95% expected band : 1.25218 < r < 1.25218
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 485042597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.977487 +/- 0.00370865 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.977487 @ 95%CL (1 toyMC)
median expected limit: r < 0.977487 @ 95%CL (1 toyMC)
   68% expected band : 0.977487 < r < 0.977487
   95% expected band : 0.977487 < r < 0.977487
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 107729190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06115 +/- 0.00295139 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.06115 @ 95%CL (1 toyMC)
median expected limit: r < 1.06115 @ 95%CL (1 toyMC)
   68% expected band : 1.06115 < r < 1.06115
   95% expected band : 1.06115 < r < 1.06115
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2007011609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.7064 +/- 0.00334501 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.7064 @ 95%CL (1 toyMC)
median expected limit: r < 0.7064 @ 95%CL (1 toyMC)
   68% expected band : 0.7064 < r < 0.7064
   95% expected band : 0.7064 < r < 0.7064
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1248685447
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.987723 +/- 0.00360028 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.987723 @ 95%CL (1 toyMC)
median expected limit: r < 0.987723 @ 95%CL (1 toyMC)
   68% expected band : 0.987723 < r < 0.987723
   95% expected band : 0.987723 < r < 0.987723
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 713949537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.893365 +/- 0.00352455 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.893365 @ 95%CL (1 toyMC)
median expected limit: r < 0.893365 @ 95%CL (1 toyMC)
   68% expected band : 0.893365 < r < 0.893365
   95% expected band : 0.893365 < r < 0.893365
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1599353331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.825672 +/- 0.00284738 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.825672 @ 95%CL (1 toyMC)
median expected limit: r < 0.825672 @ 95%CL (1 toyMC)
   68% expected band : 0.825672 < r < 0.825672
   95% expected band : 0.825672 < r < 0.825672
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 102549
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.75648 +/- 0.0033733 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.75648 @ 95%CL (1 toyMC)
median expected limit: r < 0.75648 @ 95%CL (1 toyMC)
   68% expected band : 0.75648 < r < 0.75648
   95% expected band : 0.75648 < r < 0.75648
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -519640105
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00651 +/- 0.0032538 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.00651 @ 95%CL (1 toyMC)
median expected limit: r < 1.00651 @ 95%CL (1 toyMC)
   68% expected band : 1.00651 < r < 1.00651
   95% expected band : 1.00651 < r < 1.00651
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1317750387
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.9185 +/- 0.00316878 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.9185 @ 95%CL (1 toyMC)
median expected limit: r < 1.9185 @ 95%CL (1 toyMC)
   68% expected band : 1.9185 < r < 1.9185
   95% expected band : 1.9185 < r < 1.9185
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1836505533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.78619 +/- 0.00321661 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.78619 @ 95%CL (1 toyMC)
median expected limit: r < 0.78619 @ 95%CL (1 toyMC)
   68% expected band : 0.78619 < r < 0.78619
   95% expected band : 0.78619 < r < 0.78619
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -369370966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01866 +/- 0.00354392 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.01866 @ 95%CL (1 toyMC)
median expected limit: r < 1.01866 @ 95%CL (1 toyMC)
   68% expected band : 1.01866 < r < 1.01866
   95% expected band : 1.01866 < r < 1.01866
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1222121095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.992128 +/- 0.00322795 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.992128 @ 95%CL (1 toyMC)
median expected limit: r < 0.992128 @ 95%CL (1 toyMC)
   68% expected band : 0.992128 < r < 0.992128
   95% expected band : 0.992128 < r < 0.992128
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1477139859
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.798824 +/- 0.00318156 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.798824 @ 95%CL (1 toyMC)
median expected limit: r < 0.798824 @ 95%CL (1 toyMC)
   68% expected band : 0.798824 < r < 0.798824
   95% expected band : 0.798824 < r < 0.798824
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 260792507
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.758907 +/- 0.00329509 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.758907 @ 95%CL (1 toyMC)
median expected limit: r < 0.758907 @ 95%CL (1 toyMC)
   68% expected band : 0.758907 < r < 0.758907
   95% expected band : 0.758907 < r < 0.758907
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1163623542
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.918755 +/- 0.00338852 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.918755 @ 95%CL (1 toyMC)
median expected limit: r < 0.918755 @ 95%CL (1 toyMC)
   68% expected band : 0.918755 < r < 0.918755
   95% expected band : 0.918755 < r < 0.918755
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -461293384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04824 +/- 0.00318135 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04824 @ 95%CL (1 toyMC)
median expected limit: r < 1.04824 @ 95%CL (1 toyMC)
   68% expected band : 1.04824 < r < 1.04824
   95% expected band : 1.04824 < r < 1.04824
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -785166616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27636 +/- 0.00398485 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.27636 @ 95%CL (1 toyMC)
median expected limit: r < 1.27636 @ 95%CL (1 toyMC)
   68% expected band : 1.27636 < r < 1.27636
   95% expected band : 1.27636 < r < 1.27636
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1722145452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.774382 +/- 0.00338921 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.774382 @ 95%CL (1 toyMC)
median expected limit: r < 0.774382 @ 95%CL (1 toyMC)
   68% expected band : 0.774382 < r < 0.774382
   95% expected band : 0.774382 < r < 0.774382
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 926346000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08286 +/- 0.00403355 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.08286 @ 95%CL (1 toyMC)
median expected limit: r < 1.08286 @ 95%CL (1 toyMC)
   68% expected band : 1.08286 < r < 1.08286
   95% expected band : 1.08286 < r < 1.08286
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1921418086
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.775055 +/- 0.00441142 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.775055 @ 95%CL (1 toyMC)
median expected limit: r < 0.775055 @ 95%CL (1 toyMC)
   68% expected band : 0.775055 < r < 0.775055
   95% expected band : 0.775055 < r < 0.775055
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1372086840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.70591 +/- 0.00325138 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.70591 @ 95%CL (1 toyMC)
median expected limit: r < 0.70591 @ 95%CL (1 toyMC)
   68% expected band : 0.70591 < r < 0.70591
   95% expected band : 0.70591 < r < 0.70591
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1314755339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.701001 +/- 0.00355828 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.701001 @ 95%CL (1 toyMC)
median expected limit: r < 0.701001 @ 95%CL (1 toyMC)
   68% expected band : 0.701001 < r < 0.701001
   95% expected band : 0.701001 < r < 0.701001
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1354737401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.864162 +/- 0.00396873 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.864162 @ 95%CL (1 toyMC)
median expected limit: r < 0.864162 @ 95%CL (1 toyMC)
   68% expected band : 0.864162 < r < 0.864162
   95% expected band : 0.864162 < r < 0.864162
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1011829074.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1033978708.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1106402653.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1163623542.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1222121095.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1248685447.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-134961369.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1354737401.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1372086840.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1381757804.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1432332290.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1459985706.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1522121230.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1592964243.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1599353331.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1611433522.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1619844026.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1722145452.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1762662517.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1777040271.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1795536071.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1836505533.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1839903664.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-1920321896.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-2007011609.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-2007335903.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-2059646542.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-250298108.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-304845704.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-323950260.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-336111196.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-369370966.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-412492282.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-41343332.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-425577565.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-44840900.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-461293384.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-519640105.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-524575206.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-572868008.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-579103052.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-667597375.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-693080362.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-699774264.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-727980399.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-785166616.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-845477634.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-854541480.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-982575132.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.102549.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1047708472.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.107729190.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1230933018.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1271089595.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1276507739.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1289267368.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1290550576.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1314755339.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1317750387.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1332198755.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1368782093.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1433356204.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1477139859.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1625728489.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1647106041.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1749831891.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1777941858.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1789954918.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1846047323.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1882608314.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1921418086.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1950161526.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1968204886.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.2000987982.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.2006179276.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.2058197320.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.2060754471.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.2123604283.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.2128031207.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.2128857071.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.246877189.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.260792507.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.286849386.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.323640915.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.364643025.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.448163735.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.460092956.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.485042597.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.534546041.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.548951535.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.642492492.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.670710133.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.713949537.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.722672103.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.777333485.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.834753515.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.890674276.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.902298193.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.926346000.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.958218739.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -838918189
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21846 +/- 0.00332704 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.21846 @ 95%CL (1 toyMC)
median expected limit: r < 1.21846 @ 95%CL (1 toyMC)
   68% expected band : 1.21846 < r < 1.21846
   95% expected band : 1.21846 < r < 1.21846
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -528525382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1149 +/- 0.00429899 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1149 @ 95%CL (1 toyMC)
median expected limit: r < 1.1149 @ 95%CL (1 toyMC)
   68% expected band : 1.1149 < r < 1.1149
   95% expected band : 1.1149 < r < 1.1149
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2147342346
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.778034 +/- 0.00372466 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.778034 @ 95%CL (1 toyMC)
median expected limit: r < 0.778034 @ 95%CL (1 toyMC)
   68% expected band : 0.778034 < r < 0.778034
   95% expected band : 0.778034 < r < 0.778034
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 312990342
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.849242 +/- 0.0040051 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.849242 @ 95%CL (1 toyMC)
median expected limit: r < 0.849242 @ 95%CL (1 toyMC)
   68% expected band : 0.849242 < r < 0.849242
   95% expected band : 0.849242 < r < 0.849242
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1088249462
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12269 +/- 0.00414855 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.12269 @ 95%CL (1 toyMC)
median expected limit: r < 1.12269 @ 95%CL (1 toyMC)
   68% expected band : 1.12269 < r < 1.12269
   95% expected band : 1.12269 < r < 1.12269
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 159851043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.776678 +/- 0.00346826 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.776678 @ 95%CL (1 toyMC)
median expected limit: r < 0.776678 @ 95%CL (1 toyMC)
   68% expected band : 0.776678 < r < 0.776678
   95% expected band : 0.776678 < r < 0.776678
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1983386324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02334 +/- 0.00360783 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.02334 @ 95%CL (1 toyMC)
median expected limit: r < 1.02334 @ 95%CL (1 toyMC)
   68% expected band : 1.02334 < r < 1.02334
   95% expected band : 1.02334 < r < 1.02334
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -12684460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.981582 +/- 0.00315891 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.981582 @ 95%CL (1 toyMC)
median expected limit: r < 0.981582 @ 95%CL (1 toyMC)
   68% expected band : 0.981582 < r < 0.981582
   95% expected band : 0.981582 < r < 0.981582
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1255402115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.861301 +/- 0.00294198 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.861301 @ 95%CL (1 toyMC)
median expected limit: r < 0.861301 @ 95%CL (1 toyMC)
   68% expected band : 0.861301 < r < 0.861301
   95% expected band : 0.861301 < r < 0.861301
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -630277537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39292 +/- 0.00388652 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.39292 @ 95%CL (1 toyMC)
median expected limit: r < 1.39292 @ 95%CL (1 toyMC)
   68% expected band : 1.39292 < r < 1.39292
   95% expected band : 1.39292 < r < 1.39292
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1875614217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.979153 +/- 0.00322478 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.979153 @ 95%CL (1 toyMC)
median expected limit: r < 0.979153 @ 95%CL (1 toyMC)
   68% expected band : 0.979153 < r < 0.979153
   95% expected band : 0.979153 < r < 0.979153
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -297603049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.84308 +/- 0.00245794 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.84308 @ 95%CL (1 toyMC)
median expected limit: r < 0.84308 @ 95%CL (1 toyMC)
   68% expected band : 0.84308 < r < 0.84308
   95% expected band : 0.84308 < r < 0.84308
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -213850770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.910617 +/- 0.00346434 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.910617 @ 95%CL (1 toyMC)
median expected limit: r < 0.910617 @ 95%CL (1 toyMC)
   68% expected band : 0.910617 < r < 0.910617
   95% expected band : 0.910617 < r < 0.910617
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1608213086
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.803652 +/- 0.00327744 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.803652 @ 95%CL (1 toyMC)
median expected limit: r < 0.803652 @ 95%CL (1 toyMC)
   68% expected band : 0.803652 < r < 0.803652
   95% expected band : 0.803652 < r < 0.803652
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1379134944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72956 +/- 0.00314076 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.72956 @ 95%CL (1 toyMC)
median expected limit: r < 1.72956 @ 95%CL (1 toyMC)
   68% expected band : 1.72956 < r < 1.72956
   95% expected band : 1.72956 < r < 1.72956
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1526303134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.822948 +/- 0.00391069 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.822948 @ 95%CL (1 toyMC)
median expected limit: r < 0.822948 @ 95%CL (1 toyMC)
   68% expected band : 0.822948 < r < 0.822948
   95% expected band : 0.822948 < r < 0.822948
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -760630551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.938816 +/- 0.00357245 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.938816 @ 95%CL (1 toyMC)
median expected limit: r < 0.938816 @ 95%CL (1 toyMC)
   68% expected band : 0.938816 < r < 0.938816
   95% expected band : 0.938816 < r < 0.938816
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1166951805
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.718691 +/- 0.0025856 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.718691 @ 95%CL (1 toyMC)
median expected limit: r < 0.718691 @ 95%CL (1 toyMC)
   68% expected band : 0.718691 < r < 0.718691
   95% expected band : 0.718691 < r < 0.718691
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -713256351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04224 +/- 0.00332048 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04224 @ 95%CL (1 toyMC)
median expected limit: r < 1.04224 @ 95%CL (1 toyMC)
   68% expected band : 1.04224 < r < 1.04224
   95% expected band : 1.04224 < r < 1.04224
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1684177019
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.783503 +/- 0.00312707 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.783503 @ 95%CL (1 toyMC)
median expected limit: r < 0.783503 @ 95%CL (1 toyMC)
   68% expected band : 0.783503 < r < 0.783503
   95% expected band : 0.783503 < r < 0.783503
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 53768606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.7742 +/- 0.00295727 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.7742 @ 95%CL (1 toyMC)
median expected limit: r < 0.7742 @ 95%CL (1 toyMC)
   68% expected band : 0.7742 < r < 0.7742
   95% expected band : 0.7742 < r < 0.7742
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1482933546
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.739182 +/- 0.0031791 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.739182 @ 95%CL (1 toyMC)
median expected limit: r < 0.739182 @ 95%CL (1 toyMC)
   68% expected band : 0.739182 < r < 0.739182
   95% expected band : 0.739182 < r < 0.739182
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -335996261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.717588 +/- 0.00299618 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.717588 @ 95%CL (1 toyMC)
median expected limit: r < 0.717588 @ 95%CL (1 toyMC)
   68% expected band : 0.717588 < r < 0.717588
   95% expected band : 0.717588 < r < 0.717588
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -251938660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10239 +/- 0.003572 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.10239 @ 95%CL (1 toyMC)
median expected limit: r < 1.10239 @ 95%CL (1 toyMC)
   68% expected band : 1.10239 < r < 1.10239
   95% expected band : 1.10239 < r < 1.10239
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -750743285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04462 +/- 0.00427187 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04462 @ 95%CL (1 toyMC)
median expected limit: r < 1.04462 @ 95%CL (1 toyMC)
   68% expected band : 1.04462 < r < 1.04462
   95% expected band : 1.04462 < r < 1.04462
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 994409349
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.929919 +/- 0.00364626 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.929919 @ 95%CL (1 toyMC)
median expected limit: r < 0.929919 @ 95%CL (1 toyMC)
   68% expected band : 0.929919 < r < 0.929919
   95% expected band : 0.929919 < r < 0.929919
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 534292574
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.89905 +/- 0.00323455 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.89905 @ 95%CL (1 toyMC)
median expected limit: r < 0.89905 @ 95%CL (1 toyMC)
   68% expected band : 0.89905 < r < 0.89905
   95% expected band : 0.89905 < r < 0.89905
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1791884452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06086 +/- 0.00375396 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.06086 @ 95%CL (1 toyMC)
median expected limit: r < 1.06086 @ 95%CL (1 toyMC)
   68% expected band : 1.06086 < r < 1.06086
   95% expected band : 1.06086 < r < 1.06086
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2087453149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16098 +/- 0.00351471 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.16098 @ 95%CL (1 toyMC)
median expected limit: r < 1.16098 @ 95%CL (1 toyMC)
   68% expected band : 1.16098 < r < 1.16098
   95% expected band : 1.16098 < r < 1.16098
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -235676634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06729 +/- 0.00340477 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.06729 @ 95%CL (1 toyMC)
median expected limit: r < 1.06729 @ 95%CL (1 toyMC)
   68% expected band : 1.06729 < r < 1.06729
   95% expected band : 1.06729 < r < 1.06729
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2120921401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.782355 +/- 0.00333205 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.782355 @ 95%CL (1 toyMC)
median expected limit: r < 0.782355 @ 95%CL (1 toyMC)
   68% expected band : 0.782355 < r < 0.782355
   95% expected band : 0.782355 < r < 0.782355
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1203591540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28771 +/- 0.00354502 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.28771 @ 95%CL (1 toyMC)
median expected limit: r < 1.28771 @ 95%CL (1 toyMC)
   68% expected band : 1.28771 < r < 1.28771
   95% expected band : 1.28771 < r < 1.28771
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 184563618
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11045 +/- 0.00324737 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.11045 @ 95%CL (1 toyMC)
median expected limit: r < 1.11045 @ 95%CL (1 toyMC)
   68% expected band : 1.11045 < r < 1.11045
   95% expected band : 1.11045 < r < 1.11045
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -72548566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.809746 +/- 0.00360032 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.809746 @ 95%CL (1 toyMC)
median expected limit: r < 0.809746 @ 95%CL (1 toyMC)
   68% expected band : 0.809746 < r < 0.809746
   95% expected band : 0.809746 < r < 0.809746
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 791813899
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.778179 +/- 0.00330019 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.778179 @ 95%CL (1 toyMC)
median expected limit: r < 0.778179 @ 95%CL (1 toyMC)
   68% expected band : 0.778179 < r < 0.778179
   95% expected band : 0.778179 < r < 0.778179
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 826904958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53727 +/- 0.00268854 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.53727 @ 95%CL (1 toyMC)
median expected limit: r < 1.53727 @ 95%CL (1 toyMC)
   68% expected band : 1.53727 < r < 1.53727
   95% expected band : 1.53727 < r < 1.53727
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -146876801
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00639 +/- 0.00312782 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.00639 @ 95%CL (1 toyMC)
median expected limit: r < 1.00639 @ 95%CL (1 toyMC)
   68% expected band : 1.00639 < r < 1.00639
   95% expected band : 1.00639 < r < 1.00639
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1165215158
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23998 +/- 0.00282731 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.23998 @ 95%CL (1 toyMC)
median expected limit: r < 1.23998 @ 95%CL (1 toyMC)
   68% expected band : 1.23998 < r < 1.23998
   95% expected band : 1.23998 < r < 1.23998
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1010592014
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4619 +/- 0.00387441 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.4619 @ 95%CL (1 toyMC)
median expected limit: r < 1.4619 @ 95%CL (1 toyMC)
   68% expected band : 1.4619 < r < 1.4619
   95% expected band : 1.4619 < r < 1.4619
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2034457031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4895 +/- 0.0038895 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.4895 @ 95%CL (1 toyMC)
median expected limit: r < 1.4895 @ 95%CL (1 toyMC)
   68% expected band : 1.4895 < r < 1.4895
   95% expected band : 1.4895 < r < 1.4895
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1066053994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.862225 +/- 0.00317621 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.862225 @ 95%CL (1 toyMC)
median expected limit: r < 0.862225 @ 95%CL (1 toyMC)
   68% expected band : 0.862225 < r < 0.862225
   95% expected band : 0.862225 < r < 0.862225
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1276324931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37005 +/- 0.00287716 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.37005 @ 95%CL (1 toyMC)
median expected limit: r < 1.37005 @ 95%CL (1 toyMC)
   68% expected band : 1.37005 < r < 1.37005
   95% expected band : 1.37005 < r < 1.37005
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -356562515
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09069 +/- 0.0034272 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09069 @ 95%CL (1 toyMC)
median expected limit: r < 1.09069 @ 95%CL (1 toyMC)
   68% expected band : 1.09069 < r < 1.09069
   95% expected band : 1.09069 < r < 1.09069
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1467138675
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.792606 +/- 0.00371388 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.792606 @ 95%CL (1 toyMC)
median expected limit: r < 0.792606 @ 95%CL (1 toyMC)
   68% expected band : 0.792606 < r < 0.792606
   95% expected band : 0.792606 < r < 0.792606
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1522532693
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0167 +/- 0.00405962 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0167 @ 95%CL (1 toyMC)
median expected limit: r < 1.0167 @ 95%CL (1 toyMC)
   68% expected band : 1.0167 < r < 1.0167
   95% expected band : 1.0167 < r < 1.0167
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 955177913
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65006 +/- 0.00290864 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.65006 @ 95%CL (1 toyMC)
median expected limit: r < 1.65006 @ 95%CL (1 toyMC)
   68% expected band : 1.65006 < r < 1.65006
   95% expected band : 1.65006 < r < 1.65006
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 424054016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.84278 +/- 0.00301322 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.84278 @ 95%CL (1 toyMC)
median expected limit: r < 0.84278 @ 95%CL (1 toyMC)
   68% expected band : 0.84278 < r < 0.84278
   95% expected band : 0.84278 < r < 0.84278
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1250581471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57679 +/- 0.00386318 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.57679 @ 95%CL (1 toyMC)
median expected limit: r < 1.57679 @ 95%CL (1 toyMC)
   68% expected band : 1.57679 < r < 1.57679
   95% expected band : 1.57679 < r < 1.57679
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2010978850
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.78914 +/- 0.00311847 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.78914 @ 95%CL (1 toyMC)
median expected limit: r < 0.78914 @ 95%CL (1 toyMC)
   68% expected band : 0.78914 < r < 0.78914
   95% expected band : 0.78914 < r < 0.78914
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1868329187
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.961653 +/- 0.00408954 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.961653 @ 95%CL (1 toyMC)
median expected limit: r < 0.961653 @ 95%CL (1 toyMC)
   68% expected band : 0.961653 < r < 0.961653
   95% expected band : 0.961653 < r < 0.961653
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1120388624
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.95404 +/- 0.00314759 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.95404 @ 95%CL (1 toyMC)
median expected limit: r < 0.95404 @ 95%CL (1 toyMC)
   68% expected band : 0.95404 < r < 0.95404
   95% expected band : 0.95404 < r < 0.95404
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1105341486
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.782812 +/- 0.00310476 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.782812 @ 95%CL (1 toyMC)
median expected limit: r < 0.782812 @ 95%CL (1 toyMC)
   68% expected band : 0.782812 < r < 0.782812
   95% expected band : 0.782812 < r < 0.782812
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -593536576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24856 +/- 0.00366336 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24856 @ 95%CL (1 toyMC)
median expected limit: r < 1.24856 @ 95%CL (1 toyMC)
   68% expected band : 1.24856 < r < 1.24856
   95% expected band : 1.24856 < r < 1.24856
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 684662508
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.801209 +/- 0.00396455 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.801209 @ 95%CL (1 toyMC)
median expected limit: r < 0.801209 @ 95%CL (1 toyMC)
   68% expected band : 0.801209 < r < 0.801209
   95% expected band : 0.801209 < r < 0.801209
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 680130397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.726231 +/- 0.00400687 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.726231 @ 95%CL (1 toyMC)
median expected limit: r < 0.726231 @ 95%CL (1 toyMC)
   68% expected band : 0.726231 < r < 0.726231
   95% expected band : 0.726231 < r < 0.726231
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -821733683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.726287 +/- 0.00394998 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.726287 @ 95%CL (1 toyMC)
median expected limit: r < 0.726287 @ 95%CL (1 toyMC)
   68% expected band : 0.726287 < r < 0.726287
   95% expected band : 0.726287 < r < 0.726287
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 988966012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.86303 +/- 0.0034806 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.86303 @ 95%CL (1 toyMC)
median expected limit: r < 0.86303 @ 95%CL (1 toyMC)
   68% expected band : 0.86303 < r < 0.86303
   95% expected band : 0.86303 < r < 0.86303
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 764285821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.898255 +/- 0.00315685 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.898255 @ 95%CL (1 toyMC)
median expected limit: r < 0.898255 @ 95%CL (1 toyMC)
   68% expected band : 0.898255 < r < 0.898255
   95% expected band : 0.898255 < r < 0.898255
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1172914890
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.724542 +/- 0.00300343 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.724542 @ 95%CL (1 toyMC)
median expected limit: r < 0.724542 @ 95%CL (1 toyMC)
   68% expected band : 0.724542 < r < 0.724542
   95% expected band : 0.724542 < r < 0.724542
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 272766607
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.730734 +/- 0.00328587 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.730734 @ 95%CL (1 toyMC)
median expected limit: r < 0.730734 @ 95%CL (1 toyMC)
   68% expected band : 0.730734 < r < 0.730734
   95% expected band : 0.730734 < r < 0.730734
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1308150786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06278 +/- 0.0036492 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.06278 @ 95%CL (1 toyMC)
median expected limit: r < 1.06278 @ 95%CL (1 toyMC)
   68% expected band : 1.06278 < r < 1.06278
   95% expected band : 1.06278 < r < 1.06278
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1271603581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.954707 +/- 0.00376457 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.954707 @ 95%CL (1 toyMC)
median expected limit: r < 0.954707 @ 95%CL (1 toyMC)
   68% expected band : 0.954707 < r < 0.954707
   95% expected band : 0.954707 < r < 0.954707
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2006994758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.85973 +/- 0.0044104 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.85973 @ 95%CL (1 toyMC)
median expected limit: r < 0.85973 @ 95%CL (1 toyMC)
   68% expected band : 0.85973 < r < 0.85973
   95% expected band : 0.85973 < r < 0.85973
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -405534076
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.874638 +/- 0.00336991 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.874638 @ 95%CL (1 toyMC)
median expected limit: r < 0.874638 @ 95%CL (1 toyMC)
   68% expected band : 0.874638 < r < 0.874638
   95% expected band : 0.874638 < r < 0.874638
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -30852426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57588 +/- 0.00411567 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.57588 @ 95%CL (1 toyMC)
median expected limit: r < 1.57588 @ 95%CL (1 toyMC)
   68% expected band : 1.57588 < r < 1.57588
   95% expected band : 1.57588 < r < 1.57588
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1068584610
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.855446 +/- 0.00352301 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.855446 @ 95%CL (1 toyMC)
median expected limit: r < 0.855446 @ 95%CL (1 toyMC)
   68% expected band : 0.855446 < r < 0.855446
   95% expected band : 0.855446 < r < 0.855446
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1075329858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.810614 +/- 0.00293444 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.810614 @ 95%CL (1 toyMC)
median expected limit: r < 0.810614 @ 95%CL (1 toyMC)
   68% expected band : 0.810614 < r < 0.810614
   95% expected band : 0.810614 < r < 0.810614
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 114007702
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01218 +/- 0.00314538 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.01218 @ 95%CL (1 toyMC)
median expected limit: r < 1.01218 @ 95%CL (1 toyMC)
   68% expected band : 1.01218 < r < 1.01218
   95% expected band : 1.01218 < r < 1.01218
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 360675048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06426 +/- 0.00352326 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.06426 @ 95%CL (1 toyMC)
median expected limit: r < 1.06426 @ 95%CL (1 toyMC)
   68% expected band : 1.06426 < r < 1.06426
   95% expected band : 1.06426 < r < 1.06426
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 693110089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.896805 +/- 0.00414321 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.896805 @ 95%CL (1 toyMC)
median expected limit: r < 0.896805 @ 95%CL (1 toyMC)
   68% expected band : 0.896805 < r < 0.896805
   95% expected band : 0.896805 < r < 0.896805
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -504978665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33357 +/- 0.0031812 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.33357 @ 95%CL (1 toyMC)
median expected limit: r < 1.33357 @ 95%CL (1 toyMC)
   68% expected band : 1.33357 < r < 1.33357
   95% expected band : 1.33357 < r < 1.33357
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 23462319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.780427 +/- 0.00324024 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.780427 @ 95%CL (1 toyMC)
median expected limit: r < 0.780427 @ 95%CL (1 toyMC)
   68% expected band : 0.780427 < r < 0.780427
   95% expected band : 0.780427 < r < 0.780427
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1524791240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.726317 +/- 0.00321268 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.726317 @ 95%CL (1 toyMC)
median expected limit: r < 0.726317 @ 95%CL (1 toyMC)
   68% expected band : 0.726317 < r < 0.726317
   95% expected band : 0.726317 < r < 0.726317
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1031774558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.726022 +/- 0.00390025 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.726022 @ 95%CL (1 toyMC)
median expected limit: r < 0.726022 @ 95%CL (1 toyMC)
   68% expected band : 0.726022 < r < 0.726022
   95% expected band : 0.726022 < r < 0.726022
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1408945374
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.781853 +/- 0.00327425 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.781853 @ 95%CL (1 toyMC)
median expected limit: r < 0.781853 @ 95%CL (1 toyMC)
   68% expected band : 0.781853 < r < 0.781853
   95% expected band : 0.781853 < r < 0.781853
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 881777596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.914831 +/- 0.00341248 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.914831 @ 95%CL (1 toyMC)
median expected limit: r < 0.914831 @ 95%CL (1 toyMC)
   68% expected band : 0.914831 < r < 0.914831
   95% expected band : 0.914831 < r < 0.914831
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1658163764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01845 +/- 0.00291812 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.01845 @ 95%CL (1 toyMC)
median expected limit: r < 1.01845 @ 95%CL (1 toyMC)
   68% expected band : 1.01845 < r < 1.01845
   95% expected band : 1.01845 < r < 1.01845
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -960849896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.848276 +/- 0.0032668 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.848276 @ 95%CL (1 toyMC)
median expected limit: r < 0.848276 @ 95%CL (1 toyMC)
   68% expected band : 0.848276 < r < 0.848276
   95% expected band : 0.848276 < r < 0.848276
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 881507118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.72594 +/- 0.00366818 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.72594 @ 95%CL (1 toyMC)
median expected limit: r < 0.72594 @ 95%CL (1 toyMC)
   68% expected band : 0.72594 < r < 0.72594
   95% expected band : 0.72594 < r < 0.72594
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 309030841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.917184 +/- 0.00353278 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.917184 @ 95%CL (1 toyMC)
median expected limit: r < 0.917184 @ 95%CL (1 toyMC)
   68% expected band : 0.917184 < r < 0.917184
   95% expected band : 0.917184 < r < 0.917184
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -492338491
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28907 +/- 0.00328825 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.28907 @ 95%CL (1 toyMC)
median expected limit: r < 1.28907 @ 95%CL (1 toyMC)
   68% expected band : 1.28907 < r < 1.28907
   95% expected band : 1.28907 < r < 1.28907
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1208359869
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.728499 +/- 0.00318265 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.728499 @ 95%CL (1 toyMC)
median expected limit: r < 0.728499 @ 95%CL (1 toyMC)
   68% expected band : 0.728499 < r < 0.728499
   95% expected band : 0.728499 < r < 0.728499
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1208359555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.869561 +/- 0.00388965 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.869561 @ 95%CL (1 toyMC)
median expected limit: r < 0.869561 @ 95%CL (1 toyMC)
   68% expected band : 0.869561 < r < 0.869561
   95% expected band : 0.869561 < r < 0.869561
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1573829894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.792639 +/- 0.0029332 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.792639 @ 95%CL (1 toyMC)
median expected limit: r < 0.792639 @ 95%CL (1 toyMC)
   68% expected band : 0.792639 < r < 0.792639
   95% expected band : 0.792639 < r < 0.792639
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1831114671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12993 +/- 0.00306875 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.12993 @ 95%CL (1 toyMC)
median expected limit: r < 1.12993 @ 95%CL (1 toyMC)
   68% expected band : 1.12993 < r < 1.12993
   95% expected band : 1.12993 < r < 1.12993
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 686640979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23038 +/- 0.0028247 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.23038 @ 95%CL (1 toyMC)
median expected limit: r < 1.23038 @ 95%CL (1 toyMC)
   68% expected band : 1.23038 < r < 1.23038
   95% expected band : 1.23038 < r < 1.23038
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 328359899
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.786298 +/- 0.00384428 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.786298 @ 95%CL (1 toyMC)
median expected limit: r < 0.786298 @ 95%CL (1 toyMC)
   68% expected band : 0.786298 < r < 0.786298
   95% expected band : 0.786298 < r < 0.786298
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1826437639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32739 +/- 0.00340832 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.32739 @ 95%CL (1 toyMC)
median expected limit: r < 1.32739 @ 95%CL (1 toyMC)
   68% expected band : 1.32739 < r < 1.32739
   95% expected band : 1.32739 < r < 1.32739
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -394065249
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.723431 +/- 0.00314458 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.723431 @ 95%CL (1 toyMC)
median expected limit: r < 0.723431 @ 95%CL (1 toyMC)
   68% expected band : 0.723431 < r < 0.723431
   95% expected band : 0.723431 < r < 0.723431
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1150173322
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.851433 +/- 0.00426551 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.851433 @ 95%CL (1 toyMC)
median expected limit: r < 0.851433 @ 95%CL (1 toyMC)
   68% expected band : 0.851433 < r < 0.851433
   95% expected band : 0.851433 < r < 0.851433
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1379217687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.723724 +/- 0.00323119 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.723724 @ 95%CL (1 toyMC)
median expected limit: r < 0.723724 @ 95%CL (1 toyMC)
   68% expected band : 0.723724 < r < 0.723724
   95% expected band : 0.723724 < r < 0.723724
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -206263592
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.728216 +/- 0.0034741 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.728216 @ 95%CL (1 toyMC)
median expected limit: r < 0.728216 @ 95%CL (1 toyMC)
   68% expected band : 0.728216 < r < 0.728216
   95% expected band : 0.728216 < r < 0.728216
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1932126277
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85513 +/- 0.00401411 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.85513 @ 95%CL (1 toyMC)
median expected limit: r < 1.85513 @ 95%CL (1 toyMC)
   68% expected band : 1.85513 < r < 1.85513
   95% expected band : 1.85513 < r < 1.85513
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1794579080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.786568 +/- 0.00341353 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.786568 @ 95%CL (1 toyMC)
median expected limit: r < 0.786568 @ 95%CL (1 toyMC)
   68% expected band : 0.786568 < r < 0.786568
   95% expected band : 0.786568 < r < 0.786568
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -651986679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.722238 +/- 0.0033488 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.722238 @ 95%CL (1 toyMC)
median expected limit: r < 0.722238 @ 95%CL (1 toyMC)
   68% expected band : 0.722238 < r < 0.722238
   95% expected band : 0.722238 < r < 0.722238
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1919246922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.725655 +/- 0.00372588 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.725655 @ 95%CL (1 toyMC)
median expected limit: r < 0.725655 @ 95%CL (1 toyMC)
   68% expected band : 0.725655 < r < 0.725655
   95% expected band : 0.725655 < r < 0.725655
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -697109819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08291 +/- 0.00386475 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.08291 @ 95%CL (1 toyMC)
median expected limit: r < 1.08291 @ 95%CL (1 toyMC)
   68% expected band : 1.08291 < r < 1.08291
   95% expected band : 1.08291 < r < 1.08291
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -572060953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.723006 +/- 0.0034956 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.723006 @ 95%CL (1 toyMC)
median expected limit: r < 0.723006 @ 95%CL (1 toyMC)
   68% expected band : 0.723006 < r < 0.723006
   95% expected band : 0.723006 < r < 0.723006
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1038592011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31795 +/- 0.00318576 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.31795 @ 95%CL (1 toyMC)
median expected limit: r < 1.31795 @ 95%CL (1 toyMC)
   68% expected band : 1.31795 < r < 1.31795
   95% expected band : 1.31795 < r < 1.31795
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 125168636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.736527 +/- 0.00349526 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.736527 @ 95%CL (1 toyMC)
median expected limit: r < 0.736527 @ 95%CL (1 toyMC)
   68% expected band : 0.736527 < r < 0.736527
   95% expected band : 0.736527 < r < 0.736527
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1031774558.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1038592011.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1068584610.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1088249462.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1166951805.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1208359869.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-12684460.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1276324931.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1308150786.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1379134944.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1408945374.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-146876801.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1482933546.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1522532693.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1524791240.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1684177019.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1794579080.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1831114671.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1868329187.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1932126277.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-2034457031.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-206263592.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-2087453149.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-213850770.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-235676634.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-251938660.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-297603049.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-30852426.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-335996261.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-356562515.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-394065249.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-405534076.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-492338491.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-504978665.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-528525382.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-572060953.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-593536576.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-630277537.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-651986679.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-697109819.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-713256351.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-72548566.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-750743285.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-760630551.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-821733683.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-838918189.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-960849896.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.1010592014.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.1066053994.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.1075329858.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1105341486.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1120388624.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.114007702.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1150173322.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1165215158.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1172914890.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1203591540.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1208359555.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1250581471.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.125168636.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1255402115.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1271603581.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1379217687.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1467138675.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1526303134.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1573829894.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.159851043.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1608213086.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1658163764.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1791884452.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1826437639.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.184563618.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1875614217.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1919246922.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.1983386324.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.2006994758.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.2010978850.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.2120921401.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.2147342346.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.23462319.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.272766607.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.309030841.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.312990342.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.328359899.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.360675048.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.424054016.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.534292574.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.53768606.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.680130397.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.684662508.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.686640979.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.693110089.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.764285821.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.791813899.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.826904958.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.881507118.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.881777596.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.955177913.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.988966012.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.994409349.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 963970362
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41698 +/- 0.00339199 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.41698 @ 95%CL (1 toyMC)
median expected limit: r < 1.41698 @ 95%CL (1 toyMC)
   68% expected band : 1.41698 < r < 1.41698
   95% expected band : 1.41698 < r < 1.41698
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1609386524
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.762284 +/- 0.00312185 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.762284 @ 95%CL (1 toyMC)
median expected limit: r < 0.762284 @ 95%CL (1 toyMC)
   68% expected band : 0.762284 < r < 0.762284
   95% expected band : 0.762284 < r < 0.762284
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1162049830
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02852 +/- 0.00379131 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.02852 @ 95%CL (1 toyMC)
median expected limit: r < 1.02852 @ 95%CL (1 toyMC)
   68% expected band : 1.02852 < r < 1.02852
   95% expected band : 1.02852 < r < 1.02852
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1953336575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.766889 +/- 0.00319785 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.766889 @ 95%CL (1 toyMC)
median expected limit: r < 0.766889 @ 95%CL (1 toyMC)
   68% expected band : 0.766889 < r < 0.766889
   95% expected band : 0.766889 < r < 0.766889
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1390543074
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52868 +/- 0.0038009 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.52868 @ 95%CL (1 toyMC)
median expected limit: r < 1.52868 @ 95%CL (1 toyMC)
   68% expected band : 1.52868 < r < 1.52868
   95% expected band : 1.52868 < r < 1.52868
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1768708521
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.915258 +/- 0.00392281 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.915258 @ 95%CL (1 toyMC)
median expected limit: r < 0.915258 @ 95%CL (1 toyMC)
   68% expected band : 0.915258 < r < 0.915258
   95% expected band : 0.915258 < r < 0.915258
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -451687963
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.857663 +/- 0.00350316 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.857663 @ 95%CL (1 toyMC)
median expected limit: r < 0.857663 @ 95%CL (1 toyMC)
   68% expected band : 0.857663 < r < 0.857663
   95% expected band : 0.857663 < r < 0.857663
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 475764345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.95784 +/- 0.0037698 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.95784 @ 95%CL (1 toyMC)
median expected limit: r < 0.95784 @ 95%CL (1 toyMC)
   68% expected band : 0.95784 < r < 0.95784
   95% expected band : 0.95784 < r < 0.95784
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1103071377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50035 +/- 0.00324294 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.50035 @ 95%CL (1 toyMC)
median expected limit: r < 1.50035 @ 95%CL (1 toyMC)
   68% expected band : 1.50035 < r < 1.50035
   95% expected band : 1.50035 < r < 1.50035
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1885709550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00807 +/- 0.00338497 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.00807 @ 95%CL (1 toyMC)
median expected limit: r < 1.00807 @ 95%CL (1 toyMC)
   68% expected band : 1.00807 < r < 1.00807
   95% expected band : 1.00807 < r < 1.00807
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -545001925
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.88336 +/- 0.00365776 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.88336 @ 95%CL (1 toyMC)
median expected limit: r < 0.88336 @ 95%CL (1 toyMC)
   68% expected band : 0.88336 < r < 0.88336
   95% expected band : 0.88336 < r < 0.88336
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -207123281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27489 +/- 0.00346167 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.27489 @ 95%CL (1 toyMC)
median expected limit: r < 1.27489 @ 95%CL (1 toyMC)
   68% expected band : 1.27489 < r < 1.27489
   95% expected band : 1.27489 < r < 1.27489
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1275426728
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.827053 +/- 0.0031406 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.827053 @ 95%CL (1 toyMC)
median expected limit: r < 0.827053 @ 95%CL (1 toyMC)
   68% expected band : 0.827053 < r < 0.827053
   95% expected band : 0.827053 < r < 0.827053
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -153786087
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25625 +/- 0.00473258 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.25625 @ 95%CL (1 toyMC)
median expected limit: r < 1.25625 @ 95%CL (1 toyMC)
   68% expected band : 1.25625 < r < 1.25625
   95% expected band : 1.25625 < r < 1.25625
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 487418581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.756637 +/- 0.00261121 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.756637 @ 95%CL (1 toyMC)
median expected limit: r < 0.756637 @ 95%CL (1 toyMC)
   68% expected band : 0.756637 < r < 0.756637
   95% expected band : 0.756637 < r < 0.756637
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -155591631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24739 +/- 0.00372265 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.24739 @ 95%CL (1 toyMC)
median expected limit: r < 1.24739 @ 95%CL (1 toyMC)
   68% expected band : 1.24739 < r < 1.24739
   95% expected band : 1.24739 < r < 1.24739
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1229621212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.754248 +/- 0.00325627 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.754248 @ 95%CL (1 toyMC)
median expected limit: r < 0.754248 @ 95%CL (1 toyMC)
   68% expected band : 0.754248 < r < 0.754248
   95% expected band : 0.754248 < r < 0.754248
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1969826192
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.76559 +/- 0.00392638 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.76559 @ 95%CL (1 toyMC)
median expected limit: r < 0.76559 @ 95%CL (1 toyMC)
   68% expected band : 0.76559 < r < 0.76559
   95% expected band : 0.76559 < r < 0.76559
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2120303609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.997641 +/- 0.00354925 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.997641 @ 95%CL (1 toyMC)
median expected limit: r < 0.997641 @ 95%CL (1 toyMC)
   68% expected band : 0.997641 < r < 0.997641
   95% expected band : 0.997641 < r < 0.997641
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 838797074
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12056 +/- 0.00343159 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.12056 @ 95%CL (1 toyMC)
median expected limit: r < 2.12056 @ 95%CL (1 toyMC)
   68% expected band : 2.12056 < r < 2.12056
   95% expected band : 2.12056 < r < 2.12056
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 301720428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07354 +/- 0.00478236 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.07354 @ 95%CL (1 toyMC)
median expected limit: r < 1.07354 @ 95%CL (1 toyMC)
   68% expected band : 1.07354 < r < 1.07354
   95% expected band : 1.07354 < r < 1.07354
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1828805653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42302 +/- 0.00427726 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.42302 @ 95%CL (1 toyMC)
median expected limit: r < 1.42302 @ 95%CL (1 toyMC)
   68% expected band : 1.42302 < r < 1.42302
   95% expected band : 1.42302 < r < 1.42302
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -682434564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.76078 +/- 0.00345387 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.76078 @ 95%CL (1 toyMC)
median expected limit: r < 0.76078 @ 95%CL (1 toyMC)
   68% expected band : 0.76078 < r < 0.76078
   95% expected band : 0.76078 < r < 0.76078
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1025448886
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.946257 +/- 0.00286495 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.946257 @ 95%CL (1 toyMC)
median expected limit: r < 0.946257 @ 95%CL (1 toyMC)
   68% expected band : 0.946257 < r < 0.946257
   95% expected band : 0.946257 < r < 0.946257
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1831097242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.884297 +/- 0.00382887 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.884297 @ 95%CL (1 toyMC)
median expected limit: r < 0.884297 @ 95%CL (1 toyMC)
   68% expected band : 0.884297 < r < 0.884297
   95% expected band : 0.884297 < r < 0.884297
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1234178542
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.750156 +/- 0.00378075 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.750156 @ 95%CL (1 toyMC)
median expected limit: r < 0.750156 @ 95%CL (1 toyMC)
   68% expected band : 0.750156 < r < 0.750156
   95% expected band : 0.750156 < r < 0.750156
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -218025546
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2251 +/- 0.00385588 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.2251 @ 95%CL (1 toyMC)
median expected limit: r < 1.2251 @ 95%CL (1 toyMC)
   68% expected band : 1.2251 < r < 1.2251
   95% expected band : 1.2251 < r < 1.2251
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2126321386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.943603 +/- 0.00441173 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.943603 @ 95%CL (1 toyMC)
median expected limit: r < 0.943603 @ 95%CL (1 toyMC)
   68% expected band : 0.943603 < r < 0.943603
   95% expected band : 0.943603 < r < 0.943603
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 283783149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69062 +/- 0.00399835 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.69062 @ 95%CL (1 toyMC)
median expected limit: r < 1.69062 @ 95%CL (1 toyMC)
   68% expected band : 1.69062 < r < 1.69062
   95% expected band : 1.69062 < r < 1.69062
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 504821719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16623 +/- 0.00425088 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.16623 @ 95%CL (1 toyMC)
median expected limit: r < 1.16623 @ 95%CL (1 toyMC)
   68% expected band : 1.16623 < r < 1.16623
   95% expected band : 1.16623 < r < 1.16623
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 83602698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06189 +/- 0.00322899 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.06189 @ 95%CL (1 toyMC)
median expected limit: r < 1.06189 @ 95%CL (1 toyMC)
   68% expected band : 1.06189 < r < 1.06189
   95% expected band : 1.06189 < r < 1.06189
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 859281634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.863678 +/- 0.00354413 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.863678 @ 95%CL (1 toyMC)
median expected limit: r < 0.863678 @ 95%CL (1 toyMC)
   68% expected band : 0.863678 < r < 0.863678
   95% expected band : 0.863678 < r < 0.863678
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1215140407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51554 +/- 0.00358683 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.51554 @ 95%CL (1 toyMC)
median expected limit: r < 1.51554 @ 95%CL (1 toyMC)
   68% expected band : 1.51554 < r < 1.51554
   95% expected band : 1.51554 < r < 1.51554
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -49945987
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05834 +/- 0.00377092 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.05834 @ 95%CL (1 toyMC)
median expected limit: r < 1.05834 @ 95%CL (1 toyMC)
   68% expected band : 1.05834 < r < 1.05834
   95% expected band : 1.05834 < r < 1.05834
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -834555695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.831806 +/- 0.0048076 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.831806 @ 95%CL (1 toyMC)
median expected limit: r < 0.831806 @ 95%CL (1 toyMC)
   68% expected band : 0.831806 < r < 0.831806
   95% expected band : 0.831806 < r < 0.831806
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 353302165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21921 +/- 0.00332245 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.21921 @ 95%CL (1 toyMC)
median expected limit: r < 1.21921 @ 95%CL (1 toyMC)
   68% expected band : 1.21921 < r < 1.21921
   95% expected band : 1.21921 < r < 1.21921
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1928308142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.761929 +/- 0.00313877 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.761929 @ 95%CL (1 toyMC)
median expected limit: r < 0.761929 @ 95%CL (1 toyMC)
   68% expected band : 0.761929 < r < 0.761929
   95% expected band : 0.761929 < r < 0.761929
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1284275091
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.963796 +/- 0.0033829 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.963796 @ 95%CL (1 toyMC)
median expected limit: r < 0.963796 @ 95%CL (1 toyMC)
   68% expected band : 0.963796 < r < 0.963796
   95% expected band : 0.963796 < r < 0.963796
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -675672940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2549 +/- 0.00351965 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.2549 @ 95%CL (1 toyMC)
median expected limit: r < 1.2549 @ 95%CL (1 toyMC)
   68% expected band : 1.2549 < r < 1.2549
   95% expected band : 1.2549 < r < 1.2549
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 511599709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.773528 +/- 0.00324083 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.773528 @ 95%CL (1 toyMC)
median expected limit: r < 0.773528 @ 95%CL (1 toyMC)
   68% expected band : 0.773528 < r < 0.773528
   95% expected band : 0.773528 < r < 0.773528
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1002304003
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.755441 +/- 0.00325981 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.755441 @ 95%CL (1 toyMC)
median expected limit: r < 0.755441 @ 95%CL (1 toyMC)
   68% expected band : 0.755441 < r < 0.755441
   95% expected band : 0.755441 < r < 0.755441
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1632742052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0736 +/- 0.00345314 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.0736 @ 95%CL (1 toyMC)
median expected limit: r < 1.0736 @ 95%CL (1 toyMC)
   68% expected band : 1.0736 < r < 1.0736
   95% expected band : 1.0736 < r < 1.0736
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1325432115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.90335 +/- 0.00308317 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.90335 @ 95%CL (1 toyMC)
median expected limit: r < 0.90335 @ 95%CL (1 toyMC)
   68% expected band : 0.90335 < r < 0.90335
   95% expected band : 0.90335 < r < 0.90335
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2120983098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05751 +/- 0.0039154 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05751 @ 95%CL (1 toyMC)
median expected limit: r < 1.05751 @ 95%CL (1 toyMC)
   68% expected band : 1.05751 < r < 1.05751
   95% expected band : 1.05751 < r < 1.05751
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1231678336
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.947588 +/- 0.00319471 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.947588 @ 95%CL (1 toyMC)
median expected limit: r < 0.947588 @ 95%CL (1 toyMC)
   68% expected band : 0.947588 < r < 0.947588
   95% expected band : 0.947588 < r < 0.947588
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 262069953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06297 +/- 0.00373572 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.06297 @ 95%CL (1 toyMC)
median expected limit: r < 1.06297 @ 95%CL (1 toyMC)
   68% expected band : 1.06297 < r < 1.06297
   95% expected band : 1.06297 < r < 1.06297
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 897243110
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54389 +/- 0.00395378 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.54389 @ 95%CL (1 toyMC)
median expected limit: r < 1.54389 @ 95%CL (1 toyMC)
   68% expected band : 1.54389 < r < 1.54389
   95% expected band : 1.54389 < r < 1.54389
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -284301026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.840576 +/- 0.00324451 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.840576 @ 95%CL (1 toyMC)
median expected limit: r < 0.840576 @ 95%CL (1 toyMC)
   68% expected band : 0.840576 < r < 0.840576
   95% expected band : 0.840576 < r < 0.840576
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1281926225
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.758792 +/- 0.00390854 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.758792 @ 95%CL (1 toyMC)
median expected limit: r < 0.758792 @ 95%CL (1 toyMC)
   68% expected band : 0.758792 < r < 0.758792
   95% expected band : 0.758792 < r < 0.758792
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1300561211
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01119 +/- 0.00330189 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.01119 @ 95%CL (1 toyMC)
median expected limit: r < 1.01119 @ 95%CL (1 toyMC)
   68% expected band : 1.01119 < r < 1.01119
   95% expected band : 1.01119 < r < 1.01119
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -146791325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.753249 +/- 0.00321444 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.753249 @ 95%CL (1 toyMC)
median expected limit: r < 0.753249 @ 95%CL (1 toyMC)
   68% expected band : 0.753249 < r < 0.753249
   95% expected band : 0.753249 < r < 0.753249
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 282215973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.855038 +/- 0.0033063 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.855038 @ 95%CL (1 toyMC)
median expected limit: r < 0.855038 @ 95%CL (1 toyMC)
   68% expected band : 0.855038 < r < 0.855038
   95% expected band : 0.855038 < r < 0.855038
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -994002759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38888 +/- 0.00302771 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.38888 @ 95%CL (1 toyMC)
median expected limit: r < 1.38888 @ 95%CL (1 toyMC)
   68% expected band : 1.38888 < r < 1.38888
   95% expected band : 1.38888 < r < 1.38888
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1120378034
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41225 +/- 0.00424982 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.41225 @ 95%CL (1 toyMC)
median expected limit: r < 1.41225 @ 95%CL (1 toyMC)
   68% expected band : 1.41225 < r < 1.41225
   95% expected band : 1.41225 < r < 1.41225
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -565084376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15704 +/- 0.00396964 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.15704 @ 95%CL (1 toyMC)
median expected limit: r < 1.15704 @ 95%CL (1 toyMC)
   68% expected band : 1.15704 < r < 1.15704
   95% expected band : 1.15704 < r < 1.15704
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1593698664
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.95434 +/- 0.00333554 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.95434 @ 95%CL (1 toyMC)
median expected limit: r < 0.95434 @ 95%CL (1 toyMC)
   68% expected band : 0.95434 < r < 0.95434
   95% expected band : 0.95434 < r < 0.95434
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1931977676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.833632 +/- 0.00285025 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.833632 @ 95%CL (1 toyMC)
median expected limit: r < 0.833632 @ 95%CL (1 toyMC)
   68% expected band : 0.833632 < r < 0.833632
   95% expected band : 0.833632 < r < 0.833632
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1660706417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.843081 +/- 0.00420321 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.843081 @ 95%CL (1 toyMC)
median expected limit: r < 0.843081 @ 95%CL (1 toyMC)
   68% expected band : 0.843081 < r < 0.843081
   95% expected band : 0.843081 < r < 0.843081
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2014186851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.843347 +/- 0.00389643 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.843347 @ 95%CL (1 toyMC)
median expected limit: r < 0.843347 @ 95%CL (1 toyMC)
   68% expected band : 0.843347 < r < 0.843347
   95% expected band : 0.843347 < r < 0.843347
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -700673782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.864634 +/- 0.00395384 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.864634 @ 95%CL (1 toyMC)
median expected limit: r < 0.864634 @ 95%CL (1 toyMC)
   68% expected band : 0.864634 < r < 0.864634
   95% expected band : 0.864634 < r < 0.864634
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -96056687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.839637 +/- 0.00444446 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.839637 @ 95%CL (1 toyMC)
median expected limit: r < 0.839637 @ 95%CL (1 toyMC)
   68% expected band : 0.839637 < r < 0.839637
   95% expected band : 0.839637 < r < 0.839637
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1000810775
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.759909 +/- 0.00379236 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.759909 @ 95%CL (1 toyMC)
median expected limit: r < 0.759909 @ 95%CL (1 toyMC)
   68% expected band : 0.759909 < r < 0.759909
   95% expected band : 0.759909 < r < 0.759909
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1343178159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.765198 +/- 0.00286601 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.765198 @ 95%CL (1 toyMC)
median expected limit: r < 0.765198 @ 95%CL (1 toyMC)
   68% expected band : 0.765198 < r < 0.765198
   95% expected band : 0.765198 < r < 0.765198
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -930746114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.761922 +/- 0.00338189 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.761922 @ 95%CL (1 toyMC)
median expected limit: r < 0.761922 @ 95%CL (1 toyMC)
   68% expected band : 0.761922 < r < 0.761922
   95% expected band : 0.761922 < r < 0.761922
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1596648450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00243 +/- 0.00292993 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.00243 @ 95%CL (1 toyMC)
median expected limit: r < 1.00243 @ 95%CL (1 toyMC)
   68% expected band : 1.00243 < r < 1.00243
   95% expected band : 1.00243 < r < 1.00243
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 714351884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.765273 +/- 0.00401663 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.765273 @ 95%CL (1 toyMC)
median expected limit: r < 0.765273 @ 95%CL (1 toyMC)
   68% expected band : 0.765273 < r < 0.765273
   95% expected band : 0.765273 < r < 0.765273
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1422994831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.858048 +/- 0.0035561 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.858048 @ 95%CL (1 toyMC)
median expected limit: r < 0.858048 @ 95%CL (1 toyMC)
   68% expected band : 0.858048 < r < 0.858048
   95% expected band : 0.858048 < r < 0.858048
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1786008083
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.828092 +/- 0.00294163 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.828092 @ 95%CL (1 toyMC)
median expected limit: r < 0.828092 @ 95%CL (1 toyMC)
   68% expected band : 0.828092 < r < 0.828092
   95% expected band : 0.828092 < r < 0.828092
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1917622483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.983409 +/- 0.00347939 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.983409 @ 95%CL (1 toyMC)
median expected limit: r < 0.983409 @ 95%CL (1 toyMC)
   68% expected band : 0.983409 < r < 0.983409
   95% expected band : 0.983409 < r < 0.983409
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1788888107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26784 +/- 0.00391821 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26784 @ 95%CL (1 toyMC)
median expected limit: r < 1.26784 @ 95%CL (1 toyMC)
   68% expected band : 1.26784 < r < 1.26784
   95% expected band : 1.26784 < r < 1.26784
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1586841790
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.988404 +/- 0.00475825 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.988404 @ 95%CL (1 toyMC)
median expected limit: r < 0.988404 @ 95%CL (1 toyMC)
   68% expected band : 0.988404 < r < 0.988404
   95% expected band : 0.988404 < r < 0.988404
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -785994579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.833205 +/- 0.00333121 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.833205 @ 95%CL (1 toyMC)
median expected limit: r < 0.833205 @ 95%CL (1 toyMC)
   68% expected band : 0.833205 < r < 0.833205
   95% expected band : 0.833205 < r < 0.833205
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1696145541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67642 +/- 0.00349664 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.67642 @ 95%CL (1 toyMC)
median expected limit: r < 1.67642 @ 95%CL (1 toyMC)
   68% expected band : 1.67642 < r < 1.67642
   95% expected band : 1.67642 < r < 1.67642
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1468056007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05745 +/- 0.00400883 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05745 @ 95%CL (1 toyMC)
median expected limit: r < 1.05745 @ 95%CL (1 toyMC)
   68% expected band : 1.05745 < r < 1.05745
   95% expected band : 1.05745 < r < 1.05745
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 647277389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.8362 +/- 0.00430364 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.8362 @ 95%CL (1 toyMC)
median expected limit: r < 0.8362 @ 95%CL (1 toyMC)
   68% expected band : 0.8362 < r < 0.8362
   95% expected band : 0.8362 < r < 0.8362
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1055091413
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.866398 +/- 0.00330397 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.866398 @ 95%CL (1 toyMC)
median expected limit: r < 0.866398 @ 95%CL (1 toyMC)
   68% expected band : 0.866398 < r < 0.866398
   95% expected band : 0.866398 < r < 0.866398
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1595521469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04339 +/- 0.00398033 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04339 @ 95%CL (1 toyMC)
median expected limit: r < 1.04339 @ 95%CL (1 toyMC)
   68% expected band : 1.04339 < r < 1.04339
   95% expected band : 1.04339 < r < 1.04339
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -758761816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01933 +/- 0.00332296 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.01933 @ 95%CL (1 toyMC)
median expected limit: r < 1.01933 @ 95%CL (1 toyMC)
   68% expected band : 1.01933 < r < 1.01933
   95% expected band : 1.01933 < r < 1.01933
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 205801622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1035 +/- 0.00362967 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.1035 @ 95%CL (1 toyMC)
median expected limit: r < 1.1035 @ 95%CL (1 toyMC)
   68% expected band : 1.1035 < r < 1.1035
   95% expected band : 1.1035 < r < 1.1035
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1777725643
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.998613 +/- 0.00322232 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.998613 @ 95%CL (1 toyMC)
median expected limit: r < 0.998613 @ 95%CL (1 toyMC)
   68% expected band : 0.998613 < r < 0.998613
   95% expected band : 0.998613 < r < 0.998613
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1031656592
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11576 +/- 0.00384027 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.11576 @ 95%CL (1 toyMC)
median expected limit: r < 1.11576 @ 95%CL (1 toyMC)
   68% expected band : 1.11576 < r < 1.11576
   95% expected band : 1.11576 < r < 1.11576
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -809387482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.62518 +/- 0.00335052 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.62518 @ 95%CL (1 toyMC)
median expected limit: r < 1.62518 @ 95%CL (1 toyMC)
   68% expected band : 1.62518 < r < 1.62518
   95% expected band : 1.62518 < r < 1.62518
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -847928879
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67744 +/- 0.00399221 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.67744 @ 95%CL (1 toyMC)
median expected limit: r < 1.67744 @ 95%CL (1 toyMC)
   68% expected band : 1.67744 < r < 1.67744
   95% expected band : 1.67744 < r < 1.67744
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 989308287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16053 +/- 0.00346311 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.16053 @ 95%CL (1 toyMC)
median expected limit: r < 1.16053 @ 95%CL (1 toyMC)
   68% expected band : 1.16053 < r < 1.16053
   95% expected band : 1.16053 < r < 1.16053
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1104555840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.75259 +/- 0.00376913 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.75259 @ 95%CL (1 toyMC)
median expected limit: r < 0.75259 @ 95%CL (1 toyMC)
   68% expected band : 0.75259 < r < 0.75259
   95% expected band : 0.75259 < r < 0.75259
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1716323504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.761654 +/- 0.00395036 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.761654 @ 95%CL (1 toyMC)
median expected limit: r < 0.761654 @ 95%CL (1 toyMC)
   68% expected band : 0.761654 < r < 0.761654
   95% expected band : 0.761654 < r < 0.761654
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -845610303
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.87626 +/- 0.00337429 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.87626 @ 95%CL (1 toyMC)
median expected limit: r < 0.87626 @ 95%CL (1 toyMC)
   68% expected band : 0.87626 < r < 0.87626
   95% expected band : 0.87626 < r < 0.87626
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1037422401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45988 +/- 0.00344375 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.45988 @ 95%CL (1 toyMC)
median expected limit: r < 1.45988 @ 95%CL (1 toyMC)
   68% expected band : 1.45988 < r < 1.45988
   95% expected band : 1.45988 < r < 1.45988
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 329577594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.773549 +/- 0.00329093 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.773549 @ 95%CL (1 toyMC)
median expected limit: r < 0.773549 @ 95%CL (1 toyMC)
   68% expected band : 0.773549 < r < 0.773549
   95% expected band : 0.773549 < r < 0.773549
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1952037892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.762684 +/- 0.00377616 @ 95% CL (100 tries)
Done in 0.10 min (cpu), 0.10 min (real)
mean   expected limit: r < 0.762684 @ 95%CL (1 toyMC)
median expected limit: r < 0.762684 @ 95%CL (1 toyMC)
   68% expected band : 0.762684 < r < 0.762684
   95% expected band : 0.762684 < r < 0.762684
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1977047963
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.831366 +/- 0.00307498 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.831366 @ 95%CL (1 toyMC)
median expected limit: r < 0.831366 @ 95%CL (1 toyMC)
   68% expected band : 0.831366 < r < 0.831366
   95% expected band : 0.831366 < r < 0.831366
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1215862392
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03471 +/- 0.00359192 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03471 @ 95%CL (1 toyMC)
median expected limit: r < 1.03471 @ 95%CL (1 toyMC)
   68% expected band : 1.03471 < r < 1.03471
   95% expected band : 1.03471 < r < 1.03471
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -144541032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.771962 +/- 0.00349032 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.771962 @ 95%CL (1 toyMC)
median expected limit: r < 0.771962 @ 95%CL (1 toyMC)
   68% expected band : 0.771962 < r < 0.771962
   95% expected band : 0.771962 < r < 0.771962
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1585523918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07367 +/- 0.00366072 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.07367 @ 95%CL (1 toyMC)
median expected limit: r < 1.07367 @ 95%CL (1 toyMC)
   68% expected band : 1.07367 < r < 1.07367
   95% expected band : 1.07367 < r < 1.07367
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -122648104
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05414 +/- 0.00331525 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05414 @ 95%CL (1 toyMC)
median expected limit: r < 1.05414 @ 95%CL (1 toyMC)
   68% expected band : 1.05414 < r < 1.05414
   95% expected band : 1.05414 < r < 1.05414
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -184503313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07756 +/- 0.00411209 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.07756 @ 95%CL (1 toyMC)
median expected limit: r < 1.07756 @ 95%CL (1 toyMC)
   68% expected band : 1.07756 < r < 1.07756
   95% expected band : 1.07756 < r < 1.07756
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -70109534
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.763978 +/- 0.00388225 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.763978 @ 95%CL (1 toyMC)
median expected limit: r < 0.763978 @ 95%CL (1 toyMC)
   68% expected band : 0.763978 < r < 0.763978
   95% expected band : 0.763978 < r < 0.763978
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 546292101
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.760947 +/- 0.0040523 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.760947 @ 95%CL (1 toyMC)
median expected limit: r < 0.760947 @ 95%CL (1 toyMC)
   68% expected band : 0.760947 < r < 0.760947
   95% expected band : 0.760947 < r < 0.760947
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 994131516
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23319 +/- 0.00404558 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.23319 @ 95%CL (1 toyMC)
median expected limit: r < 1.23319 @ 95%CL (1 toyMC)
   68% expected band : 1.23319 < r < 1.23319
   95% expected band : 1.23319 < r < 1.23319
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 769334479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45158 +/- 0.0038305 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.45158 @ 95%CL (1 toyMC)
median expected limit: r < 1.45158 @ 95%CL (1 toyMC)
   68% expected band : 1.45158 < r < 1.45158
   95% expected band : 1.45158 < r < 1.45158
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1002304003.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1031656592.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1037422401.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1103071377.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1215862392.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-122648104.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1229621212.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1231678336.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1234178542.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1275426728.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1281926225.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1422994831.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-144541032.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-146791325.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-153786087.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-155591631.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1585523918.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1609386524.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1632742052.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1660706417.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1716323504.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1828805653.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1831097242.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-184503313.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-1917622483.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-1928308142.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-1931977676.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-1953336575.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-1969826192.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-2014186851.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-207123281.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-2120983098.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-218025546.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-284301026.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-451687963.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-49945987.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-545001925.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-565084376.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-675672940.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-682434564.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-700673782.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-70109534.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-758761816.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-785994579.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-809387482.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-834555695.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-845610303.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-847928879.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-930746114.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.-96056687.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.-994002759.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1000810775.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1025448886.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1055091413.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1104555840.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1120378034.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1162049830.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1215140407.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1284275091.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1300561211.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1325432115.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1343178159.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1390543074.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1468056007.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1586841790.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1593698664.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1595521469.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1596648450.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1696145541.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1768708521.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1777725643.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1786008083.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1788888107.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1885709550.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.1952037892.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.1977047963.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.205801622.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.2120303609.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.2126321386.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.262069953.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.282215973.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.283783149.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.301720428.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.329577594.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.353302165.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.475764345.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.487418581.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.504821719.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.511599709.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.546292101.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.647277389.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.714351884.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.769334479.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.83602698.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.838797074.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.859281634.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.897243110.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.963970362.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.989308287.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.994131516.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1092239490
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.795464 +/- 0.00437263 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.795464 @ 95%CL (1 toyMC)
median expected limit: r < 0.795464 @ 95%CL (1 toyMC)
   68% expected band : 0.795464 < r < 0.795464
   95% expected band : 0.795464 < r < 0.795464
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1744374946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52953 +/- 0.00451296 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.52953 @ 95%CL (1 toyMC)
median expected limit: r < 1.52953 @ 95%CL (1 toyMC)
   68% expected band : 1.52953 < r < 1.52953
   95% expected band : 1.52953 < r < 1.52953
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -636779770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.798191 +/- 0.00344508 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.798191 @ 95%CL (1 toyMC)
median expected limit: r < 0.798191 @ 95%CL (1 toyMC)
   68% expected band : 0.798191 < r < 0.798191
   95% expected band : 0.798191 < r < 0.798191
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 692556988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.923822 +/- 0.00389865 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.923822 @ 95%CL (1 toyMC)
median expected limit: r < 0.923822 @ 95%CL (1 toyMC)
   68% expected band : 0.923822 < r < 0.923822
   95% expected band : 0.923822 < r < 0.923822
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -827346256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.792442 +/- 0.00360784 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.792442 @ 95%CL (1 toyMC)
median expected limit: r < 0.792442 @ 95%CL (1 toyMC)
   68% expected band : 0.792442 < r < 0.792442
   95% expected band : 0.792442 < r < 0.792442
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 819057998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.916037 +/- 0.00334959 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.916037 @ 95%CL (1 toyMC)
median expected limit: r < 0.916037 @ 95%CL (1 toyMC)
   68% expected band : 0.916037 < r < 0.916037
   95% expected band : 0.916037 < r < 0.916037
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2045249463
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0642 +/- 0.00374938 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0642 @ 95%CL (1 toyMC)
median expected limit: r < 1.0642 @ 95%CL (1 toyMC)
   68% expected band : 1.0642 < r < 1.0642
   95% expected band : 1.0642 < r < 1.0642
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1548115196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.801864 +/- 0.00351019 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.801864 @ 95%CL (1 toyMC)
median expected limit: r < 0.801864 @ 95%CL (1 toyMC)
   68% expected band : 0.801864 < r < 0.801864
   95% expected band : 0.801864 < r < 0.801864
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 924446997
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.917114 +/- 0.00359157 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.917114 @ 95%CL (1 toyMC)
median expected limit: r < 0.917114 @ 95%CL (1 toyMC)
   68% expected band : 0.917114 < r < 0.917114
   95% expected band : 0.917114 < r < 0.917114
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -64307699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.925241 +/- 0.0036173 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.925241 @ 95%CL (1 toyMC)
median expected limit: r < 0.925241 @ 95%CL (1 toyMC)
   68% expected band : 0.925241 < r < 0.925241
   95% expected band : 0.925241 < r < 0.925241
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 559054444
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.785258 +/- 0.00349064 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.785258 @ 95%CL (1 toyMC)
median expected limit: r < 0.785258 @ 95%CL (1 toyMC)
   68% expected band : 0.785258 < r < 0.785258
   95% expected band : 0.785258 < r < 0.785258
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -885632888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.788599 +/- 0.00397364 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.788599 @ 95%CL (1 toyMC)
median expected limit: r < 0.788599 @ 95%CL (1 toyMC)
   68% expected band : 0.788599 < r < 0.788599
   95% expected band : 0.788599 < r < 0.788599
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1854904998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.945431 +/- 0.00332002 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.945431 @ 95%CL (1 toyMC)
median expected limit: r < 0.945431 @ 95%CL (1 toyMC)
   68% expected band : 0.945431 < r < 0.945431
   95% expected band : 0.945431 < r < 0.945431
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1838422339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.910876 +/- 0.00431441 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.910876 @ 95%CL (1 toyMC)
median expected limit: r < 0.910876 @ 95%CL (1 toyMC)
   68% expected band : 0.910876 < r < 0.910876
   95% expected band : 0.910876 < r < 0.910876
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1199916838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2554 +/- 0.00371575 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.2554 @ 95%CL (1 toyMC)
median expected limit: r < 2.2554 @ 95%CL (1 toyMC)
   68% expected band : 2.2554 < r < 2.2554
   95% expected band : 2.2554 < r < 2.2554
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -728907634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.996204 +/- 0.00365847 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.996204 @ 95%CL (1 toyMC)
median expected limit: r < 0.996204 @ 95%CL (1 toyMC)
   68% expected band : 0.996204 < r < 0.996204
   95% expected band : 0.996204 < r < 0.996204
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1944146811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06332 +/- 0.00408546 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.06332 @ 95%CL (1 toyMC)
median expected limit: r < 1.06332 @ 95%CL (1 toyMC)
   68% expected band : 1.06332 < r < 1.06332
   95% expected band : 1.06332 < r < 1.06332
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 444475670
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50281 +/- 0.00312103 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.50281 @ 95%CL (1 toyMC)
median expected limit: r < 1.50281 @ 95%CL (1 toyMC)
   68% expected band : 1.50281 < r < 1.50281
   95% expected band : 1.50281 < r < 1.50281
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1294486641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14527 +/- 0.00325527 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.14527 @ 95%CL (1 toyMC)
median expected limit: r < 1.14527 @ 95%CL (1 toyMC)
   68% expected band : 1.14527 < r < 1.14527
   95% expected band : 1.14527 < r < 1.14527
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2005671506
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.798617 +/- 0.00360898 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.798617 @ 95%CL (1 toyMC)
median expected limit: r < 0.798617 @ 95%CL (1 toyMC)
   68% expected band : 0.798617 < r < 0.798617
   95% expected band : 0.798617 < r < 0.798617
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1566582561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29375 +/- 0.00393597 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.29375 @ 95%CL (1 toyMC)
median expected limit: r < 1.29375 @ 95%CL (1 toyMC)
   68% expected band : 1.29375 < r < 1.29375
   95% expected band : 1.29375 < r < 1.29375
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1036046988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02766 +/- 0.00368773 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.02766 @ 95%CL (1 toyMC)
median expected limit: r < 1.02766 @ 95%CL (1 toyMC)
   68% expected band : 1.02766 < r < 1.02766
   95% expected band : 1.02766 < r < 1.02766
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1978803309
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.788587 +/- 0.00351639 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.788587 @ 95%CL (1 toyMC)
median expected limit: r < 0.788587 @ 95%CL (1 toyMC)
   68% expected band : 0.788587 < r < 0.788587
   95% expected band : 0.788587 < r < 0.788587
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1064203572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21616 +/- 0.00377321 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.21616 @ 95%CL (1 toyMC)
median expected limit: r < 1.21616 @ 95%CL (1 toyMC)
   68% expected band : 1.21616 < r < 1.21616
   95% expected band : 1.21616 < r < 1.21616
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2040111522
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.79898 +/- 0.00314167 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.79898 @ 95%CL (1 toyMC)
median expected limit: r < 0.79898 @ 95%CL (1 toyMC)
   68% expected band : 0.79898 < r < 0.79898
   95% expected band : 0.79898 < r < 0.79898
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1704342026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.792668 +/- 0.00326737 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.792668 @ 95%CL (1 toyMC)
median expected limit: r < 0.792668 @ 95%CL (1 toyMC)
   68% expected band : 0.792668 < r < 0.792668
   95% expected band : 0.792668 < r < 0.792668
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -926129315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20931 +/- 0.00402983 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.20931 @ 95%CL (1 toyMC)
median expected limit: r < 1.20931 @ 95%CL (1 toyMC)
   68% expected band : 1.20931 < r < 1.20931
   95% expected band : 1.20931 < r < 1.20931
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -695262111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.919546 +/- 0.00363101 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.919546 @ 95%CL (1 toyMC)
median expected limit: r < 0.919546 @ 95%CL (1 toyMC)
   68% expected band : 0.919546 < r < 0.919546
   95% expected band : 0.919546 < r < 0.919546
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -559928562
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.787698 +/- 0.00341397 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.787698 @ 95%CL (1 toyMC)
median expected limit: r < 0.787698 @ 95%CL (1 toyMC)
   68% expected band : 0.787698 < r < 0.787698
   95% expected band : 0.787698 < r < 0.787698
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -242878032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.796499 +/- 0.00312925 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.796499 @ 95%CL (1 toyMC)
median expected limit: r < 0.796499 @ 95%CL (1 toyMC)
   68% expected band : 0.796499 < r < 0.796499
   95% expected band : 0.796499 < r < 0.796499
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1676651015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.891941 +/- 0.00405998 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.891941 @ 95%CL (1 toyMC)
median expected limit: r < 0.891941 @ 95%CL (1 toyMC)
   68% expected band : 0.891941 < r < 0.891941
   95% expected band : 0.891941 < r < 0.891941
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 176929675
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.939533 +/- 0.00368192 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.939533 @ 95%CL (1 toyMC)
median expected limit: r < 0.939533 @ 95%CL (1 toyMC)
   68% expected band : 0.939533 < r < 0.939533
   95% expected band : 0.939533 < r < 0.939533
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -448293562
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.787298 +/- 0.00335091 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.787298 @ 95%CL (1 toyMC)
median expected limit: r < 0.787298 @ 95%CL (1 toyMC)
   68% expected band : 0.787298 < r < 0.787298
   95% expected band : 0.787298 < r < 0.787298
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 328548450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07121 +/- 0.00354205 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.07121 @ 95%CL (1 toyMC)
median expected limit: r < 1.07121 @ 95%CL (1 toyMC)
   68% expected band : 1.07121 < r < 1.07121
   95% expected band : 1.07121 < r < 1.07121
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2012486525
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.900466 +/- 0.00353856 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.900466 @ 95%CL (1 toyMC)
median expected limit: r < 0.900466 @ 95%CL (1 toyMC)
   68% expected band : 0.900466 < r < 0.900466
   95% expected band : 0.900466 < r < 0.900466
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1715443030
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.801529 +/- 0.00380398 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.801529 @ 95%CL (1 toyMC)
median expected limit: r < 0.801529 @ 95%CL (1 toyMC)
   68% expected band : 0.801529 < r < 0.801529
   95% expected band : 0.801529 < r < 0.801529
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1949472050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1789 +/- 0.00345745 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1789 @ 95%CL (1 toyMC)
median expected limit: r < 1.1789 @ 95%CL (1 toyMC)
   68% expected band : 1.1789 < r < 1.1789
   95% expected band : 1.1789 < r < 1.1789
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1301270161
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22307 +/- 0.00398102 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.22307 @ 95%CL (1 toyMC)
median expected limit: r < 1.22307 @ 95%CL (1 toyMC)
   68% expected band : 1.22307 < r < 1.22307
   95% expected band : 1.22307 < r < 1.22307
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1324971735
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12547 +/- 0.00325224 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.12547 @ 95%CL (1 toyMC)
median expected limit: r < 1.12547 @ 95%CL (1 toyMC)
   68% expected band : 1.12547 < r < 1.12547
   95% expected band : 1.12547 < r < 1.12547
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1918767027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.981554 +/- 0.00417705 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.981554 @ 95%CL (1 toyMC)
median expected limit: r < 0.981554 @ 95%CL (1 toyMC)
   68% expected band : 0.981554 < r < 0.981554
   95% expected band : 0.981554 < r < 0.981554
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1420873611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.794493 +/- 0.00306449 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.794493 @ 95%CL (1 toyMC)
median expected limit: r < 0.794493 @ 95%CL (1 toyMC)
   68% expected band : 0.794493 < r < 0.794493
   95% expected band : 0.794493 < r < 0.794493
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1889663009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.918192 +/- 0.00447359 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.918192 @ 95%CL (1 toyMC)
median expected limit: r < 0.918192 @ 95%CL (1 toyMC)
   68% expected band : 0.918192 < r < 0.918192
   95% expected band : 0.918192 < r < 0.918192
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -98803598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07042 +/- 0.00466397 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.07042 @ 95%CL (1 toyMC)
median expected limit: r < 1.07042 @ 95%CL (1 toyMC)
   68% expected band : 1.07042 < r < 1.07042
   95% expected band : 1.07042 < r < 1.07042
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1720005133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.796552 +/- 0.00301112 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.796552 @ 95%CL (1 toyMC)
median expected limit: r < 0.796552 @ 95%CL (1 toyMC)
   68% expected band : 0.796552 < r < 0.796552
   95% expected band : 0.796552 < r < 0.796552
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1314463514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07433 +/- 0.00341358 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.07433 @ 95%CL (1 toyMC)
median expected limit: r < 1.07433 @ 95%CL (1 toyMC)
   68% expected band : 1.07433 < r < 1.07433
   95% expected band : 1.07433 < r < 1.07433
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1296513790
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.793282 +/- 0.0027667 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.793282 @ 95%CL (1 toyMC)
median expected limit: r < 0.793282 @ 95%CL (1 toyMC)
   68% expected band : 0.793282 < r < 0.793282
   95% expected band : 0.793282 < r < 0.793282
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1637733456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.794214 +/- 0.00414245 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.794214 @ 95%CL (1 toyMC)
median expected limit: r < 0.794214 @ 95%CL (1 toyMC)
   68% expected band : 0.794214 < r < 0.794214
   95% expected band : 0.794214 < r < 0.794214
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1410208819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.90071 +/- 0.00368933 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.90071 @ 95%CL (1 toyMC)
median expected limit: r < 0.90071 @ 95%CL (1 toyMC)
   68% expected band : 0.90071 < r < 0.90071
   95% expected band : 0.90071 < r < 0.90071
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 882376639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.912194 +/- 0.00387257 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.912194 @ 95%CL (1 toyMC)
median expected limit: r < 0.912194 @ 95%CL (1 toyMC)
   68% expected band : 0.912194 < r < 0.912194
   95% expected band : 0.912194 < r < 0.912194
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1480201252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.785889 +/- 0.00408166 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.785889 @ 95%CL (1 toyMC)
median expected limit: r < 0.785889 @ 95%CL (1 toyMC)
   68% expected band : 0.785889 < r < 0.785889
   95% expected band : 0.785889 < r < 0.785889
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1821162124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1042 +/- 0.0035061 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.1042 @ 95%CL (1 toyMC)
median expected limit: r < 1.1042 @ 95%CL (1 toyMC)
   68% expected band : 1.1042 < r < 1.1042
   95% expected band : 1.1042 < r < 1.1042
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1345857529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20456 +/- 0.00427745 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.20456 @ 95%CL (1 toyMC)
median expected limit: r < 1.20456 @ 95%CL (1 toyMC)
   68% expected band : 1.20456 < r < 1.20456
   95% expected band : 1.20456 < r < 1.20456
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1930724377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.77074 +/- 0.00330551 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.77074 @ 95%CL (1 toyMC)
median expected limit: r < 0.77074 @ 95%CL (1 toyMC)
   68% expected band : 0.77074 < r < 0.77074
   95% expected band : 0.77074 < r < 0.77074
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1187782489
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.879613 +/- 0.00370648 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.879613 @ 95%CL (1 toyMC)
median expected limit: r < 0.879613 @ 95%CL (1 toyMC)
   68% expected band : 0.879613 < r < 0.879613
   95% expected band : 0.879613 < r < 0.879613
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1035159901
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11452 +/- 0.00401794 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.11452 @ 95%CL (1 toyMC)
median expected limit: r < 1.11452 @ 95%CL (1 toyMC)
   68% expected band : 1.11452 < r < 1.11452
   95% expected band : 1.11452 < r < 1.11452
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 570269229
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05318 +/- 0.00452163 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.05318 @ 95%CL (1 toyMC)
median expected limit: r < 1.05318 @ 95%CL (1 toyMC)
   68% expected band : 1.05318 < r < 1.05318
   95% expected band : 1.05318 < r < 1.05318
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -114514011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.790655 +/- 0.00427245 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.790655 @ 95%CL (1 toyMC)
median expected limit: r < 0.790655 @ 95%CL (1 toyMC)
   68% expected band : 0.790655 < r < 0.790655
   95% expected band : 0.790655 < r < 0.790655
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -148615025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35769 +/- 0.0033195 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.35769 @ 95%CL (1 toyMC)
median expected limit: r < 1.35769 @ 95%CL (1 toyMC)
   68% expected band : 1.35769 < r < 1.35769
   95% expected band : 1.35769 < r < 1.35769
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1410837749
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03396 +/- 0.00335858 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.03396 @ 95%CL (1 toyMC)
median expected limit: r < 1.03396 @ 95%CL (1 toyMC)
   68% expected band : 1.03396 < r < 1.03396
   95% expected band : 1.03396 < r < 1.03396
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -460937639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01922 +/- 0.00368685 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.01922 @ 95%CL (1 toyMC)
median expected limit: r < 1.01922 @ 95%CL (1 toyMC)
   68% expected band : 1.01922 < r < 1.01922
   95% expected band : 1.01922 < r < 1.01922
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1185349660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.947654 +/- 0.00407844 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.947654 @ 95%CL (1 toyMC)
median expected limit: r < 0.947654 @ 95%CL (1 toyMC)
   68% expected band : 0.947654 < r < 0.947654
   95% expected band : 0.947654 < r < 0.947654
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -994018619
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.795956 +/- 0.00358268 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.795956 @ 95%CL (1 toyMC)
median expected limit: r < 0.795956 @ 95%CL (1 toyMC)
   68% expected band : 0.795956 < r < 0.795956
   95% expected band : 0.795956 < r < 0.795956
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1181483405
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.949506 +/- 0.00434657 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.949506 @ 95%CL (1 toyMC)
median expected limit: r < 0.949506 @ 95%CL (1 toyMC)
   68% expected band : 0.949506 < r < 0.949506
   95% expected band : 0.949506 < r < 0.949506
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -927434737
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11471 +/- 0.00372097 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.11471 @ 95%CL (1 toyMC)
median expected limit: r < 1.11471 @ 95%CL (1 toyMC)
   68% expected band : 1.11471 < r < 1.11471
   95% expected band : 1.11471 < r < 1.11471
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1255632269
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.977085 +/- 0.00384307 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.977085 @ 95%CL (1 toyMC)
median expected limit: r < 0.977085 @ 95%CL (1 toyMC)
   68% expected band : 0.977085 < r < 0.977085
   95% expected band : 0.977085 < r < 0.977085
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -397185853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.802899 +/- 0.00326195 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.802899 @ 95%CL (1 toyMC)
median expected limit: r < 0.802899 @ 95%CL (1 toyMC)
   68% expected band : 0.802899 < r < 0.802899
   95% expected band : 0.802899 < r < 0.802899
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2057901165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.913773 +/- 0.00381637 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.913773 @ 95%CL (1 toyMC)
median expected limit: r < 0.913773 @ 95%CL (1 toyMC)
   68% expected band : 0.913773 < r < 0.913773
   95% expected band : 0.913773 < r < 0.913773
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 407616853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09413 +/- 0.00329573 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09413 @ 95%CL (1 toyMC)
median expected limit: r < 1.09413 @ 95%CL (1 toyMC)
   68% expected band : 1.09413 < r < 1.09413
   95% expected band : 1.09413 < r < 1.09413
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 225833051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.95302 +/- 0.00394548 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.95302 @ 95%CL (1 toyMC)
median expected limit: r < 0.95302 @ 95%CL (1 toyMC)
   68% expected band : 0.95302 < r < 0.95302
   95% expected band : 0.95302 < r < 0.95302
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -677787676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.894224 +/- 0.00372045 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.894224 @ 95%CL (1 toyMC)
median expected limit: r < 0.894224 @ 95%CL (1 toyMC)
   68% expected band : 0.894224 < r < 0.894224
   95% expected band : 0.894224 < r < 0.894224
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 511172157
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37844 +/- 0.00378503 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.37844 @ 95%CL (1 toyMC)
median expected limit: r < 1.37844 @ 95%CL (1 toyMC)
   68% expected band : 1.37844 < r < 1.37844
   95% expected band : 1.37844 < r < 1.37844
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 282513765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.62415 +/- 0.00463641 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.62415 @ 95%CL (1 toyMC)
median expected limit: r < 1.62415 @ 95%CL (1 toyMC)
   68% expected band : 1.62415 < r < 1.62415
   95% expected band : 1.62415 < r < 1.62415
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 200802357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.792213 +/- 0.00332246 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.792213 @ 95%CL (1 toyMC)
median expected limit: r < 0.792213 @ 95%CL (1 toyMC)
   68% expected band : 0.792213 < r < 0.792213
   95% expected band : 0.792213 < r < 0.792213
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1321821949
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.789402 +/- 0.00264634 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.789402 @ 95%CL (1 toyMC)
median expected limit: r < 0.789402 @ 95%CL (1 toyMC)
   68% expected band : 0.789402 < r < 0.789402
   95% expected band : 0.789402 < r < 0.789402
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2099180810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.888636 +/- 0.00392387 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.888636 @ 95%CL (1 toyMC)
median expected limit: r < 0.888636 @ 95%CL (1 toyMC)
   68% expected band : 0.888636 < r < 0.888636
   95% expected band : 0.888636 < r < 0.888636
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1659047047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35695 +/- 0.00282452 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.35695 @ 95%CL (1 toyMC)
median expected limit: r < 1.35695 @ 95%CL (1 toyMC)
   68% expected band : 1.35695 < r < 1.35695
   95% expected band : 1.35695 < r < 1.35695
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -223226262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05888 +/- 0.00332375 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05888 @ 95%CL (1 toyMC)
median expected limit: r < 1.05888 @ 95%CL (1 toyMC)
   68% expected band : 1.05888 < r < 1.05888
   95% expected band : 1.05888 < r < 1.05888
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 734654307
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.910929 +/- 0.00344948 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.910929 @ 95%CL (1 toyMC)
median expected limit: r < 0.910929 @ 95%CL (1 toyMC)
   68% expected band : 0.910929 < r < 0.910929
   95% expected band : 0.910929 < r < 0.910929
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1066387213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.912266 +/- 0.00347514 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.912266 @ 95%CL (1 toyMC)
median expected limit: r < 0.912266 @ 95%CL (1 toyMC)
   68% expected band : 0.912266 < r < 0.912266
   95% expected band : 0.912266 < r < 0.912266
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 358623156
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.907144 +/- 0.00350309 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.907144 @ 95%CL (1 toyMC)
median expected limit: r < 0.907144 @ 95%CL (1 toyMC)
   68% expected band : 0.907144 < r < 0.907144
   95% expected band : 0.907144 < r < 0.907144
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 456822812
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60195 +/- 0.00449119 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.60195 @ 95%CL (1 toyMC)
median expected limit: r < 1.60195 @ 95%CL (1 toyMC)
   68% expected band : 1.60195 < r < 1.60195
   95% expected band : 1.60195 < r < 1.60195
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 923853906
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01166 +/- 0.00375172 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.01166 @ 95%CL (1 toyMC)
median expected limit: r < 1.01166 @ 95%CL (1 toyMC)
   68% expected band : 1.01166 < r < 1.01166
   95% expected band : 1.01166 < r < 1.01166
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1671581459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.795084 +/- 0.00374968 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.795084 @ 95%CL (1 toyMC)
median expected limit: r < 0.795084 @ 95%CL (1 toyMC)
   68% expected band : 0.795084 < r < 0.795084
   95% expected band : 0.795084 < r < 0.795084
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1117567936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04389 +/- 0.00387592 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04389 @ 95%CL (1 toyMC)
median expected limit: r < 1.04389 @ 95%CL (1 toyMC)
   68% expected band : 1.04389 < r < 1.04389
   95% expected band : 1.04389 < r < 1.04389
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1731190355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.911725 +/- 0.00377684 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.911725 @ 95%CL (1 toyMC)
median expected limit: r < 0.911725 @ 95%CL (1 toyMC)
   68% expected band : 0.911725 < r < 0.911725
   95% expected band : 0.911725 < r < 0.911725
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1684617672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12914 +/- 0.00384389 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.12914 @ 95%CL (1 toyMC)
median expected limit: r < 1.12914 @ 95%CL (1 toyMC)
   68% expected band : 1.12914 < r < 1.12914
   95% expected band : 1.12914 < r < 1.12914
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1439581615
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05923 +/- 0.00369923 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.05923 @ 95%CL (1 toyMC)
median expected limit: r < 1.05923 @ 95%CL (1 toyMC)
   68% expected band : 1.05923 < r < 1.05923
   95% expected band : 1.05923 < r < 1.05923
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -832095269
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15013 +/- 0.00344029 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.15013 @ 95%CL (1 toyMC)
median expected limit: r < 1.15013 @ 95%CL (1 toyMC)
   68% expected band : 1.15013 < r < 1.15013
   95% expected band : 1.15013 < r < 1.15013
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2141818035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.891645 +/- 0.00392987 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.891645 @ 95%CL (1 toyMC)
median expected limit: r < 0.891645 @ 95%CL (1 toyMC)
   68% expected band : 0.891645 < r < 0.891645
   95% expected band : 0.891645 < r < 0.891645
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1184772916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28276 +/- 0.00348921 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.28276 @ 95%CL (1 toyMC)
median expected limit: r < 1.28276 @ 95%CL (1 toyMC)
   68% expected band : 1.28276 < r < 1.28276
   95% expected band : 1.28276 < r < 1.28276
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -583523142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.795832 +/- 0.00431556 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.795832 @ 95%CL (1 toyMC)
median expected limit: r < 0.795832 @ 95%CL (1 toyMC)
   68% expected band : 0.795832 < r < 0.795832
   95% expected band : 0.795832 < r < 0.795832
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1971318248
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17906 +/- 0.00354248 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.17906 @ 95%CL (1 toyMC)
median expected limit: r < 1.17906 @ 95%CL (1 toyMC)
   68% expected band : 1.17906 < r < 1.17906
   95% expected band : 1.17906 < r < 1.17906
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1919555429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11523 +/- 0.00435326 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.11523 @ 95%CL (1 toyMC)
median expected limit: r < 1.11523 @ 95%CL (1 toyMC)
   68% expected band : 1.11523 < r < 1.11523
   95% expected band : 1.11523 < r < 1.11523
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2006260067
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31267 +/- 0.00321293 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.31267 @ 95%CL (1 toyMC)
median expected limit: r < 1.31267 @ 95%CL (1 toyMC)
   68% expected band : 1.31267 < r < 1.31267
   95% expected band : 1.31267 < r < 1.31267
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -922127963
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1852 +/- 0.00282129 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.1852 @ 95%CL (1 toyMC)
median expected limit: r < 1.1852 @ 95%CL (1 toyMC)
   68% expected band : 1.1852 < r < 1.1852
   95% expected band : 1.1852 < r < 1.1852
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1812024434
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49289 +/- 0.00389231 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.49289 @ 95%CL (1 toyMC)
median expected limit: r < 1.49289 @ 95%CL (1 toyMC)
   68% expected band : 1.49289 < r < 1.49289
   95% expected band : 1.49289 < r < 1.49289
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -323672553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04069 +/- 0.00353445 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04069 @ 95%CL (1 toyMC)
median expected limit: r < 1.04069 @ 95%CL (1 toyMC)
   68% expected band : 1.04069 < r < 1.04069
   95% expected band : 1.04069 < r < 1.04069
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1311171105
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.986122 +/- 0.00424747 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.986122 @ 95%CL (1 toyMC)
median expected limit: r < 0.986122 @ 95%CL (1 toyMC)
   68% expected band : 0.986122 < r < 0.986122
   95% expected band : 0.986122 < r < 0.986122
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -964989550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.787028 +/- 0.00376626 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.787028 @ 95%CL (1 toyMC)
median expected limit: r < 0.787028 @ 95%CL (1 toyMC)
   68% expected band : 0.787028 < r < 0.787028
   95% expected band : 0.787028 < r < 0.787028
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 752778020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02575 +/- 0.00338037 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.02575 @ 95%CL (1 toyMC)
median expected limit: r < 1.02575 @ 95%CL (1 toyMC)
   68% expected band : 1.02575 < r < 1.02575
   95% expected band : 1.02575 < r < 1.02575
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1035159901.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1036046988.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1064203572.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1092239490.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1117567936.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-114514011.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1185349660.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1294486641.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1314463514.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1324971735.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1410208819.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1439581615.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-148615025.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1548115196.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1637733456.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1684617672.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1715443030.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1720005133.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1731190355.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1821162124.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1918767027.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1944146811.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1971318248.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-2005671506.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-2006260067.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-2040111522.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-2045249463.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-2057901165.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-223226262.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-242878032.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-323672553.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-397185853.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-448293562.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-460937639.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-559928562.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-583523142.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-636779770.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-64307699.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-677787676.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-695262111.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-728907634.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-827346256.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-832095269.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-885632888.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-922127963.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-926129315.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-927434737.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-964989550.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-98803598.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.-994018619.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1066387213.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1181483405.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1184772916.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1187782489.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1199916838.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1255632269.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1296513790.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1301270161.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1311171105.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1321821949.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1345857529.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1410837749.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1420873611.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1480201252.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1566582561.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1659047047.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1671581459.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1676651015.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1704342026.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1744374946.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.176929675.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1812024434.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1838422339.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1854904998.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.1889663009.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.1919555429.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.1930724377.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.1949472050.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.1978803309.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.200802357.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.2012486525.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.2099180810.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.2141818035.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.225833051.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.282513765.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.328548450.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.358623156.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.407616853.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.444475670.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.456822812.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.511172157.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.559054444.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.570269229.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.692556988.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.734654307.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.752778020.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.819057998.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.882376639.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.923853906.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.924446997.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1904610991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28269 +/- 0.00272687 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.28269 @ 95%CL (1 toyMC)
median expected limit: r < 1.28269 @ 95%CL (1 toyMC)
   68% expected band : 1.28269 < r < 1.28269
   95% expected band : 1.28269 < r < 1.28269
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -792956822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.820641 +/- 0.00303898 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.820641 @ 95%CL (1 toyMC)
median expected limit: r < 0.820641 @ 95%CL (1 toyMC)
   68% expected band : 0.820641 < r < 0.820641
   95% expected band : 0.820641 < r < 0.820641
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1472386411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.834566 +/- 0.00358874 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.834566 @ 95%CL (1 toyMC)
median expected limit: r < 0.834566 @ 95%CL (1 toyMC)
   68% expected band : 0.834566 < r < 0.834566
   95% expected band : 0.834566 < r < 0.834566
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -832559931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.835079 +/- 0.00345645 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.835079 @ 95%CL (1 toyMC)
median expected limit: r < 0.835079 @ 95%CL (1 toyMC)
   68% expected band : 0.835079 < r < 0.835079
   95% expected band : 0.835079 < r < 0.835079
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 537286378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.835199 +/- 0.00328263 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.835199 @ 95%CL (1 toyMC)
median expected limit: r < 0.835199 @ 95%CL (1 toyMC)
   68% expected band : 0.835199 < r < 0.835199
   95% expected band : 0.835199 < r < 0.835199
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1886229150
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.164 +/- 0.0042192 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.164 @ 95%CL (1 toyMC)
median expected limit: r < 1.164 @ 95%CL (1 toyMC)
   68% expected band : 1.164 < r < 1.164
   95% expected band : 1.164 < r < 1.164
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1825601851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04799 +/- 0.00398286 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04799 @ 95%CL (1 toyMC)
median expected limit: r < 1.04799 @ 95%CL (1 toyMC)
   68% expected band : 1.04799 < r < 1.04799
   95% expected band : 1.04799 < r < 1.04799
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1630905756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.829416 +/- 0.00391675 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.829416 @ 95%CL (1 toyMC)
median expected limit: r < 0.829416 @ 95%CL (1 toyMC)
   68% expected band : 0.829416 < r < 0.829416
   95% expected band : 0.829416 < r < 0.829416
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -593898978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71628 +/- 0.00380185 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.71628 @ 95%CL (1 toyMC)
median expected limit: r < 1.71628 @ 95%CL (1 toyMC)
   68% expected band : 1.71628 < r < 1.71628
   95% expected band : 1.71628 < r < 1.71628
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1470897514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.834978 +/- 0.00380025 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.834978 @ 95%CL (1 toyMC)
median expected limit: r < 0.834978 @ 95%CL (1 toyMC)
   68% expected band : 0.834978 < r < 0.834978
   95% expected band : 0.834978 < r < 0.834978
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2065033402
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.829009 +/- 0.00304544 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.829009 @ 95%CL (1 toyMC)
median expected limit: r < 0.829009 @ 95%CL (1 toyMC)
   68% expected band : 0.829009 < r < 0.829009
   95% expected band : 0.829009 < r < 0.829009
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2036605848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.838378 +/- 0.00284459 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.838378 @ 95%CL (1 toyMC)
median expected limit: r < 0.838378 @ 95%CL (1 toyMC)
   68% expected band : 0.838378 < r < 0.838378
   95% expected band : 0.838378 < r < 0.838378
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 572624185
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.829659 +/- 0.00416005 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.829659 @ 95%CL (1 toyMC)
median expected limit: r < 0.829659 @ 95%CL (1 toyMC)
   68% expected band : 0.829659 < r < 0.829659
   95% expected band : 0.829659 < r < 0.829659
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1162164824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.976739 +/- 0.00449296 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.976739 @ 95%CL (1 toyMC)
median expected limit: r < 0.976739 @ 95%CL (1 toyMC)
   68% expected band : 0.976739 < r < 0.976739
   95% expected band : 0.976739 < r < 0.976739
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2009089603
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.829601 +/- 0.00376625 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.829601 @ 95%CL (1 toyMC)
median expected limit: r < 0.829601 @ 95%CL (1 toyMC)
   68% expected band : 0.829601 < r < 0.829601
   95% expected band : 0.829601 < r < 0.829601
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1811674123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.829895 +/- 0.00364522 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.829895 @ 95%CL (1 toyMC)
median expected limit: r < 0.829895 @ 95%CL (1 toyMC)
   68% expected band : 0.829895 < r < 0.829895
   95% expected band : 0.829895 < r < 0.829895
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 103591259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.824417 +/- 0.0035033 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.824417 @ 95%CL (1 toyMC)
median expected limit: r < 0.824417 @ 95%CL (1 toyMC)
   68% expected band : 0.824417 < r < 0.824417
   95% expected band : 0.824417 < r < 0.824417
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -85907587
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.838062 +/- 0.00416514 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.838062 @ 95%CL (1 toyMC)
median expected limit: r < 0.838062 @ 95%CL (1 toyMC)
   68% expected band : 0.838062 < r < 0.838062
   95% expected band : 0.838062 < r < 0.838062
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1380247098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.969061 +/- 0.0042709 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.969061 @ 95%CL (1 toyMC)
median expected limit: r < 0.969061 @ 95%CL (1 toyMC)
   68% expected band : 0.969061 < r < 0.969061
   95% expected band : 0.969061 < r < 0.969061
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -475507185
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.99464 +/- 0.00426646 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.99464 @ 95%CL (1 toyMC)
median expected limit: r < 0.99464 @ 95%CL (1 toyMC)
   68% expected band : 0.99464 < r < 0.99464
   95% expected band : 0.99464 < r < 0.99464
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1367125121
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.842203 +/- 0.00397001 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.842203 @ 95%CL (1 toyMC)
median expected limit: r < 0.842203 @ 95%CL (1 toyMC)
   68% expected band : 0.842203 < r < 0.842203
   95% expected band : 0.842203 < r < 0.842203
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1842777983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22596 +/- 0.00326221 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.22596 @ 95%CL (1 toyMC)
median expected limit: r < 1.22596 @ 95%CL (1 toyMC)
   68% expected band : 1.22596 < r < 1.22596
   95% expected band : 1.22596 < r < 1.22596
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 740381869
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.845192 +/- 0.00413532 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.845192 @ 95%CL (1 toyMC)
median expected limit: r < 0.845192 @ 95%CL (1 toyMC)
   68% expected band : 0.845192 < r < 0.845192
   95% expected band : 0.845192 < r < 0.845192
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1347622139
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1711 +/- 0.00302671 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.1711 @ 95%CL (1 toyMC)
median expected limit: r < 1.1711 @ 95%CL (1 toyMC)
   68% expected band : 1.1711 < r < 1.1711
   95% expected band : 1.1711 < r < 1.1711
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1458663653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18045 +/- 0.0045475 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 1.18045 @ 95%CL (1 toyMC)
median expected limit: r < 1.18045 @ 95%CL (1 toyMC)
   68% expected band : 1.18045 < r < 1.18045
   95% expected band : 1.18045 < r < 1.18045
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 649132595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.828248 +/- 0.00363407 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.828248 @ 95%CL (1 toyMC)
median expected limit: r < 0.828248 @ 95%CL (1 toyMC)
   68% expected band : 0.828248 < r < 0.828248
   95% expected band : 0.828248 < r < 0.828248
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 666018322
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02317 +/- 0.00335444 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.02317 @ 95%CL (1 toyMC)
median expected limit: r < 1.02317 @ 95%CL (1 toyMC)
   68% expected band : 1.02317 < r < 1.02317
   95% expected band : 1.02317 < r < 1.02317
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1088572264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.845157 +/- 0.0031649 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.845157 @ 95%CL (1 toyMC)
median expected limit: r < 0.845157 @ 95%CL (1 toyMC)
   68% expected band : 0.845157 < r < 0.845157
   95% expected band : 0.845157 < r < 0.845157
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 549302166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14112 +/- 0.00396445 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.14112 @ 95%CL (1 toyMC)
median expected limit: r < 1.14112 @ 95%CL (1 toyMC)
   68% expected band : 1.14112 < r < 1.14112
   95% expected band : 1.14112 < r < 1.14112
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1269793972
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.829675 +/- 0.00400585 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.829675 @ 95%CL (1 toyMC)
median expected limit: r < 0.829675 @ 95%CL (1 toyMC)
   68% expected band : 0.829675 < r < 0.829675
   95% expected band : 0.829675 < r < 0.829675
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2047645818
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42421 +/- 0.00333491 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.42421 @ 95%CL (1 toyMC)
median expected limit: r < 1.42421 @ 95%CL (1 toyMC)
   68% expected band : 1.42421 < r < 1.42421
   95% expected band : 1.42421 < r < 1.42421
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 421272925
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.831738 +/- 0.00385915 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.831738 @ 95%CL (1 toyMC)
median expected limit: r < 0.831738 @ 95%CL (1 toyMC)
   68% expected band : 0.831738 < r < 0.831738
   95% expected band : 0.831738 < r < 0.831738
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1135235783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.817615 +/- 0.00413726 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.817615 @ 95%CL (1 toyMC)
median expected limit: r < 0.817615 @ 95%CL (1 toyMC)
   68% expected band : 0.817615 < r < 0.817615
   95% expected band : 0.817615 < r < 0.817615
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1145928918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.973795 +/- 0.00404283 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.973795 @ 95%CL (1 toyMC)
median expected limit: r < 0.973795 @ 95%CL (1 toyMC)
   68% expected band : 0.973795 < r < 0.973795
   95% expected band : 0.973795 < r < 0.973795
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 82250101
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.831744 +/- 0.0037494 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.831744 @ 95%CL (1 toyMC)
median expected limit: r < 0.831744 @ 95%CL (1 toyMC)
   68% expected band : 0.831744 < r < 0.831744
   95% expected band : 0.831744 < r < 0.831744
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -579324521
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15962 +/- 0.00281134 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.15962 @ 95%CL (1 toyMC)
median expected limit: r < 1.15962 @ 95%CL (1 toyMC)
   68% expected band : 1.15962 < r < 1.15962
   95% expected band : 1.15962 < r < 1.15962
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1424710382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05356 +/- 0.00390492 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05356 @ 95%CL (1 toyMC)
median expected limit: r < 1.05356 @ 95%CL (1 toyMC)
   68% expected band : 1.05356 < r < 1.05356
   95% expected band : 1.05356 < r < 1.05356
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -514802471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.835889 +/- 0.00330286 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.835889 @ 95%CL (1 toyMC)
median expected limit: r < 0.835889 @ 95%CL (1 toyMC)
   68% expected band : 0.835889 < r < 0.835889
   95% expected band : 0.835889 < r < 0.835889
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -311348810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21727 +/- 0.00344224 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.21727 @ 95%CL (1 toyMC)
median expected limit: r < 1.21727 @ 95%CL (1 toyMC)
   68% expected band : 1.21727 < r < 1.21727
   95% expected band : 1.21727 < r < 1.21727
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1927370921
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.975001 +/- 0.00323998 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.975001 @ 95%CL (1 toyMC)
median expected limit: r < 0.975001 @ 95%CL (1 toyMC)
   68% expected band : 0.975001 < r < 0.975001
   95% expected band : 0.975001 < r < 0.975001
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1742602661
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.838359 +/- 0.00357408 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.838359 @ 95%CL (1 toyMC)
median expected limit: r < 0.838359 @ 95%CL (1 toyMC)
   68% expected band : 0.838359 < r < 0.838359
   95% expected band : 0.838359 < r < 0.838359
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1733261370
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.830562 +/- 0.00374668 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.830562 @ 95%CL (1 toyMC)
median expected limit: r < 0.830562 @ 95%CL (1 toyMC)
   68% expected band : 0.830562 < r < 0.830562
   95% expected band : 0.830562 < r < 0.830562
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1885912389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12378 +/- 0.00351391 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.12378 @ 95%CL (1 toyMC)
median expected limit: r < 1.12378 @ 95%CL (1 toyMC)
   68% expected band : 1.12378 < r < 1.12378
   95% expected band : 1.12378 < r < 1.12378
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1829505538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.835882 +/- 0.00431325 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.835882 @ 95%CL (1 toyMC)
median expected limit: r < 0.835882 @ 95%CL (1 toyMC)
   68% expected band : 0.835882 < r < 0.835882
   95% expected band : 0.835882 < r < 0.835882
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1039325011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60339 +/- 0.00323279 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.60339 @ 95%CL (1 toyMC)
median expected limit: r < 1.60339 @ 95%CL (1 toyMC)
   68% expected band : 1.60339 < r < 1.60339
   95% expected band : 1.60339 < r < 1.60339
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1780248124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6579 +/- 0.00348462 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.6579 @ 95%CL (1 toyMC)
median expected limit: r < 1.6579 @ 95%CL (1 toyMC)
   68% expected band : 1.6579 < r < 1.6579
   95% expected band : 1.6579 < r < 1.6579
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -388588367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.832306 +/- 0.00416647 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.832306 @ 95%CL (1 toyMC)
median expected limit: r < 0.832306 @ 95%CL (1 toyMC)
   68% expected band : 0.832306 < r < 0.832306
   95% expected band : 0.832306 < r < 0.832306
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1173486699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.832711 +/- 0.00410589 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.832711 @ 95%CL (1 toyMC)
median expected limit: r < 0.832711 @ 95%CL (1 toyMC)
   68% expected band : 0.832711 < r < 0.832711
   95% expected band : 0.832711 < r < 0.832711
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1281117383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.972759 +/- 0.00368353 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.972759 @ 95%CL (1 toyMC)
median expected limit: r < 0.972759 @ 95%CL (1 toyMC)
   68% expected band : 0.972759 < r < 0.972759
   95% expected band : 0.972759 < r < 0.972759
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -163311572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.83619 +/- 0.00368509 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.83619 @ 95%CL (1 toyMC)
median expected limit: r < 0.83619 @ 95%CL (1 toyMC)
   68% expected band : 0.83619 < r < 0.83619
   95% expected band : 0.83619 < r < 0.83619
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 839616120
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.989132 +/- 0.00424079 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.989132 @ 95%CL (1 toyMC)
median expected limit: r < 0.989132 @ 95%CL (1 toyMC)
   68% expected band : 0.989132 < r < 0.989132
   95% expected band : 0.989132 < r < 0.989132
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2106548679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19152 +/- 0.00388504 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.19152 @ 95%CL (1 toyMC)
median expected limit: r < 1.19152 @ 95%CL (1 toyMC)
   68% expected band : 1.19152 < r < 1.19152
   95% expected band : 1.19152 < r < 1.19152
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1254127487
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23708 +/- 0.00405376 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.23708 @ 95%CL (1 toyMC)
median expected limit: r < 1.23708 @ 95%CL (1 toyMC)
   68% expected band : 1.23708 < r < 1.23708
   95% expected band : 1.23708 < r < 1.23708
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -231257417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.835111 +/- 0.00393379 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.835111 @ 95%CL (1 toyMC)
median expected limit: r < 0.835111 @ 95%CL (1 toyMC)
   68% expected band : 0.835111 < r < 0.835111
   95% expected band : 0.835111 < r < 0.835111
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1108578737
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.825401 +/- 0.00286762 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.825401 @ 95%CL (1 toyMC)
median expected limit: r < 0.825401 @ 95%CL (1 toyMC)
   68% expected band : 0.825401 < r < 0.825401
   95% expected band : 0.825401 < r < 0.825401
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 89612295
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.836075 +/- 0.00336164 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.836075 @ 95%CL (1 toyMC)
median expected limit: r < 0.836075 @ 95%CL (1 toyMC)
   68% expected band : 0.836075 < r < 0.836075
   95% expected band : 0.836075 < r < 0.836075
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -188641765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.837736 +/- 0.00357973 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.837736 @ 95%CL (1 toyMC)
median expected limit: r < 0.837736 @ 95%CL (1 toyMC)
   68% expected band : 0.837736 < r < 0.837736
   95% expected band : 0.837736 < r < 0.837736
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 247305631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.827243 +/- 0.00338995 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.827243 @ 95%CL (1 toyMC)
median expected limit: r < 0.827243 @ 95%CL (1 toyMC)
   68% expected band : 0.827243 < r < 0.827243
   95% expected band : 0.827243 < r < 0.827243
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1244184431
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.843432 +/- 0.00314095 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.843432 @ 95%CL (1 toyMC)
median expected limit: r < 0.843432 @ 95%CL (1 toyMC)
   68% expected band : 0.843432 < r < 0.843432
   95% expected band : 0.843432 < r < 0.843432
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1238605972
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.967981 +/- 0.00364543 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.967981 @ 95%CL (1 toyMC)
median expected limit: r < 0.967981 @ 95%CL (1 toyMC)
   68% expected band : 0.967981 < r < 0.967981
   95% expected band : 0.967981 < r < 0.967981
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1002494892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.973829 +/- 0.00443481 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.973829 @ 95%CL (1 toyMC)
median expected limit: r < 0.973829 @ 95%CL (1 toyMC)
   68% expected band : 0.973829 < r < 0.973829
   95% expected band : 0.973829 < r < 0.973829
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1434248390
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.973297 +/- 0.00370063 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.973297 @ 95%CL (1 toyMC)
median expected limit: r < 0.973297 @ 95%CL (1 toyMC)
   68% expected band : 0.973297 < r < 0.973297
   95% expected band : 0.973297 < r < 0.973297
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1535198654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07874 +/- 0.00382997 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.07874 @ 95%CL (1 toyMC)
median expected limit: r < 1.07874 @ 95%CL (1 toyMC)
   68% expected band : 1.07874 < r < 1.07874
   95% expected band : 1.07874 < r < 1.07874
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -255544113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28471 +/- 0.0031477 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.28471 @ 95%CL (1 toyMC)
median expected limit: r < 1.28471 @ 95%CL (1 toyMC)
   68% expected band : 1.28471 < r < 1.28471
   95% expected band : 1.28471 < r < 1.28471
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1928262090
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.82854 +/- 0.00355422 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.82854 @ 95%CL (1 toyMC)
median expected limit: r < 0.82854 @ 95%CL (1 toyMC)
   68% expected band : 0.82854 < r < 0.82854
   95% expected band : 0.82854 < r < 0.82854
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 219068541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04165 +/- 0.00343921 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04165 @ 95%CL (1 toyMC)
median expected limit: r < 1.04165 @ 95%CL (1 toyMC)
   68% expected band : 1.04165 < r < 1.04165
   95% expected band : 1.04165 < r < 1.04165
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1275684206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1623 +/- 0.00347647 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.1623 @ 95%CL (1 toyMC)
median expected limit: r < 1.1623 @ 95%CL (1 toyMC)
   68% expected band : 1.1623 < r < 1.1623
   95% expected band : 1.1623 < r < 1.1623
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 629436111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.986837 +/- 0.00385229 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.986837 @ 95%CL (1 toyMC)
median expected limit: r < 0.986837 @ 95%CL (1 toyMC)
   68% expected band : 0.986837 < r < 0.986837
   95% expected band : 0.986837 < r < 0.986837
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1026973123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07054 +/- 0.00356614 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.07054 @ 95%CL (1 toyMC)
median expected limit: r < 1.07054 @ 95%CL (1 toyMC)
   68% expected band : 1.07054 < r < 1.07054
   95% expected band : 1.07054 < r < 1.07054
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1603328712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.836269 +/- 0.00451317 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.836269 @ 95%CL (1 toyMC)
median expected limit: r < 0.836269 @ 95%CL (1 toyMC)
   68% expected band : 0.836269 < r < 0.836269
   95% expected band : 0.836269 < r < 0.836269
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 636218539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24622 +/- 0.00341083 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.24622 @ 95%CL (1 toyMC)
median expected limit: r < 1.24622 @ 95%CL (1 toyMC)
   68% expected band : 1.24622 < r < 1.24622
   95% expected band : 1.24622 < r < 1.24622
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 265832342
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.829611 +/- 0.00385318 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.829611 @ 95%CL (1 toyMC)
median expected limit: r < 0.829611 @ 95%CL (1 toyMC)
   68% expected band : 0.829611 < r < 0.829611
   95% expected band : 0.829611 < r < 0.829611
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1316684279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.975051 +/- 0.00316944 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.975051 @ 95%CL (1 toyMC)
median expected limit: r < 0.975051 @ 95%CL (1 toyMC)
   68% expected band : 0.975051 < r < 0.975051
   95% expected band : 0.975051 < r < 0.975051
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -959341513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1093 +/- 0.0042202 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1093 @ 95%CL (1 toyMC)
median expected limit: r < 1.1093 @ 95%CL (1 toyMC)
   68% expected band : 1.1093 < r < 1.1093
   95% expected band : 1.1093 < r < 1.1093
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1640103922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.989018 +/- 0.00336755 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.989018 @ 95%CL (1 toyMC)
median expected limit: r < 0.989018 @ 95%CL (1 toyMC)
   68% expected band : 0.989018 < r < 0.989018
   95% expected band : 0.989018 < r < 0.989018
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -511009389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.95782 +/- 0.00356317 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.95782 @ 95%CL (1 toyMC)
median expected limit: r < 0.95782 @ 95%CL (1 toyMC)
   68% expected band : 0.95782 < r < 0.95782
   95% expected band : 0.95782 < r < 0.95782
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1743745582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00054 +/- 0.00313557 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.00054 @ 95%CL (1 toyMC)
median expected limit: r < 1.00054 @ 95%CL (1 toyMC)
   68% expected band : 1.00054 < r < 1.00054
   95% expected band : 1.00054 < r < 1.00054
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1107543727
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.821234 +/- 0.00337767 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.821234 @ 95%CL (1 toyMC)
median expected limit: r < 0.821234 @ 95%CL (1 toyMC)
   68% expected band : 0.821234 < r < 0.821234
   95% expected band : 0.821234 < r < 0.821234
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1533211893
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.826611 +/- 0.00307597 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.826611 @ 95%CL (1 toyMC)
median expected limit: r < 0.826611 @ 95%CL (1 toyMC)
   68% expected band : 0.826611 < r < 0.826611
   95% expected band : 0.826611 < r < 0.826611
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2016901132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00093 +/- 0.0032457 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.00093 @ 95%CL (1 toyMC)
median expected limit: r < 1.00093 @ 95%CL (1 toyMC)
   68% expected band : 1.00093 < r < 1.00093
   95% expected band : 1.00093 < r < 1.00093
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1975513208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.964869 +/- 0.00375981 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.964869 @ 95%CL (1 toyMC)
median expected limit: r < 0.964869 @ 95%CL (1 toyMC)
   68% expected band : 0.964869 < r < 0.964869
   95% expected band : 0.964869 < r < 0.964869
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 660743597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05286 +/- 0.00298912 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.05286 @ 95%CL (1 toyMC)
median expected limit: r < 1.05286 @ 95%CL (1 toyMC)
   68% expected band : 1.05286 < r < 1.05286
   95% expected band : 1.05286 < r < 1.05286
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 482106328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00241 +/- 0.00356275 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.00241 @ 95%CL (1 toyMC)
median expected limit: r < 1.00241 @ 95%CL (1 toyMC)
   68% expected band : 1.00241 < r < 1.00241
   95% expected band : 1.00241 < r < 1.00241
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 135313631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16417 +/- 0.00316826 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.16417 @ 95%CL (1 toyMC)
median expected limit: r < 1.16417 @ 95%CL (1 toyMC)
   68% expected band : 1.16417 < r < 1.16417
   95% expected band : 1.16417 < r < 1.16417
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -914354932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.819311 +/- 0.00323126 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.819311 @ 95%CL (1 toyMC)
median expected limit: r < 0.819311 @ 95%CL (1 toyMC)
   68% expected band : 0.819311 < r < 0.819311
   95% expected band : 0.819311 < r < 0.819311
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1234058286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.843936 +/- 0.00421156 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.843936 @ 95%CL (1 toyMC)
median expected limit: r < 0.843936 @ 95%CL (1 toyMC)
   68% expected band : 0.843936 < r < 0.843936
   95% expected band : 0.843936 < r < 0.843936
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1583780402
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01448 +/- 0.00351463 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.01448 @ 95%CL (1 toyMC)
median expected limit: r < 1.01448 @ 95%CL (1 toyMC)
   68% expected band : 1.01448 < r < 1.01448
   95% expected band : 1.01448 < r < 1.01448
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 870283080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05751 +/- 0.00349911 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05751 @ 95%CL (1 toyMC)
median expected limit: r < 1.05751 @ 95%CL (1 toyMC)
   68% expected band : 1.05751 < r < 1.05751
   95% expected band : 1.05751 < r < 1.05751
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1132256488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12151 +/- 0.00375191 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.12151 @ 95%CL (1 toyMC)
median expected limit: r < 1.12151 @ 95%CL (1 toyMC)
   68% expected band : 1.12151 < r < 1.12151
   95% expected band : 1.12151 < r < 1.12151
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1184064827
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00149 +/- 0.00347625 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.00149 @ 95%CL (1 toyMC)
median expected limit: r < 1.00149 @ 95%CL (1 toyMC)
   68% expected band : 1.00149 < r < 1.00149
   95% expected band : 1.00149 < r < 1.00149
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 67936576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.823699 +/- 0.00312361 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.823699 @ 95%CL (1 toyMC)
median expected limit: r < 0.823699 @ 95%CL (1 toyMC)
   68% expected band : 0.823699 < r < 0.823699
   95% expected band : 0.823699 < r < 0.823699
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2010663219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.827393 +/- 0.00451081 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.827393 @ 95%CL (1 toyMC)
median expected limit: r < 0.827393 @ 95%CL (1 toyMC)
   68% expected band : 0.827393 < r < 0.827393
   95% expected band : 0.827393 < r < 0.827393
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -328142320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.824504 +/- 0.00370597 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.824504 @ 95%CL (1 toyMC)
median expected limit: r < 0.824504 @ 95%CL (1 toyMC)
   68% expected band : 0.824504 < r < 0.824504
   95% expected band : 0.824504 < r < 0.824504
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -465975253
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.828636 +/- 0.00299774 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.828636 @ 95%CL (1 toyMC)
median expected limit: r < 0.828636 @ 95%CL (1 toyMC)
   68% expected band : 0.828636 < r < 0.828636
   95% expected band : 0.828636 < r < 0.828636
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -496151028
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03569 +/- 0.00363346 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03569 @ 95%CL (1 toyMC)
median expected limit: r < 1.03569 @ 95%CL (1 toyMC)
   68% expected band : 1.03569 < r < 1.03569
   95% expected band : 1.03569 < r < 1.03569
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2059499896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05058 +/- 0.00321284 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05058 @ 95%CL (1 toyMC)
median expected limit: r < 1.05058 @ 95%CL (1 toyMC)
   68% expected band : 1.05058 < r < 1.05058
   95% expected band : 1.05058 < r < 1.05058
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1835718545
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.826991 +/- 0.00357207 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.826991 @ 95%CL (1 toyMC)
median expected limit: r < 0.826991 @ 95%CL (1 toyMC)
   68% expected band : 0.826991 < r < 0.826991
   95% expected band : 0.826991 < r < 0.826991
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1533430714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.992504 +/- 0.00342392 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.992504 @ 95%CL (1 toyMC)
median expected limit: r < 0.992504 @ 95%CL (1 toyMC)
   68% expected band : 0.992504 < r < 0.992504
   95% expected band : 0.992504 < r < 0.992504
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1690043642
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2589 +/- 0.00384581 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.2589 @ 95%CL (1 toyMC)
median expected limit: r < 1.2589 @ 95%CL (1 toyMC)
   68% expected band : 1.2589 < r < 1.2589
   95% expected band : 1.2589 < r < 1.2589
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1381911182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48764 +/- 0.00369006 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.48764 @ 95%CL (1 toyMC)
median expected limit: r < 1.48764 @ 95%CL (1 toyMC)
   68% expected band : 1.48764 < r < 1.48764
   95% expected band : 1.48764 < r < 1.48764
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1026973123.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1039325011.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1088572264.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1107543727.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1108578737.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1135235783.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1145928918.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1162164824.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1254127487.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1269793972.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1347622139.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1381911182.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1424710382.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1470897514.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1472386411.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1535198654.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1583780402.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1603328712.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-163311572.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1743745582.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1780248124.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1825601851.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1886229150.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-188641765.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-1928262090.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-2010663219.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-2016901132.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-2036605848.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-2065033402.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-2106548679.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-231257417.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-255544113.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-311348810.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-328142320.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-388588367.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-465975253.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-475507185.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-496151028.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-511009389.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-514802471.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-579324521.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-593898978.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-792956822.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-832559931.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-85907587.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-914354932.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-959341513.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.1002494892.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.103591259.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.1132256488.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1173486699.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1184064827.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1234058286.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1238605972.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1244184431.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1275684206.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1281117383.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1316684279.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.135313631.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1367125121.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1380247098.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1434248390.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1458663653.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1533211893.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1533430714.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1630905756.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1640103922.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1690043642.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1733261370.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1742602661.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1811674123.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1829505538.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1835718545.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1842777983.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.1885912389.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.1904610991.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.1927370921.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.1975513208.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.2009089603.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.2047645818.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.2059499896.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.219068541.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.247305631.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.265832342.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.421272925.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.482106328.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.537286378.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.549302166.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.572624185.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.629436111.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.636218539.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.649132595.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.660743597.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.666018322.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.67936576.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.740381869.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.82250101.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.839616120.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.870283080.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.89612295.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 829827482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11553 +/- 0.00334559 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.11553 @ 95%CL (1 toyMC)
median expected limit: r < 1.11553 @ 95%CL (1 toyMC)
   68% expected band : 1.11553 < r < 1.11553
   95% expected band : 1.11553 < r < 1.11553
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1202676439
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23558 +/- 0.00397511 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.23558 @ 95%CL (1 toyMC)
median expected limit: r < 1.23558 @ 95%CL (1 toyMC)
   68% expected band : 1.23558 < r < 1.23558
   95% expected band : 1.23558 < r < 1.23558
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 125788774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.870799 +/- 0.00330589 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.870799 @ 95%CL (1 toyMC)
median expected limit: r < 0.870799 @ 95%CL (1 toyMC)
   68% expected band : 0.870799 < r < 0.870799
   95% expected band : 0.870799 < r < 0.870799
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1059970038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32963 +/- 0.00355896 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.32963 @ 95%CL (1 toyMC)
median expected limit: r < 1.32963 @ 95%CL (1 toyMC)
   68% expected band : 1.32963 < r < 1.32963
   95% expected band : 1.32963 < r < 1.32963
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 451705056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31402 +/- 0.00397611 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.31402 @ 95%CL (1 toyMC)
median expected limit: r < 1.31402 @ 95%CL (1 toyMC)
   68% expected band : 1.31402 < r < 1.31402
   95% expected band : 1.31402 < r < 1.31402
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 644022616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09753 +/- 0.0040548 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09753 @ 95%CL (1 toyMC)
median expected limit: r < 1.09753 @ 95%CL (1 toyMC)
   68% expected band : 1.09753 < r < 1.09753
   95% expected band : 1.09753 < r < 1.09753
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 870221197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.875125 +/- 0.00454764 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.875125 @ 95%CL (1 toyMC)
median expected limit: r < 0.875125 @ 95%CL (1 toyMC)
   68% expected band : 0.875125 < r < 0.875125
   95% expected band : 0.875125 < r < 0.875125
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 223737308
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.890137 +/- 0.00448174 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.890137 @ 95%CL (1 toyMC)
median expected limit: r < 0.890137 @ 95%CL (1 toyMC)
   68% expected band : 0.890137 < r < 0.890137
   95% expected band : 0.890137 < r < 0.890137
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1691443075
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.869479 +/- 0.00337928 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.869479 @ 95%CL (1 toyMC)
median expected limit: r < 0.869479 @ 95%CL (1 toyMC)
   68% expected band : 0.869479 < r < 0.869479
   95% expected band : 0.869479 < r < 0.869479
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -950652235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.874549 +/- 0.00387082 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.874549 @ 95%CL (1 toyMC)
median expected limit: r < 0.874549 @ 95%CL (1 toyMC)
   68% expected band : 0.874549 < r < 0.874549
   95% expected band : 0.874549 < r < 0.874549
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1570773385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.870569 +/- 0.00350379 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.870569 @ 95%CL (1 toyMC)
median expected limit: r < 0.870569 @ 95%CL (1 toyMC)
   68% expected band : 0.870569 < r < 0.870569
   95% expected band : 0.870569 < r < 0.870569
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -385493467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.870279 +/- 0.00264006 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.870279 @ 95%CL (1 toyMC)
median expected limit: r < 0.870279 @ 95%CL (1 toyMC)
   68% expected band : 0.870279 < r < 0.870279
   95% expected band : 0.870279 < r < 0.870279
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 316523550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.881087 +/- 0.00399834 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.881087 @ 95%CL (1 toyMC)
median expected limit: r < 0.881087 @ 95%CL (1 toyMC)
   68% expected band : 0.881087 < r < 0.881087
   95% expected band : 0.881087 < r < 0.881087
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1394404065
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.882841 +/- 0.0030442 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.882841 @ 95%CL (1 toyMC)
median expected limit: r < 0.882841 @ 95%CL (1 toyMC)
   68% expected band : 0.882841 < r < 0.882841
   95% expected band : 0.882841 < r < 0.882841
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1008058816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.870625 +/- 0.00314661 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.870625 @ 95%CL (1 toyMC)
median expected limit: r < 0.870625 @ 95%CL (1 toyMC)
   68% expected band : 0.870625 < r < 0.870625
   95% expected band : 0.870625 < r < 0.870625
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1686814291
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.87595 +/- 0.00357402 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.87595 @ 95%CL (1 toyMC)
median expected limit: r < 0.87595 @ 95%CL (1 toyMC)
   68% expected band : 0.87595 < r < 0.87595
   95% expected band : 0.87595 < r < 0.87595
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2102173021
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35365 +/- 0.00328513 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.35365 @ 95%CL (1 toyMC)
median expected limit: r < 1.35365 @ 95%CL (1 toyMC)
   68% expected band : 1.35365 < r < 1.35365
   95% expected band : 1.35365 < r < 1.35365
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -552579975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.876823 +/- 0.00434464 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.876823 @ 95%CL (1 toyMC)
median expected limit: r < 0.876823 @ 95%CL (1 toyMC)
   68% expected band : 0.876823 < r < 0.876823
   95% expected band : 0.876823 < r < 0.876823
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 621802965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.86625 +/- 0.00434788 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.86625 @ 95%CL (1 toyMC)
median expected limit: r < 0.86625 @ 95%CL (1 toyMC)
   68% expected band : 0.86625 < r < 0.86625
   95% expected band : 0.86625 < r < 0.86625
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 464366797
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13074 +/- 0.00409524 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.13074 @ 95%CL (1 toyMC)
median expected limit: r < 1.13074 @ 95%CL (1 toyMC)
   68% expected band : 1.13074 < r < 1.13074
   95% expected band : 1.13074 < r < 1.13074
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1161280706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3402 +/- 0.0036582 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.3402 @ 95%CL (1 toyMC)
median expected limit: r < 1.3402 @ 95%CL (1 toyMC)
   68% expected band : 1.3402 < r < 1.3402
   95% expected band : 1.3402 < r < 1.3402
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1698177414
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11162 +/- 0.00380259 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.11162 @ 95%CL (1 toyMC)
median expected limit: r < 1.11162 @ 95%CL (1 toyMC)
   68% expected band : 1.11162 < r < 1.11162
   95% expected band : 1.11162 < r < 1.11162
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1370049535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56734 +/- 0.00511469 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.56734 @ 95%CL (1 toyMC)
median expected limit: r < 1.56734 @ 95%CL (1 toyMC)
   68% expected band : 1.56734 < r < 1.56734
   95% expected band : 1.56734 < r < 1.56734
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -442062172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50805 +/- 0.0036989 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.50805 @ 95%CL (1 toyMC)
median expected limit: r < 1.50805 @ 95%CL (1 toyMC)
   68% expected band : 1.50805 < r < 1.50805
   95% expected band : 1.50805 < r < 1.50805
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1943132511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22122 +/- 0.00381156 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.22122 @ 95%CL (1 toyMC)
median expected limit: r < 1.22122 @ 95%CL (1 toyMC)
   68% expected band : 1.22122 < r < 1.22122
   95% expected band : 1.22122 < r < 1.22122
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -316000862
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.883878 +/- 0.0037556 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.883878 @ 95%CL (1 toyMC)
median expected limit: r < 0.883878 @ 95%CL (1 toyMC)
   68% expected band : 0.883878 < r < 0.883878
   95% expected band : 0.883878 < r < 0.883878
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1282491117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05187 +/- 0.00362231 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.05187 @ 95%CL (1 toyMC)
median expected limit: r < 1.05187 @ 95%CL (1 toyMC)
   68% expected band : 1.05187 < r < 1.05187
   95% expected band : 1.05187 < r < 1.05187
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 831346113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.872853 +/- 0.00455193 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.872853 @ 95%CL (1 toyMC)
median expected limit: r < 0.872853 @ 95%CL (1 toyMC)
   68% expected band : 0.872853 < r < 0.872853
   95% expected band : 0.872853 < r < 0.872853
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2141513860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.874497 +/- 0.00348455 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.874497 @ 95%CL (1 toyMC)
median expected limit: r < 0.874497 @ 95%CL (1 toyMC)
   68% expected band : 0.874497 < r < 0.874497
   95% expected band : 0.874497 < r < 0.874497
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 289370321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.881097 +/- 0.00321019 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.881097 @ 95%CL (1 toyMC)
median expected limit: r < 0.881097 @ 95%CL (1 toyMC)
   68% expected band : 0.881097 < r < 0.881097
   95% expected band : 0.881097 < r < 0.881097
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -836495344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27799 +/- 0.00321283 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.27799 @ 95%CL (1 toyMC)
median expected limit: r < 1.27799 @ 95%CL (1 toyMC)
   68% expected band : 1.27799 < r < 1.27799
   95% expected band : 1.27799 < r < 1.27799
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2012475761
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.876496 +/- 0.00365803 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.876496 @ 95%CL (1 toyMC)
median expected limit: r < 0.876496 @ 95%CL (1 toyMC)
   68% expected band : 0.876496 < r < 0.876496
   95% expected band : 0.876496 < r < 0.876496
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1737088922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.872565 +/- 0.00302485 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.872565 @ 95%CL (1 toyMC)
median expected limit: r < 0.872565 @ 95%CL (1 toyMC)
   68% expected band : 0.872565 < r < 0.872565
   95% expected band : 0.872565 < r < 0.872565
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1143401949
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27251 +/- 0.00437666 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.27251 @ 95%CL (1 toyMC)
median expected limit: r < 1.27251 @ 95%CL (1 toyMC)
   68% expected band : 1.27251 < r < 1.27251
   95% expected band : 1.27251 < r < 1.27251
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 77137582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.863815 +/- 0.00347775 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.863815 @ 95%CL (1 toyMC)
median expected limit: r < 0.863815 @ 95%CL (1 toyMC)
   68% expected band : 0.863815 < r < 0.863815
   95% expected band : 0.863815 < r < 0.863815
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1581124185
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17008 +/- 0.00348646 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.17008 @ 95%CL (1 toyMC)
median expected limit: r < 1.17008 @ 95%CL (1 toyMC)
   68% expected band : 1.17008 < r < 1.17008
   95% expected band : 1.17008 < r < 1.17008
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1376857828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18332 +/- 0.00371118 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.18332 @ 95%CL (1 toyMC)
median expected limit: r < 1.18332 @ 95%CL (1 toyMC)
   68% expected band : 1.18332 < r < 1.18332
   95% expected band : 1.18332 < r < 1.18332
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2119613604
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19997 +/- 0.00308723 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.19997 @ 95%CL (1 toyMC)
median expected limit: r < 1.19997 @ 95%CL (1 toyMC)
   68% expected band : 1.19997 < r < 1.19997
   95% expected band : 1.19997 < r < 1.19997
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -806192182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13219 +/- 0.00388753 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.13219 @ 95%CL (1 toyMC)
median expected limit: r < 2.13219 @ 95%CL (1 toyMC)
   68% expected band : 2.13219 < r < 2.13219
   95% expected band : 2.13219 < r < 2.13219
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 700065403
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.88229 +/- 0.00332135 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.88229 @ 95%CL (1 toyMC)
median expected limit: r < 0.88229 @ 95%CL (1 toyMC)
   68% expected band : 0.88229 < r < 0.88229
   95% expected band : 0.88229 < r < 0.88229
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1316353558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.877162 +/- 0.00358 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.877162 @ 95%CL (1 toyMC)
median expected limit: r < 0.877162 @ 95%CL (1 toyMC)
   68% expected band : 0.877162 < r < 0.877162
   95% expected band : 0.877162 < r < 0.877162
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 882709089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27151 +/- 0.00393827 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.27151 @ 95%CL (1 toyMC)
median expected limit: r < 1.27151 @ 95%CL (1 toyMC)
   68% expected band : 1.27151 < r < 1.27151
   95% expected band : 1.27151 < r < 1.27151
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1619908367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.872213 +/- 0.0032534 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.872213 @ 95%CL (1 toyMC)
median expected limit: r < 0.872213 @ 95%CL (1 toyMC)
   68% expected band : 0.872213 < r < 0.872213
   95% expected band : 0.872213 < r < 0.872213
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -768018085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.871728 +/- 0.00350015 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.871728 @ 95%CL (1 toyMC)
median expected limit: r < 0.871728 @ 95%CL (1 toyMC)
   68% expected band : 0.871728 < r < 0.871728
   95% expected band : 0.871728 < r < 0.871728
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -613076787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72932 +/- 0.00393473 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.72932 @ 95%CL (1 toyMC)
median expected limit: r < 1.72932 @ 95%CL (1 toyMC)
   68% expected band : 1.72932 < r < 1.72932
   95% expected band : 1.72932 < r < 1.72932
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1288103214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70971 +/- 0.00381894 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.70971 @ 95%CL (1 toyMC)
median expected limit: r < 1.70971 @ 95%CL (1 toyMC)
   68% expected band : 1.70971 < r < 1.70971
   95% expected band : 1.70971 < r < 1.70971
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -442382203
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10313 +/- 0.0041588 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.10313 @ 95%CL (1 toyMC)
median expected limit: r < 2.10313 @ 95%CL (1 toyMC)
   68% expected band : 2.10313 < r < 2.10313
   95% expected band : 2.10313 < r < 2.10313
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1865567300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36505 +/- 0.00345311 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.36505 @ 95%CL (1 toyMC)
median expected limit: r < 1.36505 @ 95%CL (1 toyMC)
   68% expected band : 1.36505 < r < 1.36505
   95% expected band : 1.36505 < r < 1.36505
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -870785285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09718 +/- 0.00337977 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09718 @ 95%CL (1 toyMC)
median expected limit: r < 1.09718 @ 95%CL (1 toyMC)
   68% expected band : 1.09718 < r < 1.09718
   95% expected band : 1.09718 < r < 1.09718
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1462341595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.872693 +/- 0.00397053 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.872693 @ 95%CL (1 toyMC)
median expected limit: r < 0.872693 @ 95%CL (1 toyMC)
   68% expected band : 0.872693 < r < 0.872693
   95% expected band : 0.872693 < r < 0.872693
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1487082475
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.876992 +/- 0.0042292 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.876992 @ 95%CL (1 toyMC)
median expected limit: r < 0.876992 @ 95%CL (1 toyMC)
   68% expected band : 0.876992 < r < 0.876992
   95% expected band : 0.876992 < r < 0.876992
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1244179993
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22999 +/- 0.00374598 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.22999 @ 95%CL (1 toyMC)
median expected limit: r < 1.22999 @ 95%CL (1 toyMC)
   68% expected band : 1.22999 < r < 1.22999
   95% expected band : 1.22999 < r < 1.22999
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1519887392
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04498 +/- 0.00339976 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04498 @ 95%CL (1 toyMC)
median expected limit: r < 1.04498 @ 95%CL (1 toyMC)
   68% expected band : 1.04498 < r < 1.04498
   95% expected band : 1.04498 < r < 1.04498
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 296261282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.867912 +/- 0.00363512 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.867912 @ 95%CL (1 toyMC)
median expected limit: r < 0.867912 @ 95%CL (1 toyMC)
   68% expected band : 0.867912 < r < 0.867912
   95% expected band : 0.867912 < r < 0.867912
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1514963546
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17455 +/- 0.00337022 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.17455 @ 95%CL (1 toyMC)
median expected limit: r < 1.17455 @ 95%CL (1 toyMC)
   68% expected band : 1.17455 < r < 1.17455
   95% expected band : 1.17455 < r < 1.17455
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1256565405
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.864037 +/- 0.00387018 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.864037 @ 95%CL (1 toyMC)
median expected limit: r < 0.864037 @ 95%CL (1 toyMC)
   68% expected band : 0.864037 < r < 0.864037
   95% expected band : 0.864037 < r < 0.864037
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1921432015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11552 +/- 0.00366696 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.11552 @ 95%CL (1 toyMC)
median expected limit: r < 1.11552 @ 95%CL (1 toyMC)
   68% expected band : 1.11552 < r < 1.11552
   95% expected band : 1.11552 < r < 1.11552
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 890645241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.873695 +/- 0.00342657 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.873695 @ 95%CL (1 toyMC)
median expected limit: r < 0.873695 @ 95%CL (1 toyMC)
   68% expected band : 0.873695 < r < 0.873695
   95% expected band : 0.873695 < r < 0.873695
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1579696666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.867151 +/- 0.00374175 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.867151 @ 95%CL (1 toyMC)
median expected limit: r < 0.867151 @ 95%CL (1 toyMC)
   68% expected band : 0.867151 < r < 0.867151
   95% expected band : 0.867151 < r < 0.867151
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 427564732
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.863875 +/- 0.00366226 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.863875 @ 95%CL (1 toyMC)
median expected limit: r < 0.863875 @ 95%CL (1 toyMC)
   68% expected band : 0.863875 < r < 0.863875
   95% expected band : 0.863875 < r < 0.863875
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1369438422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.881393 +/- 0.00353065 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.881393 @ 95%CL (1 toyMC)
median expected limit: r < 0.881393 @ 95%CL (1 toyMC)
   68% expected band : 0.881393 < r < 0.881393
   95% expected band : 0.881393 < r < 0.881393
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 220222728
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36944 +/- 0.00368133 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.36944 @ 95%CL (1 toyMC)
median expected limit: r < 1.36944 @ 95%CL (1 toyMC)
   68% expected band : 1.36944 < r < 1.36944
   95% expected band : 1.36944 < r < 1.36944
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -203291798
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21951 +/- 0.00382882 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.21951 @ 95%CL (1 toyMC)
median expected limit: r < 1.21951 @ 95%CL (1 toyMC)
   68% expected band : 1.21951 < r < 1.21951
   95% expected band : 1.21951 < r < 1.21951
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 978121092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.880112 +/- 0.00369816 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.880112 @ 95%CL (1 toyMC)
median expected limit: r < 0.880112 @ 95%CL (1 toyMC)
   68% expected band : 0.880112 < r < 0.880112
   95% expected band : 0.880112 < r < 0.880112
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1783761432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13538 +/- 0.00422321 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.13538 @ 95%CL (1 toyMC)
median expected limit: r < 1.13538 @ 95%CL (1 toyMC)
   68% expected band : 1.13538 < r < 1.13538
   95% expected band : 1.13538 < r < 1.13538
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1591935046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06823 +/- 0.00350829 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.06823 @ 95%CL (1 toyMC)
median expected limit: r < 1.06823 @ 95%CL (1 toyMC)
   68% expected band : 1.06823 < r < 1.06823
   95% expected band : 1.06823 < r < 1.06823
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1729121582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.87285 +/- 0.00363362 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.87285 @ 95%CL (1 toyMC)
median expected limit: r < 0.87285 @ 95%CL (1 toyMC)
   68% expected band : 0.87285 < r < 0.87285
   95% expected band : 0.87285 < r < 0.87285
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1326551674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.878765 +/- 0.00298582 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.878765 @ 95%CL (1 toyMC)
median expected limit: r < 0.878765 @ 95%CL (1 toyMC)
   68% expected band : 0.878765 < r < 0.878765
   95% expected band : 0.878765 < r < 0.878765
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 537997086
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.867985 +/- 0.00326427 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.867985 @ 95%CL (1 toyMC)
median expected limit: r < 0.867985 @ 95%CL (1 toyMC)
   68% expected band : 0.867985 < r < 0.867985
   95% expected band : 0.867985 < r < 0.867985
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -67318460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8974 +/- 0.00323391 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.8974 @ 95%CL (1 toyMC)
median expected limit: r < 1.8974 @ 95%CL (1 toyMC)
   68% expected band : 1.8974 < r < 1.8974
   95% expected band : 1.8974 < r < 1.8974
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1010543304
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.867819 +/- 0.00383979 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.867819 @ 95%CL (1 toyMC)
median expected limit: r < 0.867819 @ 95%CL (1 toyMC)
   68% expected band : 0.867819 < r < 0.867819
   95% expected band : 0.867819 < r < 0.867819
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1329207065
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12242 +/- 0.00430744 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.12242 @ 95%CL (1 toyMC)
median expected limit: r < 1.12242 @ 95%CL (1 toyMC)
   68% expected band : 1.12242 < r < 1.12242
   95% expected band : 1.12242 < r < 1.12242
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 174049986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17151 +/- 0.00359828 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.17151 @ 95%CL (1 toyMC)
median expected limit: r < 1.17151 @ 95%CL (1 toyMC)
   68% expected band : 1.17151 < r < 1.17151
   95% expected band : 1.17151 < r < 1.17151
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1386543922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10637 +/- 0.00408535 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.10637 @ 95%CL (1 toyMC)
median expected limit: r < 1.10637 @ 95%CL (1 toyMC)
   68% expected band : 1.10637 < r < 1.10637
   95% expected band : 1.10637 < r < 1.10637
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 251303706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33947 +/- 0.00347552 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.33947 @ 95%CL (1 toyMC)
median expected limit: r < 1.33947 @ 95%CL (1 toyMC)
   68% expected band : 1.33947 < r < 1.33947
   95% expected band : 1.33947 < r < 1.33947
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1112580547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33048 +/- 0.00340422 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.33048 @ 95%CL (1 toyMC)
median expected limit: r < 1.33048 @ 95%CL (1 toyMC)
   68% expected band : 1.33048 < r < 1.33048
   95% expected band : 1.33048 < r < 1.33048
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1741330941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.876459 +/- 0.00450237 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.876459 @ 95%CL (1 toyMC)
median expected limit: r < 0.876459 @ 95%CL (1 toyMC)
   68% expected band : 0.876459 < r < 0.876459
   95% expected band : 0.876459 < r < 0.876459
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -641168522
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.864376 +/- 0.00380687 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.864376 @ 95%CL (1 toyMC)
median expected limit: r < 0.864376 @ 95%CL (1 toyMC)
   68% expected band : 0.864376 < r < 0.864376
   95% expected band : 0.864376 < r < 0.864376
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 502670455
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.883986 +/- 0.00424222 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.883986 @ 95%CL (1 toyMC)
median expected limit: r < 0.883986 @ 95%CL (1 toyMC)
   68% expected band : 0.883986 < r < 0.883986
   95% expected band : 0.883986 < r < 0.883986
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -142723678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.873587 +/- 0.00351408 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.873587 @ 95%CL (1 toyMC)
median expected limit: r < 0.873587 @ 95%CL (1 toyMC)
   68% expected band : 0.873587 < r < 0.873587
   95% expected band : 0.873587 < r < 0.873587
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1599077313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.252 +/- 0.00319931 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.252 @ 95%CL (1 toyMC)
median expected limit: r < 1.252 @ 95%CL (1 toyMC)
   68% expected band : 1.252 < r < 1.252
   95% expected band : 1.252 < r < 1.252
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1095053981
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16243 +/- 0.00370138 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.16243 @ 95%CL (1 toyMC)
median expected limit: r < 1.16243 @ 95%CL (1 toyMC)
   68% expected band : 1.16243 < r < 1.16243
   95% expected band : 1.16243 < r < 1.16243
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2103318060
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.871851 +/- 0.00340501 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.871851 @ 95%CL (1 toyMC)
median expected limit: r < 0.871851 @ 95%CL (1 toyMC)
   68% expected band : 0.871851 < r < 0.871851
   95% expected band : 0.871851 < r < 0.871851
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1957114766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09201 +/- 0.00414215 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09201 @ 95%CL (1 toyMC)
median expected limit: r < 1.09201 @ 95%CL (1 toyMC)
   68% expected band : 1.09201 < r < 1.09201
   95% expected band : 1.09201 < r < 1.09201
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1587034747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13649 +/- 0.00325991 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.13649 @ 95%CL (1 toyMC)
median expected limit: r < 1.13649 @ 95%CL (1 toyMC)
   68% expected band : 1.13649 < r < 1.13649
   95% expected band : 1.13649 < r < 1.13649
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1587182353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14862 +/- 0.00357835 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.14862 @ 95%CL (1 toyMC)
median expected limit: r < 1.14862 @ 95%CL (1 toyMC)
   68% expected band : 1.14862 < r < 1.14862
   95% expected band : 1.14862 < r < 1.14862
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -103704985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.871648 +/- 0.00353828 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.871648 @ 95%CL (1 toyMC)
median expected limit: r < 0.871648 @ 95%CL (1 toyMC)
   68% expected band : 0.871648 < r < 0.871648
   95% expected band : 0.871648 < r < 0.871648
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1234714165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10362 +/- 0.00369154 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.10362 @ 95%CL (1 toyMC)
median expected limit: r < 1.10362 @ 95%CL (1 toyMC)
   68% expected band : 1.10362 < r < 1.10362
   95% expected band : 1.10362 < r < 1.10362
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1551374117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1859 +/- 0.00440249 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.1859 @ 95%CL (1 toyMC)
median expected limit: r < 1.1859 @ 95%CL (1 toyMC)
   68% expected band : 1.1859 < r < 1.1859
   95% expected band : 1.1859 < r < 1.1859
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -13740032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.870992 +/- 0.00374712 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.870992 @ 95%CL (1 toyMC)
median expected limit: r < 0.870992 @ 95%CL (1 toyMC)
   68% expected band : 0.870992 < r < 0.870992
   95% expected band : 0.870992 < r < 0.870992
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -610142574
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.878842 +/- 0.0033251 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.878842 @ 95%CL (1 toyMC)
median expected limit: r < 0.878842 @ 95%CL (1 toyMC)
   68% expected band : 0.878842 < r < 0.878842
   95% expected band : 0.878842 < r < 0.878842
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2091668363
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63151 +/- 0.00386628 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.63151 @ 95%CL (1 toyMC)
median expected limit: r < 1.63151 @ 95%CL (1 toyMC)
   68% expected band : 1.63151 < r < 1.63151
   95% expected band : 1.63151 < r < 1.63151
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 627024976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09736 +/- 0.00419565 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09736 @ 95%CL (1 toyMC)
median expected limit: r < 1.09736 @ 95%CL (1 toyMC)
   68% expected band : 1.09736 < r < 1.09736
   95% expected band : 1.09736 < r < 1.09736
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2123735114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5903 +/- 0.00444737 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.5903 @ 95%CL (1 toyMC)
median expected limit: r < 1.5903 @ 95%CL (1 toyMC)
   68% expected band : 1.5903 < r < 1.5903
   95% expected band : 1.5903 < r < 1.5903
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -73418228
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05926 +/- 0.00385867 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.05926 @ 95%CL (1 toyMC)
median expected limit: r < 1.05926 @ 95%CL (1 toyMC)
   68% expected band : 1.05926 < r < 1.05926
   95% expected band : 1.05926 < r < 1.05926
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 212238782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.878109 +/- 0.00395276 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.878109 @ 95%CL (1 toyMC)
median expected limit: r < 0.878109 @ 95%CL (1 toyMC)
   68% expected band : 0.878109 < r < 0.878109
   95% expected band : 0.878109 < r < 0.878109
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2027830375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.8736 +/- 0.00462744 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.8736 @ 95%CL (1 toyMC)
median expected limit: r < 0.8736 @ 95%CL (1 toyMC)
   68% expected band : 0.8736 < r < 0.8736
   95% expected band : 0.8736 < r < 0.8736
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -870432323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13184 +/- 0.00363761 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.13184 @ 95%CL (1 toyMC)
median expected limit: r < 1.13184 @ 95%CL (1 toyMC)
   68% expected band : 1.13184 < r < 1.13184
   95% expected band : 1.13184 < r < 1.13184
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1198121198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.874549 +/- 0.00325704 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.874549 @ 95%CL (1 toyMC)
median expected limit: r < 0.874549 @ 95%CL (1 toyMC)
   68% expected band : 0.874549 < r < 0.874549
   95% expected band : 0.874549 < r < 0.874549
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1301242649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63967 +/- 0.00380375 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.63967 @ 95%CL (1 toyMC)
median expected limit: r < 1.63967 @ 95%CL (1 toyMC)
   68% expected band : 1.63967 < r < 1.63967
   95% expected band : 1.63967 < r < 1.63967
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1008058816.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1010543304.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-103704985.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1059970038.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1095053981.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1161280706.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1198121198.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1244179993.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1256565405.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1282491117.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1301242649.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1316353558.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-13740032.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1376857828.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-142723678.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1462341595.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1570773385.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1579696666.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1591935046.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1599077313.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1619908367.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1691443075.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1729121582.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-1737088922.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-1921432015.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-1943132511.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-1957114766.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-2012475761.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-2027830375.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-203291798.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-2102173021.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-2103318060.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-2119613604.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-316000862.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-385493467.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-442062172.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-442382203.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-552579975.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-610142574.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-613076787.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-641168522.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-67318460.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-73418228.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-768018085.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-806192182.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-836495344.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-870432323.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-870785285.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-950652235.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.1112580547.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1143401949.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1202676439.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1234714165.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.125788774.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1288103214.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1326551674.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1329207065.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1369438422.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1370049535.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1386543922.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1394404065.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1487082475.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1514963546.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1519887392.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1551374117.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1581124185.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1587034747.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1587182353.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1686814291.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1698177414.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.174049986.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1741330941.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1783761432.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1865567300.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.2091668363.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.212238782.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.2123735114.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.2141513860.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.220222728.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.223737308.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.251303706.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.289370321.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.296261282.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.316523550.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.427564732.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.451705056.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.464366797.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.502670455.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.537997086.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.621802965.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.627024976.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.644022616.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.700065403.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.77137582.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.829827482.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.831346113.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.870221197.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.882709089.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.890645241.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.978121092.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2114938750
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3034 +/- 0.00377582 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.3034 @ 95%CL (1 toyMC)
median expected limit: r < 1.3034 @ 95%CL (1 toyMC)
   68% expected band : 1.3034 < r < 1.3034
   95% expected band : 1.3034 < r < 1.3034
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -747912054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.911729 +/- 0.00364126 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.911729 @ 95%CL (1 toyMC)
median expected limit: r < 0.911729 @ 95%CL (1 toyMC)
   68% expected band : 0.911729 < r < 0.911729
   95% expected band : 0.911729 < r < 0.911729
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1171276867
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.923811 +/- 0.0038707 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.923811 @ 95%CL (1 toyMC)
median expected limit: r < 0.923811 @ 95%CL (1 toyMC)
   68% expected band : 0.923811 < r < 0.923811
   95% expected band : 0.923811 < r < 0.923811
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1118633046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.920572 +/- 0.0036032 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.920572 @ 95%CL (1 toyMC)
median expected limit: r < 0.920572 @ 95%CL (1 toyMC)
   68% expected band : 0.920572 < r < 0.920572
   95% expected band : 0.920572 < r < 0.920572
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1647075129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.920921 +/- 0.00367627 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.920921 @ 95%CL (1 toyMC)
median expected limit: r < 0.920921 @ 95%CL (1 toyMC)
   68% expected band : 0.920921 < r < 0.920921
   95% expected band : 0.920921 < r < 0.920921
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -591272000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15822 +/- 0.00320707 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.15822 @ 95%CL (1 toyMC)
median expected limit: r < 1.15822 @ 95%CL (1 toyMC)
   68% expected band : 1.15822 < r < 1.15822
   95% expected band : 1.15822 < r < 1.15822
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1862441038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.910053 +/- 0.00416329 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.910053 @ 95%CL (1 toyMC)
median expected limit: r < 0.910053 @ 95%CL (1 toyMC)
   68% expected band : 0.910053 < r < 0.910053
   95% expected band : 0.910053 < r < 0.910053
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1027519614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.932078 +/- 0.00449287 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.932078 @ 95%CL (1 toyMC)
median expected limit: r < 0.932078 @ 95%CL (1 toyMC)
   68% expected band : 0.932078 < r < 0.932078
   95% expected band : 0.932078 < r < 0.932078
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1164598217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.90661 +/- 0.00417374 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.90661 @ 95%CL (1 toyMC)
median expected limit: r < 0.90661 @ 95%CL (1 toyMC)
   68% expected band : 0.90661 < r < 0.90661
   95% expected band : 0.90661 < r < 0.90661
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 57092635
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49087 +/- 0.00377774 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.49087 @ 95%CL (1 toyMC)
median expected limit: r < 1.49087 @ 95%CL (1 toyMC)
   68% expected band : 1.49087 < r < 1.49087
   95% expected band : 1.49087 < r < 1.49087
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1913383152
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.933009 +/- 0.00389078 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.933009 @ 95%CL (1 toyMC)
median expected limit: r < 0.933009 @ 95%CL (1 toyMC)
   68% expected band : 0.933009 < r < 0.933009
   95% expected band : 0.933009 < r < 0.933009
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 301922751
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.47778 +/- 0.00336708 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.47778 @ 95%CL (1 toyMC)
median expected limit: r < 1.47778 @ 95%CL (1 toyMC)
   68% expected band : 1.47778 < r < 1.47778
   95% expected band : 1.47778 < r < 1.47778
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -708789543
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60584 +/- 0.00317094 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.60584 @ 95%CL (1 toyMC)
median expected limit: r < 1.60584 @ 95%CL (1 toyMC)
   68% expected band : 1.60584 < r < 1.60584
   95% expected band : 1.60584 < r < 1.60584
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1228837199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26038 +/- 0.00430381 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26038 @ 95%CL (1 toyMC)
median expected limit: r < 1.26038 @ 95%CL (1 toyMC)
   68% expected band : 1.26038 < r < 1.26038
   95% expected band : 1.26038 < r < 1.26038
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1249376219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1535 +/- 0.00352508 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1535 @ 95%CL (1 toyMC)
median expected limit: r < 1.1535 @ 95%CL (1 toyMC)
   68% expected band : 1.1535 < r < 1.1535
   95% expected band : 1.1535 < r < 1.1535
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1724139209
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20213 +/- 0.00417968 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.20213 @ 95%CL (1 toyMC)
median expected limit: r < 1.20213 @ 95%CL (1 toyMC)
   68% expected band : 1.20213 < r < 1.20213
   95% expected band : 1.20213 < r < 1.20213
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1186083901
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.928895 +/- 0.0031964 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.928895 @ 95%CL (1 toyMC)
median expected limit: r < 0.928895 @ 95%CL (1 toyMC)
   68% expected band : 0.928895 < r < 0.928895
   95% expected band : 0.928895 < r < 0.928895
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1178022405
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77666 +/- 0.00319549 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.77666 @ 95%CL (1 toyMC)
median expected limit: r < 1.77666 @ 95%CL (1 toyMC)
   68% expected band : 1.77666 < r < 1.77666
   95% expected band : 1.77666 < r < 1.77666
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 575457219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17595 +/- 0.00402837 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17595 @ 95%CL (1 toyMC)
median expected limit: r < 1.17595 @ 95%CL (1 toyMC)
   68% expected band : 1.17595 < r < 1.17595
   95% expected band : 1.17595 < r < 1.17595
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1969292747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45832 +/- 0.00393875 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.45832 @ 95%CL (1 toyMC)
median expected limit: r < 1.45832 @ 95%CL (1 toyMC)
   68% expected band : 1.45832 < r < 1.45832
   95% expected band : 1.45832 < r < 1.45832
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1670340572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.918416 +/- 0.00413457 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.918416 @ 95%CL (1 toyMC)
median expected limit: r < 0.918416 @ 95%CL (1 toyMC)
   68% expected band : 0.918416 < r < 0.918416
   95% expected band : 0.918416 < r < 0.918416
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1724645698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.92102 +/- 0.00361753 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.92102 @ 95%CL (1 toyMC)
median expected limit: r < 0.92102 @ 95%CL (1 toyMC)
   68% expected band : 0.92102 < r < 0.92102
   95% expected band : 0.92102 < r < 0.92102
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1734537687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.913103 +/- 0.00306656 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.913103 @ 95%CL (1 toyMC)
median expected limit: r < 0.913103 @ 95%CL (1 toyMC)
   68% expected band : 0.913103 < r < 0.913103
   95% expected band : 0.913103 < r < 0.913103
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1917329467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.924992 +/- 0.00423532 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.924992 @ 95%CL (1 toyMC)
median expected limit: r < 0.924992 @ 95%CL (1 toyMC)
   68% expected band : 0.924992 < r < 0.924992
   95% expected band : 0.924992 < r < 0.924992
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1882898395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.921576 +/- 0.00358078 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.921576 @ 95%CL (1 toyMC)
median expected limit: r < 0.921576 @ 95%CL (1 toyMC)
   68% expected band : 0.921576 < r < 0.921576
   95% expected band : 0.921576 < r < 0.921576
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 437177627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.928349 +/- 0.00357644 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.928349 @ 95%CL (1 toyMC)
median expected limit: r < 0.928349 @ 95%CL (1 toyMC)
   68% expected band : 0.928349 < r < 0.928349
   95% expected band : 0.928349 < r < 0.928349
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1033092311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.923897 +/- 0.0035507 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.923897 @ 95%CL (1 toyMC)
median expected limit: r < 0.923897 @ 95%CL (1 toyMC)
   68% expected band : 0.923897 < r < 0.923897
   95% expected band : 0.923897 < r < 0.923897
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1978225576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.7418 +/- 0.0037323 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.7418 @ 95%CL (1 toyMC)
median expected limit: r < 1.7418 @ 95%CL (1 toyMC)
   68% expected band : 1.7418 < r < 1.7418
   95% expected band : 1.7418 < r < 1.7418
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 164425556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.920944 +/- 0.00354472 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.920944 @ 95%CL (1 toyMC)
median expected limit: r < 0.920944 @ 95%CL (1 toyMC)
   68% expected band : 0.920944 < r < 0.920944
   95% expected band : 0.920944 < r < 0.920944
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1363970710
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.931835 +/- 0.004362 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.931835 @ 95%CL (1 toyMC)
median expected limit: r < 0.931835 @ 95%CL (1 toyMC)
   68% expected band : 0.931835 < r < 0.931835
   95% expected band : 0.931835 < r < 0.931835
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -918433178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24925 +/- 0.00402902 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.24925 @ 95%CL (1 toyMC)
median expected limit: r < 1.24925 @ 95%CL (1 toyMC)
   68% expected band : 1.24925 < r < 1.24925
   95% expected band : 1.24925 < r < 1.24925
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1523317632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25233 +/- 0.00362273 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.25233 @ 95%CL (1 toyMC)
median expected limit: r < 1.25233 @ 95%CL (1 toyMC)
   68% expected band : 1.25233 < r < 1.25233
   95% expected band : 1.25233 < r < 1.25233
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2045902640
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.918999 +/- 0.00396953 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.918999 @ 95%CL (1 toyMC)
median expected limit: r < 0.918999 @ 95%CL (1 toyMC)
   68% expected band : 0.918999 < r < 0.918999
   95% expected band : 0.918999 < r < 0.918999
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -103478614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.934609 +/- 0.00462641 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.934609 @ 95%CL (1 toyMC)
median expected limit: r < 0.934609 @ 95%CL (1 toyMC)
   68% expected band : 0.934609 < r < 0.934609
   95% expected band : 0.934609 < r < 0.934609
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -178347335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.931633 +/- 0.00398771 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.931633 @ 95%CL (1 toyMC)
median expected limit: r < 0.931633 @ 95%CL (1 toyMC)
   68% expected band : 0.931633 < r < 0.931633
   95% expected band : 0.931633 < r < 0.931633
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1033632129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.919878 +/- 0.0037975 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.919878 @ 95%CL (1 toyMC)
median expected limit: r < 0.919878 @ 95%CL (1 toyMC)
   68% expected band : 0.919878 < r < 0.919878
   95% expected band : 0.919878 < r < 0.919878
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1853520413
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.914175 +/- 0.00440285 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.914175 @ 95%CL (1 toyMC)
median expected limit: r < 0.914175 @ 95%CL (1 toyMC)
   68% expected band : 0.914175 < r < 0.914175
   95% expected band : 0.914175 < r < 0.914175
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1421070215
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39953 +/- 0.00392397 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.39953 @ 95%CL (1 toyMC)
median expected limit: r < 1.39953 @ 95%CL (1 toyMC)
   68% expected band : 1.39953 < r < 1.39953
   95% expected band : 1.39953 < r < 1.39953
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -810322197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26769 +/- 0.00392295 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26769 @ 95%CL (1 toyMC)
median expected limit: r < 1.26769 @ 95%CL (1 toyMC)
   68% expected band : 1.26769 < r < 1.26769
   95% expected band : 1.26769 < r < 1.26769
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1894749445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.924508 +/- 0.00416425 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.924508 @ 95%CL (1 toyMC)
median expected limit: r < 0.924508 @ 95%CL (1 toyMC)
   68% expected band : 0.924508 < r < 0.924508
   95% expected band : 0.924508 < r < 0.924508
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -276989241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.75232 +/- 0.00414703 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.75232 @ 95%CL (1 toyMC)
median expected limit: r < 1.75232 @ 95%CL (1 toyMC)
   68% expected band : 1.75232 < r < 1.75232
   95% expected band : 1.75232 < r < 1.75232
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 524579578
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17084 +/- 0.00490301 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.17084 @ 95%CL (1 toyMC)
median expected limit: r < 1.17084 @ 95%CL (1 toyMC)
   68% expected band : 1.17084 < r < 1.17084
   95% expected band : 1.17084 < r < 1.17084
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 815724500
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46742 +/- 0.00452209 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.46742 @ 95%CL (1 toyMC)
median expected limit: r < 1.46742 @ 95%CL (1 toyMC)
   68% expected band : 1.46742 < r < 1.46742
   95% expected band : 1.46742 < r < 1.46742
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 162043772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17986 +/- 0.00335184 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17986 @ 95%CL (1 toyMC)
median expected limit: r < 1.17986 @ 95%CL (1 toyMC)
   68% expected band : 1.17986 < r < 1.17986
   95% expected band : 1.17986 < r < 1.17986
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1187262731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30868 +/- 0.00432038 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.30868 @ 95%CL (1 toyMC)
median expected limit: r < 1.30868 @ 95%CL (1 toyMC)
   68% expected band : 1.30868 < r < 1.30868
   95% expected band : 1.30868 < r < 1.30868
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1634839841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.919176 +/- 0.0036516 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.919176 @ 95%CL (1 toyMC)
median expected limit: r < 0.919176 @ 95%CL (1 toyMC)
   68% expected band : 0.919176 < r < 0.919176
   95% expected band : 0.919176 < r < 0.919176
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -832153307
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30114 +/- 0.00356619 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.30114 @ 95%CL (1 toyMC)
median expected limit: r < 1.30114 @ 95%CL (1 toyMC)
   68% expected band : 1.30114 < r < 1.30114
   95% expected band : 1.30114 < r < 1.30114
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1157510660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.939037 +/- 0.00366329 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.939037 @ 95%CL (1 toyMC)
median expected limit: r < 0.939037 @ 95%CL (1 toyMC)
   68% expected band : 0.939037 < r < 0.939037
   95% expected band : 0.939037 < r < 0.939037
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1414472822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19904 +/- 0.00420707 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.19904 @ 95%CL (1 toyMC)
median expected limit: r < 1.19904 @ 95%CL (1 toyMC)
   68% expected band : 1.19904 < r < 1.19904
   95% expected band : 1.19904 < r < 1.19904
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1942945482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.928737 +/- 0.00398911 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.928737 @ 95%CL (1 toyMC)
median expected limit: r < 0.928737 @ 95%CL (1 toyMC)
   68% expected band : 0.928737 < r < 0.928737
   95% expected band : 0.928737 < r < 0.928737
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1536930513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.938965 +/- 0.00424043 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.938965 @ 95%CL (1 toyMC)
median expected limit: r < 0.938965 @ 95%CL (1 toyMC)
   68% expected band : 0.938965 < r < 0.938965
   95% expected band : 0.938965 < r < 0.938965
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -574526362
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69195 +/- 0.00398596 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.69195 @ 95%CL (1 toyMC)
median expected limit: r < 1.69195 @ 95%CL (1 toyMC)
   68% expected band : 1.69195 < r < 1.69195
   95% expected band : 1.69195 < r < 1.69195
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1921959459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.915121 +/- 0.00390954 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.915121 @ 95%CL (1 toyMC)
median expected limit: r < 0.915121 @ 95%CL (1 toyMC)
   68% expected band : 0.915121 < r < 0.915121
   95% expected band : 0.915121 < r < 0.915121
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1949358665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.929894 +/- 0.00431254 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.929894 @ 95%CL (1 toyMC)
median expected limit: r < 0.929894 @ 95%CL (1 toyMC)
   68% expected band : 0.929894 < r < 0.929894
   95% expected band : 0.929894 < r < 0.929894
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1504261627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.917592 +/- 0.00296092 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.917592 @ 95%CL (1 toyMC)
median expected limit: r < 0.917592 @ 95%CL (1 toyMC)
   68% expected band : 0.917592 < r < 0.917592
   95% expected band : 0.917592 < r < 0.917592
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2018877385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.75418 +/- 0.00408958 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.75418 @ 95%CL (1 toyMC)
median expected limit: r < 1.75418 @ 95%CL (1 toyMC)
   68% expected band : 1.75418 < r < 1.75418
   95% expected band : 1.75418 < r < 1.75418
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1536928122
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.921745 +/- 0.00376491 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.921745 @ 95%CL (1 toyMC)
median expected limit: r < 0.921745 @ 95%CL (1 toyMC)
   68% expected band : 0.921745 < r < 0.921745
   95% expected band : 0.921745 < r < 0.921745
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -380350103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35765 +/- 0.00398223 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.35765 @ 95%CL (1 toyMC)
median expected limit: r < 1.35765 @ 95%CL (1 toyMC)
   68% expected band : 1.35765 < r < 1.35765
   95% expected band : 1.35765 < r < 1.35765
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 972334186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.926641 +/- 0.0041807 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 0.926641 @ 95%CL (1 toyMC)
median expected limit: r < 0.926641 @ 95%CL (1 toyMC)
   68% expected band : 0.926641 < r < 0.926641
   95% expected band : 0.926641 < r < 0.926641
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -763984805
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19781 +/- 0.00490603 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.19781 @ 95%CL (1 toyMC)
median expected limit: r < 1.19781 @ 95%CL (1 toyMC)
   68% expected band : 1.19781 < r < 1.19781
   95% expected band : 1.19781 < r < 1.19781
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -433231331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.924011 +/- 0.00445637 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.924011 @ 95%CL (1 toyMC)
median expected limit: r < 0.924011 @ 95%CL (1 toyMC)
   68% expected band : 0.924011 < r < 0.924011
   95% expected band : 0.924011 < r < 0.924011
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1072077831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21281 +/- 0.00314507 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.21281 @ 95%CL (1 toyMC)
median expected limit: r < 1.21281 @ 95%CL (1 toyMC)
   68% expected band : 1.21281 < r < 1.21281
   95% expected band : 1.21281 < r < 1.21281
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1023446237
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45487 +/- 0.00327617 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.45487 @ 95%CL (1 toyMC)
median expected limit: r < 1.45487 @ 95%CL (1 toyMC)
   68% expected band : 1.45487 < r < 1.45487
   95% expected band : 1.45487 < r < 1.45487
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 560032898
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.79797 +/- 0.00385066 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.79797 @ 95%CL (1 toyMC)
median expected limit: r < 1.79797 @ 95%CL (1 toyMC)
   68% expected band : 1.79797 < r < 1.79797
   95% expected band : 1.79797 < r < 1.79797
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1149080651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.924824 +/- 0.00361764 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.924824 @ 95%CL (1 toyMC)
median expected limit: r < 0.924824 @ 95%CL (1 toyMC)
   68% expected band : 0.924824 < r < 0.924824
   95% expected band : 0.924824 < r < 0.924824
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1625711936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2018 +/- 0.00329927 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.2018 @ 95%CL (1 toyMC)
median expected limit: r < 1.2018 @ 95%CL (1 toyMC)
   68% expected band : 1.2018 < r < 1.2018
   95% expected band : 1.2018 < r < 1.2018
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 455619417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15404 +/- 0.00431263 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.15404 @ 95%CL (1 toyMC)
median expected limit: r < 1.15404 @ 95%CL (1 toyMC)
   68% expected band : 1.15404 < r < 1.15404
   95% expected band : 1.15404 < r < 1.15404
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1364140190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16036 +/- 0.00435779 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.16036 @ 95%CL (1 toyMC)
median expected limit: r < 1.16036 @ 95%CL (1 toyMC)
   68% expected band : 1.16036 < r < 1.16036
   95% expected band : 1.16036 < r < 1.16036
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1296216118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32172 +/- 0.00332085 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.32172 @ 95%CL (1 toyMC)
median expected limit: r < 1.32172 @ 95%CL (1 toyMC)
   68% expected band : 1.32172 < r < 1.32172
   95% expected band : 1.32172 < r < 1.32172
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1927601768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.937706 +/- 0.00464301 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.937706 @ 95%CL (1 toyMC)
median expected limit: r < 0.937706 @ 95%CL (1 toyMC)
   68% expected band : 0.937706 < r < 0.937706
   95% expected band : 0.937706 < r < 0.937706
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 784416199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.919334 +/- 0.00409842 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.919334 @ 95%CL (1 toyMC)
median expected limit: r < 0.919334 @ 95%CL (1 toyMC)
   68% expected band : 0.919334 < r < 0.919334
   95% expected band : 0.919334 < r < 0.919334
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1168486808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.913968 +/- 0.00358131 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.913968 @ 95%CL (1 toyMC)
median expected limit: r < 0.913968 @ 95%CL (1 toyMC)
   68% expected band : 0.913968 < r < 0.913968
   95% expected band : 0.913968 < r < 0.913968
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1039324070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29832 +/- 0.00314502 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.29832 @ 95%CL (1 toyMC)
median expected limit: r < 1.29832 @ 95%CL (1 toyMC)
   68% expected band : 1.29832 < r < 1.29832
   95% expected band : 1.29832 < r < 1.29832
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1484402715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.916459 +/- 0.00365446 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.916459 @ 95%CL (1 toyMC)
median expected limit: r < 0.916459 @ 95%CL (1 toyMC)
   68% expected band : 0.916459 < r < 0.916459
   95% expected band : 0.916459 < r < 0.916459
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1272095317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.924663 +/- 0.00339445 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.924663 @ 95%CL (1 toyMC)
median expected limit: r < 0.924663 @ 95%CL (1 toyMC)
   68% expected band : 0.924663 < r < 0.924663
   95% expected band : 0.924663 < r < 0.924663
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1770508770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.917324 +/- 0.00361288 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.917324 @ 95%CL (1 toyMC)
median expected limit: r < 0.917324 @ 95%CL (1 toyMC)
   68% expected band : 0.917324 < r < 0.917324
   95% expected band : 0.917324 < r < 0.917324
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 756457172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.354 +/- 0.00406317 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.354 @ 95%CL (1 toyMC)
median expected limit: r < 1.354 @ 95%CL (1 toyMC)
   68% expected band : 1.354 < r < 1.354
   95% expected band : 1.354 < r < 1.354
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1589735800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16462 +/- 0.00381785 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.16462 @ 95%CL (1 toyMC)
median expected limit: r < 1.16462 @ 95%CL (1 toyMC)
   68% expected band : 1.16462 < r < 1.16462
   95% expected band : 1.16462 < r < 1.16462
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -783170536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27059 +/- 0.00472347 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.27059 @ 95%CL (1 toyMC)
median expected limit: r < 1.27059 @ 95%CL (1 toyMC)
   68% expected band : 1.27059 < r < 1.27059
   95% expected band : 1.27059 < r < 1.27059
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 551830527
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.921402 +/- 0.0036402 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.921402 @ 95%CL (1 toyMC)
median expected limit: r < 0.921402 @ 95%CL (1 toyMC)
   68% expected band : 0.921402 < r < 0.921402
   95% expected band : 0.921402 < r < 0.921402
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1317355061
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.923735 +/- 0.00504019 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.923735 @ 95%CL (1 toyMC)
median expected limit: r < 0.923735 @ 95%CL (1 toyMC)
   68% expected band : 0.923735 < r < 0.923735
   95% expected band : 0.923735 < r < 0.923735
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1852545834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16234 +/- 0.00331384 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.16234 @ 95%CL (1 toyMC)
median expected limit: r < 1.16234 @ 95%CL (1 toyMC)
   68% expected band : 1.16234 < r < 1.16234
   95% expected band : 1.16234 < r < 1.16234
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -341364980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21848 +/- 0.00376571 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.21848 @ 95%CL (1 toyMC)
median expected limit: r < 1.21848 @ 95%CL (1 toyMC)
   68% expected band : 1.21848 < r < 1.21848
   95% expected band : 1.21848 < r < 1.21848
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1415850452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.922545 +/- 0.00353622 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.922545 @ 95%CL (1 toyMC)
median expected limit: r < 0.922545 @ 95%CL (1 toyMC)
   68% expected band : 0.922545 < r < 0.922545
   95% expected band : 0.922545 < r < 0.922545
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1435387493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25195 +/- 0.00386864 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.25195 @ 95%CL (1 toyMC)
median expected limit: r < 1.25195 @ 95%CL (1 toyMC)
   68% expected band : 1.25195 < r < 1.25195
   95% expected band : 1.25195 < r < 1.25195
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 519864962
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.92113 +/- 0.00377081 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.92113 @ 95%CL (1 toyMC)
median expected limit: r < 0.92113 @ 95%CL (1 toyMC)
   68% expected band : 0.92113 < r < 0.92113
   95% expected band : 0.92113 < r < 0.92113
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 783315131
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.919718 +/- 0.00487993 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.919718 @ 95%CL (1 toyMC)
median expected limit: r < 0.919718 @ 95%CL (1 toyMC)
   68% expected band : 0.919718 < r < 0.919718
   95% expected band : 0.919718 < r < 0.919718
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 920062586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42349 +/- 0.00390699 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.42349 @ 95%CL (1 toyMC)
median expected limit: r < 1.42349 @ 95%CL (1 toyMC)
   68% expected band : 1.42349 < r < 1.42349
   95% expected band : 1.42349 < r < 1.42349
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 858512049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.914761 +/- 0.00445524 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.914761 @ 95%CL (1 toyMC)
median expected limit: r < 0.914761 @ 95%CL (1 toyMC)
   68% expected band : 0.914761 < r < 0.914761
   95% expected band : 0.914761 < r < 0.914761
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 445501156
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18753 +/- 0.00425915 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.18753 @ 95%CL (1 toyMC)
median expected limit: r < 1.18753 @ 95%CL (1 toyMC)
   68% expected band : 1.18753 < r < 1.18753
   95% expected band : 1.18753 < r < 1.18753
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1914540000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42414 +/- 0.00349081 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.42414 @ 95%CL (1 toyMC)
median expected limit: r < 1.42414 @ 95%CL (1 toyMC)
   68% expected band : 1.42414 < r < 1.42414
   95% expected band : 1.42414 < r < 1.42414
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -129163203
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.91295 +/- 0.00395053 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.91295 @ 95%CL (1 toyMC)
median expected limit: r < 0.91295 @ 95%CL (1 toyMC)
   68% expected band : 0.91295 < r < 0.91295
   95% expected band : 0.91295 < r < 0.91295
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -52603482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1562 +/- 0.00467544 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1562 @ 95%CL (1 toyMC)
median expected limit: r < 1.1562 @ 95%CL (1 toyMC)
   68% expected band : 1.1562 < r < 1.1562
   95% expected band : 1.1562 < r < 1.1562
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2076848367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13902 +/- 0.00382035 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.13902 @ 95%CL (1 toyMC)
median expected limit: r < 2.13902 @ 95%CL (1 toyMC)
   68% expected band : 2.13902 < r < 2.13902
   95% expected band : 2.13902 < r < 2.13902
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2141614874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.931286 +/- 0.00415505 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.931286 @ 95%CL (1 toyMC)
median expected limit: r < 0.931286 @ 95%CL (1 toyMC)
   68% expected band : 0.931286 < r < 0.931286
   95% expected band : 0.931286 < r < 0.931286
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1945948263
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.917668 +/- 0.00387138 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.917668 @ 95%CL (1 toyMC)
median expected limit: r < 0.917668 @ 95%CL (1 toyMC)
   68% expected band : 0.917668 < r < 0.917668
   95% expected band : 0.917668 < r < 0.917668
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 549163974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3942 +/- 0.00297042 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.3942 @ 95%CL (1 toyMC)
median expected limit: r < 1.3942 @ 95%CL (1 toyMC)
   68% expected band : 1.3942 < r < 1.3942
   95% expected band : 1.3942 < r < 1.3942
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 268015279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.915932 +/- 0.0036111 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.915932 @ 95%CL (1 toyMC)
median expected limit: r < 0.915932 @ 95%CL (1 toyMC)
   68% expected band : 0.915932 < r < 0.915932
   95% expected band : 0.915932 < r < 0.915932
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1918751529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.928196 +/- 0.00276997 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.928196 @ 95%CL (1 toyMC)
median expected limit: r < 0.928196 @ 95%CL (1 toyMC)
   68% expected band : 0.928196 < r < 0.928196
   95% expected band : 0.928196 < r < 0.928196
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -639131503
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20552 +/- 0.00377694 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.20552 @ 95%CL (1 toyMC)
median expected limit: r < 1.20552 @ 95%CL (1 toyMC)
   68% expected band : 1.20552 < r < 1.20552
   95% expected band : 1.20552 < r < 1.20552
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1027519614.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1033092311.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-103478614.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1164598217.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1171276867.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1187262731.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1249376219.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-129163203.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1363970710.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1415850452.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1484402715.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1523317632.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1647075129.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1724645698.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1770508770.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-178347335.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1852545834.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1853520413.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1862441038.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1882898395.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1894749445.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1913383152.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1914540000.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-1917329467.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-1927601768.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-1945948263.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-1978225576.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-2018877385.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-2045902640.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-2114938750.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-2141614874.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-276989241.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-341364980.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-380350103.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-433231331.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-52603482.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-574526362.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-591272000.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-639131503.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-708789543.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-747912054.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-763984805.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-783170536.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-810322197.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-832153307.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-918433178.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.1023446237.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.1033632129.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.1039324070.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.1072077831.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1118633046.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1149080651.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1157510660.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1168486808.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1178022405.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1186083901.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1228837199.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1272095317.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1296216118.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1317355061.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1364140190.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1414472822.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1421070215.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1435387493.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1504261627.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1536928122.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1536930513.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1589735800.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.162043772.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1625711936.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1634839841.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.164425556.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1670340572.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1724139209.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.1734537687.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.1918751529.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.1921959459.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.1942945482.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.1949358665.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.1969292747.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.2076848367.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.268015279.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.301922751.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.437177627.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.445501156.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.455619417.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.519864962.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.524579578.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.549163974.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.551830527.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.560032898.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.57092635.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.575457219.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.756457172.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.783315131.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.784416199.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.815724500.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.858512049.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.920062586.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.972334186.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -731950695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26709 +/- 0.00466392 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26709 @ 95%CL (1 toyMC)
median expected limit: r < 1.26709 @ 95%CL (1 toyMC)
   68% expected band : 1.26709 < r < 1.26709
   95% expected band : 1.26709 < r < 1.26709
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 740145304
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80516 +/- 0.00340495 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.80516 @ 95%CL (1 toyMC)
median expected limit: r < 1.80516 @ 95%CL (1 toyMC)
   68% expected band : 1.80516 < r < 1.80516
   95% expected band : 1.80516 < r < 1.80516
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -183923351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.980058 +/- 0.00495417 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.980058 @ 95%CL (1 toyMC)
median expected limit: r < 0.980058 @ 95%CL (1 toyMC)
   68% expected band : 0.980058 < r < 0.980058
   95% expected band : 0.980058 < r < 0.980058
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1936633813
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37354 +/- 0.00297648 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.37354 @ 95%CL (1 toyMC)
median expected limit: r < 1.37354 @ 95%CL (1 toyMC)
   68% expected band : 1.37354 < r < 1.37354
   95% expected band : 1.37354 < r < 1.37354
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -322614088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.982665 +/- 0.00404695 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.982665 @ 95%CL (1 toyMC)
median expected limit: r < 0.982665 @ 95%CL (1 toyMC)
   68% expected band : 0.982665 < r < 0.982665
   95% expected band : 0.982665 < r < 0.982665
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1093945173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.975634 +/- 0.00422097 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.975634 @ 95%CL (1 toyMC)
median expected limit: r < 0.975634 @ 95%CL (1 toyMC)
   68% expected band : 0.975634 < r < 0.975634
   95% expected band : 0.975634 < r < 0.975634
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1668681090
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.971999 +/- 0.00386113 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.971999 @ 95%CL (1 toyMC)
median expected limit: r < 0.971999 @ 95%CL (1 toyMC)
   68% expected band : 0.971999 < r < 0.971999
   95% expected band : 0.971999 < r < 0.971999
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1902506989
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.976965 +/- 0.00487157 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.976965 @ 95%CL (1 toyMC)
median expected limit: r < 0.976965 @ 95%CL (1 toyMC)
   68% expected band : 0.976965 < r < 0.976965
   95% expected band : 0.976965 < r < 0.976965
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -991532736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.972657 +/- 0.00517861 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.972657 @ 95%CL (1 toyMC)
median expected limit: r < 0.972657 @ 95%CL (1 toyMC)
   68% expected band : 0.972657 < r < 0.972657
   95% expected band : 0.972657 < r < 0.972657
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1831112105
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.984337 +/- 0.00394383 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.984337 @ 95%CL (1 toyMC)
median expected limit: r < 0.984337 @ 95%CL (1 toyMC)
   68% expected band : 0.984337 < r < 0.984337
   95% expected band : 0.984337 < r < 0.984337
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -354256432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26447 +/- 0.00368665 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26447 @ 95%CL (1 toyMC)
median expected limit: r < 1.26447 @ 95%CL (1 toyMC)
   68% expected band : 1.26447 < r < 1.26447
   95% expected band : 1.26447 < r < 1.26447
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 217777192
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.973536 +/- 0.00412659 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.973536 @ 95%CL (1 toyMC)
median expected limit: r < 0.973536 @ 95%CL (1 toyMC)
   68% expected band : 0.973536 < r < 0.973536
   95% expected band : 0.973536 < r < 0.973536
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1152341366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30915 +/- 0.0037238 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.30915 @ 95%CL (1 toyMC)
median expected limit: r < 1.30915 @ 95%CL (1 toyMC)
   68% expected band : 1.30915 < r < 1.30915
   95% expected band : 1.30915 < r < 1.30915
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1924837473
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.974297 +/- 0.00413648 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.974297 @ 95%CL (1 toyMC)
median expected limit: r < 0.974297 @ 95%CL (1 toyMC)
   68% expected band : 0.974297 < r < 0.974297
   95% expected band : 0.974297 < r < 0.974297
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 466196657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85835 +/- 0.00380196 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.85835 @ 95%CL (1 toyMC)
median expected limit: r < 1.85835 @ 95%CL (1 toyMC)
   68% expected band : 1.85835 < r < 1.85835
   95% expected band : 1.85835 < r < 1.85835
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1431678607
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.973444 +/- 0.00412413 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.973444 @ 95%CL (1 toyMC)
median expected limit: r < 0.973444 @ 95%CL (1 toyMC)
   68% expected band : 0.973444 < r < 0.973444
   95% expected band : 0.973444 < r < 0.973444
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -387312281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28901 +/- 0.00390001 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.28901 @ 95%CL (1 toyMC)
median expected limit: r < 1.28901 @ 95%CL (1 toyMC)
   68% expected band : 1.28901 < r < 1.28901
   95% expected band : 1.28901 < r < 1.28901
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -218874050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13357 +/- 0.00415258 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.13357 @ 95%CL (1 toyMC)
median expected limit: r < 2.13357 @ 95%CL (1 toyMC)
   68% expected band : 2.13357 < r < 2.13357
   95% expected band : 2.13357 < r < 2.13357
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 38208476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.980113 +/- 0.00434206 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.980113 @ 95%CL (1 toyMC)
median expected limit: r < 0.980113 @ 95%CL (1 toyMC)
   68% expected band : 0.980113 < r < 0.980113
   95% expected band : 0.980113 < r < 0.980113
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -120355913
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48464 +/- 0.00391376 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.48464 @ 95%CL (1 toyMC)
median expected limit: r < 1.48464 @ 95%CL (1 toyMC)
   68% expected band : 1.48464 < r < 1.48464
   95% expected band : 1.48464 < r < 1.48464
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1268375261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.967672 +/- 0.00452082 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.967672 @ 95%CL (1 toyMC)
median expected limit: r < 0.967672 @ 95%CL (1 toyMC)
   68% expected band : 0.967672 < r < 0.967672
   95% expected band : 0.967672 < r < 0.967672
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 576336568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.984946 +/- 0.00428265 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.984946 @ 95%CL (1 toyMC)
median expected limit: r < 0.984946 @ 95%CL (1 toyMC)
   68% expected band : 0.984946 < r < 0.984946
   95% expected band : 0.984946 < r < 0.984946
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2044278720
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.965832 +/- 0.0029957 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.965832 @ 95%CL (1 toyMC)
median expected limit: r < 0.965832 @ 95%CL (1 toyMC)
   68% expected band : 0.965832 < r < 0.965832
   95% expected band : 0.965832 < r < 0.965832
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 876914900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39175 +/- 0.0040139 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.39175 @ 95%CL (1 toyMC)
median expected limit: r < 1.39175 @ 95%CL (1 toyMC)
   68% expected band : 1.39175 < r < 1.39175
   95% expected band : 1.39175 < r < 1.39175
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1339500112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.97609 +/- 0.00409129 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.97609 @ 95%CL (1 toyMC)
median expected limit: r < 0.97609 @ 95%CL (1 toyMC)
   68% expected band : 0.97609 < r < 0.97609
   95% expected band : 0.97609 < r < 0.97609
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1159868008
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.977165 +/- 0.00387154 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.977165 @ 95%CL (1 toyMC)
median expected limit: r < 0.977165 @ 95%CL (1 toyMC)
   68% expected band : 0.977165 < r < 0.977165
   95% expected band : 0.977165 < r < 0.977165
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 948515979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.9836 +/- 0.00320091 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.9836 @ 95%CL (1 toyMC)
median expected limit: r < 0.9836 @ 95%CL (1 toyMC)
   68% expected band : 0.9836 < r < 0.9836
   95% expected band : 0.9836 < r < 0.9836
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1444058249
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.976737 +/- 0.00346835 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.976737 @ 95%CL (1 toyMC)
median expected limit: r < 0.976737 @ 95%CL (1 toyMC)
   68% expected band : 0.976737 < r < 0.976737
   95% expected band : 0.976737 < r < 0.976737
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -952381
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.963592 +/- 0.00399558 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.963592 @ 95%CL (1 toyMC)
median expected limit: r < 0.963592 @ 95%CL (1 toyMC)
   68% expected band : 0.963592 < r < 0.963592
   95% expected band : 0.963592 < r < 0.963592
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1539347203
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.978089 +/- 0.00338595 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.978089 @ 95%CL (1 toyMC)
median expected limit: r < 0.978089 @ 95%CL (1 toyMC)
   68% expected band : 0.978089 < r < 0.978089
   95% expected band : 0.978089 < r < 0.978089
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -590949781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.966589 +/- 0.003659 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.966589 @ 95%CL (1 toyMC)
median expected limit: r < 0.966589 @ 95%CL (1 toyMC)
   68% expected band : 0.966589 < r < 0.966589
   95% expected band : 0.966589 < r < 0.966589
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1113421674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.986204 +/- 0.00430352 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.986204 @ 95%CL (1 toyMC)
median expected limit: r < 0.986204 @ 95%CL (1 toyMC)
   68% expected band : 0.986204 < r < 0.986204
   95% expected band : 0.986204 < r < 0.986204
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1521363062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.981746 +/- 0.00403576 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.981746 @ 95%CL (1 toyMC)
median expected limit: r < 0.981746 @ 95%CL (1 toyMC)
   68% expected band : 0.981746 < r < 0.981746
   95% expected band : 0.981746 < r < 0.981746
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1966781916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.972695 +/- 0.00390579 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.972695 @ 95%CL (1 toyMC)
median expected limit: r < 0.972695 @ 95%CL (1 toyMC)
   68% expected band : 0.972695 < r < 0.972695
   95% expected band : 0.972695 < r < 0.972695
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -186487773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34518 +/- 0.0044541 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.34518 @ 95%CL (1 toyMC)
median expected limit: r < 1.34518 @ 95%CL (1 toyMC)
   68% expected band : 1.34518 < r < 1.34518
   95% expected band : 1.34518 < r < 1.34518
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -709255803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.97635 +/- 0.00398536 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.97635 @ 95%CL (1 toyMC)
median expected limit: r < 0.97635 @ 95%CL (1 toyMC)
   68% expected band : 0.97635 < r < 0.97635
   95% expected band : 0.97635 < r < 0.97635
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1700245080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.95171 +/- 0.00429851 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.95171 @ 95%CL (1 toyMC)
median expected limit: r < 1.95171 @ 95%CL (1 toyMC)
   68% expected band : 1.95171 < r < 1.95171
   95% expected band : 1.95171 < r < 1.95171
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 448051737
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.967783 +/- 0.00411761 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.967783 @ 95%CL (1 toyMC)
median expected limit: r < 0.967783 @ 95%CL (1 toyMC)
   68% expected band : 0.967783 < r < 0.967783
   95% expected band : 0.967783 < r < 0.967783
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1455274170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.977378 +/- 0.00349727 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.977378 @ 95%CL (1 toyMC)
median expected limit: r < 0.977378 @ 95%CL (1 toyMC)
   68% expected band : 0.977378 < r < 0.977378
   95% expected band : 0.977378 < r < 0.977378
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1175961804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.97208 +/- 0.00354193 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.97208 @ 95%CL (1 toyMC)
median expected limit: r < 0.97208 @ 95%CL (1 toyMC)
   68% expected band : 0.97208 < r < 0.97208
   95% expected band : 0.97208 < r < 0.97208
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -377836353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28978 +/- 0.00338356 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.28978 @ 95%CL (1 toyMC)
median expected limit: r < 1.28978 @ 95%CL (1 toyMC)
   68% expected band : 1.28978 < r < 1.28978
   95% expected band : 1.28978 < r < 1.28978
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1358470833
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32808 +/- 0.00450144 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.32808 @ 95%CL (1 toyMC)
median expected limit: r < 1.32808 @ 95%CL (1 toyMC)
   68% expected band : 1.32808 < r < 1.32808
   95% expected band : 1.32808 < r < 1.32808
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1691055430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.975266 +/- 0.00338854 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.975266 @ 95%CL (1 toyMC)
median expected limit: r < 0.975266 @ 95%CL (1 toyMC)
   68% expected band : 0.975266 < r < 0.975266
   95% expected band : 0.975266 < r < 0.975266
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1343453099
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.971173 +/- 0.00357384 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.971173 @ 95%CL (1 toyMC)
median expected limit: r < 0.971173 @ 95%CL (1 toyMC)
   68% expected band : 0.971173 < r < 0.971173
   95% expected band : 0.971173 < r < 0.971173
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1982839066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29312 +/- 0.00443926 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.29312 @ 95%CL (1 toyMC)
median expected limit: r < 1.29312 @ 95%CL (1 toyMC)
   68% expected band : 1.29312 < r < 1.29312
   95% expected band : 1.29312 < r < 1.29312
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 575313557
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.976352 +/- 0.00389712 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.976352 @ 95%CL (1 toyMC)
median expected limit: r < 0.976352 @ 95%CL (1 toyMC)
   68% expected band : 0.976352 < r < 0.976352
   95% expected band : 0.976352 < r < 0.976352
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1640599988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.972857 +/- 0.00398903 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.972857 @ 95%CL (1 toyMC)
median expected limit: r < 0.972857 @ 95%CL (1 toyMC)
   68% expected band : 0.972857 < r < 0.972857
   95% expected band : 0.972857 < r < 0.972857
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1441285990
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.976598 +/- 0.00387358 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.976598 @ 95%CL (1 toyMC)
median expected limit: r < 0.976598 @ 95%CL (1 toyMC)
   68% expected band : 0.976598 < r < 0.976598
   95% expected band : 0.976598 < r < 0.976598
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 895336286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.47609 +/- 0.00370295 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.47609 @ 95%CL (1 toyMC)
median expected limit: r < 1.47609 @ 95%CL (1 toyMC)
   68% expected band : 1.47609 < r < 1.47609
   95% expected band : 1.47609 < r < 1.47609
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1415265672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.964408 +/- 0.00372306 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.964408 @ 95%CL (1 toyMC)
median expected limit: r < 0.964408 @ 95%CL (1 toyMC)
   68% expected band : 0.964408 < r < 0.964408
   95% expected band : 0.964408 < r < 0.964408
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 911718988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.971574 +/- 0.00438373 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.971574 @ 95%CL (1 toyMC)
median expected limit: r < 0.971574 @ 95%CL (1 toyMC)
   68% expected band : 0.971574 < r < 0.971574
   95% expected band : 0.971574 < r < 0.971574
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1987276465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28833 +/- 0.00355052 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.28833 @ 95%CL (1 toyMC)
median expected limit: r < 1.28833 @ 95%CL (1 toyMC)
   68% expected band : 1.28833 < r < 1.28833
   95% expected band : 1.28833 < r < 1.28833
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 783501721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.981868 +/- 0.00399029 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.981868 @ 95%CL (1 toyMC)
median expected limit: r < 0.981868 @ 95%CL (1 toyMC)
   68% expected band : 0.981868 < r < 0.981868
   95% expected band : 0.981868 < r < 0.981868
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1474709102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38381 +/- 0.00309891 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.38381 @ 95%CL (1 toyMC)
median expected limit: r < 1.38381 @ 95%CL (1 toyMC)
   68% expected band : 1.38381 < r < 1.38381
   95% expected band : 1.38381 < r < 1.38381
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -503069164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.985848 +/- 0.00474893 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.985848 @ 95%CL (1 toyMC)
median expected limit: r < 0.985848 @ 95%CL (1 toyMC)
   68% expected band : 0.985848 < r < 0.985848
   95% expected band : 0.985848 < r < 0.985848
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1824292900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.44554 +/- 0.00331742 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.44554 @ 95%CL (1 toyMC)
median expected limit: r < 2.44554 @ 95%CL (1 toyMC)
   68% expected band : 2.44554 < r < 2.44554
   95% expected band : 2.44554 < r < 2.44554
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1086785422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28456 +/- 0.00405575 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.28456 @ 95%CL (1 toyMC)
median expected limit: r < 1.28456 @ 95%CL (1 toyMC)
   68% expected band : 1.28456 < r < 1.28456
   95% expected band : 1.28456 < r < 1.28456
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 180021271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43284 +/- 0.0035805 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.43284 @ 95%CL (1 toyMC)
median expected limit: r < 1.43284 @ 95%CL (1 toyMC)
   68% expected band : 1.43284 < r < 1.43284
   95% expected band : 1.43284 < r < 1.43284
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -534798551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29733 +/- 0.00493098 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.29733 @ 95%CL (1 toyMC)
median expected limit: r < 1.29733 @ 95%CL (1 toyMC)
   68% expected band : 1.29733 < r < 1.29733
   95% expected band : 1.29733 < r < 1.29733
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -163411947
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32446 +/- 0.00320106 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.32446 @ 95%CL (1 toyMC)
median expected limit: r < 1.32446 @ 95%CL (1 toyMC)
   68% expected band : 1.32446 < r < 1.32446
   95% expected band : 1.32446 < r < 1.32446
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1849592851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28438 +/- 0.00438427 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.28438 @ 95%CL (1 toyMC)
median expected limit: r < 1.28438 @ 95%CL (1 toyMC)
   68% expected band : 1.28438 < r < 1.28438
   95% expected band : 1.28438 < r < 1.28438
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -834703308
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.975408 +/- 0.00390749 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.975408 @ 95%CL (1 toyMC)
median expected limit: r < 0.975408 @ 95%CL (1 toyMC)
   68% expected band : 0.975408 < r < 0.975408
   95% expected band : 0.975408 < r < 0.975408
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -221632983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.982393 +/- 0.00384373 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.982393 @ 95%CL (1 toyMC)
median expected limit: r < 0.982393 @ 95%CL (1 toyMC)
   68% expected band : 0.982393 < r < 0.982393
   95% expected band : 0.982393 < r < 0.982393
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1023890712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50666 +/- 0.00392275 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.50666 @ 95%CL (1 toyMC)
median expected limit: r < 1.50666 @ 95%CL (1 toyMC)
   68% expected band : 1.50666 < r < 1.50666
   95% expected band : 1.50666 < r < 1.50666
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2109514597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.974686 +/- 0.00427584 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.974686 @ 95%CL (1 toyMC)
median expected limit: r < 0.974686 @ 95%CL (1 toyMC)
   68% expected band : 0.974686 < r < 0.974686
   95% expected band : 0.974686 < r < 0.974686
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1885284463
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.983724 +/- 0.00413873 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.983724 @ 95%CL (1 toyMC)
median expected limit: r < 0.983724 @ 95%CL (1 toyMC)
   68% expected band : 0.983724 < r < 0.983724
   95% expected band : 0.983724 < r < 0.983724
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1480104346
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.47829 +/- 0.00378167 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.47829 @ 95%CL (1 toyMC)
median expected limit: r < 1.47829 @ 95%CL (1 toyMC)
   68% expected band : 1.47829 < r < 1.47829
   95% expected band : 1.47829 < r < 1.47829
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 808558900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.978663 +/- 0.00379983 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.978663 @ 95%CL (1 toyMC)
median expected limit: r < 0.978663 @ 95%CL (1 toyMC)
   68% expected band : 0.978663 < r < 0.978663
   95% expected band : 0.978663 < r < 0.978663
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 332119478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.970402 +/- 0.00373272 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.970402 @ 95%CL (1 toyMC)
median expected limit: r < 0.970402 @ 95%CL (1 toyMC)
   68% expected band : 0.970402 < r < 0.970402
   95% expected band : 0.970402 < r < 0.970402
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1194538157
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38597 +/- 0.00410526 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.38597 @ 95%CL (1 toyMC)
median expected limit: r < 1.38597 @ 95%CL (1 toyMC)
   68% expected band : 1.38597 < r < 1.38597
   95% expected band : 1.38597 < r < 1.38597
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -41103111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.973091 +/- 0.00431438 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.973091 @ 95%CL (1 toyMC)
median expected limit: r < 0.973091 @ 95%CL (1 toyMC)
   68% expected band : 0.973091 < r < 0.973091
   95% expected band : 0.973091 < r < 0.973091
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 838936008
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29232 +/- 0.00456798 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.29232 @ 95%CL (1 toyMC)
median expected limit: r < 1.29232 @ 95%CL (1 toyMC)
   68% expected band : 1.29232 < r < 1.29232
   95% expected band : 1.29232 < r < 1.29232
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 929014928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.977851 +/- 0.00365124 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.977851 @ 95%CL (1 toyMC)
median expected limit: r < 0.977851 @ 95%CL (1 toyMC)
   68% expected band : 0.977851 < r < 0.977851
   95% expected band : 0.977851 < r < 0.977851
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1756211131
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48187 +/- 0.00346894 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.48187 @ 95%CL (1 toyMC)
median expected limit: r < 1.48187 @ 95%CL (1 toyMC)
   68% expected band : 1.48187 < r < 1.48187
   95% expected band : 1.48187 < r < 1.48187
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1479894259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.976052 +/- 0.00367067 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.976052 @ 95%CL (1 toyMC)
median expected limit: r < 0.976052 @ 95%CL (1 toyMC)
   68% expected band : 0.976052 < r < 0.976052
   95% expected band : 0.976052 < r < 0.976052
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -660571943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.978013 +/- 0.00361277 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.978013 @ 95%CL (1 toyMC)
median expected limit: r < 0.978013 @ 95%CL (1 toyMC)
   68% expected band : 0.978013 < r < 0.978013
   95% expected band : 0.978013 < r < 0.978013
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1169868576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.966147 +/- 0.00387096 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.966147 @ 95%CL (1 toyMC)
median expected limit: r < 0.966147 @ 95%CL (1 toyMC)
   68% expected band : 0.966147 < r < 0.966147
   95% expected band : 0.966147 < r < 0.966147
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1413857705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.97476 +/- 0.00430954 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.97476 @ 95%CL (1 toyMC)
median expected limit: r < 0.97476 @ 95%CL (1 toyMC)
   68% expected band : 0.97476 < r < 0.97476
   95% expected band : 0.97476 < r < 0.97476
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1737363200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.982753 +/- 0.00329179 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.982753 @ 95%CL (1 toyMC)
median expected limit: r < 0.982753 @ 95%CL (1 toyMC)
   68% expected band : 0.982753 < r < 0.982753
   95% expected band : 0.982753 < r < 0.982753
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1734371579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33212 +/- 0.00398699 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.33212 @ 95%CL (1 toyMC)
median expected limit: r < 1.33212 @ 95%CL (1 toyMC)
   68% expected band : 1.33212 < r < 1.33212
   95% expected band : 1.33212 < r < 1.33212
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 628097482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30509 +/- 0.00414617 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.30509 @ 95%CL (1 toyMC)
median expected limit: r < 1.30509 @ 95%CL (1 toyMC)
   68% expected band : 1.30509 < r < 1.30509
   95% expected band : 1.30509 < r < 1.30509
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 718110937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40606 +/- 0.00299107 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.40606 @ 95%CL (1 toyMC)
median expected limit: r < 1.40606 @ 95%CL (1 toyMC)
   68% expected band : 1.40606 < r < 1.40606
   95% expected band : 1.40606 < r < 1.40606
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 43797136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.987647 +/- 0.00374587 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.987647 @ 95%CL (1 toyMC)
median expected limit: r < 0.987647 @ 95%CL (1 toyMC)
   68% expected band : 0.987647 < r < 0.987647
   95% expected band : 0.987647 < r < 0.987647
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -290721433
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.963194 +/- 0.00457636 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.963194 @ 95%CL (1 toyMC)
median expected limit: r < 0.963194 @ 95%CL (1 toyMC)
   68% expected band : 0.963194 < r < 0.963194
   95% expected band : 0.963194 < r < 0.963194
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -837020871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.976392 +/- 0.00388327 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.976392 @ 95%CL (1 toyMC)
median expected limit: r < 0.976392 @ 95%CL (1 toyMC)
   68% expected band : 0.976392 < r < 0.976392
   95% expected band : 0.976392 < r < 0.976392
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1076563049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.970338 +/- 0.00396757 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.970338 @ 95%CL (1 toyMC)
median expected limit: r < 0.970338 @ 95%CL (1 toyMC)
   68% expected band : 0.970338 < r < 0.970338
   95% expected band : 0.970338 < r < 0.970338
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1733237946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43436 +/- 0.0040003 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.43436 @ 95%CL (1 toyMC)
median expected limit: r < 1.43436 @ 95%CL (1 toyMC)
   68% expected band : 1.43436 < r < 1.43436
   95% expected band : 1.43436 < r < 1.43436
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1843910546
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.982934 +/- 0.0042301 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.982934 @ 95%CL (1 toyMC)
median expected limit: r < 0.982934 @ 95%CL (1 toyMC)
   68% expected band : 0.982934 < r < 0.982934
   95% expected band : 0.982934 < r < 0.982934
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -643400436
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.278 +/- 0.00483127 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.278 @ 95%CL (1 toyMC)
median expected limit: r < 1.278 @ 95%CL (1 toyMC)
   68% expected band : 1.278 < r < 1.278
   95% expected band : 1.278 < r < 1.278
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1200798237
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65681 +/- 0.00295097 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.65681 @ 95%CL (1 toyMC)
median expected limit: r < 1.65681 @ 95%CL (1 toyMC)
   68% expected band : 1.65681 < r < 1.65681
   95% expected band : 1.65681 < r < 1.65681
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1223825537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.973965 +/- 0.00430429 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.973965 @ 95%CL (1 toyMC)
median expected limit: r < 0.973965 @ 95%CL (1 toyMC)
   68% expected band : 0.973965 < r < 0.973965
   95% expected band : 0.973965 < r < 0.973965
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1206685678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3962 +/- 0.00334852 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.3962 @ 95%CL (1 toyMC)
median expected limit: r < 1.3962 @ 95%CL (1 toyMC)
   68% expected band : 1.3962 < r < 1.3962
   95% expected band : 1.3962 < r < 1.3962
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1933959618
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.97268 +/- 0.00313033 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.97268 @ 95%CL (1 toyMC)
median expected limit: r < 0.97268 @ 95%CL (1 toyMC)
   68% expected band : 0.97268 < r < 0.97268
   95% expected band : 0.97268 < r < 0.97268
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1958178516
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.963963 +/- 0.00407825 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.963963 @ 95%CL (1 toyMC)
median expected limit: r < 0.963963 @ 95%CL (1 toyMC)
   68% expected band : 0.963963 < r < 0.963963
   95% expected band : 0.963963 < r < 0.963963
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 340553400
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.984719 +/- 0.00385601 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.984719 @ 95%CL (1 toyMC)
median expected limit: r < 0.984719 @ 95%CL (1 toyMC)
   68% expected band : 0.984719 < r < 0.984719
   95% expected band : 0.984719 < r < 0.984719
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1285919492
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49145 +/- 0.00352475 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.49145 @ 95%CL (1 toyMC)
median expected limit: r < 1.49145 @ 95%CL (1 toyMC)
   68% expected band : 1.49145 < r < 1.49145
   95% expected band : 1.49145 < r < 1.49145
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1936470781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.977898 +/- 0.00347593 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.977898 @ 95%CL (1 toyMC)
median expected limit: r < 0.977898 @ 95%CL (1 toyMC)
   68% expected band : 0.977898 < r < 0.977898
   95% expected band : 0.977898 < r < 0.977898
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2141044792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.967204 +/- 0.00380034 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 0.967204 @ 95%CL (1 toyMC)
median expected limit: r < 0.967204 @ 95%CL (1 toyMC)
   68% expected band : 0.967204 < r < 0.967204
   95% expected band : 0.967204 < r < 0.967204
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1300319834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.981193 +/- 0.00326625 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.981193 @ 95%CL (1 toyMC)
median expected limit: r < 0.981193 @ 95%CL (1 toyMC)
   68% expected band : 0.981193 < r < 0.981193
   95% expected band : 0.981193 < r < 0.981193
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1017482795
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.982872 +/- 0.00377992 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 0.982872 @ 95%CL (1 toyMC)
median expected limit: r < 0.982872 @ 95%CL (1 toyMC)
   68% expected band : 0.982872 < r < 0.982872
   95% expected band : 0.982872 < r < 0.982872
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1017482795.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1023890712.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1076563049.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1113421674.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1159868008.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1169868576.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1200798237.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-120355913.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1223825537.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1285919492.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1339500112.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1343453099.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1358470833.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1441285990.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1479894259.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1480104346.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1521363062.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1539347203.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-163411947.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1640599988.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1691055430.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1733237946.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1734371579.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-1737363200.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-1824292900.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-183923351.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-186487773.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-1885284463.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-1902506989.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-1933959618.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-1966781916.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-2044278720.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-2141044792.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-218874050.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-221632983.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-290721433.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-322614088.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-354256432.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-377836353.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-387312281.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-41103111.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-503069164.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-534798551.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-590949781.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-643400436.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-660571943.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-709255803.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-731950695.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-834703308.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.-837020871.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.-952381.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.-991532736.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1086785422.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1093945173.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1152341366.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1175961804.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1194538157.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1206685678.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1268375261.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1300319834.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1413857705.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1415265672.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1431678607.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1444058249.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1455274170.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1474709102.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1668681090.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1700245080.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1756211131.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.180021271.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1831112105.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1843910546.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1849592851.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1924837473.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.1936470781.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.1936633813.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.1958178516.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.1982839066.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.1987276465.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.2109514597.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.217777192.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.332119478.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.340553400.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.38208476.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.43797136.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.448051737.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.466196657.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.575313557.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.576336568.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.628097482.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.718110937.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.740145304.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.783501721.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.808558900.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.838936008.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.876914900.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.895336286.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.911718988.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.929014928.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.948515979.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1438898493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42533 +/- 0.00376364 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.42533 @ 95%CL (1 toyMC)
median expected limit: r < 1.42533 @ 95%CL (1 toyMC)
   68% expected band : 1.42533 < r < 1.42533
   95% expected band : 1.42533 < r < 1.42533
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -601902743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03484 +/- 0.00385572 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03484 @ 95%CL (1 toyMC)
median expected limit: r < 1.03484 @ 95%CL (1 toyMC)
   68% expected band : 1.03484 < r < 1.03484
   95% expected band : 1.03484 < r < 1.03484
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1664820620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02369 +/- 0.00365208 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.02369 @ 95%CL (1 toyMC)
median expected limit: r < 1.02369 @ 95%CL (1 toyMC)
   68% expected band : 1.02369 < r < 1.02369
   95% expected band : 1.02369 < r < 1.02369
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -172979830
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04367 +/- 0.00422499 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04367 @ 95%CL (1 toyMC)
median expected limit: r < 1.04367 @ 95%CL (1 toyMC)
   68% expected band : 1.04367 < r < 1.04367
   95% expected band : 1.04367 < r < 1.04367
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1876441381
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03919 +/- 0.0043998 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03919 @ 95%CL (1 toyMC)
median expected limit: r < 1.03919 @ 95%CL (1 toyMC)
   68% expected band : 1.03919 < r < 1.03919
   95% expected band : 1.03919 < r < 1.03919
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 508078381
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03843 +/- 0.0034323 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03843 @ 95%CL (1 toyMC)
median expected limit: r < 1.03843 @ 95%CL (1 toyMC)
   68% expected band : 1.03843 < r < 1.03843
   95% expected band : 1.03843 < r < 1.03843
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 856651918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.93559 +/- 0.00420685 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.93559 @ 95%CL (1 toyMC)
median expected limit: r < 1.93559 @ 95%CL (1 toyMC)
   68% expected band : 1.93559 < r < 1.93559
   95% expected band : 1.93559 < r < 1.93559
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1324733958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61307 +/- 0.00435171 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.61307 @ 95%CL (1 toyMC)
median expected limit: r < 1.61307 @ 95%CL (1 toyMC)
   68% expected band : 1.61307 < r < 1.61307
   95% expected band : 1.61307 < r < 1.61307
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1577505963
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03568 +/- 0.00383252 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03568 @ 95%CL (1 toyMC)
median expected limit: r < 1.03568 @ 95%CL (1 toyMC)
   68% expected band : 1.03568 < r < 1.03568
   95% expected band : 1.03568 < r < 1.03568
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -217231743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03818 +/- 0.00401403 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03818 @ 95%CL (1 toyMC)
median expected limit: r < 1.03818 @ 95%CL (1 toyMC)
   68% expected band : 1.03818 < r < 1.03818
   95% expected band : 1.03818 < r < 1.03818
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1051338098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03485 +/- 0.0039841 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.03485 @ 95%CL (1 toyMC)
median expected limit: r < 1.03485 @ 95%CL (1 toyMC)
   68% expected band : 1.03485 < r < 1.03485
   95% expected band : 1.03485 < r < 1.03485
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2064068822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03047 +/- 0.0039647 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03047 @ 95%CL (1 toyMC)
median expected limit: r < 1.03047 @ 95%CL (1 toyMC)
   68% expected band : 1.03047 < r < 1.03047
   95% expected band : 1.03047 < r < 1.03047
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1828577671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38677 +/- 0.00450663 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.38677 @ 95%CL (1 toyMC)
median expected limit: r < 1.38677 @ 95%CL (1 toyMC)
   68% expected band : 1.38677 < r < 1.38677
   95% expected band : 1.38677 < r < 1.38677
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 77734223
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02898 +/- 0.00445402 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 1.02898 @ 95%CL (1 toyMC)
median expected limit: r < 1.02898 @ 95%CL (1 toyMC)
   68% expected band : 1.02898 < r < 1.02898
   95% expected band : 1.02898 < r < 1.02898
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 809714444
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03988 +/- 0.0041581 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.03988 @ 95%CL (1 toyMC)
median expected limit: r < 1.03988 @ 95%CL (1 toyMC)
   68% expected band : 1.03988 < r < 1.03988
   95% expected band : 1.03988 < r < 1.03988
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2066008136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41022 +/- 0.003654 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.41022 @ 95%CL (1 toyMC)
median expected limit: r < 1.41022 @ 95%CL (1 toyMC)
   68% expected band : 1.41022 < r < 1.41022
   95% expected band : 1.41022 < r < 1.41022
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 258901383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0428 +/- 0.00437809 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0428 @ 95%CL (1 toyMC)
median expected limit: r < 1.0428 @ 95%CL (1 toyMC)
   68% expected band : 1.0428 < r < 1.0428
   95% expected band : 1.0428 < r < 1.0428
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1530784173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46692 +/- 0.00415918 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.46692 @ 95%CL (1 toyMC)
median expected limit: r < 1.46692 @ 95%CL (1 toyMC)
   68% expected band : 1.46692 < r < 1.46692
   95% expected band : 1.46692 < r < 1.46692
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -397606021
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03365 +/- 0.00497391 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03365 @ 95%CL (1 toyMC)
median expected limit: r < 1.03365 @ 95%CL (1 toyMC)
   68% expected band : 1.03365 < r < 1.03365
   95% expected band : 1.03365 < r < 1.03365
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 958770135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56123 +/- 0.00496537 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.56123 @ 95%CL (1 toyMC)
median expected limit: r < 1.56123 @ 95%CL (1 toyMC)
   68% expected band : 1.56123 < r < 1.56123
   95% expected band : 1.56123 < r < 1.56123
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -636165448
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.06315 +/- 0.003756 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.06315 @ 95%CL (1 toyMC)
median expected limit: r < 2.06315 @ 95%CL (1 toyMC)
   68% expected band : 2.06315 < r < 2.06315
   95% expected band : 2.06315 < r < 2.06315
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 466181810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03294 +/- 0.00383998 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03294 @ 95%CL (1 toyMC)
median expected limit: r < 1.03294 @ 95%CL (1 toyMC)
   68% expected band : 1.03294 < r < 1.03294
   95% expected band : 1.03294 < r < 1.03294
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1221157609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03694 +/- 0.00453641 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03694 @ 95%CL (1 toyMC)
median expected limit: r < 1.03694 @ 95%CL (1 toyMC)
   68% expected band : 1.03694 < r < 1.03694
   95% expected band : 1.03694 < r < 1.03694
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1542529786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03066 +/- 0.00509352 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03066 @ 95%CL (1 toyMC)
median expected limit: r < 1.03066 @ 95%CL (1 toyMC)
   68% expected band : 1.03066 < r < 1.03066
   95% expected band : 1.03066 < r < 1.03066
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 336543836
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04874 +/- 0.00383325 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04874 @ 95%CL (1 toyMC)
median expected limit: r < 1.04874 @ 95%CL (1 toyMC)
   68% expected band : 1.04874 < r < 1.04874
   95% expected band : 1.04874 < r < 1.04874
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1785020937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04296 +/- 0.00467 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04296 @ 95%CL (1 toyMC)
median expected limit: r < 1.04296 @ 95%CL (1 toyMC)
   68% expected band : 1.04296 < r < 1.04296
   95% expected band : 1.04296 < r < 1.04296
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1800758760
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03059 +/- 0.00407103 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03059 @ 95%CL (1 toyMC)
median expected limit: r < 1.03059 @ 95%CL (1 toyMC)
   68% expected band : 1.03059 < r < 1.03059
   95% expected band : 1.03059 < r < 1.03059
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 535923202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02987 +/- 0.00342889 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.02987 @ 95%CL (1 toyMC)
median expected limit: r < 1.02987 @ 95%CL (1 toyMC)
   68% expected band : 1.02987 < r < 1.02987
   95% expected band : 1.02987 < r < 1.02987
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1992560460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37762 +/- 0.00374555 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.37762 @ 95%CL (1 toyMC)
median expected limit: r < 1.37762 @ 95%CL (1 toyMC)
   68% expected band : 1.37762 < r < 1.37762
   95% expected band : 1.37762 < r < 1.37762
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -453054340
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04158 +/- 0.00363223 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04158 @ 95%CL (1 toyMC)
median expected limit: r < 1.04158 @ 95%CL (1 toyMC)
   68% expected band : 1.04158 < r < 1.04158
   95% expected band : 1.04158 < r < 1.04158
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 109158420
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04868 +/- 0.00430736 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04868 @ 95%CL (1 toyMC)
median expected limit: r < 1.04868 @ 95%CL (1 toyMC)
   68% expected band : 1.04868 < r < 1.04868
   95% expected band : 1.04868 < r < 1.04868
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1731205532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05269 +/- 0.00464728 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.05269 @ 95%CL (1 toyMC)
median expected limit: r < 1.05269 @ 95%CL (1 toyMC)
   68% expected band : 1.05269 < r < 1.05269
   95% expected band : 1.05269 < r < 1.05269
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 543376012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05008 +/- 0.00466707 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.05008 @ 95%CL (1 toyMC)
median expected limit: r < 1.05008 @ 95%CL (1 toyMC)
   68% expected band : 1.05008 < r < 1.05008
   95% expected band : 1.05008 < r < 1.05008
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1050731158
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02893 +/- 0.00453648 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.02893 @ 95%CL (1 toyMC)
median expected limit: r < 1.02893 @ 95%CL (1 toyMC)
   68% expected band : 1.02893 < r < 1.02893
   95% expected band : 1.02893 < r < 1.02893
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1681462783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03143 +/- 0.00365328 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03143 @ 95%CL (1 toyMC)
median expected limit: r < 1.03143 @ 95%CL (1 toyMC)
   68% expected band : 1.03143 < r < 1.03143
   95% expected band : 1.03143 < r < 1.03143
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -554888702
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52472 +/- 0.00344242 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.52472 @ 95%CL (1 toyMC)
median expected limit: r < 1.52472 @ 95%CL (1 toyMC)
   68% expected band : 1.52472 < r < 1.52472
   95% expected band : 1.52472 < r < 1.52472
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1335268895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04102 +/- 0.00449514 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04102 @ 95%CL (1 toyMC)
median expected limit: r < 1.04102 @ 95%CL (1 toyMC)
   68% expected band : 1.04102 < r < 1.04102
   95% expected band : 1.04102 < r < 1.04102
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1331598957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03696 +/- 0.00436359 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03696 @ 95%CL (1 toyMC)
median expected limit: r < 1.03696 @ 95%CL (1 toyMC)
   68% expected band : 1.03696 < r < 1.03696
   95% expected band : 1.03696 < r < 1.03696
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -784848264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0322 +/- 0.00355301 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0322 @ 95%CL (1 toyMC)
median expected limit: r < 1.0322 @ 95%CL (1 toyMC)
   68% expected band : 1.0322 < r < 1.0322
   95% expected band : 1.0322 < r < 1.0322
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 733529115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55554 +/- 0.00311697 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.55554 @ 95%CL (1 toyMC)
median expected limit: r < 1.55554 @ 95%CL (1 toyMC)
   68% expected band : 1.55554 < r < 1.55554
   95% expected band : 1.55554 < r < 1.55554
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1028789961
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04676 +/- 0.00342374 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04676 @ 95%CL (1 toyMC)
median expected limit: r < 1.04676 @ 95%CL (1 toyMC)
   68% expected band : 1.04676 < r < 1.04676
   95% expected band : 1.04676 < r < 1.04676
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1005409802
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03744 +/- 0.00426547 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03744 @ 95%CL (1 toyMC)
median expected limit: r < 1.03744 @ 95%CL (1 toyMC)
   68% expected band : 1.03744 < r < 1.03744
   95% expected band : 1.03744 < r < 1.03744
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 239353294
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03035 +/- 0.0042215 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03035 @ 95%CL (1 toyMC)
median expected limit: r < 1.03035 @ 95%CL (1 toyMC)
   68% expected band : 1.03035 < r < 1.03035
   95% expected band : 1.03035 < r < 1.03035
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -246455128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.11936 +/- 0.0042586 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.11936 @ 95%CL (1 toyMC)
median expected limit: r < 2.11936 @ 95%CL (1 toyMC)
   68% expected band : 2.11936 < r < 2.11936
   95% expected band : 2.11936 < r < 2.11936
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 501273205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42252 +/- 0.00397638 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.42252 @ 95%CL (1 toyMC)
median expected limit: r < 1.42252 @ 95%CL (1 toyMC)
   68% expected band : 1.42252 < r < 1.42252
   95% expected band : 1.42252 < r < 1.42252
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 988582815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0394 +/- 0.00375712 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0394 @ 95%CL (1 toyMC)
median expected limit: r < 1.0394 @ 95%CL (1 toyMC)
   68% expected band : 1.0394 < r < 1.0394
   95% expected band : 1.0394 < r < 1.0394
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1358033578
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61414 +/- 0.00437525 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.61414 @ 95%CL (1 toyMC)
median expected limit: r < 1.61414 @ 95%CL (1 toyMC)
   68% expected band : 1.61414 < r < 1.61414
   95% expected band : 1.61414 < r < 1.61414
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 436982998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0361 +/- 0.00459424 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0361 @ 95%CL (1 toyMC)
median expected limit: r < 1.0361 @ 95%CL (1 toyMC)
   68% expected band : 1.0361 < r < 1.0361
   95% expected band : 1.0361 < r < 1.0361
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1052995603
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03015 +/- 0.0039564 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03015 @ 95%CL (1 toyMC)
median expected limit: r < 1.03015 @ 95%CL (1 toyMC)
   68% expected band : 1.03015 < r < 1.03015
   95% expected band : 1.03015 < r < 1.03015
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -196559360
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39787 +/- 0.00431536 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.39787 @ 95%CL (1 toyMC)
median expected limit: r < 1.39787 @ 95%CL (1 toyMC)
   68% expected band : 1.39787 < r < 1.39787
   95% expected band : 1.39787 < r < 1.39787
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -96589296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04287 +/- 0.00392787 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04287 @ 95%CL (1 toyMC)
median expected limit: r < 1.04287 @ 95%CL (1 toyMC)
   68% expected band : 1.04287 < r < 1.04287
   95% expected band : 1.04287 < r < 1.04287
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 621877634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04286 +/- 0.00421145 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04286 @ 95%CL (1 toyMC)
median expected limit: r < 1.04286 @ 95%CL (1 toyMC)
   68% expected band : 1.04286 < r < 1.04286
   95% expected band : 1.04286 < r < 1.04286
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -665110725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03622 +/- 0.00452187 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03622 @ 95%CL (1 toyMC)
median expected limit: r < 1.03622 @ 95%CL (1 toyMC)
   68% expected band : 1.03622 < r < 1.03622
   95% expected band : 1.03622 < r < 1.03622
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -708073472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02965 +/- 0.00426021 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.02965 @ 95%CL (1 toyMC)
median expected limit: r < 1.02965 @ 95%CL (1 toyMC)
   68% expected band : 1.02965 < r < 1.02965
   95% expected band : 1.02965 < r < 1.02965
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1500123332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63352 +/- 0.00373884 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.63352 @ 95%CL (1 toyMC)
median expected limit: r < 1.63352 @ 95%CL (1 toyMC)
   68% expected band : 1.63352 < r < 1.63352
   95% expected band : 1.63352 < r < 1.63352
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 859848275
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03816 +/- 0.00430492 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03816 @ 95%CL (1 toyMC)
median expected limit: r < 1.03816 @ 95%CL (1 toyMC)
   68% expected band : 1.03816 < r < 1.03816
   95% expected band : 1.03816 < r < 1.03816
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2036658220
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.87661 +/- 0.00409878 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.87661 @ 95%CL (1 toyMC)
median expected limit: r < 1.87661 @ 95%CL (1 toyMC)
   68% expected band : 1.87661 < r < 1.87661
   95% expected band : 1.87661 < r < 1.87661
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 568501903
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03781 +/- 0.00338699 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03781 @ 95%CL (1 toyMC)
median expected limit: r < 1.03781 @ 95%CL (1 toyMC)
   68% expected band : 1.03781 < r < 1.03781
   95% expected band : 1.03781 < r < 1.03781
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2132128439
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03493 +/- 0.00343304 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03493 @ 95%CL (1 toyMC)
median expected limit: r < 1.03493 @ 95%CL (1 toyMC)
   68% expected band : 1.03493 < r < 1.03493
   95% expected band : 1.03493 < r < 1.03493
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1378945216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02729 +/- 0.00408193 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.02729 @ 95%CL (1 toyMC)
median expected limit: r < 1.02729 @ 95%CL (1 toyMC)
   68% expected band : 1.02729 < r < 1.02729
   95% expected band : 1.02729 < r < 1.02729
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -264828177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.049 +/- 0.00468159 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.049 @ 95%CL (1 toyMC)
median expected limit: r < 1.049 @ 95%CL (1 toyMC)
   68% expected band : 1.049 < r < 1.049
   95% expected band : 1.049 < r < 1.049
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1161865840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02888 +/- 0.00386843 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 1.02888 @ 95%CL (1 toyMC)
median expected limit: r < 1.02888 @ 95%CL (1 toyMC)
   68% expected band : 1.02888 < r < 1.02888
   95% expected band : 1.02888 < r < 1.02888
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -799842306
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0384 +/- 0.00434856 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0384 @ 95%CL (1 toyMC)
median expected limit: r < 1.0384 @ 95%CL (1 toyMC)
   68% expected band : 1.0384 < r < 1.0384
   95% expected band : 1.0384 < r < 1.0384
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 54153609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10246 +/- 0.00402941 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.10246 @ 95%CL (1 toyMC)
median expected limit: r < 2.10246 @ 95%CL (1 toyMC)
   68% expected band : 2.10246 < r < 2.10246
   95% expected band : 2.10246 < r < 2.10246
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 24407912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4235 +/- 0.00423207 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.4235 @ 95%CL (1 toyMC)
median expected limit: r < 1.4235 @ 95%CL (1 toyMC)
   68% expected band : 1.4235 < r < 1.4235
   95% expected band : 1.4235 < r < 1.4235
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1059947918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03539 +/- 0.00403085 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03539 @ 95%CL (1 toyMC)
median expected limit: r < 1.03539 @ 95%CL (1 toyMC)
   68% expected band : 1.03539 < r < 1.03539
   95% expected band : 1.03539 < r < 1.03539
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -395408570
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04577 +/- 0.00365775 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04577 @ 95%CL (1 toyMC)
median expected limit: r < 1.04577 @ 95%CL (1 toyMC)
   68% expected band : 1.04577 < r < 1.04577
   95% expected band : 1.04577 < r < 1.04577
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1192334093
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07471 +/- 0.003705 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.07471 @ 95%CL (1 toyMC)
median expected limit: r < 2.07471 @ 95%CL (1 toyMC)
   68% expected band : 2.07471 < r < 2.07471
   95% expected band : 2.07471 < r < 2.07471
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -197710772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4859 +/- 0.00304274 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.4859 @ 95%CL (1 toyMC)
median expected limit: r < 1.4859 @ 95%CL (1 toyMC)
   68% expected band : 1.4859 < r < 1.4859
   95% expected band : 1.4859 < r < 1.4859
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 786000929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03874 +/- 0.00390844 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03874 @ 95%CL (1 toyMC)
median expected limit: r < 1.03874 @ 95%CL (1 toyMC)
   68% expected band : 1.03874 < r < 1.03874
   95% expected band : 1.03874 < r < 1.03874
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -399398609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04582 +/- 0.00400736 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04582 @ 95%CL (1 toyMC)
median expected limit: r < 1.04582 @ 95%CL (1 toyMC)
   68% expected band : 1.04582 < r < 1.04582
   95% expected band : 1.04582 < r < 1.04582
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1645460595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03916 +/- 0.00375694 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03916 @ 95%CL (1 toyMC)
median expected limit: r < 1.03916 @ 95%CL (1 toyMC)
   68% expected band : 1.03916 < r < 1.03916
   95% expected band : 1.03916 < r < 1.03916
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -409843556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04148 +/- 0.00386896 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04148 @ 95%CL (1 toyMC)
median expected limit: r < 1.04148 @ 95%CL (1 toyMC)
   68% expected band : 1.04148 < r < 1.04148
   95% expected band : 1.04148 < r < 1.04148
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 797234092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04418 +/- 0.00458932 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04418 @ 95%CL (1 toyMC)
median expected limit: r < 1.04418 @ 95%CL (1 toyMC)
   68% expected band : 1.04418 < r < 1.04418
   95% expected band : 1.04418 < r < 1.04418
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1598074751
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39291 +/- 0.00472719 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.39291 @ 95%CL (1 toyMC)
median expected limit: r < 1.39291 @ 95%CL (1 toyMC)
   68% expected band : 1.39291 < r < 1.39291
   95% expected band : 1.39291 < r < 1.39291
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -558930251
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4275 +/- 0.00442951 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.4275 @ 95%CL (1 toyMC)
median expected limit: r < 1.4275 @ 95%CL (1 toyMC)
   68% expected band : 1.4275 < r < 1.4275
   95% expected band : 1.4275 < r < 1.4275
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -561056991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41643 +/- 0.0044377 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.41643 @ 95%CL (1 toyMC)
median expected limit: r < 1.41643 @ 95%CL (1 toyMC)
   68% expected band : 1.41643 < r < 1.41643
   95% expected band : 1.41643 < r < 1.41643
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 866977867
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04232 +/- 0.00293339 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04232 @ 95%CL (1 toyMC)
median expected limit: r < 1.04232 @ 95%CL (1 toyMC)
   68% expected band : 1.04232 < r < 1.04232
   95% expected band : 1.04232 < r < 1.04232
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1401172792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03682 +/- 0.00406373 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03682 @ 95%CL (1 toyMC)
median expected limit: r < 1.03682 @ 95%CL (1 toyMC)
   68% expected band : 1.03682 < r < 1.03682
   95% expected band : 1.03682 < r < 1.03682
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1730765676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02943 +/- 0.00445075 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.02943 @ 95%CL (1 toyMC)
median expected limit: r < 1.02943 @ 95%CL (1 toyMC)
   68% expected band : 1.02943 < r < 1.02943
   95% expected band : 1.02943 < r < 1.02943
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 887191282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43674 +/- 0.00354573 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.43674 @ 95%CL (1 toyMC)
median expected limit: r < 1.43674 @ 95%CL (1 toyMC)
   68% expected band : 1.43674 < r < 1.43674
   95% expected band : 1.43674 < r < 1.43674
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 138838018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04451 +/- 0.00355502 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04451 @ 95%CL (1 toyMC)
median expected limit: r < 1.04451 @ 95%CL (1 toyMC)
   68% expected band : 1.04451 < r < 1.04451
   95% expected band : 1.04451 < r < 1.04451
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 766220768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57904 +/- 0.00457857 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.57904 @ 95%CL (1 toyMC)
median expected limit: r < 1.57904 @ 95%CL (1 toyMC)
   68% expected band : 1.57904 < r < 1.57904
   95% expected band : 1.57904 < r < 1.57904
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -813878292
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02777 +/- 0.00346336 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.02777 @ 95%CL (1 toyMC)
median expected limit: r < 1.02777 @ 95%CL (1 toyMC)
   68% expected band : 1.02777 < r < 1.02777
   95% expected band : 1.02777 < r < 1.02777
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1171157323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04133 +/- 0.00413504 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04133 @ 95%CL (1 toyMC)
median expected limit: r < 1.04133 @ 95%CL (1 toyMC)
   68% expected band : 1.04133 < r < 1.04133
   95% expected band : 1.04133 < r < 1.04133
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -237376780
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04762 +/- 0.00379242 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04762 @ 95%CL (1 toyMC)
median expected limit: r < 1.04762 @ 95%CL (1 toyMC)
   68% expected band : 1.04762 < r < 1.04762
   95% expected band : 1.04762 < r < 1.04762
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -308573581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04454 +/- 0.00328092 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04454 @ 95%CL (1 toyMC)
median expected limit: r < 1.04454 @ 95%CL (1 toyMC)
   68% expected band : 1.04454 < r < 1.04454
   95% expected band : 1.04454 < r < 1.04454
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2082851641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0493 +/- 0.00326075 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0493 @ 95%CL (1 toyMC)
median expected limit: r < 1.0493 @ 95%CL (1 toyMC)
   68% expected band : 1.0493 < r < 1.0493
   95% expected band : 1.0493 < r < 1.0493
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1984123102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03215 +/- 0.00453644 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.03215 @ 95%CL (1 toyMC)
median expected limit: r < 1.03215 @ 95%CL (1 toyMC)
   68% expected band : 1.03215 < r < 1.03215
   95% expected band : 1.03215 < r < 1.03215
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2103382331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4992 +/- 0.00412151 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.4992 @ 95%CL (1 toyMC)
median expected limit: r < 1.4992 @ 95%CL (1 toyMC)
   68% expected band : 1.4992 < r < 1.4992
   95% expected band : 1.4992 < r < 1.4992
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1968182082
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04571 +/- 0.00409798 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04571 @ 95%CL (1 toyMC)
median expected limit: r < 1.04571 @ 95%CL (1 toyMC)
   68% expected band : 1.04571 < r < 1.04571
   95% expected band : 1.04571 < r < 1.04571
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -807349642
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0379 +/- 0.00423191 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0379 @ 95%CL (1 toyMC)
median expected limit: r < 1.0379 @ 95%CL (1 toyMC)
   68% expected band : 1.0379 < r < 1.0379
   95% expected band : 1.0379 < r < 1.0379
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 84726037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04106 +/- 0.00325737 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.04106 @ 95%CL (1 toyMC)
median expected limit: r < 1.04106 @ 95%CL (1 toyMC)
   68% expected band : 1.04106 < r < 1.04106
   95% expected band : 1.04106 < r < 1.04106
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1294170437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05121 +/- 0.00418295 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.05121 @ 95%CL (1 toyMC)
median expected limit: r < 1.05121 @ 95%CL (1 toyMC)
   68% expected band : 1.05121 < r < 1.05121
   95% expected band : 1.05121 < r < 1.05121
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2033365942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04039 +/- 0.00400913 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04039 @ 95%CL (1 toyMC)
median expected limit: r < 1.04039 @ 95%CL (1 toyMC)
   68% expected band : 1.04039 < r < 1.04039
   95% expected band : 1.04039 < r < 1.04039
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 31361200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03468 +/- 0.00454352 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03468 @ 95%CL (1 toyMC)
median expected limit: r < 1.03468 @ 95%CL (1 toyMC)
   68% expected band : 1.03468 < r < 1.03468
   95% expected band : 1.03468 < r < 1.03468
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1077787519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04427 +/- 0.00358899 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04427 @ 95%CL (1 toyMC)
median expected limit: r < 1.04427 @ 95%CL (1 toyMC)
   68% expected band : 1.04427 < r < 1.04427
   95% expected band : 1.04427 < r < 1.04427
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 635352428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03435 +/- 0.00465006 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.03435 @ 95%CL (1 toyMC)
median expected limit: r < 1.03435 @ 95%CL (1 toyMC)
   68% expected band : 1.03435 < r < 1.03435
   95% expected band : 1.03435 < r < 1.03435
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -946378503
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02916 +/- 0.00488423 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.02916 @ 95%CL (1 toyMC)
median expected limit: r < 1.02916 @ 95%CL (1 toyMC)
   68% expected band : 1.02916 < r < 1.02916
   95% expected band : 1.02916 < r < 1.02916
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 880452871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04211 +/- 0.0042594 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.04211 @ 95%CL (1 toyMC)
median expected limit: r < 1.04211 @ 95%CL (1 toyMC)
   68% expected band : 1.04211 < r < 1.04211
   95% expected band : 1.04211 < r < 1.04211
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1005409802.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1050731158.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1051338098.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1077787519.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1161865840.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1192334093.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1221157609.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1294170437.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1335268895.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1358033578.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1401172792.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1438898493.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1577505963.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1598074751.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1645460595.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1664820620.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1681462783.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-172979830.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1800758760.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1828577671.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-196559360.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1968182082.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-197710772.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-1984123102.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-1992560460.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-2033365942.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-2036658220.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-2064068822.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-2066008136.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-2132128439.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-217231743.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-237376780.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-246455128.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-264828177.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-308573581.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-395408570.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-397606021.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-399398609.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-409843556.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-453054340.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-554888702.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-558930251.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-561056991.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-601902743.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-636165448.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-665110725.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-708073472.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-784848264.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-799842306.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.-807349642.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.-813878292.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.-946378503.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.-96589296.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1028789961.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1052995603.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1059947918.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.109158420.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1171157323.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1324733958.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1331598957.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1378945216.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.138838018.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1500123332.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1530784173.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1542529786.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1730765676.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1731205532.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1785020937.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1876441381.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.2082851641.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.2103382331.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.239353294.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.24407912.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.258901383.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.31361200.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.336543836.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.436982998.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.466181810.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.501273205.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.508078381.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.535923202.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.54153609.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.543376012.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.568501903.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.621877634.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.635352428.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.733529115.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.766220768.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.77734223.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.786000929.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.797234092.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.809714444.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.84726037.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.856651918.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.859848275.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.866977867.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.880452871.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.887191282.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.958770135.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.988582815.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1303781942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09142 +/- 0.00403324 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09142 @ 95%CL (1 toyMC)
median expected limit: r < 1.09142 @ 95%CL (1 toyMC)
   68% expected band : 1.09142 < r < 1.09142
   95% expected band : 1.09142 < r < 1.09142
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 439935940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0902 +/- 0.00384021 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0902 @ 95%CL (1 toyMC)
median expected limit: r < 1.0902 @ 95%CL (1 toyMC)
   68% expected band : 1.0902 < r < 1.0902
   95% expected band : 1.0902 < r < 1.0902
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 506404541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.7271 +/- 0.00415297 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.7271 @ 95%CL (1 toyMC)
median expected limit: r < 1.7271 @ 95%CL (1 toyMC)
   68% expected band : 1.7271 < r < 1.7271
   95% expected band : 1.7271 < r < 1.7271
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1828665452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51246 +/- 0.00441318 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.51246 @ 95%CL (1 toyMC)
median expected limit: r < 1.51246 @ 95%CL (1 toyMC)
   68% expected band : 1.51246 < r < 1.51246
   95% expected band : 1.51246 < r < 1.51246
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -515301779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67023 +/- 0.00309993 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.67023 @ 95%CL (1 toyMC)
median expected limit: r < 1.67023 @ 95%CL (1 toyMC)
   68% expected band : 1.67023 < r < 1.67023
   95% expected band : 1.67023 < r < 1.67023
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1391689479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08367 +/- 0.00393504 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.08367 @ 95%CL (1 toyMC)
median expected limit: r < 1.08367 @ 95%CL (1 toyMC)
   68% expected band : 1.08367 < r < 1.08367
   95% expected band : 1.08367 < r < 1.08367
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 485418711
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09047 +/- 0.00449647 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09047 @ 95%CL (1 toyMC)
median expected limit: r < 1.09047 @ 95%CL (1 toyMC)
   68% expected band : 1.09047 < r < 1.09047
   95% expected band : 1.09047 < r < 1.09047
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 190145027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09712 +/- 0.00396148 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09712 @ 95%CL (1 toyMC)
median expected limit: r < 1.09712 @ 95%CL (1 toyMC)
   68% expected band : 1.09712 < r < 1.09712
   95% expected band : 1.09712 < r < 1.09712
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1076087785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09853 +/- 0.00439645 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09853 @ 95%CL (1 toyMC)
median expected limit: r < 1.09853 @ 95%CL (1 toyMC)
   68% expected band : 1.09853 < r < 1.09853
   95% expected band : 1.09853 < r < 1.09853
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1314457246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10536 +/- 0.00369393 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.10536 @ 95%CL (1 toyMC)
median expected limit: r < 1.10536 @ 95%CL (1 toyMC)
   68% expected band : 1.10536 < r < 1.10536
   95% expected band : 1.10536 < r < 1.10536
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -253167303
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0962 +/- 0.00337159 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0962 @ 95%CL (1 toyMC)
median expected limit: r < 1.0962 @ 95%CL (1 toyMC)
   68% expected band : 1.0962 < r < 1.0962
   95% expected band : 1.0962 < r < 1.0962
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -189425072
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08418 +/- 0.00454012 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.08418 @ 95%CL (1 toyMC)
median expected limit: r < 1.08418 @ 95%CL (1 toyMC)
   68% expected band : 1.08418 < r < 1.08418
   95% expected band : 1.08418 < r < 1.08418
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -892005665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53861 +/- 0.00349203 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.53861 @ 95%CL (1 toyMC)
median expected limit: r < 1.53861 @ 95%CL (1 toyMC)
   68% expected band : 1.53861 < r < 1.53861
   95% expected band : 1.53861 < r < 1.53861
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -152490718
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09511 +/- 0.00368318 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09511 @ 95%CL (1 toyMC)
median expected limit: r < 1.09511 @ 95%CL (1 toyMC)
   68% expected band : 1.09511 < r < 1.09511
   95% expected band : 1.09511 < r < 1.09511
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1499570485
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72634 +/- 0.00373304 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.72634 @ 95%CL (1 toyMC)
median expected limit: r < 1.72634 @ 95%CL (1 toyMC)
   68% expected band : 1.72634 < r < 1.72634
   95% expected band : 1.72634 < r < 1.72634
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1358613294
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09533 +/- 0.00424419 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09533 @ 95%CL (1 toyMC)
median expected limit: r < 1.09533 @ 95%CL (1 toyMC)
   68% expected band : 1.09533 < r < 1.09533
   95% expected band : 1.09533 < r < 1.09533
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1540069784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.75016 +/- 0.00400594 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.75016 @ 95%CL (1 toyMC)
median expected limit: r < 1.75016 @ 95%CL (1 toyMC)
   68% expected band : 1.75016 < r < 1.75016
   95% expected band : 1.75016 < r < 1.75016
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -482472459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10504 +/- 0.00520853 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.10504 @ 95%CL (1 toyMC)
median expected limit: r < 1.10504 @ 95%CL (1 toyMC)
   68% expected band : 1.10504 < r < 1.10504
   95% expected band : 1.10504 < r < 1.10504
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1302200340
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08785 +/- 0.00385482 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.08785 @ 95%CL (1 toyMC)
median expected limit: r < 1.08785 @ 95%CL (1 toyMC)
   68% expected band : 1.08785 < r < 1.08785
   95% expected band : 1.08785 < r < 1.08785
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1465863983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09763 +/- 0.00364739 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 2.09763 @ 95%CL (1 toyMC)
median expected limit: r < 2.09763 @ 95%CL (1 toyMC)
   68% expected band : 2.09763 < r < 2.09763
   95% expected band : 2.09763 < r < 2.09763
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1446266301
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08846 +/- 0.00398916 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.08846 @ 95%CL (1 toyMC)
median expected limit: r < 1.08846 @ 95%CL (1 toyMC)
   68% expected band : 1.08846 < r < 1.08846
   95% expected band : 1.08846 < r < 1.08846
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -828186553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09701 +/- 0.00300436 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09701 @ 95%CL (1 toyMC)
median expected limit: r < 1.09701 @ 95%CL (1 toyMC)
   68% expected band : 1.09701 < r < 1.09701
   95% expected band : 1.09701 < r < 1.09701
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1717983468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09012 +/- 0.00390676 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09012 @ 95%CL (1 toyMC)
median expected limit: r < 1.09012 @ 95%CL (1 toyMC)
   68% expected band : 1.09012 < r < 1.09012
   95% expected band : 1.09012 < r < 1.09012
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 498847031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11038 +/- 0.00436188 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.11038 @ 95%CL (1 toyMC)
median expected limit: r < 1.11038 @ 95%CL (1 toyMC)
   68% expected band : 1.11038 < r < 1.11038
   95% expected band : 1.11038 < r < 1.11038
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1986822348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09895 +/- 0.00532937 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09895 @ 95%CL (1 toyMC)
median expected limit: r < 1.09895 @ 95%CL (1 toyMC)
   68% expected band : 1.09895 < r < 1.09895
   95% expected band : 1.09895 < r < 1.09895
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -21692803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10212 +/- 0.00377545 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.10212 @ 95%CL (1 toyMC)
median expected limit: r < 1.10212 @ 95%CL (1 toyMC)
   68% expected band : 1.10212 < r < 1.10212
   95% expected band : 1.10212 < r < 1.10212
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 88993116
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09289 +/- 0.00401874 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09289 @ 95%CL (1 toyMC)
median expected limit: r < 1.09289 @ 95%CL (1 toyMC)
   68% expected band : 1.09289 < r < 1.09289
   95% expected band : 1.09289 < r < 1.09289
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -702415287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09636 +/- 0.00349605 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09636 @ 95%CL (1 toyMC)
median expected limit: r < 1.09636 @ 95%CL (1 toyMC)
   68% expected band : 1.09636 < r < 1.09636
   95% expected band : 1.09636 < r < 1.09636
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -215257083
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11106 +/- 0.00396766 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.11106 @ 95%CL (1 toyMC)
median expected limit: r < 1.11106 @ 95%CL (1 toyMC)
   68% expected band : 1.11106 < r < 1.11106
   95% expected band : 1.11106 < r < 1.11106
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1395125064
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61309 +/- 0.00468374 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.61309 @ 95%CL (1 toyMC)
median expected limit: r < 1.61309 @ 95%CL (1 toyMC)
   68% expected band : 1.61309 < r < 1.61309
   95% expected band : 1.61309 < r < 1.61309
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1866293132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6682 +/- 0.00399195 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.6682 @ 95%CL (1 toyMC)
median expected limit: r < 1.6682 @ 95%CL (1 toyMC)
   68% expected band : 1.6682 < r < 1.6682
   95% expected band : 1.6682 < r < 1.6682
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 883879315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.086 +/- 0.00387273 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.086 @ 95%CL (1 toyMC)
median expected limit: r < 1.086 @ 95%CL (1 toyMC)
   68% expected band : 1.086 < r < 1.086
   95% expected band : 1.086 < r < 1.086
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -865117304
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10337 +/- 0.00479084 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.10337 @ 95%CL (1 toyMC)
median expected limit: r < 1.10337 @ 95%CL (1 toyMC)
   68% expected band : 1.10337 < r < 1.10337
   95% expected band : 1.10337 < r < 1.10337
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1312471924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09752 +/- 0.00430238 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09752 @ 95%CL (1 toyMC)
median expected limit: r < 1.09752 @ 95%CL (1 toyMC)
   68% expected band : 1.09752 < r < 1.09752
   95% expected band : 1.09752 < r < 1.09752
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -598650659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60612 +/- 0.00388361 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.60612 @ 95%CL (1 toyMC)
median expected limit: r < 1.60612 @ 95%CL (1 toyMC)
   68% expected band : 1.60612 < r < 1.60612
   95% expected band : 1.60612 < r < 1.60612
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -863467405
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0862 +/- 0.00413106 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0862 @ 95%CL (1 toyMC)
median expected limit: r < 1.0862 @ 95%CL (1 toyMC)
   68% expected band : 1.0862 < r < 1.0862
   95% expected band : 1.0862 < r < 1.0862
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2084341192
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1036 +/- 0.00428001 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.1036 @ 95%CL (1 toyMC)
median expected limit: r < 1.1036 @ 95%CL (1 toyMC)
   68% expected band : 1.1036 < r < 1.1036
   95% expected band : 1.1036 < r < 1.1036
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2065044256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73243 +/- 0.00389473 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.73243 @ 95%CL (1 toyMC)
median expected limit: r < 1.73243 @ 95%CL (1 toyMC)
   68% expected band : 1.73243 < r < 1.73243
   95% expected band : 1.73243 < r < 1.73243
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 696766697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07815 +/- 0.00383655 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.07815 @ 95%CL (1 toyMC)
median expected limit: r < 2.07815 @ 95%CL (1 toyMC)
   68% expected band : 2.07815 < r < 2.07815
   95% expected band : 2.07815 < r < 2.07815
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -579603757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09855 +/- 0.0042811 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09855 @ 95%CL (1 toyMC)
median expected limit: r < 1.09855 @ 95%CL (1 toyMC)
   68% expected band : 1.09855 < r < 1.09855
   95% expected band : 1.09855 < r < 1.09855
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -572763508
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09343 +/- 0.00454541 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09343 @ 95%CL (1 toyMC)
median expected limit: r < 1.09343 @ 95%CL (1 toyMC)
   68% expected band : 1.09343 < r < 1.09343
   95% expected band : 1.09343 < r < 1.09343
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 6553355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09233 +/- 0.00447812 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09233 @ 95%CL (1 toyMC)
median expected limit: r < 1.09233 @ 95%CL (1 toyMC)
   68% expected band : 1.09233 < r < 1.09233
   95% expected band : 1.09233 < r < 1.09233
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -126437089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09959 +/- 0.00424702 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09959 @ 95%CL (1 toyMC)
median expected limit: r < 1.09959 @ 95%CL (1 toyMC)
   68% expected band : 1.09959 < r < 1.09959
   95% expected band : 1.09959 < r < 1.09959
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 840154609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09939 +/- 0.00367757 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09939 @ 95%CL (1 toyMC)
median expected limit: r < 1.09939 @ 95%CL (1 toyMC)
   68% expected band : 1.09939 < r < 1.09939
   95% expected band : 1.09939 < r < 1.09939
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 443966750
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09537 +/- 0.00360005 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09537 @ 95%CL (1 toyMC)
median expected limit: r < 1.09537 @ 95%CL (1 toyMC)
   68% expected band : 1.09537 < r < 1.09537
   95% expected band : 1.09537 < r < 1.09537
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -494500849
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69313 +/- 0.00350678 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.69313 @ 95%CL (1 toyMC)
median expected limit: r < 1.69313 @ 95%CL (1 toyMC)
   68% expected band : 1.69313 < r < 1.69313
   95% expected band : 1.69313 < r < 1.69313
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2092986298
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72195 +/- 0.00474026 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.72195 @ 95%CL (1 toyMC)
median expected limit: r < 1.72195 @ 95%CL (1 toyMC)
   68% expected band : 1.72195 < r < 1.72195
   95% expected band : 1.72195 < r < 1.72195
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 798775663
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09958 +/- 0.00473219 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09958 @ 95%CL (1 toyMC)
median expected limit: r < 1.09958 @ 95%CL (1 toyMC)
   68% expected band : 1.09958 < r < 1.09958
   95% expected band : 1.09958 < r < 1.09958
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 141655476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.16741 +/- 0.00462199 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.16741 @ 95%CL (1 toyMC)
median expected limit: r < 2.16741 @ 95%CL (1 toyMC)
   68% expected band : 2.16741 < r < 2.16741
   95% expected band : 2.16741 < r < 2.16741
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1090479858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10524 +/- 0.00389501 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.10524 @ 95%CL (1 toyMC)
median expected limit: r < 1.10524 @ 95%CL (1 toyMC)
   68% expected band : 1.10524 < r < 1.10524
   95% expected band : 1.10524 < r < 1.10524
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1024976980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09835 +/- 0.00434348 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09835 @ 95%CL (1 toyMC)
median expected limit: r < 1.09835 @ 95%CL (1 toyMC)
   68% expected band : 1.09835 < r < 1.09835
   95% expected band : 1.09835 < r < 1.09835
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2057257092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09752 +/- 0.00398641 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09752 @ 95%CL (1 toyMC)
median expected limit: r < 1.09752 @ 95%CL (1 toyMC)
   68% expected band : 1.09752 < r < 1.09752
   95% expected band : 1.09752 < r < 1.09752
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 494226100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10412 +/- 0.00424459 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.10412 @ 95%CL (1 toyMC)
median expected limit: r < 1.10412 @ 95%CL (1 toyMC)
   68% expected band : 1.10412 < r < 1.10412
   95% expected band : 1.10412 < r < 1.10412
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1171934599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08605 +/- 0.00401101 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.08605 @ 95%CL (1 toyMC)
median expected limit: r < 1.08605 @ 95%CL (1 toyMC)
   68% expected band : 1.08605 < r < 1.08605
   95% expected band : 1.08605 < r < 1.08605
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1860518054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09915 +/- 0.00436243 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09915 @ 95%CL (1 toyMC)
median expected limit: r < 1.09915 @ 95%CL (1 toyMC)
   68% expected band : 1.09915 < r < 1.09915
   95% expected band : 1.09915 < r < 1.09915
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1693320241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09345 +/- 0.00501564 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09345 @ 95%CL (1 toyMC)
median expected limit: r < 1.09345 @ 95%CL (1 toyMC)
   68% expected band : 1.09345 < r < 1.09345
   95% expected band : 1.09345 < r < 1.09345
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1124018007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09616 +/- 0.00384829 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09616 @ 95%CL (1 toyMC)
median expected limit: r < 1.09616 @ 95%CL (1 toyMC)
   68% expected band : 1.09616 < r < 1.09616
   95% expected band : 1.09616 < r < 1.09616
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 214231266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0924 +/- 0.00410466 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0924 @ 95%CL (1 toyMC)
median expected limit: r < 1.0924 @ 95%CL (1 toyMC)
   68% expected band : 1.0924 < r < 1.0924
   95% expected band : 1.0924 < r < 1.0924
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 798130198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68996 +/- 0.00397109 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.68996 @ 95%CL (1 toyMC)
median expected limit: r < 1.68996 @ 95%CL (1 toyMC)
   68% expected band : 1.68996 < r < 1.68996
   95% expected band : 1.68996 < r < 1.68996
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2106908640
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09282 +/- 0.00500741 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09282 @ 95%CL (1 toyMC)
median expected limit: r < 1.09282 @ 95%CL (1 toyMC)
   68% expected band : 1.09282 < r < 1.09282
   95% expected band : 1.09282 < r < 1.09282
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1835094453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09176 +/- 0.00444695 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09176 @ 95%CL (1 toyMC)
median expected limit: r < 1.09176 @ 95%CL (1 toyMC)
   68% expected band : 1.09176 < r < 1.09176
   95% expected band : 1.09176 < r < 1.09176
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1750780207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1077 +/- 0.00382644 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.1077 @ 95%CL (1 toyMC)
median expected limit: r < 1.1077 @ 95%CL (1 toyMC)
   68% expected band : 1.1077 < r < 1.1077
   95% expected band : 1.1077 < r < 1.1077
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -938643928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67167 +/- 0.00451043 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.67167 @ 95%CL (1 toyMC)
median expected limit: r < 1.67167 @ 95%CL (1 toyMC)
   68% expected band : 1.67167 < r < 1.67167
   95% expected band : 1.67167 < r < 1.67167
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1478811949
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08787 +/- 0.00416488 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.08787 @ 95%CL (1 toyMC)
median expected limit: r < 1.08787 @ 95%CL (1 toyMC)
   68% expected band : 1.08787 < r < 1.08787
   95% expected band : 1.08787 < r < 1.08787
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1326602913
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10121 +/- 0.00386286 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.10121 @ 95%CL (1 toyMC)
median expected limit: r < 1.10121 @ 95%CL (1 toyMC)
   68% expected band : 1.10121 < r < 1.10121
   95% expected band : 1.10121 < r < 1.10121
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 789364055
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09004 +/- 0.00431175 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09004 @ 95%CL (1 toyMC)
median expected limit: r < 1.09004 @ 95%CL (1 toyMC)
   68% expected band : 1.09004 < r < 1.09004
   95% expected band : 1.09004 < r < 1.09004
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -313991676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69088 +/- 0.00344993 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.69088 @ 95%CL (1 toyMC)
median expected limit: r < 1.69088 @ 95%CL (1 toyMC)
   68% expected band : 1.69088 < r < 1.69088
   95% expected band : 1.69088 < r < 1.69088
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -182720058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09749 +/- 0.00459957 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09749 @ 95%CL (1 toyMC)
median expected limit: r < 1.09749 @ 95%CL (1 toyMC)
   68% expected band : 1.09749 < r < 1.09749
   95% expected band : 1.09749 < r < 1.09749
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 128155403
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10572 +/- 0.00420131 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.10572 @ 95%CL (1 toyMC)
median expected limit: r < 1.10572 @ 95%CL (1 toyMC)
   68% expected band : 1.10572 < r < 1.10572
   95% expected band : 1.10572 < r < 1.10572
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2084395819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09577 +/- 0.00413623 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09577 @ 95%CL (1 toyMC)
median expected limit: r < 1.09577 @ 95%CL (1 toyMC)
   68% expected band : 1.09577 < r < 1.09577
   95% expected band : 1.09577 < r < 1.09577
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1067301032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0998 +/- 0.00368014 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0998 @ 95%CL (1 toyMC)
median expected limit: r < 1.0998 @ 95%CL (1 toyMC)
   68% expected band : 1.0998 < r < 1.0998
   95% expected band : 1.0998 < r < 1.0998
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2136974687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09799 +/- 0.00351254 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09799 @ 95%CL (1 toyMC)
median expected limit: r < 1.09799 @ 95%CL (1 toyMC)
   68% expected band : 1.09799 < r < 1.09799
   95% expected band : 1.09799 < r < 1.09799
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1341037350
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10019 +/- 0.00432702 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 1.10019 @ 95%CL (1 toyMC)
median expected limit: r < 1.10019 @ 95%CL (1 toyMC)
   68% expected band : 1.10019 < r < 1.10019
   95% expected band : 1.10019 < r < 1.10019
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1772933385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09905 +/- 0.00469523 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09905 @ 95%CL (1 toyMC)
median expected limit: r < 1.09905 @ 95%CL (1 toyMC)
   68% expected band : 1.09905 < r < 1.09905
   95% expected band : 1.09905 < r < 1.09905
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1895351136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09438 +/- 0.00426021 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09438 @ 95%CL (1 toyMC)
median expected limit: r < 1.09438 @ 95%CL (1 toyMC)
   68% expected band : 1.09438 < r < 1.09438
   95% expected band : 1.09438 < r < 1.09438
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1340754929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74091 +/- 0.00329298 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.74091 @ 95%CL (1 toyMC)
median expected limit: r < 1.74091 @ 95%CL (1 toyMC)
   68% expected band : 1.74091 < r < 1.74091
   95% expected band : 1.74091 < r < 1.74091
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1334327322
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0957 +/- 0.00371317 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0957 @ 95%CL (1 toyMC)
median expected limit: r < 1.0957 @ 95%CL (1 toyMC)
   68% expected band : 1.0957 < r < 1.0957
   95% expected band : 1.0957 < r < 1.0957
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -154996872
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09264 +/- 0.00429475 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.09264 @ 95%CL (1 toyMC)
median expected limit: r < 1.09264 @ 95%CL (1 toyMC)
   68% expected band : 1.09264 < r < 1.09264
   95% expected band : 1.09264 < r < 1.09264
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 154132797
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10585 +/- 0.00502412 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.10585 @ 95%CL (1 toyMC)
median expected limit: r < 1.10585 @ 95%CL (1 toyMC)
   68% expected band : 1.10585 < r < 1.10585
   95% expected band : 1.10585 < r < 1.10585
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1415331629
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09859 +/- 0.00400606 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09859 @ 95%CL (1 toyMC)
median expected limit: r < 1.09859 @ 95%CL (1 toyMC)
   68% expected band : 1.09859 < r < 1.09859
   95% expected band : 1.09859 < r < 1.09859
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1263279422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10531 +/- 0.00465949 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.10531 @ 95%CL (1 toyMC)
median expected limit: r < 1.10531 @ 95%CL (1 toyMC)
   68% expected band : 1.10531 < r < 1.10531
   95% expected band : 1.10531 < r < 1.10531
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -997544892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09089 +/- 0.00438705 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09089 @ 95%CL (1 toyMC)
median expected limit: r < 1.09089 @ 95%CL (1 toyMC)
   68% expected band : 1.09089 < r < 1.09089
   95% expected band : 1.09089 < r < 1.09089
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 244370474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08702 +/- 0.00492016 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.08702 @ 95%CL (1 toyMC)
median expected limit: r < 1.08702 @ 95%CL (1 toyMC)
   68% expected band : 1.08702 < r < 1.08702
   95% expected band : 1.08702 < r < 1.08702
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 877500699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09482 +/- 0.00361232 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09482 @ 95%CL (1 toyMC)
median expected limit: r < 1.09482 @ 95%CL (1 toyMC)
   68% expected band : 1.09482 < r < 1.09482
   95% expected band : 1.09482 < r < 1.09482
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2013298022
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09819 +/- 0.00408686 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09819 @ 95%CL (1 toyMC)
median expected limit: r < 1.09819 @ 95%CL (1 toyMC)
   68% expected band : 1.09819 < r < 1.09819
   95% expected band : 1.09819 < r < 1.09819
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 595259773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10605 +/- 0.00436993 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 1.10605 @ 95%CL (1 toyMC)
median expected limit: r < 1.10605 @ 95%CL (1 toyMC)
   68% expected band : 1.10605 < r < 1.10605
   95% expected band : 1.10605 < r < 1.10605
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1024848636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08992 +/- 0.00361745 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.08992 @ 95%CL (1 toyMC)
median expected limit: r < 1.08992 @ 95%CL (1 toyMC)
   68% expected band : 1.08992 < r < 1.08992
   95% expected band : 1.08992 < r < 1.08992
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -489665703
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09805 +/- 0.00386175 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09805 @ 95%CL (1 toyMC)
median expected limit: r < 1.09805 @ 95%CL (1 toyMC)
   68% expected band : 1.09805 < r < 1.09805
   95% expected band : 1.09805 < r < 1.09805
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -829033750
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54309 +/- 0.00386673 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.54309 @ 95%CL (1 toyMC)
median expected limit: r < 1.54309 @ 95%CL (1 toyMC)
   68% expected band : 1.54309 < r < 1.54309
   95% expected band : 1.54309 < r < 1.54309
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -385836967
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09611 +/- 0.00459919 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09611 @ 95%CL (1 toyMC)
median expected limit: r < 1.09611 @ 95%CL (1 toyMC)
   68% expected band : 1.09611 < r < 1.09611
   95% expected band : 1.09611 < r < 1.09611
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2102673461
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10905 +/- 0.00486178 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.10905 @ 95%CL (1 toyMC)
median expected limit: r < 1.10905 @ 95%CL (1 toyMC)
   68% expected band : 1.10905 < r < 1.10905
   95% expected band : 1.10905 < r < 1.10905
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1978452316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10697 +/- 0.00417787 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.10697 @ 95%CL (1 toyMC)
median expected limit: r < 1.10697 @ 95%CL (1 toyMC)
   68% expected band : 1.10697 < r < 1.10697
   95% expected band : 1.10697 < r < 1.10697
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1368567422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09159 +/- 0.00466109 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09159 @ 95%CL (1 toyMC)
median expected limit: r < 1.09159 @ 95%CL (1 toyMC)
   68% expected band : 1.09159 < r < 1.09159
   95% expected band : 1.09159 < r < 1.09159
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 76056409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0942 +/- 0.00414395 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.0942 @ 95%CL (1 toyMC)
median expected limit: r < 1.0942 @ 95%CL (1 toyMC)
   68% expected band : 1.0942 < r < 1.0942
   95% expected band : 1.0942 < r < 1.0942
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2099296734
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54451 +/- 0.00343166 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.54451 @ 95%CL (1 toyMC)
median expected limit: r < 1.54451 @ 95%CL (1 toyMC)
   68% expected band : 1.54451 < r < 1.54451
   95% expected band : 1.54451 < r < 1.54451
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -362670951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08499 +/- 0.00474534 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.08499 @ 95%CL (1 toyMC)
median expected limit: r < 1.08499 @ 95%CL (1 toyMC)
   68% expected band : 1.08499 < r < 1.08499
   95% expected band : 1.08499 < r < 1.08499
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -102186725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61599 +/- 0.00416647 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.61599 @ 95%CL (1 toyMC)
median expected limit: r < 1.61599 @ 95%CL (1 toyMC)
   68% expected band : 1.61599 < r < 1.61599
   95% expected band : 1.61599 < r < 1.61599
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1955267479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10741 +/- 0.00471513 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.10741 @ 95%CL (1 toyMC)
median expected limit: r < 1.10741 @ 95%CL (1 toyMC)
   68% expected band : 1.10741 < r < 1.10741
   95% expected band : 1.10741 < r < 1.10741
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -466680339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09887 +/- 0.00416386 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.09887 @ 95%CL (1 toyMC)
median expected limit: r < 1.09887 @ 95%CL (1 toyMC)
   68% expected band : 1.09887 < r < 1.09887
   95% expected band : 1.09887 < r < 1.09887
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -36637554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10214 +/- 0.00461589 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.10214 @ 95%CL (1 toyMC)
median expected limit: r < 1.10214 @ 95%CL (1 toyMC)
   68% expected band : 1.10214 < r < 1.10214
   95% expected band : 1.10214 < r < 1.10214
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-102186725.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1090479858.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1124018007.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-126437089.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1303781942.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1312471924.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1326602913.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1368567422.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1391689479.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1415331629.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1465863983.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1478811949.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-152490718.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-154996872.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1693320241.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1717983468.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-182720058.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1828665452.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-189425072.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1955267479.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-2013298022.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-2065044256.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-2084341192.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-2092986298.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-2099296734.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-2102673461.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-215257083.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-21692803.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-253167303.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-313991676.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-362670951.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-36637554.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-385836967.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-466680339.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-482472459.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-489665703.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-494500849.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-515301779.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-572763508.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-579603757.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-598650659.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-702415287.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-828186553.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-829033750.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-863467405.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-865117304.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-892005665.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-938643928.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-997544892.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.1024848636.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.1024976980.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.1067301032.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.1076087785.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.1171934599.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.1263279422.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.128155403.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1302200340.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1314457246.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1334327322.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1340754929.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1341037350.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1358613294.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1395125064.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.141655476.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1446266301.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1499570485.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1540069784.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.154132797.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1750780207.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1772933385.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1835094453.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1860518054.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1866293132.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1895351136.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.190145027.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.1978452316.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.1986822348.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.2057257092.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.2084395819.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.2106908640.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.2136974687.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.214231266.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.244370474.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.439935940.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.443966750.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.485418711.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.494226100.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.498847031.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.506404541.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.595259773.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.6553355.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.696766697.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.76056409.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.789364055.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.798130198.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.798775663.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.840154609.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.877500699.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.883879315.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.88993116.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1693116115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17991 +/- 0.00447566 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17991 @ 95%CL (1 toyMC)
median expected limit: r < 1.17991 @ 95%CL (1 toyMC)
   68% expected band : 1.17991 < r < 1.17991
   95% expected band : 1.17991 < r < 1.17991
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 177425958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.83793 +/- 0.00496306 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.83793 @ 95%CL (1 toyMC)
median expected limit: r < 1.83793 @ 95%CL (1 toyMC)
   68% expected band : 1.83793 < r < 1.83793
   95% expected band : 1.83793 < r < 1.83793
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1917419705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16653 +/- 0.0038223 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.16653 @ 95%CL (1 toyMC)
median expected limit: r < 1.16653 @ 95%CL (1 toyMC)
   68% expected band : 1.16653 < r < 1.16653
   95% expected band : 1.16653 < r < 1.16653
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -245877003
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73926 +/- 0.00413061 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.73926 @ 95%CL (1 toyMC)
median expected limit: r < 1.73926 @ 95%CL (1 toyMC)
   68% expected band : 1.73926 < r < 1.73926
   95% expected band : 1.73926 < r < 1.73926
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 322048353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74086 +/- 0.00416483 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.74086 @ 95%CL (1 toyMC)
median expected limit: r < 1.74086 @ 95%CL (1 toyMC)
   68% expected band : 1.74086 < r < 1.74086
   95% expected band : 1.74086 < r < 1.74086
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1223611011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20258 +/- 0.00415596 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.20258 @ 95%CL (1 toyMC)
median expected limit: r < 1.20258 @ 95%CL (1 toyMC)
   68% expected band : 1.20258 < r < 1.20258
   95% expected band : 1.20258 < r < 1.20258
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -162745747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76641 +/- 0.005082 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.76641 @ 95%CL (1 toyMC)
median expected limit: r < 1.76641 @ 95%CL (1 toyMC)
   68% expected band : 1.76641 < r < 1.76641
   95% expected band : 1.76641 < r < 1.76641
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 842819060
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74615 +/- 0.00552599 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.74615 @ 95%CL (1 toyMC)
median expected limit: r < 1.74615 @ 95%CL (1 toyMC)
   68% expected band : 1.74615 < r < 1.74615
   95% expected band : 1.74615 < r < 1.74615
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 491591156
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19187 +/- 0.00427862 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.19187 @ 95%CL (1 toyMC)
median expected limit: r < 1.19187 @ 95%CL (1 toyMC)
   68% expected band : 1.19187 < r < 1.19187
   95% expected band : 1.19187 < r < 1.19187
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 286995242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17268 +/- 0.00414081 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17268 @ 95%CL (1 toyMC)
median expected limit: r < 1.17268 @ 95%CL (1 toyMC)
   68% expected band : 1.17268 < r < 1.17268
   95% expected band : 1.17268 < r < 1.17268
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 748101022
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18216 +/- 0.00470526 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18216 @ 95%CL (1 toyMC)
median expected limit: r < 1.18216 @ 95%CL (1 toyMC)
   68% expected band : 1.18216 < r < 1.18216
   95% expected band : 1.18216 < r < 1.18216
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -266144242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18318 +/- 0.00403893 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18318 @ 95%CL (1 toyMC)
median expected limit: r < 1.18318 @ 95%CL (1 toyMC)
   68% expected band : 1.18318 < r < 1.18318
   95% expected band : 1.18318 < r < 1.18318
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1574504946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18553 +/- 0.00306169 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18553 @ 95%CL (1 toyMC)
median expected limit: r < 1.18553 @ 95%CL (1 toyMC)
   68% expected band : 1.18553 < r < 1.18553
   95% expected band : 1.18553 < r < 1.18553
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1727274127
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17753 +/- 0.00491216 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17753 @ 95%CL (1 toyMC)
median expected limit: r < 1.17753 @ 95%CL (1 toyMC)
   68% expected band : 1.17753 < r < 1.17753
   95% expected band : 1.17753 < r < 1.17753
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -527711447
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19141 +/- 0.00450917 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.19141 @ 95%CL (1 toyMC)
median expected limit: r < 1.19141 @ 95%CL (1 toyMC)
   68% expected band : 1.19141 < r < 1.19141
   95% expected band : 1.19141 < r < 1.19141
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 205858973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1664 +/- 0.00394541 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.1664 @ 95%CL (1 toyMC)
median expected limit: r < 1.1664 @ 95%CL (1 toyMC)
   68% expected band : 1.1664 < r < 1.1664
   95% expected band : 1.1664 < r < 1.1664
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2037727681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19977 +/- 0.00409604 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.19977 @ 95%CL (1 toyMC)
median expected limit: r < 1.19977 @ 95%CL (1 toyMC)
   68% expected band : 1.19977 < r < 1.19977
   95% expected band : 1.19977 < r < 1.19977
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 879677541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17382 +/- 0.00514701 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17382 @ 95%CL (1 toyMC)
median expected limit: r < 1.17382 @ 95%CL (1 toyMC)
   68% expected band : 1.17382 < r < 1.17382
   95% expected band : 1.17382 < r < 1.17382
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -608715504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.79882 +/- 0.00419803 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.79882 @ 95%CL (1 toyMC)
median expected limit: r < 1.79882 @ 95%CL (1 toyMC)
   68% expected band : 1.79882 < r < 1.79882
   95% expected band : 1.79882 < r < 1.79882
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1937951461
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1802 +/- 0.00386844 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 1.1802 @ 95%CL (1 toyMC)
median expected limit: r < 1.1802 @ 95%CL (1 toyMC)
   68% expected band : 1.1802 < r < 1.1802
   95% expected band : 1.1802 < r < 1.1802
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1036546860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19484 +/- 0.00431124 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.19484 @ 95%CL (1 toyMC)
median expected limit: r < 1.19484 @ 95%CL (1 toyMC)
   68% expected band : 1.19484 < r < 1.19484
   95% expected band : 1.19484 < r < 1.19484
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1227903856
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18045 +/- 0.00395105 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 1.18045 @ 95%CL (1 toyMC)
median expected limit: r < 1.18045 @ 95%CL (1 toyMC)
   68% expected band : 1.18045 < r < 1.18045
   95% expected band : 1.18045 < r < 1.18045
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 848099378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18586 +/- 0.00385822 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18586 @ 95%CL (1 toyMC)
median expected limit: r < 1.18586 @ 95%CL (1 toyMC)
   68% expected band : 1.18586 < r < 1.18586
   95% expected band : 1.18586 < r < 1.18586
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -965624254
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19167 +/- 0.00447565 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 1.19167 @ 95%CL (1 toyMC)
median expected limit: r < 1.19167 @ 95%CL (1 toyMC)
   68% expected band : 1.19167 < r < 1.19167
   95% expected band : 1.19167 < r < 1.19167
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1465747306
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18351 +/- 0.00380413 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18351 @ 95%CL (1 toyMC)
median expected limit: r < 1.18351 @ 95%CL (1 toyMC)
   68% expected band : 1.18351 < r < 1.18351
   95% expected band : 1.18351 < r < 1.18351
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 217061719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17631 +/- 0.00439647 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17631 @ 95%CL (1 toyMC)
median expected limit: r < 1.17631 @ 95%CL (1 toyMC)
   68% expected band : 1.17631 < r < 1.17631
   95% expected band : 1.17631 < r < 1.17631
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 238219885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19115 +/- 0.0039082 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.19115 @ 95%CL (1 toyMC)
median expected limit: r < 1.19115 @ 95%CL (1 toyMC)
   68% expected band : 1.19115 < r < 1.19115
   95% expected band : 1.19115 < r < 1.19115
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1708538832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17843 +/- 0.00402425 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17843 @ 95%CL (1 toyMC)
median expected limit: r < 1.17843 @ 95%CL (1 toyMC)
   68% expected band : 1.17843 < r < 1.17843
   95% expected band : 1.17843 < r < 1.17843
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1791566551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.75589 +/- 0.00493045 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.75589 @ 95%CL (1 toyMC)
median expected limit: r < 1.75589 @ 95%CL (1 toyMC)
   68% expected band : 1.75589 < r < 1.75589
   95% expected band : 1.75589 < r < 1.75589
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 88464258
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19496 +/- 0.00431765 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.19496 @ 95%CL (1 toyMC)
median expected limit: r < 1.19496 @ 95%CL (1 toyMC)
   68% expected band : 1.19496 < r < 1.19496
   95% expected band : 1.19496 < r < 1.19496
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1329619324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19055 +/- 0.00487457 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.19055 @ 95%CL (1 toyMC)
median expected limit: r < 1.19055 @ 95%CL (1 toyMC)
   68% expected band : 1.19055 < r < 1.19055
   95% expected band : 1.19055 < r < 1.19055
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1999225720
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18354 +/- 0.00468423 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 1.18354 @ 95%CL (1 toyMC)
median expected limit: r < 1.18354 @ 95%CL (1 toyMC)
   68% expected band : 1.18354 < r < 1.18354
   95% expected band : 1.18354 < r < 1.18354
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -410987939
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18607 +/- 0.00482534 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18607 @ 95%CL (1 toyMC)
median expected limit: r < 1.18607 @ 95%CL (1 toyMC)
   68% expected band : 1.18607 < r < 1.18607
   95% expected band : 1.18607 < r < 1.18607
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -528730244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18649 +/- 0.00409441 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18649 @ 95%CL (1 toyMC)
median expected limit: r < 1.18649 @ 95%CL (1 toyMC)
   68% expected band : 1.18649 < r < 1.18649
   95% expected band : 1.18649 < r < 1.18649
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 136709919
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18139 +/- 0.00481437 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18139 @ 95%CL (1 toyMC)
median expected limit: r < 1.18139 @ 95%CL (1 toyMC)
   68% expected band : 1.18139 < r < 1.18139
   95% expected band : 1.18139 < r < 1.18139
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -774101889
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18347 +/- 0.00463394 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18347 @ 95%CL (1 toyMC)
median expected limit: r < 1.18347 @ 95%CL (1 toyMC)
   68% expected band : 1.18347 < r < 1.18347
   95% expected band : 1.18347 < r < 1.18347
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 412423621
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18119 +/- 0.00501856 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18119 @ 95%CL (1 toyMC)
median expected limit: r < 1.18119 @ 95%CL (1 toyMC)
   68% expected band : 1.18119 < r < 1.18119
   95% expected band : 1.18119 < r < 1.18119
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1958695729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18315 +/- 0.00357338 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18315 @ 95%CL (1 toyMC)
median expected limit: r < 1.18315 @ 95%CL (1 toyMC)
   68% expected band : 1.18315 < r < 1.18315
   95% expected band : 1.18315 < r < 1.18315
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1329726842
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18684 +/- 0.00450179 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18684 @ 95%CL (1 toyMC)
median expected limit: r < 1.18684 @ 95%CL (1 toyMC)
   68% expected band : 1.18684 < r < 1.18684
   95% expected band : 1.18684 < r < 1.18684
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1593015143
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18805 +/- 0.00383156 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18805 @ 95%CL (1 toyMC)
median expected limit: r < 1.18805 @ 95%CL (1 toyMC)
   68% expected band : 1.18805 < r < 1.18805
   95% expected band : 1.18805 < r < 1.18805
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1737002372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18375 +/- 0.00355622 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18375 @ 95%CL (1 toyMC)
median expected limit: r < 1.18375 @ 95%CL (1 toyMC)
   68% expected band : 1.18375 < r < 1.18375
   95% expected band : 1.18375 < r < 1.18375
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1291985454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19191 +/- 0.00441977 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.19191 @ 95%CL (1 toyMC)
median expected limit: r < 1.19191 @ 95%CL (1 toyMC)
   68% expected band : 1.19191 < r < 1.19191
   95% expected band : 1.19191 < r < 1.19191
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1030949900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18484 +/- 0.00421448 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18484 @ 95%CL (1 toyMC)
median expected limit: r < 1.18484 @ 95%CL (1 toyMC)
   68% expected band : 1.18484 < r < 1.18484
   95% expected band : 1.18484 < r < 1.18484
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2047278503
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17748 +/- 0.00477828 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17748 @ 95%CL (1 toyMC)
median expected limit: r < 1.17748 @ 95%CL (1 toyMC)
   68% expected band : 1.17748 < r < 1.17748
   95% expected band : 1.17748 < r < 1.17748
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -152906513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17806 +/- 0.00427842 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17806 @ 95%CL (1 toyMC)
median expected limit: r < 1.17806 @ 95%CL (1 toyMC)
   68% expected band : 1.17806 < r < 1.17806
   95% expected band : 1.17806 < r < 1.17806
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1553512659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18584 +/- 0.00436159 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18584 @ 95%CL (1 toyMC)
median expected limit: r < 1.18584 @ 95%CL (1 toyMC)
   68% expected band : 1.18584 < r < 1.18584
   95% expected band : 1.18584 < r < 1.18584
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2007228593
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16597 +/- 0.00453603 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.16597 @ 95%CL (1 toyMC)
median expected limit: r < 1.16597 @ 95%CL (1 toyMC)
   68% expected band : 1.16597 < r < 1.16597
   95% expected band : 1.16597 < r < 1.16597
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1521523016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71801 +/- 0.00477593 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.71801 @ 95%CL (1 toyMC)
median expected limit: r < 1.71801 @ 95%CL (1 toyMC)
   68% expected band : 1.71801 < r < 1.71801
   95% expected band : 1.71801 < r < 1.71801
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -666501427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17415 +/- 0.00468242 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.17415 @ 95%CL (1 toyMC)
median expected limit: r < 1.17415 @ 95%CL (1 toyMC)
   68% expected band : 1.17415 < r < 1.17415
   95% expected band : 1.17415 < r < 1.17415
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1970492057
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17825 +/- 0.00427465 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17825 @ 95%CL (1 toyMC)
median expected limit: r < 1.17825 @ 95%CL (1 toyMC)
   68% expected band : 1.17825 < r < 1.17825
   95% expected band : 1.17825 < r < 1.17825
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -474077399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18824 +/- 0.00431536 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.18824 @ 95%CL (1 toyMC)
median expected limit: r < 1.18824 @ 95%CL (1 toyMC)
   68% expected band : 1.18824 < r < 1.18824
   95% expected band : 1.18824 < r < 1.18824
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1076268541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17882 +/- 0.00389701 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17882 @ 95%CL (1 toyMC)
median expected limit: r < 1.17882 @ 95%CL (1 toyMC)
   68% expected band : 1.17882 < r < 1.17882
   95% expected band : 1.17882 < r < 1.17882
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 272547604
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18094 +/- 0.00490891 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18094 @ 95%CL (1 toyMC)
median expected limit: r < 1.18094 @ 95%CL (1 toyMC)
   68% expected band : 1.18094 < r < 1.18094
   95% expected band : 1.18094 < r < 1.18094
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -447443351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18857 +/- 0.00443816 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18857 @ 95%CL (1 toyMC)
median expected limit: r < 1.18857 @ 95%CL (1 toyMC)
   68% expected band : 1.18857 < r < 1.18857
   95% expected band : 1.18857 < r < 1.18857
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -735862782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1782 +/- 0.0038251 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.1782 @ 95%CL (1 toyMC)
median expected limit: r < 1.1782 @ 95%CL (1 toyMC)
   68% expected band : 1.1782 < r < 1.1782
   95% expected band : 1.1782 < r < 1.1782
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -566827138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17929 +/- 0.00400637 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17929 @ 95%CL (1 toyMC)
median expected limit: r < 1.17929 @ 95%CL (1 toyMC)
   68% expected band : 1.17929 < r < 1.17929
   95% expected band : 1.17929 < r < 1.17929
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2068944851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18355 +/- 0.00431491 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.18355 @ 95%CL (1 toyMC)
median expected limit: r < 1.18355 @ 95%CL (1 toyMC)
   68% expected band : 1.18355 < r < 1.18355
   95% expected band : 1.18355 < r < 1.18355
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -241313264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16884 +/- 0.00463536 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.16884 @ 95%CL (1 toyMC)
median expected limit: r < 1.16884 @ 95%CL (1 toyMC)
   68% expected band : 1.16884 < r < 1.16884
   95% expected band : 1.16884 < r < 1.16884
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -278982425
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18048 +/- 0.00404278 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.18048 @ 95%CL (1 toyMC)
median expected limit: r < 1.18048 @ 95%CL (1 toyMC)
   68% expected band : 1.18048 < r < 1.18048
   95% expected band : 1.18048 < r < 1.18048
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 801099427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17303 +/- 0.0042366 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17303 @ 95%CL (1 toyMC)
median expected limit: r < 1.17303 @ 95%CL (1 toyMC)
   68% expected band : 1.17303 < r < 1.17303
   95% expected band : 1.17303 < r < 1.17303
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1717284474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80238 +/- 0.00428876 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.80238 @ 95%CL (1 toyMC)
median expected limit: r < 1.80238 @ 95%CL (1 toyMC)
   68% expected band : 1.80238 < r < 1.80238
   95% expected band : 1.80238 < r < 1.80238
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -465388988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17244 +/- 0.00467139 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17244 @ 95%CL (1 toyMC)
median expected limit: r < 1.17244 @ 95%CL (1 toyMC)
   68% expected band : 1.17244 < r < 1.17244
   95% expected band : 1.17244 < r < 1.17244
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -480276262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73114 +/- 0.00494957 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.73114 @ 95%CL (1 toyMC)
median expected limit: r < 1.73114 @ 95%CL (1 toyMC)
   68% expected band : 1.73114 < r < 1.73114
   95% expected band : 1.73114 < r < 1.73114
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 69157382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85454 +/- 0.00491108 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.85454 @ 95%CL (1 toyMC)
median expected limit: r < 1.85454 @ 95%CL (1 toyMC)
   68% expected band : 1.85454 < r < 1.85454
   95% expected band : 1.85454 < r < 1.85454
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1394576549
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18118 +/- 0.00453277 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18118 @ 95%CL (1 toyMC)
median expected limit: r < 1.18118 @ 95%CL (1 toyMC)
   68% expected band : 1.18118 < r < 1.18118
   95% expected band : 1.18118 < r < 1.18118
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2089157625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18315 +/- 0.00456607 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18315 @ 95%CL (1 toyMC)
median expected limit: r < 1.18315 @ 95%CL (1 toyMC)
   68% expected band : 1.18315 < r < 1.18315
   95% expected band : 1.18315 < r < 1.18315
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1013136319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70844 +/- 0.00359683 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.70844 @ 95%CL (1 toyMC)
median expected limit: r < 1.70844 @ 95%CL (1 toyMC)
   68% expected band : 1.70844 < r < 1.70844
   95% expected band : 1.70844 < r < 1.70844
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1605334321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1703 +/- 0.00568673 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.1703 @ 95%CL (1 toyMC)
median expected limit: r < 1.1703 @ 95%CL (1 toyMC)
   68% expected band : 1.1703 < r < 1.1703
   95% expected band : 1.1703 < r < 1.1703
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 459094143
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16997 +/- 0.00416024 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.16997 @ 95%CL (1 toyMC)
median expected limit: r < 1.16997 @ 95%CL (1 toyMC)
   68% expected band : 1.16997 < r < 1.16997
   95% expected band : 1.16997 < r < 1.16997
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 454850954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70291 +/- 0.00354329 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.70291 @ 95%CL (1 toyMC)
median expected limit: r < 1.70291 @ 95%CL (1 toyMC)
   68% expected band : 1.70291 < r < 1.70291
   95% expected band : 1.70291 < r < 1.70291
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 264832915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68168 +/- 0.00380221 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.68168 @ 95%CL (1 toyMC)
median expected limit: r < 1.68168 @ 95%CL (1 toyMC)
   68% expected band : 1.68168 < r < 1.68168
   95% expected band : 1.68168 < r < 1.68168
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -292406915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18746 +/- 0.00427348 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18746 @ 95%CL (1 toyMC)
median expected limit: r < 1.18746 @ 95%CL (1 toyMC)
   68% expected band : 1.18746 < r < 1.18746
   95% expected band : 1.18746 < r < 1.18746
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1983757648
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17497 +/- 0.00402382 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 1.17497 @ 95%CL (1 toyMC)
median expected limit: r < 1.17497 @ 95%CL (1 toyMC)
   68% expected band : 1.17497 < r < 1.17497
   95% expected band : 1.17497 < r < 1.17497
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -150988564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19063 +/- 0.00423966 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 1.19063 @ 95%CL (1 toyMC)
median expected limit: r < 1.19063 @ 95%CL (1 toyMC)
   68% expected band : 1.19063 < r < 1.19063
   95% expected band : 1.19063 < r < 1.19063
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1699494266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19354 +/- 0.00521404 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.19354 @ 95%CL (1 toyMC)
median expected limit: r < 1.19354 @ 95%CL (1 toyMC)
   68% expected band : 1.19354 < r < 1.19354
   95% expected band : 1.19354 < r < 1.19354
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1435026693
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18137 +/- 0.00379744 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18137 @ 95%CL (1 toyMC)
median expected limit: r < 1.18137 @ 95%CL (1 toyMC)
   68% expected band : 1.18137 < r < 1.18137
   95% expected band : 1.18137 < r < 1.18137
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2038137807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17652 +/- 0.00339157 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 1.17652 @ 95%CL (1 toyMC)
median expected limit: r < 1.17652 @ 95%CL (1 toyMC)
   68% expected band : 1.17652 < r < 1.17652
   95% expected band : 1.17652 < r < 1.17652
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 7950019
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71566 +/- 0.0043378 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.71566 @ 95%CL (1 toyMC)
median expected limit: r < 1.71566 @ 95%CL (1 toyMC)
   68% expected band : 1.71566 < r < 1.71566
   95% expected band : 1.71566 < r < 1.71566
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1550015652
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18361 +/- 0.00419741 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18361 @ 95%CL (1 toyMC)
median expected limit: r < 1.18361 @ 95%CL (1 toyMC)
   68% expected band : 1.18361 < r < 1.18361
   95% expected band : 1.18361 < r < 1.18361
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -604458516
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19011 +/- 0.00449001 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.19011 @ 95%CL (1 toyMC)
median expected limit: r < 1.19011 @ 95%CL (1 toyMC)
   68% expected band : 1.19011 < r < 1.19011
   95% expected band : 1.19011 < r < 1.19011
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -849502645
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18288 +/- 0.0041236 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18288 @ 95%CL (1 toyMC)
median expected limit: r < 1.18288 @ 95%CL (1 toyMC)
   68% expected band : 1.18288 < r < 1.18288
   95% expected band : 1.18288 < r < 1.18288
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1308564682
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17843 +/- 0.0046323 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17843 @ 95%CL (1 toyMC)
median expected limit: r < 1.17843 @ 95%CL (1 toyMC)
   68% expected band : 1.17843 < r < 1.17843
   95% expected band : 1.17843 < r < 1.17843
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1342827387
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17429 +/- 0.00489107 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17429 @ 95%CL (1 toyMC)
median expected limit: r < 1.17429 @ 95%CL (1 toyMC)
   68% expected band : 1.17429 < r < 1.17429
   95% expected band : 1.17429 < r < 1.17429
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1940852054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17347 +/- 0.00430172 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.17347 @ 95%CL (1 toyMC)
median expected limit: r < 1.17347 @ 95%CL (1 toyMC)
   68% expected band : 1.17347 < r < 1.17347
   95% expected band : 1.17347 < r < 1.17347
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -615522437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.00174 +/- 0.00507358 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.00174 @ 95%CL (1 toyMC)
median expected limit: r < 3.00174 @ 95%CL (1 toyMC)
   68% expected band : 3.00174 < r < 3.00174
   95% expected band : 3.00174 < r < 3.00174
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -436818988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18003 +/- 0.00468473 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18003 @ 95%CL (1 toyMC)
median expected limit: r < 1.18003 @ 95%CL (1 toyMC)
   68% expected band : 1.18003 < r < 1.18003
   95% expected band : 1.18003 < r < 1.18003
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -536858980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18213 +/- 0.00404009 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18213 @ 95%CL (1 toyMC)
median expected limit: r < 1.18213 @ 95%CL (1 toyMC)
   68% expected band : 1.18213 < r < 1.18213
   95% expected band : 1.18213 < r < 1.18213
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1461637636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16919 +/- 0.0055285 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.16919 @ 95%CL (1 toyMC)
median expected limit: r < 1.16919 @ 95%CL (1 toyMC)
   68% expected band : 1.16919 < r < 1.16919
   95% expected band : 1.16919 < r < 1.16919
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 878649919
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18514 +/- 0.00456309 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.18514 @ 95%CL (1 toyMC)
median expected limit: r < 1.18514 @ 95%CL (1 toyMC)
   68% expected band : 1.18514 < r < 1.18514
   95% expected band : 1.18514 < r < 1.18514
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -997972709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18273 +/- 0.00389045 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18273 @ 95%CL (1 toyMC)
median expected limit: r < 1.18273 @ 95%CL (1 toyMC)
   68% expected band : 1.18273 < r < 1.18273
   95% expected band : 1.18273 < r < 1.18273
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1977481261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20623 +/- 0.00361522 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.20623 @ 95%CL (1 toyMC)
median expected limit: r < 1.20623 @ 95%CL (1 toyMC)
   68% expected band : 1.20623 < r < 1.20623
   95% expected band : 1.20623 < r < 1.20623
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1056763281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17779 +/- 0.00466027 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.17779 @ 95%CL (1 toyMC)
median expected limit: r < 1.17779 @ 95%CL (1 toyMC)
   68% expected band : 1.17779 < r < 1.17779
   95% expected band : 1.17779 < r < 1.17779
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1397049957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18454 +/- 0.00403369 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18454 @ 95%CL (1 toyMC)
median expected limit: r < 1.18454 @ 95%CL (1 toyMC)
   68% expected band : 1.18454 < r < 1.18454
   95% expected band : 1.18454 < r < 1.18454
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1827196620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78655 +/- 0.00483426 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.78655 @ 95%CL (1 toyMC)
median expected limit: r < 1.78655 @ 95%CL (1 toyMC)
   68% expected band : 1.78655 < r < 1.78655
   95% expected band : 1.78655 < r < 1.78655
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 230284302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18364 +/- 0.00461074 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18364 @ 95%CL (1 toyMC)
median expected limit: r < 1.18364 @ 95%CL (1 toyMC)
   68% expected band : 1.18364 < r < 1.18364
   95% expected band : 1.18364 < r < 1.18364
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 172354736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1882 +/- 0.00400535 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.1882 @ 95%CL (1 toyMC)
median expected limit: r < 1.1882 @ 95%CL (1 toyMC)
   68% expected band : 1.1882 < r < 1.1882
   95% expected band : 1.1882 < r < 1.1882
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 551342888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18235 +/- 0.00452727 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18235 @ 95%CL (1 toyMC)
median expected limit: r < 1.18235 @ 95%CL (1 toyMC)
   68% expected band : 1.18235 < r < 1.18235
   95% expected band : 1.18235 < r < 1.18235
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1790911947
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17964 +/- 0.00399947 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.17964 @ 95%CL (1 toyMC)
median expected limit: r < 1.17964 @ 95%CL (1 toyMC)
   68% expected band : 1.17964 < r < 1.17964
   95% expected band : 1.17964 < r < 1.17964
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 266975624
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18355 +/- 0.00458614 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.18355 @ 95%CL (1 toyMC)
median expected limit: r < 1.18355 @ 95%CL (1 toyMC)
   68% expected band : 1.18355 < r < 1.18355
   95% expected band : 1.18355 < r < 1.18355
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -569909453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19038 +/- 0.00446555 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.19038 @ 95%CL (1 toyMC)
median expected limit: r < 1.19038 @ 95%CL (1 toyMC)
   68% expected band : 1.19038 < r < 1.19038
   95% expected band : 1.19038 < r < 1.19038
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1013136319.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1030949900.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1036546860.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1076268541.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1227903856.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-1291985454.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1394576549.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1397049957.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1435026693.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1461637636.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-150988564.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-152906513.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1553512659.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1574504946.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1593015143.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1605334321.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-162745747.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1693116115.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1699494266.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-1708538832.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1717284474.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1727274127.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1737002372.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-1958695729.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-1970492057.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-1983757648.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-1999225720.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-2038137807.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-2047278503.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-2068944851.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-241313264.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-245877003.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-266144242.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-278982425.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-292406915.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-410987939.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-436818988.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-447443351.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-465388988.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-474077399.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-480276262.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-527711447.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-528730244.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-536858980.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-566827138.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-569909453.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-604458516.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-608715504.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-615522437.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.-666501427.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.-735862782.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.-774101889.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.-849502645.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.-965624254.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.-997972709.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.1056763281.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1223611011.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1308564682.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1329619324.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.1329726842.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1342827387.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.136709919.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1465747306.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1521523016.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1550015652.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.172354736.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.177425958.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1790911947.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1791566551.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1827196620.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1917419705.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.1937951461.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1940852054.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1977481261.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.2007228593.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.2037727681.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.205858973.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.2089157625.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.217061719.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.230284302.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.238219885.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.264832915.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.266975624.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.272547604.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.286995242.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.322048353.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.412423621.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.454850954.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.459094143.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.491591156.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.551342888.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.69157382.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.748101022.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.7950019.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.801099427.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.842819060.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.848099378.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.878649919.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.879677541.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.88464258.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1368570623
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26442 +/- 0.00443875 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26442 @ 95%CL (1 toyMC)
median expected limit: r < 1.26442 @ 95%CL (1 toyMC)
   68% expected band : 1.26442 < r < 1.26442
   95% expected band : 1.26442 < r < 1.26442
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1399135722
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2464 +/- 0.00385343 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.2464 @ 95%CL (1 toyMC)
median expected limit: r < 1.2464 @ 95%CL (1 toyMC)
   68% expected band : 1.2464 < r < 1.2464
   95% expected band : 1.2464 < r < 1.2464
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -778380325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.93719 +/- 0.00473546 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.93719 @ 95%CL (1 toyMC)
median expected limit: r < 1.93719 @ 95%CL (1 toyMC)
   68% expected band : 1.93719 < r < 1.93719
   95% expected band : 1.93719 < r < 1.93719
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2055684052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26907 +/- 0.00484351 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26907 @ 95%CL (1 toyMC)
median expected limit: r < 1.26907 @ 95%CL (1 toyMC)
   68% expected band : 1.26907 < r < 1.26907
   95% expected band : 1.26907 < r < 1.26907
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1781300794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26486 +/- 0.00494446 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26486 @ 95%CL (1 toyMC)
median expected limit: r < 1.26486 @ 95%CL (1 toyMC)
   68% expected band : 1.26486 < r < 1.26486
   95% expected band : 1.26486 < r < 1.26486
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1998212009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26482 +/- 0.00422181 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26482 @ 95%CL (1 toyMC)
median expected limit: r < 1.26482 @ 95%CL (1 toyMC)
   68% expected band : 1.26482 < r < 1.26482
   95% expected band : 1.26482 < r < 1.26482
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 915578861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84669 +/- 0.0042663 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.84669 @ 95%CL (1 toyMC)
median expected limit: r < 1.84669 @ 95%CL (1 toyMC)
   68% expected band : 1.84669 < r < 1.84669
   95% expected band : 1.84669 < r < 1.84669
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1324479165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26949 +/- 0.0043279 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26949 @ 95%CL (1 toyMC)
median expected limit: r < 1.26949 @ 95%CL (1 toyMC)
   68% expected band : 1.26949 < r < 1.26949
   95% expected band : 1.26949 < r < 1.26949
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1525092695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24434 +/- 0.00502682 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24434 @ 95%CL (1 toyMC)
median expected limit: r < 1.24434 @ 95%CL (1 toyMC)
   68% expected band : 1.24434 < r < 1.24434
   95% expected band : 1.24434 < r < 1.24434
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -521598573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25781 +/- 0.00413413 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.25781 @ 95%CL (1 toyMC)
median expected limit: r < 1.25781 @ 95%CL (1 toyMC)
   68% expected band : 1.25781 < r < 1.25781
   95% expected band : 1.25781 < r < 1.25781
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1026916220
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24624 +/- 0.00431711 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24624 @ 95%CL (1 toyMC)
median expected limit: r < 1.24624 @ 95%CL (1 toyMC)
   68% expected band : 1.24624 < r < 1.24624
   95% expected band : 1.24624 < r < 1.24624
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1992914962
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25244 +/- 0.00436209 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 1.25244 @ 95%CL (1 toyMC)
median expected limit: r < 1.25244 @ 95%CL (1 toyMC)
   68% expected band : 1.25244 < r < 1.25244
   95% expected band : 1.25244 < r < 1.25244
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 875844394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25673 +/- 0.00384459 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.25673 @ 95%CL (1 toyMC)
median expected limit: r < 1.25673 @ 95%CL (1 toyMC)
   68% expected band : 1.25673 < r < 1.25673
   95% expected band : 1.25673 < r < 1.25673
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 925759344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25435 +/- 0.00539491 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25435 @ 95%CL (1 toyMC)
median expected limit: r < 1.25435 @ 95%CL (1 toyMC)
   68% expected band : 1.25435 < r < 1.25435
   95% expected band : 1.25435 < r < 1.25435
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1014326883
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26213 +/- 0.00585207 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26213 @ 95%CL (1 toyMC)
median expected limit: r < 1.26213 @ 95%CL (1 toyMC)
   68% expected band : 1.26213 < r < 1.26213
   95% expected band : 1.26213 < r < 1.26213
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1833416796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25799 +/- 0.0057772 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25799 @ 95%CL (1 toyMC)
median expected limit: r < 1.25799 @ 95%CL (1 toyMC)
   68% expected band : 1.25799 < r < 1.25799
   95% expected band : 1.25799 < r < 1.25799
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -327408944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25414 +/- 0.00480199 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.25414 @ 95%CL (1 toyMC)
median expected limit: r < 1.25414 @ 95%CL (1 toyMC)
   68% expected band : 1.25414 < r < 1.25414
   95% expected band : 1.25414 < r < 1.25414
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -88215423
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24379 +/- 0.00326473 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.24379 @ 95%CL (1 toyMC)
median expected limit: r < 1.24379 @ 95%CL (1 toyMC)
   68% expected band : 1.24379 < r < 1.24379
   95% expected band : 1.24379 < r < 1.24379
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1780649702
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26219 +/- 0.00365994 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26219 @ 95%CL (1 toyMC)
median expected limit: r < 1.26219 @ 95%CL (1 toyMC)
   68% expected band : 1.26219 < r < 1.26219
   95% expected band : 1.26219 < r < 1.26219
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 722964953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25313 +/- 0.00390916 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.25313 @ 95%CL (1 toyMC)
median expected limit: r < 1.25313 @ 95%CL (1 toyMC)
   68% expected band : 1.25313 < r < 1.25313
   95% expected band : 1.25313 < r < 1.25313
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1156067068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26455 +/- 0.00391402 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26455 @ 95%CL (1 toyMC)
median expected limit: r < 1.26455 @ 95%CL (1 toyMC)
   68% expected band : 1.26455 < r < 1.26455
   95% expected band : 1.26455 < r < 1.26455
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1831525944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26179 +/- 0.00482527 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26179 @ 95%CL (1 toyMC)
median expected limit: r < 1.26179 @ 95%CL (1 toyMC)
   68% expected band : 1.26179 < r < 1.26179
   95% expected band : 1.26179 < r < 1.26179
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -769610118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23466 +/- 0.00339331 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.23466 @ 95%CL (1 toyMC)
median expected limit: r < 1.23466 @ 95%CL (1 toyMC)
   68% expected band : 1.23466 < r < 1.23466
   95% expected band : 1.23466 < r < 1.23466
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1583989261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84487 +/- 0.00530523 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.84487 @ 95%CL (1 toyMC)
median expected limit: r < 1.84487 @ 95%CL (1 toyMC)
   68% expected band : 1.84487 < r < 1.84487
   95% expected band : 1.84487 < r < 1.84487
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1506335220
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.96148 +/- 0.00504874 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.96148 @ 95%CL (1 toyMC)
median expected limit: r < 1.96148 @ 95%CL (1 toyMC)
   68% expected band : 1.96148 < r < 1.96148
   95% expected band : 1.96148 < r < 1.96148
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -236812389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2505 +/- 0.00426563 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.2505 @ 95%CL (1 toyMC)
median expected limit: r < 1.2505 @ 95%CL (1 toyMC)
   68% expected band : 1.2505 < r < 1.2505
   95% expected band : 1.2505 < r < 1.2505
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 589928134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26772 +/- 0.00409387 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26772 @ 95%CL (1 toyMC)
median expected limit: r < 1.26772 @ 95%CL (1 toyMC)
   68% expected band : 1.26772 < r < 1.26772
   95% expected band : 1.26772 < r < 1.26772
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -514379519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24312 +/- 0.00463289 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24312 @ 95%CL (1 toyMC)
median expected limit: r < 1.24312 @ 95%CL (1 toyMC)
   68% expected band : 1.24312 < r < 1.24312
   95% expected band : 1.24312 < r < 1.24312
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1926183344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25435 +/- 0.00380849 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25435 @ 95%CL (1 toyMC)
median expected limit: r < 1.25435 @ 95%CL (1 toyMC)
   68% expected band : 1.25435 < r < 1.25435
   95% expected band : 1.25435 < r < 1.25435
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1511156919
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25106 +/- 0.00419463 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25106 @ 95%CL (1 toyMC)
median expected limit: r < 1.25106 @ 95%CL (1 toyMC)
   68% expected band : 1.25106 < r < 1.25106
   95% expected band : 1.25106 < r < 1.25106
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1041360344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24659 +/- 0.00501499 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24659 @ 95%CL (1 toyMC)
median expected limit: r < 1.24659 @ 95%CL (1 toyMC)
   68% expected band : 1.24659 < r < 1.24659
   95% expected band : 1.24659 < r < 1.24659
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -535844673
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26085 +/- 0.00464871 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26085 @ 95%CL (1 toyMC)
median expected limit: r < 1.26085 @ 95%CL (1 toyMC)
   68% expected band : 1.26085 < r < 1.26085
   95% expected band : 1.26085 < r < 1.26085
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1965350304
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24509 +/- 0.00564 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24509 @ 95%CL (1 toyMC)
median expected limit: r < 1.24509 @ 95%CL (1 toyMC)
   68% expected band : 1.24509 < r < 1.24509
   95% expected band : 1.24509 < r < 1.24509
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1703711693
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23811 +/- 0.00380654 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.23811 @ 95%CL (1 toyMC)
median expected limit: r < 1.23811 @ 95%CL (1 toyMC)
   68% expected band : 1.23811 < r < 1.23811
   95% expected band : 1.23811 < r < 1.23811
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1304536842
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26387 +/- 0.00471071 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26387 @ 95%CL (1 toyMC)
median expected limit: r < 1.26387 @ 95%CL (1 toyMC)
   68% expected band : 1.26387 < r < 1.26387
   95% expected band : 1.26387 < r < 1.26387
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1317574567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25649 +/- 0.00484965 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25649 @ 95%CL (1 toyMC)
median expected limit: r < 1.25649 @ 95%CL (1 toyMC)
   68% expected band : 1.25649 < r < 1.25649
   95% expected band : 1.25649 < r < 1.25649
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1076295318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26304 +/- 0.00372567 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26304 @ 95%CL (1 toyMC)
median expected limit: r < 1.26304 @ 95%CL (1 toyMC)
   68% expected band : 1.26304 < r < 1.26304
   95% expected band : 1.26304 < r < 1.26304
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -825427483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26128 +/- 0.00456046 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26128 @ 95%CL (1 toyMC)
median expected limit: r < 1.26128 @ 95%CL (1 toyMC)
   68% expected band : 1.26128 < r < 1.26128
   95% expected band : 1.26128 < r < 1.26128
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -264514197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24974 +/- 0.00446974 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.24974 @ 95%CL (1 toyMC)
median expected limit: r < 1.24974 @ 95%CL (1 toyMC)
   68% expected band : 1.24974 < r < 1.24974
   95% expected band : 1.24974 < r < 1.24974
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1539844241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24972 +/- 0.00418176 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24972 @ 95%CL (1 toyMC)
median expected limit: r < 1.24972 @ 95%CL (1 toyMC)
   68% expected band : 1.24972 < r < 1.24972
   95% expected band : 1.24972 < r < 1.24972
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1831454782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24796 +/- 0.00464545 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24796 @ 95%CL (1 toyMC)
median expected limit: r < 1.24796 @ 95%CL (1 toyMC)
   68% expected band : 1.24796 < r < 1.24796
   95% expected band : 1.24796 < r < 1.24796
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 167172208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25867 +/- 0.00498952 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25867 @ 95%CL (1 toyMC)
median expected limit: r < 1.25867 @ 95%CL (1 toyMC)
   68% expected band : 1.25867 < r < 1.25867
   95% expected band : 1.25867 < r < 1.25867
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1754092323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26373 +/- 0.00386133 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26373 @ 95%CL (1 toyMC)
median expected limit: r < 1.26373 @ 95%CL (1 toyMC)
   68% expected band : 1.26373 < r < 1.26373
   95% expected band : 1.26373 < r < 1.26373
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1787283417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24695 +/- 0.00405432 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24695 @ 95%CL (1 toyMC)
median expected limit: r < 1.24695 @ 95%CL (1 toyMC)
   68% expected band : 1.24695 < r < 1.24695
   95% expected band : 1.24695 < r < 1.24695
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 697912299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26108 +/- 0.00429978 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26108 @ 95%CL (1 toyMC)
median expected limit: r < 1.26108 @ 95%CL (1 toyMC)
   68% expected band : 1.26108 < r < 1.26108
   95% expected band : 1.26108 < r < 1.26108
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1911608835
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24392 +/- 0.00414719 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.24392 @ 95%CL (1 toyMC)
median expected limit: r < 1.24392 @ 95%CL (1 toyMC)
   68% expected band : 1.24392 < r < 1.24392
   95% expected band : 1.24392 < r < 1.24392
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1400963328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26103 +/- 0.00413133 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26103 @ 95%CL (1 toyMC)
median expected limit: r < 1.26103 @ 95%CL (1 toyMC)
   68% expected band : 1.26103 < r < 1.26103
   95% expected band : 1.26103 < r < 1.26103
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -180527120
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26369 +/- 0.00448349 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26369 @ 95%CL (1 toyMC)
median expected limit: r < 1.26369 @ 95%CL (1 toyMC)
   68% expected band : 1.26369 < r < 1.26369
   95% expected band : 1.26369 < r < 1.26369
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -980891606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24645 +/- 0.00383207 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.24645 @ 95%CL (1 toyMC)
median expected limit: r < 1.24645 @ 95%CL (1 toyMC)
   68% expected band : 1.24645 < r < 1.24645
   95% expected band : 1.24645 < r < 1.24645
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 297714264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26477 +/- 0.00466464 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26477 @ 95%CL (1 toyMC)
median expected limit: r < 1.26477 @ 95%CL (1 toyMC)
   68% expected band : 1.26477 < r < 1.26477
   95% expected band : 1.26477 < r < 1.26477
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1348113968
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25691 +/- 0.00417267 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25691 @ 95%CL (1 toyMC)
median expected limit: r < 1.25691 @ 95%CL (1 toyMC)
   68% expected band : 1.25691 < r < 1.25691
   95% expected band : 1.25691 < r < 1.25691
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1670295958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24528 +/- 0.00397174 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24528 @ 95%CL (1 toyMC)
median expected limit: r < 1.24528 @ 95%CL (1 toyMC)
   68% expected band : 1.24528 < r < 1.24528
   95% expected band : 1.24528 < r < 1.24528
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -747336023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25123 +/- 0.00436692 @ 95% CL (100 tries)
Done in 0.11 min (cpu), 0.11 min (real)
mean   expected limit: r < 1.25123 @ 95%CL (1 toyMC)
median expected limit: r < 1.25123 @ 95%CL (1 toyMC)
   68% expected band : 1.25123 < r < 1.25123
   95% expected band : 1.25123 < r < 1.25123
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 555235834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26153 +/- 0.00467654 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26153 @ 95%CL (1 toyMC)
median expected limit: r < 1.26153 @ 95%CL (1 toyMC)
   68% expected band : 1.26153 < r < 1.26153
   95% expected band : 1.26153 < r < 1.26153
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 123843556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25816 +/- 0.00419211 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25816 @ 95%CL (1 toyMC)
median expected limit: r < 1.25816 @ 95%CL (1 toyMC)
   68% expected band : 1.25816 < r < 1.25816
   95% expected band : 1.25816 < r < 1.25816
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 194114465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25217 +/- 0.0041389 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.25217 @ 95%CL (1 toyMC)
median expected limit: r < 1.25217 @ 95%CL (1 toyMC)
   68% expected band : 1.25217 < r < 1.25217
   95% expected band : 1.25217 < r < 1.25217
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1489094097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25541 +/- 0.00413526 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25541 @ 95%CL (1 toyMC)
median expected limit: r < 1.25541 @ 95%CL (1 toyMC)
   68% expected band : 1.25541 < r < 1.25541
   95% expected band : 1.25541 < r < 1.25541
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1858573547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25738 +/- 0.00446774 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25738 @ 95%CL (1 toyMC)
median expected limit: r < 1.25738 @ 95%CL (1 toyMC)
   68% expected band : 1.25738 < r < 1.25738
   95% expected band : 1.25738 < r < 1.25738
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -284471806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25429 +/- 0.00533249 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25429 @ 95%CL (1 toyMC)
median expected limit: r < 1.25429 @ 95%CL (1 toyMC)
   68% expected band : 1.25429 < r < 1.25429
   95% expected band : 1.25429 < r < 1.25429
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 256985194
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.87236 +/- 0.00565645 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.87236 @ 95%CL (1 toyMC)
median expected limit: r < 1.87236 @ 95%CL (1 toyMC)
   68% expected band : 1.87236 < r < 1.87236
   95% expected band : 1.87236 < r < 1.87236
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1888281435
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25948 +/- 0.00499479 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25948 @ 95%CL (1 toyMC)
median expected limit: r < 1.25948 @ 95%CL (1 toyMC)
   68% expected band : 1.25948 < r < 1.25948
   95% expected band : 1.25948 < r < 1.25948
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1163781078
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25432 +/- 0.00379368 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.25432 @ 95%CL (1 toyMC)
median expected limit: r < 1.25432 @ 95%CL (1 toyMC)
   68% expected band : 1.25432 < r < 1.25432
   95% expected band : 1.25432 < r < 1.25432
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1848666641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26128 +/- 0.00493898 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26128 @ 95%CL (1 toyMC)
median expected limit: r < 1.26128 @ 95%CL (1 toyMC)
   68% expected band : 1.26128 < r < 1.26128
   95% expected band : 1.26128 < r < 1.26128
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -423472559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25406 +/- 0.00467539 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25406 @ 95%CL (1 toyMC)
median expected limit: r < 1.25406 @ 95%CL (1 toyMC)
   68% expected band : 1.25406 < r < 1.25406
   95% expected band : 1.25406 < r < 1.25406
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 899372438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.83747 +/- 0.00501397 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.83747 @ 95%CL (1 toyMC)
median expected limit: r < 1.83747 @ 95%CL (1 toyMC)
   68% expected band : 1.83747 < r < 1.83747
   95% expected band : 1.83747 < r < 1.83747
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1742815580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25041 +/- 0.00483102 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25041 @ 95%CL (1 toyMC)
median expected limit: r < 1.25041 @ 95%CL (1 toyMC)
   68% expected band : 1.25041 < r < 1.25041
   95% expected band : 1.25041 < r < 1.25041
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1826932775
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26835 +/- 0.00469659 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26835 @ 95%CL (1 toyMC)
median expected limit: r < 1.26835 @ 95%CL (1 toyMC)
   68% expected band : 1.26835 < r < 1.26835
   95% expected band : 1.26835 < r < 1.26835
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 354798507
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25089 +/- 0.00464903 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25089 @ 95%CL (1 toyMC)
median expected limit: r < 1.25089 @ 95%CL (1 toyMC)
   68% expected band : 1.25089 < r < 1.25089
   95% expected band : 1.25089 < r < 1.25089
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -562548992
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23613 +/- 0.0041825 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.23613 @ 95%CL (1 toyMC)
median expected limit: r < 1.23613 @ 95%CL (1 toyMC)
   68% expected band : 1.23613 < r < 1.23613
   95% expected band : 1.23613 < r < 1.23613
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 488336024
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26813 +/- 0.00409122 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26813 @ 95%CL (1 toyMC)
median expected limit: r < 1.26813 @ 95%CL (1 toyMC)
   68% expected band : 1.26813 < r < 1.26813
   95% expected band : 1.26813 < r < 1.26813
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1064812264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24048 +/- 0.00473464 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24048 @ 95%CL (1 toyMC)
median expected limit: r < 1.24048 @ 95%CL (1 toyMC)
   68% expected band : 1.24048 < r < 1.24048
   95% expected band : 1.24048 < r < 1.24048
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1337393846
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24971 +/- 0.00385396 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.24971 @ 95%CL (1 toyMC)
median expected limit: r < 1.24971 @ 95%CL (1 toyMC)
   68% expected band : 1.24971 < r < 1.24971
   95% expected band : 1.24971 < r < 1.24971
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 864974537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26036 +/- 0.00406709 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26036 @ 95%CL (1 toyMC)
median expected limit: r < 1.26036 @ 95%CL (1 toyMC)
   68% expected band : 1.26036 < r < 1.26036
   95% expected band : 1.26036 < r < 1.26036
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -435635970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81537 +/- 0.00515373 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.81537 @ 95%CL (1 toyMC)
median expected limit: r < 1.81537 @ 95%CL (1 toyMC)
   68% expected band : 1.81537 < r < 1.81537
   95% expected band : 1.81537 < r < 1.81537
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -566188504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25336 +/- 0.00362688 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25336 @ 95%CL (1 toyMC)
median expected limit: r < 1.25336 @ 95%CL (1 toyMC)
   68% expected band : 1.25336 < r < 1.25336
   95% expected band : 1.25336 < r < 1.25336
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 609760002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25016 +/- 0.00487947 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25016 @ 95%CL (1 toyMC)
median expected limit: r < 1.25016 @ 95%CL (1 toyMC)
   68% expected band : 1.25016 < r < 1.25016
   95% expected band : 1.25016 < r < 1.25016
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -916518479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27045 +/- 0.00466011 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.27045 @ 95%CL (1 toyMC)
median expected limit: r < 1.27045 @ 95%CL (1 toyMC)
   68% expected band : 1.27045 < r < 1.27045
   95% expected band : 1.27045 < r < 1.27045
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1551691637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26068 +/- 0.00481187 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26068 @ 95%CL (1 toyMC)
median expected limit: r < 1.26068 @ 95%CL (1 toyMC)
   68% expected band : 1.26068 < r < 1.26068
   95% expected band : 1.26068 < r < 1.26068
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 458085179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26916 +/- 0.00442539 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26916 @ 95%CL (1 toyMC)
median expected limit: r < 1.26916 @ 95%CL (1 toyMC)
   68% expected band : 1.26916 < r < 1.26916
   95% expected band : 1.26916 < r < 1.26916
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1673162755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25054 +/- 0.00474223 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25054 @ 95%CL (1 toyMC)
median expected limit: r < 1.25054 @ 95%CL (1 toyMC)
   68% expected band : 1.25054 < r < 1.25054
   95% expected band : 1.25054 < r < 1.25054
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -334074547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.94264 +/- 0.00532906 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.94264 @ 95%CL (1 toyMC)
median expected limit: r < 1.94264 @ 95%CL (1 toyMC)
   68% expected band : 1.94264 < r < 1.94264
   95% expected band : 1.94264 < r < 1.94264
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -949316633
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91617 +/- 0.00426251 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.91617 @ 95%CL (1 toyMC)
median expected limit: r < 1.91617 @ 95%CL (1 toyMC)
   68% expected band : 1.91617 < r < 1.91617
   95% expected band : 1.91617 < r < 1.91617
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -69986678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.86147 +/- 0.00434442 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.86147 @ 95%CL (1 toyMC)
median expected limit: r < 1.86147 @ 95%CL (1 toyMC)
   68% expected band : 1.86147 < r < 1.86147
   95% expected band : 1.86147 < r < 1.86147
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -832487646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24641 +/- 0.00472559 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24641 @ 95%CL (1 toyMC)
median expected limit: r < 1.24641 @ 95%CL (1 toyMC)
   68% expected band : 1.24641 < r < 1.24641
   95% expected band : 1.24641 < r < 1.24641
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 338196208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2481 +/- 0.00448959 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.2481 @ 95%CL (1 toyMC)
median expected limit: r < 1.2481 @ 95%CL (1 toyMC)
   68% expected band : 1.2481 < r < 1.2481
   95% expected band : 1.2481 < r < 1.2481
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 873855983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24256 +/- 0.00433038 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24256 @ 95%CL (1 toyMC)
median expected limit: r < 1.24256 @ 95%CL (1 toyMC)
   68% expected band : 1.24256 < r < 1.24256
   95% expected band : 1.24256 < r < 1.24256
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -714745054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24401 +/- 0.00489403 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24401 @ 95%CL (1 toyMC)
median expected limit: r < 1.24401 @ 95%CL (1 toyMC)
   68% expected band : 1.24401 < r < 1.24401
   95% expected band : 1.24401 < r < 1.24401
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1410869136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24656 +/- 0.00391845 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24656 @ 95%CL (1 toyMC)
median expected limit: r < 1.24656 @ 95%CL (1 toyMC)
   68% expected band : 1.24656 < r < 1.24656
   95% expected band : 1.24656 < r < 1.24656
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -733341474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25224 +/- 0.00421233 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25224 @ 95%CL (1 toyMC)
median expected limit: r < 1.25224 @ 95%CL (1 toyMC)
   68% expected band : 1.25224 < r < 1.25224
   95% expected band : 1.25224 < r < 1.25224
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 217911088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23657 +/- 0.00470366 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.23657 @ 95%CL (1 toyMC)
median expected limit: r < 1.23657 @ 95%CL (1 toyMC)
   68% expected band : 1.23657 < r < 1.23657
   95% expected band : 1.23657 < r < 1.23657
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 646472235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24447 +/- 0.00403968 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24447 @ 95%CL (1 toyMC)
median expected limit: r < 1.24447 @ 95%CL (1 toyMC)
   68% expected band : 1.24447 < r < 1.24447
   95% expected band : 1.24447 < r < 1.24447
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -123874759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25708 +/- 0.0041521 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25708 @ 95%CL (1 toyMC)
median expected limit: r < 1.25708 @ 95%CL (1 toyMC)
   68% expected band : 1.25708 < r < 1.25708
   95% expected band : 1.25708 < r < 1.25708
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -636211306
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26024 +/- 0.00443723 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.26024 @ 95%CL (1 toyMC)
median expected limit: r < 1.26024 @ 95%CL (1 toyMC)
   68% expected band : 1.26024 < r < 1.26024
   95% expected band : 1.26024 < r < 1.26024
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2125758208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.95032 +/- 0.0044701 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.95032 @ 95%CL (1 toyMC)
median expected limit: r < 1.95032 @ 95%CL (1 toyMC)
   68% expected band : 1.95032 < r < 1.95032
   95% expected band : 1.95032 < r < 1.95032
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1000722009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25195 +/- 0.00341883 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.25195 @ 95%CL (1 toyMC)
median expected limit: r < 1.25195 @ 95%CL (1 toyMC)
   68% expected band : 1.25195 < r < 1.25195
   95% expected band : 1.25195 < r < 1.25195
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -471319639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2566 +/- 0.00450779 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.2566 @ 95%CL (1 toyMC)
median expected limit: r < 1.2566 @ 95%CL (1 toyMC)
   68% expected band : 1.2566 < r < 1.2566
   95% expected band : 1.2566 < r < 1.2566
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1961433049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26686 +/- 0.0043641 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.26686 @ 95%CL (1 toyMC)
median expected limit: r < 1.26686 @ 95%CL (1 toyMC)
   68% expected band : 1.26686 < r < 1.26686
   95% expected band : 1.26686 < r < 1.26686
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -956180903
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2518 +/- 0.00404901 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.2518 @ 95%CL (1 toyMC)
median expected limit: r < 1.2518 @ 95%CL (1 toyMC)
   68% expected band : 1.2518 < r < 1.2518
   95% expected band : 1.2518 < r < 1.2518
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1433639009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24731 +/- 0.00468075 @ 95% CL (100 tries)
Done in 0.13 min (cpu), 0.13 min (real)
mean   expected limit: r < 1.24731 @ 95%CL (1 toyMC)
median expected limit: r < 1.24731 @ 95%CL (1 toyMC)
   68% expected band : 1.24731 < r < 1.24731
   95% expected band : 1.24731 < r < 1.24731
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1718785269
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24084 +/- 0.0043762 @ 95% CL (100 tries)
Done in 0.12 min (cpu), 0.12 min (real)
mean   expected limit: r < 1.24084 @ 95%CL (1 toyMC)
median expected limit: r < 1.24084 @ 95%CL (1 toyMC)
   68% expected band : 1.24084 < r < 1.24084
   95% expected band : 1.24084 < r < 1.24084
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine6000.MarkovChainMC.mH6000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH6000.-1000722009.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH6000.-1014326883.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH6000.-1026916220.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH6000.-1156067068.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH6000.-1163781078.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH6000.-123874759.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH6000.-1317574567.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH6000.-1324479165.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH6000.-1368570623.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH6000.-1399135722.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH6000.-1525092695.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH6000.-1539844241.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH6000.-1583989261.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH6000.-1673162755.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH6000.-1703711693.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH6000.-1718785269.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH6000.-1780649702.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH6000.-1781300794.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH6000.-1787283417.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH6000.-180527120.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH6000.-1831454782.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH6000.-1831525944.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH6000.-1833416796.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH6000.-1848666641.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH6000.-1911608835.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH6000.-1926183344.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH6000.-1965350304.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH6000.-1992914962.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH6000.-2055684052.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH6000.-236812389.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH6000.-264514197.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH6000.-284471806.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH6000.-327408944.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH6000.-334074547.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH6000.-423472559.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH6000.-435635970.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH6000.-471319639.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH6000.-514379519.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH6000.-521598573.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH6000.-535844673.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH6000.-562548992.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH6000.-566188504.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH6000.-636211306.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH6000.-69986678.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH6000.-714745054.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH6000.-733341474.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH6000.-747336023.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH6000.-769610118.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH6000.-778380325.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH6000.-825427483.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH6000.-832487646.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH6000.-88215423.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH6000.-916518479.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH6000.-949316633.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH6000.-956180903.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH6000.-980891606.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH6000.1041360344.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH6000.1064812264.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH6000.1076295318.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH6000.123843556.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH6000.1304536842.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH6000.1337393846.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH6000.1348113968.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH6000.1400963328.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH6000.1410869136.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH6000.1433639009.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH6000.1489094097.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH6000.1506335220.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH6000.1511156919.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH6000.1551691637.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH6000.1670295958.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH6000.167172208.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH6000.1742815580.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH6000.1754092323.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH6000.1826932775.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH6000.1858573547.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH6000.1888281435.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH6000.194114465.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH6000.1961433049.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH6000.1998212009.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH6000.2125758208.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH6000.217911088.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH6000.256985194.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH6000.297714264.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH6000.338196208.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH6000.354798507.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH6000.458085179.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH6000.488336024.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH6000.555235834.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH6000.589928134.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH6000.609760002.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH6000.646472235.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH6000.697912299.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH6000.722964953.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH6000.864974537.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH6000.873855983.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH6000.875844394.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH6000.899372438.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH6000.915578861.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH6000.925759344.root
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/
hadd Target path: higgsCombine6000.MarkovChainMC.mH6000.root:/toys
