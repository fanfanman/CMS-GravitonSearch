 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1714698617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.9516 +/- 0.0082887 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.9516 @ 95%CL (1 toyMC)
median expected limit: r < 1.9516 @ 95%CL (1 toyMC)
   68% expected band : 1.9516 < r < 1.9516
   95% expected band : 1.9516 < r < 1.9516
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2033675085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71749 +/- 0.00575987 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.71749 @ 95%CL (1 toyMC)
median expected limit: r < 1.71749 @ 95%CL (1 toyMC)
   68% expected band : 1.71749 < r < 1.71749
   95% expected band : 1.71749 < r < 1.71749
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 942294284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.97843 +/- 0.00634776 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.97843 @ 95%CL (1 toyMC)
median expected limit: r < 1.97843 @ 95%CL (1 toyMC)
   68% expected band : 1.97843 < r < 1.97843
   95% expected band : 1.97843 < r < 1.97843
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1012007972
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.65775 +/- 0.00853996 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.65775 @ 95%CL (1 toyMC)
median expected limit: r < 4.65775 @ 95%CL (1 toyMC)
   68% expected band : 4.65775 < r < 4.65775
   95% expected band : 4.65775 < r < 4.65775
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 495093816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.0431 +/- 0.00737366 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.0431 @ 95%CL (1 toyMC)
median expected limit: r < 2.0431 @ 95%CL (1 toyMC)
   68% expected band : 2.0431 < r < 2.0431
   95% expected band : 2.0431 < r < 2.0431
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1924695510
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63147 +/- 0.00790333 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.63147 @ 95%CL (1 toyMC)
median expected limit: r < 2.63147 @ 95%CL (1 toyMC)
   68% expected band : 2.63147 < r < 2.63147
   95% expected band : 2.63147 < r < 2.63147
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 622837114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.3875 +/- 0.00673648 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.3875 @ 95%CL (1 toyMC)
median expected limit: r < 2.3875 @ 95%CL (1 toyMC)
   68% expected band : 2.3875 < r < 2.3875
   95% expected band : 2.3875 < r < 2.3875
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2109604705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64651 +/- 0.00732843 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.64651 @ 95%CL (1 toyMC)
median expected limit: r < 2.64651 @ 95%CL (1 toyMC)
   68% expected band : 2.64651 < r < 2.64651
   95% expected band : 2.64651 < r < 2.64651
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1953981565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59342 +/- 0.00592962 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.59342 @ 95%CL (1 toyMC)
median expected limit: r < 1.59342 @ 95%CL (1 toyMC)
   68% expected band : 1.59342 < r < 1.59342
   95% expected band : 1.59342 < r < 1.59342
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1741302824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10375 +/- 0.00592804 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.10375 @ 95%CL (1 toyMC)
median expected limit: r < 2.10375 @ 95%CL (1 toyMC)
   68% expected band : 2.10375 < r < 2.10375
   95% expected band : 2.10375 < r < 2.10375
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1605119589
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45808 +/- 0.00470044 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.45808 @ 95%CL (1 toyMC)
median expected limit: r < 1.45808 @ 95%CL (1 toyMC)
   68% expected band : 1.45808 < r < 1.45808
   95% expected band : 1.45808 < r < 1.45808
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1813192634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55526 +/- 0.00467689 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.55526 @ 95%CL (1 toyMC)
median expected limit: r < 1.55526 @ 95%CL (1 toyMC)
   68% expected band : 1.55526 < r < 1.55526
   95% expected band : 1.55526 < r < 1.55526
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1482505001
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16524 +/- 0.00741735 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.16524 @ 95%CL (1 toyMC)
median expected limit: r < 3.16524 @ 95%CL (1 toyMC)
   68% expected band : 3.16524 < r < 3.16524
   95% expected band : 3.16524 < r < 3.16524
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1593959638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.30454 +/- 0.00566887 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.30454 @ 95%CL (1 toyMC)
median expected limit: r < 3.30454 @ 95%CL (1 toyMC)
   68% expected band : 3.30454 < r < 3.30454
   95% expected band : 3.30454 < r < 3.30454
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1601594238
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40006 +/- 0.00621105 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.40006 @ 95%CL (1 toyMC)
median expected limit: r < 2.40006 @ 95%CL (1 toyMC)
   68% expected band : 2.40006 < r < 2.40006
   95% expected band : 2.40006 < r < 2.40006
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1875066428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.22378 +/- 0.00727936 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.22378 @ 95%CL (1 toyMC)
median expected limit: r < 2.22378 @ 95%CL (1 toyMC)
   68% expected band : 2.22378 < r < 2.22378
   95% expected band : 2.22378 < r < 2.22378
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 789320502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53541 +/- 0.00610663 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.53541 @ 95%CL (1 toyMC)
median expected limit: r < 2.53541 @ 95%CL (1 toyMC)
   68% expected band : 2.53541 < r < 2.53541
   95% expected band : 2.53541 < r < 2.53541
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2140551658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.75433 +/- 0.00661939 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.75433 @ 95%CL (1 toyMC)
median expected limit: r < 1.75433 @ 95%CL (1 toyMC)
   68% expected band : 1.75433 < r < 1.75433
   95% expected band : 1.75433 < r < 1.75433
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -534719327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39889 +/- 0.00731176 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.39889 @ 95%CL (1 toyMC)
median expected limit: r < 2.39889 @ 95%CL (1 toyMC)
   68% expected band : 2.39889 < r < 2.39889
   95% expected band : 2.39889 < r < 2.39889
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2091991854
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.14172 +/- 0.00795413 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.14172 @ 95%CL (1 toyMC)
median expected limit: r < 3.14172 @ 95%CL (1 toyMC)
   68% expected band : 3.14172 < r < 3.14172
   95% expected band : 3.14172 < r < 3.14172
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1787469230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.84217 +/- 0.00638817 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.84217 @ 95%CL (1 toyMC)
median expected limit: r < 2.84217 @ 95%CL (1 toyMC)
   68% expected band : 2.84217 < r < 2.84217
   95% expected band : 2.84217 < r < 2.84217
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1563548486
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50607 +/- 0.00591964 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.50607 @ 95%CL (1 toyMC)
median expected limit: r < 2.50607 @ 95%CL (1 toyMC)
   68% expected band : 2.50607 < r < 2.50607
   95% expected band : 2.50607 < r < 2.50607
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -572201620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77791 +/- 0.00613407 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.77791 @ 95%CL (1 toyMC)
median expected limit: r < 1.77791 @ 95%CL (1 toyMC)
   68% expected band : 1.77791 < r < 1.77791
   95% expected band : 1.77791 < r < 1.77791
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2012177569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43204 +/- 0.00624008 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.43204 @ 95%CL (1 toyMC)
median expected limit: r < 2.43204 @ 95%CL (1 toyMC)
   68% expected band : 2.43204 < r < 2.43204
   95% expected band : 2.43204 < r < 2.43204
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 344444161
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.83075 +/- 0.00650517 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.83075 @ 95%CL (1 toyMC)
median expected limit: r < 1.83075 @ 95%CL (1 toyMC)
   68% expected band : 1.83075 < r < 1.83075
   95% expected band : 1.83075 < r < 1.83075
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1666815660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92023 +/- 0.00671208 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.92023 @ 95%CL (1 toyMC)
median expected limit: r < 1.92023 @ 95%CL (1 toyMC)
   68% expected band : 1.92023 < r < 1.92023
   95% expected band : 1.92023 < r < 1.92023
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 141854663
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78532 +/- 0.00678185 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.78532 @ 95%CL (1 toyMC)
median expected limit: r < 1.78532 @ 95%CL (1 toyMC)
   68% expected band : 1.78532 < r < 1.78532
   95% expected band : 1.78532 < r < 1.78532
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -820295203
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.75247 +/- 0.00721178 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.75247 @ 95%CL (1 toyMC)
median expected limit: r < 2.75247 @ 95%CL (1 toyMC)
   68% expected band : 2.75247 < r < 2.75247
   95% expected band : 2.75247 < r < 2.75247
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 354811002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53834 +/- 0.00618225 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.53834 @ 95%CL (1 toyMC)
median expected limit: r < 2.53834 @ 95%CL (1 toyMC)
   68% expected band : 2.53834 < r < 2.53834
   95% expected band : 2.53834 < r < 2.53834
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 671390897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.39126 +/- 0.00700902 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.39126 @ 95%CL (1 toyMC)
median expected limit: r < 3.39126 @ 95%CL (1 toyMC)
   68% expected band : 3.39126 < r < 3.39126
   95% expected band : 3.39126 < r < 3.39126
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1638635081
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6197 +/- 0.00828992 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.6197 @ 95%CL (1 toyMC)
median expected limit: r < 3.6197 @ 95%CL (1 toyMC)
   68% expected band : 3.6197 < r < 3.6197
   95% expected band : 3.6197 < r < 3.6197
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 758039098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54909 +/- 0.00588112 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.54909 @ 95%CL (1 toyMC)
median expected limit: r < 1.54909 @ 95%CL (1 toyMC)
   68% expected band : 1.54909 < r < 1.54909
   95% expected band : 1.54909 < r < 1.54909
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -486292308
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.89549 +/- 0.0054732 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.89549 @ 95%CL (1 toyMC)
median expected limit: r < 1.89549 @ 95%CL (1 toyMC)
   68% expected band : 1.89549 < r < 1.89549
   95% expected band : 1.89549 < r < 1.89549
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2122327480
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50011 +/- 0.00801586 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.50011 @ 95%CL (1 toyMC)
median expected limit: r < 2.50011 @ 95%CL (1 toyMC)
   68% expected band : 2.50011 < r < 2.50011
   95% expected band : 2.50011 < r < 2.50011
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1771210721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54844 +/- 0.00794489 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.54844 @ 95%CL (1 toyMC)
median expected limit: r < 2.54844 @ 95%CL (1 toyMC)
   68% expected band : 2.54844 < r < 2.54844
   95% expected band : 2.54844 < r < 2.54844
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 43538079
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25161 +/- 0.00821297 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.25161 @ 95%CL (1 toyMC)
median expected limit: r < 3.25161 @ 95%CL (1 toyMC)
   68% expected band : 3.25161 < r < 3.25161
   95% expected band : 3.25161 < r < 3.25161
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 722518068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.32064 +/- 0.00715236 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.32064 @ 95%CL (1 toyMC)
median expected limit: r < 3.32064 @ 95%CL (1 toyMC)
   68% expected band : 3.32064 < r < 3.32064
   95% expected band : 3.32064 < r < 3.32064
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1487030043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.26893 +/- 0.00613129 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.26893 @ 95%CL (1 toyMC)
median expected limit: r < 2.26893 @ 95%CL (1 toyMC)
   68% expected band : 2.26893 < r < 2.26893
   95% expected band : 2.26893 < r < 2.26893
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1243947829
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.96866 +/- 0.00701695 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 1.96866 @ 95%CL (1 toyMC)
median expected limit: r < 1.96866 @ 95%CL (1 toyMC)
   68% expected band : 1.96866 < r < 1.96866
   95% expected band : 1.96866 < r < 1.96866
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1976000853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.56849 +/- 0.00795535 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.56849 @ 95%CL (1 toyMC)
median expected limit: r < 3.56849 @ 95%CL (1 toyMC)
   68% expected band : 3.56849 < r < 3.56849
   95% expected band : 3.56849 < r < 3.56849
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -703272864
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77738 +/- 0.00850212 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.77738 @ 95%CL (1 toyMC)
median expected limit: r < 2.77738 @ 95%CL (1 toyMC)
   68% expected band : 2.77738 < r < 2.77738
   95% expected band : 2.77738 < r < 2.77738
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1032293757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39555 +/- 0.00659791 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.39555 @ 95%CL (1 toyMC)
median expected limit: r < 2.39555 @ 95%CL (1 toyMC)
   68% expected band : 2.39555 < r < 2.39555
   95% expected band : 2.39555 < r < 2.39555
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1565047161
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.98179 +/- 0.00425881 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.98179 @ 95%CL (1 toyMC)
median expected limit: r < 1.98179 @ 95%CL (1 toyMC)
   68% expected band : 1.98179 < r < 1.98179
   95% expected band : 1.98179 < r < 1.98179
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 293649919
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.007 +/- 0.00691147 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.007 @ 95%CL (1 toyMC)
median expected limit: r < 2.007 @ 95%CL (1 toyMC)
   68% expected band : 2.007 < r < 2.007
   95% expected band : 2.007 < r < 2.007
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1598959168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.35116 +/- 0.00950581 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.35116 @ 95%CL (1 toyMC)
median expected limit: r < 4.35116 @ 95%CL (1 toyMC)
   68% expected band : 4.35116 < r < 4.35116
   95% expected band : 4.35116 < r < 4.35116
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -173890136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.16241 +/- 0.00596558 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.16241 @ 95%CL (1 toyMC)
median expected limit: r < 2.16241 @ 95%CL (1 toyMC)
   68% expected band : 2.16241 < r < 2.16241
   95% expected band : 2.16241 < r < 2.16241
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1586589668
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4854 +/- 0.0056603 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.4854 @ 95%CL (1 toyMC)
median expected limit: r < 1.4854 @ 95%CL (1 toyMC)
   68% expected band : 1.4854 < r < 1.4854
   95% expected band : 1.4854 < r < 1.4854
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -467895607
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03546 +/- 0.00463609 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.03546 @ 95%CL (1 toyMC)
median expected limit: r < 1.03546 @ 95%CL (1 toyMC)
   68% expected band : 1.03546 < r < 1.03546
   95% expected band : 1.03546 < r < 1.03546
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1062352454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.39889 +/- 0.00664307 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.39889 @ 95%CL (1 toyMC)
median expected limit: r < 3.39889 @ 95%CL (1 toyMC)
   68% expected band : 3.39889 < r < 3.39889
   95% expected band : 3.39889 < r < 3.39889
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 695231530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.9366 +/- 0.0048543 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.9366 @ 95%CL (1 toyMC)
median expected limit: r < 1.9366 @ 95%CL (1 toyMC)
   68% expected band : 1.9366 < r < 1.9366
   95% expected band : 1.9366 < r < 1.9366
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 140767616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.83836 +/- 0.00699089 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.83836 @ 95%CL (1 toyMC)
median expected limit: r < 1.83836 @ 95%CL (1 toyMC)
   68% expected band : 1.83836 < r < 1.83836
   95% expected band : 1.83836 < r < 1.83836
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -97114127
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4986 +/- 0.00702531 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.4986 @ 95%CL (1 toyMC)
median expected limit: r < 3.4986 @ 95%CL (1 toyMC)
   68% expected band : 3.4986 < r < 3.4986
   95% expected band : 3.4986 < r < 3.4986
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 841498843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6126 +/- 0.00778257 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.6126 @ 95%CL (1 toyMC)
median expected limit: r < 2.6126 @ 95%CL (1 toyMC)
   68% expected band : 2.6126 < r < 2.6126
   95% expected band : 2.6126 < r < 2.6126
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -667058786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84427 +/- 0.00663292 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.84427 @ 95%CL (1 toyMC)
median expected limit: r < 1.84427 @ 95%CL (1 toyMC)
   68% expected band : 1.84427 < r < 1.84427
   95% expected band : 1.84427 < r < 1.84427
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1074302553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.05129 +/- 0.00599363 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.05129 @ 95%CL (1 toyMC)
median expected limit: r < 2.05129 @ 95%CL (1 toyMC)
   68% expected band : 2.05129 < r < 2.05129
   95% expected band : 2.05129 < r < 2.05129
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1366631007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.24755 +/- 0.00510838 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.24755 @ 95%CL (1 toyMC)
median expected limit: r < 2.24755 @ 95%CL (1 toyMC)
   68% expected band : 2.24755 < r < 2.24755
   95% expected band : 2.24755 < r < 2.24755
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2093519767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.527 +/- 0.00646665 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.527 @ 95%CL (1 toyMC)
median expected limit: r < 1.527 @ 95%CL (1 toyMC)
   68% expected band : 1.527 < r < 1.527
   95% expected band : 1.527 < r < 1.527
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1920030802
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42507 +/- 0.00574296 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.42507 @ 95%CL (1 toyMC)
median expected limit: r < 1.42507 @ 95%CL (1 toyMC)
   68% expected band : 1.42507 < r < 1.42507
   95% expected band : 1.42507 < r < 1.42507
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -621531338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49025 +/- 0.00516771 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.49025 @ 95%CL (1 toyMC)
median expected limit: r < 1.49025 @ 95%CL (1 toyMC)
   68% expected band : 1.49025 < r < 1.49025
   95% expected band : 1.49025 < r < 1.49025
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 562361115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67923 +/- 0.00567321 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.67923 @ 95%CL (1 toyMC)
median expected limit: r < 1.67923 @ 95%CL (1 toyMC)
   68% expected band : 1.67923 < r < 1.67923
   95% expected band : 1.67923 < r < 1.67923
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1124096642
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18142 +/- 0.00411757 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.18142 @ 95%CL (1 toyMC)
median expected limit: r < 1.18142 @ 95%CL (1 toyMC)
   68% expected band : 1.18142 < r < 1.18142
   95% expected band : 1.18142 < r < 1.18142
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -859271398
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3462 +/- 0.00471088 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.3462 @ 95%CL (1 toyMC)
median expected limit: r < 1.3462 @ 95%CL (1 toyMC)
   68% expected band : 1.3462 < r < 1.3462
   95% expected band : 1.3462 < r < 1.3462
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1182496922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.20378 +/- 0.00695816 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.20378 @ 95%CL (1 toyMC)
median expected limit: r < 2.20378 @ 95%CL (1 toyMC)
   68% expected band : 2.20378 < r < 2.20378
   95% expected band : 2.20378 < r < 2.20378
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2031339711
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67395 +/- 0.00736597 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.67395 @ 95%CL (1 toyMC)
median expected limit: r < 2.67395 @ 95%CL (1 toyMC)
   68% expected band : 2.67395 < r < 2.67395
   95% expected band : 2.67395 < r < 2.67395
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 728220979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91871 +/- 0.0070934 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.91871 @ 95%CL (1 toyMC)
median expected limit: r < 1.91871 @ 95%CL (1 toyMC)
   68% expected band : 1.91871 < r < 1.91871
   95% expected band : 1.91871 < r < 1.91871
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 936755214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.68828 +/- 0.00875763 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.68828 @ 95%CL (1 toyMC)
median expected limit: r < 2.68828 @ 95%CL (1 toyMC)
   68% expected band : 2.68828 < r < 2.68828
   95% expected band : 2.68828 < r < 2.68828
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 619616078
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36901 +/- 0.0043735 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.36901 @ 95%CL (1 toyMC)
median expected limit: r < 1.36901 @ 95%CL (1 toyMC)
   68% expected band : 1.36901 < r < 1.36901
   95% expected band : 1.36901 < r < 1.36901
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2093625726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13609 +/- 0.00572837 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.13609 @ 95%CL (1 toyMC)
median expected limit: r < 2.13609 @ 95%CL (1 toyMC)
   68% expected band : 2.13609 < r < 2.13609
   95% expected band : 2.13609 < r < 2.13609
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1101435137
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84936 +/- 0.00699604 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.84936 @ 95%CL (1 toyMC)
median expected limit: r < 1.84936 @ 95%CL (1 toyMC)
   68% expected band : 1.84936 < r < 1.84936
   95% expected band : 1.84936 < r < 1.84936
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1659272469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71712 +/- 0.0060319 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.71712 @ 95%CL (1 toyMC)
median expected limit: r < 1.71712 @ 95%CL (1 toyMC)
   68% expected band : 1.71712 < r < 1.71712
   95% expected band : 1.71712 < r < 1.71712
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1146196572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.59052 +/- 0.00657698 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.59052 @ 95%CL (1 toyMC)
median expected limit: r < 3.59052 @ 95%CL (1 toyMC)
   68% expected band : 3.59052 < r < 3.59052
   95% expected band : 3.59052 < r < 3.59052
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -119921868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77315 +/- 0.00707581 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.77315 @ 95%CL (1 toyMC)
median expected limit: r < 1.77315 @ 95%CL (1 toyMC)
   68% expected band : 1.77315 < r < 1.77315
   95% expected band : 1.77315 < r < 1.77315
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -590005265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42072 +/- 0.00725431 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.42072 @ 95%CL (1 toyMC)
median expected limit: r < 2.42072 @ 95%CL (1 toyMC)
   68% expected band : 2.42072 < r < 2.42072
   95% expected band : 2.42072 < r < 2.42072
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -992919525
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27255 +/- 0.00589077 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.27255 @ 95%CL (1 toyMC)
median expected limit: r < 2.27255 @ 95%CL (1 toyMC)
   68% expected band : 2.27255 < r < 2.27255
   95% expected band : 2.27255 < r < 2.27255
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -220365283
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27637 +/- 0.00432559 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.27637 @ 95%CL (1 toyMC)
median expected limit: r < 2.27637 @ 95%CL (1 toyMC)
   68% expected band : 2.27637 < r < 2.27637
   95% expected band : 2.27637 < r < 2.27637
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 472063906
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.81852 +/- 0.007767 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.81852 @ 95%CL (1 toyMC)
median expected limit: r < 2.81852 @ 95%CL (1 toyMC)
   68% expected band : 2.81852 < r < 2.81852
   95% expected band : 2.81852 < r < 2.81852
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 244261785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.49551 +/- 0.00820664 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.49551 @ 95%CL (1 toyMC)
median expected limit: r < 3.49551 @ 95%CL (1 toyMC)
   68% expected band : 3.49551 < r < 3.49551
   95% expected band : 3.49551 < r < 3.49551
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 984321787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42107 +/- 0.00549187 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.42107 @ 95%CL (1 toyMC)
median expected limit: r < 2.42107 @ 95%CL (1 toyMC)
   68% expected band : 2.42107 < r < 2.42107
   95% expected band : 2.42107 < r < 2.42107
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1711677506
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13958 +/- 0.00659409 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.13958 @ 95%CL (1 toyMC)
median expected limit: r < 3.13958 @ 95%CL (1 toyMC)
   68% expected band : 3.13958 < r < 3.13958
   95% expected band : 3.13958 < r < 3.13958
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1987117555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.7124 +/- 0.00750526 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.7124 @ 95%CL (1 toyMC)
median expected limit: r < 4.7124 @ 95%CL (1 toyMC)
   68% expected band : 4.7124 < r < 4.7124
   95% expected band : 4.7124 < r < 4.7124
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1253945336
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.01253 +/- 0.00827211 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.01253 @ 95%CL (1 toyMC)
median expected limit: r < 3.01253 @ 95%CL (1 toyMC)
   68% expected band : 3.01253 < r < 3.01253
   95% expected band : 3.01253 < r < 3.01253
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -895872478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.15522 +/- 0.00605332 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.15522 @ 95%CL (1 toyMC)
median expected limit: r < 2.15522 @ 95%CL (1 toyMC)
   68% expected band : 2.15522 < r < 2.15522
   95% expected band : 2.15522 < r < 2.15522
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1147122254
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.19986 +/- 0.00532902 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.19986 @ 95%CL (1 toyMC)
median expected limit: r < 2.19986 @ 95%CL (1 toyMC)
   68% expected band : 2.19986 < r < 2.19986
   95% expected band : 2.19986 < r < 2.19986
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1628207387
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58689 +/- 0.00695841 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.58689 @ 95%CL (1 toyMC)
median expected limit: r < 1.58689 @ 95%CL (1 toyMC)
   68% expected band : 1.58689 < r < 1.58689
   95% expected band : 1.58689 < r < 1.58689
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 443688882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.15172 +/- 0.00710959 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.15172 @ 95%CL (1 toyMC)
median expected limit: r < 3.15172 @ 95%CL (1 toyMC)
   68% expected band : 3.15172 < r < 3.15172
   95% expected band : 3.15172 < r < 3.15172
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -727680103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59023 +/- 0.00575041 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.59023 @ 95%CL (1 toyMC)
median expected limit: r < 1.59023 @ 95%CL (1 toyMC)
   68% expected band : 1.59023 < r < 1.59023
   95% expected band : 1.59023 < r < 1.59023
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -663637499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30297 +/- 0.00501637 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.30297 @ 95%CL (1 toyMC)
median expected limit: r < 1.30297 @ 95%CL (1 toyMC)
   68% expected band : 1.30297 < r < 1.30297
   95% expected band : 1.30297 < r < 1.30297
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -885386950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.31468 +/- 0.0066347 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.31468 @ 95%CL (1 toyMC)
median expected limit: r < 2.31468 @ 95%CL (1 toyMC)
   68% expected band : 2.31468 < r < 2.31468
   95% expected band : 2.31468 < r < 2.31468
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 360973232
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53162 +/- 0.00653047 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.53162 @ 95%CL (1 toyMC)
median expected limit: r < 2.53162 @ 95%CL (1 toyMC)
   68% expected band : 2.53162 < r < 2.53162
   95% expected band : 2.53162 < r < 2.53162
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -154614291
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73653 +/- 0.00610209 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.73653 @ 95%CL (1 toyMC)
median expected limit: r < 1.73653 @ 95%CL (1 toyMC)
   68% expected band : 1.73653 < r < 1.73653
   95% expected band : 1.73653 < r < 1.73653
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1326149058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52388 +/- 0.00743997 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.52388 @ 95%CL (1 toyMC)
median expected limit: r < 2.52388 @ 95%CL (1 toyMC)
   68% expected band : 2.52388 < r < 2.52388
   95% expected band : 2.52388 < r < 2.52388
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 109781371
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40743 +/- 0.00555109 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.40743 @ 95%CL (1 toyMC)
median expected limit: r < 1.40743 @ 95%CL (1 toyMC)
   68% expected band : 1.40743 < r < 1.40743
   95% expected band : 1.40743 < r < 1.40743
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1400075297
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33971 +/- 0.00739618 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.33971 @ 95%CL (1 toyMC)
median expected limit: r < 3.33971 @ 95%CL (1 toyMC)
   68% expected band : 3.33971 < r < 3.33971
   95% expected band : 3.33971 < r < 3.33971
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1903409324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17774 +/- 0.00662791 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.17774 @ 95%CL (1 toyMC)
median expected limit: r < 2.17774 @ 95%CL (1 toyMC)
   68% expected band : 2.17774 < r < 2.17774
   95% expected band : 2.17774 < r < 2.17774
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 843347625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2628 +/- 0.0067702 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.2628 @ 95%CL (1 toyMC)
median expected limit: r < 2.2628 @ 95%CL (1 toyMC)
   68% expected band : 2.2628 < r < 2.2628
   95% expected band : 2.2628 < r < 2.2628
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1147456513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.01059 +/- 0.00634895 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.01059 @ 95%CL (1 toyMC)
median expected limit: r < 3.01059 @ 95%CL (1 toyMC)
   68% expected band : 3.01059 < r < 3.01059
   95% expected band : 3.01059 < r < 3.01059
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1902800449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.93419 +/- 0.00727372 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.93419 @ 95%CL (1 toyMC)
median expected limit: r < 1.93419 @ 95%CL (1 toyMC)
   68% expected band : 1.93419 < r < 1.93419
   95% expected band : 1.93419 < r < 1.93419
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 924806806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13717 +/- 0.00611222 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.13717 @ 95%CL (1 toyMC)
median expected limit: r < 2.13717 @ 95%CL (1 toyMC)
   68% expected band : 2.13717 < r < 2.13717
   95% expected band : 2.13717 < r < 2.13717
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1699846438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.0722 +/- 0.00669852 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.0722 @ 95%CL (1 toyMC)
median expected limit: r < 4.0722 @ 95%CL (1 toyMC)
   68% expected band : 4.0722 < r < 4.0722
   95% expected band : 4.0722 < r < 4.0722
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1110717219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51393 +/- 0.00515358 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.51393 @ 95%CL (1 toyMC)
median expected limit: r < 1.51393 @ 95%CL (1 toyMC)
   68% expected band : 1.51393 < r < 1.51393
   95% expected band : 1.51393 < r < 1.51393
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1012007972.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1062352454.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1101435137.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1124096642.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1146196572.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1147122254.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-119921868.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1243947829.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1253945336.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1326149058.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1366631007.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1400075297.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1482505001.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1487030043.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-154614291.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1565047161.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1601594238.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1605119589.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1638635081.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1659272469.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1699846438.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-173890136.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1813192634.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1903409324.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1920030802.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-1924695510.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-1976000853.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-2012177569.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-2093519767.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-2093625726.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-2109604705.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-2122327480.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-220365283.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-467895607.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-486292308.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-534719327.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-572201620.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-590005265.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-621531338.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-663637499.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-667058786.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-703272864.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-727680103.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-820295203.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-859271398.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-885386950.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-895872478.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.-97114127.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.-992919525.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1032293757.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1074302553.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.109781371.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1110717219.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1147456513.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1182496922.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.140767616.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.141854663.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1563548486.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1586589668.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1593959638.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1598959168.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1628207387.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1666815660.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1711677506.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1714698617.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1741302824.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1771210721.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1787469230.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1875066428.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1902800449.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1953981565.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1987117555.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.2031339711.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.2033675085.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.2091991854.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.2140551658.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.244261785.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.293649919.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.344444161.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.354811002.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.360973232.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.43538079.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.443688882.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.472063906.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.495093816.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.562361115.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.619616078.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.622837114.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.671390897.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.695231530.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.722518068.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.728220979.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.758039098.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.789320502.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.841498843.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.843347625.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.924806806.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.936755214.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.942294284.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.984321787.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -899806000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.21123 +/- 0.00787466 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.21123 @ 95%CL (1 toyMC)
median expected limit: r < 3.21123 @ 95%CL (1 toyMC)
   68% expected band : 3.21123 < r < 3.21123
   95% expected band : 3.21123 < r < 3.21123
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 84133444
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07858 +/- 0.00794851 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.07858 @ 95%CL (1 toyMC)
median expected limit: r < 3.07858 @ 95%CL (1 toyMC)
   68% expected band : 3.07858 < r < 3.07858
   95% expected band : 3.07858 < r < 3.07858
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -493240847
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07755 +/- 0.00544649 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.07755 @ 95%CL (1 toyMC)
median expected limit: r < 3.07755 @ 95%CL (1 toyMC)
   68% expected band : 3.07755 < r < 3.07755
   95% expected band : 3.07755 < r < 3.07755
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1801995166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13394 +/- 0.00657259 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.13394 @ 95%CL (1 toyMC)
median expected limit: r < 2.13394 @ 95%CL (1 toyMC)
   68% expected band : 2.13394 < r < 2.13394
   95% expected band : 2.13394 < r < 2.13394
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1262885176
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29078 +/- 0.00602874 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.29078 @ 95%CL (1 toyMC)
median expected limit: r < 2.29078 @ 95%CL (1 toyMC)
   68% expected band : 2.29078 < r < 2.29078
   95% expected band : 2.29078 < r < 2.29078
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1923976019
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.75824 +/- 0.00499284 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.75824 @ 95%CL (1 toyMC)
median expected limit: r < 1.75824 @ 95%CL (1 toyMC)
   68% expected band : 1.75824 < r < 1.75824
   95% expected band : 1.75824 < r < 1.75824
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1658606469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.11041 +/- 0.00742127 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.11041 @ 95%CL (1 toyMC)
median expected limit: r < 3.11041 @ 95%CL (1 toyMC)
   68% expected band : 3.11041 < r < 3.11041
   95% expected band : 3.11041 < r < 3.11041
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1108015142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.68803 +/- 0.00754654 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.68803 @ 95%CL (1 toyMC)
median expected limit: r < 2.68803 @ 95%CL (1 toyMC)
   68% expected band : 2.68803 < r < 2.68803
   95% expected band : 2.68803 < r < 2.68803
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1115806507
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41049 +/- 0.0043694 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.41049 @ 95%CL (1 toyMC)
median expected limit: r < 1.41049 @ 95%CL (1 toyMC)
   68% expected band : 1.41049 < r < 1.41049
   95% expected band : 1.41049 < r < 1.41049
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -55770028
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6868 +/- 0.0052424 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.6868 @ 95%CL (1 toyMC)
median expected limit: r < 1.6868 @ 95%CL (1 toyMC)
   68% expected band : 1.6868 < r < 1.6868
   95% expected band : 1.6868 < r < 1.6868
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1368109473
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6481 +/- 0.00610417 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.6481 @ 95%CL (1 toyMC)
median expected limit: r < 2.6481 @ 95%CL (1 toyMC)
   68% expected band : 2.6481 < r < 2.6481
   95% expected band : 2.6481 < r < 2.6481
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1554806234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4902 +/- 0.00612129 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.4902 @ 95%CL (1 toyMC)
median expected limit: r < 3.4902 @ 95%CL (1 toyMC)
   68% expected band : 3.4902 < r < 3.4902
   95% expected band : 3.4902 < r < 3.4902
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1666688051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.57152 +/- 0.00571486 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.57152 @ 95%CL (1 toyMC)
median expected limit: r < 2.57152 @ 95%CL (1 toyMC)
   68% expected band : 2.57152 < r < 2.57152
   95% expected band : 2.57152 < r < 2.57152
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1826636474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.57656 +/- 0.00566282 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.57656 @ 95%CL (1 toyMC)
median expected limit: r < 2.57656 @ 95%CL (1 toyMC)
   68% expected band : 2.57656 < r < 2.57656
   95% expected band : 2.57656 < r < 2.57656
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1730957887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29708 +/- 0.00598968 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.29708 @ 95%CL (1 toyMC)
median expected limit: r < 2.29708 @ 95%CL (1 toyMC)
   68% expected band : 2.29708 < r < 2.29708
   95% expected band : 2.29708 < r < 2.29708
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1227268973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72293 +/- 0.00576734 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.72293 @ 95%CL (1 toyMC)
median expected limit: r < 1.72293 @ 95%CL (1 toyMC)
   68% expected band : 1.72293 < r < 1.72293
   95% expected band : 1.72293 < r < 1.72293
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 272850734
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54671 +/- 0.00431513 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.54671 @ 95%CL (1 toyMC)
median expected limit: r < 1.54671 @ 95%CL (1 toyMC)
   68% expected band : 1.54671 < r < 1.54671
   95% expected band : 1.54671 < r < 1.54671
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1275161233
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.34787 +/- 0.00726899 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.34787 @ 95%CL (1 toyMC)
median expected limit: r < 2.34787 @ 95%CL (1 toyMC)
   68% expected band : 2.34787 < r < 2.34787
   95% expected band : 2.34787 < r < 2.34787
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1558497211
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5371 +/- 0.00590918 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.5371 @ 95%CL (1 toyMC)
median expected limit: r < 2.5371 @ 95%CL (1 toyMC)
   68% expected band : 2.5371 < r < 2.5371
   95% expected band : 2.5371 < r < 2.5371
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 765027087
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43479 +/- 0.00563785 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.43479 @ 95%CL (1 toyMC)
median expected limit: r < 2.43479 @ 95%CL (1 toyMC)
   68% expected band : 2.43479 < r < 2.43479
   95% expected band : 2.43479 < r < 2.43479
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1772976283
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.6335 +/- 0.00650452 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.6335 @ 95%CL (1 toyMC)
median expected limit: r < 4.6335 @ 95%CL (1 toyMC)
   68% expected band : 4.6335 < r < 4.6335
   95% expected band : 4.6335 < r < 4.6335
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2094046914
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80838 +/- 0.00510552 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.80838 @ 95%CL (1 toyMC)
median expected limit: r < 1.80838 @ 95%CL (1 toyMC)
   68% expected band : 1.80838 < r < 1.80838
   95% expected band : 1.80838 < r < 1.80838
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1044997154
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00977 +/- 0.00503853 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.00977 @ 95%CL (1 toyMC)
median expected limit: r < 2.00977 @ 95%CL (1 toyMC)
   68% expected band : 2.00977 < r < 2.00977
   95% expected band : 2.00977 < r < 2.00977
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1990833680
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.01636 +/- 0.00530979 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.01636 @ 95%CL (1 toyMC)
median expected limit: r < 2.01636 @ 95%CL (1 toyMC)
   68% expected band : 2.01636 < r < 2.01636
   95% expected band : 2.01636 < r < 2.01636
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1028291756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.95403 +/- 0.005405 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.95403 @ 95%CL (1 toyMC)
median expected limit: r < 1.95403 @ 95%CL (1 toyMC)
   68% expected band : 1.95403 < r < 1.95403
   95% expected band : 1.95403 < r < 1.95403
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1317128183
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33333 +/- 0.00645634 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.33333 @ 95%CL (1 toyMC)
median expected limit: r < 3.33333 @ 95%CL (1 toyMC)
   68% expected band : 3.33333 < r < 3.33333
   95% expected band : 3.33333 < r < 3.33333
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1905809966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.98104 +/- 0.0064138 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.98104 @ 95%CL (1 toyMC)
median expected limit: r < 1.98104 @ 95%CL (1 toyMC)
   68% expected band : 1.98104 < r < 1.98104
   95% expected band : 1.98104 < r < 1.98104
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1601256880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.61352 +/- 0.006531 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.61352 @ 95%CL (1 toyMC)
median expected limit: r < 3.61352 @ 95%CL (1 toyMC)
   68% expected band : 3.61352 < r < 3.61352
   95% expected band : 3.61352 < r < 3.61352
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1583864294
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.79316 +/- 0.00429728 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.79316 @ 95%CL (1 toyMC)
median expected limit: r < 1.79316 @ 95%CL (1 toyMC)
   68% expected band : 1.79316 < r < 1.79316
   95% expected band : 1.79316 < r < 1.79316
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1336524023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00888 +/- 0.00613139 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.00888 @ 95%CL (1 toyMC)
median expected limit: r < 2.00888 @ 95%CL (1 toyMC)
   68% expected band : 2.00888 < r < 2.00888
   95% expected band : 2.00888 < r < 2.00888
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1665074575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50195 +/- 0.00578417 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.50195 @ 95%CL (1 toyMC)
median expected limit: r < 2.50195 @ 95%CL (1 toyMC)
   68% expected band : 2.50195 < r < 2.50195
   95% expected band : 2.50195 < r < 2.50195
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 338824327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66207 +/- 0.00597545 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.66207 @ 95%CL (1 toyMC)
median expected limit: r < 1.66207 @ 95%CL (1 toyMC)
   68% expected band : 1.66207 < r < 1.66207
   95% expected band : 1.66207 < r < 1.66207
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -382503088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65725 +/- 0.0063175 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.65725 @ 95%CL (1 toyMC)
median expected limit: r < 2.65725 @ 95%CL (1 toyMC)
   68% expected band : 2.65725 < r < 2.65725
   95% expected band : 2.65725 < r < 2.65725
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -452292000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.29397 +/- 0.0061897 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.29397 @ 95%CL (1 toyMC)
median expected limit: r < 3.29397 @ 95%CL (1 toyMC)
   68% expected band : 3.29397 < r < 3.29397
   95% expected band : 3.29397 < r < 3.29397
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 456251789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.01514 +/- 0.00377523 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.01514 @ 95%CL (1 toyMC)
median expected limit: r < 2.01514 @ 95%CL (1 toyMC)
   68% expected band : 2.01514 < r < 2.01514
   95% expected band : 2.01514 < r < 2.01514
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1314792528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3449 +/- 0.00457464 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.3449 @ 95%CL (1 toyMC)
median expected limit: r < 1.3449 @ 95%CL (1 toyMC)
   68% expected band : 1.3449 < r < 1.3449
   95% expected band : 1.3449 < r < 1.3449
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1992962012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41997 +/- 0.00457404 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.41997 @ 95%CL (1 toyMC)
median expected limit: r < 1.41997 @ 95%CL (1 toyMC)
   68% expected band : 1.41997 < r < 1.41997
   95% expected band : 1.41997 < r < 1.41997
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1708983793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00425 +/- 0.00601636 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.00425 @ 95%CL (1 toyMC)
median expected limit: r < 2.00425 @ 95%CL (1 toyMC)
   68% expected band : 2.00425 < r < 2.00425
   95% expected band : 2.00425 < r < 2.00425
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 592306268
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87849 +/- 0.00664716 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.87849 @ 95%CL (1 toyMC)
median expected limit: r < 2.87849 @ 95%CL (1 toyMC)
   68% expected band : 2.87849 < r < 2.87849
   95% expected band : 2.87849 < r < 2.87849
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1736651868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14045 +/- 0.0063775 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.14045 @ 95%CL (1 toyMC)
median expected limit: r < 2.14045 @ 95%CL (1 toyMC)
   68% expected band : 2.14045 < r < 2.14045
   95% expected band : 2.14045 < r < 2.14045
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 435052277
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.18544 +/- 0.00717122 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.18544 @ 95%CL (1 toyMC)
median expected limit: r < 3.18544 @ 95%CL (1 toyMC)
   68% expected band : 3.18544 < r < 3.18544
   95% expected band : 3.18544 < r < 3.18544
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -738014765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93769 +/- 0.00727148 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.93769 @ 95%CL (1 toyMC)
median expected limit: r < 3.93769 @ 95%CL (1 toyMC)
   68% expected band : 3.93769 < r < 3.93769
   95% expected band : 3.93769 < r < 3.93769
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 304949147
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13673 +/- 0.00602711 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.13673 @ 95%CL (1 toyMC)
median expected limit: r < 3.13673 @ 95%CL (1 toyMC)
   68% expected band : 3.13673 < r < 3.13673
   95% expected band : 3.13673 < r < 3.13673
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 729797472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33195 +/- 0.00546893 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.33195 @ 95%CL (1 toyMC)
median expected limit: r < 2.33195 @ 95%CL (1 toyMC)
   68% expected band : 2.33195 < r < 2.33195
   95% expected band : 2.33195 < r < 2.33195
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -698833253
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67784 +/- 0.00550686 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.67784 @ 95%CL (1 toyMC)
median expected limit: r < 2.67784 @ 95%CL (1 toyMC)
   68% expected band : 2.67784 < r < 2.67784
   95% expected band : 2.67784 < r < 2.67784
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1535959096
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20922 +/- 0.00445999 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.20922 @ 95%CL (1 toyMC)
median expected limit: r < 1.20922 @ 95%CL (1 toyMC)
   68% expected band : 1.20922 < r < 1.20922
   95% expected band : 1.20922 < r < 1.20922
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1647979221
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.0077 +/- 0.00651182 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.0077 @ 95%CL (1 toyMC)
median expected limit: r < 4.0077 @ 95%CL (1 toyMC)
   68% expected band : 4.0077 < r < 4.0077
   95% expected band : 4.0077 < r < 4.0077
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -80070354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13263 +/- 0.00656354 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.13263 @ 95%CL (1 toyMC)
median expected limit: r < 3.13263 @ 95%CL (1 toyMC)
   68% expected band : 3.13263 < r < 3.13263
   95% expected band : 3.13263 < r < 3.13263
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -118956467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78927 +/- 0.00504796 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.78927 @ 95%CL (1 toyMC)
median expected limit: r < 2.78927 @ 95%CL (1 toyMC)
   68% expected band : 2.78927 < r < 2.78927
   95% expected band : 2.78927 < r < 2.78927
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1295182806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84839 +/- 0.0053738 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.84839 @ 95%CL (1 toyMC)
median expected limit: r < 1.84839 @ 95%CL (1 toyMC)
   68% expected band : 1.84839 < r < 1.84839
   95% expected band : 1.84839 < r < 1.84839
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1723982082
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5743 +/- 0.0057663 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.5743 @ 95%CL (1 toyMC)
median expected limit: r < 1.5743 @ 95%CL (1 toyMC)
   68% expected band : 1.5743 < r < 1.5743
   95% expected band : 1.5743 < r < 1.5743
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -921420028
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.67995 +/- 0.0070757 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.67995 @ 95%CL (1 toyMC)
median expected limit: r < 3.67995 @ 95%CL (1 toyMC)
   68% expected band : 3.67995 < r < 3.67995
   95% expected band : 3.67995 < r < 3.67995
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1171051403
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38674 +/- 0.00576992 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.38674 @ 95%CL (1 toyMC)
median expected limit: r < 1.38674 @ 95%CL (1 toyMC)
   68% expected band : 1.38674 < r < 1.38674
   95% expected band : 1.38674 < r < 1.38674
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1344590968
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37873 +/- 0.00616139 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.37873 @ 95%CL (1 toyMC)
median expected limit: r < 2.37873 @ 95%CL (1 toyMC)
   68% expected band : 2.37873 < r < 2.37873
   95% expected band : 2.37873 < r < 2.37873
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2007200296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.89256 +/- 0.00619652 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.89256 @ 95%CL (1 toyMC)
median expected limit: r < 2.89256 @ 95%CL (1 toyMC)
   68% expected band : 2.89256 < r < 2.89256
   95% expected band : 2.89256 < r < 2.89256
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2087778317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.45356 +/- 0.00627381 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.45356 @ 95%CL (1 toyMC)
median expected limit: r < 2.45356 @ 95%CL (1 toyMC)
   68% expected band : 2.45356 < r < 2.45356
   95% expected band : 2.45356 < r < 2.45356
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1541526794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.38318 +/- 0.0073159 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.38318 @ 95%CL (1 toyMC)
median expected limit: r < 2.38318 @ 95%CL (1 toyMC)
   68% expected band : 2.38318 < r < 2.38318
   95% expected band : 2.38318 < r < 2.38318
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1737719039
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25926 +/- 0.00533948 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.25926 @ 95%CL (1 toyMC)
median expected limit: r < 3.25926 @ 95%CL (1 toyMC)
   68% expected band : 3.25926 < r < 3.25926
   95% expected band : 3.25926 < r < 3.25926
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1124657731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.05687 +/- 0.00631428 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.05687 @ 95%CL (1 toyMC)
median expected limit: r < 2.05687 @ 95%CL (1 toyMC)
   68% expected band : 2.05687 < r < 2.05687
   95% expected band : 2.05687 < r < 2.05687
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1731494150
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4529 +/- 0.00550247 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.4529 @ 95%CL (1 toyMC)
median expected limit: r < 2.4529 @ 95%CL (1 toyMC)
   68% expected band : 2.4529 < r < 2.4529
   95% expected band : 2.4529 < r < 2.4529
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -741315644
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89807 +/- 0.00672316 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.89807 @ 95%CL (1 toyMC)
median expected limit: r < 3.89807 @ 95%CL (1 toyMC)
   68% expected band : 3.89807 < r < 3.89807
   95% expected band : 3.89807 < r < 3.89807
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1720048063
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2601 +/- 0.0058363 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.2601 @ 95%CL (1 toyMC)
median expected limit: r < 2.2601 @ 95%CL (1 toyMC)
   68% expected band : 2.2601 < r < 2.2601
   95% expected band : 2.2601 < r < 2.2601
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 716430790
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.94478 +/- 0.0054693 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.94478 @ 95%CL (1 toyMC)
median expected limit: r < 1.94478 @ 95%CL (1 toyMC)
   68% expected band : 1.94478 < r < 1.94478
   95% expected band : 1.94478 < r < 1.94478
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1467868647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46625 +/- 0.00585169 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.46625 @ 95%CL (1 toyMC)
median expected limit: r < 2.46625 @ 95%CL (1 toyMC)
   68% expected band : 2.46625 < r < 2.46625
   95% expected band : 2.46625 < r < 2.46625
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1066877584
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.15438 +/- 0.00536346 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.15438 @ 95%CL (1 toyMC)
median expected limit: r < 2.15438 @ 95%CL (1 toyMC)
   68% expected band : 2.15438 < r < 2.15438
   95% expected band : 2.15438 < r < 2.15438
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -117283481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61525 +/- 0.00586413 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.61525 @ 95%CL (1 toyMC)
median expected limit: r < 1.61525 @ 95%CL (1 toyMC)
   68% expected band : 1.61525 < r < 1.61525
   95% expected band : 1.61525 < r < 1.61525
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 3609289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.56318 +/- 0.00631015 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.56318 @ 95%CL (1 toyMC)
median expected limit: r < 2.56318 @ 95%CL (1 toyMC)
   68% expected band : 2.56318 < r < 2.56318
   95% expected band : 2.56318 < r < 2.56318
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 137340301
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66615 +/- 0.00738178 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.66615 @ 95%CL (1 toyMC)
median expected limit: r < 2.66615 @ 95%CL (1 toyMC)
   68% expected band : 2.66615 < r < 2.66615
   95% expected band : 2.66615 < r < 2.66615
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 754521991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49679 +/- 0.00788043 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.49679 @ 95%CL (1 toyMC)
median expected limit: r < 2.49679 @ 95%CL (1 toyMC)
   68% expected band : 2.49679 < r < 2.49679
   95% expected band : 2.49679 < r < 2.49679
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1625283102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7956 +/- 0.00490987 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.7956 @ 95%CL (1 toyMC)
median expected limit: r < 2.7956 @ 95%CL (1 toyMC)
   68% expected band : 2.7956 < r < 2.7956
   95% expected band : 2.7956 < r < 2.7956
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1444882626
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59803 +/- 0.00691937 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.59803 @ 95%CL (1 toyMC)
median expected limit: r < 2.59803 @ 95%CL (1 toyMC)
   68% expected band : 2.59803 < r < 2.59803
   95% expected band : 2.59803 < r < 2.59803
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1145349103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42134 +/- 0.00748572 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.42134 @ 95%CL (1 toyMC)
median expected limit: r < 2.42134 @ 95%CL (1 toyMC)
   68% expected band : 2.42134 < r < 2.42134
   95% expected band : 2.42134 < r < 2.42134
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1654304860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.35992 +/- 0.00779067 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.35992 @ 95%CL (1 toyMC)
median expected limit: r < 3.35992 @ 95%CL (1 toyMC)
   68% expected band : 3.35992 < r < 3.35992
   95% expected band : 3.35992 < r < 3.35992
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1392578986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.82054 +/- 0.00746754 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.82054 @ 95%CL (1 toyMC)
median expected limit: r < 2.82054 @ 95%CL (1 toyMC)
   68% expected band : 2.82054 < r < 2.82054
   95% expected band : 2.82054 < r < 2.82054
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -491169347
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.5098 +/- 0.0066767 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.5098 @ 95%CL (1 toyMC)
median expected limit: r < 3.5098 @ 95%CL (1 toyMC)
   68% expected band : 3.5098 < r < 3.5098
   95% expected band : 3.5098 < r < 3.5098
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1692678851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.36513 +/- 0.00670724 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.36513 @ 95%CL (1 toyMC)
median expected limit: r < 3.36513 @ 95%CL (1 toyMC)
   68% expected band : 3.36513 < r < 3.36513
   95% expected band : 3.36513 < r < 3.36513
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1996519306
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.79733 +/- 0.00576065 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.79733 @ 95%CL (1 toyMC)
median expected limit: r < 1.79733 @ 95%CL (1 toyMC)
   68% expected band : 1.79733 < r < 1.79733
   95% expected band : 1.79733 < r < 1.79733
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1059349003
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.20076 +/- 0.00619759 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.20076 @ 95%CL (1 toyMC)
median expected limit: r < 2.20076 @ 95%CL (1 toyMC)
   68% expected band : 2.20076 < r < 2.20076
   95% expected band : 2.20076 < r < 2.20076
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2016813933
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68946 +/- 0.0048346 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.68946 @ 95%CL (1 toyMC)
median expected limit: r < 1.68946 @ 95%CL (1 toyMC)
   68% expected band : 1.68946 < r < 1.68946
   95% expected band : 1.68946 < r < 1.68946
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 7687349
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77485 +/- 0.00718449 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.77485 @ 95%CL (1 toyMC)
median expected limit: r < 1.77485 @ 95%CL (1 toyMC)
   68% expected band : 1.77485 < r < 1.77485
   95% expected band : 1.77485 < r < 1.77485
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1191965455
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66332 +/- 0.00473282 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.66332 @ 95%CL (1 toyMC)
median expected limit: r < 1.66332 @ 95%CL (1 toyMC)
   68% expected band : 1.66332 < r < 1.66332
   95% expected band : 1.66332 < r < 1.66332
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1410749909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.74839 +/- 0.00428892 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.74839 @ 95%CL (1 toyMC)
median expected limit: r < 2.74839 @ 95%CL (1 toyMC)
   68% expected band : 2.74839 < r < 2.74839
   95% expected band : 2.74839 < r < 2.74839
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1353559037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23779 +/- 0.0073779 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.23779 @ 95%CL (1 toyMC)
median expected limit: r < 3.23779 @ 95%CL (1 toyMC)
   68% expected band : 3.23779 < r < 3.23779
   95% expected band : 3.23779 < r < 3.23779
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1778176780
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.00499 +/- 0.00699983 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.00499 @ 95%CL (1 toyMC)
median expected limit: r < 3.00499 @ 95%CL (1 toyMC)
   68% expected band : 3.00499 < r < 3.00499
   95% expected band : 3.00499 < r < 3.00499
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1665254511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46581 +/- 0.00471415 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.46581 @ 95%CL (1 toyMC)
median expected limit: r < 2.46581 @ 95%CL (1 toyMC)
   68% expected band : 2.46581 < r < 2.46581
   95% expected band : 2.46581 < r < 2.46581
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2129928269
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.40354 +/- 0.00654433 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.40354 @ 95%CL (1 toyMC)
median expected limit: r < 3.40354 @ 95%CL (1 toyMC)
   68% expected band : 3.40354 < r < 3.40354
   95% expected band : 3.40354 < r < 3.40354
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2084298504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12343 +/- 0.00521678 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.12343 @ 95%CL (1 toyMC)
median expected limit: r < 2.12343 @ 95%CL (1 toyMC)
   68% expected band : 2.12343 < r < 2.12343
   95% expected band : 2.12343 < r < 2.12343
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2104369784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.57002 +/- 0.00702759 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.57002 @ 95%CL (1 toyMC)
median expected limit: r < 4.57002 @ 95%CL (1 toyMC)
   68% expected band : 4.57002 < r < 4.57002
   95% expected band : 4.57002 < r < 4.57002
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -255155657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39511 +/- 0.00602122 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.39511 @ 95%CL (1 toyMC)
median expected limit: r < 2.39511 @ 95%CL (1 toyMC)
   68% expected band : 2.39511 < r < 2.39511
   95% expected band : 2.39511 < r < 2.39511
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -695810753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.89911 +/- 0.00593354 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.89911 @ 95%CL (1 toyMC)
median expected limit: r < 1.89911 @ 95%CL (1 toyMC)
   68% expected band : 1.89911 < r < 1.89911
   95% expected band : 1.89911 < r < 1.89911
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1667734009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.56749 +/- 0.0060172 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.56749 @ 95%CL (1 toyMC)
median expected limit: r < 3.56749 @ 95%CL (1 toyMC)
   68% expected band : 3.56749 < r < 3.56749
   95% expected band : 3.56749 < r < 3.56749
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1212497212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43739 +/- 0.00614087 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.43739 @ 95%CL (1 toyMC)
median expected limit: r < 2.43739 @ 95%CL (1 toyMC)
   68% expected band : 2.43739 < r < 2.43739
   95% expected band : 2.43739 < r < 2.43739
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -284293471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.11142 +/- 0.00823975 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.11142 @ 95%CL (1 toyMC)
median expected limit: r < 3.11142 @ 95%CL (1 toyMC)
   68% expected band : 3.11142 < r < 3.11142
   95% expected band : 3.11142 < r < 3.11142
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -598406806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.59853 +/- 0.00628537 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.59853 @ 95%CL (1 toyMC)
median expected limit: r < 3.59853 @ 95%CL (1 toyMC)
   68% expected band : 3.59853 < r < 3.59853
   95% expected band : 3.59853 < r < 3.59853
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 820626471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84977 +/- 0.00510022 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.84977 @ 95%CL (1 toyMC)
median expected limit: r < 1.84977 @ 95%CL (1 toyMC)
   68% expected band : 1.84977 < r < 1.84977
   95% expected band : 1.84977 < r < 1.84977
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 437006503
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.60635 +/- 0.00697443 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.60635 @ 95%CL (1 toyMC)
median expected limit: r < 3.60635 @ 95%CL (1 toyMC)
   68% expected band : 3.60635 < r < 3.60635
   95% expected band : 3.60635 < r < 3.60635
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -155699539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37544 +/- 0.00725175 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.37544 @ 95%CL (1 toyMC)
median expected limit: r < 2.37544 @ 95%CL (1 toyMC)
   68% expected band : 2.37544 < r < 2.37544
   95% expected band : 2.37544 < r < 2.37544
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1009761312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.94781 +/- 0.00752731 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.94781 @ 95%CL (1 toyMC)
median expected limit: r < 2.94781 @ 95%CL (1 toyMC)
   68% expected band : 2.94781 < r < 2.94781
   95% expected band : 2.94781 < r < 2.94781
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -343015950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.94235 +/- 0.00587366 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.94235 @ 95%CL (1 toyMC)
median expected limit: r < 1.94235 @ 95%CL (1 toyMC)
   68% expected band : 1.94235 < r < 1.94235
   95% expected band : 1.94235 < r < 1.94235
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1856595371
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32109 +/- 0.0075583 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.32109 @ 95%CL (1 toyMC)
median expected limit: r < 2.32109 @ 95%CL (1 toyMC)
   68% expected band : 2.32109 < r < 2.32109
   95% expected band : 2.32109 < r < 2.32109
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1171051403.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-117283481.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-118956467.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1191965455.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1212497212.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1262885176.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1314792528.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1317128183.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1353559037.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1410749909.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1444882626.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1467868647.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1554806234.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-155699539.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1558497211.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1647979221.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1654304860.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1658606469.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1665074575.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1665254511.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1666688051.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1692678851.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1736651868.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1801995166.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1826636474.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-1856595371.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-1905809966.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-1923976019.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-2084298504.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-2094046914.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-2104369784.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-255155657.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-284293471.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-343015950.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-382503088.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-452292000.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-491169347.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-493240847.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-55770028.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-598406806.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-695810753.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-698833253.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-738014765.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-741315644.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-80070354.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-899806000.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-921420028.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.1009761312.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1028291756.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1044997154.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1059349003.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1066877584.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1108015142.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1115806507.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1124657731.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1145349103.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1227268973.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1275161233.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1295182806.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1336524023.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1344590968.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1368109473.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.137340301.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1392578986.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1535959096.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1541526794.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1583864294.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1601256880.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1625283102.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1667734009.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1708983793.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1720048063.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1723982082.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1730957887.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.1731494150.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.1737719039.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.1772976283.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.1778176780.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.1990833680.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.1992962012.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.1996519306.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.2007200296.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.2016813933.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.2087778317.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.2129928269.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.272850734.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.304949147.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.338824327.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.3609289.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.435052277.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.437006503.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.456251789.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.592306268.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.716430790.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.729797472.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.754521991.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.765027087.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.7687349.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.820626471.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.84133444.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1416457043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87743 +/- 0.00840608 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.87743 @ 95%CL (1 toyMC)
median expected limit: r < 2.87743 @ 95%CL (1 toyMC)
   68% expected band : 2.87743 < r < 2.87743
   95% expected band : 2.87743 < r < 2.87743
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 371031916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.00244 +/- 0.00949893 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.00244 @ 95%CL (1 toyMC)
median expected limit: r < 5.00244 @ 95%CL (1 toyMC)
   68% expected band : 5.00244 < r < 5.00244
   95% expected band : 5.00244 < r < 5.00244
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1552791219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.99905 +/- 0.00659212 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.99905 @ 95%CL (1 toyMC)
median expected limit: r < 3.99905 @ 95%CL (1 toyMC)
   68% expected band : 3.99905 < r < 3.99905
   95% expected band : 3.99905 < r < 3.99905
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1766006685
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.57312 +/- 0.0103043 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.57312 @ 95%CL (1 toyMC)
median expected limit: r < 4.57312 @ 95%CL (1 toyMC)
   68% expected band : 4.57312 < r < 4.57312
   95% expected band : 4.57312 < r < 4.57312
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -453787729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.68719 +/- 0.00942872 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.68719 @ 95%CL (1 toyMC)
median expected limit: r < 2.68719 @ 95%CL (1 toyMC)
   68% expected band : 2.68719 < r < 2.68719
   95% expected band : 2.68719 < r < 2.68719
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1245334757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76365 +/- 0.00608432 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.76365 @ 95%CL (1 toyMC)
median expected limit: r < 1.76365 @ 95%CL (1 toyMC)
   68% expected band : 1.76365 < r < 1.76365
   95% expected band : 1.76365 < r < 1.76365
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1781318563
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.23811 +/- 0.00610195 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.23811 @ 95%CL (1 toyMC)
median expected limit: r < 4.23811 @ 95%CL (1 toyMC)
   68% expected band : 4.23811 < r < 4.23811
   95% expected band : 4.23811 < r < 4.23811
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 974073638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93975 +/- 0.00788804 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.93975 @ 95%CL (1 toyMC)
median expected limit: r < 2.93975 @ 95%CL (1 toyMC)
   68% expected band : 2.93975 < r < 2.93975
   95% expected band : 2.93975 < r < 2.93975
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 828246576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4765 +/- 0.00677191 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.4765 @ 95%CL (1 toyMC)
median expected limit: r < 3.4765 @ 95%CL (1 toyMC)
   68% expected band : 3.4765 < r < 3.4765
   95% expected band : 3.4765 < r < 3.4765
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 153452508
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4187 +/- 0.00730365 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.4187 @ 95%CL (1 toyMC)
median expected limit: r < 3.4187 @ 95%CL (1 toyMC)
   68% expected band : 3.4187 < r < 3.4187
   95% expected band : 3.4187 < r < 3.4187
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 755213335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92057 +/- 0.00739683 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.92057 @ 95%CL (1 toyMC)
median expected limit: r < 1.92057 @ 95%CL (1 toyMC)
   68% expected band : 1.92057 < r < 1.92057
   95% expected band : 1.92057 < r < 1.92057
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2146380047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6127 +/- 0.00591732 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.6127 @ 95%CL (1 toyMC)
median expected limit: r < 1.6127 @ 95%CL (1 toyMC)
   68% expected band : 1.6127 < r < 1.6127
   95% expected band : 1.6127 < r < 1.6127
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -603349571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.83544 +/- 0.00558692 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.83544 @ 95%CL (1 toyMC)
median expected limit: r < 1.83544 @ 95%CL (1 toyMC)
   68% expected band : 1.83544 < r < 1.83544
   95% expected band : 1.83544 < r < 1.83544
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1890526326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66728 +/- 0.0060541 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.66728 @ 95%CL (1 toyMC)
median expected limit: r < 1.66728 @ 95%CL (1 toyMC)
   68% expected band : 1.66728 < r < 1.66728
   95% expected band : 1.66728 < r < 1.66728
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 88832711
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.73423 +/- 0.00883173 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.73423 @ 95%CL (1 toyMC)
median expected limit: r < 2.73423 @ 95%CL (1 toyMC)
   68% expected band : 2.73423 < r < 2.73423
   95% expected band : 2.73423 < r < 2.73423
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 278000892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.09497 +/- 0.00822118 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.09497 @ 95%CL (1 toyMC)
median expected limit: r < 3.09497 @ 95%CL (1 toyMC)
   68% expected band : 3.09497 < r < 3.09497
   95% expected band : 3.09497 < r < 3.09497
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -63765579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49728 +/- 0.00830619 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.49728 @ 95%CL (1 toyMC)
median expected limit: r < 2.49728 @ 95%CL (1 toyMC)
   68% expected band : 2.49728 < r < 2.49728
   95% expected band : 2.49728 < r < 2.49728
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1481526478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29094 +/- 0.00714467 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.29094 @ 95%CL (1 toyMC)
median expected limit: r < 2.29094 @ 95%CL (1 toyMC)
   68% expected band : 2.29094 < r < 2.29094
   95% expected band : 2.29094 < r < 2.29094
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1728593603
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88085 +/- 0.00744281 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.88085 @ 95%CL (1 toyMC)
median expected limit: r < 2.88085 @ 95%CL (1 toyMC)
   68% expected band : 2.88085 < r < 2.88085
   95% expected band : 2.88085 < r < 2.88085
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -21484384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54484 +/- 0.00603443 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.54484 @ 95%CL (1 toyMC)
median expected limit: r < 1.54484 @ 95%CL (1 toyMC)
   68% expected band : 1.54484 < r < 1.54484
   95% expected band : 1.54484 < r < 1.54484
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1621830141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.82833 +/- 0.00723505 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.82833 @ 95%CL (1 toyMC)
median expected limit: r < 2.82833 @ 95%CL (1 toyMC)
   68% expected band : 2.82833 < r < 2.82833
   95% expected band : 2.82833 < r < 2.82833
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2088367199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.9959 +/- 0.00685949 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.9959 @ 95%CL (1 toyMC)
median expected limit: r < 1.9959 @ 95%CL (1 toyMC)
   68% expected band : 1.9959 < r < 1.9959
   95% expected band : 1.9959 < r < 1.9959
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 844143198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93868 +/- 0.00898331 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.93868 @ 95%CL (1 toyMC)
median expected limit: r < 2.93868 @ 95%CL (1 toyMC)
   68% expected band : 2.93868 < r < 2.93868
   95% expected band : 2.93868 < r < 2.93868
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -552415021
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.80129 +/- 0.00728497 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.80129 @ 95%CL (1 toyMC)
median expected limit: r < 2.80129 @ 95%CL (1 toyMC)
   68% expected band : 2.80129 < r < 2.80129
   95% expected band : 2.80129 < r < 2.80129
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2025995817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78832 +/- 0.00610451 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.78832 @ 95%CL (1 toyMC)
median expected limit: r < 1.78832 @ 95%CL (1 toyMC)
   68% expected band : 1.78832 < r < 1.78832
   95% expected band : 1.78832 < r < 1.78832
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1739626128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.62749 +/- 0.00776933 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.62749 @ 95%CL (1 toyMC)
median expected limit: r < 3.62749 @ 95%CL (1 toyMC)
   68% expected band : 3.62749 < r < 3.62749
   95% expected band : 3.62749 < r < 3.62749
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1082368083
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82856 +/- 0.00780886 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.82856 @ 95%CL (1 toyMC)
median expected limit: r < 1.82856 @ 95%CL (1 toyMC)
   68% expected band : 1.82856 < r < 1.82856
   95% expected band : 1.82856 < r < 1.82856
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -746984976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.21752 +/- 0.00806048 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.21752 @ 95%CL (1 toyMC)
median expected limit: r < 3.21752 @ 95%CL (1 toyMC)
   68% expected band : 3.21752 < r < 3.21752
   95% expected band : 3.21752 < r < 3.21752
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 778666330
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.25163 +/- 0.00657548 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.25163 @ 95%CL (1 toyMC)
median expected limit: r < 2.25163 @ 95%CL (1 toyMC)
   68% expected band : 2.25163 < r < 2.25163
   95% expected band : 2.25163 < r < 2.25163
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1606379633
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.49761 +/- 0.00744311 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.49761 @ 95%CL (1 toyMC)
median expected limit: r < 3.49761 @ 95%CL (1 toyMC)
   68% expected band : 3.49761 < r < 3.49761
   95% expected band : 3.49761 < r < 3.49761
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 708667288
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.02495 +/- 0.00638369 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.02495 @ 95%CL (1 toyMC)
median expected limit: r < 2.02495 @ 95%CL (1 toyMC)
   68% expected band : 2.02495 < r < 2.02495
   95% expected band : 2.02495 < r < 2.02495
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1161168892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.02821 +/- 0.00814747 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.02821 @ 95%CL (1 toyMC)
median expected limit: r < 3.02821 @ 95%CL (1 toyMC)
   68% expected band : 3.02821 < r < 3.02821
   95% expected band : 3.02821 < r < 3.02821
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -40836027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.94045 +/- 0.0079141 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.94045 @ 95%CL (1 toyMC)
median expected limit: r < 3.94045 @ 95%CL (1 toyMC)
   68% expected band : 3.94045 < r < 3.94045
   95% expected band : 3.94045 < r < 3.94045
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 375109569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79498 +/- 0.00807711 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.79498 @ 95%CL (1 toyMC)
median expected limit: r < 2.79498 @ 95%CL (1 toyMC)
   68% expected band : 2.79498 < r < 2.79498
   95% expected band : 2.79498 < r < 2.79498
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1149910893
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54164 +/- 0.00535981 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.54164 @ 95%CL (1 toyMC)
median expected limit: r < 2.54164 @ 95%CL (1 toyMC)
   68% expected band : 2.54164 < r < 2.54164
   95% expected band : 2.54164 < r < 2.54164
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1568567445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46897 +/- 0.00819761 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.46897 @ 95%CL (1 toyMC)
median expected limit: r < 3.46897 @ 95%CL (1 toyMC)
   68% expected band : 3.46897 < r < 3.46897
   95% expected band : 3.46897 < r < 3.46897
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 907772662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.32314 +/- 0.00846671 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.32314 @ 95%CL (1 toyMC)
median expected limit: r < 3.32314 @ 95%CL (1 toyMC)
   68% expected band : 3.32314 < r < 3.32314
   95% expected band : 3.32314 < r < 3.32314
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1997442165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.153 +/- 0.008139 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.153 @ 95%CL (1 toyMC)
median expected limit: r < 2.153 @ 95%CL (1 toyMC)
   68% expected band : 2.153 < r < 2.153
   95% expected band : 2.153 < r < 2.153
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 753019116
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46416 +/- 0.00792742 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.46416 @ 95%CL (1 toyMC)
median expected limit: r < 2.46416 @ 95%CL (1 toyMC)
   68% expected band : 2.46416 < r < 2.46416
   95% expected band : 2.46416 < r < 2.46416
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -463932979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7086 +/- 0.00751596 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.7086 @ 95%CL (1 toyMC)
median expected limit: r < 2.7086 @ 95%CL (1 toyMC)
   68% expected band : 2.7086 < r < 2.7086
   95% expected band : 2.7086 < r < 2.7086
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -966790460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.79016 +/- 0.00873543 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.79016 @ 95%CL (1 toyMC)
median expected limit: r < 3.79016 @ 95%CL (1 toyMC)
   68% expected band : 3.79016 < r < 3.79016
   95% expected band : 3.79016 < r < 3.79016
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1268764153
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.94551 +/- 0.00971259 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.94551 @ 95%CL (1 toyMC)
median expected limit: r < 3.94551 @ 95%CL (1 toyMC)
   68% expected band : 3.94551 < r < 3.94551
   95% expected band : 3.94551 < r < 3.94551
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -401916771
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.55951 +/- 0.00904631 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.55951 @ 95%CL (1 toyMC)
median expected limit: r < 3.55951 @ 95%CL (1 toyMC)
   68% expected band : 3.55951 < r < 3.55951
   95% expected band : 3.55951 < r < 3.55951
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1704409450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77869 +/- 0.00608791 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.77869 @ 95%CL (1 toyMC)
median expected limit: r < 2.77869 @ 95%CL (1 toyMC)
   68% expected band : 2.77869 < r < 2.77869
   95% expected band : 2.77869 < r < 2.77869
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -929161033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.52178 +/- 0.00648465 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.52178 @ 95%CL (1 toyMC)
median expected limit: r < 3.52178 @ 95%CL (1 toyMC)
   68% expected band : 3.52178 < r < 3.52178
   95% expected band : 3.52178 < r < 3.52178
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1033487048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.20278 +/- 0.00831344 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.20278 @ 95%CL (1 toyMC)
median expected limit: r < 2.20278 @ 95%CL (1 toyMC)
   68% expected band : 2.20278 < r < 2.20278
   95% expected band : 2.20278 < r < 2.20278
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 837720977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98859 +/- 0.0075742 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.98859 @ 95%CL (1 toyMC)
median expected limit: r < 2.98859 @ 95%CL (1 toyMC)
   68% expected band : 2.98859 < r < 2.98859
   95% expected band : 2.98859 < r < 2.98859
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1289442709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.40372 +/- 0.00925768 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.40372 @ 95%CL (1 toyMC)
median expected limit: r < 3.40372 @ 95%CL (1 toyMC)
   68% expected band : 3.40372 < r < 3.40372
   95% expected band : 3.40372 < r < 3.40372
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1664545958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39254 +/- 0.00441731 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.39254 @ 95%CL (1 toyMC)
median expected limit: r < 1.39254 @ 95%CL (1 toyMC)
   68% expected band : 1.39254 < r < 1.39254
   95% expected band : 1.39254 < r < 1.39254
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1990295285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.83727 +/- 0.00707195 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.83727 @ 95%CL (1 toyMC)
median expected limit: r < 2.83727 @ 95%CL (1 toyMC)
   68% expected band : 2.83727 < r < 2.83727
   95% expected band : 2.83727 < r < 2.83727
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1702112196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.74075 +/- 0.00759122 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.74075 @ 95%CL (1 toyMC)
median expected limit: r < 2.74075 @ 95%CL (1 toyMC)
   68% expected band : 2.74075 < r < 2.74075
   95% expected band : 2.74075 < r < 2.74075
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 605564577
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.7694 +/- 0.00774738 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.7694 @ 95%CL (1 toyMC)
median expected limit: r < 3.7694 @ 95%CL (1 toyMC)
   68% expected band : 3.7694 < r < 3.7694
   95% expected band : 3.7694 < r < 3.7694
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 496169420
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12102 +/- 0.00819752 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.12102 @ 95%CL (1 toyMC)
median expected limit: r < 3.12102 @ 95%CL (1 toyMC)
   68% expected band : 3.12102 < r < 3.12102
   95% expected band : 3.12102 < r < 3.12102
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1363191027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.78642 +/- 0.00886084 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.78642 @ 95%CL (1 toyMC)
median expected limit: r < 3.78642 @ 95%CL (1 toyMC)
   68% expected band : 3.78642 < r < 3.78642
   95% expected band : 3.78642 < r < 3.78642
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1150001212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.86695 +/- 0.00872942 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.86695 @ 95%CL (1 toyMC)
median expected limit: r < 3.86695 @ 95%CL (1 toyMC)
   68% expected band : 3.86695 < r < 3.86695
   95% expected band : 3.86695 < r < 3.86695
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1456627731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72843 +/- 0.00643027 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.72843 @ 95%CL (1 toyMC)
median expected limit: r < 1.72843 @ 95%CL (1 toyMC)
   68% expected band : 1.72843 < r < 1.72843
   95% expected band : 1.72843 < r < 1.72843
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -88460070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53691 +/- 0.00769383 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.53691 @ 95%CL (1 toyMC)
median expected limit: r < 2.53691 @ 95%CL (1 toyMC)
   68% expected band : 2.53691 < r < 2.53691
   95% expected band : 2.53691 < r < 2.53691
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2108817905
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62794 +/- 0.00839978 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.62794 @ 95%CL (1 toyMC)
median expected limit: r < 2.62794 @ 95%CL (1 toyMC)
   68% expected band : 2.62794 < r < 2.62794
   95% expected band : 2.62794 < r < 2.62794
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1084259877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.96421 +/- 0.00565137 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.96421 @ 95%CL (1 toyMC)
median expected limit: r < 1.96421 @ 95%CL (1 toyMC)
   68% expected band : 1.96421 < r < 1.96421
   95% expected band : 1.96421 < r < 1.96421
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -645336866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76292 +/- 0.00859361 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.76292 @ 95%CL (1 toyMC)
median expected limit: r < 2.76292 @ 95%CL (1 toyMC)
   68% expected band : 2.76292 < r < 2.76292
   95% expected band : 2.76292 < r < 2.76292
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -137388868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.06687 +/- 0.00586594 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.06687 @ 95%CL (1 toyMC)
median expected limit: r < 4.06687 @ 95%CL (1 toyMC)
   68% expected band : 4.06687 < r < 4.06687
   95% expected band : 4.06687 < r < 4.06687
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1940341134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8883 +/- 0.00565732 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.8883 @ 95%CL (1 toyMC)
median expected limit: r < 1.8883 @ 95%CL (1 toyMC)
   68% expected band : 1.8883 < r < 1.8883
   95% expected band : 1.8883 < r < 1.8883
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1598242744
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92569 +/- 0.00833549 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.92569 @ 95%CL (1 toyMC)
median expected limit: r < 2.92569 @ 95%CL (1 toyMC)
   68% expected band : 2.92569 < r < 2.92569
   95% expected band : 2.92569 < r < 2.92569
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1331584915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.85165 +/- 0.00914689 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.85165 @ 95%CL (1 toyMC)
median expected limit: r < 2.85165 @ 95%CL (1 toyMC)
   68% expected band : 2.85165 < r < 2.85165
   95% expected band : 2.85165 < r < 2.85165
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 357204757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.94968 +/- 0.00579426 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.94968 @ 95%CL (1 toyMC)
median expected limit: r < 1.94968 @ 95%CL (1 toyMC)
   68% expected band : 1.94968 < r < 1.94968
   95% expected band : 1.94968 < r < 1.94968
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1970014896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.06149 +/- 0.00698365 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.06149 @ 95%CL (1 toyMC)
median expected limit: r < 2.06149 @ 95%CL (1 toyMC)
   68% expected band : 2.06149 < r < 2.06149
   95% expected band : 2.06149 < r < 2.06149
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1278750527
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27761 +/- 0.00742928 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.27761 @ 95%CL (1 toyMC)
median expected limit: r < 2.27761 @ 95%CL (1 toyMC)
   68% expected band : 2.27761 < r < 2.27761
   95% expected band : 2.27761 < r < 2.27761
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 713287375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.43051 +/- 0.00691312 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.43051 @ 95%CL (1 toyMC)
median expected limit: r < 3.43051 @ 95%CL (1 toyMC)
   68% expected band : 3.43051 < r < 3.43051
   95% expected band : 3.43051 < r < 3.43051
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -953415380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37005 +/- 0.00548007 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.37005 @ 95%CL (1 toyMC)
median expected limit: r < 2.37005 @ 95%CL (1 toyMC)
   68% expected band : 2.37005 < r < 2.37005
   95% expected band : 2.37005 < r < 2.37005
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2121310739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.3925 +/- 0.00861957 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.3925 @ 95%CL (1 toyMC)
median expected limit: r < 3.3925 @ 95%CL (1 toyMC)
   68% expected band : 3.3925 < r < 3.3925
   95% expected band : 3.3925 < r < 3.3925
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -647519957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27828 +/- 0.0078024 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.27828 @ 95%CL (1 toyMC)
median expected limit: r < 3.27828 @ 95%CL (1 toyMC)
   68% expected band : 3.27828 < r < 3.27828
   95% expected band : 3.27828 < r < 3.27828
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -409677868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7555 +/- 0.0094439 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.7555 @ 95%CL (1 toyMC)
median expected limit: r < 2.7555 @ 95%CL (1 toyMC)
   68% expected band : 2.7555 < r < 2.7555
   95% expected band : 2.7555 < r < 2.7555
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 250989767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23119 +/- 0.00905898 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.23119 @ 95%CL (1 toyMC)
median expected limit: r < 3.23119 @ 95%CL (1 toyMC)
   68% expected band : 3.23119 < r < 3.23119
   95% expected band : 3.23119 < r < 3.23119
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -74593152
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17974 +/- 0.00981648 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.17974 @ 95%CL (1 toyMC)
median expected limit: r < 4.17974 @ 95%CL (1 toyMC)
   68% expected band : 4.17974 < r < 4.17974
   95% expected band : 4.17974 < r < 4.17974
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1838804624
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.199 +/- 0.00581804 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.199 @ 95%CL (1 toyMC)
median expected limit: r < 2.199 @ 95%CL (1 toyMC)
   68% expected band : 2.199 < r < 2.199
   95% expected band : 2.199 < r < 2.199
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -785136814
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42538 +/- 0.0046457 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.42538 @ 95%CL (1 toyMC)
median expected limit: r < 1.42538 @ 95%CL (1 toyMC)
   68% expected band : 1.42538 < r < 1.42538
   95% expected band : 1.42538 < r < 1.42538
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1717415559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64458 +/- 0.00747343 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.64458 @ 95%CL (1 toyMC)
median expected limit: r < 2.64458 @ 95%CL (1 toyMC)
   68% expected band : 2.64458 < r < 2.64458
   95% expected band : 2.64458 < r < 2.64458
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -22534433
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.99465 +/- 0.00894322 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.99465 @ 95%CL (1 toyMC)
median expected limit: r < 3.99465 @ 95%CL (1 toyMC)
   68% expected band : 3.99465 < r < 3.99465
   95% expected band : 3.99465 < r < 3.99465
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -936563328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.0977 +/- 0.00829353 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.0977 @ 95%CL (1 toyMC)
median expected limit: r < 4.0977 @ 95%CL (1 toyMC)
   68% expected band : 4.0977 < r < 4.0977
   95% expected band : 4.0977 < r < 4.0977
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 182370329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.01801 +/- 0.00622782 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.01801 @ 95%CL (1 toyMC)
median expected limit: r < 2.01801 @ 95%CL (1 toyMC)
   68% expected band : 2.01801 < r < 2.01801
   95% expected band : 2.01801 < r < 2.01801
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -555125477
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37908 +/- 0.00673647 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.37908 @ 95%CL (1 toyMC)
median expected limit: r < 2.37908 @ 95%CL (1 toyMC)
   68% expected band : 2.37908 < r < 2.37908
   95% expected band : 2.37908 < r < 2.37908
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1614579629
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.64507 +/- 0.00882102 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.64507 @ 95%CL (1 toyMC)
median expected limit: r < 4.64507 @ 95%CL (1 toyMC)
   68% expected band : 4.64507 < r < 4.64507
   95% expected band : 4.64507 < r < 4.64507
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1270732213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59945 +/- 0.00579266 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.59945 @ 95%CL (1 toyMC)
median expected limit: r < 1.59945 @ 95%CL (1 toyMC)
   68% expected band : 1.59945 < r < 1.59945
   95% expected band : 1.59945 < r < 1.59945
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1765380340
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.77048 +/- 0.00871869 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.77048 @ 95%CL (1 toyMC)
median expected limit: r < 3.77048 @ 95%CL (1 toyMC)
   68% expected band : 3.77048 < r < 3.77048
   95% expected band : 3.77048 < r < 3.77048
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1141463572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07769 +/- 0.00509019 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.07769 @ 95%CL (1 toyMC)
median expected limit: r < 2.07769 @ 95%CL (1 toyMC)
   68% expected band : 2.07769 < r < 2.07769
   95% expected band : 2.07769 < r < 2.07769
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 853058996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.75433 +/- 0.00987167 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.75433 @ 95%CL (1 toyMC)
median expected limit: r < 3.75433 @ 95%CL (1 toyMC)
   68% expected band : 3.75433 < r < 3.75433
   95% expected band : 3.75433 < r < 3.75433
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1899622165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56416 +/- 0.00551569 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.56416 @ 95%CL (1 toyMC)
median expected limit: r < 1.56416 @ 95%CL (1 toyMC)
   68% expected band : 1.56416 < r < 1.56416
   95% expected band : 1.56416 < r < 1.56416
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 67012366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60857 +/- 0.00755672 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.60857 @ 95%CL (1 toyMC)
median expected limit: r < 2.60857 @ 95%CL (1 toyMC)
   68% expected band : 2.60857 < r < 2.60857
   95% expected band : 2.60857 < r < 2.60857
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 734913577
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64137 +/- 0.00778779 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.64137 @ 95%CL (1 toyMC)
median expected limit: r < 2.64137 @ 95%CL (1 toyMC)
   68% expected band : 2.64137 < r < 2.64137
   95% expected band : 2.64137 < r < 2.64137
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1057764835
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.48616 +/- 0.00932536 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.48616 @ 95%CL (1 toyMC)
median expected limit: r < 3.48616 @ 95%CL (1 toyMC)
   68% expected band : 3.48616 < r < 3.48616
   95% expected band : 3.48616 < r < 3.48616
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1316418556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.05157 +/- 0.00662016 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.05157 @ 95%CL (1 toyMC)
median expected limit: r < 2.05157 @ 95%CL (1 toyMC)
   68% expected band : 2.05157 < r < 2.05157
   95% expected band : 2.05157 < r < 2.05157
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -765038232
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.95381 +/- 0.00673323 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.95381 @ 95%CL (1 toyMC)
median expected limit: r < 1.95381 @ 95%CL (1 toyMC)
   68% expected band : 1.95381 < r < 1.95381
   95% expected band : 1.95381 < r < 1.95381
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1399584292
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10103 +/- 0.00726571 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.10103 @ 95%CL (1 toyMC)
median expected limit: r < 2.10103 @ 95%CL (1 toyMC)
   68% expected band : 2.10103 < r < 2.10103
   95% expected band : 2.10103 < r < 2.10103
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -359115882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.5803 +/- 0.0122821 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.5803 @ 95%CL (1 toyMC)
median expected limit: r < 7.5803 @ 95%CL (1 toyMC)
   68% expected band : 7.5803 < r < 7.5803
   95% expected band : 7.5803 < r < 7.5803
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -73433411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.3892 +/- 0.00713315 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.3892 @ 95%CL (1 toyMC)
median expected limit: r < 2.3892 @ 95%CL (1 toyMC)
   68% expected band : 2.3892 < r < 2.3892
   95% expected band : 2.3892 < r < 2.3892
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 64139938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.27065 +/- 0.00966819 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.27065 @ 95%CL (1 toyMC)
median expected limit: r < 4.27065 @ 95%CL (1 toyMC)
   68% expected band : 4.27065 < r < 4.27065
   95% expected band : 4.27065 < r < 4.27065
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1170430695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.53867 +/- 0.00911989 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.53867 @ 95%CL (1 toyMC)
median expected limit: r < 4.53867 @ 95%CL (1 toyMC)
   68% expected band : 4.53867 < r < 4.53867
   95% expected band : 4.53867 < r < 4.53867
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1779108309
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.40541 +/- 0.0100261 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.40541 @ 95%CL (1 toyMC)
median expected limit: r < 4.40541 @ 95%CL (1 toyMC)
   68% expected band : 4.40541 < r < 4.40541
   95% expected band : 4.40541 < r < 4.40541
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -934208018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37281 +/- 0.00741773 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.37281 @ 95%CL (1 toyMC)
median expected limit: r < 2.37281 @ 95%CL (1 toyMC)
   68% expected band : 2.37281 < r < 2.37281
   95% expected band : 2.37281 < r < 2.37281
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1005999415
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.31772 +/- 0.00765061 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.31772 @ 95%CL (1 toyMC)
median expected limit: r < 2.31772 @ 95%CL (1 toyMC)
   68% expected band : 2.31772 < r < 2.31772
   95% expected band : 2.31772 < r < 2.31772
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1141463572.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1150001212.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1161168892.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1170430695.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1270732213.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1278750527.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1289442709.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1331584915.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-137388868.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1399584292.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1481526478.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1552791219.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1568567445.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1598242744.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1614579629.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1717415559.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1739626128.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1765380340.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1766006685.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1781318563.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1838804624.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1890526326.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1990295285.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-2025995817.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-21484384.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-22534433.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-359115882.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-401916771.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-40836027.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-409677868.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-453787729.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-463932979.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-552415021.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-555125477.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-603349571.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-63765579.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-645336866.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-647519957.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-73433411.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-74593152.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-746984976.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-765038232.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-785136814.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-88460070.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-929161033.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-934208018.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-936563328.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.-953415380.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.-966790460.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1005999415.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1033487048.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1057764835.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1082368083.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1084259877.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1149910893.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1245334757.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1268764153.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1316418556.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1363191027.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1416457043.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1456627731.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.153452508.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1606379633.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1621830141.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1664545958.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1702112196.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1704409450.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1728593603.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1779108309.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.182370329.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1899622165.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1940341134.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1970014896.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1997442165.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.2088367199.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.2108817905.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.2121310739.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.2146380047.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.250989767.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.278000892.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.357204757.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.371031916.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.375109569.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.496169420.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.605564577.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.64139938.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.67012366.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.708667288.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.713287375.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.734913577.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.753019116.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.755213335.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.778666330.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.828246576.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.837720977.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.844143198.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.853058996.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.88832711.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.907772662.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.974073638.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1063737860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98682 +/- 0.00669999 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.98682 @ 95%CL (1 toyMC)
median expected limit: r < 2.98682 @ 95%CL (1 toyMC)
   68% expected band : 2.98682 < r < 2.98682
   95% expected band : 2.98682 < r < 2.98682
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1477236656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.4691 +/- 0.00900799 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.4691 @ 95%CL (1 toyMC)
median expected limit: r < 4.4691 @ 95%CL (1 toyMC)
   68% expected band : 4.4691 < r < 4.4691
   95% expected band : 4.4691 < r < 4.4691
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 907922599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.44632 +/- 0.00712608 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.44632 @ 95%CL (1 toyMC)
median expected limit: r < 2.44632 @ 95%CL (1 toyMC)
   68% expected band : 2.44632 < r < 2.44632
   95% expected band : 2.44632 < r < 2.44632
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 624361118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.98019 +/- 0.00820626 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.98019 @ 95%CL (1 toyMC)
median expected limit: r < 4.98019 @ 95%CL (1 toyMC)
   68% expected band : 4.98019 < r < 4.98019
   95% expected band : 4.98019 < r < 4.98019
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -35587469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50898 +/- 0.00708401 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.50898 @ 95%CL (1 toyMC)
median expected limit: r < 2.50898 @ 95%CL (1 toyMC)
   68% expected band : 2.50898 < r < 2.50898
   95% expected band : 2.50898 < r < 2.50898
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -335875985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93483 +/- 0.00616585 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.93483 @ 95%CL (1 toyMC)
median expected limit: r < 2.93483 @ 95%CL (1 toyMC)
   68% expected band : 2.93483 < r < 2.93483
   95% expected band : 2.93483 < r < 2.93483
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 887282630
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4414 +/- 0.00806431 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.4414 @ 95%CL (1 toyMC)
median expected limit: r < 3.4414 @ 95%CL (1 toyMC)
   68% expected band : 3.4414 < r < 3.4414
   95% expected band : 3.4414 < r < 3.4414
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1884862681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.98125 +/- 0.00862582 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.98125 @ 95%CL (1 toyMC)
median expected limit: r < 4.98125 @ 95%CL (1 toyMC)
   68% expected band : 4.98125 < r < 4.98125
   95% expected band : 4.98125 < r < 4.98125
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -696785278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27165 +/- 0.00538154 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.27165 @ 95%CL (1 toyMC)
median expected limit: r < 2.27165 @ 95%CL (1 toyMC)
   68% expected band : 2.27165 < r < 2.27165
   95% expected band : 2.27165 < r < 2.27165
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 161663708
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.56654 +/- 0.00600833 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.56654 @ 95%CL (1 toyMC)
median expected limit: r < 2.56654 @ 95%CL (1 toyMC)
   68% expected band : 2.56654 < r < 2.56654
   95% expected band : 2.56654 < r < 2.56654
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1256348333
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.8048 +/- 0.0098351 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.8048 @ 95%CL (1 toyMC)
median expected limit: r < 6.8048 @ 95%CL (1 toyMC)
   68% expected band : 6.8048 < r < 6.8048
   95% expected band : 6.8048 < r < 6.8048
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -808080799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59684 +/- 0.00499051 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.59684 @ 95%CL (1 toyMC)
median expected limit: r < 1.59684 @ 95%CL (1 toyMC)
   68% expected band : 1.59684 < r < 1.59684
   95% expected band : 1.59684 < r < 1.59684
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1836975977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.45863 +/- 0.00539606 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.45863 @ 95%CL (1 toyMC)
median expected limit: r < 2.45863 @ 95%CL (1 toyMC)
   68% expected band : 2.45863 < r < 2.45863
   95% expected band : 2.45863 < r < 2.45863
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 457993332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59717 +/- 0.00548519 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.59717 @ 95%CL (1 toyMC)
median expected limit: r < 2.59717 @ 95%CL (1 toyMC)
   68% expected band : 2.59717 < r < 2.59717
   95% expected band : 2.59717 < r < 2.59717
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1423247396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.17093 +/- 0.00742984 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.17093 @ 95%CL (1 toyMC)
median expected limit: r < 3.17093 @ 95%CL (1 toyMC)
   68% expected band : 3.17093 < r < 3.17093
   95% expected band : 3.17093 < r < 3.17093
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -331449516
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62751 +/- 0.00572004 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.62751 @ 95%CL (1 toyMC)
median expected limit: r < 2.62751 @ 95%CL (1 toyMC)
   68% expected band : 2.62751 < r < 2.62751
   95% expected band : 2.62751 < r < 2.62751
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1875428070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.84178 +/- 0.009091 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.84178 @ 95%CL (1 toyMC)
median expected limit: r < 6.84178 @ 95%CL (1 toyMC)
   68% expected band : 6.84178 < r < 6.84178
   95% expected band : 6.84178 < r < 6.84178
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -370444686
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7638 +/- 0.00632383 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.7638 @ 95%CL (1 toyMC)
median expected limit: r < 2.7638 @ 95%CL (1 toyMC)
   68% expected band : 2.7638 < r < 2.7638
   95% expected band : 2.7638 < r < 2.7638
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1081285821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.26995 +/- 0.00740512 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.26995 @ 95%CL (1 toyMC)
median expected limit: r < 3.26995 @ 95%CL (1 toyMC)
   68% expected band : 3.26995 < r < 3.26995
   95% expected band : 3.26995 < r < 3.26995
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1091857674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.72394 +/- 0.00659355 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.72394 @ 95%CL (1 toyMC)
median expected limit: r < 3.72394 @ 95%CL (1 toyMC)
   68% expected band : 3.72394 < r < 3.72394
   95% expected band : 3.72394 < r < 3.72394
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -934829070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.87669 +/- 0.0103121 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 3.87669 @ 95%CL (1 toyMC)
median expected limit: r < 3.87669 @ 95%CL (1 toyMC)
   68% expected band : 3.87669 < r < 3.87669
   95% expected band : 3.87669 < r < 3.87669
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -293041684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33433 +/- 0.00575181 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.33433 @ 95%CL (1 toyMC)
median expected limit: r < 3.33433 @ 95%CL (1 toyMC)
   68% expected band : 3.33433 < r < 3.33433
   95% expected band : 3.33433 < r < 3.33433
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1669569637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28654 +/- 0.00582781 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.28654 @ 95%CL (1 toyMC)
median expected limit: r < 2.28654 @ 95%CL (1 toyMC)
   68% expected band : 2.28654 < r < 2.28654
   95% expected band : 2.28654 < r < 2.28654
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1660947126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.00055 +/- 0.00698366 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.00055 @ 95%CL (1 toyMC)
median expected limit: r < 4.00055 @ 95%CL (1 toyMC)
   68% expected band : 4.00055 < r < 4.00055
   95% expected band : 4.00055 < r < 4.00055
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1078116259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.88089 +/- 0.00841071 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.88089 @ 95%CL (1 toyMC)
median expected limit: r < 3.88089 @ 95%CL (1 toyMC)
   68% expected band : 3.88089 < r < 3.88089
   95% expected band : 3.88089 < r < 3.88089
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2116262162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91844 +/- 0.00797361 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.91844 @ 95%CL (1 toyMC)
median expected limit: r < 2.91844 @ 95%CL (1 toyMC)
   68% expected band : 2.91844 < r < 2.91844
   95% expected band : 2.91844 < r < 2.91844
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -404795058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.01212 +/- 0.00735179 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.01212 @ 95%CL (1 toyMC)
median expected limit: r < 3.01212 @ 95%CL (1 toyMC)
   68% expected band : 3.01212 < r < 3.01212
   95% expected band : 3.01212 < r < 3.01212
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1522664983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.95659 +/- 0.00561417 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.95659 @ 95%CL (1 toyMC)
median expected limit: r < 2.95659 @ 95%CL (1 toyMC)
   68% expected band : 2.95659 < r < 2.95659
   95% expected band : 2.95659 < r < 2.95659
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 714510850
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8832 +/- 0.0070345 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.8832 @ 95%CL (1 toyMC)
median expected limit: r < 2.8832 @ 95%CL (1 toyMC)
   68% expected band : 2.8832 < r < 2.8832
   95% expected band : 2.8832 < r < 2.8832
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 599940276
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.75699 +/- 0.00743793 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.75699 @ 95%CL (1 toyMC)
median expected limit: r < 2.75699 @ 95%CL (1 toyMC)
   68% expected band : 2.75699 < r < 2.75699
   95% expected band : 2.75699 < r < 2.75699
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1161121926
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.58875 +/- 0.00873415 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.58875 @ 95%CL (1 toyMC)
median expected limit: r < 3.58875 @ 95%CL (1 toyMC)
   68% expected band : 3.58875 < r < 3.58875
   95% expected band : 3.58875 < r < 3.58875
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 792055202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.94826 +/- 0.0048907 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.94826 @ 95%CL (1 toyMC)
median expected limit: r < 1.94826 @ 95%CL (1 toyMC)
   68% expected band : 1.94826 < r < 1.94826
   95% expected band : 1.94826 < r < 1.94826
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 10836965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67289 +/- 0.00617647 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.67289 @ 95%CL (1 toyMC)
median expected limit: r < 2.67289 @ 95%CL (1 toyMC)
   68% expected band : 2.67289 < r < 2.67289
   95% expected band : 2.67289 < r < 2.67289
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 670890984
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.32964 +/- 0.00880712 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.32964 @ 95%CL (1 toyMC)
median expected limit: r < 5.32964 @ 95%CL (1 toyMC)
   68% expected band : 5.32964 < r < 5.32964
   95% expected band : 5.32964 < r < 5.32964
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -349825576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.19723 +/- 0.00679381 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.19723 @ 95%CL (1 toyMC)
median expected limit: r < 2.19723 @ 95%CL (1 toyMC)
   68% expected band : 2.19723 < r < 2.19723
   95% expected band : 2.19723 < r < 2.19723
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -729227658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.84089 +/- 0.00724291 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.84089 @ 95%CL (1 toyMC)
median expected limit: r < 2.84089 @ 95%CL (1 toyMC)
   68% expected band : 2.84089 < r < 2.84089
   95% expected band : 2.84089 < r < 2.84089
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -838659539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24994 +/- 0.007354 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.24994 @ 95%CL (1 toyMC)
median expected limit: r < 3.24994 @ 95%CL (1 toyMC)
   68% expected band : 3.24994 < r < 3.24994
   95% expected band : 3.24994 < r < 3.24994
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1548768953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.99977 +/- 0.00704902 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.99977 @ 95%CL (1 toyMC)
median expected limit: r < 3.99977 @ 95%CL (1 toyMC)
   68% expected band : 3.99977 < r < 3.99977
   95% expected band : 3.99977 < r < 3.99977
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2019149108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88869 +/- 0.00704399 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.88869 @ 95%CL (1 toyMC)
median expected limit: r < 2.88869 @ 95%CL (1 toyMC)
   68% expected band : 2.88869 < r < 2.88869
   95% expected band : 2.88869 < r < 2.88869
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -944080097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.51536 +/- 0.00937621 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.51536 @ 95%CL (1 toyMC)
median expected limit: r < 4.51536 @ 95%CL (1 toyMC)
   68% expected band : 4.51536 < r < 4.51536
   95% expected band : 4.51536 < r < 4.51536
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -638191677
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.71517 +/- 0.00896588 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.71517 @ 95%CL (1 toyMC)
median expected limit: r < 3.71517 @ 95%CL (1 toyMC)
   68% expected band : 3.71517 < r < 3.71517
   95% expected band : 3.71517 < r < 3.71517
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1267189979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.0088 +/- 0.00574533 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.0088 @ 95%CL (1 toyMC)
median expected limit: r < 2.0088 @ 95%CL (1 toyMC)
   68% expected band : 2.0088 < r < 2.0088
   95% expected band : 2.0088 < r < 2.0088
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 563018952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12927 +/- 0.00845342 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.12927 @ 95%CL (1 toyMC)
median expected limit: r < 3.12927 @ 95%CL (1 toyMC)
   68% expected band : 3.12927 < r < 3.12927
   95% expected band : 3.12927 < r < 3.12927
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -609921531
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.469 +/- 0.00757367 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.469 @ 95%CL (1 toyMC)
median expected limit: r < 3.469 @ 95%CL (1 toyMC)
   68% expected band : 3.469 < r < 3.469
   95% expected band : 3.469 < r < 3.469
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1063726040
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.13802 +/- 0.00825048 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.13802 @ 95%CL (1 toyMC)
median expected limit: r < 4.13802 @ 95%CL (1 toyMC)
   68% expected band : 4.13802 < r < 4.13802
   95% expected band : 4.13802 < r < 4.13802
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -448190565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.03661 +/- 0.0108536 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.03661 @ 95%CL (1 toyMC)
median expected limit: r < 6.03661 @ 95%CL (1 toyMC)
   68% expected band : 6.03661 < r < 6.03661
   95% expected band : 6.03661 < r < 6.03661
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2027317182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.85807 +/- 0.00595584 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.85807 @ 95%CL (1 toyMC)
median expected limit: r < 2.85807 @ 95%CL (1 toyMC)
   68% expected band : 2.85807 < r < 2.85807
   95% expected band : 2.85807 < r < 2.85807
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 375259656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39368 +/- 0.00533376 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.39368 @ 95%CL (1 toyMC)
median expected limit: r < 2.39368 @ 95%CL (1 toyMC)
   68% expected band : 2.39368 < r < 2.39368
   95% expected band : 2.39368 < r < 2.39368
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -193851715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13188 +/- 0.0073273 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.13188 @ 95%CL (1 toyMC)
median expected limit: r < 3.13188 @ 95%CL (1 toyMC)
   68% expected band : 3.13188 < r < 3.13188
   95% expected band : 3.13188 < r < 3.13188
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1049632404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99611 +/- 0.00699163 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.99611 @ 95%CL (1 toyMC)
median expected limit: r < 2.99611 @ 95%CL (1 toyMC)
   68% expected band : 2.99611 < r < 2.99611
   95% expected band : 2.99611 < r < 2.99611
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1464400333
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54611 +/- 0.00777105 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.54611 @ 95%CL (1 toyMC)
median expected limit: r < 2.54611 @ 95%CL (1 toyMC)
   68% expected band : 2.54611 < r < 2.54611
   95% expected band : 2.54611 < r < 2.54611
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -427033216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.30874 +/- 0.0053684 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.30874 @ 95%CL (1 toyMC)
median expected limit: r < 2.30874 @ 95%CL (1 toyMC)
   68% expected band : 2.30874 < r < 2.30874
   95% expected band : 2.30874 < r < 2.30874
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1878727915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.30021 +/- 0.00877647 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.30021 @ 95%CL (1 toyMC)
median expected limit: r < 4.30021 @ 95%CL (1 toyMC)
   68% expected band : 4.30021 < r < 4.30021
   95% expected band : 4.30021 < r < 4.30021
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1647939530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.39522 +/- 0.00795031 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.39522 @ 95%CL (1 toyMC)
median expected limit: r < 4.39522 @ 95%CL (1 toyMC)
   68% expected band : 4.39522 < r < 4.39522
   95% expected band : 4.39522 < r < 4.39522
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1455759838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.31181 +/- 0.00961154 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.31181 @ 95%CL (1 toyMC)
median expected limit: r < 5.31181 @ 95%CL (1 toyMC)
   68% expected band : 5.31181 < r < 5.31181
   95% expected band : 5.31181 < r < 5.31181
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1550283114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78422 +/- 0.00465477 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.78422 @ 95%CL (1 toyMC)
median expected limit: r < 1.78422 @ 95%CL (1 toyMC)
   68% expected band : 1.78422 < r < 1.78422
   95% expected band : 1.78422 < r < 1.78422
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1540948222
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40181 +/- 0.00544489 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.40181 @ 95%CL (1 toyMC)
median expected limit: r < 2.40181 @ 95%CL (1 toyMC)
   68% expected band : 2.40181 < r < 2.40181
   95% expected band : 2.40181 < r < 2.40181
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -251614922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.4553 +/- 0.00745029 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.4553 @ 95%CL (1 toyMC)
median expected limit: r < 5.4553 @ 95%CL (1 toyMC)
   68% expected band : 5.4553 < r < 5.4553
   95% expected band : 5.4553 < r < 5.4553
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1954914014
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40445 +/- 0.00543935 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.40445 @ 95%CL (1 toyMC)
median expected limit: r < 2.40445 @ 95%CL (1 toyMC)
   68% expected band : 2.40445 < r < 2.40445
   95% expected band : 2.40445 < r < 2.40445
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -808449535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00381 +/- 0.00472368 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.00381 @ 95%CL (1 toyMC)
median expected limit: r < 2.00381 @ 95%CL (1 toyMC)
   68% expected band : 2.00381 < r < 2.00381
   95% expected band : 2.00381 < r < 2.00381
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1860811958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.33354 +/- 0.00893581 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.33354 @ 95%CL (1 toyMC)
median expected limit: r < 7.33354 @ 95%CL (1 toyMC)
   68% expected band : 7.33354 < r < 7.33354
   95% expected band : 7.33354 < r < 7.33354
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 214628428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.73862 +/- 0.00913365 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.73862 @ 95%CL (1 toyMC)
median expected limit: r < 4.73862 @ 95%CL (1 toyMC)
   68% expected band : 4.73862 < r < 4.73862
   95% expected band : 4.73862 < r < 4.73862
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 140066692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.20531 +/- 0.00725923 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.20531 @ 95%CL (1 toyMC)
median expected limit: r < 3.20531 @ 95%CL (1 toyMC)
   68% expected band : 3.20531 < r < 3.20531
   95% expected band : 3.20531 < r < 3.20531
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -798921726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53262 +/- 0.00576748 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.53262 @ 95%CL (1 toyMC)
median expected limit: r < 2.53262 @ 95%CL (1 toyMC)
   68% expected band : 2.53262 < r < 2.53262
   95% expected band : 2.53262 < r < 2.53262
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1051495449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41196 +/- 0.00466777 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.41196 @ 95%CL (1 toyMC)
median expected limit: r < 1.41196 @ 95%CL (1 toyMC)
   68% expected band : 1.41196 < r < 1.41196
   95% expected band : 1.41196 < r < 1.41196
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -558341421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.09431 +/- 0.00696531 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.09431 @ 95%CL (1 toyMC)
median expected limit: r < 4.09431 @ 95%CL (1 toyMC)
   68% expected band : 4.09431 < r < 4.09431
   95% expected band : 4.09431 < r < 4.09431
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1831163875
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.70104 +/- 0.00872029 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.70104 @ 95%CL (1 toyMC)
median expected limit: r < 3.70104 @ 95%CL (1 toyMC)
   68% expected band : 3.70104 < r < 3.70104
   95% expected band : 3.70104 < r < 3.70104
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 267356252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.71874 +/- 0.00889769 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.71874 @ 95%CL (1 toyMC)
median expected limit: r < 4.71874 @ 95%CL (1 toyMC)
   68% expected band : 4.71874 < r < 4.71874
   95% expected band : 4.71874 < r < 4.71874
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 841584984
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.96553 +/- 0.00714697 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 3.96553 @ 95%CL (1 toyMC)
median expected limit: r < 3.96553 @ 95%CL (1 toyMC)
   68% expected band : 3.96553 < r < 3.96553
   95% expected band : 3.96553 < r < 3.96553
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 343050054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0861 +/- 0.00694336 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.0861 @ 95%CL (1 toyMC)
median expected limit: r < 3.0861 @ 95%CL (1 toyMC)
   68% expected band : 3.0861 < r < 3.0861
   95% expected band : 3.0861 < r < 3.0861
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1374301539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67794 +/- 0.00557138 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.67794 @ 95%CL (1 toyMC)
median expected limit: r < 1.67794 @ 95%CL (1 toyMC)
   68% expected band : 1.67794 < r < 1.67794
   95% expected band : 1.67794 < r < 1.67794
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1987099569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.01054 +/- 0.00542276 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.01054 @ 95%CL (1 toyMC)
median expected limit: r < 2.01054 @ 95%CL (1 toyMC)
   68% expected band : 2.01054 < r < 2.01054
   95% expected band : 2.01054 < r < 2.01054
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1856387570
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42917 +/- 0.00578212 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.42917 @ 95%CL (1 toyMC)
median expected limit: r < 2.42917 @ 95%CL (1 toyMC)
   68% expected band : 2.42917 < r < 2.42917
   95% expected band : 2.42917 < r < 2.42917
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1488819072
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.74861 +/- 0.00776695 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.74861 @ 95%CL (1 toyMC)
median expected limit: r < 5.74861 @ 95%CL (1 toyMC)
   68% expected band : 5.74861 < r < 5.74861
   95% expected band : 5.74861 < r < 5.74861
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1768944978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16735 +/- 0.00787926 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.16735 @ 95%CL (1 toyMC)
median expected limit: r < 3.16735 @ 95%CL (1 toyMC)
   68% expected band : 3.16735 < r < 3.16735
   95% expected band : 3.16735 < r < 3.16735
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 613496262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12559 +/- 0.00810484 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.12559 @ 95%CL (1 toyMC)
median expected limit: r < 3.12559 @ 95%CL (1 toyMC)
   68% expected band : 3.12559 < r < 3.12559
   95% expected band : 3.12559 < r < 3.12559
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1581001091
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27289 +/- 0.00554785 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.27289 @ 95%CL (1 toyMC)
median expected limit: r < 2.27289 @ 95%CL (1 toyMC)
   68% expected band : 2.27289 < r < 2.27289
   95% expected band : 2.27289 < r < 2.27289
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1242905519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.95403 +/- 0.00684182 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.95403 @ 95%CL (1 toyMC)
median expected limit: r < 2.95403 @ 95%CL (1 toyMC)
   68% expected band : 2.95403 < r < 2.95403
   95% expected band : 2.95403 < r < 2.95403
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1524221044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.99477 +/- 0.00980141 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.99477 @ 95%CL (1 toyMC)
median expected limit: r < 5.99477 @ 95%CL (1 toyMC)
   68% expected band : 5.99477 < r < 5.99477
   95% expected band : 5.99477 < r < 5.99477
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1742847042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81818 +/- 0.00591512 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.81818 @ 95%CL (1 toyMC)
median expected limit: r < 1.81818 @ 95%CL (1 toyMC)
   68% expected band : 1.81818 < r < 1.81818
   95% expected band : 1.81818 < r < 1.81818
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -595019860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82852 +/- 0.00559595 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.82852 @ 95%CL (1 toyMC)
median expected limit: r < 1.82852 @ 95%CL (1 toyMC)
   68% expected band : 1.82852 < r < 1.82852
   95% expected band : 1.82852 < r < 1.82852
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1117905575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32522 +/- 0.00643333 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.32522 @ 95%CL (1 toyMC)
median expected limit: r < 2.32522 @ 95%CL (1 toyMC)
   68% expected band : 2.32522 < r < 2.32522
   95% expected band : 2.32522 < r < 2.32522
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1690950595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.58702 +/- 0.0082958 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.58702 @ 95%CL (1 toyMC)
median expected limit: r < 3.58702 @ 95%CL (1 toyMC)
   68% expected band : 3.58702 < r < 3.58702
   95% expected band : 3.58702 < r < 3.58702
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -306948412
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.23092 +/- 0.00629902 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.23092 @ 95%CL (1 toyMC)
median expected limit: r < 2.23092 @ 95%CL (1 toyMC)
   68% expected band : 2.23092 < r < 2.23092
   95% expected band : 2.23092 < r < 2.23092
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 828014549
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.74334 +/- 0.00838016 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.74334 @ 95%CL (1 toyMC)
median expected limit: r < 3.74334 @ 95%CL (1 toyMC)
   68% expected band : 3.74334 < r < 3.74334
   95% expected band : 3.74334 < r < 3.74334
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 642017036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.36606 +/- 0.00982164 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.36606 @ 95%CL (1 toyMC)
median expected limit: r < 5.36606 @ 95%CL (1 toyMC)
   68% expected band : 5.36606 < r < 5.36606
   95% expected band : 5.36606 < r < 5.36606
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 629753382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.4464 +/- 0.00808712 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.4464 @ 95%CL (1 toyMC)
median expected limit: r < 4.4464 @ 95%CL (1 toyMC)
   68% expected band : 4.4464 < r < 4.4464
   95% expected band : 4.4464 < r < 4.4464
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1694404636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.86813 +/- 0.00868071 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.86813 @ 95%CL (1 toyMC)
median expected limit: r < 3.86813 @ 95%CL (1 toyMC)
   68% expected band : 3.86813 < r < 3.86813
   95% expected band : 3.86813 < r < 3.86813
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 430946003
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.35441 +/- 0.00557041 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.35441 @ 95%CL (1 toyMC)
median expected limit: r < 2.35441 @ 95%CL (1 toyMC)
   68% expected band : 2.35441 < r < 2.35441
   95% expected band : 2.35441 < r < 2.35441
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1089480235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2941 +/- 0.00780339 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.2941 @ 95%CL (1 toyMC)
median expected limit: r < 3.2941 @ 95%CL (1 toyMC)
   68% expected band : 3.2941 < r < 3.2941
   95% expected band : 3.2941 < r < 3.2941
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -392503013
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93695 +/- 0.00616678 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.93695 @ 95%CL (1 toyMC)
median expected limit: r < 2.93695 @ 95%CL (1 toyMC)
   68% expected band : 2.93695 < r < 2.93695
   95% expected band : 2.93695 < r < 2.93695
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -589653162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78653 +/- 0.00515248 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.78653 @ 95%CL (1 toyMC)
median expected limit: r < 2.78653 @ 95%CL (1 toyMC)
   68% expected band : 2.78653 < r < 2.78653
   95% expected band : 2.78653 < r < 2.78653
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1105583135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67357 +/- 0.00547609 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.67357 @ 95%CL (1 toyMC)
median expected limit: r < 2.67357 @ 95%CL (1 toyMC)
   68% expected band : 2.67357 < r < 2.67357
   95% expected band : 2.67357 < r < 2.67357
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2083554520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.2257 +/- 0.00968989 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.2257 @ 95%CL (1 toyMC)
median expected limit: r < 4.2257 @ 95%CL (1 toyMC)
   68% expected band : 4.2257 < r < 4.2257
   95% expected band : 4.2257 < r < 4.2257
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 466351475
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04893 +/- 0.0061525 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.04893 @ 95%CL (1 toyMC)
median expected limit: r < 3.04893 @ 95%CL (1 toyMC)
   68% expected band : 3.04893 < r < 3.04893
   95% expected band : 3.04893 < r < 3.04893
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -371258472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.93969 +/- 0.00527504 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.93969 @ 95%CL (1 toyMC)
median expected limit: r < 1.93969 @ 95%CL (1 toyMC)
   68% expected band : 1.93969 < r < 1.93969
   95% expected band : 1.93969 < r < 1.93969
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1968083169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.91605 +/- 0.00841523 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.91605 @ 95%CL (1 toyMC)
median expected limit: r < 4.91605 @ 95%CL (1 toyMC)
   68% expected band : 4.91605 < r < 4.91605
   95% expected band : 4.91605 < r < 4.91605
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -235121925
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90713 +/- 0.00749581 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.90713 @ 95%CL (1 toyMC)
median expected limit: r < 2.90713 @ 95%CL (1 toyMC)
   68% expected band : 2.90713 < r < 2.90713
   95% expected band : 2.90713 < r < 2.90713
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1091243178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.1848 +/- 0.00580563 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.1848 @ 95%CL (1 toyMC)
median expected limit: r < 2.1848 @ 95%CL (1 toyMC)
   68% expected band : 2.1848 < r < 2.1848
   95% expected band : 2.1848 < r < 2.1848
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 561259440
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6107 +/- 0.00697738 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.6107 @ 95%CL (1 toyMC)
median expected limit: r < 2.6107 @ 95%CL (1 toyMC)
   68% expected band : 2.6107 < r < 2.6107
   95% expected band : 2.6107 < r < 2.6107
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1051495449.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1063726040.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1078116259.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1081285821.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1091243178.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1091857674.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1117905575.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1161121926.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1242905519.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1256348333.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1423247396.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1477236656.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1488819072.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1522664983.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1524221044.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1540948222.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1647939530.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1669569637.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1690950595.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1742847042.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1831163875.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1856387570.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1875428070.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-193851715.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1954914014.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-2083554520.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-235121925.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-251614922.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-293041684.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-306948412.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-331449516.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-335875985.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-349825576.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-35587469.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-370444686.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-371258472.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-392503013.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-404795058.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-427033216.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-448190565.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-558341421.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-589653162.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-595019860.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-609921531.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-638191677.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-696785278.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-729227658.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.-798921726.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.-808080799.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.-808449535.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.-838659539.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.-934829070.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.-944080097.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1049632404.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1063737860.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.10836965.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1089480235.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1105583135.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1267189979.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1374301539.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.140066692.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1455759838.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1464400333.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1548768953.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1550283114.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1581001091.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.161663708.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1660947126.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1694404636.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1768944978.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1836975977.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1860811958.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1878727915.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1884862681.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.1968083169.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.1987099569.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.2019149108.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.2027317182.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.2116262162.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.214628428.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.267356252.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.343050054.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.375259656.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.430946003.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.457993332.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.466351475.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.561259440.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.563018952.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.599940276.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.613496262.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.624361118.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.629753382.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.642017036.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.670890984.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.714510850.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.792055202.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.828014549.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.841584984.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.887282630.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.907922599.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -222944068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46564 +/- 0.00512898 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.46564 @ 95%CL (1 toyMC)
median expected limit: r < 2.46564 @ 95%CL (1 toyMC)
   68% expected band : 2.46564 < r < 2.46564
   95% expected band : 2.46564 < r < 2.46564
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -68648512
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91838 +/- 0.00819965 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.91838 @ 95%CL (1 toyMC)
median expected limit: r < 3.91838 @ 95%CL (1 toyMC)
   68% expected band : 3.91838 < r < 3.91838
   95% expected band : 3.91838 < r < 3.91838
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1674431189
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.95333 +/- 0.0064858 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.95333 @ 95%CL (1 toyMC)
median expected limit: r < 2.95333 @ 95%CL (1 toyMC)
   68% expected band : 2.95333 < r < 2.95333
   95% expected band : 2.95333 < r < 2.95333
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1678605666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.62806 +/- 0.00856204 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.62806 @ 95%CL (1 toyMC)
median expected limit: r < 3.62806 @ 95%CL (1 toyMC)
   68% expected band : 3.62806 < r < 3.62806
   95% expected band : 3.62806 < r < 3.62806
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -839363516
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.84611 +/- 0.00492355 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.84611 @ 95%CL (1 toyMC)
median expected limit: r < 2.84611 @ 95%CL (1 toyMC)
   68% expected band : 2.84611 < r < 2.84611
   95% expected band : 2.84611 < r < 2.84611
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1159915888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14307 +/- 0.00557224 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.14307 @ 95%CL (1 toyMC)
median expected limit: r < 2.14307 @ 95%CL (1 toyMC)
   68% expected band : 2.14307 < r < 2.14307
   95% expected band : 2.14307 < r < 2.14307
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1444902696
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15357 +/- 0.00670205 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.15357 @ 95%CL (1 toyMC)
median expected limit: r < 4.15357 @ 95%CL (1 toyMC)
   68% expected band : 4.15357 < r < 4.15357
   95% expected band : 4.15357 < r < 4.15357
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 772562133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91551 +/- 0.0054088 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.91551 @ 95%CL (1 toyMC)
median expected limit: r < 2.91551 @ 95%CL (1 toyMC)
   68% expected band : 2.91551 < r < 2.91551
   95% expected band : 2.91551 < r < 2.91551
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 124144454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.56149 +/- 0.00720835 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.56149 @ 95%CL (1 toyMC)
median expected limit: r < 3.56149 @ 95%CL (1 toyMC)
   68% expected band : 3.56149 < r < 3.56149
   95% expected band : 3.56149 < r < 3.56149
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -216210109
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.23566 +/- 0.00621711 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.23566 @ 95%CL (1 toyMC)
median expected limit: r < 2.23566 @ 95%CL (1 toyMC)
   68% expected band : 2.23566 < r < 2.23566
   95% expected band : 2.23566 < r < 2.23566
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1545620502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.11949 +/- 0.00645893 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.11949 @ 95%CL (1 toyMC)
median expected limit: r < 3.11949 @ 95%CL (1 toyMC)
   68% expected band : 3.11949 < r < 3.11949
   95% expected band : 3.11949 < r < 3.11949
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 209773462
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1328 +/- 0.00675942 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.1328 @ 95%CL (1 toyMC)
median expected limit: r < 3.1328 @ 95%CL (1 toyMC)
   68% expected band : 3.1328 < r < 3.1328
   95% expected band : 3.1328 < r < 3.1328
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1220763244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.87368 +/- 0.00628902 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.87368 @ 95%CL (1 toyMC)
median expected limit: r < 1.87368 @ 95%CL (1 toyMC)
   68% expected band : 1.87368 < r < 1.87368
   95% expected band : 1.87368 < r < 1.87368
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1322717759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.42396 +/- 0.00780872 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.42396 @ 95%CL (1 toyMC)
median expected limit: r < 5.42396 @ 95%CL (1 toyMC)
   68% expected band : 5.42396 < r < 5.42396
   95% expected band : 5.42396 < r < 5.42396
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2032551174
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.51482 +/- 0.00732491 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.51482 @ 95%CL (1 toyMC)
median expected limit: r < 2.51482 @ 95%CL (1 toyMC)
   68% expected band : 2.51482 < r < 2.51482
   95% expected band : 2.51482 < r < 2.51482
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -455657750
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.01517 +/- 0.00620351 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.01517 @ 95%CL (1 toyMC)
median expected limit: r < 3.01517 @ 95%CL (1 toyMC)
   68% expected band : 3.01517 < r < 3.01517
   95% expected band : 3.01517 < r < 3.01517
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 426212252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65577 +/- 0.00560631 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.65577 @ 95%CL (1 toyMC)
median expected limit: r < 2.65577 @ 95%CL (1 toyMC)
   68% expected band : 2.65577 < r < 2.65577
   95% expected band : 2.65577 < r < 2.65577
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1660337884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33529 +/- 0.00750452 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.33529 @ 95%CL (1 toyMC)
median expected limit: r < 3.33529 @ 95%CL (1 toyMC)
   68% expected band : 3.33529 < r < 3.33529
   95% expected band : 3.33529 < r < 3.33529
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1396204393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.90679 +/- 0.00437912 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.90679 @ 95%CL (1 toyMC)
median expected limit: r < 1.90679 @ 95%CL (1 toyMC)
   68% expected band : 1.90679 < r < 1.90679
   95% expected band : 1.90679 < r < 1.90679
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -645105588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.57197 +/- 0.00783737 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.57197 @ 95%CL (1 toyMC)
median expected limit: r < 3.57197 @ 95%CL (1 toyMC)
   68% expected band : 3.57197 < r < 3.57197
   95% expected band : 3.57197 < r < 3.57197
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1042730207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.36786 +/- 0.00803051 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.36786 @ 95%CL (1 toyMC)
median expected limit: r < 3.36786 @ 95%CL (1 toyMC)
   68% expected band : 3.36786 < r < 3.36786
   95% expected band : 3.36786 < r < 3.36786
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 752225524
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.87088 +/- 0.00760712 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.87088 @ 95%CL (1 toyMC)
median expected limit: r < 5.87088 @ 95%CL (1 toyMC)
   68% expected band : 5.87088 < r < 5.87088
   95% expected band : 5.87088 < r < 5.87088
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1013329429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.1074 +/- 0.00612171 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.1074 @ 95%CL (1 toyMC)
median expected limit: r < 5.1074 @ 95%CL (1 toyMC)
   68% expected band : 5.1074 < r < 5.1074
   95% expected band : 5.1074 < r < 5.1074
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -351270115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.2769 +/- 0.00795809 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.2769 @ 95%CL (1 toyMC)
median expected limit: r < 4.2769 @ 95%CL (1 toyMC)
   68% expected band : 4.2769 < r < 4.2769
   95% expected band : 4.2769 < r < 4.2769
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 896860611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.51219 +/- 0.0063706 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.51219 @ 95%CL (1 toyMC)
median expected limit: r < 3.51219 @ 95%CL (1 toyMC)
   68% expected band : 3.51219 < r < 3.51219
   95% expected band : 3.51219 < r < 3.51219
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 314942930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87428 +/- 0.00538851 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.87428 @ 95%CL (1 toyMC)
median expected limit: r < 2.87428 @ 95%CL (1 toyMC)
   68% expected band : 2.87428 < r < 2.87428
   95% expected band : 2.87428 < r < 2.87428
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -485293352
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90654 +/- 0.0076642 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.90654 @ 95%CL (1 toyMC)
median expected limit: r < 3.90654 @ 95%CL (1 toyMC)
   68% expected band : 3.90654 < r < 3.90654
   95% expected band : 3.90654 < r < 3.90654
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1742068767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.08377 +/- 0.00523932 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.08377 @ 95%CL (1 toyMC)
median expected limit: r < 2.08377 @ 95%CL (1 toyMC)
   68% expected band : 2.08377 < r < 2.08377
   95% expected band : 2.08377 < r < 2.08377
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1901829421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.98652 +/- 0.00631522 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 1.98652 @ 95%CL (1 toyMC)
median expected limit: r < 1.98652 @ 95%CL (1 toyMC)
   68% expected band : 1.98652 < r < 1.98652
   95% expected band : 1.98652 < r < 1.98652
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1432955601
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.72999 +/- 0.00752015 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.72999 @ 95%CL (1 toyMC)
median expected limit: r < 3.72999 @ 95%CL (1 toyMC)
   68% expected band : 3.72999 < r < 3.72999
   95% expected band : 3.72999 < r < 3.72999
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -600580875
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54278 +/- 0.00545423 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.54278 @ 95%CL (1 toyMC)
median expected limit: r < 2.54278 @ 95%CL (1 toyMC)
   68% expected band : 2.54278 < r < 2.54278
   95% expected band : 2.54278 < r < 2.54278
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -630103724
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89221 +/- 0.00789424 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.89221 @ 95%CL (1 toyMC)
median expected limit: r < 3.89221 @ 95%CL (1 toyMC)
   68% expected band : 3.89221 < r < 3.89221
   95% expected band : 3.89221 < r < 3.89221
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 187155948
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.56846 +/- 0.00915441 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.56846 @ 95%CL (1 toyMC)
median expected limit: r < 4.56846 @ 95%CL (1 toyMC)
   68% expected band : 4.56846 < r < 4.56846
   95% expected band : 4.56846 < r < 4.56846
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -333853305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.41898 +/- 0.00732892 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.41898 @ 95%CL (1 toyMC)
median expected limit: r < 4.41898 @ 95%CL (1 toyMC)
   68% expected band : 4.41898 < r < 4.41898
   95% expected band : 4.41898 < r < 4.41898
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2119901874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.03081 +/- 0.00772678 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.03081 @ 95%CL (1 toyMC)
median expected limit: r < 6.03081 @ 95%CL (1 toyMC)
   68% expected band : 6.03081 < r < 6.03081
   95% expected band : 6.03081 < r < 6.03081
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 643558239
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.16566 +/- 0.0065437 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.16566 @ 95%CL (1 toyMC)
median expected limit: r < 2.16566 @ 95%CL (1 toyMC)
   68% expected band : 2.16566 < r < 2.16566
   95% expected band : 2.16566 < r < 2.16566
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 933941333
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.08351 +/- 0.00784593 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.08351 @ 95%CL (1 toyMC)
median expected limit: r < 4.08351 @ 95%CL (1 toyMC)
   68% expected band : 4.08351 < r < 4.08351
   95% expected band : 4.08351 < r < 4.08351
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2046525313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.2308 +/- 0.00606377 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.2308 @ 95%CL (1 toyMC)
median expected limit: r < 4.2308 @ 95%CL (1 toyMC)
   68% expected band : 4.2308 < r < 4.2308
   95% expected band : 4.2308 < r < 4.2308
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -132536413
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43137 +/- 0.00525493 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.43137 @ 95%CL (1 toyMC)
median expected limit: r < 2.43137 @ 95%CL (1 toyMC)
   68% expected band : 2.43137 < r < 2.43137
   95% expected band : 2.43137 < r < 2.43137
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2144473299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.99183 +/- 0.00573786 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 3.99183 @ 95%CL (1 toyMC)
median expected limit: r < 3.99183 @ 95%CL (1 toyMC)
   68% expected band : 3.99183 < r < 3.99183
   95% expected band : 3.99183 < r < 3.99183
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -821417541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.19777 +/- 0.00936844 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.19777 @ 95%CL (1 toyMC)
median expected limit: r < 6.19777 @ 95%CL (1 toyMC)
   68% expected band : 6.19777 < r < 6.19777
   95% expected band : 6.19777 < r < 6.19777
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1105375310
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.86437 +/- 0.00752942 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.86437 @ 95%CL (1 toyMC)
median expected limit: r < 3.86437 @ 95%CL (1 toyMC)
   68% expected band : 3.86437 < r < 3.86437
   95% expected band : 3.86437 < r < 3.86437
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1296183751
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.27653 +/- 0.00985391 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.27653 @ 95%CL (1 toyMC)
median expected limit: r < 7.27653 @ 95%CL (1 toyMC)
   68% expected band : 7.27653 < r < 7.27653
   95% expected band : 7.27653 < r < 7.27653
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1703856927
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66836 +/- 0.00775395 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.66836 @ 95%CL (1 toyMC)
median expected limit: r < 3.66836 @ 95%CL (1 toyMC)
   68% expected band : 3.66836 < r < 3.66836
   95% expected band : 3.66836 < r < 3.66836
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1529661251
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39104 +/- 0.00612522 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.39104 @ 95%CL (1 toyMC)
median expected limit: r < 2.39104 @ 95%CL (1 toyMC)
   68% expected band : 2.39104 < r < 2.39104
   95% expected band : 2.39104 < r < 2.39104
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1633755646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.72225 +/- 0.00917685 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.72225 @ 95%CL (1 toyMC)
median expected limit: r < 5.72225 @ 95%CL (1 toyMC)
   68% expected band : 5.72225 < r < 5.72225
   95% expected band : 5.72225 < r < 5.72225
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -249930747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.37454 +/- 0.00724945 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.37454 @ 95%CL (1 toyMC)
median expected limit: r < 4.37454 @ 95%CL (1 toyMC)
   68% expected band : 4.37454 < r < 4.37454
   95% expected band : 4.37454 < r < 4.37454
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1874879671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43684 +/- 0.00616629 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.43684 @ 95%CL (1 toyMC)
median expected limit: r < 2.43684 @ 95%CL (1 toyMC)
   68% expected band : 2.43684 < r < 2.43684
   95% expected band : 2.43684 < r < 2.43684
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -318600162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52902 +/- 0.0064184 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.52902 @ 95%CL (1 toyMC)
median expected limit: r < 2.52902 @ 95%CL (1 toyMC)
   68% expected band : 2.52902 < r < 2.52902
   95% expected band : 2.52902 < r < 2.52902
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 525736630
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.37151 +/- 0.00671621 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.37151 @ 95%CL (1 toyMC)
median expected limit: r < 4.37151 @ 95%CL (1 toyMC)
   68% expected band : 4.37151 < r < 4.37151
   95% expected band : 4.37151 < r < 4.37151
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 584930539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44778 +/- 0.00708518 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.44778 @ 95%CL (1 toyMC)
median expected limit: r < 3.44778 @ 95%CL (1 toyMC)
   68% expected band : 3.44778 < r < 3.44778
   95% expected band : 3.44778 < r < 3.44778
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2030824169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58741 +/- 0.00539352 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.58741 @ 95%CL (1 toyMC)
median expected limit: r < 2.58741 @ 95%CL (1 toyMC)
   68% expected band : 2.58741 < r < 2.58741
   95% expected band : 2.58741 < r < 2.58741
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -962568504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33813 +/- 0.00494259 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.33813 @ 95%CL (1 toyMC)
median expected limit: r < 3.33813 @ 95%CL (1 toyMC)
   68% expected band : 3.33813 < r < 3.33813
   95% expected band : 3.33813 < r < 3.33813
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1841706218
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13411 +/- 0.00600837 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.13411 @ 95%CL (1 toyMC)
median expected limit: r < 3.13411 @ 95%CL (1 toyMC)
   68% expected band : 3.13411 < r < 3.13411
   95% expected band : 3.13411 < r < 3.13411
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1466185213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92672 +/- 0.00709767 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.92672 @ 95%CL (1 toyMC)
median expected limit: r < 3.92672 @ 95%CL (1 toyMC)
   68% expected band : 3.92672 < r < 3.92672
   95% expected band : 3.92672 < r < 3.92672
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1081049675
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.6373 +/- 0.00896322 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.6373 @ 95%CL (1 toyMC)
median expected limit: r < 5.6373 @ 95%CL (1 toyMC)
   68% expected band : 5.6373 < r < 5.6373
   95% expected band : 5.6373 < r < 5.6373
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1788097746
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.62862 +/- 0.00661562 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.62862 @ 95%CL (1 toyMC)
median expected limit: r < 4.62862 @ 95%CL (1 toyMC)
   68% expected band : 4.62862 < r < 4.62862
   95% expected band : 4.62862 < r < 4.62862
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 395650280
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43872 +/- 0.00613399 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.43872 @ 95%CL (1 toyMC)
median expected limit: r < 2.43872 @ 95%CL (1 toyMC)
   68% expected band : 2.43872 < r < 2.43872
   95% expected band : 2.43872 < r < 2.43872
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 479059999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.13512 +/- 0.0070041 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.13512 @ 95%CL (1 toyMC)
median expected limit: r < 5.13512 @ 95%CL (1 toyMC)
   68% expected band : 5.13512 < r < 5.13512
   95% expected band : 5.13512 < r < 5.13512
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1778992161
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.51894 +/- 0.00581146 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.51894 @ 95%CL (1 toyMC)
median expected limit: r < 2.51894 @ 95%CL (1 toyMC)
   68% expected band : 2.51894 < r < 2.51894
   95% expected band : 2.51894 < r < 2.51894
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 136096545
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.28415 +/- 0.0072052 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.28415 @ 95%CL (1 toyMC)
median expected limit: r < 3.28415 @ 95%CL (1 toyMC)
   68% expected band : 3.28415 < r < 3.28415
   95% expected band : 3.28415 < r < 3.28415
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2015198008
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.42728 +/- 0.00582242 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.42728 @ 95%CL (1 toyMC)
median expected limit: r < 3.42728 @ 95%CL (1 toyMC)
   68% expected band : 3.42728 < r < 3.42728
   95% expected band : 3.42728 < r < 3.42728
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 806564100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.81283 +/- 0.00555806 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.81283 @ 95%CL (1 toyMC)
median expected limit: r < 2.81283 @ 95%CL (1 toyMC)
   68% expected band : 2.81283 < r < 2.81283
   95% expected band : 2.81283 < r < 2.81283
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 70183035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.98546 +/- 0.00610096 @ 95% CL (100 tries)
Done in 0.14 min (cpu), 0.14 min (real)
mean   expected limit: r < 1.98546 @ 95%CL (1 toyMC)
median expected limit: r < 1.98546 @ 95%CL (1 toyMC)
   68% expected band : 1.98546 < r < 1.98546
   95% expected band : 1.98546 < r < 1.98546
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -946093686
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6692 +/- 0.00601174 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.6692 @ 95%CL (1 toyMC)
median expected limit: r < 2.6692 @ 95%CL (1 toyMC)
   68% expected band : 2.6692 < r < 2.6692
   95% expected band : 2.6692 < r < 2.6692
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1196701379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.78222 +/- 0.00731251 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.78222 @ 95%CL (1 toyMC)
median expected limit: r < 4.78222 @ 95%CL (1 toyMC)
   68% expected band : 4.78222 < r < 4.78222
   95% expected band : 4.78222 < r < 4.78222
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1504888345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.03687 +/- 0.00655625 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.03687 @ 95%CL (1 toyMC)
median expected limit: r < 3.03687 @ 95%CL (1 toyMC)
   68% expected band : 3.03687 < r < 3.03687
   95% expected band : 3.03687 < r < 3.03687
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 141033755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.94302 +/- 0.00700083 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.94302 @ 95%CL (1 toyMC)
median expected limit: r < 3.94302 @ 95%CL (1 toyMC)
   68% expected band : 3.94302 < r < 3.94302
   95% expected band : 3.94302 < r < 3.94302
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -851617256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99739 +/- 0.00672619 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.99739 @ 95%CL (1 toyMC)
median expected limit: r < 2.99739 @ 95%CL (1 toyMC)
   68% expected band : 2.99739 < r < 2.99739
   95% expected band : 2.99739 < r < 2.99739
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 509267596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47373 +/- 0.00731121 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.47373 @ 95%CL (1 toyMC)
median expected limit: r < 2.47373 @ 95%CL (1 toyMC)
   68% expected band : 2.47373 < r < 2.47373
   95% expected band : 2.47373 < r < 2.47373
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 898382688
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.44554 +/- 0.00770075 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.44554 @ 95%CL (1 toyMC)
median expected limit: r < 5.44554 @ 95%CL (1 toyMC)
   68% expected band : 5.44554 < r < 5.44554
   95% expected band : 5.44554 < r < 5.44554
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 267394505
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.74063 +/- 0.00769049 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.74063 @ 95%CL (1 toyMC)
median expected limit: r < 3.74063 @ 95%CL (1 toyMC)
   68% expected band : 3.74063 < r < 3.74063
   95% expected band : 3.74063 < r < 3.74063
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 820317632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.55623 +/- 0.00674235 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.55623 @ 95%CL (1 toyMC)
median expected limit: r < 3.55623 @ 95%CL (1 toyMC)
   68% expected band : 3.55623 < r < 3.55623
   95% expected band : 3.55623 < r < 3.55623
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 294141928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.62104 +/- 0.00759451 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.62104 @ 95%CL (1 toyMC)
median expected limit: r < 4.62104 @ 95%CL (1 toyMC)
   68% expected band : 4.62104 < r < 4.62104
   95% expected band : 4.62104 < r < 4.62104
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1636324193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.26624 +/- 0.00529061 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.26624 @ 95%CL (1 toyMC)
median expected limit: r < 2.26624 @ 95%CL (1 toyMC)
   68% expected band : 2.26624 < r < 2.26624
   95% expected band : 2.26624 < r < 2.26624
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -160939868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.04981 +/- 0.00779885 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.04981 @ 95%CL (1 toyMC)
median expected limit: r < 4.04981 @ 95%CL (1 toyMC)
   68% expected band : 4.04981 < r < 4.04981
   95% expected band : 4.04981 < r < 4.04981
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 97257239
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.94873 +/- 0.00590849 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.94873 @ 95%CL (1 toyMC)
median expected limit: r < 2.94873 @ 95%CL (1 toyMC)
   68% expected band : 2.94873 < r < 2.94873
   95% expected band : 2.94873 < r < 2.94873
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -861740834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.95957 +/- 0.00803823 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.95957 @ 95%CL (1 toyMC)
median expected limit: r < 4.95957 @ 95%CL (1 toyMC)
   68% expected band : 4.95957 < r < 4.95957
   95% expected band : 4.95957 < r < 4.95957
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1435183784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.93442 +/- 0.00820957 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.93442 @ 95%CL (1 toyMC)
median expected limit: r < 4.93442 @ 95%CL (1 toyMC)
   68% expected band : 4.93442 < r < 4.93442
   95% expected band : 4.93442 < r < 4.93442
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 138563772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.42093 +/- 0.00560744 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.42093 @ 95%CL (1 toyMC)
median expected limit: r < 3.42093 @ 95%CL (1 toyMC)
   68% expected band : 3.42093 < r < 3.42093
   95% expected band : 3.42093 < r < 3.42093
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -282504285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72581 +/- 0.00518849 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.72581 @ 95%CL (1 toyMC)
median expected limit: r < 1.72581 @ 95%CL (1 toyMC)
   68% expected band : 1.72581 < r < 1.72581
   95% expected band : 1.72581 < r < 1.72581
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1411360649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.73419 +/- 0.0075436 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.73419 @ 95%CL (1 toyMC)
median expected limit: r < 3.73419 @ 95%CL (1 toyMC)
   68% expected band : 3.73419 < r < 3.73419
   95% expected band : 3.73419 < r < 3.73419
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1000823688
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90038 +/- 0.0072707 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.90038 @ 95%CL (1 toyMC)
median expected limit: r < 2.90038 @ 95%CL (1 toyMC)
   68% expected band : 2.90038 < r < 2.90038
   95% expected band : 2.90038 < r < 2.90038
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1877373438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.26217 +/- 0.0055159 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.26217 @ 95%CL (1 toyMC)
median expected limit: r < 2.26217 @ 95%CL (1 toyMC)
   68% expected band : 2.26217 < r < 2.26217
   95% expected band : 2.26217 < r < 2.26217
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1808660523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.65803 +/- 0.00901096 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.65803 @ 95%CL (1 toyMC)
median expected limit: r < 6.65803 @ 95%CL (1 toyMC)
   68% expected band : 6.65803 < r < 6.65803
   95% expected band : 6.65803 < r < 6.65803
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2107469931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.38814 +/- 0.0065497 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.38814 @ 95%CL (1 toyMC)
median expected limit: r < 2.38814 @ 95%CL (1 toyMC)
   68% expected band : 2.38814 < r < 2.38814
   95% expected band : 2.38814 < r < 2.38814
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1827372992
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.42642 +/- 0.0059625 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.42642 @ 95%CL (1 toyMC)
median expected limit: r < 3.42642 @ 95%CL (1 toyMC)
   68% expected band : 3.42642 < r < 3.42642
   95% expected band : 3.42642 < r < 3.42642
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1927216031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.72798 +/- 0.00775378 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.72798 @ 95%CL (1 toyMC)
median expected limit: r < 4.72798 @ 95%CL (1 toyMC)
   68% expected band : 4.72798 < r < 4.72798
   95% expected band : 4.72798 < r < 4.72798
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 53062609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.24555 +/- 0.00758612 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.24555 @ 95%CL (1 toyMC)
median expected limit: r < 5.24555 @ 95%CL (1 toyMC)
   68% expected band : 5.24555 < r < 5.24555
   95% expected band : 5.24555 < r < 5.24555
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -87929952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.26686 +/- 0.00898252 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.26686 @ 95%CL (1 toyMC)
median expected limit: r < 4.26686 @ 95%CL (1 toyMC)
   68% expected band : 4.26686 < r < 4.26686
   95% expected band : 4.26686 < r < 4.26686
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -599057665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.37931 +/- 0.00651979 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.37931 @ 95%CL (1 toyMC)
median expected limit: r < 4.37931 @ 95%CL (1 toyMC)
   68% expected band : 4.37931 < r < 4.37931
   95% expected band : 4.37931 < r < 4.37931
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 993004428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76696 +/- 0.00654563 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.76696 @ 95%CL (1 toyMC)
median expected limit: r < 2.76696 @ 95%CL (1 toyMC)
   68% expected band : 2.76696 < r < 2.76696
   95% expected band : 2.76696 < r < 2.76696
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 268845408
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.1197 +/- 0.0108631 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.1197 @ 95%CL (1 toyMC)
median expected limit: r < 7.1197 @ 95%CL (1 toyMC)
   68% expected band : 7.1197 < r < 7.1197
   95% expected band : 7.1197 < r < 7.1197
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1861206950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92547 +/- 0.00574286 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.92547 @ 95%CL (1 toyMC)
median expected limit: r < 2.92547 @ 95%CL (1 toyMC)
   68% expected band : 2.92547 < r < 2.92547
   95% expected band : 2.92547 < r < 2.92547
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -495612020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67397 +/- 0.00563279 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.67397 @ 95%CL (1 toyMC)
median expected limit: r < 2.67397 @ 95%CL (1 toyMC)
   68% expected band : 2.67397 < r < 2.67397
   95% expected band : 2.67397 < r < 2.67397
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2099924817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.50228 +/- 0.00700662 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.50228 @ 95%CL (1 toyMC)
median expected limit: r < 4.50228 @ 95%CL (1 toyMC)
   68% expected band : 4.50228 < r < 4.50228
   95% expected band : 4.50228 < r < 4.50228
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1893746815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.69298 +/- 0.00741988 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.69298 @ 95%CL (1 toyMC)
median expected limit: r < 2.69298 @ 95%CL (1 toyMC)
   68% expected band : 2.69298 < r < 2.69298
   95% expected band : 2.69298 < r < 2.69298
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -768381859
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.03991 +/- 0.00701396 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 3.03991 @ 95%CL (1 toyMC)
median expected limit: r < 3.03991 @ 95%CL (1 toyMC)
   68% expected band : 3.03991 < r < 3.03991
   95% expected band : 3.03991 < r < 3.03991
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -641154379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.12273 +/- 0.00760004 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.12273 @ 95%CL (1 toyMC)
median expected limit: r < 5.12273 @ 95%CL (1 toyMC)
   68% expected band : 5.12273 < r < 5.12273
   95% expected band : 5.12273 < r < 5.12273
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 229822158
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10949 +/- 0.00635807 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.10949 @ 95%CL (1 toyMC)
median expected limit: r < 3.10949 @ 95%CL (1 toyMC)
   68% expected band : 3.10949 < r < 3.10949
   95% expected band : 3.10949 < r < 3.10949
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1000823688.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1013329429.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1081049675.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1159915888.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1296183751.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1322717759.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-132536413.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1396204393.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1432955601.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1444902696.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1529661251.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-160939868.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1633755646.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1636324193.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1703856927.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1778992161.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1827372992.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1841706218.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1861206950.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1893746815.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1901829421.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1927216031.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-2099924817.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-2119901874.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-216210109.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-222944068.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-249930747.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-282504285.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-318600162.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-333853305.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-351270115.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-455657750.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-485293352.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-495612020.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-599057665.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-600580875.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-630103724.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-641154379.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-645105588.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-68648512.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-768381859.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-821417541.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-839363516.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-851617256.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-861740834.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-87929952.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-946093686.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.-962568504.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1042730207.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1105375310.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1196701379.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1220763244.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.124144454.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.136096545.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.138563772.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.141033755.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1411360649.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1435183784.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1466185213.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1504888345.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1545620502.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1660337884.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1674431189.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1678605666.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1742068767.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1788097746.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1808660523.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.187155948.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1874879671.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1877373438.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.2015198008.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.2030824169.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.2032551174.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.2046525313.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.209773462.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.2107469931.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.2144473299.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.229822158.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.267394505.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.268845408.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.294141928.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.314942930.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.395650280.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.426212252.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.479059999.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.509267596.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.525736630.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.53062609.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.584930539.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.643558239.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.70183035.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.752225524.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.772562133.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.806564100.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.820317632.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.896860611.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.898382688.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.933941333.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.97257239.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.993004428.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 811328032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.27732 +/- 0.00887842 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.27732 @ 95%CL (1 toyMC)
median expected limit: r < 5.27732 @ 95%CL (1 toyMC)
   68% expected band : 5.27732 < r < 5.27732
   95% expected band : 5.27732 < r < 5.27732
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -714366053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.90047 +/- 0.00847421 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.90047 @ 95%CL (1 toyMC)
median expected limit: r < 5.90047 @ 95%CL (1 toyMC)
   68% expected band : 5.90047 < r < 5.90047
   95% expected band : 5.90047 < r < 5.90047
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1789304743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.82905 +/- 0.00715029 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.82905 @ 95%CL (1 toyMC)
median expected limit: r < 3.82905 @ 95%CL (1 toyMC)
   68% expected band : 3.82905 < r < 3.82905
   95% expected band : 3.82905 < r < 3.82905
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1957450661
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.83209 +/- 0.00608327 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.83209 @ 95%CL (1 toyMC)
median expected limit: r < 2.83209 @ 95%CL (1 toyMC)
   68% expected band : 2.83209 < r < 2.83209
   95% expected band : 2.83209 < r < 2.83209
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -123079339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.89152 +/- 0.00662908 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.89152 @ 95%CL (1 toyMC)
median expected limit: r < 2.89152 @ 95%CL (1 toyMC)
   68% expected band : 2.89152 < r < 2.89152
   95% expected band : 2.89152 < r < 2.89152
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1630528807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.7118 +/- 0.00748989 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.7118 @ 95%CL (1 toyMC)
median expected limit: r < 3.7118 @ 95%CL (1 toyMC)
   68% expected band : 3.7118 < r < 3.7118
   95% expected band : 3.7118 < r < 3.7118
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -296283007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.73488 +/- 0.00787353 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 6.73488 @ 95%CL (1 toyMC)
median expected limit: r < 6.73488 @ 95%CL (1 toyMC)
   68% expected band : 6.73488 < r < 6.73488
   95% expected band : 6.73488 < r < 6.73488
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2002916598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.97308 +/- 0.0055964 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.97308 @ 95%CL (1 toyMC)
median expected limit: r < 2.97308 @ 95%CL (1 toyMC)
   68% expected band : 2.97308 < r < 2.97308
   95% expected band : 2.97308 < r < 2.97308
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -874759568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12139 +/- 0.00546778 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.12139 @ 95%CL (1 toyMC)
median expected limit: r < 3.12139 @ 95%CL (1 toyMC)
   68% expected band : 3.12139 < r < 3.12139
   95% expected band : 3.12139 < r < 3.12139
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1568046678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78411 +/- 0.00525182 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.78411 @ 95%CL (1 toyMC)
median expected limit: r < 2.78411 @ 95%CL (1 toyMC)
   68% expected band : 2.78411 < r < 2.78411
   95% expected band : 2.78411 < r < 2.78411
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -187884355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.7831 +/- 0.00694056 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.7831 @ 95%CL (1 toyMC)
median expected limit: r < 5.7831 @ 95%CL (1 toyMC)
   68% expected band : 5.7831 < r < 5.7831
   95% expected band : 5.7831 < r < 5.7831
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2119487719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.01264 +/- 0.00842393 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.01264 @ 95%CL (1 toyMC)
median expected limit: r < 6.01264 @ 95%CL (1 toyMC)
   68% expected band : 6.01264 < r < 6.01264
   95% expected band : 6.01264 < r < 6.01264
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -829411341
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.9679 +/- 0.00844153 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.9679 @ 95%CL (1 toyMC)
median expected limit: r < 4.9679 @ 95%CL (1 toyMC)
   68% expected band : 4.9679 < r < 4.9679
   95% expected band : 4.9679 < r < 4.9679
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 336310559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.51423 +/- 0.00709412 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.51423 @ 95%CL (1 toyMC)
median expected limit: r < 5.51423 @ 95%CL (1 toyMC)
   68% expected band : 5.51423 < r < 5.51423
   95% expected band : 5.51423 < r < 5.51423
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -972542393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.70289 +/- 0.00655667 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 3.70289 @ 95%CL (1 toyMC)
median expected limit: r < 3.70289 @ 95%CL (1 toyMC)
   68% expected band : 3.70289 < r < 3.70289
   95% expected band : 3.70289 < r < 3.70289
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1717147772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.66404 +/- 0.00857417 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.66404 @ 95%CL (1 toyMC)
median expected limit: r < 7.66404 @ 95%CL (1 toyMC)
   68% expected band : 7.66404 < r < 7.66404
   95% expected band : 7.66404 < r < 7.66404
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1738355858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.5463 +/- 0.00654239 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.5463 @ 95%CL (1 toyMC)
median expected limit: r < 4.5463 @ 95%CL (1 toyMC)
   68% expected band : 4.5463 < r < 4.5463
   95% expected band : 4.5463 < r < 4.5463
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1175494615
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.69385 +/- 0.00719512 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.69385 @ 95%CL (1 toyMC)
median expected limit: r < 4.69385 @ 95%CL (1 toyMC)
   68% expected band : 4.69385 < r < 4.69385
   95% expected band : 4.69385 < r < 4.69385
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1458978727
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.71779 +/- 0.00723672 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.71779 @ 95%CL (1 toyMC)
median expected limit: r < 4.71779 @ 95%CL (1 toyMC)
   68% expected band : 4.71779 < r < 4.71779
   95% expected band : 4.71779 < r < 4.71779
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -309917540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.89698 +/- 0.00633541 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.89698 @ 95%CL (1 toyMC)
median expected limit: r < 2.89698 @ 95%CL (1 toyMC)
   68% expected band : 2.89698 < r < 2.89698
   95% expected band : 2.89698 < r < 2.89698
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -365685221
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.44093 +/- 0.00765733 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.44093 @ 95%CL (1 toyMC)
median expected limit: r < 4.44093 @ 95%CL (1 toyMC)
   68% expected band : 4.44093 < r < 4.44093
   95% expected band : 4.44093 < r < 4.44093
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 179007005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.53364 +/- 0.00634499 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.53364 @ 95%CL (1 toyMC)
median expected limit: r < 5.53364 @ 95%CL (1 toyMC)
   68% expected band : 5.53364 < r < 5.53364
   95% expected band : 5.53364 < r < 5.53364
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 932694047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.84288 +/- 0.00777724 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.84288 @ 95%CL (1 toyMC)
median expected limit: r < 3.84288 @ 95%CL (1 toyMC)
   68% expected band : 3.84288 < r < 3.84288
   95% expected band : 3.84288 < r < 3.84288
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1922877281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.08516 +/- 0.00707805 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.08516 @ 95%CL (1 toyMC)
median expected limit: r < 4.08516 @ 95%CL (1 toyMC)
   68% expected band : 4.08516 < r < 4.08516
   95% expected band : 4.08516 < r < 4.08516
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1113894555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.37929 +/- 0.00643258 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.37929 @ 95%CL (1 toyMC)
median expected limit: r < 3.37929 @ 95%CL (1 toyMC)
   68% expected band : 3.37929 < r < 3.37929
   95% expected band : 3.37929 < r < 3.37929
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1735681199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.80201 +/- 0.0072286 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.80201 @ 95%CL (1 toyMC)
median expected limit: r < 3.80201 @ 95%CL (1 toyMC)
   68% expected band : 3.80201 < r < 3.80201
   95% expected band : 3.80201 < r < 3.80201
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2064134077
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1737 +/- 0.0114552 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.1737 @ 95%CL (1 toyMC)
median expected limit: r < 10.1737 @ 95%CL (1 toyMC)
   68% expected band : 10.1737 < r < 10.1737
   95% expected band : 10.1737 < r < 10.1737
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 346010649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.98265 +/- 0.00772661 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.98265 @ 95%CL (1 toyMC)
median expected limit: r < 4.98265 @ 95%CL (1 toyMC)
   68% expected band : 4.98265 < r < 4.98265
   95% expected band : 4.98265 < r < 4.98265
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1474245488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.34507 +/- 0.00682276 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.34507 @ 95%CL (1 toyMC)
median expected limit: r < 5.34507 @ 95%CL (1 toyMC)
   68% expected band : 5.34507 < r < 5.34507
   95% expected band : 5.34507 < r < 5.34507
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 860640906
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.06149 +/- 0.00668269 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.06149 @ 95%CL (1 toyMC)
median expected limit: r < 5.06149 @ 95%CL (1 toyMC)
   68% expected band : 5.06149 < r < 5.06149
   95% expected band : 5.06149 < r < 5.06149
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1141705814
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.87341 +/- 0.00785075 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.87341 @ 95%CL (1 toyMC)
median expected limit: r < 5.87341 @ 95%CL (1 toyMC)
   68% expected band : 5.87341 < r < 5.87341
   95% expected band : 5.87341 < r < 5.87341
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1931863110
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.60985 +/- 0.00549424 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.60985 @ 95%CL (1 toyMC)
median expected limit: r < 3.60985 @ 95%CL (1 toyMC)
   68% expected band : 3.60985 < r < 3.60985
   95% expected band : 3.60985 < r < 3.60985
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1780939425
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91206 +/- 0.00584385 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.91206 @ 95%CL (1 toyMC)
median expected limit: r < 1.91206 @ 95%CL (1 toyMC)
   68% expected band : 1.91206 < r < 1.91206
   95% expected band : 1.91206 < r < 1.91206
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1730990397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.68161 +/- 0.00936115 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.68161 @ 95%CL (1 toyMC)
median expected limit: r < 6.68161 @ 95%CL (1 toyMC)
   68% expected band : 6.68161 < r < 6.68161
   95% expected band : 6.68161 < r < 6.68161
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 263478169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.43131 +/- 0.00679507 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.43131 @ 95%CL (1 toyMC)
median expected limit: r < 3.43131 @ 95%CL (1 toyMC)
   68% expected band : 3.43131 < r < 3.43131
   95% expected band : 3.43131 < r < 3.43131
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -144768033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.28268 +/- 0.00796198 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.28268 @ 95%CL (1 toyMC)
median expected limit: r < 4.28268 @ 95%CL (1 toyMC)
   68% expected band : 4.28268 < r < 4.28268
   95% expected band : 4.28268 < r < 4.28268
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1099292950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.75732 +/- 0.00602633 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.75732 @ 95%CL (1 toyMC)
median expected limit: r < 3.75732 @ 95%CL (1 toyMC)
   68% expected band : 3.75732 < r < 3.75732
   95% expected band : 3.75732 < r < 3.75732
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -255771193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.9192 +/- 0.00592984 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.9192 @ 95%CL (1 toyMC)
median expected limit: r < 2.9192 @ 95%CL (1 toyMC)
   68% expected band : 2.9192 < r < 2.9192
   95% expected band : 2.9192 < r < 2.9192
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -965521736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04489 +/- 0.00608408 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.04489 @ 95%CL (1 toyMC)
median expected limit: r < 3.04489 @ 95%CL (1 toyMC)
   68% expected band : 3.04489 < r < 3.04489
   95% expected band : 3.04489 < r < 3.04489
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1874746673
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.75206 +/- 0.00662578 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.75206 @ 95%CL (1 toyMC)
median expected limit: r < 2.75206 @ 95%CL (1 toyMC)
   68% expected band : 2.75206 < r < 2.75206
   95% expected band : 2.75206 < r < 2.75206
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2057155325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.99209 +/- 0.00797388 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.99209 @ 95%CL (1 toyMC)
median expected limit: r < 3.99209 @ 95%CL (1 toyMC)
   68% expected band : 3.99209 < r < 3.99209
   95% expected band : 3.99209 < r < 3.99209
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -766543861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.03665 +/- 0.00699815 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.03665 @ 95%CL (1 toyMC)
median expected limit: r < 8.03665 @ 95%CL (1 toyMC)
   68% expected band : 8.03665 < r < 8.03665
   95% expected band : 8.03665 < r < 8.03665
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1055834851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1292 +/- 0.00565234 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.1292 @ 95%CL (1 toyMC)
median expected limit: r < 3.1292 @ 95%CL (1 toyMC)
   68% expected band : 3.1292 < r < 3.1292
   95% expected band : 3.1292 < r < 3.1292
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1082718949
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.37235 +/- 0.00792027 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.37235 @ 95%CL (1 toyMC)
median expected limit: r < 3.37235 @ 95%CL (1 toyMC)
   68% expected band : 3.37235 < r < 3.37235
   95% expected band : 3.37235 < r < 3.37235
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2013190010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.95086 +/- 0.00777067 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.95086 @ 95%CL (1 toyMC)
median expected limit: r < 4.95086 @ 95%CL (1 toyMC)
   68% expected band : 4.95086 < r < 4.95086
   95% expected band : 4.95086 < r < 4.95086
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1831172033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00358 +/- 0.00450244 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 2.00358 @ 95%CL (1 toyMC)
median expected limit: r < 2.00358 @ 95%CL (1 toyMC)
   68% expected band : 2.00358 < r < 2.00358
   95% expected band : 2.00358 < r < 2.00358
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1323115608
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.72205 +/- 0.00817851 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.72205 @ 95%CL (1 toyMC)
median expected limit: r < 5.72205 @ 95%CL (1 toyMC)
   68% expected band : 5.72205 < r < 5.72205
   95% expected band : 5.72205 < r < 5.72205
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1066188009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.79681 +/- 0.00716466 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.79681 @ 95%CL (1 toyMC)
median expected limit: r < 4.79681 @ 95%CL (1 toyMC)
   68% expected band : 4.79681 < r < 4.79681
   95% expected band : 4.79681 < r < 4.79681
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -177979499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16959 +/- 0.00806565 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.16959 @ 95%CL (1 toyMC)
median expected limit: r < 3.16959 @ 95%CL (1 toyMC)
   68% expected band : 3.16959 < r < 3.16959
   95% expected band : 3.16959 < r < 3.16959
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1988775378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.60582 +/- 0.00730785 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.60582 @ 95%CL (1 toyMC)
median expected limit: r < 4.60582 @ 95%CL (1 toyMC)
   68% expected band : 4.60582 < r < 4.60582
   95% expected band : 4.60582 < r < 4.60582
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -171364721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.98444 +/- 0.00764547 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.98444 @ 95%CL (1 toyMC)
median expected limit: r < 4.98444 @ 95%CL (1 toyMC)
   68% expected band : 4.98444 < r < 4.98444
   95% expected band : 4.98444 < r < 4.98444
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2128947959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.68022 +/- 0.00677884 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.68022 @ 95%CL (1 toyMC)
median expected limit: r < 2.68022 @ 95%CL (1 toyMC)
   68% expected band : 2.68022 < r < 2.68022
   95% expected band : 2.68022 < r < 2.68022
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1567404255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.89281 +/- 0.00538653 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.89281 @ 95%CL (1 toyMC)
median expected limit: r < 2.89281 @ 95%CL (1 toyMC)
   68% expected band : 2.89281 < r < 2.89281
   95% expected band : 2.89281 < r < 2.89281
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -638724909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.30386 +/- 0.00699776 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.30386 @ 95%CL (1 toyMC)
median expected limit: r < 3.30386 @ 95%CL (1 toyMC)
   68% expected band : 3.30386 < r < 3.30386
   95% expected band : 3.30386 < r < 3.30386
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1213447011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.45764 +/- 0.00781043 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 5.45764 @ 95%CL (1 toyMC)
median expected limit: r < 5.45764 @ 95%CL (1 toyMC)
   68% expected band : 5.45764 < r < 5.45764
   95% expected band : 5.45764 < r < 5.45764
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -923664445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04043 +/- 0.00600776 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.04043 @ 95%CL (1 toyMC)
median expected limit: r < 3.04043 @ 95%CL (1 toyMC)
   68% expected band : 3.04043 < r < 3.04043
   95% expected band : 3.04043 < r < 3.04043
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1192571208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.32982 +/- 0.00640844 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.32982 @ 95%CL (1 toyMC)
median expected limit: r < 3.32982 @ 95%CL (1 toyMC)
   68% expected band : 3.32982 < r < 3.32982
   95% expected band : 3.32982 < r < 3.32982
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1364202517
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93156 +/- 0.00700893 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.93156 @ 95%CL (1 toyMC)
median expected limit: r < 3.93156 @ 95%CL (1 toyMC)
   68% expected band : 3.93156 < r < 3.93156
   95% expected band : 3.93156 < r < 3.93156
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1530417926
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.27413 +/- 0.00755384 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.27413 @ 95%CL (1 toyMC)
median expected limit: r < 5.27413 @ 95%CL (1 toyMC)
   68% expected band : 5.27413 < r < 5.27413
   95% expected band : 5.27413 < r < 5.27413
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1828265743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.81815 +/- 0.00765524 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 6.81815 @ 95%CL (1 toyMC)
median expected limit: r < 6.81815 @ 95%CL (1 toyMC)
   68% expected band : 6.81815 < r < 6.81815
   95% expected band : 6.81815 < r < 6.81815
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1099015808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.19783 +/- 0.0057396 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.19783 @ 95%CL (1 toyMC)
median expected limit: r < 3.19783 @ 95%CL (1 toyMC)
   68% expected band : 3.19783 < r < 3.19783
   95% expected band : 3.19783 < r < 3.19783
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -870469795
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.22476 +/- 0.00695997 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.22476 @ 95%CL (1 toyMC)
median expected limit: r < 4.22476 @ 95%CL (1 toyMC)
   68% expected band : 4.22476 < r < 4.22476
   95% expected band : 4.22476 < r < 4.22476
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1603895548
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.17108 +/- 0.00867355 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.17108 @ 95%CL (1 toyMC)
median expected limit: r < 6.17108 @ 95%CL (1 toyMC)
   68% expected band : 6.17108 < r < 6.17108
   95% expected band : 6.17108 < r < 6.17108
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1118877124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.04012 +/- 0.00781314 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.04012 @ 95%CL (1 toyMC)
median expected limit: r < 6.04012 @ 95%CL (1 toyMC)
   68% expected band : 6.04012 < r < 6.04012
   95% expected band : 6.04012 < r < 6.04012
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1626111866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04896 +/- 0.00607028 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.04896 @ 95%CL (1 toyMC)
median expected limit: r < 3.04896 @ 95%CL (1 toyMC)
   68% expected band : 3.04896 < r < 3.04896
   95% expected band : 3.04896 < r < 3.04896
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 747429372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24472 +/- 0.00520842 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.24472 @ 95%CL (1 toyMC)
median expected limit: r < 3.24472 @ 95%CL (1 toyMC)
   68% expected band : 3.24472 < r < 3.24472
   95% expected band : 3.24472 < r < 3.24472
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 845388998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.22382 +/- 0.00623913 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.22382 @ 95%CL (1 toyMC)
median expected limit: r < 4.22382 @ 95%CL (1 toyMC)
   68% expected band : 4.22382 < r < 4.22382
   95% expected band : 4.22382 < r < 4.22382
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -819295514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.70374 +/- 0.00671792 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.70374 @ 95%CL (1 toyMC)
median expected limit: r < 3.70374 @ 95%CL (1 toyMC)
   68% expected band : 3.70374 < r < 3.70374
   95% expected band : 3.70374 < r < 3.70374
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -348816837
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.3824 +/- 0.00890737 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.3824 @ 95%CL (1 toyMC)
median expected limit: r < 7.3824 @ 95%CL (1 toyMC)
   68% expected band : 7.3824 < r < 7.3824
   95% expected band : 7.3824 < r < 7.3824
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1981482880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.23596 +/- 0.00731707 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.23596 @ 95%CL (1 toyMC)
median expected limit: r < 4.23596 @ 95%CL (1 toyMC)
   68% expected band : 4.23596 < r < 4.23596
   95% expected band : 4.23596 < r < 4.23596
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1719436125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.58703 +/- 0.0075987 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.58703 @ 95%CL (1 toyMC)
median expected limit: r < 5.58703 @ 95%CL (1 toyMC)
   68% expected band : 5.58703 < r < 5.58703
   95% expected band : 5.58703 < r < 5.58703
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 270483588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63221 +/- 0.00657854 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.63221 @ 95%CL (1 toyMC)
median expected limit: r < 3.63221 @ 95%CL (1 toyMC)
   68% expected band : 3.63221 < r < 3.63221
   95% expected band : 3.63221 < r < 3.63221
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1170142416
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.63251 +/- 0.00763168 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.63251 @ 95%CL (1 toyMC)
median expected limit: r < 5.63251 @ 95%CL (1 toyMC)
   68% expected band : 5.63251 < r < 5.63251
   95% expected band : 5.63251 < r < 5.63251
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 616974811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.87739 +/- 0.00693373 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.87739 @ 95%CL (1 toyMC)
median expected limit: r < 4.87739 @ 95%CL (1 toyMC)
   68% expected band : 4.87739 < r < 4.87739
   95% expected band : 4.87739 < r < 4.87739
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -972122337
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.26589 +/- 0.00754655 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.26589 @ 95%CL (1 toyMC)
median expected limit: r < 3.26589 @ 95%CL (1 toyMC)
   68% expected band : 3.26589 < r < 3.26589
   95% expected band : 3.26589 < r < 3.26589
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1417420527
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.24026 +/- 0.00787687 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.24026 @ 95%CL (1 toyMC)
median expected limit: r < 5.24026 @ 95%CL (1 toyMC)
   68% expected band : 5.24026 < r < 5.24026
   95% expected band : 5.24026 < r < 5.24026
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 228607606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.7492 +/- 0.00827458 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.7492 @ 95%CL (1 toyMC)
median expected limit: r < 5.7492 @ 95%CL (1 toyMC)
   68% expected band : 5.7492 < r < 5.7492
   95% expected band : 5.7492 < r < 5.7492
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2012637458
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.90966 +/- 0.00671937 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.90966 @ 95%CL (1 toyMC)
median expected limit: r < 4.90966 @ 95%CL (1 toyMC)
   68% expected band : 4.90966 < r < 4.90966
   95% expected band : 4.90966 < r < 4.90966
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1329706270
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.90051 +/- 0.00688686 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.90051 @ 95%CL (1 toyMC)
median expected limit: r < 6.90051 @ 95%CL (1 toyMC)
   68% expected band : 6.90051 < r < 6.90051
   95% expected band : 6.90051 < r < 6.90051
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1940004530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.04249 +/- 0.00806641 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.04249 @ 95%CL (1 toyMC)
median expected limit: r < 4.04249 @ 95%CL (1 toyMC)
   68% expected band : 4.04249 < r < 4.04249
   95% expected band : 4.04249 < r < 4.04249
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1140495443
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.33641 +/- 0.00947995 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.33641 @ 95%CL (1 toyMC)
median expected limit: r < 8.33641 @ 95%CL (1 toyMC)
   68% expected band : 8.33641 < r < 8.33641
   95% expected band : 8.33641 < r < 8.33641
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 240516335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05806 +/- 0.00640323 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.05806 @ 95%CL (1 toyMC)
median expected limit: r < 3.05806 @ 95%CL (1 toyMC)
   68% expected band : 3.05806 < r < 3.05806
   95% expected band : 3.05806 < r < 3.05806
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1763940329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.88175 +/- 0.00874466 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.88175 @ 95%CL (1 toyMC)
median expected limit: r < 4.88175 @ 95%CL (1 toyMC)
   68% expected band : 4.88175 < r < 4.88175
   95% expected band : 4.88175 < r < 4.88175
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 761682379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.88131 +/- 0.0068573 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.88131 @ 95%CL (1 toyMC)
median expected limit: r < 4.88131 @ 95%CL (1 toyMC)
   68% expected band : 4.88131 < r < 4.88131
   95% expected band : 4.88131 < r < 4.88131
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1139978870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.21006 +/- 0.00568648 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.21006 @ 95%CL (1 toyMC)
median expected limit: r < 3.21006 @ 95%CL (1 toyMC)
   68% expected band : 3.21006 < r < 3.21006
   95% expected band : 3.21006 < r < 3.21006
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1489475942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90624 +/- 0.00649306 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.90624 @ 95%CL (1 toyMC)
median expected limit: r < 3.90624 @ 95%CL (1 toyMC)
   68% expected band : 3.90624 < r < 3.90624
   95% expected band : 3.90624 < r < 3.90624
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1648271950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.95668 +/- 0.0051487 @ 95% CL (100 tries)
Done in 0.15 min (cpu), 0.15 min (real)
mean   expected limit: r < 1.95668 @ 95%CL (1 toyMC)
median expected limit: r < 1.95668 @ 95%CL (1 toyMC)
   68% expected band : 1.95668 < r < 1.95668
   95% expected band : 1.95668 < r < 1.95668
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 561569233
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.09134 +/- 0.00762038 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.09134 @ 95%CL (1 toyMC)
median expected limit: r < 4.09134 @ 95%CL (1 toyMC)
   68% expected band : 4.09134 < r < 4.09134
   95% expected band : 4.09134 < r < 4.09134
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 593293149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.29003 +/- 0.0074445 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.29003 @ 95%CL (1 toyMC)
median expected limit: r < 5.29003 @ 95%CL (1 toyMC)
   68% expected band : 5.29003 < r < 5.29003
   95% expected band : 5.29003 < r < 5.29003
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -739997706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44368 +/- 0.00659399 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.44368 @ 95%CL (1 toyMC)
median expected limit: r < 3.44368 @ 95%CL (1 toyMC)
   68% expected band : 3.44368 < r < 3.44368
   95% expected band : 3.44368 < r < 3.44368
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 837485081
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.72 +/- 0.00844999 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.72 @ 95%CL (1 toyMC)
median expected limit: r < 6.72 @ 95%CL (1 toyMC)
   68% expected band : 6.72 < r < 6.72
   95% expected band : 6.72 < r < 6.72
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1408315258
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.69983 +/- 0.00477674 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.69983 @ 95%CL (1 toyMC)
median expected limit: r < 2.69983 @ 95%CL (1 toyMC)
   68% expected band : 2.69983 < r < 2.69983
   95% expected band : 2.69983 < r < 2.69983
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1279524669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99125 +/- 0.00673946 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 2.99125 @ 95%CL (1 toyMC)
median expected limit: r < 2.99125 @ 95%CL (1 toyMC)
   68% expected band : 2.99125 < r < 2.99125
   95% expected band : 2.99125 < r < 2.99125
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -9623248
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.11465 +/- 0.00620914 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.11465 @ 95%CL (1 toyMC)
median expected limit: r < 4.11465 @ 95%CL (1 toyMC)
   68% expected band : 4.11465 < r < 4.11465
   95% expected band : 4.11465 < r < 4.11465
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2052447610
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44462 +/- 0.00720349 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.44462 @ 95%CL (1 toyMC)
median expected limit: r < 3.44462 @ 95%CL (1 toyMC)
   68% expected band : 3.44462 < r < 3.44462
   95% expected band : 3.44462 < r < 3.44462
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1187224108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.79806 +/- 0.00987483 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.79806 @ 95%CL (1 toyMC)
median expected limit: r < 8.79806 @ 95%CL (1 toyMC)
   68% expected band : 8.79806 < r < 8.79806
   95% expected band : 8.79806 < r < 8.79806
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1546291952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.54981 +/- 0.00699381 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.54981 @ 95%CL (1 toyMC)
median expected limit: r < 3.54981 @ 95%CL (1 toyMC)
   68% expected band : 3.54981 < r < 3.54981
   95% expected band : 3.54981 < r < 3.54981
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1141277066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.1774 +/- 0.00669602 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.1774 @ 95%CL (1 toyMC)
median expected limit: r < 4.1774 @ 95%CL (1 toyMC)
   68% expected band : 4.1774 < r < 4.1774
   95% expected band : 4.1774 < r < 4.1774
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1202849428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.75201 +/- 0.00724862 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.75201 @ 95%CL (1 toyMC)
median expected limit: r < 4.75201 @ 95%CL (1 toyMC)
   68% expected band : 4.75201 < r < 4.75201
   95% expected band : 4.75201 < r < 4.75201
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1937691936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28151 +/- 0.00507795 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.28151 @ 95%CL (1 toyMC)
median expected limit: r < 2.28151 @ 95%CL (1 toyMC)
   68% expected band : 2.28151 < r < 2.28151
   95% expected band : 2.28151 < r < 2.28151
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1066188009.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1099292950.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1141277066.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1170142416.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1213447011.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-123079339.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1329706270.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1364202517.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-144768033.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1458978727.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1474245488.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1489475942.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1530417926.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1568046678.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1603895548.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1626111866.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1630528807.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1648271950.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-171364721.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1730990397.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1763940329.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-177979499.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1780939425.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1789304743.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1828265743.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-1874746673.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-187884355.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-1940004530.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-1981482880.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-255771193.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-296283007.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-309917540.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-348816837.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-365685221.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-638724909.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-714366053.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-739997706.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-766543861.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-819295514.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-829411341.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-870469795.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-874759568.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-923664445.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-9623248.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-965521736.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-972122337.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-972542393.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.1055834851.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1082718949.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1099015808.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1113894555.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1118877124.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1139978870.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1140495443.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1141705814.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1175494615.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1187224108.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1192571208.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1202849428.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1279524669.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1323115608.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1408315258.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1417420527.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1546291952.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1567404255.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1717147772.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1719436125.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1735681199.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1738355858.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.179007005.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1831172033.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1922877281.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1931863110.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1937691936.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.1957450661.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.1988775378.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.2002916598.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.2012637458.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.2013190010.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.2052447610.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.2057155325.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.2064134077.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.2119487719.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.2128947959.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.228607606.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.240516335.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.263478169.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.270483588.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.336310559.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.346010649.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.561569233.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.593293149.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.616974811.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.747429372.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.761682379.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.811328032.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.837485081.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.845388998.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.860640906.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.932694047.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 53548417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.98445 +/- 0.00954244 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.98445 @ 95%CL (1 toyMC)
median expected limit: r < 5.98445 @ 95%CL (1 toyMC)
   68% expected band : 5.98445 < r < 5.98445
   95% expected band : 5.98445 < r < 5.98445
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1787120428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.95023 +/- 0.00831302 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 5.95023 @ 95%CL (1 toyMC)
median expected limit: r < 5.95023 @ 95%CL (1 toyMC)
   68% expected band : 5.95023 < r < 5.95023
   95% expected band : 5.95023 < r < 5.95023
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1930523031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90118 +/- 0.00657874 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.90118 @ 95%CL (1 toyMC)
median expected limit: r < 3.90118 @ 95%CL (1 toyMC)
   68% expected band : 3.90118 < r < 3.90118
   95% expected band : 3.90118 < r < 3.90118
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 219214932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.08933 +/- 0.00671646 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.08933 @ 95%CL (1 toyMC)
median expected limit: r < 5.08933 @ 95%CL (1 toyMC)
   68% expected band : 5.08933 < r < 5.08933
   95% expected band : 5.08933 < r < 5.08933
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1547210641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.75564 +/- 0.00682093 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.75564 @ 95%CL (1 toyMC)
median expected limit: r < 2.75564 @ 95%CL (1 toyMC)
   68% expected band : 2.75564 < r < 2.75564
   95% expected band : 2.75564 < r < 2.75564
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 109460048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.96409 +/- 0.00858404 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.96409 @ 95%CL (1 toyMC)
median expected limit: r < 4.96409 @ 95%CL (1 toyMC)
   68% expected band : 4.96409 < r < 4.96409
   95% expected band : 4.96409 < r < 4.96409
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1301472529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.84612 +/- 0.0126988 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 9.84612 @ 95%CL (1 toyMC)
median expected limit: r < 9.84612 @ 95%CL (1 toyMC)
   68% expected band : 9.84612 < r < 9.84612
   95% expected band : 9.84612 < r < 9.84612
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1469656209
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.58042 +/- 0.0100596 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.58042 @ 95%CL (1 toyMC)
median expected limit: r < 7.58042 @ 95%CL (1 toyMC)
   68% expected band : 7.58042 < r < 7.58042
   95% expected band : 7.58042 < r < 7.58042
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1940143341
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.7673 +/- 0.0116621 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 7.7673 @ 95%CL (1 toyMC)
median expected limit: r < 7.7673 @ 95%CL (1 toyMC)
   68% expected band : 7.7673 < r < 7.7673
   95% expected band : 7.7673 < r < 7.7673
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 912440850
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92582 +/- 0.00860703 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.92582 @ 95%CL (1 toyMC)
median expected limit: r < 3.92582 @ 95%CL (1 toyMC)
   68% expected band : 3.92582 < r < 3.92582
   95% expected band : 3.92582 < r < 3.92582
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1432220420
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.71772 +/- 0.0081347 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.71772 @ 95%CL (1 toyMC)
median expected limit: r < 3.71772 @ 95%CL (1 toyMC)
   68% expected band : 3.71772 < r < 3.71772
   95% expected band : 3.71772 < r < 3.71772
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1122118367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.61765 +/- 0.00985901 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 8.61765 @ 95%CL (1 toyMC)
median expected limit: r < 8.61765 @ 95%CL (1 toyMC)
   68% expected band : 8.61765 < r < 8.61765
   95% expected band : 8.61765 < r < 8.61765
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 990122037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.73421 +/- 0.00948667 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.73421 @ 95%CL (1 toyMC)
median expected limit: r < 7.73421 @ 95%CL (1 toyMC)
   68% expected band : 7.73421 < r < 7.73421
   95% expected band : 7.73421 < r < 7.73421
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1753841743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.34044 +/- 0.00801196 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.34044 @ 95%CL (1 toyMC)
median expected limit: r < 4.34044 @ 95%CL (1 toyMC)
   68% expected band : 4.34044 < r < 4.34044
   95% expected band : 4.34044 < r < 4.34044
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 410083030
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.75273 +/- 0.00789017 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.75273 @ 95%CL (1 toyMC)
median expected limit: r < 3.75273 @ 95%CL (1 toyMC)
   68% expected band : 3.75273 < r < 3.75273
   95% expected band : 3.75273 < r < 3.75273
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -353906976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.78171 +/- 0.00793964 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.78171 @ 95%CL (1 toyMC)
median expected limit: r < 3.78171 @ 95%CL (1 toyMC)
   68% expected band : 3.78171 < r < 3.78171
   95% expected band : 3.78171 < r < 3.78171
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1118256460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.19927 +/- 0.011406 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.19927 @ 95%CL (1 toyMC)
median expected limit: r < 7.19927 @ 95%CL (1 toyMC)
   68% expected band : 7.19927 < r < 7.19927
   95% expected band : 7.19927 < r < 7.19927
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 383181124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.3139 +/- 0.00832119 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.3139 @ 95%CL (1 toyMC)
median expected limit: r < 4.3139 @ 95%CL (1 toyMC)
   68% expected band : 4.3139 < r < 4.3139
   95% expected band : 4.3139 < r < 4.3139
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 564118722
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.23566 +/- 0.0125069 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.23566 @ 95%CL (1 toyMC)
median expected limit: r < 7.23566 @ 95%CL (1 toyMC)
   68% expected band : 7.23566 < r < 7.23566
   95% expected band : 7.23566 < r < 7.23566
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1990199047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.74844 +/- 0.00854645 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.74844 @ 95%CL (1 toyMC)
median expected limit: r < 3.74844 @ 95%CL (1 toyMC)
   68% expected band : 3.74844 < r < 3.74844
   95% expected band : 3.74844 < r < 3.74844
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2052080945
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.2885 +/- 0.00598011 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.2885 @ 95%CL (1 toyMC)
median expected limit: r < 4.2885 @ 95%CL (1 toyMC)
   68% expected band : 4.2885 < r < 4.2885
   95% expected band : 4.2885 < r < 4.2885
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -613304418
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.9036 +/- 0.0105898 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 14.9036 @ 95%CL (1 toyMC)
median expected limit: r < 14.9036 @ 95%CL (1 toyMC)
   68% expected band : 14.9036 < r < 14.9036
   95% expected band : 14.9036 < r < 14.9036
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1763070092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.47607 +/- 0.00815896 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.47607 @ 95%CL (1 toyMC)
median expected limit: r < 5.47607 @ 95%CL (1 toyMC)
   68% expected band : 5.47607 < r < 5.47607
   95% expected band : 5.47607 < r < 5.47607
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1424580714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.97352 +/- 0.0114986 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 6.97352 @ 95%CL (1 toyMC)
median expected limit: r < 6.97352 @ 95%CL (1 toyMC)
   68% expected band : 6.97352 < r < 6.97352
   95% expected band : 6.97352 < r < 6.97352
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1220021334
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.74115 +/- 0.00687491 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.74115 @ 95%CL (1 toyMC)
median expected limit: r < 3.74115 @ 95%CL (1 toyMC)
   68% expected band : 3.74115 < r < 3.74115
   95% expected band : 3.74115 < r < 3.74115
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -929506761
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99192 +/- 0.00645806 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 2.99192 @ 95%CL (1 toyMC)
median expected limit: r < 2.99192 @ 95%CL (1 toyMC)
   68% expected band : 2.99192 < r < 2.99192
   95% expected band : 2.99192 < r < 2.99192
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -513408331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.29474 +/- 0.00905493 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.29474 @ 95%CL (1 toyMC)
median expected limit: r < 5.29474 @ 95%CL (1 toyMC)
   68% expected band : 5.29474 < r < 5.29474
   95% expected band : 5.29474 < r < 5.29474
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 729705605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.5197 +/- 0.0104463 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 6.5197 @ 95%CL (1 toyMC)
median expected limit: r < 6.5197 @ 95%CL (1 toyMC)
   68% expected band : 6.5197 < r < 6.5197
   95% expected band : 6.5197 < r < 6.5197
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1703866073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.21186 +/- 0.00835885 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.21186 @ 95%CL (1 toyMC)
median expected limit: r < 4.21186 @ 95%CL (1 toyMC)
   68% expected band : 4.21186 < r < 4.21186
   95% expected band : 4.21186 < r < 4.21186
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -218665718
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.38239 +/- 0.00729782 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 6.38239 @ 95%CL (1 toyMC)
median expected limit: r < 6.38239 @ 95%CL (1 toyMC)
   68% expected band : 6.38239 < r < 6.38239
   95% expected band : 6.38239 < r < 6.38239
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1023092495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.16358 +/- 0.0113663 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 8.16358 @ 95%CL (1 toyMC)
median expected limit: r < 8.16358 @ 95%CL (1 toyMC)
   68% expected band : 8.16358 < r < 8.16358
   95% expected band : 8.16358 < r < 8.16358
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1822710050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.42557 +/- 0.00739731 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.42557 @ 95%CL (1 toyMC)
median expected limit: r < 3.42557 @ 95%CL (1 toyMC)
   68% expected band : 3.42557 < r < 3.42557
   95% expected band : 3.42557 < r < 3.42557
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1455893349
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.13801 +/- 0.0100419 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.13801 @ 95%CL (1 toyMC)
median expected limit: r < 6.13801 @ 95%CL (1 toyMC)
   68% expected band : 6.13801 < r < 6.13801
   95% expected band : 6.13801 < r < 6.13801
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1158653858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.45893 +/- 0.00802331 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.45893 @ 95%CL (1 toyMC)
median expected limit: r < 6.45893 @ 95%CL (1 toyMC)
   68% expected band : 6.45893 < r < 6.45893
   95% expected band : 6.45893 < r < 6.45893
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1057303466
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.11371 +/- 0.0112835 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.11371 @ 95%CL (1 toyMC)
median expected limit: r < 6.11371 @ 95%CL (1 toyMC)
   68% expected band : 6.11371 < r < 6.11371
   95% expected band : 6.11371 < r < 6.11371
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1676816267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.85741 +/- 0.00770431 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.85741 @ 95%CL (1 toyMC)
median expected limit: r < 3.85741 @ 95%CL (1 toyMC)
   68% expected band : 3.85741 < r < 3.85741
   95% expected band : 3.85741 < r < 3.85741
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1860423434
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.40076 +/- 0.00868698 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.40076 @ 95%CL (1 toyMC)
median expected limit: r < 8.40076 @ 95%CL (1 toyMC)
   68% expected band : 8.40076 < r < 8.40076
   95% expected band : 8.40076 < r < 8.40076
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -701149248
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.05425 +/- 0.00847292 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.05425 @ 95%CL (1 toyMC)
median expected limit: r < 6.05425 @ 95%CL (1 toyMC)
   68% expected band : 6.05425 < r < 6.05425
   95% expected band : 6.05425 < r < 6.05425
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2086770549
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.83818 +/- 0.00967546 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.83818 @ 95%CL (1 toyMC)
median expected limit: r < 3.83818 @ 95%CL (1 toyMC)
   68% expected band : 3.83818 < r < 3.83818
   95% expected band : 3.83818 < r < 3.83818
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 683612068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.79587 +/- 0.00909793 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.79587 @ 95%CL (1 toyMC)
median expected limit: r < 4.79587 @ 95%CL (1 toyMC)
   68% expected band : 4.79587 < r < 4.79587
   95% expected band : 4.79587 < r < 4.79587
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -47770914
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.49776 +/- 0.0125089 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 8.49776 @ 95%CL (1 toyMC)
median expected limit: r < 8.49776 @ 95%CL (1 toyMC)
   68% expected band : 8.49776 < r < 8.49776
   95% expected band : 8.49776 < r < 8.49776
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -131035742
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.4878 +/- 0.0117522 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.4878 @ 95%CL (1 toyMC)
median expected limit: r < 6.4878 @ 95%CL (1 toyMC)
   68% expected band : 6.4878 < r < 6.4878
   95% expected band : 6.4878 < r < 6.4878
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1244870865
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.88459 +/- 0.0108435 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 7.88459 @ 95%CL (1 toyMC)
median expected limit: r < 7.88459 @ 95%CL (1 toyMC)
   68% expected band : 7.88459 < r < 7.88459
   95% expected band : 7.88459 < r < 7.88459
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 602618835
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.70351 +/- 0.00798791 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.70351 @ 95%CL (1 toyMC)
median expected limit: r < 4.70351 @ 95%CL (1 toyMC)
   68% expected band : 4.70351 < r < 4.70351
   95% expected band : 4.70351 < r < 4.70351
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -609431352
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.0271 +/- 0.0105721 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.0271 @ 95%CL (1 toyMC)
median expected limit: r < 7.0271 @ 95%CL (1 toyMC)
   68% expected band : 7.0271 < r < 7.0271
   95% expected band : 7.0271 < r < 7.0271
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1895480986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.58138 +/- 0.00660575 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.58138 @ 95%CL (1 toyMC)
median expected limit: r < 4.58138 @ 95%CL (1 toyMC)
   68% expected band : 4.58138 < r < 4.58138
   95% expected band : 4.58138 < r < 4.58138
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1314609538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.90491 +/- 0.00772358 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.90491 @ 95%CL (1 toyMC)
median expected limit: r < 4.90491 @ 95%CL (1 toyMC)
   68% expected band : 4.90491 < r < 4.90491
   95% expected band : 4.90491 < r < 4.90491
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1859565610
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.33933 +/- 0.0102764 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.33933 @ 95%CL (1 toyMC)
median expected limit: r < 7.33933 @ 95%CL (1 toyMC)
   68% expected band : 7.33933 < r < 7.33933
   95% expected band : 7.33933 < r < 7.33933
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1331462169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90875 +/- 0.00627986 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.90875 @ 95%CL (1 toyMC)
median expected limit: r < 3.90875 @ 95%CL (1 toyMC)
   68% expected band : 3.90875 < r < 3.90875
   95% expected band : 3.90875 < r < 3.90875
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 440168292
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.26846 +/- 0.00715855 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.26846 @ 95%CL (1 toyMC)
median expected limit: r < 4.26846 @ 95%CL (1 toyMC)
   68% expected band : 4.26846 < r < 4.26846
   95% expected band : 4.26846 < r < 4.26846
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 228701779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.05127 +/- 0.00909457 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.05127 @ 95%CL (1 toyMC)
median expected limit: r < 5.05127 @ 95%CL (1 toyMC)
   68% expected band : 5.05127 < r < 5.05127
   95% expected band : 5.05127 < r < 5.05127
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1277102686
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.71454 +/- 0.00909937 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.71454 @ 95%CL (1 toyMC)
median expected limit: r < 5.71454 @ 95%CL (1 toyMC)
   68% expected band : 5.71454 < r < 5.71454
   95% expected band : 5.71454 < r < 5.71454
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 595586495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.52875 +/- 0.00804613 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.52875 @ 95%CL (1 toyMC)
median expected limit: r < 4.52875 @ 95%CL (1 toyMC)
   68% expected band : 4.52875 < r < 4.52875
   95% expected band : 4.52875 < r < 4.52875
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 633052962
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.80213 +/- 0.00774181 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.80213 @ 95%CL (1 toyMC)
median expected limit: r < 4.80213 @ 95%CL (1 toyMC)
   68% expected band : 4.80213 < r < 4.80213
   95% expected band : 4.80213 < r < 4.80213
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1655759483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.30646 +/- 0.00974339 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 5.30646 @ 95%CL (1 toyMC)
median expected limit: r < 5.30646 @ 95%CL (1 toyMC)
   68% expected band : 5.30646 < r < 5.30646
   95% expected band : 5.30646 < r < 5.30646
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -822746350
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.53251 +/- 0.00595017 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.53251 @ 95%CL (1 toyMC)
median expected limit: r < 4.53251 @ 95%CL (1 toyMC)
   68% expected band : 4.53251 < r < 4.53251
   95% expected band : 4.53251 < r < 4.53251
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 559997227
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.63111 +/- 0.011335 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.63111 @ 95%CL (1 toyMC)
median expected limit: r < 7.63111 @ 95%CL (1 toyMC)
   68% expected band : 7.63111 < r < 7.63111
   95% expected band : 7.63111 < r < 7.63111
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1718732341
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.1698 +/- 0.00777969 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.1698 @ 95%CL (1 toyMC)
median expected limit: r < 4.1698 @ 95%CL (1 toyMC)
   68% expected band : 4.1698 < r < 4.1698
   95% expected band : 4.1698 < r < 4.1698
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1055300338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.38877 +/- 0.0103408 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.38877 @ 95%CL (1 toyMC)
median expected limit: r < 5.38877 @ 95%CL (1 toyMC)
   68% expected band : 5.38877 < r < 5.38877
   95% expected band : 5.38877 < r < 5.38877
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1219927796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.07733 +/- 0.00778043 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.07733 @ 95%CL (1 toyMC)
median expected limit: r < 4.07733 @ 95%CL (1 toyMC)
   68% expected band : 4.07733 < r < 4.07733
   95% expected band : 4.07733 < r < 4.07733
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -812473013
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.17983 +/- 0.00752986 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.17983 @ 95%CL (1 toyMC)
median expected limit: r < 5.17983 @ 95%CL (1 toyMC)
   68% expected band : 5.17983 < r < 5.17983
   95% expected band : 5.17983 < r < 5.17983
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1216792225
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.6708 +/- 0.0088755 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 5.6708 @ 95%CL (1 toyMC)
median expected limit: r < 5.6708 @ 95%CL (1 toyMC)
   68% expected band : 5.6708 < r < 5.6708
   95% expected band : 5.6708 < r < 5.6708
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -584076855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.29497 +/- 0.00796385 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.29497 @ 95%CL (1 toyMC)
median expected limit: r < 3.29497 @ 95%CL (1 toyMC)
   68% expected band : 3.29497 < r < 3.29497
   95% expected band : 3.29497 < r < 3.29497
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1982556938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.93393 +/- 0.00884336 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 4.93393 @ 95%CL (1 toyMC)
median expected limit: r < 4.93393 @ 95%CL (1 toyMC)
   68% expected band : 4.93393 < r < 4.93393
   95% expected band : 4.93393 < r < 4.93393
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1714921027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.1093 +/- 0.0105206 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.1093 @ 95%CL (1 toyMC)
median expected limit: r < 4.1093 @ 95%CL (1 toyMC)
   68% expected band : 4.1093 < r < 4.1093
   95% expected band : 4.1093 < r < 4.1093
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -289768538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6072 +/- 0.0125556 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.6072 @ 95%CL (1 toyMC)
median expected limit: r < 11.6072 @ 95%CL (1 toyMC)
   68% expected band : 11.6072 < r < 11.6072
   95% expected band : 11.6072 < r < 11.6072
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2012582657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.99432 +/- 0.00660032 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.99432 @ 95%CL (1 toyMC)
median expected limit: r < 3.99432 @ 95%CL (1 toyMC)
   68% expected band : 3.99432 < r < 3.99432
   95% expected band : 3.99432 < r < 3.99432
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 774596848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.0215 +/- 0.00803567 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.0215 @ 95%CL (1 toyMC)
median expected limit: r < 4.0215 @ 95%CL (1 toyMC)
   68% expected band : 4.0215 < r < 4.0215
   95% expected band : 4.0215 < r < 4.0215
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -184814135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.3585 +/- 0.0103478 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.3585 @ 95%CL (1 toyMC)
median expected limit: r < 6.3585 @ 95%CL (1 toyMC)
   68% expected band : 6.3585 < r < 6.3585
   95% expected band : 6.3585 < r < 6.3585
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -473990129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.26327 +/- 0.00595922 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.26327 @ 95%CL (1 toyMC)
median expected limit: r < 3.26327 @ 95%CL (1 toyMC)
   68% expected band : 3.26327 < r < 3.26327
   95% expected band : 3.26327 < r < 3.26327
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -457897861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.31932 +/- 0.00963451 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.31932 @ 95%CL (1 toyMC)
median expected limit: r < 6.31932 @ 95%CL (1 toyMC)
   68% expected band : 6.31932 < r < 6.31932
   95% expected band : 6.31932 < r < 6.31932
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 204515696
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.60798 +/- 0.00823299 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.60798 @ 95%CL (1 toyMC)
median expected limit: r < 5.60798 @ 95%CL (1 toyMC)
   68% expected band : 5.60798 < r < 5.60798
   95% expected band : 5.60798 < r < 5.60798
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1199952348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.93388 +/- 0.00979905 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.93388 @ 95%CL (1 toyMC)
median expected limit: r < 5.93388 @ 95%CL (1 toyMC)
   68% expected band : 5.93388 < r < 5.93388
   95% expected band : 5.93388 < r < 5.93388
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -547617403
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.46093 +/- 0.00944427 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.46093 @ 95%CL (1 toyMC)
median expected limit: r < 4.46093 @ 95%CL (1 toyMC)
   68% expected band : 4.46093 < r < 4.46093
   95% expected band : 4.46093 < r < 4.46093
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1004216238
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.60875 +/- 0.00693871 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.60875 @ 95%CL (1 toyMC)
median expected limit: r < 4.60875 @ 95%CL (1 toyMC)
   68% expected band : 4.60875 < r < 4.60875
   95% expected band : 4.60875 < r < 4.60875
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1685658329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91973 +/- 0.0081475 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.91973 @ 95%CL (1 toyMC)
median expected limit: r < 3.91973 @ 95%CL (1 toyMC)
   68% expected band : 3.91973 < r < 3.91973
   95% expected band : 3.91973 < r < 3.91973
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2105255414
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.02973 +/- 0.0114494 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.02973 @ 95%CL (1 toyMC)
median expected limit: r < 6.02973 @ 95%CL (1 toyMC)
   68% expected band : 6.02973 < r < 6.02973
   95% expected band : 6.02973 < r < 6.02973
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1566093465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.12509 +/- 0.00784308 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.12509 @ 95%CL (1 toyMC)
median expected limit: r < 5.12509 @ 95%CL (1 toyMC)
   68% expected band : 5.12509 < r < 5.12509
   95% expected band : 5.12509 < r < 5.12509
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1991194831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.20318 +/- 0.00711189 @ 95% CL (100 tries)
Done in 0.17 min (cpu), 0.17 min (real)
mean   expected limit: r < 3.20318 @ 95%CL (1 toyMC)
median expected limit: r < 3.20318 @ 95%CL (1 toyMC)
   68% expected band : 3.20318 < r < 3.20318
   95% expected band : 3.20318 < r < 3.20318
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1248583197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.20373 +/- 0.0087828 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.20373 @ 95%CL (1 toyMC)
median expected limit: r < 5.20373 @ 95%CL (1 toyMC)
   68% expected band : 5.20373 < r < 5.20373
   95% expected band : 5.20373 < r < 5.20373
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -650299355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.606 +/- 0.0127154 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.606 @ 95%CL (1 toyMC)
median expected limit: r < 7.606 @ 95%CL (1 toyMC)
   68% expected band : 7.606 < r < 7.606
   95% expected band : 7.606 < r < 7.606
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1447277180
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.64921 +/- 0.00829847 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.64921 @ 95%CL (1 toyMC)
median expected limit: r < 6.64921 @ 95%CL (1 toyMC)
   68% expected band : 6.64921 < r < 6.64921
   95% expected band : 6.64921 < r < 6.64921
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2038224756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58967 +/- 0.00475219 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.58967 @ 95%CL (1 toyMC)
median expected limit: r < 2.58967 @ 95%CL (1 toyMC)
   68% expected band : 2.58967 < r < 2.58967
   95% expected band : 2.58967 < r < 2.58967
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2029036127
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.34637 +/- 0.00987317 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.34637 @ 95%CL (1 toyMC)
median expected limit: r < 6.34637 @ 95%CL (1 toyMC)
   68% expected band : 6.34637 < r < 6.34637
   95% expected band : 6.34637 < r < 6.34637
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 705455045
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.10653 +/- 0.0097891 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.10653 @ 95%CL (1 toyMC)
median expected limit: r < 5.10653 @ 95%CL (1 toyMC)
   68% expected band : 5.10653 < r < 5.10653
   95% expected band : 5.10653 < r < 5.10653
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 531901838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.73176 +/- 0.0101461 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 6.73176 @ 95%CL (1 toyMC)
median expected limit: r < 6.73176 @ 95%CL (1 toyMC)
   68% expected band : 6.73176 < r < 6.73176
   95% expected band : 6.73176 < r < 6.73176
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -476984323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.66548 +/- 0.00682732 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.66548 @ 95%CL (1 toyMC)
median expected limit: r < 3.66548 @ 95%CL (1 toyMC)
   68% expected band : 3.66548 < r < 3.66548
   95% expected band : 3.66548 < r < 3.66548
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1157960434
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.33257 +/- 0.00801005 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.33257 @ 95%CL (1 toyMC)
median expected limit: r < 4.33257 @ 95%CL (1 toyMC)
   68% expected band : 4.33257 < r < 4.33257
   95% expected band : 4.33257 < r < 4.33257
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1481077804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.52794 +/- 0.00744997 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.52794 @ 95%CL (1 toyMC)
median expected limit: r < 5.52794 @ 95%CL (1 toyMC)
   68% expected band : 5.52794 < r < 5.52794
   95% expected band : 5.52794 < r < 5.52794
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1430316429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.00039 +/- 0.00995795 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 8.00039 @ 95%CL (1 toyMC)
median expected limit: r < 8.00039 @ 95%CL (1 toyMC)
   68% expected band : 8.00039 < r < 8.00039
   95% expected band : 8.00039 < r < 8.00039
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1112733361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.35732 +/- 0.00961842 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.35732 @ 95%CL (1 toyMC)
median expected limit: r < 4.35732 @ 95%CL (1 toyMC)
   68% expected band : 4.35732 < r < 4.35732
   95% expected band : 4.35732 < r < 4.35732
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 204360457
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.84094 +/- 0.00764067 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.84094 @ 95%CL (1 toyMC)
median expected limit: r < 3.84094 @ 95%CL (1 toyMC)
   68% expected band : 3.84094 < r < 3.84094
   95% expected band : 3.84094 < r < 3.84094
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -427317147
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.5437 +/- 0.011382 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.5437 @ 95%CL (1 toyMC)
median expected limit: r < 7.5437 @ 95%CL (1 toyMC)
   68% expected band : 7.5437 < r < 7.5437
   95% expected band : 7.5437 < r < 7.5437
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1480844799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.80115 +/- 0.0093397 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.80115 @ 95%CL (1 toyMC)
median expected limit: r < 4.80115 @ 95%CL (1 toyMC)
   68% expected band : 4.80115 < r < 4.80115
   95% expected band : 4.80115 < r < 4.80115
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1967733933
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6035 +/- 0.00727565 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.6035 @ 95%CL (1 toyMC)
median expected limit: r < 3.6035 @ 95%CL (1 toyMC)
   68% expected band : 3.6035 < r < 3.6035
   95% expected band : 3.6035 < r < 3.6035
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 226742197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.80834 +/- 0.00549544 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.80834 @ 95%CL (1 toyMC)
median expected limit: r < 3.80834 @ 95%CL (1 toyMC)
   68% expected band : 3.80834 < r < 3.80834
   95% expected band : 3.80834 < r < 3.80834
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1516994423
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.33525 +/- 0.0114141 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.33525 @ 95%CL (1 toyMC)
median expected limit: r < 7.33525 @ 95%CL (1 toyMC)
   68% expected band : 7.33525 < r < 7.33525
   95% expected band : 7.33525 < r < 7.33525
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -608662310
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.67916 +/- 0.00774151 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 6.67916 @ 95%CL (1 toyMC)
median expected limit: r < 6.67916 @ 95%CL (1 toyMC)
   68% expected band : 6.67916 < r < 6.67916
   95% expected band : 6.67916 < r < 6.67916
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1953896439
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.81013 +/- 0.00835376 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.81013 @ 95%CL (1 toyMC)
median expected limit: r < 5.81013 @ 95%CL (1 toyMC)
   68% expected band : 5.81013 < r < 5.81013
   95% expected band : 5.81013 < r < 5.81013
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1487990434
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.50294 +/- 0.00774462 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.50294 @ 95%CL (1 toyMC)
median expected limit: r < 4.50294 @ 95%CL (1 toyMC)
   68% expected band : 4.50294 < r < 4.50294
   95% expected band : 4.50294 < r < 4.50294
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1004216238.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1057303466.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1122118367.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1199952348.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-131035742.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1331462169.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1430316429.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1432220420.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1447277180.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1455893349.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1469656209.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1481077804.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1487990434.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1566093465.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1714921027.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1718732341.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1763070092.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-184814135.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1859565610.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1860423434.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1895480986.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1940143341.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1982556938.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1991194831.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-2052080945.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-2086770549.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-218665718.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-289768538.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-353906976.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-427317147.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-457897861.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-473990129.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-476984323.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-47770914.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-513408331.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-547617403.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-584076855.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-608662310.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-609431352.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-613304418.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-650299355.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-701149248.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-812473013.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-822746350.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-929506761.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.1023092495.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.1055300338.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.109460048.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1112733361.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1118256460.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1157960434.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1158653858.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1216792225.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1219927796.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1220021334.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1244870865.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1248583197.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1277102686.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1301472529.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1314609538.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1424580714.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1480844799.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1516994423.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1547210641.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1655759483.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1676816267.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1685658329.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1703866073.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1753841743.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1787120428.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1822710050.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1930523031.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1953896439.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1967733933.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.1990199047.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.2012582657.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.2029036127.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.2038224756.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.204360457.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.204515696.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.2105255414.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.219214932.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.226742197.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.228701779.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.383181124.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.410083030.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.440168292.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.531901838.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.53548417.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.559997227.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.564118722.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.595586495.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.602618835.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.633052962.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.683612068.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.705455045.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.729705605.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.774596848.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.912440850.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.990122037.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1017450452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.76503 +/- 0.00703398 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.76503 @ 95%CL (1 toyMC)
median expected limit: r < 3.76503 @ 95%CL (1 toyMC)
   68% expected band : 3.76503 < r < 3.76503
   95% expected band : 3.76503 < r < 3.76503
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1416137893
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.98841 +/- 0.00668581 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.98841 @ 95%CL (1 toyMC)
median expected limit: r < 3.98841 @ 95%CL (1 toyMC)
   68% expected band : 3.98841 < r < 3.98841
   95% expected band : 3.98841 < r < 3.98841
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1734928375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.69456 +/- 0.009847 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.69456 @ 95%CL (1 toyMC)
median expected limit: r < 5.69456 @ 95%CL (1 toyMC)
   68% expected band : 5.69456 < r < 5.69456
   95% expected band : 5.69456 < r < 5.69456
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1416184699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.10289 +/- 0.0109437 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.10289 @ 95%CL (1 toyMC)
median expected limit: r < 7.10289 @ 95%CL (1 toyMC)
   68% expected band : 7.10289 < r < 7.10289
   95% expected band : 7.10289 < r < 7.10289
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1872588669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.3414 +/- 0.00804991 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.3414 @ 95%CL (1 toyMC)
median expected limit: r < 4.3414 @ 95%CL (1 toyMC)
   68% expected band : 4.3414 < r < 4.3414
   95% expected band : 4.3414 < r < 4.3414
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1484711994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.96337 +/- 0.00698585 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.96337 @ 95%CL (1 toyMC)
median expected limit: r < 3.96337 @ 95%CL (1 toyMC)
   68% expected band : 3.96337 < r < 3.96337
   95% expected band : 3.96337 < r < 3.96337
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 960416631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.03661 +/- 0.00918753 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.03661 @ 95%CL (1 toyMC)
median expected limit: r < 6.03661 @ 95%CL (1 toyMC)
   68% expected band : 6.03661 < r < 6.03661
   95% expected band : 6.03661 < r < 6.03661
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1236331597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.15967 +/- 0.00998839 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.15967 @ 95%CL (1 toyMC)
median expected limit: r < 7.15967 @ 95%CL (1 toyMC)
   68% expected band : 7.15967 < r < 7.15967
   95% expected band : 7.15967 < r < 7.15967
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1688591612
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.81099 +/- 0.00702163 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.81099 @ 95%CL (1 toyMC)
median expected limit: r < 5.81099 @ 95%CL (1 toyMC)
   68% expected band : 5.81099 < r < 5.81099
   95% expected band : 5.81099 < r < 5.81099
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -988762012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.38658 +/- 0.00712814 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.38658 @ 95%CL (1 toyMC)
median expected limit: r < 5.38658 @ 95%CL (1 toyMC)
   68% expected band : 5.38658 < r < 5.38658
   95% expected band : 5.38658 < r < 5.38658
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 716249187
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.04243 +/- 0.00726286 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.04243 @ 95%CL (1 toyMC)
median expected limit: r < 4.04243 @ 95%CL (1 toyMC)
   68% expected band : 4.04243 < r < 4.04243
   95% expected band : 4.04243 < r < 4.04243
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1400253542
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.4525 +/- 0.00610291 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.4525 @ 95%CL (1 toyMC)
median expected limit: r < 4.4525 @ 95%CL (1 toyMC)
   68% expected band : 4.4525 < r < 4.4525
   95% expected band : 4.4525 < r < 4.4525
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2058870597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.55637 +/- 0.0137819 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 9.55637 @ 95%CL (1 toyMC)
median expected limit: r < 9.55637 @ 95%CL (1 toyMC)
   68% expected band : 9.55637 < r < 9.55637
   95% expected band : 9.55637 < r < 9.55637
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1858981441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0201 +/- 0.0130296 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 11.0201 @ 95%CL (1 toyMC)
median expected limit: r < 11.0201 @ 95%CL (1 toyMC)
   68% expected band : 11.0201 < r < 11.0201
   95% expected band : 11.0201 < r < 11.0201
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1608515400
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.79086 +/- 0.00737719 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.79086 @ 95%CL (1 toyMC)
median expected limit: r < 3.79086 @ 95%CL (1 toyMC)
   68% expected band : 3.79086 < r < 3.79086
   95% expected band : 3.79086 < r < 3.79086
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1523713350
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.01419 +/- 0.00828631 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.01419 @ 95%CL (1 toyMC)
median expected limit: r < 5.01419 @ 95%CL (1 toyMC)
   68% expected band : 5.01419 < r < 5.01419
   95% expected band : 5.01419 < r < 5.01419
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 725270567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.23767 +/- 0.0101447 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 6.23767 @ 95%CL (1 toyMC)
median expected limit: r < 6.23767 @ 95%CL (1 toyMC)
   68% expected band : 6.23767 < r < 6.23767
   95% expected band : 6.23767 < r < 6.23767
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1329858614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65731 +/- 0.00824418 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.65731 @ 95%CL (1 toyMC)
median expected limit: r < 3.65731 @ 95%CL (1 toyMC)
   68% expected band : 3.65731 < r < 3.65731
   95% expected band : 3.65731 < r < 3.65731
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 435225714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.62523 +/- 0.0085256 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.62523 @ 95%CL (1 toyMC)
median expected limit: r < 3.62523 @ 95%CL (1 toyMC)
   68% expected band : 3.62523 < r < 3.62523
   95% expected band : 3.62523 < r < 3.62523
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1139137272
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.75522 +/- 0.00849414 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.75522 @ 95%CL (1 toyMC)
median expected limit: r < 4.75522 @ 95%CL (1 toyMC)
   68% expected band : 4.75522 < r < 4.75522
   95% expected band : 4.75522 < r < 4.75522
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1080587141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.72643 +/- 0.00962898 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.72643 @ 95%CL (1 toyMC)
median expected limit: r < 5.72643 @ 95%CL (1 toyMC)
   68% expected band : 5.72643 < r < 5.72643
   95% expected band : 5.72643 < r < 5.72643
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1901877911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.51446 +/- 0.0101633 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.51446 @ 95%CL (1 toyMC)
median expected limit: r < 6.51446 @ 95%CL (1 toyMC)
   68% expected band : 6.51446 < r < 6.51446
   95% expected band : 6.51446 < r < 6.51446
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1760195734
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.32692 +/- 0.0080165 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.32692 @ 95%CL (1 toyMC)
median expected limit: r < 5.32692 @ 95%CL (1 toyMC)
   68% expected band : 5.32692 < r < 5.32692
   95% expected band : 5.32692 < r < 5.32692
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1729657202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.47765 +/- 0.00775834 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.47765 @ 95%CL (1 toyMC)
median expected limit: r < 4.47765 @ 95%CL (1 toyMC)
   68% expected band : 4.47765 < r < 4.47765
   95% expected band : 4.47765 < r < 4.47765
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1886438026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.01787 +/- 0.0110377 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.01787 @ 95%CL (1 toyMC)
median expected limit: r < 8.01787 @ 95%CL (1 toyMC)
   68% expected band : 8.01787 < r < 8.01787
   95% expected band : 8.01787 < r < 8.01787
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 72205721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.88354 +/- 0.00764095 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.88354 @ 95%CL (1 toyMC)
median expected limit: r < 5.88354 @ 95%CL (1 toyMC)
   68% expected band : 5.88354 < r < 5.88354
   95% expected band : 5.88354 < r < 5.88354
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -152476304
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.7135 +/- 0.0133762 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 8.7135 @ 95%CL (1 toyMC)
median expected limit: r < 8.7135 @ 95%CL (1 toyMC)
   68% expected band : 8.7135 < r < 8.7135
   95% expected band : 8.7135 < r < 8.7135
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1119803535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.75304 +/- 0.0105135 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.75304 @ 95%CL (1 toyMC)
median expected limit: r < 7.75304 @ 95%CL (1 toyMC)
   68% expected band : 7.75304 < r < 7.75304
   95% expected band : 7.75304 < r < 7.75304
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 758652478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.10887 +/- 0.0068954 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.10887 @ 95%CL (1 toyMC)
median expected limit: r < 4.10887 @ 95%CL (1 toyMC)
   68% expected band : 4.10887 < r < 4.10887
   95% expected band : 4.10887 < r < 4.10887
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 135055741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.11381 +/- 0.0090611 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.11381 @ 95%CL (1 toyMC)
median expected limit: r < 5.11381 @ 95%CL (1 toyMC)
   68% expected band : 5.11381 < r < 5.11381
   95% expected band : 5.11381 < r < 5.11381
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 284401085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.0998 +/- 0.00985336 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.0998 @ 95%CL (1 toyMC)
median expected limit: r < 7.0998 @ 95%CL (1 toyMC)
   68% expected band : 7.0998 < r < 7.0998
   95% expected band : 7.0998 < r < 7.0998
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 494998561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.38926 +/- 0.0110946 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.38926 @ 95%CL (1 toyMC)
median expected limit: r < 7.38926 @ 95%CL (1 toyMC)
   68% expected band : 7.38926 < r < 7.38926
   95% expected band : 7.38926 < r < 7.38926
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -152258922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.85499 +/- 0.0142912 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.85499 @ 95%CL (1 toyMC)
median expected limit: r < 8.85499 @ 95%CL (1 toyMC)
   68% expected band : 8.85499 < r < 8.85499
   95% expected band : 8.85499 < r < 8.85499
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1476648370
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.76813 +/- 0.0102816 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 6.76813 @ 95%CL (1 toyMC)
median expected limit: r < 6.76813 @ 95%CL (1 toyMC)
   68% expected band : 6.76813 < r < 6.76813
   95% expected band : 6.76813 < r < 6.76813
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1089963830
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.46742 +/- 0.00887532 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.46742 @ 95%CL (1 toyMC)
median expected limit: r < 5.46742 @ 95%CL (1 toyMC)
   68% expected band : 5.46742 < r < 5.46742
   95% expected band : 5.46742 < r < 5.46742
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2035731862
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.3198 +/- 0.00911433 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.3198 @ 95%CL (1 toyMC)
median expected limit: r < 6.3198 @ 95%CL (1 toyMC)
   68% expected band : 6.3198 < r < 6.3198
   95% expected band : 6.3198 < r < 6.3198
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -682892524
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.27313 +/- 0.00874248 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.27313 @ 95%CL (1 toyMC)
median expected limit: r < 5.27313 @ 95%CL (1 toyMC)
   68% expected band : 5.27313 < r < 5.27313
   95% expected band : 5.27313 < r < 5.27313
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1093975292
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.4329 +/- 0.00768676 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.4329 @ 95%CL (1 toyMC)
median expected limit: r < 4.4329 @ 95%CL (1 toyMC)
   68% expected band : 4.4329 < r < 4.4329
   95% expected band : 4.4329 < r < 4.4329
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1037507257
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.35679 +/- 0.00878401 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.35679 @ 95%CL (1 toyMC)
median expected limit: r < 7.35679 @ 95%CL (1 toyMC)
   68% expected band : 7.35679 < r < 7.35679
   95% expected band : 7.35679 < r < 7.35679
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1169970230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.63992 +/- 0.00894254 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.63992 @ 95%CL (1 toyMC)
median expected limit: r < 5.63992 @ 95%CL (1 toyMC)
   68% expected band : 5.63992 < r < 5.63992
   95% expected band : 5.63992 < r < 5.63992
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1468655274
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.7579 +/- 0.0104508 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.7579 @ 95%CL (1 toyMC)
median expected limit: r < 5.7579 @ 95%CL (1 toyMC)
   68% expected band : 5.7579 < r < 5.7579
   95% expected band : 5.7579 < r < 5.7579
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1978893622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.66911 +/- 0.00892574 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 5.66911 @ 95%CL (1 toyMC)
median expected limit: r < 5.66911 @ 95%CL (1 toyMC)
   68% expected band : 5.66911 < r < 5.66911
   95% expected band : 5.66911 < r < 5.66911
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 918394319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.78933 +/- 0.00927414 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.78933 @ 95%CL (1 toyMC)
median expected limit: r < 4.78933 @ 95%CL (1 toyMC)
   68% expected band : 4.78933 < r < 4.78933
   95% expected band : 4.78933 < r < 4.78933
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1774425596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.7851 +/- 0.00628344 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.7851 @ 95%CL (1 toyMC)
median expected limit: r < 3.7851 @ 95%CL (1 toyMC)
   68% expected band : 3.7851 < r < 3.7851
   95% expected band : 3.7851 < r < 3.7851
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1623888036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.50454 +/- 0.0123817 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.50454 @ 95%CL (1 toyMC)
median expected limit: r < 7.50454 @ 95%CL (1 toyMC)
   68% expected band : 7.50454 < r < 7.50454
   95% expected band : 7.50454 < r < 7.50454
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1837284704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.11849 +/- 0.0111698 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.11849 @ 95%CL (1 toyMC)
median expected limit: r < 7.11849 @ 95%CL (1 toyMC)
   68% expected band : 7.11849 < r < 7.11849
   95% expected band : 7.11849 < r < 7.11849
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -838204654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.05796 +/- 0.0112831 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.05796 @ 95%CL (1 toyMC)
median expected limit: r < 6.05796 @ 95%CL (1 toyMC)
   68% expected band : 6.05796 < r < 6.05796
   95% expected band : 6.05796 < r < 6.05796
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1842927637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.27805 +/- 0.0122041 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.27805 @ 95%CL (1 toyMC)
median expected limit: r < 6.27805 @ 95%CL (1 toyMC)
   68% expected band : 6.27805 < r < 6.27805
   95% expected band : 6.27805 < r < 6.27805
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1759198981
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.35533 +/- 0.0127143 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.35533 @ 95%CL (1 toyMC)
median expected limit: r < 7.35533 @ 95%CL (1 toyMC)
   68% expected band : 7.35533 < r < 7.35533
   95% expected band : 7.35533 < r < 7.35533
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1920158438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.20607 +/- 0.00840325 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.20607 @ 95%CL (1 toyMC)
median expected limit: r < 5.20607 @ 95%CL (1 toyMC)
   68% expected band : 5.20607 < r < 5.20607
   95% expected band : 5.20607 < r < 5.20607
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2031029812
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.90429 +/- 0.0098507 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 8.90429 @ 95%CL (1 toyMC)
median expected limit: r < 8.90429 @ 95%CL (1 toyMC)
   68% expected band : 8.90429 < r < 8.90429
   95% expected band : 8.90429 < r < 8.90429
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1507852599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.8077 +/- 0.00645723 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.8077 @ 95%CL (1 toyMC)
median expected limit: r < 3.8077 @ 95%CL (1 toyMC)
   68% expected band : 3.8077 < r < 3.8077
   95% expected band : 3.8077 < r < 3.8077
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1577610274
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.86214 +/- 0.00955471 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.86214 @ 95%CL (1 toyMC)
median expected limit: r < 4.86214 @ 95%CL (1 toyMC)
   68% expected band : 4.86214 < r < 4.86214
   95% expected band : 4.86214 < r < 4.86214
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -70606870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.08435 +/- 0.0103322 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.08435 @ 95%CL (1 toyMC)
median expected limit: r < 8.08435 @ 95%CL (1 toyMC)
   68% expected band : 8.08435 < r < 8.08435
   95% expected band : 8.08435 < r < 8.08435
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2141209988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.78027 +/- 0.0102786 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 7.78027 @ 95%CL (1 toyMC)
median expected limit: r < 7.78027 @ 95%CL (1 toyMC)
   68% expected band : 7.78027 < r < 7.78027
   95% expected band : 7.78027 < r < 7.78027
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1024666054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.85178 +/- 0.0122694 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 7.85178 @ 95%CL (1 toyMC)
median expected limit: r < 7.85178 @ 95%CL (1 toyMC)
   68% expected band : 7.85178 < r < 7.85178
   95% expected band : 7.85178 < r < 7.85178
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1029031798
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.92582 +/- 0.0110923 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 6.92582 @ 95%CL (1 toyMC)
median expected limit: r < 6.92582 @ 95%CL (1 toyMC)
   68% expected band : 6.92582 < r < 6.92582
   95% expected band : 6.92582 < r < 6.92582
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1760023536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.8898 +/- 0.00925347 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.8898 @ 95%CL (1 toyMC)
median expected limit: r < 5.8898 @ 95%CL (1 toyMC)
   68% expected band : 5.8898 < r < 5.8898
   95% expected band : 5.8898 < r < 5.8898
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -176447807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.50558 +/- 0.0120364 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 9.50558 @ 95%CL (1 toyMC)
median expected limit: r < 9.50558 @ 95%CL (1 toyMC)
   68% expected band : 9.50558 < r < 9.50558
   95% expected band : 9.50558 < r < 9.50558
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1574499243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.39955 +/- 0.00908169 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.39955 @ 95%CL (1 toyMC)
median expected limit: r < 5.39955 @ 95%CL (1 toyMC)
   68% expected band : 5.39955 < r < 5.39955
   95% expected band : 5.39955 < r < 5.39955
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1332937609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.32938 +/- 0.00952829 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.32938 @ 95%CL (1 toyMC)
median expected limit: r < 5.32938 @ 95%CL (1 toyMC)
   68% expected band : 5.32938 < r < 5.32938
   95% expected band : 5.32938 < r < 5.32938
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1745874487
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.32634 +/- 0.00981553 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.32634 @ 95%CL (1 toyMC)
median expected limit: r < 4.32634 @ 95%CL (1 toyMC)
   68% expected band : 4.32634 < r < 4.32634
   95% expected band : 4.32634 < r < 4.32634
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -214976717
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.37258 +/- 0.010614 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.37258 @ 95%CL (1 toyMC)
median expected limit: r < 7.37258 @ 95%CL (1 toyMC)
   68% expected band : 7.37258 < r < 7.37258
   95% expected band : 7.37258 < r < 7.37258
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1016497598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.78143 +/- 0.0096037 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.78143 @ 95%CL (1 toyMC)
median expected limit: r < 4.78143 @ 95%CL (1 toyMC)
   68% expected band : 4.78143 < r < 4.78143
   95% expected band : 4.78143 < r < 4.78143
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2730684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.3684 +/- 0.00821657 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.3684 @ 95%CL (1 toyMC)
median expected limit: r < 5.3684 @ 95%CL (1 toyMC)
   68% expected band : 5.3684 < r < 5.3684
   95% expected band : 5.3684 < r < 5.3684
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -193670640
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.08648 +/- 0.00532487 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.08648 @ 95%CL (1 toyMC)
median expected limit: r < 4.08648 @ 95%CL (1 toyMC)
   68% expected band : 4.08648 < r < 4.08648
   95% expected band : 4.08648 < r < 4.08648
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -608646766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.72529 +/- 0.00857358 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.72529 @ 95%CL (1 toyMC)
median expected limit: r < 4.72529 @ 95%CL (1 toyMC)
   68% expected band : 4.72529 < r < 4.72529
   95% expected band : 4.72529 < r < 4.72529
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2081753023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.04994 +/- 0.00984236 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.04994 @ 95%CL (1 toyMC)
median expected limit: r < 5.04994 @ 95%CL (1 toyMC)
   68% expected band : 5.04994 < r < 5.04994
   95% expected band : 5.04994 < r < 5.04994
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -115656563
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.83756 +/- 0.00769027 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.83756 @ 95%CL (1 toyMC)
median expected limit: r < 4.83756 @ 95%CL (1 toyMC)
   68% expected band : 4.83756 < r < 4.83756
   95% expected band : 4.83756 < r < 4.83756
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -902525917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.11341 +/- 0.00626793 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.11341 @ 95%CL (1 toyMC)
median expected limit: r < 4.11341 @ 95%CL (1 toyMC)
   68% expected band : 4.11341 < r < 4.11341
   95% expected band : 4.11341 < r < 4.11341
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1383160746
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.69229 +/- 0.00738087 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.69229 @ 95%CL (1 toyMC)
median expected limit: r < 3.69229 @ 95%CL (1 toyMC)
   68% expected band : 3.69229 < r < 3.69229
   95% expected band : 3.69229 < r < 3.69229
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -51227543
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.1745 +/- 0.00913052 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.1745 @ 95%CL (1 toyMC)
median expected limit: r < 6.1745 @ 95%CL (1 toyMC)
   68% expected band : 6.1745 < r < 6.1745
   95% expected band : 6.1745 < r < 6.1745
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1897534260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27466 +/- 0.00747459 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.19 min (real)
mean   expected limit: r < 3.27466 @ 95%CL (1 toyMC)
median expected limit: r < 3.27466 @ 95%CL (1 toyMC)
   68% expected band : 3.27466 < r < 3.27466
   95% expected band : 3.27466 < r < 3.27466
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1278259199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.25574 +/- 0.00812755 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.25574 @ 95%CL (1 toyMC)
median expected limit: r < 5.25574 @ 95%CL (1 toyMC)
   68% expected band : 5.25574 < r < 5.25574
   95% expected band : 5.25574 < r < 5.25574
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1627476826
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.37902 +/- 0.00906798 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.37902 @ 95%CL (1 toyMC)
median expected limit: r < 4.37902 @ 95%CL (1 toyMC)
   68% expected band : 4.37902 < r < 4.37902
   95% expected band : 4.37902 < r < 4.37902
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1421264311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28099 +/- 0.00469203 @ 95% CL (100 tries)
Done in 0.16 min (cpu), 0.16 min (real)
mean   expected limit: r < 2.28099 @ 95%CL (1 toyMC)
median expected limit: r < 2.28099 @ 95%CL (1 toyMC)
   68% expected band : 2.28099 < r < 2.28099
   95% expected band : 2.28099 < r < 2.28099
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 705868655
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.52223 +/- 0.00884216 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.52223 @ 95%CL (1 toyMC)
median expected limit: r < 5.52223 @ 95%CL (1 toyMC)
   68% expected band : 5.52223 < r < 5.52223
   95% expected band : 5.52223 < r < 5.52223
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1053632554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.42077 +/- 0.00935208 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.42077 @ 95%CL (1 toyMC)
median expected limit: r < 6.42077 @ 95%CL (1 toyMC)
   68% expected band : 6.42077 < r < 6.42077
   95% expected band : 6.42077 < r < 6.42077
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1633267718
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.79445 +/- 0.00865344 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.79445 @ 95%CL (1 toyMC)
median expected limit: r < 4.79445 @ 95%CL (1 toyMC)
   68% expected band : 4.79445 < r < 4.79445
   95% expected band : 4.79445 < r < 4.79445
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -458853706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.86366 +/- 0.0111863 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.86366 @ 95%CL (1 toyMC)
median expected limit: r < 5.86366 @ 95%CL (1 toyMC)
   68% expected band : 5.86366 < r < 5.86366
   95% expected band : 5.86366 < r < 5.86366
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 733265140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.11341 +/- 0.0092476 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.11341 @ 95%CL (1 toyMC)
median expected limit: r < 5.11341 @ 95%CL (1 toyMC)
   68% expected band : 5.11341 < r < 5.11341
   95% expected band : 5.11341 < r < 5.11341
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1111286446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.15027 +/- 0.00833649 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.15027 @ 95%CL (1 toyMC)
median expected limit: r < 6.15027 @ 95%CL (1 toyMC)
   68% expected band : 6.15027 < r < 6.15027
   95% expected band : 6.15027 < r < 6.15027
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2032062805
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.73975 +/- 0.00837993 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 3.73975 @ 95%CL (1 toyMC)
median expected limit: r < 3.73975 @ 95%CL (1 toyMC)
   68% expected band : 3.73975 < r < 3.73975
   95% expected band : 3.73975 < r < 3.73975
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1849686923
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.1111 +/- 0.00882396 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.1111 @ 95%CL (1 toyMC)
median expected limit: r < 5.1111 @ 95%CL (1 toyMC)
   68% expected band : 5.1111 < r < 5.1111
   95% expected band : 5.1111 < r < 5.1111
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -578736823
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.03049 +/- 0.0131331 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.03049 @ 95%CL (1 toyMC)
median expected limit: r < 7.03049 @ 95%CL (1 toyMC)
   68% expected band : 7.03049 < r < 7.03049
   95% expected band : 7.03049 < r < 7.03049
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1772368194
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.32213 +/- 0.0099495 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.32213 @ 95%CL (1 toyMC)
median expected limit: r < 5.32213 @ 95%CL (1 toyMC)
   68% expected band : 5.32213 < r < 5.32213
   95% expected band : 5.32213 < r < 5.32213
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -690275437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.8681 +/- 0.00943718 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 5.8681 @ 95%CL (1 toyMC)
median expected limit: r < 5.8681 @ 95%CL (1 toyMC)
   68% expected band : 5.8681 < r < 5.8681
   95% expected band : 5.8681 < r < 5.8681
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1564175047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.19566 +/- 0.00834283 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 6.19566 @ 95%CL (1 toyMC)
median expected limit: r < 6.19566 @ 95%CL (1 toyMC)
   68% expected band : 6.19566 < r < 6.19566
   95% expected band : 6.19566 < r < 6.19566
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1000807732
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.41192 +/- 0.0123798 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.41192 @ 95%CL (1 toyMC)
median expected limit: r < 6.41192 @ 95%CL (1 toyMC)
   68% expected band : 6.41192 < r < 6.41192
   95% expected band : 6.41192 < r < 6.41192
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -918258076
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.74613 +/- 0.00778301 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 6.74613 @ 95%CL (1 toyMC)
median expected limit: r < 6.74613 @ 95%CL (1 toyMC)
   68% expected band : 6.74613 < r < 6.74613
   95% expected band : 6.74613 < r < 6.74613
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 533827760
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.33198 +/- 0.00958175 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 6.33198 @ 95%CL (1 toyMC)
median expected limit: r < 6.33198 @ 95%CL (1 toyMC)
   68% expected band : 6.33198 < r < 6.33198
   95% expected band : 6.33198 < r < 6.33198
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -961199935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.21043 +/- 0.00952855 @ 95% CL (100 tries)
Done in 0.18 min (cpu), 0.18 min (real)
mean   expected limit: r < 4.21043 @ 95%CL (1 toyMC)
median expected limit: r < 4.21043 @ 95%CL (1 toyMC)
   68% expected band : 4.21043 < r < 4.21043
   95% expected band : 4.21043 < r < 4.21043
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1079571337
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.0545 +/- 0.00687988 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.0545 @ 95%CL (1 toyMC)
median expected limit: r < 5.0545 @ 95%CL (1 toyMC)
   68% expected band : 5.0545 < r < 5.0545
   95% expected band : 5.0545 < r < 5.0545
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2109531284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.18768 +/- 0.00856816 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.18768 @ 95%CL (1 toyMC)
median expected limit: r < 5.18768 @ 95%CL (1 toyMC)
   68% expected band : 5.18768 < r < 5.18768
   95% expected band : 5.18768 < r < 5.18768
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 932048193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.52082 +/- 0.0109762 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 6.52082 @ 95%CL (1 toyMC)
median expected limit: r < 6.52082 @ 95%CL (1 toyMC)
   68% expected band : 6.52082 < r < 6.52082
   95% expected band : 6.52082 < r < 6.52082
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1770101381
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.44971 +/- 0.00879555 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 4.44971 @ 95%CL (1 toyMC)
median expected limit: r < 4.44971 @ 95%CL (1 toyMC)
   68% expected band : 4.44971 < r < 4.44971
   95% expected band : 4.44971 < r < 4.44971
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1058281960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.20878 +/- 0.00997621 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 5.20878 @ 95%CL (1 toyMC)
median expected limit: r < 5.20878 @ 95%CL (1 toyMC)
   68% expected band : 5.20878 < r < 5.20878
   95% expected band : 5.20878 < r < 5.20878
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1004766707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.1183 +/- 0.0136887 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.1183 @ 95%CL (1 toyMC)
median expected limit: r < 12.1183 @ 95%CL (1 toyMC)
   68% expected band : 12.1183 < r < 12.1183
   95% expected band : 12.1183 < r < 12.1183
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1333720391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.75211 +/- 0.00838843 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 4.75211 @ 95%CL (1 toyMC)
median expected limit: r < 4.75211 @ 95%CL (1 toyMC)
   68% expected band : 4.75211 < r < 4.75211
   95% expected band : 4.75211 < r < 4.75211
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1822204211
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.18741 +/- 0.00943948 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.18741 @ 95%CL (1 toyMC)
median expected limit: r < 5.18741 @ 95%CL (1 toyMC)
   68% expected band : 5.18741 < r < 5.18741
   95% expected band : 5.18741 < r < 5.18741
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1024666054.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1029031798.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1037507257.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1079571337.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1093975292.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1119803535.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1139137272.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-115656563.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1169970230.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1236331597.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1329858614.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1332937609.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1333720391.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1383160746.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1400253542.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1416137893.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1416184699.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-152258922.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-152476304.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1574499243.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1608515400.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1729657202.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1734928375.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1745874487.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-176447807.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-1770101381.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-1772368194.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-1822204211.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-1837284704.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-1842927637.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-1858981441.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-1886438026.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-1897534260.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-193670640.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-1978893622.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-2031029812.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-2109531284.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-2141209988.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-214976717.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-458853706.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-51227543.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-578736823.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-608646766.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-682892524.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-690275437.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-70606870.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-838204654.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.-902525917.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.-918258076.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.-961199935.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.-988762012.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1000807732.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1004766707.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1016497598.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1017450452.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1053632554.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1058281960.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1080587141.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1089963830.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1111286446.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1278259199.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.135055741.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1421264311.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1468655274.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1476648370.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1484711994.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1507852599.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1523713350.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1564175047.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1577610274.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1623888036.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1627476826.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1633267718.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1688591612.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.1759198981.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.1760023536.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.1760195734.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.1774425596.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.1849686923.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.1872588669.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.1901877911.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.1920158438.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.2032062805.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.2035731862.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.2058870597.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.2081753023.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.2730684.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.284401085.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.435225714.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.494998561.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.533827760.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.705868655.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.716249187.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.72205721.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.725270567.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.733265140.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.758652478.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.918394319.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.932048193.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.960416631.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1019952449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.91124 +/- 0.0171852 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.91124 @ 95%CL (1 toyMC)
median expected limit: r < 8.91124 @ 95%CL (1 toyMC)
   68% expected band : 8.91124 < r < 8.91124
   95% expected band : 8.91124 < r < 8.91124
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1715323007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6247 +/- 0.018459 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.6247 @ 95%CL (1 toyMC)
median expected limit: r < 10.6247 @ 95%CL (1 toyMC)
   68% expected band : 10.6247 < r < 10.6247
   95% expected band : 10.6247 < r < 10.6247
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 375568050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7653 +/- 0.0138501 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.7653 @ 95%CL (1 toyMC)
median expected limit: r < 12.7653 @ 95%CL (1 toyMC)
   68% expected band : 12.7653 < r < 12.7653
   95% expected band : 12.7653 < r < 12.7653
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1810914331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.2336 +/- 0.0135704 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.2336 @ 95%CL (1 toyMC)
median expected limit: r < 15.2336 @ 95%CL (1 toyMC)
   68% expected band : 15.2336 < r < 15.2336
   95% expected band : 15.2336 < r < 15.2336
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1998642932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.3659 +/- 0.016509 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.3659 @ 95%CL (1 toyMC)
median expected limit: r < 11.3659 @ 95%CL (1 toyMC)
   68% expected band : 11.3659 < r < 11.3659
   95% expected band : 11.3659 < r < 11.3659
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1855514200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.5637 +/- 0.0106814 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.5637 @ 95%CL (1 toyMC)
median expected limit: r < 15.5637 @ 95%CL (1 toyMC)
   68% expected band : 15.5637 < r < 15.5637
   95% expected band : 15.5637 < r < 15.5637
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1421852144
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.2106 +/- 0.00982457 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 16.2106 @ 95%CL (1 toyMC)
median expected limit: r < 16.2106 @ 95%CL (1 toyMC)
   68% expected band : 16.2106 < r < 16.2106
   95% expected band : 16.2106 < r < 16.2106
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 211744744
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.0891 +/- 0.0102927 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.0891 @ 95%CL (1 toyMC)
median expected limit: r < 15.0891 @ 95%CL (1 toyMC)
   68% expected band : 15.0891 < r < 15.0891
   95% expected band : 15.0891 < r < 15.0891
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 241990887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.69154 +/- 0.016312 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.69154 @ 95%CL (1 toyMC)
median expected limit: r < 8.69154 @ 95%CL (1 toyMC)
   68% expected band : 8.69154 < r < 8.69154
   95% expected band : 8.69154 < r < 8.69154
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 699066537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.5825 +/- 0.0134446 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 14.5825 @ 95%CL (1 toyMC)
median expected limit: r < 14.5825 @ 95%CL (1 toyMC)
   68% expected band : 14.5825 < r < 14.5825
   95% expected band : 14.5825 < r < 14.5825
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1464475536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7302 +/- 0.0144098 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.7302 @ 95%CL (1 toyMC)
median expected limit: r < 12.7302 @ 95%CL (1 toyMC)
   68% expected band : 12.7302 < r < 12.7302
   95% expected band : 12.7302 < r < 12.7302
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1867133072
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.4585 +/- 0.0145827 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.4585 @ 95%CL (1 toyMC)
median expected limit: r < 13.4585 @ 95%CL (1 toyMC)
   68% expected band : 13.4585 < r < 13.4585
   95% expected band : 13.4585 < r < 13.4585
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1907112163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.2811 +/- 0.016222 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 13.2811 @ 95%CL (1 toyMC)
median expected limit: r < 13.2811 @ 95%CL (1 toyMC)
   68% expected band : 13.2811 < r < 13.2811
   95% expected band : 13.2811 < r < 13.2811
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1394997922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1368 +/- 0.0154152 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.1368 @ 95%CL (1 toyMC)
median expected limit: r < 10.1368 @ 95%CL (1 toyMC)
   68% expected band : 10.1368 < r < 10.1368
   95% expected band : 10.1368 < r < 10.1368
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 535391542
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.9256 +/- 0.0117103 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 15.9256 @ 95%CL (1 toyMC)
median expected limit: r < 15.9256 @ 95%CL (1 toyMC)
   68% expected band : 15.9256 < r < 15.9256
   95% expected band : 15.9256 < r < 15.9256
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 810443848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.4851 +/- 0.019536 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.4851 @ 95%CL (1 toyMC)
median expected limit: r < 10.4851 @ 95%CL (1 toyMC)
   68% expected band : 10.4851 < r < 10.4851
   95% expected band : 10.4851 < r < 10.4851
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2143544646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.5576 +/- 0.0145278 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.5576 @ 95%CL (1 toyMC)
median expected limit: r < 11.5576 @ 95%CL (1 toyMC)
   68% expected band : 11.5576 < r < 11.5576
   95% expected band : 11.5576 < r < 11.5576
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1872431836
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.5486 +/- 0.0129128 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.5486 @ 95%CL (1 toyMC)
median expected limit: r < 15.5486 @ 95%CL (1 toyMC)
   68% expected band : 15.5486 < r < 15.5486
   95% expected band : 15.5486 < r < 15.5486
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -92137631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.0265 +/- 0.0186091 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 12.0265 @ 95%CL (1 toyMC)
median expected limit: r < 12.0265 @ 95%CL (1 toyMC)
   68% expected band : 12.0265 < r < 12.0265
   95% expected band : 12.0265 < r < 12.0265
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -886059062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0346 +/- 0.0173275 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.0346 @ 95%CL (1 toyMC)
median expected limit: r < 10.0346 @ 95%CL (1 toyMC)
   68% expected band : 10.0346 < r < 10.0346
   95% expected band : 10.0346 < r < 10.0346
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -47408251
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0064 +/- 0.0207676 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.0064 @ 95%CL (1 toyMC)
median expected limit: r < 10.0064 @ 95%CL (1 toyMC)
   68% expected band : 10.0064 < r < 10.0064
   95% expected band : 10.0064 < r < 10.0064
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -269673586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0652 +/- 0.0142702 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.0652 @ 95%CL (1 toyMC)
median expected limit: r < 11.0652 @ 95%CL (1 toyMC)
   68% expected band : 11.0652 < r < 11.0652
   95% expected band : 11.0652 < r < 11.0652
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -720409097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.5066 +/- 0.0146566 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 12.5066 @ 95%CL (1 toyMC)
median expected limit: r < 12.5066 @ 95%CL (1 toyMC)
   68% expected band : 12.5066 < r < 12.5066
   95% expected band : 12.5066 < r < 12.5066
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1170133469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 18.1605 +/- 0.004545 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 18.1605 @ 95%CL (1 toyMC)
median expected limit: r < 18.1605 @ 95%CL (1 toyMC)
   68% expected band : 18.1605 < r < 18.1605
   95% expected band : 18.1605 < r < 18.1605
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1003236284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.537 +/- 0.0157173 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.537 @ 95%CL (1 toyMC)
median expected limit: r < 10.537 @ 95%CL (1 toyMC)
   68% expected band : 10.537 < r < 10.537
   95% expected band : 10.537 < r < 10.537
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1838086798
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.5995 +/- 0.0143831 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.5995 @ 95%CL (1 toyMC)
median expected limit: r < 13.5995 @ 95%CL (1 toyMC)
   68% expected band : 13.5995 < r < 13.5995
   95% expected band : 13.5995 < r < 13.5995
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -582141215
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6047 +/- 0.0193368 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.6047 @ 95%CL (1 toyMC)
median expected limit: r < 10.6047 @ 95%CL (1 toyMC)
   68% expected band : 10.6047 < r < 10.6047
   95% expected band : 10.6047 < r < 10.6047
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1145000235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.8978 +/- 0.0116652 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 15.8978 @ 95%CL (1 toyMC)
median expected limit: r < 15.8978 @ 95%CL (1 toyMC)
   68% expected band : 15.8978 < r < 15.8978
   95% expected band : 15.8978 < r < 15.8978
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 999936312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.9692 +/- 0.0145926 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.9692 @ 95%CL (1 toyMC)
median expected limit: r < 12.9692 @ 95%CL (1 toyMC)
   68% expected band : 12.9692 < r < 12.9692
   95% expected band : 12.9692 < r < 12.9692
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -147757979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.94857 +/- 0.0159121 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.94857 @ 95%CL (1 toyMC)
median expected limit: r < 8.94857 @ 95%CL (1 toyMC)
   68% expected band : 8.94857 < r < 8.94857
   95% expected band : 8.94857 < r < 8.94857
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1622515740
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.3469 +/- 0.0140408 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.3469 @ 95%CL (1 toyMC)
median expected limit: r < 11.3469 @ 95%CL (1 toyMC)
   68% expected band : 11.3469 < r < 11.3469
   95% expected band : 11.3469 < r < 11.3469
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -601108213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.2849 +/- 0.0157914 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.2849 @ 95%CL (1 toyMC)
median expected limit: r < 13.2849 @ 95%CL (1 toyMC)
   68% expected band : 13.2849 < r < 13.2849
   95% expected band : 13.2849 < r < 13.2849
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 404112636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.9786 +/- 0.0183908 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.9786 @ 95%CL (1 toyMC)
median expected limit: r < 11.9786 @ 95%CL (1 toyMC)
   68% expected band : 11.9786 < r < 11.9786
   95% expected band : 11.9786 < r < 11.9786
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1618055192
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0313 +/- 0.0156196 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.0313 @ 95%CL (1 toyMC)
median expected limit: r < 10.0313 @ 95%CL (1 toyMC)
   68% expected band : 10.0313 < r < 10.0313
   95% expected band : 10.0313 < r < 10.0313
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 747074976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8025 +/- 0.0202786 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.8025 @ 95%CL (1 toyMC)
median expected limit: r < 10.8025 @ 95%CL (1 toyMC)
   68% expected band : 10.8025 < r < 10.8025
   95% expected band : 10.8025 < r < 10.8025
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 175952592
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.4144 +/- 0.0157599 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.4144 @ 95%CL (1 toyMC)
median expected limit: r < 11.4144 @ 95%CL (1 toyMC)
   68% expected band : 11.4144 < r < 11.4144
   95% expected band : 11.4144 < r < 11.4144
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -20444198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.1331 +/- 0.00964545 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.34 min (real)
mean   expected limit: r < 15.1331 @ 95%CL (1 toyMC)
median expected limit: r < 15.1331 @ 95%CL (1 toyMC)
   68% expected band : 15.1331 < r < 15.1331
   95% expected band : 15.1331 < r < 15.1331
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1702477498
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.9142 +/- 0.0195423 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.9142 @ 95%CL (1 toyMC)
median expected limit: r < 12.9142 @ 95%CL (1 toyMC)
   68% expected band : 12.9142 < r < 12.9142
   95% expected band : 12.9142 < r < 12.9142
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1021551149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3411 +/- 0.0139905 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.3411 @ 95%CL (1 toyMC)
median expected limit: r < 10.3411 @ 95%CL (1 toyMC)
   68% expected band : 10.3411 < r < 10.3411
   95% expected band : 10.3411 < r < 10.3411
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1164129459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.9908 +/- 0.016 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.9908 @ 95%CL (1 toyMC)
median expected limit: r < 13.9908 @ 95%CL (1 toyMC)
   68% expected band : 13.9908 < r < 13.9908
   95% expected band : 13.9908 < r < 13.9908
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -294259136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.45877 +/- 0.016391 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.45877 @ 95%CL (1 toyMC)
median expected limit: r < 8.45877 @ 95%CL (1 toyMC)
   68% expected band : 8.45877 < r < 8.45877
   95% expected band : 8.45877 < r < 8.45877
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -204986038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.5315 +/- 0.00871158 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 16.5315 @ 95%CL (1 toyMC)
median expected limit: r < 16.5315 @ 95%CL (1 toyMC)
   68% expected band : 16.5315 < r < 16.5315
   95% expected band : 16.5315 < r < 16.5315
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1833685089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0912 +/- 0.0191731 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.0912 @ 95%CL (1 toyMC)
median expected limit: r < 10.0912 @ 95%CL (1 toyMC)
   68% expected band : 10.0912 < r < 10.0912
   95% expected band : 10.0912 < r < 10.0912
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1722537999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.49376 +/- 0.0172025 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.49376 @ 95%CL (1 toyMC)
median expected limit: r < 9.49376 @ 95%CL (1 toyMC)
   68% expected band : 9.49376 < r < 9.49376
   95% expected band : 9.49376 < r < 9.49376
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 588094743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.2751 +/- 0.00859372 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 17.2751 @ 95%CL (1 toyMC)
median expected limit: r < 17.2751 @ 95%CL (1 toyMC)
   68% expected band : 17.2751 < r < 17.2751
   95% expected band : 17.2751 < r < 17.2751
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1864533438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.91738 +/- 0.0156942 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.91738 @ 95%CL (1 toyMC)
median expected limit: r < 9.91738 @ 95%CL (1 toyMC)
   68% expected band : 9.91738 < r < 9.91738
   95% expected band : 9.91738 < r < 9.91738
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -834056225
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.0542 +/- 0.0116554 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 16.0542 @ 95%CL (1 toyMC)
median expected limit: r < 16.0542 @ 95%CL (1 toyMC)
   68% expected band : 16.0542 < r < 16.0542
   95% expected band : 16.0542 < r < 16.0542
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1075795209
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.2676 +/- 0.0162096 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 12.2676 @ 95%CL (1 toyMC)
median expected limit: r < 12.2676 @ 95%CL (1 toyMC)
   68% expected band : 12.2676 < r < 12.2676
   95% expected band : 12.2676 < r < 12.2676
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 582983151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.2745 +/- 0.0152018 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 14.2745 @ 95%CL (1 toyMC)
median expected limit: r < 14.2745 @ 95%CL (1 toyMC)
   68% expected band : 14.2745 < r < 14.2745
   95% expected band : 14.2745 < r < 14.2745
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 301416768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.99875 +/- 0.0176877 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.99875 @ 95%CL (1 toyMC)
median expected limit: r < 7.99875 @ 95%CL (1 toyMC)
   68% expected band : 7.99875 < r < 7.99875
   95% expected band : 7.99875 < r < 7.99875
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2008957035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.629 +/- 0.0149951 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.629 @ 95%CL (1 toyMC)
median expected limit: r < 12.629 @ 95%CL (1 toyMC)
   68% expected band : 12.629 < r < 12.629
   95% expected band : 12.629 < r < 12.629
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 130953056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.527 +/- 0.0144944 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 13.527 @ 95%CL (1 toyMC)
median expected limit: r < 13.527 @ 95%CL (1 toyMC)
   68% expected band : 13.527 < r < 13.527
   95% expected band : 13.527 < r < 13.527
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -298395330
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.385 +/- 0.0121388 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 15.385 @ 95%CL (1 toyMC)
median expected limit: r < 15.385 @ 95%CL (1 toyMC)
   68% expected band : 15.385 < r < 15.385
   95% expected band : 15.385 < r < 15.385
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 770567807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7888 +/- 0.0174044 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.7888 @ 95%CL (1 toyMC)
median expected limit: r < 11.7888 @ 95%CL (1 toyMC)
   68% expected band : 11.7888 < r < 11.7888
   95% expected band : 11.7888 < r < 11.7888
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -985249761
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.31828 +/- 0.0140032 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.31828 @ 95%CL (1 toyMC)
median expected limit: r < 9.31828 @ 95%CL (1 toyMC)
   68% expected band : 9.31828 < r < 9.31828
   95% expected band : 9.31828 < r < 9.31828
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 458159208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.9294 +/- 0.0161521 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.9294 @ 95%CL (1 toyMC)
median expected limit: r < 12.9294 @ 95%CL (1 toyMC)
   68% expected band : 12.9294 < r < 12.9294
   95% expected band : 12.9294 < r < 12.9294
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1722029928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.4253 +/- 0.0164269 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.4253 @ 95%CL (1 toyMC)
median expected limit: r < 11.4253 @ 95%CL (1 toyMC)
   68% expected band : 11.4253 < r < 11.4253
   95% expected band : 11.4253 < r < 11.4253
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 516724150
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.3589 +/- 0.0158147 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 13.3589 @ 95%CL (1 toyMC)
median expected limit: r < 13.3589 @ 95%CL (1 toyMC)
   68% expected band : 13.3589 < r < 13.3589
   95% expected band : 13.3589 < r < 13.3589
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1561133620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.0553 +/- 0.015125 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 13.0553 @ 95%CL (1 toyMC)
median expected limit: r < 13.0553 @ 95%CL (1 toyMC)
   68% expected band : 13.0553 < r < 13.0553
   95% expected band : 13.0553 < r < 13.0553
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 985172995
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.45986 +/- 0.0155917 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.45986 @ 95%CL (1 toyMC)
median expected limit: r < 9.45986 @ 95%CL (1 toyMC)
   68% expected band : 9.45986 < r < 9.45986
   95% expected band : 9.45986 < r < 9.45986
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 651423483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.40734 +/- 0.0211252 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.40734 @ 95%CL (1 toyMC)
median expected limit: r < 9.40734 @ 95%CL (1 toyMC)
   68% expected band : 9.40734 < r < 9.40734
   95% expected band : 9.40734 < r < 9.40734
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 768690614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.18423 +/- 0.0171962 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.18423 @ 95%CL (1 toyMC)
median expected limit: r < 9.18423 @ 95%CL (1 toyMC)
   68% expected band : 9.18423 < r < 9.18423
   95% expected band : 9.18423 < r < 9.18423
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1027195755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.8616 +/- 0.012326 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 15.8616 @ 95%CL (1 toyMC)
median expected limit: r < 15.8616 @ 95%CL (1 toyMC)
   68% expected band : 15.8616 < r < 15.8616
   95% expected band : 15.8616 < r < 15.8616
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1343777346
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.662 +/- 0.0149637 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 12.662 @ 95%CL (1 toyMC)
median expected limit: r < 12.662 @ 95%CL (1 toyMC)
   68% expected band : 12.662 < r < 12.662
   95% expected band : 12.662 < r < 12.662
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1491003103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.0864 +/- 0.0157849 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.0864 @ 95%CL (1 toyMC)
median expected limit: r < 12.0864 @ 95%CL (1 toyMC)
   68% expected band : 12.0864 < r < 12.0864
   95% expected band : 12.0864 < r < 12.0864
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -412970230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0834 +/- 0.0151464 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.0834 @ 95%CL (1 toyMC)
median expected limit: r < 10.0834 @ 95%CL (1 toyMC)
   68% expected band : 10.0834 < r < 10.0834
   95% expected band : 10.0834 < r < 10.0834
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -974216934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.086 +/- 0.0173504 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.086 @ 95%CL (1 toyMC)
median expected limit: r < 10.086 @ 95%CL (1 toyMC)
   68% expected band : 10.086 < r < 10.086
   95% expected band : 10.086 < r < 10.086
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -599412520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.4286 +/- 0.0143636 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 14.4286 @ 95%CL (1 toyMC)
median expected limit: r < 14.4286 @ 95%CL (1 toyMC)
   68% expected band : 14.4286 < r < 14.4286
   95% expected band : 14.4286 < r < 14.4286
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1683382842
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.0449 +/- 0.00868546 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 17.0449 @ 95%CL (1 toyMC)
median expected limit: r < 17.0449 @ 95%CL (1 toyMC)
   68% expected band : 17.0449 < r < 17.0449
   95% expected band : 17.0449 < r < 17.0449
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 168387867
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.49328 +/- 0.016123 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.49328 @ 95%CL (1 toyMC)
median expected limit: r < 9.49328 @ 95%CL (1 toyMC)
   68% expected band : 9.49328 < r < 9.49328
   95% expected band : 9.49328 < r < 9.49328
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 47603175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.5455 +/- 0.010179 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 16.5455 @ 95%CL (1 toyMC)
median expected limit: r < 16.5455 @ 95%CL (1 toyMC)
   68% expected band : 16.5455 < r < 16.5455
   95% expected band : 16.5455 < r < 16.5455
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 294523624
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9098 +/- 0.0168201 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.9098 @ 95%CL (1 toyMC)
median expected limit: r < 10.9098 @ 95%CL (1 toyMC)
   68% expected band : 10.9098 < r < 10.9098
   95% expected band : 10.9098 < r < 10.9098
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1073974888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.80389 +/- 0.017504 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.80389 @ 95%CL (1 toyMC)
median expected limit: r < 8.80389 @ 95%CL (1 toyMC)
   68% expected band : 8.80389 < r < 8.80389
   95% expected band : 8.80389 < r < 8.80389
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 370516580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.95074 +/- 0.016875 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.95074 @ 95%CL (1 toyMC)
median expected limit: r < 9.95074 @ 95%CL (1 toyMC)
   68% expected band : 9.95074 < r < 9.95074
   95% expected band : 9.95074 < r < 9.95074
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 241874696
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.1064 +/- 0.0150532 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 15.1064 @ 95%CL (1 toyMC)
median expected limit: r < 15.1064 @ 95%CL (1 toyMC)
   68% expected band : 15.1064 < r < 15.1064
   95% expected band : 15.1064 < r < 15.1064
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1286876238
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7057 +/- 0.0157787 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 11.7057 @ 95%CL (1 toyMC)
median expected limit: r < 11.7057 @ 95%CL (1 toyMC)
   68% expected band : 11.7057 < r < 11.7057
   95% expected band : 11.7057 < r < 11.7057
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -603910843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0512 +/- 0.0166435 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.0512 @ 95%CL (1 toyMC)
median expected limit: r < 11.0512 @ 95%CL (1 toyMC)
   68% expected band : 11.0512 < r < 11.0512
   95% expected band : 11.0512 < r < 11.0512
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 872423841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.7003 +/- 0.0120675 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 14.7003 @ 95%CL (1 toyMC)
median expected limit: r < 14.7003 @ 95%CL (1 toyMC)
   68% expected band : 14.7003 < r < 14.7003
   95% expected band : 14.7003 < r < 14.7003
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1924564626
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.3823 +/- 0.010685 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 16.3823 @ 95%CL (1 toyMC)
median expected limit: r < 16.3823 @ 95%CL (1 toyMC)
   68% expected band : 16.3823 < r < 16.3823
   95% expected band : 16.3823 < r < 16.3823
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1576640785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.958 +/- 0.0104527 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 15.958 @ 95%CL (1 toyMC)
median expected limit: r < 15.958 @ 95%CL (1 toyMC)
   68% expected band : 15.958 < r < 15.958
   95% expected band : 15.958 < r < 15.958
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -19309316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3919 +/- 0.0204721 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.3919 @ 95%CL (1 toyMC)
median expected limit: r < 10.3919 @ 95%CL (1 toyMC)
   68% expected band : 10.3919 < r < 10.3919
   95% expected band : 10.3919 < r < 10.3919
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -594122451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.60039 +/- 0.0186093 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.60039 @ 95%CL (1 toyMC)
median expected limit: r < 9.60039 @ 95%CL (1 toyMC)
   68% expected band : 9.60039 < r < 9.60039
   95% expected band : 9.60039 < r < 9.60039
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 810232414
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1056 +/- 0.0171062 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.1056 @ 95%CL (1 toyMC)
median expected limit: r < 10.1056 @ 95%CL (1 toyMC)
   68% expected band : 10.1056 < r < 10.1056
   95% expected band : 10.1056 < r < 10.1056
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1863578276
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2292 +/- 0.0172811 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.2292 @ 95%CL (1 toyMC)
median expected limit: r < 10.2292 @ 95%CL (1 toyMC)
   68% expected band : 10.2292 < r < 10.2292
   95% expected band : 10.2292 < r < 10.2292
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2062586397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.7019 +/- 0.0180889 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.7019 @ 95%CL (1 toyMC)
median expected limit: r < 10.7019 @ 95%CL (1 toyMC)
   68% expected band : 10.7019 < r < 10.7019
   95% expected band : 10.7019 < r < 10.7019
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1625812581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.5692 +/- 0.0163063 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 14.5692 @ 95%CL (1 toyMC)
median expected limit: r < 14.5692 @ 95%CL (1 toyMC)
   68% expected band : 14.5692 < r < 14.5692
   95% expected band : 14.5692 < r < 14.5692
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1589840268
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.9386 +/- 0.0174519 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.9386 @ 95%CL (1 toyMC)
median expected limit: r < 7.9386 @ 95%CL (1 toyMC)
   68% expected band : 7.9386 < r < 7.9386
   95% expected band : 7.9386 < r < 7.9386
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2019795938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.5886 +/- 0.0107001 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 15.5886 @ 95%CL (1 toyMC)
median expected limit: r < 15.5886 @ 95%CL (1 toyMC)
   68% expected band : 15.5886 < r < 15.5886
   95% expected band : 15.5886 < r < 15.5886
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1530267712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.56053 +/- 0.015448 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.56053 @ 95%CL (1 toyMC)
median expected limit: r < 9.56053 @ 95%CL (1 toyMC)
   68% expected band : 9.56053 < r < 9.56053
   95% expected band : 9.56053 < r < 9.56053
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2130080893
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.55952 +/- 0.0172376 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.55952 @ 95%CL (1 toyMC)
median expected limit: r < 9.55952 @ 95%CL (1 toyMC)
   68% expected band : 9.55952 < r < 9.55952
   95% expected band : 9.55952 < r < 9.55952
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1826380939
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0605 +/- 0.0174128 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.0605 @ 95%CL (1 toyMC)
median expected limit: r < 10.0605 @ 95%CL (1 toyMC)
   68% expected band : 10.0605 < r < 10.0605
   95% expected band : 10.0605 < r < 10.0605
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1179917418
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.2477 +/- 0.0140756 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 14.2477 @ 95%CL (1 toyMC)
median expected limit: r < 14.2477 @ 95%CL (1 toyMC)
   68% expected band : 14.2477 < r < 14.2477
   95% expected band : 14.2477 < r < 14.2477
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1075549920
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9009 +/- 0.0147889 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.9009 @ 95%CL (1 toyMC)
median expected limit: r < 10.9009 @ 95%CL (1 toyMC)
   68% expected band : 10.9009 < r < 10.9009
   95% expected band : 10.9009 < r < 10.9009
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -153345786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.5048 +/- 0.0147466 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 14.5048 @ 95%CL (1 toyMC)
median expected limit: r < 14.5048 @ 95%CL (1 toyMC)
   68% expected band : 14.5048 < r < 14.5048
   95% expected band : 14.5048 < r < 14.5048
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1302994897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.98547 +/- 0.0202256 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.98547 @ 95%CL (1 toyMC)
median expected limit: r < 9.98547 @ 95%CL (1 toyMC)
   68% expected band : 9.98547 < r < 9.98547
   95% expected band : 9.98547 < r < 9.98547
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1935479430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.393 +/- 0.0184333 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.393 @ 95%CL (1 toyMC)
median expected limit: r < 12.393 @ 95%CL (1 toyMC)
   68% expected band : 12.393 < r < 12.393
   95% expected band : 12.393 < r < 12.393
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 31626767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.1579 +/- 0.0191553 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.1579 @ 95%CL (1 toyMC)
median expected limit: r < 11.1579 @ 95%CL (1 toyMC)
   68% expected band : 11.1579 < r < 11.1579
   95% expected band : 11.1579 < r < 11.1579
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1325706168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.9995 +/- 0.0083999 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 16.9995 @ 95%CL (1 toyMC)
median expected limit: r < 16.9995 @ 95%CL (1 toyMC)
   68% expected band : 16.9995 < r < 16.9995
   95% expected band : 16.9995 < r < 16.9995
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 363201995
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.9675 +/- 0.00772123 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 16.9675 @ 95%CL (1 toyMC)
median expected limit: r < 16.9675 @ 95%CL (1 toyMC)
   68% expected band : 16.9675 < r < 16.9675
   95% expected band : 16.9675 < r < 16.9675
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -459408692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.5493 +/- 0.0129867 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.5493 @ 95%CL (1 toyMC)
median expected limit: r < 13.5493 @ 95%CL (1 toyMC)
   68% expected band : 13.5493 < r < 13.5493
   95% expected band : 13.5493 < r < 13.5493
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1003236284.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1021551149.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1073974888.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1075549920.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1075795209.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1302994897.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-147757979.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1491003103.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-153345786.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1561133620.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1576640785.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1625812581.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1722537999.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1810914331.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1826380939.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1838086798.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1855514200.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1872431836.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1907112163.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1924564626.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-19309316.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-2008957035.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-2019795938.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-20444198.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-204986038.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-2062586397.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-269673586.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-294259136.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-298395330.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-412970230.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-459408692.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-47408251.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-582141215.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-594122451.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-599412520.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-601108213.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-603910843.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-720409097.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-834056225.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-886059062.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-92137631.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-974216934.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-985249761.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.1019952449.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.1027195755.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.1145000235.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.1164129459.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.1170133469.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1179917418.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1286876238.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.130953056.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1325706168.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1343777346.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1394997922.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1421852144.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1464475536.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1530267712.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1589840268.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1618055192.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1622515740.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1683382842.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.168387867.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1702477498.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1715323007.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1722029928.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.175952592.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1833685089.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1863578276.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1864533438.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1867133072.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1935479430.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1998642932.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.211744744.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.2130080893.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.2143544646.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.241874696.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.241990887.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.294523624.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.301416768.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.31626767.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.363201995.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.370516580.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.375568050.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.404112636.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.458159208.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.47603175.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.516724150.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.535391542.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.582983151.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.588094743.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.651423483.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.699066537.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.747074976.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.768690614.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.770567807.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.810232414.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.810443848.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.872423841.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.985172995.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.999936312.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 296071409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.6732 +/- 0.0155521 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.6732 @ 95%CL (1 toyMC)
median expected limit: r < 8.6732 @ 95%CL (1 toyMC)
   68% expected band : 8.6732 < r < 8.6732
   95% expected band : 8.6732 < r < 8.6732
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -850722305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.1363 +/- 0.0169921 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.1363 @ 95%CL (1 toyMC)
median expected limit: r < 13.1363 @ 95%CL (1 toyMC)
   68% expected band : 13.1363 < r < 13.1363
   95% expected band : 13.1363 < r < 13.1363
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 251493358
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.5786 +/- 0.0138917 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.5786 @ 95%CL (1 toyMC)
median expected limit: r < 10.5786 @ 95%CL (1 toyMC)
   68% expected band : 10.5786 < r < 10.5786
   95% expected band : 10.5786 < r < 10.5786
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1743509715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.38377 +/- 0.0164027 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.38377 @ 95%CL (1 toyMC)
median expected limit: r < 8.38377 @ 95%CL (1 toyMC)
   68% expected band : 8.38377 < r < 8.38377
   95% expected band : 8.38377 < r < 8.38377
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1980231951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.38068 +/- 0.0147415 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.38068 @ 95%CL (1 toyMC)
median expected limit: r < 8.38068 @ 95%CL (1 toyMC)
   68% expected band : 8.38068 < r < 8.38068
   95% expected band : 8.38068 < r < 8.38068
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 437697117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.0711 +/- 0.0101207 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 16.0711 @ 95%CL (1 toyMC)
median expected limit: r < 16.0711 @ 95%CL (1 toyMC)
   68% expected band : 16.0711 < r < 16.0711
   95% expected band : 16.0711 < r < 16.0711
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -776124352
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.2359 +/- 0.0146452 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 14.2359 @ 95%CL (1 toyMC)
median expected limit: r < 14.2359 @ 95%CL (1 toyMC)
   68% expected band : 14.2359 < r < 14.2359
   95% expected band : 14.2359 < r < 14.2359
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1225543071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.1418 +/- 0.0161123 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.1418 @ 95%CL (1 toyMC)
median expected limit: r < 12.1418 @ 95%CL (1 toyMC)
   68% expected band : 12.1418 < r < 12.1418
   95% expected band : 12.1418 < r < 12.1418
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1884633559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.4417 +/- 0.014022 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 14.4417 @ 95%CL (1 toyMC)
median expected limit: r < 14.4417 @ 95%CL (1 toyMC)
   68% expected band : 14.4417 < r < 14.4417
   95% expected band : 14.4417 < r < 14.4417
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1062621611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.5554 +/- 0.0164266 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.5554 @ 95%CL (1 toyMC)
median expected limit: r < 10.5554 @ 95%CL (1 toyMC)
   68% expected band : 10.5554 < r < 10.5554
   95% expected band : 10.5554 < r < 10.5554
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -695941719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.4864 +/- 0.0178796 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.4864 @ 95%CL (1 toyMC)
median expected limit: r < 11.4864 @ 95%CL (1 toyMC)
   68% expected band : 11.4864 < r < 11.4864
   95% expected band : 11.4864 < r < 11.4864
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1575185567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.4799 +/- 0.0126737 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.4799 @ 95%CL (1 toyMC)
median expected limit: r < 11.4799 @ 95%CL (1 toyMC)
   68% expected band : 11.4799 < r < 11.4799
   95% expected band : 11.4799 < r < 11.4799
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 552079291
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.97844 +/- 0.0155673 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.97844 @ 95%CL (1 toyMC)
median expected limit: r < 7.97844 @ 95%CL (1 toyMC)
   68% expected band : 7.97844 < r < 7.97844
   95% expected band : 7.97844 < r < 7.97844
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1058225699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.044 +/- 0.0211434 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.044 @ 95%CL (1 toyMC)
median expected limit: r < 11.044 @ 95%CL (1 toyMC)
   68% expected band : 11.044 < r < 11.044
   95% expected band : 11.044 < r < 11.044
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1430080080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.29707 +/- 0.0199672 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.29707 @ 95%CL (1 toyMC)
median expected limit: r < 9.29707 @ 95%CL (1 toyMC)
   68% expected band : 9.29707 < r < 9.29707
   95% expected band : 9.29707 < r < 9.29707
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1136410052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.1199 +/- 0.0215698 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.1199 @ 95%CL (1 toyMC)
median expected limit: r < 11.1199 @ 95%CL (1 toyMC)
   68% expected band : 11.1199 < r < 11.1199
   95% expected band : 11.1199 < r < 11.1199
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1691699444
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.56449 +/- 0.0163467 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.56449 @ 95%CL (1 toyMC)
median expected limit: r < 9.56449 @ 95%CL (1 toyMC)
   68% expected band : 9.56449 < r < 9.56449
   95% expected band : 9.56449 < r < 9.56449
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2038181296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.9735 +/- 0.0135908 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.9735 @ 95%CL (1 toyMC)
median expected limit: r < 12.9735 @ 95%CL (1 toyMC)
   68% expected band : 12.9735 < r < 12.9735
   95% expected band : 12.9735 < r < 12.9735
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 557322851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.45515 +/- 0.0175998 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.45515 @ 95%CL (1 toyMC)
median expected limit: r < 9.45515 @ 95%CL (1 toyMC)
   68% expected band : 9.45515 < r < 9.45515
   95% expected band : 9.45515 < r < 9.45515
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 936556296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.9545 +/- 0.0159265 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 13.9545 @ 95%CL (1 toyMC)
median expected limit: r < 13.9545 @ 95%CL (1 toyMC)
   68% expected band : 13.9545 < r < 13.9545
   95% expected band : 13.9545 < r < 13.9545
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1872290012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 18.4642 +/- 0.00491505 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 18.4642 @ 95%CL (1 toyMC)
median expected limit: r < 18.4642 @ 95%CL (1 toyMC)
   68% expected band : 18.4642 < r < 18.4642
   95% expected band : 18.4642 < r < 18.4642
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -800732859
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.638 +/- 0.0145845 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 14.638 @ 95%CL (1 toyMC)
median expected limit: r < 14.638 @ 95%CL (1 toyMC)
   68% expected band : 14.638 < r < 14.638
   95% expected band : 14.638 < r < 14.638
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1598424760
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.8986 +/- 0.0106114 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.8986 @ 95%CL (1 toyMC)
median expected limit: r < 15.8986 @ 95%CL (1 toyMC)
   68% expected band : 15.8986 < r < 15.8986
   95% expected band : 15.8986 < r < 15.8986
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1238915678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.96075 +/- 0.0150029 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.96075 @ 95%CL (1 toyMC)
median expected limit: r < 9.96075 @ 95%CL (1 toyMC)
   68% expected band : 9.96075 < r < 9.96075
   95% expected band : 9.96075 < r < 9.96075
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1186890391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.4228 +/- 0.0184432 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.4228 @ 95%CL (1 toyMC)
median expected limit: r < 10.4228 @ 95%CL (1 toyMC)
   68% expected band : 10.4228 < r < 10.4228
   95% expected band : 10.4228 < r < 10.4228
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 191917454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8507 +/- 0.019091 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.8507 @ 95%CL (1 toyMC)
median expected limit: r < 10.8507 @ 95%CL (1 toyMC)
   68% expected band : 10.8507 < r < 10.8507
   95% expected band : 10.8507 < r < 10.8507
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1007966404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.5366 +/- 0.0122377 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.5366 @ 95%CL (1 toyMC)
median expected limit: r < 13.5366 @ 95%CL (1 toyMC)
   68% expected band : 13.5366 < r < 13.5366
   95% expected band : 13.5366 < r < 13.5366
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1908088164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.73445 +/- 0.0197978 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.73445 @ 95%CL (1 toyMC)
median expected limit: r < 9.73445 @ 95%CL (1 toyMC)
   68% expected band : 9.73445 < r < 9.73445
   95% expected band : 9.73445 < r < 9.73445
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1831364381
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.2387 +/- 0.019025 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.2387 @ 95%CL (1 toyMC)
median expected limit: r < 11.2387 @ 95%CL (1 toyMC)
   68% expected band : 11.2387 < r < 11.2387
   95% expected band : 11.2387 < r < 11.2387
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 321745153
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.7056 +/- 0.0132487 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.7056 @ 95%CL (1 toyMC)
median expected limit: r < 13.7056 @ 95%CL (1 toyMC)
   68% expected band : 13.7056 < r < 13.7056
   95% expected band : 13.7056 < r < 13.7056
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1127921070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1531 +/- 0.0174311 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.1531 @ 95%CL (1 toyMC)
median expected limit: r < 10.1531 @ 95%CL (1 toyMC)
   68% expected band : 10.1531 < r < 10.1531
   95% expected band : 10.1531 < r < 10.1531
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1772563403
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.3452 +/- 0.0199342 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.3452 @ 95%CL (1 toyMC)
median expected limit: r < 11.3452 @ 95%CL (1 toyMC)
   68% expected band : 11.3452 < r < 11.3452
   95% expected band : 11.3452 < r < 11.3452
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -747378506
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.3417 +/- 0.0175116 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 11.3417 @ 95%CL (1 toyMC)
median expected limit: r < 11.3417 @ 95%CL (1 toyMC)
   68% expected band : 11.3417 < r < 11.3417
   95% expected band : 11.3417 < r < 11.3417
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1100729784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.8415 +/- 0.0155479 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.8415 @ 95%CL (1 toyMC)
median expected limit: r < 11.8415 @ 95%CL (1 toyMC)
   68% expected band : 11.8415 < r < 11.8415
   95% expected band : 11.8415 < r < 11.8415
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1720984498
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.97079 +/- 0.0191302 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.97079 @ 95%CL (1 toyMC)
median expected limit: r < 9.97079 @ 95%CL (1 toyMC)
   68% expected band : 9.97079 < r < 9.97079
   95% expected band : 9.97079 < r < 9.97079
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -567413213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.4792 +/- 0.0102777 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.4792 @ 95%CL (1 toyMC)
median expected limit: r < 15.4792 @ 95%CL (1 toyMC)
   68% expected band : 15.4792 < r < 15.4792
   95% expected band : 15.4792 < r < 15.4792
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -288160436
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.566 +/- 0.0124375 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.566 @ 95%CL (1 toyMC)
median expected limit: r < 13.566 @ 95%CL (1 toyMC)
   68% expected band : 13.566 < r < 13.566
   95% expected band : 13.566 < r < 13.566
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1781091398
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.8007 +/- 0.0150615 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 13.8007 @ 95%CL (1 toyMC)
median expected limit: r < 13.8007 @ 95%CL (1 toyMC)
   68% expected band : 13.8007 < r < 13.8007
   95% expected band : 13.8007 < r < 13.8007
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 803986018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.6038 +/- 0.0109048 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 15.6038 @ 95%CL (1 toyMC)
median expected limit: r < 15.6038 @ 95%CL (1 toyMC)
   68% expected band : 15.6038 < r < 15.6038
   95% expected band : 15.6038 < r < 15.6038
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -489712518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.0714 +/- 0.0126433 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.0714 @ 95%CL (1 toyMC)
median expected limit: r < 13.0714 @ 95%CL (1 toyMC)
   68% expected band : 13.0714 < r < 13.0714
   95% expected band : 13.0714 < r < 13.0714
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2110770466
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.92177 +/- 0.0164986 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.92177 @ 95%CL (1 toyMC)
median expected limit: r < 8.92177 @ 95%CL (1 toyMC)
   68% expected band : 8.92177 < r < 8.92177
   95% expected band : 8.92177 < r < 8.92177
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1352857049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.9466 +/- 0.0164299 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.9466 @ 95%CL (1 toyMC)
median expected limit: r < 13.9466 @ 95%CL (1 toyMC)
   68% expected band : 13.9466 < r < 13.9466
   95% expected band : 13.9466 < r < 13.9466
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -553691553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7036 +/- 0.0180729 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 12.7036 @ 95%CL (1 toyMC)
median expected limit: r < 12.7036 @ 95%CL (1 toyMC)
   68% expected band : 12.7036 < r < 12.7036
   95% expected band : 12.7036 < r < 12.7036
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1629752454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.1159 +/- 0.0121663 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 14.1159 @ 95%CL (1 toyMC)
median expected limit: r < 14.1159 @ 95%CL (1 toyMC)
   68% expected band : 14.1159 < r < 14.1159
   95% expected band : 14.1159 < r < 14.1159
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -602197189
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.719 +/- 0.0160348 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.719 @ 95%CL (1 toyMC)
median expected limit: r < 10.719 @ 95%CL (1 toyMC)
   68% expected band : 10.719 < r < 10.719
   95% expected band : 10.719 < r < 10.719
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 901017269
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.41855 +/- 0.0159525 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.41855 @ 95%CL (1 toyMC)
median expected limit: r < 8.41855 @ 95%CL (1 toyMC)
   68% expected band : 8.41855 < r < 8.41855
   95% expected band : 8.41855 < r < 8.41855
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -232880966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.3582 +/- 0.014719 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 14.3582 @ 95%CL (1 toyMC)
median expected limit: r < 14.3582 @ 95%CL (1 toyMC)
   68% expected band : 14.3582 < r < 14.3582
   95% expected band : 14.3582 < r < 14.3582
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1743122233
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9503 +/- 0.0176878 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.9503 @ 95%CL (1 toyMC)
median expected limit: r < 10.9503 @ 95%CL (1 toyMC)
   68% expected band : 10.9503 < r < 10.9503
   95% expected band : 10.9503 < r < 10.9503
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1801535443
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.37666 +/- 0.0181825 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.37666 @ 95%CL (1 toyMC)
median expected limit: r < 9.37666 @ 95%CL (1 toyMC)
   68% expected band : 9.37666 < r < 9.37666
   95% expected band : 9.37666 < r < 9.37666
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1000292511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.7857 +/- 0.01883 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.7857 @ 95%CL (1 toyMC)
median expected limit: r < 10.7857 @ 95%CL (1 toyMC)
   68% expected band : 10.7857 < r < 10.7857
   95% expected band : 10.7857 < r < 10.7857
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -146301147
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.8845 +/- 0.0183571 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.8845 @ 95%CL (1 toyMC)
median expected limit: r < 11.8845 @ 95%CL (1 toyMC)
   68% expected band : 11.8845 < r < 11.8845
   95% expected band : 11.8845 < r < 11.8845
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1143436260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.134 +/- 0.0184348 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.134 @ 95%CL (1 toyMC)
median expected limit: r < 11.134 @ 95%CL (1 toyMC)
   68% expected band : 11.134 < r < 11.134
   95% expected band : 11.134 < r < 11.134
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1993636850
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.2954 +/- 0.0176635 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.2954 @ 95%CL (1 toyMC)
median expected limit: r < 11.2954 @ 95%CL (1 toyMC)
   68% expected band : 11.2954 < r < 11.2954
   95% expected band : 11.2954 < r < 11.2954
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1878250931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.97703 +/- 0.014938 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.97703 @ 95%CL (1 toyMC)
median expected limit: r < 6.97703 @ 95%CL (1 toyMC)
   68% expected band : 6.97703 < r < 6.97703
   95% expected band : 6.97703 < r < 6.97703
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -653038536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.84267 +/- 0.0184315 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 8.84267 @ 95%CL (1 toyMC)
median expected limit: r < 8.84267 @ 95%CL (1 toyMC)
   68% expected band : 8.84267 < r < 8.84267
   95% expected band : 8.84267 < r < 8.84267
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -441295701
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.8183 +/- 0.0205271 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.8183 @ 95%CL (1 toyMC)
median expected limit: r < 11.8183 @ 95%CL (1 toyMC)
   68% expected band : 11.8183 < r < 11.8183
   95% expected band : 11.8183 < r < 11.8183
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 133467136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7148 +/- 0.0166202 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.7148 @ 95%CL (1 toyMC)
median expected limit: r < 12.7148 @ 95%CL (1 toyMC)
   68% expected band : 12.7148 < r < 12.7148
   95% expected band : 12.7148 < r < 12.7148
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1810869546
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.27721 +/- 0.0160761 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.27721 @ 95%CL (1 toyMC)
median expected limit: r < 8.27721 @ 95%CL (1 toyMC)
   68% expected band : 8.27721 < r < 8.27721
   95% expected band : 8.27721 < r < 8.27721
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1182409190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.2361 +/- 0.0168694 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.2361 @ 95%CL (1 toyMC)
median expected limit: r < 12.2361 @ 95%CL (1 toyMC)
   68% expected band : 12.2361 < r < 12.2361
   95% expected band : 12.2361 < r < 12.2361
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2107125150
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.4743 +/- 0.0113893 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.4743 @ 95%CL (1 toyMC)
median expected limit: r < 13.4743 @ 95%CL (1 toyMC)
   68% expected band : 13.4743 < r < 13.4743
   95% expected band : 13.4743 < r < 13.4743
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1350236478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.129 +/- 0.0179672 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.129 @ 95%CL (1 toyMC)
median expected limit: r < 11.129 @ 95%CL (1 toyMC)
   68% expected band : 11.129 < r < 11.129
   95% expected band : 11.129 < r < 11.129
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 143354481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.703 +/- 0.0151376 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.703 @ 95%CL (1 toyMC)
median expected limit: r < 11.703 @ 95%CL (1 toyMC)
   68% expected band : 11.703 < r < 11.703
   95% expected band : 11.703 < r < 11.703
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1780677971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9042 +/- 0.0219695 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.9042 @ 95%CL (1 toyMC)
median expected limit: r < 10.9042 @ 95%CL (1 toyMC)
   68% expected band : 10.9042 < r < 10.9042
   95% expected band : 10.9042 < r < 10.9042
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1522089947
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2381 +/- 0.0215448 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.2381 @ 95%CL (1 toyMC)
median expected limit: r < 10.2381 @ 95%CL (1 toyMC)
   68% expected band : 10.2381 < r < 10.2381
   95% expected band : 10.2381 < r < 10.2381
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 96173503
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.5756 +/- 0.0189032 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.5756 @ 95%CL (1 toyMC)
median expected limit: r < 10.5756 @ 95%CL (1 toyMC)
   68% expected band : 10.5756 < r < 10.5756
   95% expected band : 10.5756 < r < 10.5756
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 157677169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.08223 +/- 0.0184908 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.08223 @ 95%CL (1 toyMC)
median expected limit: r < 8.08223 @ 95%CL (1 toyMC)
   68% expected band : 8.08223 < r < 8.08223
   95% expected band : 8.08223 < r < 8.08223
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2055292560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.8161 +/- 0.0163687 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.8161 @ 95%CL (1 toyMC)
median expected limit: r < 11.8161 @ 95%CL (1 toyMC)
   68% expected band : 11.8161 < r < 11.8161
   95% expected band : 11.8161 < r < 11.8161
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1218353508
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.4599 +/- 0.0109004 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 16.4599 @ 95%CL (1 toyMC)
median expected limit: r < 16.4599 @ 95%CL (1 toyMC)
   68% expected band : 16.4599 < r < 16.4599
   95% expected band : 16.4599 < r < 16.4599
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -401828782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.2038 +/- 0.0106191 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 16.2038 @ 95%CL (1 toyMC)
median expected limit: r < 16.2038 @ 95%CL (1 toyMC)
   68% expected band : 16.2038 < r < 16.2038
   95% expected band : 16.2038 < r < 16.2038
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 122892643
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.63048 +/- 0.0156578 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.63048 @ 95%CL (1 toyMC)
median expected limit: r < 8.63048 @ 95%CL (1 toyMC)
   68% expected band : 8.63048 < r < 8.63048
   95% expected band : 8.63048 < r < 8.63048
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -348042346
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.88497 +/- 0.0140828 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.88497 @ 95%CL (1 toyMC)
median expected limit: r < 9.88497 @ 95%CL (1 toyMC)
   68% expected band : 9.88497 < r < 9.88497
   95% expected band : 9.88497 < r < 9.88497
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1594540903
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.06909 +/- 0.0166051 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.06909 @ 95%CL (1 toyMC)
median expected limit: r < 8.06909 @ 95%CL (1 toyMC)
   68% expected band : 8.06909 < r < 8.06909
   95% expected band : 8.06909 < r < 8.06909
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1638502292
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.3628 +/- 0.0134661 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.3628 @ 95%CL (1 toyMC)
median expected limit: r < 12.3628 @ 95%CL (1 toyMC)
   68% expected band : 12.3628 < r < 12.3628
   95% expected band : 12.3628 < r < 12.3628
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1753546781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9347 +/- 0.013295 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.9347 @ 95%CL (1 toyMC)
median expected limit: r < 10.9347 @ 95%CL (1 toyMC)
   68% expected band : 10.9347 < r < 10.9347
   95% expected band : 10.9347 < r < 10.9347
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -952978331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.337 +/- 0.0198599 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.337 @ 95%CL (1 toyMC)
median expected limit: r < 9.337 @ 95%CL (1 toyMC)
   68% expected band : 9.337 < r < 9.337
   95% expected band : 9.337 < r < 9.337
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1209672154
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.78049 +/- 0.0236159 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.78049 @ 95%CL (1 toyMC)
median expected limit: r < 9.78049 @ 95%CL (1 toyMC)
   68% expected band : 9.78049 < r < 9.78049
   95% expected band : 9.78049 < r < 9.78049
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1464669279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.0938 +/- 0.00635843 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 17.0938 @ 95%CL (1 toyMC)
median expected limit: r < 17.0938 @ 95%CL (1 toyMC)
   68% expected band : 17.0938 < r < 17.0938
   95% expected band : 17.0938 < r < 17.0938
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1595080018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.49323 +/- 0.0147386 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.49323 @ 95%CL (1 toyMC)
median expected limit: r < 8.49323 @ 95%CL (1 toyMC)
   68% expected band : 8.49323 < r < 8.49323
   95% expected band : 8.49323 < r < 8.49323
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 529294657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.7911 +/- 0.0105848 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.7911 @ 95%CL (1 toyMC)
median expected limit: r < 15.7911 @ 95%CL (1 toyMC)
   68% expected band : 15.7911 < r < 15.7911
   95% expected band : 15.7911 < r < 15.7911
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -224437597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.3703 +/- 0.00899568 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 16.3703 @ 95%CL (1 toyMC)
median expected limit: r < 16.3703 @ 95%CL (1 toyMC)
   68% expected band : 16.3703 < r < 16.3703
   95% expected band : 16.3703 < r < 16.3703
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -492895121
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.4505 +/- 0.0137248 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.4505 @ 95%CL (1 toyMC)
median expected limit: r < 13.4505 @ 95%CL (1 toyMC)
   68% expected band : 13.4505 < r < 13.4505
   95% expected band : 13.4505 < r < 13.4505
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1657104710
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.9321 +/- 0.0142501 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.9321 @ 95%CL (1 toyMC)
median expected limit: r < 11.9321 @ 95%CL (1 toyMC)
   68% expected band : 11.9321 < r < 11.9321
   95% expected band : 11.9321 < r < 11.9321
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1958865678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.101 +/- 0.0123985 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 13.101 @ 95%CL (1 toyMC)
median expected limit: r < 13.101 @ 95%CL (1 toyMC)
   68% expected band : 13.101 < r < 13.101
   95% expected band : 13.101 < r < 13.101
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -966937331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.2457 +/- 0.0146442 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.2457 @ 95%CL (1 toyMC)
median expected limit: r < 15.2457 @ 95%CL (1 toyMC)
   68% expected band : 15.2457 < r < 15.2457
   95% expected band : 15.2457 < r < 15.2457
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1802639733
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.72018 +/- 0.0160633 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.72018 @ 95%CL (1 toyMC)
median expected limit: r < 9.72018 @ 95%CL (1 toyMC)
   68% expected band : 9.72018 < r < 9.72018
   95% expected band : 9.72018 < r < 9.72018
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 153003779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6034 +/- 0.0167285 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.6034 @ 95%CL (1 toyMC)
median expected limit: r < 10.6034 @ 95%CL (1 toyMC)
   68% expected band : 10.6034 < r < 10.6034
   95% expected band : 10.6034 < r < 10.6034
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1836423244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7166 +/- 0.0189446 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.7166 @ 95%CL (1 toyMC)
median expected limit: r < 12.7166 @ 95%CL (1 toyMC)
   68% expected band : 12.7166 < r < 12.7166
   95% expected band : 12.7166 < r < 12.7166
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -71786096
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 18.1163 +/- 0.00756467 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 18.1163 @ 95%CL (1 toyMC)
median expected limit: r < 18.1163 @ 95%CL (1 toyMC)
   68% expected band : 18.1163 < r < 18.1163
   95% expected band : 18.1163 < r < 18.1163
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1743515372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.70503 +/- 0.0159183 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.70503 @ 95%CL (1 toyMC)
median expected limit: r < 9.70503 @ 95%CL (1 toyMC)
   68% expected band : 9.70503 < r < 9.70503
   95% expected band : 9.70503 < r < 9.70503
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 247125769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.76086 +/- 0.0167066 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 7.76086 @ 95%CL (1 toyMC)
median expected limit: r < 7.76086 @ 95%CL (1 toyMC)
   68% expected band : 7.76086 < r < 7.76086
   95% expected band : 7.76086 < r < 7.76086
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1123592954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.8832 +/- 0.0140942 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 13.8832 @ 95%CL (1 toyMC)
median expected limit: r < 13.8832 @ 95%CL (1 toyMC)
   68% expected band : 13.8832 < r < 13.8832
   95% expected band : 13.8832 < r < 13.8832
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1953516676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.8186 +/- 0.0117993 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 15.8186 @ 95%CL (1 toyMC)
median expected limit: r < 15.8186 @ 95%CL (1 toyMC)
   68% expected band : 15.8186 < r < 15.8186
   95% expected band : 15.8186 < r < 15.8186
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1462765882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.99092 +/- 0.0132836 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.99092 @ 95%CL (1 toyMC)
median expected limit: r < 7.99092 @ 95%CL (1 toyMC)
   68% expected band : 7.99092 < r < 7.99092
   95% expected band : 7.99092 < r < 7.99092
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 273328901
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.472 +/- 0.0173149 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.472 @ 95%CL (1 toyMC)
median expected limit: r < 11.472 @ 95%CL (1 toyMC)
   68% expected band : 11.472 < r < 11.472
   95% expected band : 11.472 < r < 11.472
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1632143937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.66208 +/- 0.0238213 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.66208 @ 95%CL (1 toyMC)
median expected limit: r < 9.66208 @ 95%CL (1 toyMC)
   68% expected band : 9.66208 < r < 9.66208
   95% expected band : 9.66208 < r < 9.66208
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1026232413
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.06721 +/- 0.019778 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.06721 @ 95%CL (1 toyMC)
median expected limit: r < 9.06721 @ 95%CL (1 toyMC)
   68% expected band : 9.06721 < r < 9.06721
   95% expected band : 9.06721 < r < 9.06721
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 578553214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.81664 +/- 0.0186737 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.81664 @ 95%CL (1 toyMC)
median expected limit: r < 8.81664 @ 95%CL (1 toyMC)
   68% expected band : 8.81664 < r < 8.81664
   95% expected band : 8.81664 < r < 8.81664
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1389684221
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.82575 +/- 0.0152233 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.82575 @ 95%CL (1 toyMC)
median expected limit: r < 8.82575 @ 95%CL (1 toyMC)
   68% expected band : 8.82575 < r < 8.82575
   95% expected band : 8.82575 < r < 8.82575
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1555846570
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.9981 +/- 0.0141022 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.9981 @ 95%CL (1 toyMC)
median expected limit: r < 13.9981 @ 95%CL (1 toyMC)
   68% expected band : 13.9981 < r < 13.9981
   95% expected band : 13.9981 < r < 13.9981
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1819262161
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.18271 +/- 0.0196763 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.18271 @ 95%CL (1 toyMC)
median expected limit: r < 9.18271 @ 95%CL (1 toyMC)
   68% expected band : 9.18271 < r < 9.18271
   95% expected band : 9.18271 < r < 9.18271
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1000292511.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1007966404.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1026232413.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1058225699.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1062621611.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1100729784.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1123592954.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1127921070.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1143436260.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1186890391.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1218353508.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1225543071.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1238915678.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1352857049.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1430080080.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1462765882.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-146301147.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1555846570.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1594540903.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1598424760.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1632143937.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1743122233.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1743515372.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1772563403.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1780677971.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-1781091398.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-1801535443.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-1810869546.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-1819262161.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-1831364381.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-1836423244.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-1872290012.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-1878250931.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-1908088164.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-1953516676.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-1980231951.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-1993636850.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-2038181296.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-2110770466.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-224437597.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-232880966.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-288160436.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-348042346.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-401828782.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-441295701.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-489712518.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-492895121.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.-553691553.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.-567413213.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.-602197189.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.-653038536.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.-695941719.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.-71786096.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.-747378506.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.-776124352.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.-800732859.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.-850722305.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.-952978331.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.-966937331.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1136410052.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1182409190.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1209672154.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.122892643.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.133467136.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1350236478.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1389684221.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.143354481.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1464669279.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1522089947.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.153003779.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1575185567.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.157677169.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1595080018.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1629752454.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.1638502292.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.1657104710.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.1691699444.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.1720984498.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.1743509715.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.1753546781.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.1802639733.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.1884633559.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.191917454.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.1958865678.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.2055292560.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.2107125150.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.247125769.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.251493358.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.273328901.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.296071409.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.321745153.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.437697117.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.529294657.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.552079291.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.557322851.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.578553214.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.803986018.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.901017269.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.936556296.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.96173503.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1599475555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7039 +/- 0.0169247 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.7039 @ 95%CL (1 toyMC)
median expected limit: r < 11.7039 @ 95%CL (1 toyMC)
   68% expected band : 11.7039 < r < 11.7039
   95% expected band : 11.7039 < r < 11.7039
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1250957577
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.56913 +/- 0.0190278 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.56913 @ 95%CL (1 toyMC)
median expected limit: r < 8.56913 @ 95%CL (1 toyMC)
   68% expected band : 8.56913 < r < 8.56913
   95% expected band : 8.56913 < r < 8.56913
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -350436776
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.62268 +/- 0.016291 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.62268 @ 95%CL (1 toyMC)
median expected limit: r < 8.62268 @ 95%CL (1 toyMC)
   68% expected band : 8.62268 < r < 8.62268
   95% expected band : 8.62268 < r < 8.62268
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1850820834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.90173 +/- 0.0191652 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.90173 @ 95%CL (1 toyMC)
median expected limit: r < 7.90173 @ 95%CL (1 toyMC)
   68% expected band : 7.90173 < r < 7.90173
   95% expected band : 7.90173 < r < 7.90173
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 449708351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.45387 +/- 0.0154507 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.45387 @ 95%CL (1 toyMC)
median expected limit: r < 7.45387 @ 95%CL (1 toyMC)
   68% expected band : 7.45387 < r < 7.45387
   95% expected band : 7.45387 < r < 7.45387
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1559373679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.7389 +/- 0.0122442 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 13.7389 @ 95%CL (1 toyMC)
median expected limit: r < 13.7389 @ 95%CL (1 toyMC)
   68% expected band : 13.7389 < r < 13.7389
   95% expected band : 13.7389 < r < 13.7389
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 605039813
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.91601 +/- 0.0150741 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.91601 @ 95%CL (1 toyMC)
median expected limit: r < 9.91601 @ 95%CL (1 toyMC)
   68% expected band : 9.91601 < r < 9.91601
   95% expected band : 9.91601 < r < 9.91601
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 257848599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.0673 +/- 0.00712343 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 17.0673 @ 95%CL (1 toyMC)
median expected limit: r < 17.0673 @ 95%CL (1 toyMC)
   68% expected band : 17.0673 < r < 17.0673
   95% expected band : 17.0673 < r < 17.0673
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1372548161
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.45297 +/- 0.0149781 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.45297 @ 95%CL (1 toyMC)
median expected limit: r < 8.45297 @ 95%CL (1 toyMC)
   68% expected band : 8.45297 < r < 8.45297
   95% expected band : 8.45297 < r < 8.45297
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 564659576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.00093 +/- 0.0154616 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.00093 @ 95%CL (1 toyMC)
median expected limit: r < 8.00093 @ 95%CL (1 toyMC)
   68% expected band : 8.00093 < r < 8.00093
   95% expected band : 8.00093 < r < 8.00093
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -508182332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7853 +/- 0.0154923 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.7853 @ 95%CL (1 toyMC)
median expected limit: r < 11.7853 @ 95%CL (1 toyMC)
   68% expected band : 11.7853 < r < 11.7853
   95% expected band : 11.7853 < r < 11.7853
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -323443811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.16056 +/- 0.0153894 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.16056 @ 95%CL (1 toyMC)
median expected limit: r < 9.16056 @ 95%CL (1 toyMC)
   68% expected band : 9.16056 < r < 9.16056
   95% expected band : 9.16056 < r < 9.16056
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1869992713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.16068 +/- 0.0190221 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.16068 @ 95%CL (1 toyMC)
median expected limit: r < 9.16068 @ 95%CL (1 toyMC)
   68% expected band : 9.16068 < r < 9.16068
   95% expected band : 9.16068 < r < 9.16068
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1467442922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.2044 +/- 0.0194879 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.2044 @ 95%CL (1 toyMC)
median expected limit: r < 11.2044 @ 95%CL (1 toyMC)
   68% expected band : 11.2044 < r < 11.2044
   95% expected band : 11.2044 < r < 11.2044
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1813014822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.89577 +/- 0.0167756 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.89577 @ 95%CL (1 toyMC)
median expected limit: r < 8.89577 @ 95%CL (1 toyMC)
   68% expected band : 8.89577 < r < 8.89577
   95% expected band : 8.89577 < r < 8.89577
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -858153246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.8268 +/- 0.0163554 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 11.8268 @ 95%CL (1 toyMC)
median expected limit: r < 11.8268 @ 95%CL (1 toyMC)
   68% expected band : 11.8268 < r < 11.8268
   95% expected band : 11.8268 < r < 11.8268
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 167385472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.6977 +/- 0.0214239 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.6977 @ 95%CL (1 toyMC)
median expected limit: r < 12.6977 @ 95%CL (1 toyMC)
   68% expected band : 12.6977 < r < 12.6977
   95% expected band : 12.6977 < r < 12.6977
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1399188635
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.803 +/- 0.0159283 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.803 @ 95%CL (1 toyMC)
median expected limit: r < 11.803 @ 95%CL (1 toyMC)
   68% expected band : 11.803 < r < 11.803
   95% expected band : 11.803 < r < 11.803
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 719817440
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.83255 +/- 0.0149689 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.83255 @ 95%CL (1 toyMC)
median expected limit: r < 7.83255 @ 95%CL (1 toyMC)
   68% expected band : 7.83255 < r < 7.83255
   95% expected band : 7.83255 < r < 7.83255
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1503601472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.80528 +/- 0.0180928 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.80528 @ 95%CL (1 toyMC)
median expected limit: r < 9.80528 @ 95%CL (1 toyMC)
   68% expected band : 9.80528 < r < 9.80528
   95% expected band : 9.80528 < r < 9.80528
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 609673845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.90008 +/- 0.0153845 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.90008 @ 95%CL (1 toyMC)
median expected limit: r < 8.90008 @ 95%CL (1 toyMC)
   68% expected band : 8.90008 < r < 8.90008
   95% expected band : 8.90008 < r < 8.90008
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 118806101
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.864 +/- 0.0158404 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 11.864 @ 95%CL (1 toyMC)
median expected limit: r < 11.864 @ 95%CL (1 toyMC)
   68% expected band : 11.864 < r < 11.864
   95% expected band : 11.864 < r < 11.864
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1280639558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.90985 +/- 0.0178588 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.90985 @ 95%CL (1 toyMC)
median expected limit: r < 8.90985 @ 95%CL (1 toyMC)
   68% expected band : 8.90985 < r < 8.90985
   95% expected band : 8.90985 < r < 8.90985
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 674586052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.4695 +/- 0.00952747 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 16.4695 @ 95%CL (1 toyMC)
median expected limit: r < 16.4695 @ 95%CL (1 toyMC)
   68% expected band : 16.4695 < r < 16.4695
   95% expected band : 16.4695 < r < 16.4695
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 792515941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.2815 +/- 0.0157401 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 11.2815 @ 95%CL (1 toyMC)
median expected limit: r < 11.2815 @ 95%CL (1 toyMC)
   68% expected band : 11.2815 < r < 11.2815
   95% expected band : 11.2815 < r < 11.2815
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -641338937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0484 +/- 0.0204894 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.0484 @ 95%CL (1 toyMC)
median expected limit: r < 10.0484 @ 95%CL (1 toyMC)
   68% expected band : 10.0484 < r < 10.0484
   95% expected band : 10.0484 < r < 10.0484
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1683591411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.64995 +/- 0.016954 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.64995 @ 95%CL (1 toyMC)
median expected limit: r < 9.64995 @ 95%CL (1 toyMC)
   68% expected band : 9.64995 < r < 9.64995
   95% expected band : 9.64995 < r < 9.64995
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1905398572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.18189 +/- 0.0162769 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.18189 @ 95%CL (1 toyMC)
median expected limit: r < 7.18189 @ 95%CL (1 toyMC)
   68% expected band : 7.18189 < r < 7.18189
   95% expected band : 7.18189 < r < 7.18189
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1654904320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.4597 +/- 0.0162136 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.4597 @ 95%CL (1 toyMC)
median expected limit: r < 10.4597 @ 95%CL (1 toyMC)
   68% expected band : 10.4597 < r < 10.4597
   95% expected band : 10.4597 < r < 10.4597
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -382283031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.41786 +/- 0.0174868 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.41786 @ 95%CL (1 toyMC)
median expected limit: r < 8.41786 @ 95%CL (1 toyMC)
   68% expected band : 8.41786 < r < 8.41786
   95% expected band : 8.41786 < r < 8.41786
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2135756136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.85458 +/- 0.0146229 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.85458 @ 95%CL (1 toyMC)
median expected limit: r < 8.85458 @ 95%CL (1 toyMC)
   68% expected band : 8.85458 < r < 8.85458
   95% expected band : 8.85458 < r < 8.85458
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2077443445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.013 +/- 0.0155559 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.013 @ 95%CL (1 toyMC)
median expected limit: r < 13.013 @ 95%CL (1 toyMC)
   68% expected band : 13.013 < r < 13.013
   95% expected band : 13.013 < r < 13.013
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2102175648
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.877 +/- 0.0160701 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.877 @ 95%CL (1 toyMC)
median expected limit: r < 7.877 @ 95%CL (1 toyMC)
   68% expected band : 7.877 < r < 7.877
   95% expected band : 7.877 < r < 7.877
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 882018249
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.91324 +/- 0.0161231 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.91324 @ 95%CL (1 toyMC)
median expected limit: r < 7.91324 @ 95%CL (1 toyMC)
   68% expected band : 7.91324 < r < 7.91324
   95% expected band : 7.91324 < r < 7.91324
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 566283574
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.501 +/- 0.0153831 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 12.501 @ 95%CL (1 toyMC)
median expected limit: r < 12.501 @ 95%CL (1 toyMC)
   68% expected band : 12.501 < r < 12.501
   95% expected band : 12.501 < r < 12.501
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -643977570
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8112 +/- 0.0192451 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.8112 @ 95%CL (1 toyMC)
median expected limit: r < 10.8112 @ 95%CL (1 toyMC)
   68% expected band : 10.8112 < r < 10.8112
   95% expected band : 10.8112 < r < 10.8112
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -804329759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.44014 +/- 0.0161681 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.44014 @ 95%CL (1 toyMC)
median expected limit: r < 8.44014 @ 95%CL (1 toyMC)
   68% expected band : 8.44014 < r < 8.44014
   95% expected band : 8.44014 < r < 8.44014
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1233497424
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.2521 +/- 0.0176975 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.2521 @ 95%CL (1 toyMC)
median expected limit: r < 11.2521 @ 95%CL (1 toyMC)
   68% expected band : 11.2521 < r < 11.2521
   95% expected band : 11.2521 < r < 11.2521
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1401384443
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.7143 +/- 0.0177284 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.7143 @ 95%CL (1 toyMC)
median expected limit: r < 8.7143 @ 95%CL (1 toyMC)
   68% expected band : 8.7143 < r < 8.7143
   95% expected band : 8.7143 < r < 8.7143
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1289817329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.72258 +/- 0.0164236 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.72258 @ 95%CL (1 toyMC)
median expected limit: r < 9.72258 @ 95%CL (1 toyMC)
   68% expected band : 9.72258 < r < 9.72258
   95% expected band : 9.72258 < r < 9.72258
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 876974772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8489 +/- 0.0206856 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.8489 @ 95%CL (1 toyMC)
median expected limit: r < 10.8489 @ 95%CL (1 toyMC)
   68% expected band : 10.8489 < r < 10.8489
   95% expected band : 10.8489 < r < 10.8489
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1835252718
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.24448 +/- 0.0189091 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.24448 @ 95%CL (1 toyMC)
median expected limit: r < 9.24448 @ 95%CL (1 toyMC)
   68% expected band : 9.24448 < r < 9.24448
   95% expected band : 9.24448 < r < 9.24448
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1738500449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.4244 +/- 0.00970296 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.34 min (real)
mean   expected limit: r < 16.4244 @ 95%CL (1 toyMC)
median expected limit: r < 16.4244 @ 95%CL (1 toyMC)
   68% expected band : 16.4244 < r < 16.4244
   95% expected band : 16.4244 < r < 16.4244
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2011239840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.87551 +/- 0.0191282 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.87551 @ 95%CL (1 toyMC)
median expected limit: r < 9.87551 @ 95%CL (1 toyMC)
   68% expected band : 9.87551 < r < 9.87551
   95% expected band : 9.87551 < r < 9.87551
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1638498338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.39553 +/- 0.0173282 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.39553 @ 95%CL (1 toyMC)
median expected limit: r < 8.39553 @ 95%CL (1 toyMC)
   68% expected band : 8.39553 < r < 8.39553
   95% expected band : 8.39553 < r < 8.39553
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1774139868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.59018 +/- 0.0163248 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.59018 @ 95%CL (1 toyMC)
median expected limit: r < 8.59018 @ 95%CL (1 toyMC)
   68% expected band : 8.59018 < r < 8.59018
   95% expected band : 8.59018 < r < 8.59018
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1467933518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.77443 +/- 0.0189469 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 9.77443 @ 95%CL (1 toyMC)
median expected limit: r < 9.77443 @ 95%CL (1 toyMC)
   68% expected band : 9.77443 < r < 9.77443
   95% expected band : 9.77443 < r < 9.77443
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 763928930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9469 +/- 0.0130282 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.9469 @ 95%CL (1 toyMC)
median expected limit: r < 10.9469 @ 95%CL (1 toyMC)
   68% expected band : 10.9469 < r < 10.9469
   95% expected band : 10.9469 < r < 10.9469
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1506338351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.47768 +/- 0.0176432 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.47768 @ 95%CL (1 toyMC)
median expected limit: r < 7.47768 @ 95%CL (1 toyMC)
   68% expected band : 7.47768 < r < 7.47768
   95% expected band : 7.47768 < r < 7.47768
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 966572789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.8165 +/- 0.0179452 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.8165 @ 95%CL (1 toyMC)
median expected limit: r < 11.8165 @ 95%CL (1 toyMC)
   68% expected band : 11.8165 < r < 11.8165
   95% expected band : 11.8165 < r < 11.8165
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1923619641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 18.3294 +/- 0.0055054 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 18.3294 @ 95%CL (1 toyMC)
median expected limit: r < 18.3294 @ 95%CL (1 toyMC)
   68% expected band : 18.3294 < r < 18.3294
   95% expected band : 18.3294 < r < 18.3294
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1764640930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9727 +/- 0.0171508 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.9727 @ 95%CL (1 toyMC)
median expected limit: r < 10.9727 @ 95%CL (1 toyMC)
   68% expected band : 10.9727 < r < 10.9727
   95% expected band : 10.9727 < r < 10.9727
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 919506411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3871 +/- 0.0172635 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.3871 @ 95%CL (1 toyMC)
median expected limit: r < 10.3871 @ 95%CL (1 toyMC)
   68% expected band : 10.3871 < r < 10.3871
   95% expected band : 10.3871 < r < 10.3871
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 882411728
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.8658 +/- 0.0129733 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.8658 @ 95%CL (1 toyMC)
median expected limit: r < 11.8658 @ 95%CL (1 toyMC)
   68% expected band : 11.8658 < r < 11.8658
   95% expected band : 11.8658 < r < 11.8658
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2026815278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.5693 +/- 0.0163226 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 11.5693 @ 95%CL (1 toyMC)
median expected limit: r < 11.5693 @ 95%CL (1 toyMC)
   68% expected band : 11.5693 < r < 11.5693
   95% expected band : 11.5693 < r < 11.5693
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1499028921
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9453 +/- 0.0169109 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.9453 @ 95%CL (1 toyMC)
median expected limit: r < 10.9453 @ 95%CL (1 toyMC)
   68% expected band : 10.9453 < r < 10.9453
   95% expected band : 10.9453 < r < 10.9453
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -359451622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1966 +/- 0.0162727 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.1966 @ 95%CL (1 toyMC)
median expected limit: r < 10.1966 @ 95%CL (1 toyMC)
   68% expected band : 10.1966 < r < 10.1966
   95% expected band : 10.1966 < r < 10.1966
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1121646606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.23793 +/- 0.0133021 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.23793 @ 95%CL (1 toyMC)
median expected limit: r < 7.23793 @ 95%CL (1 toyMC)
   68% expected band : 7.23793 < r < 7.23793
   95% expected band : 7.23793 < r < 7.23793
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1176071530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.46666 +/- 0.0157522 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.46666 @ 95%CL (1 toyMC)
median expected limit: r < 9.46666 @ 95%CL (1 toyMC)
   68% expected band : 9.46666 < r < 9.46666
   95% expected band : 9.46666 < r < 9.46666
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1846531313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.32157 +/- 0.016474 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.32157 @ 95%CL (1 toyMC)
median expected limit: r < 8.32157 @ 95%CL (1 toyMC)
   68% expected band : 8.32157 < r < 8.32157
   95% expected band : 8.32157 < r < 8.32157
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1073433506
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.3648 +/- 0.0159725 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 14.3648 @ 95%CL (1 toyMC)
median expected limit: r < 14.3648 @ 95%CL (1 toyMC)
   68% expected band : 14.3648 < r < 14.3648
   95% expected band : 14.3648 < r < 14.3648
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 515329236
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.85702 +/- 0.0160913 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.85702 @ 95%CL (1 toyMC)
median expected limit: r < 7.85702 @ 95%CL (1 toyMC)
   68% expected band : 7.85702 < r < 7.85702
   95% expected band : 7.85702 < r < 7.85702
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1792069402
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7245 +/- 0.0122391 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.7245 @ 95%CL (1 toyMC)
median expected limit: r < 12.7245 @ 95%CL (1 toyMC)
   68% expected band : 12.7245 < r < 12.7245
   95% expected band : 12.7245 < r < 12.7245
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -715872493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.4262 +/- 0.0148823 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.4262 @ 95%CL (1 toyMC)
median expected limit: r < 12.4262 @ 95%CL (1 toyMC)
   68% expected band : 12.4262 < r < 12.4262
   95% expected band : 12.4262 < r < 12.4262
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2051332704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.4049 +/- 0.0137027 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.4049 @ 95%CL (1 toyMC)
median expected limit: r < 12.4049 @ 95%CL (1 toyMC)
   68% expected band : 12.4049 < r < 12.4049
   95% expected band : 12.4049 < r < 12.4049
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -652646110
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.28444 +/- 0.0189399 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.28444 @ 95%CL (1 toyMC)
median expected limit: r < 9.28444 @ 95%CL (1 toyMC)
   68% expected band : 9.28444 < r < 9.28444
   95% expected band : 9.28444 < r < 9.28444
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -426171363
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.97275 +/- 0.0168011 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.97275 @ 95%CL (1 toyMC)
median expected limit: r < 7.97275 @ 95%CL (1 toyMC)
   68% expected band : 7.97275 < r < 7.97275
   95% expected band : 7.97275 < r < 7.97275
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 924674263
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.89251 +/- 0.0192555 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.89251 @ 95%CL (1 toyMC)
median expected limit: r < 8.89251 @ 95%CL (1 toyMC)
   68% expected band : 8.89251 < r < 8.89251
   95% expected band : 8.89251 < r < 8.89251
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 267645534
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.4236 +/- 0.0150622 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.4236 @ 95%CL (1 toyMC)
median expected limit: r < 7.4236 @ 95%CL (1 toyMC)
   68% expected band : 7.4236 < r < 7.4236
   95% expected band : 7.4236 < r < 7.4236
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1097711035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2299 +/- 0.0151484 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.2299 @ 95%CL (1 toyMC)
median expected limit: r < 10.2299 @ 95%CL (1 toyMC)
   68% expected band : 10.2299 < r < 10.2299
   95% expected band : 10.2299 < r < 10.2299
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1311811462
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.54034 +/- 0.0162909 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.54034 @ 95%CL (1 toyMC)
median expected limit: r < 8.54034 @ 95%CL (1 toyMC)
   68% expected band : 8.54034 < r < 8.54034
   95% expected band : 8.54034 < r < 8.54034
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 922775135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.3007 +/- 0.0137086 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.3007 @ 95%CL (1 toyMC)
median expected limit: r < 13.3007 @ 95%CL (1 toyMC)
   68% expected band : 13.3007 < r < 13.3007
   95% expected band : 13.3007 < r < 13.3007
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 818234462
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8506 +/- 0.018377 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.8506 @ 95%CL (1 toyMC)
median expected limit: r < 10.8506 @ 95%CL (1 toyMC)
   68% expected band : 10.8506 < r < 10.8506
   95% expected band : 10.8506 < r < 10.8506
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1523488284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.5371 +/- 0.014975 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.5371 @ 95%CL (1 toyMC)
median expected limit: r < 13.5371 @ 95%CL (1 toyMC)
   68% expected band : 13.5371 < r < 13.5371
   95% expected band : 13.5371 < r < 13.5371
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 43978041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.05312 +/- 0.0191526 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.05312 @ 95%CL (1 toyMC)
median expected limit: r < 9.05312 @ 95%CL (1 toyMC)
   68% expected band : 9.05312 < r < 9.05312
   95% expected band : 9.05312 < r < 9.05312
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1598848032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.22648 +/- 0.0136546 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.22648 @ 95%CL (1 toyMC)
median expected limit: r < 7.22648 @ 95%CL (1 toyMC)
   68% expected band : 7.22648 < r < 7.22648
   95% expected band : 7.22648 < r < 7.22648
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2115278501
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1219 +/- 0.0175142 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.1219 @ 95%CL (1 toyMC)
median expected limit: r < 10.1219 @ 95%CL (1 toyMC)
   68% expected band : 10.1219 < r < 10.1219
   95% expected band : 10.1219 < r < 10.1219
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1334548950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.7527 +/- 0.017834 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.7527 @ 95%CL (1 toyMC)
median expected limit: r < 10.7527 @ 95%CL (1 toyMC)
   68% expected band : 10.7527 < r < 10.7527
   95% expected band : 10.7527 < r < 10.7527
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1084223504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.47238 +/- 0.0189028 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.47238 @ 95%CL (1 toyMC)
median expected limit: r < 9.47238 @ 95%CL (1 toyMC)
   68% expected band : 9.47238 < r < 9.47238
   95% expected band : 9.47238 < r < 9.47238
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1957151557
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.1867 +/- 0.0180131 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.1867 @ 95%CL (1 toyMC)
median expected limit: r < 11.1867 @ 95%CL (1 toyMC)
   68% expected band : 11.1867 < r < 11.1867
   95% expected band : 11.1867 < r < 11.1867
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1447440029
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.20013 +/- 0.0195183 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.20013 @ 95%CL (1 toyMC)
median expected limit: r < 8.20013 @ 95%CL (1 toyMC)
   68% expected band : 8.20013 < r < 8.20013
   95% expected band : 8.20013 < r < 8.20013
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1995952113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.98922 +/- 0.0165884 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.98922 @ 95%CL (1 toyMC)
median expected limit: r < 9.98922 @ 95%CL (1 toyMC)
   68% expected band : 9.98922 < r < 9.98922
   95% expected band : 9.98922 < r < 9.98922
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -61540092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0781 +/- 0.0153174 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.0781 @ 95%CL (1 toyMC)
median expected limit: r < 10.0781 @ 95%CL (1 toyMC)
   68% expected band : 10.0781 < r < 10.0781
   95% expected band : 10.0781 < r < 10.0781
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 94162169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.13519 +/- 0.0200287 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.13519 @ 95%CL (1 toyMC)
median expected limit: r < 9.13519 @ 95%CL (1 toyMC)
   68% expected band : 9.13519 < r < 9.13519
   95% expected band : 9.13519 < r < 9.13519
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1177076992
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.332 +/- 0.0223997 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.332 @ 95%CL (1 toyMC)
median expected limit: r < 10.332 @ 95%CL (1 toyMC)
   68% expected band : 10.332 < r < 10.332
   95% expected band : 10.332 < r < 10.332
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -785710681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.0545 +/- 0.0158177 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.0545 @ 95%CL (1 toyMC)
median expected limit: r < 13.0545 @ 95%CL (1 toyMC)
   68% expected band : 13.0545 < r < 13.0545
   95% expected band : 13.0545 < r < 13.0545
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -300770148
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.606 +/- 0.0127405 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.606 @ 95%CL (1 toyMC)
median expected limit: r < 13.606 @ 95%CL (1 toyMC)
   68% expected band : 13.606 < r < 13.606
   95% expected band : 13.606 < r < 13.606
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 539875469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.88502 +/- 0.0171239 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.88502 @ 95%CL (1 toyMC)
median expected limit: r < 8.88502 @ 95%CL (1 toyMC)
   68% expected band : 8.88502 < r < 8.88502
   95% expected band : 8.88502 < r < 8.88502
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -647207845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.60755 +/- 0.0174095 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.60755 @ 95%CL (1 toyMC)
median expected limit: r < 9.60755 @ 95%CL (1 toyMC)
   68% expected band : 9.60755 < r < 9.60755
   95% expected band : 9.60755 < r < 9.60755
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1475698260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.72777 +/- 0.0162016 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.72777 @ 95%CL (1 toyMC)
median expected limit: r < 9.72777 @ 95%CL (1 toyMC)
   68% expected band : 9.72777 < r < 9.72777
   95% expected band : 9.72777 < r < 9.72777
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1552179987
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.7443 +/- 0.0142194 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 14.7443 @ 95%CL (1 toyMC)
median expected limit: r < 14.7443 @ 95%CL (1 toyMC)
   68% expected band : 14.7443 < r < 14.7443
   95% expected band : 14.7443 < r < 14.7443
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -246323192
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.93973 +/- 0.0171185 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.93973 @ 95%CL (1 toyMC)
median expected limit: r < 8.93973 @ 95%CL (1 toyMC)
   68% expected band : 8.93973 < r < 8.93973
   95% expected band : 8.93973 < r < 8.93973
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1661925769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.4371 +/- 0.0120621 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.4371 @ 95%CL (1 toyMC)
median expected limit: r < 15.4371 @ 95%CL (1 toyMC)
   68% expected band : 15.4371 < r < 15.4371
   95% expected band : 15.4371 < r < 15.4371
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 917144691
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.78774 +/- 0.0169389 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.78774 @ 95%CL (1 toyMC)
median expected limit: r < 8.78774 @ 95%CL (1 toyMC)
   68% expected band : 8.78774 < r < 8.78774
   95% expected band : 8.78774 < r < 8.78774
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 25887678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.08929 +/- 0.0177386 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.08929 @ 95%CL (1 toyMC)
median expected limit: r < 9.08929 @ 95%CL (1 toyMC)
   68% expected band : 9.08929 < r < 9.08929
   95% expected band : 9.08929 < r < 9.08929
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 45889349
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.3334 +/- 0.0177869 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.3334 @ 95%CL (1 toyMC)
median expected limit: r < 12.3334 @ 95%CL (1 toyMC)
   68% expected band : 12.3334 < r < 12.3334
   95% expected band : 12.3334 < r < 12.3334
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1107124642
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.2435 +/- 0.0144431 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.2435 @ 95%CL (1 toyMC)
median expected limit: r < 13.2435 @ 95%CL (1 toyMC)
   68% expected band : 13.2435 < r < 13.2435
   95% expected band : 13.2435 < r < 13.2435
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1281229410
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.45941 +/- 0.0162667 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.45941 @ 95%CL (1 toyMC)
median expected limit: r < 9.45941 @ 95%CL (1 toyMC)
   68% expected band : 9.45941 < r < 9.45941
   95% expected band : 9.45941 < r < 9.45941
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1648703607
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1667 +/- 0.0186577 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.1667 @ 95%CL (1 toyMC)
median expected limit: r < 10.1667 @ 95%CL (1 toyMC)
   68% expected band : 10.1667 < r < 10.1667
   95% expected band : 10.1667 < r < 10.1667
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 339011405
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.59208 +/- 0.0164299 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.59208 @ 95%CL (1 toyMC)
median expected limit: r < 7.59208 @ 95%CL (1 toyMC)
   68% expected band : 7.59208 < r < 7.59208
   95% expected band : 7.59208 < r < 7.59208
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1073433506.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1097711035.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1121646606.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1176071530.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1177076992.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1233497424.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1250957577.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1281229410.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1311811462.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1399188635.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1447440029.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1499028921.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1503601472.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1523488284.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1552179987.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1598848032.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1599475555.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1683591411.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1764640930.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1835252718.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1846531313.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1869992713.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1905398572.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1995952113.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-2115278501.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-2135756136.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-246323192.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-300770148.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-323443811.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-350436776.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-359451622.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-382283031.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-426171363.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-508182332.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-61540092.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-641338937.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-643977570.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-647207845.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-652646110.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-715872493.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-785710681.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-804329759.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-858153246.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.1084223504.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.1107124642.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.118806101.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.1280639558.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.1289817329.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1334548950.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1372548161.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1401384443.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1467442922.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1467933518.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1475698260.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1506338351.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1559373679.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1638498338.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1648703607.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1654904320.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1661925769.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.167385472.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1738500449.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1774139868.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1792069402.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1813014822.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1850820834.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1923619641.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1957151557.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.2011239840.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.2026815278.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.2051332704.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.2077443445.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.2102175648.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.257848599.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.25887678.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.267645534.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.339011405.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.43978041.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.449708351.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.45889349.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.515329236.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.539875469.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.564659576.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.566283574.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.605039813.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.609673845.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.674586052.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.719817440.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.763928930.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.792515941.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.818234462.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.876974772.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.882018249.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.882411728.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.917144691.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.919506411.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.922775135.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.924674263.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.94162169.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.966572789.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 19575920
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8657 +/- 0.0184684 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.8657 @ 95%CL (1 toyMC)
median expected limit: r < 10.8657 @ 95%CL (1 toyMC)
   68% expected band : 10.8657 < r < 10.8657
   95% expected band : 10.8657 < r < 10.8657
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 606030599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.60552 +/- 0.0148112 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.60552 @ 95%CL (1 toyMC)
median expected limit: r < 7.60552 @ 95%CL (1 toyMC)
   68% expected band : 7.60552 < r < 7.60552
   95% expected band : 7.60552 < r < 7.60552
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1093464275
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.6907 +/- 0.0135489 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 8.6907 @ 95%CL (1 toyMC)
median expected limit: r < 8.6907 @ 95%CL (1 toyMC)
   68% expected band : 8.6907 < r < 8.6907
   95% expected band : 8.6907 < r < 8.6907
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1087663214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.4745 +/- 0.015788 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.4745 @ 95%CL (1 toyMC)
median expected limit: r < 13.4745 @ 95%CL (1 toyMC)
   68% expected band : 13.4745 < r < 13.4745
   95% expected band : 13.4745 < r < 13.4745
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -467248660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.79623 +/- 0.0150877 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.79623 @ 95%CL (1 toyMC)
median expected limit: r < 6.79623 @ 95%CL (1 toyMC)
   68% expected band : 6.79623 < r < 6.79623
   95% expected band : 6.79623 < r < 6.79623
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1800433810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0899 +/- 0.0191575 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.0899 @ 95%CL (1 toyMC)
median expected limit: r < 10.0899 @ 95%CL (1 toyMC)
   68% expected band : 10.0899 < r < 10.0899
   95% expected band : 10.0899 < r < 10.0899
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1351726819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.1376 +/- 0.0176857 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.1376 @ 95%CL (1 toyMC)
median expected limit: r < 11.1376 @ 95%CL (1 toyMC)
   68% expected band : 11.1376 < r < 11.1376
   95% expected band : 11.1376 < r < 11.1376
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1239162536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.04279 +/- 0.0128524 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.04279 @ 95%CL (1 toyMC)
median expected limit: r < 6.04279 @ 95%CL (1 toyMC)
   68% expected band : 6.04279 < r < 6.04279
   95% expected band : 6.04279 < r < 6.04279
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2105842974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.77806 +/- 0.018008 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.77806 @ 95%CL (1 toyMC)
median expected limit: r < 9.77806 @ 95%CL (1 toyMC)
   68% expected band : 9.77806 < r < 9.77806
   95% expected band : 9.77806 < r < 9.77806
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1342671384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.2261 +/- 0.0145589 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.2261 @ 95%CL (1 toyMC)
median expected limit: r < 6.2261 @ 95%CL (1 toyMC)
   68% expected band : 6.2261 < r < 6.2261
   95% expected band : 6.2261 < r < 6.2261
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 400883676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.05279 +/- 0.0112151 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.05279 @ 95%CL (1 toyMC)
median expected limit: r < 6.05279 @ 95%CL (1 toyMC)
   68% expected band : 6.05279 < r < 6.05279
   95% expected band : 6.05279 < r < 6.05279
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1022942975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.05586 +/- 0.0126493 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.05586 @ 95%CL (1 toyMC)
median expected limit: r < 6.05586 @ 95%CL (1 toyMC)
   68% expected band : 6.05586 < r < 6.05586
   95% expected band : 6.05586 < r < 6.05586
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1873768114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.75711 +/- 0.0144307 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.75711 @ 95%CL (1 toyMC)
median expected limit: r < 7.75711 @ 95%CL (1 toyMC)
   68% expected band : 7.75711 < r < 7.75711
   95% expected band : 7.75711 < r < 7.75711
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1715995968
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9051 +/- 0.017633 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.9051 @ 95%CL (1 toyMC)
median expected limit: r < 10.9051 @ 95%CL (1 toyMC)
   68% expected band : 10.9051 < r < 10.9051
   95% expected band : 10.9051 < r < 10.9051
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1421201840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.1713 +/- 0.0116825 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.1713 @ 95%CL (1 toyMC)
median expected limit: r < 6.1713 @ 95%CL (1 toyMC)
   68% expected band : 6.1713 < r < 6.1713
   95% expected band : 6.1713 < r < 6.1713
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1440020233
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.78761 +/- 0.0157437 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.78761 @ 95%CL (1 toyMC)
median expected limit: r < 6.78761 @ 95%CL (1 toyMC)
   68% expected band : 6.78761 < r < 6.78761
   95% expected band : 6.78761 < r < 6.78761
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 286025212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.97887 +/- 0.0178244 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.97887 @ 95%CL (1 toyMC)
median expected limit: r < 7.97887 @ 95%CL (1 toyMC)
   68% expected band : 7.97887 < r < 7.97887
   95% expected band : 7.97887 < r < 7.97887
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 754187255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.26765 +/- 0.0139402 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.26765 @ 95%CL (1 toyMC)
median expected limit: r < 8.26765 @ 95%CL (1 toyMC)
   68% expected band : 8.26765 < r < 8.26765
   95% expected band : 8.26765 < r < 8.26765
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1771598755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.59871 +/- 0.0147352 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.59871 @ 95%CL (1 toyMC)
median expected limit: r < 8.59871 @ 95%CL (1 toyMC)
   68% expected band : 8.59871 < r < 8.59871
   95% expected band : 8.59871 < r < 8.59871
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2098727676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6378 +/- 0.0156817 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 10.6378 @ 95%CL (1 toyMC)
median expected limit: r < 10.6378 @ 95%CL (1 toyMC)
   68% expected band : 10.6378 < r < 10.6378
   95% expected band : 10.6378 < r < 10.6378
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1487500175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.65309 +/- 0.017449 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.65309 @ 95%CL (1 toyMC)
median expected limit: r < 8.65309 @ 95%CL (1 toyMC)
   68% expected band : 8.65309 < r < 8.65309
   95% expected band : 8.65309 < r < 8.65309
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -236225684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.31997 +/- 0.0141977 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.31997 @ 95%CL (1 toyMC)
median expected limit: r < 6.31997 @ 95%CL (1 toyMC)
   68% expected band : 6.31997 < r < 6.31997
   95% expected band : 6.31997 < r < 6.31997
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1148581597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.70432 +/- 0.01592 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.70432 @ 95%CL (1 toyMC)
median expected limit: r < 8.70432 @ 95%CL (1 toyMC)
   68% expected band : 8.70432 < r < 8.70432
   95% expected band : 8.70432 < r < 8.70432
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 902144205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1533 +/- 0.0164516 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.1533 @ 95%CL (1 toyMC)
median expected limit: r < 10.1533 @ 95%CL (1 toyMC)
   68% expected band : 10.1533 < r < 10.1533
   95% expected band : 10.1533 < r < 10.1533
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2055231624
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.77254 +/- 0.0173329 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.77254 @ 95%CL (1 toyMC)
median expected limit: r < 7.77254 @ 95%CL (1 toyMC)
   68% expected band : 7.77254 < r < 7.77254
   95% expected band : 7.77254 < r < 7.77254
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2109171477
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.08804 +/- 0.0137015 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.08804 @ 95%CL (1 toyMC)
median expected limit: r < 6.08804 @ 95%CL (1 toyMC)
   68% expected band : 6.08804 < r < 6.08804
   95% expected band : 6.08804 < r < 6.08804
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 234246251
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.6434 +/- 0.00977645 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.6434 @ 95%CL (1 toyMC)
median expected limit: r < 15.6434 @ 95%CL (1 toyMC)
   68% expected band : 15.6434 < r < 15.6434
   95% expected band : 15.6434 < r < 15.6434
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 588580052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.4561 +/- 0.0168762 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.4561 @ 95%CL (1 toyMC)
median expected limit: r < 10.4561 @ 95%CL (1 toyMC)
   68% expected band : 10.4561 < r < 10.4561
   95% expected band : 10.4561 < r < 10.4561
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 43247351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.2244 +/- 0.015337 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.2244 @ 95%CL (1 toyMC)
median expected limit: r < 12.2244 @ 95%CL (1 toyMC)
   68% expected band : 12.2244 < r < 12.2244
   95% expected band : 12.2244 < r < 12.2244
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -31176221
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.2254 +/- 0.0149765 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.2254 @ 95%CL (1 toyMC)
median expected limit: r < 12.2254 @ 95%CL (1 toyMC)
   68% expected band : 12.2254 < r < 12.2254
   95% expected band : 12.2254 < r < 12.2254
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 964466174
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.8649 +/- 0.0122434 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.8649 @ 95%CL (1 toyMC)
median expected limit: r < 6.8649 @ 95%CL (1 toyMC)
   68% expected band : 6.8649 < r < 6.8649
   95% expected band : 6.8649 < r < 6.8649
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -210535739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.57879 +/- 0.0147372 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.57879 @ 95%CL (1 toyMC)
median expected limit: r < 8.57879 @ 95%CL (1 toyMC)
   68% expected band : 8.57879 < r < 8.57879
   95% expected band : 8.57879 < r < 8.57879
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -403517284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.941 +/- 0.0159179 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.941 @ 95%CL (1 toyMC)
median expected limit: r < 6.941 @ 95%CL (1 toyMC)
   68% expected band : 6.941 < r < 6.941
   95% expected band : 6.941 < r < 6.941
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1383899033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.67424 +/- 0.0147199 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.67424 @ 95%CL (1 toyMC)
median expected limit: r < 7.67424 @ 95%CL (1 toyMC)
   68% expected band : 7.67424 < r < 7.67424
   95% expected band : 7.67424 < r < 7.67424
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1741443499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.70608 +/- 0.0149918 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.70608 @ 95%CL (1 toyMC)
median expected limit: r < 8.70608 @ 95%CL (1 toyMC)
   68% expected band : 8.70608 < r < 8.70608
   95% expected band : 8.70608 < r < 8.70608
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1829193508
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.10443 +/- 0.0148622 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.10443 @ 95%CL (1 toyMC)
median expected limit: r < 7.10443 @ 95%CL (1 toyMC)
   68% expected band : 7.10443 < r < 7.10443
   95% expected band : 7.10443 < r < 7.10443
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2021814960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.38773 +/- 0.015098 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.38773 @ 95%CL (1 toyMC)
median expected limit: r < 9.38773 @ 95%CL (1 toyMC)
   68% expected band : 9.38773 < r < 9.38773
   95% expected band : 9.38773 < r < 9.38773
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2074580812
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.49223 +/- 0.0155075 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.49223 @ 95%CL (1 toyMC)
median expected limit: r < 8.49223 @ 95%CL (1 toyMC)
   68% expected band : 8.49223 < r < 8.49223
   95% expected band : 8.49223 < r < 8.49223
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1544994534
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.91205 +/- 0.0158726 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.91205 @ 95%CL (1 toyMC)
median expected limit: r < 7.91205 @ 95%CL (1 toyMC)
   68% expected band : 7.91205 < r < 7.91205
   95% expected band : 7.91205 < r < 7.91205
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1786981463
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.25159 +/- 0.0173593 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.25159 @ 95%CL (1 toyMC)
median expected limit: r < 9.25159 @ 95%CL (1 toyMC)
   68% expected band : 9.25159 < r < 9.25159
   95% expected band : 9.25159 < r < 9.25159
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1598714814
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.12937 +/- 0.0164282 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.12937 @ 95%CL (1 toyMC)
median expected limit: r < 7.12937 @ 95%CL (1 toyMC)
   68% expected band : 7.12937 < r < 7.12937
   95% expected band : 7.12937 < r < 7.12937
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 139602378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.36169 +/- 0.0126286 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.36169 @ 95%CL (1 toyMC)
median expected limit: r < 7.36169 @ 95%CL (1 toyMC)
   68% expected band : 7.36169 < r < 7.36169
   95% expected band : 7.36169 < r < 7.36169
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2087040012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.32338 +/- 0.0140499 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.32338 @ 95%CL (1 toyMC)
median expected limit: r < 7.32338 @ 95%CL (1 toyMC)
   68% expected band : 7.32338 < r < 7.32338
   95% expected band : 7.32338 < r < 7.32338
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -70148967
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.08146 +/- 0.0158197 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.08146 @ 95%CL (1 toyMC)
median expected limit: r < 8.08146 @ 95%CL (1 toyMC)
   68% expected band : 8.08146 < r < 8.08146
   95% expected band : 8.08146 < r < 8.08146
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 250552706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.46792 +/- 0.0153836 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.46792 @ 95%CL (1 toyMC)
median expected limit: r < 6.46792 @ 95%CL (1 toyMC)
   68% expected band : 6.46792 < r < 6.46792
   95% expected band : 6.46792 < r < 6.46792
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 406718242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.4905 +/- 0.0119748 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.4905 @ 95%CL (1 toyMC)
median expected limit: r < 11.4905 @ 95%CL (1 toyMC)
   68% expected band : 11.4905 < r < 11.4905
   95% expected band : 11.4905 < r < 11.4905
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1119189458
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.20714 +/- 0.0138764 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.20714 @ 95%CL (1 toyMC)
median expected limit: r < 9.20714 @ 95%CL (1 toyMC)
   68% expected band : 9.20714 < r < 9.20714
   95% expected band : 9.20714 < r < 9.20714
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 314335894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.15277 +/- 0.0187406 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.15277 @ 95%CL (1 toyMC)
median expected limit: r < 7.15277 @ 95%CL (1 toyMC)
   68% expected band : 7.15277 < r < 7.15277
   95% expected band : 7.15277 < r < 7.15277
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2139374889
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.0192 +/- 0.0169975 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.0192 @ 95%CL (1 toyMC)
median expected limit: r < 12.0192 @ 95%CL (1 toyMC)
   68% expected band : 12.0192 < r < 12.0192
   95% expected band : 12.0192 < r < 12.0192
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1088188379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.23725 +/- 0.0146082 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.23725 @ 95%CL (1 toyMC)
median expected limit: r < 8.23725 @ 95%CL (1 toyMC)
   68% expected band : 8.23725 < r < 8.23725
   95% expected band : 8.23725 < r < 8.23725
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1364475344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.53017 +/- 0.0159617 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.53017 @ 95%CL (1 toyMC)
median expected limit: r < 9.53017 @ 95%CL (1 toyMC)
   68% expected band : 9.53017 < r < 9.53017
   95% expected band : 9.53017 < r < 9.53017
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -89584703
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6066 +/- 0.0147689 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.6066 @ 95%CL (1 toyMC)
median expected limit: r < 10.6066 @ 95%CL (1 toyMC)
   68% expected band : 10.6066 < r < 10.6066
   95% expected band : 10.6066 < r < 10.6066
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 188268437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3131 +/- 0.0166891 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.3131 @ 95%CL (1 toyMC)
median expected limit: r < 10.3131 @ 95%CL (1 toyMC)
   68% expected band : 10.3131 < r < 10.3131
   95% expected band : 10.3131 < r < 10.3131
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1431617121
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.41673 +/- 0.0151858 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.41673 @ 95%CL (1 toyMC)
median expected limit: r < 9.41673 @ 95%CL (1 toyMC)
   68% expected band : 9.41673 < r < 9.41673
   95% expected band : 9.41673 < r < 9.41673
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 671425404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.6972 +/- 0.0138226 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 13.6972 @ 95%CL (1 toyMC)
median expected limit: r < 13.6972 @ 95%CL (1 toyMC)
   68% expected band : 13.6972 < r < 13.6972
   95% expected band : 13.6972 < r < 13.6972
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 42186085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.82944 +/- 0.0152416 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 8.82944 @ 95%CL (1 toyMC)
median expected limit: r < 8.82944 @ 95%CL (1 toyMC)
   68% expected band : 8.82944 < r < 8.82944
   95% expected band : 8.82944 < r < 8.82944
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1720331934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.01403 +/- 0.0120263 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.01403 @ 95%CL (1 toyMC)
median expected limit: r < 7.01403 @ 95%CL (1 toyMC)
   68% expected band : 7.01403 < r < 7.01403
   95% expected band : 7.01403 < r < 7.01403
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -696244959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.59891 +/- 0.0157594 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.59891 @ 95%CL (1 toyMC)
median expected limit: r < 8.59891 @ 95%CL (1 toyMC)
   68% expected band : 8.59891 < r < 8.59891
   95% expected band : 8.59891 < r < 8.59891
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1314829177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.0706 +/- 0.0174654 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.0706 @ 95%CL (1 toyMC)
median expected limit: r < 12.0706 @ 95%CL (1 toyMC)
   68% expected band : 12.0706 < r < 12.0706
   95% expected band : 12.0706 < r < 12.0706
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1466768910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.2633 +/- 0.0176181 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.2633 @ 95%CL (1 toyMC)
median expected limit: r < 11.2633 @ 95%CL (1 toyMC)
   68% expected band : 11.2633 < r < 11.2633
   95% expected band : 11.2633 < r < 11.2633
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -364105902
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.32733 +/- 0.0133079 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.32733 @ 95%CL (1 toyMC)
median expected limit: r < 7.32733 @ 95%CL (1 toyMC)
   68% expected band : 7.32733 < r < 7.32733
   95% expected band : 7.32733 < r < 7.32733
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -681323874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.03318 +/- 0.0144325 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.03318 @ 95%CL (1 toyMC)
median expected limit: r < 7.03318 @ 95%CL (1 toyMC)
   68% expected band : 7.03318 < r < 7.03318
   95% expected band : 7.03318 < r < 7.03318
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1039687079
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.143 +/- 0.0129804 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.143 @ 95%CL (1 toyMC)
median expected limit: r < 15.143 @ 95%CL (1 toyMC)
   68% expected band : 15.143 < r < 15.143
   95% expected band : 15.143 < r < 15.143
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1942682790
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.03752 +/- 0.0138629 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.03752 @ 95%CL (1 toyMC)
median expected limit: r < 9.03752 @ 95%CL (1 toyMC)
   68% expected band : 9.03752 < r < 9.03752
   95% expected band : 9.03752 < r < 9.03752
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2066346746
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.02538 +/- 0.0140217 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.02538 @ 95%CL (1 toyMC)
median expected limit: r < 7.02538 @ 95%CL (1 toyMC)
   68% expected band : 7.02538 < r < 7.02538
   95% expected band : 7.02538 < r < 7.02538
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -855026815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.34373 +/- 0.0156566 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.34373 @ 95%CL (1 toyMC)
median expected limit: r < 8.34373 @ 95%CL (1 toyMC)
   68% expected band : 8.34373 < r < 8.34373
   95% expected band : 8.34373 < r < 8.34373
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1820066086
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.3345 +/- 0.0171272 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.3345 @ 95%CL (1 toyMC)
median expected limit: r < 11.3345 @ 95%CL (1 toyMC)
   68% expected band : 11.3345 < r < 11.3345
   95% expected band : 11.3345 < r < 11.3345
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2135046126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.22826 +/- 0.0151028 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.22826 @ 95%CL (1 toyMC)
median expected limit: r < 9.22826 @ 95%CL (1 toyMC)
   68% expected band : 9.22826 < r < 9.22826
   95% expected band : 9.22826 < r < 9.22826
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -676642902
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.92543 +/- 0.0159503 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.92543 @ 95%CL (1 toyMC)
median expected limit: r < 7.92543 @ 95%CL (1 toyMC)
   68% expected band : 7.92543 < r < 7.92543
   95% expected band : 7.92543 < r < 7.92543
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 482606196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.13308 +/- 0.0149373 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.13308 @ 95%CL (1 toyMC)
median expected limit: r < 7.13308 @ 95%CL (1 toyMC)
   68% expected band : 7.13308 < r < 7.13308
   95% expected band : 7.13308 < r < 7.13308
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1558731874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.9153 +/- 0.0146802 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.9153 @ 95%CL (1 toyMC)
median expected limit: r < 8.9153 @ 95%CL (1 toyMC)
   68% expected band : 8.9153 < r < 8.9153
   95% expected band : 8.9153 < r < 8.9153
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1800075087
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.59236 +/- 0.0157721 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.59236 @ 95%CL (1 toyMC)
median expected limit: r < 7.59236 @ 95%CL (1 toyMC)
   68% expected band : 7.59236 < r < 7.59236
   95% expected band : 7.59236 < r < 7.59236
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1088643310
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9293 +/- 0.0181745 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 10.9293 @ 95%CL (1 toyMC)
median expected limit: r < 10.9293 @ 95%CL (1 toyMC)
   68% expected band : 10.9293 < r < 10.9293
   95% expected band : 10.9293 < r < 10.9293
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1980309743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8383 +/- 0.0187736 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.8383 @ 95%CL (1 toyMC)
median expected limit: r < 10.8383 @ 95%CL (1 toyMC)
   68% expected band : 10.8383 < r < 10.8383
   95% expected band : 10.8383 < r < 10.8383
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1210009590
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.8867 +/- 0.00801046 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 14.8867 @ 95%CL (1 toyMC)
median expected limit: r < 14.8867 @ 95%CL (1 toyMC)
   68% expected band : 14.8867 < r < 14.8867
   95% expected band : 14.8867 < r < 14.8867
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 165022666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.18947 +/- 0.012287 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.18947 @ 95%CL (1 toyMC)
median expected limit: r < 6.18947 @ 95%CL (1 toyMC)
   68% expected band : 6.18947 < r < 6.18947
   95% expected band : 6.18947 < r < 6.18947
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -288038427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.4742 +/- 0.0151442 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.4742 @ 95%CL (1 toyMC)
median expected limit: r < 10.4742 @ 95%CL (1 toyMC)
   68% expected band : 10.4742 < r < 10.4742
   95% expected band : 10.4742 < r < 10.4742
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -123272928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.26638 +/- 0.0153951 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.26638 @ 95%CL (1 toyMC)
median expected limit: r < 7.26638 @ 95%CL (1 toyMC)
   68% expected band : 7.26638 < r < 7.26638
   95% expected band : 7.26638 < r < 7.26638
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -225246098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.42497 +/- 0.0145415 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.42497 @ 95%CL (1 toyMC)
median expected limit: r < 6.42497 @ 95%CL (1 toyMC)
   68% expected band : 6.42497 < r < 6.42497
   95% expected band : 6.42497 < r < 6.42497
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -954574082
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.87019 +/- 0.0193771 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.87019 @ 95%CL (1 toyMC)
median expected limit: r < 8.87019 @ 95%CL (1 toyMC)
   68% expected band : 8.87019 < r < 8.87019
   95% expected band : 8.87019 < r < 8.87019
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 820089367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.55781 +/- 0.0126443 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.55781 @ 95%CL (1 toyMC)
median expected limit: r < 6.55781 @ 95%CL (1 toyMC)
   68% expected band : 6.55781 < r < 6.55781
   95% expected band : 6.55781 < r < 6.55781
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 775490367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.18516 +/- 0.0147875 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.18516 @ 95%CL (1 toyMC)
median expected limit: r < 9.18516 @ 95%CL (1 toyMC)
   68% expected band : 9.18516 < r < 9.18516
   95% expected band : 9.18516 < r < 9.18516
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1452905526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.27025 +/- 0.0101372 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.27025 @ 95%CL (1 toyMC)
median expected limit: r < 6.27025 @ 95%CL (1 toyMC)
   68% expected band : 6.27025 < r < 6.27025
   95% expected band : 6.27025 < r < 6.27025
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -780646865
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.49481 +/- 0.0121436 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.49481 @ 95%CL (1 toyMC)
median expected limit: r < 8.49481 @ 95%CL (1 toyMC)
   68% expected band : 8.49481 < r < 8.49481
   95% expected band : 8.49481 < r < 8.49481
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 51085803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.8455 +/- 0.0170504 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.8455 @ 95%CL (1 toyMC)
median expected limit: r < 7.8455 @ 95%CL (1 toyMC)
   68% expected band : 7.8455 < r < 7.8455
   95% expected band : 7.8455 < r < 7.8455
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1011038679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.82555 +/- 0.0130452 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.82555 @ 95%CL (1 toyMC)
median expected limit: r < 7.82555 @ 95%CL (1 toyMC)
   68% expected band : 7.82555 < r < 7.82555
   95% expected band : 7.82555 < r < 7.82555
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1804403579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.9915 +/- 0.0164644 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.9915 @ 95%CL (1 toyMC)
median expected limit: r < 9.9915 @ 95%CL (1 toyMC)
   68% expected band : 9.9915 < r < 9.9915
   95% expected band : 9.9915 < r < 9.9915
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 263523896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.01259 +/- 0.0160352 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.01259 @ 95%CL (1 toyMC)
median expected limit: r < 9.01259 @ 95%CL (1 toyMC)
   68% expected band : 9.01259 < r < 9.01259
   95% expected band : 9.01259 < r < 9.01259
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1378651666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.31802 +/- 0.0167098 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.31802 @ 95%CL (1 toyMC)
median expected limit: r < 8.31802 @ 95%CL (1 toyMC)
   68% expected band : 8.31802 < r < 8.31802
   95% expected band : 8.31802 < r < 8.31802
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 38239783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.95678 +/- 0.0149544 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.95678 @ 95%CL (1 toyMC)
median expected limit: r < 7.95678 @ 95%CL (1 toyMC)
   68% expected band : 7.95678 < r < 7.95678
   95% expected band : 7.95678 < r < 7.95678
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1802178981
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.87802 +/- 0.0166657 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.87802 @ 95%CL (1 toyMC)
median expected limit: r < 8.87802 @ 95%CL (1 toyMC)
   68% expected band : 8.87802 < r < 8.87802
   95% expected band : 8.87802 < r < 8.87802
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -525192265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.12649 +/- 0.0153275 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.12649 @ 95%CL (1 toyMC)
median expected limit: r < 9.12649 @ 95%CL (1 toyMC)
   68% expected band : 9.12649 < r < 9.12649
   95% expected band : 9.12649 < r < 9.12649
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2050397521
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.42382 +/- 0.0128784 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.42382 @ 95%CL (1 toyMC)
median expected limit: r < 6.42382 @ 95%CL (1 toyMC)
   68% expected band : 6.42382 < r < 6.42382
   95% expected band : 6.42382 < r < 6.42382
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1695127218
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.99798 +/- 0.0155318 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.99798 @ 95%CL (1 toyMC)
median expected limit: r < 7.99798 @ 95%CL (1 toyMC)
   68% expected band : 7.99798 < r < 7.99798
   95% expected band : 7.99798 < r < 7.99798
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1559503877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.77346 +/- 0.0175025 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.77346 @ 95%CL (1 toyMC)
median expected limit: r < 8.77346 @ 95%CL (1 toyMC)
   68% expected band : 8.77346 < r < 8.77346
   95% expected band : 8.77346 < r < 8.77346
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1736073000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.7682 +/- 0.0180421 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.7682 @ 95%CL (1 toyMC)
median expected limit: r < 10.7682 @ 95%CL (1 toyMC)
   68% expected band : 10.7682 < r < 10.7682
   95% expected band : 10.7682 < r < 10.7682
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1966506932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.35455 +/- 0.0161647 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.35455 @ 95%CL (1 toyMC)
median expected limit: r < 7.35455 @ 95%CL (1 toyMC)
   68% expected band : 7.35455 < r < 7.35455
   95% expected band : 7.35455 < r < 7.35455
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1277226730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.17378 +/- 0.0149168 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.17378 @ 95%CL (1 toyMC)
median expected limit: r < 7.17378 @ 95%CL (1 toyMC)
   68% expected band : 7.17378 < r < 7.17378
   95% expected band : 7.17378 < r < 7.17378
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -574125591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.5879 +/- 0.0154548 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 12.5879 @ 95%CL (1 toyMC)
median expected limit: r < 12.5879 @ 95%CL (1 toyMC)
   68% expected band : 12.5879 < r < 12.5879
   95% expected band : 12.5879 < r < 12.5879
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1888061515
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.0318 +/- 0.0124661 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 15.0318 @ 95%CL (1 toyMC)
median expected limit: r < 15.0318 @ 95%CL (1 toyMC)
   68% expected band : 15.0318 < r < 15.0318
   95% expected band : 15.0318 < r < 15.0318
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1011038679.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1022942975.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1088188379.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1093464275.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1119189458.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1210009590.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-123272928.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1277226730.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1314829177.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1342671384.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1351726819.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1421201840.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1431617121.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1440020233.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1452905526.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1466768910.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1487500175.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1559503877.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1695127218.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1715995968.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1720331934.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1736073000.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1771598755.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1804403579.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1820066086.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-1942682790.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-2021814960.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-2050397521.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-2055231624.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-210535739.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-2109171477.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-2135046126.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-225246098.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-236225684.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-288038427.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-31176221.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-364105902.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-403517284.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-467248660.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-525192265.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-574125591.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-676642902.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-681323874.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-696244959.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-70148967.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-780646865.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-855026815.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.-89584703.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.-954574082.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1039687079.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1087663214.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1088643310.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1148581597.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1239162536.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1364475344.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1378651666.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1383899033.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.139602378.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1544994534.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1558731874.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1598714814.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.165022666.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1741443499.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1786981463.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1800075087.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1800433810.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1802178981.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1829193508.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1873768114.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.188268437.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1888061515.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.19575920.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1966506932.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1980309743.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.2066346746.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.2074580812.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.2087040012.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.2098727676.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.2105842974.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.2139374889.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.234246251.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.250552706.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.263523896.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.286025212.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.314335894.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.38239783.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.400883676.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.406718242.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.42186085.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.43247351.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.482606196.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.51085803.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.588580052.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.606030599.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.671425404.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.754187255.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.775490367.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.820089367.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.902144205.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.964466174.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1956953384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.94298 +/- 0.0160602 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.94298 @ 95%CL (1 toyMC)
median expected limit: r < 6.94298 @ 95%CL (1 toyMC)
   68% expected band : 6.94298 < r < 6.94298
   95% expected band : 6.94298 < r < 6.94298
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -3128601
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.2117 +/- 0.0153434 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.2117 @ 95%CL (1 toyMC)
median expected limit: r < 11.2117 @ 95%CL (1 toyMC)
   68% expected band : 11.2117 < r < 11.2117
   95% expected band : 11.2117 < r < 11.2117
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1025153529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.30759 +/- 0.015019 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.30759 @ 95%CL (1 toyMC)
median expected limit: r < 8.30759 @ 95%CL (1 toyMC)
   68% expected band : 8.30759 < r < 8.30759
   95% expected band : 8.30759 < r < 8.30759
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 72016609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.207 +/- 0.0120547 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.207 @ 95%CL (1 toyMC)
median expected limit: r < 9.207 @ 95%CL (1 toyMC)
   68% expected band : 9.207 < r < 9.207
   95% expected band : 9.207 < r < 9.207
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1072320284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.3856 +/- 0.0125902 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.3856 @ 95%CL (1 toyMC)
median expected limit: r < 15.3856 @ 95%CL (1 toyMC)
   68% expected band : 15.3856 < r < 15.3856
   95% expected band : 15.3856 < r < 15.3856
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1014361826
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.10837 +/- 0.014538 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.10837 @ 95%CL (1 toyMC)
median expected limit: r < 7.10837 @ 95%CL (1 toyMC)
   68% expected band : 7.10837 < r < 7.10837
   95% expected band : 7.10837 < r < 7.10837
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 554348477
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.563 +/- 0.013452 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 10.563 @ 95%CL (1 toyMC)
median expected limit: r < 10.563 @ 95%CL (1 toyMC)
   68% expected band : 10.563 < r < 10.563
   95% expected band : 10.563 < r < 10.563
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1545846348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.0573 +/- 0.010423 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 16.0573 @ 95%CL (1 toyMC)
median expected limit: r < 16.0573 @ 95%CL (1 toyMC)
   68% expected band : 16.0573 < r < 16.0573
   95% expected band : 16.0573 < r < 16.0573
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1459402929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.5247 +/- 0.0130161 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 14.5247 @ 95%CL (1 toyMC)
median expected limit: r < 14.5247 @ 95%CL (1 toyMC)
   68% expected band : 14.5247 < r < 14.5247
   95% expected band : 14.5247 < r < 14.5247
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 625118951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.32247 +/- 0.0175823 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.32247 @ 95%CL (1 toyMC)
median expected limit: r < 9.32247 @ 95%CL (1 toyMC)
   68% expected band : 9.32247 < r < 9.32247
   95% expected band : 9.32247 < r < 9.32247
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1586224243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.12904 +/- 0.0136563 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.12904 @ 95%CL (1 toyMC)
median expected limit: r < 7.12904 @ 95%CL (1 toyMC)
   68% expected band : 7.12904 < r < 7.12904
   95% expected band : 7.12904 < r < 7.12904
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 695722277
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.85382 +/- 0.0123497 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.85382 @ 95%CL (1 toyMC)
median expected limit: r < 6.85382 @ 95%CL (1 toyMC)
   68% expected band : 6.85382 < r < 6.85382
   95% expected band : 6.85382 < r < 6.85382
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -129974832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.68735 +/- 0.0152154 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.68735 @ 95%CL (1 toyMC)
median expected limit: r < 7.68735 @ 95%CL (1 toyMC)
   68% expected band : 7.68735 < r < 7.68735
   95% expected band : 7.68735 < r < 7.68735
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1369866320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.31839 +/- 0.0134581 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.31839 @ 95%CL (1 toyMC)
median expected limit: r < 7.31839 @ 95%CL (1 toyMC)
   68% expected band : 7.31839 < r < 7.31839
   95% expected band : 7.31839 < r < 7.31839
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 499953473
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.5914 +/- 0.0110987 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 13.5914 @ 95%CL (1 toyMC)
median expected limit: r < 13.5914 @ 95%CL (1 toyMC)
   68% expected band : 13.5914 < r < 13.5914
   95% expected band : 13.5914 < r < 13.5914
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 716047854
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6052 +/- 0.0185572 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 11.6052 @ 95%CL (1 toyMC)
median expected limit: r < 11.6052 @ 95%CL (1 toyMC)
   68% expected band : 11.6052 < r < 11.6052
   95% expected band : 11.6052 < r < 11.6052
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1588137252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.33874 +/- 0.015459 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.33874 @ 95%CL (1 toyMC)
median expected limit: r < 7.33874 @ 95%CL (1 toyMC)
   68% expected band : 7.33874 < r < 7.33874
   95% expected band : 7.33874 < r < 7.33874
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 102730691
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.32797 +/- 0.0132379 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.32797 @ 95%CL (1 toyMC)
median expected limit: r < 6.32797 @ 95%CL (1 toyMC)
   68% expected band : 6.32797 < r < 6.32797
   95% expected band : 6.32797 < r < 6.32797
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2028491050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.019 +/- 0.0131603 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.019 @ 95%CL (1 toyMC)
median expected limit: r < 15.019 @ 95%CL (1 toyMC)
   68% expected band : 15.019 < r < 15.019
   95% expected band : 15.019 < r < 15.019
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1312924523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.48252 +/- 0.0154318 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.48252 @ 95%CL (1 toyMC)
median expected limit: r < 6.48252 @ 95%CL (1 toyMC)
   68% expected band : 6.48252 < r < 6.48252
   95% expected band : 6.48252 < r < 6.48252
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1980341954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.42362 +/- 0.0122217 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.42362 @ 95%CL (1 toyMC)
median expected limit: r < 6.42362 @ 95%CL (1 toyMC)
   68% expected band : 6.42362 < r < 6.42362
   95% expected band : 6.42362 < r < 6.42362
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2044015279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.2188 +/- 0.0155152 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.2188 @ 95%CL (1 toyMC)
median expected limit: r < 13.2188 @ 95%CL (1 toyMC)
   68% expected band : 13.2188 < r < 13.2188
   95% expected band : 13.2188 < r < 13.2188
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1172089896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.768 +/- 0.010285 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 13.768 @ 95%CL (1 toyMC)
median expected limit: r < 13.768 @ 95%CL (1 toyMC)
   68% expected band : 13.768 < r < 13.768
   95% expected band : 13.768 < r < 13.768
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1392592646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.11061 +/- 0.012025 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.11061 @ 95%CL (1 toyMC)
median expected limit: r < 6.11061 @ 95%CL (1 toyMC)
   68% expected band : 6.11061 < r < 6.11061
   95% expected band : 6.11061 < r < 6.11061
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1404826617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.2096 +/- 0.0163406 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.2096 @ 95%CL (1 toyMC)
median expected limit: r < 12.2096 @ 95%CL (1 toyMC)
   68% expected band : 12.2096 < r < 12.2096
   95% expected band : 12.2096 < r < 12.2096
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1014804768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.42571 +/- 0.0152238 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.42571 @ 95%CL (1 toyMC)
median expected limit: r < 9.42571 @ 95%CL (1 toyMC)
   68% expected band : 9.42571 < r < 9.42571
   95% expected band : 9.42571 < r < 9.42571
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -452372451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.14146 +/- 0.0142713 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.14146 @ 95%CL (1 toyMC)
median expected limit: r < 7.14146 @ 95%CL (1 toyMC)
   68% expected band : 7.14146 < r < 7.14146
   95% expected band : 7.14146 < r < 7.14146
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1320116664
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.11381 +/- 0.0136028 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.11381 @ 95%CL (1 toyMC)
median expected limit: r < 6.11381 @ 95%CL (1 toyMC)
   68% expected band : 6.11381 < r < 6.11381
   95% expected band : 6.11381 < r < 6.11381
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -118471081
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.70678 +/- 0.0123098 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.70678 @ 95%CL (1 toyMC)
median expected limit: r < 6.70678 @ 95%CL (1 toyMC)
   68% expected band : 6.70678 < r < 6.70678
   95% expected band : 6.70678 < r < 6.70678
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1782856213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.10362 +/- 0.0136653 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.10362 @ 95%CL (1 toyMC)
median expected limit: r < 6.10362 @ 95%CL (1 toyMC)
   68% expected band : 6.10362 < r < 6.10362
   95% expected band : 6.10362 < r < 6.10362
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 934682167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.231 +/- 0.0149894 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.231 @ 95%CL (1 toyMC)
median expected limit: r < 11.231 @ 95%CL (1 toyMC)
   68% expected band : 11.231 < r < 11.231
   95% expected band : 11.231 < r < 11.231
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1940416291
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.99726 +/- 0.0139201 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.99726 @ 95%CL (1 toyMC)
median expected limit: r < 8.99726 @ 95%CL (1 toyMC)
   68% expected band : 8.99726 < r < 8.99726
   95% expected band : 8.99726 < r < 8.99726
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -81953357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.1057 +/- 0.0143383 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.1057 @ 95%CL (1 toyMC)
median expected limit: r < 13.1057 @ 95%CL (1 toyMC)
   68% expected band : 13.1057 < r < 13.1057
   95% expected band : 13.1057 < r < 13.1057
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 452132681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.79207 +/- 0.0144125 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.79207 @ 95%CL (1 toyMC)
median expected limit: r < 7.79207 @ 95%CL (1 toyMC)
   68% expected band : 7.79207 < r < 7.79207
   95% expected band : 7.79207 < r < 7.79207
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 604096892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.61694 +/- 0.0134535 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.61694 @ 95%CL (1 toyMC)
median expected limit: r < 7.61694 @ 95%CL (1 toyMC)
   68% expected band : 7.61694 < r < 7.61694
   95% expected band : 7.61694 < r < 7.61694
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1071004244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.91515 +/- 0.016337 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.91515 @ 95%CL (1 toyMC)
median expected limit: r < 6.91515 @ 95%CL (1 toyMC)
   68% expected band : 6.91515 < r < 6.91515
   95% expected band : 6.91515 < r < 6.91515
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 402472550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.49686 +/- 0.0160028 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.49686 @ 95%CL (1 toyMC)
median expected limit: r < 7.49686 @ 95%CL (1 toyMC)
   68% expected band : 7.49686 < r < 7.49686
   95% expected band : 7.49686 < r < 7.49686
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1048018367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.66161 +/- 0.0157707 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.66161 @ 95%CL (1 toyMC)
median expected limit: r < 7.66161 @ 95%CL (1 toyMC)
   68% expected band : 7.66161 < r < 7.66161
   95% expected band : 7.66161 < r < 7.66161
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -384676999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.1509 +/- 0.0130434 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 11.1509 @ 95%CL (1 toyMC)
median expected limit: r < 11.1509 @ 95%CL (1 toyMC)
   68% expected band : 11.1509 < r < 11.1509
   95% expected band : 11.1509 < r < 11.1509
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1184229815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.2977 +/- 0.0131024 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 14.2977 @ 95%CL (1 toyMC)
median expected limit: r < 14.2977 @ 95%CL (1 toyMC)
   68% expected band : 14.2977 < r < 14.2977
   95% expected band : 14.2977 < r < 14.2977
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1172065232
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.18134 +/- 0.0125307 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.18134 @ 95%CL (1 toyMC)
median expected limit: r < 6.18134 @ 95%CL (1 toyMC)
   68% expected band : 6.18134 < r < 6.18134
   95% expected band : 6.18134 < r < 6.18134
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 474744382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.69947 +/- 0.0114337 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.69947 @ 95%CL (1 toyMC)
median expected limit: r < 7.69947 @ 95%CL (1 toyMC)
   68% expected band : 7.69947 < r < 7.69947
   95% expected band : 7.69947 < r < 7.69947
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1703548562
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.41059 +/- 0.0120074 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.41059 @ 95%CL (1 toyMC)
median expected limit: r < 7.41059 @ 95%CL (1 toyMC)
   68% expected band : 7.41059 < r < 7.41059
   95% expected band : 7.41059 < r < 7.41059
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 411758741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.1226 +/- 0.0158392 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.1226 @ 95%CL (1 toyMC)
median expected limit: r < 11.1226 @ 95%CL (1 toyMC)
   68% expected band : 11.1226 < r < 11.1226
   95% expected band : 11.1226 < r < 11.1226
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1308812111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.77891 +/- 0.015975 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.77891 @ 95%CL (1 toyMC)
median expected limit: r < 6.77891 @ 95%CL (1 toyMC)
   68% expected band : 6.77891 < r < 6.77891
   95% expected band : 6.77891 < r < 6.77891
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1095222579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.49029 +/- 0.0165434 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.49029 @ 95%CL (1 toyMC)
median expected limit: r < 7.49029 @ 95%CL (1 toyMC)
   68% expected band : 7.49029 < r < 7.49029
   95% expected band : 7.49029 < r < 7.49029
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1535909886
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.0517 +/- 0.0111049 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 15.0517 @ 95%CL (1 toyMC)
median expected limit: r < 15.0517 @ 95%CL (1 toyMC)
   68% expected band : 15.0517 < r < 15.0517
   95% expected band : 15.0517 < r < 15.0517
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -229299634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.5582 +/- 0.0151402 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 11.5582 @ 95%CL (1 toyMC)
median expected limit: r < 11.5582 @ 95%CL (1 toyMC)
   68% expected band : 11.5582 < r < 11.5582
   95% expected band : 11.5582 < r < 11.5582
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 621552541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6662 +/- 0.0145147 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 11.6662 @ 95%CL (1 toyMC)
median expected limit: r < 11.6662 @ 95%CL (1 toyMC)
   68% expected band : 11.6662 < r < 11.6662
   95% expected band : 11.6662 < r < 11.6662
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1112914392
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.77256 +/- 0.0112777 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.77256 @ 95%CL (1 toyMC)
median expected limit: r < 6.77256 @ 95%CL (1 toyMC)
   68% expected band : 6.77256 < r < 6.77256
   95% expected band : 6.77256 < r < 6.77256
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1685984791
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.96564 +/- 0.0112621 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 5.96564 @ 95%CL (1 toyMC)
median expected limit: r < 5.96564 @ 95%CL (1 toyMC)
   68% expected band : 5.96564 < r < 5.96564
   95% expected band : 5.96564 < r < 5.96564
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1109480968
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.86184 +/- 0.0137566 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.86184 @ 95%CL (1 toyMC)
median expected limit: r < 8.86184 @ 95%CL (1 toyMC)
   68% expected band : 8.86184 < r < 8.86184
   95% expected band : 8.86184 < r < 8.86184
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -456393980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.46064 +/- 0.0152112 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.46064 @ 95%CL (1 toyMC)
median expected limit: r < 8.46064 @ 95%CL (1 toyMC)
   68% expected band : 8.46064 < r < 8.46064
   95% expected band : 8.46064 < r < 8.46064
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1252418107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.24062 +/- 0.0122759 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.24062 @ 95%CL (1 toyMC)
median expected limit: r < 8.24062 @ 95%CL (1 toyMC)
   68% expected band : 8.24062 < r < 8.24062
   95% expected band : 8.24062 < r < 8.24062
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1606158859
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.13419 +/- 0.0123911 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.13419 @ 95%CL (1 toyMC)
median expected limit: r < 6.13419 @ 95%CL (1 toyMC)
   68% expected band : 6.13419 < r < 6.13419
   95% expected band : 6.13419 < r < 6.13419
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1963748507
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.81392 +/- 0.015117 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.81392 @ 95%CL (1 toyMC)
median expected limit: r < 8.81392 @ 95%CL (1 toyMC)
   68% expected band : 8.81392 < r < 8.81392
   95% expected band : 8.81392 < r < 8.81392
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1317497288
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.5408 +/- 0.0178801 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.5408 @ 95%CL (1 toyMC)
median expected limit: r < 10.5408 @ 95%CL (1 toyMC)
   68% expected band : 10.5408 < r < 10.5408
   95% expected band : 10.5408 < r < 10.5408
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 204798787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.2253 +/- 0.0129711 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.2253 @ 95%CL (1 toyMC)
median expected limit: r < 12.2253 @ 95%CL (1 toyMC)
   68% expected band : 12.2253 < r < 12.2253
   95% expected band : 12.2253 < r < 12.2253
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 721947439
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0431 +/- 0.0156867 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 11.0431 @ 95%CL (1 toyMC)
median expected limit: r < 11.0431 @ 95%CL (1 toyMC)
   68% expected band : 11.0431 < r < 11.0431
   95% expected band : 11.0431 < r < 11.0431
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 88999715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.19871 +/- 0.0151672 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.19871 @ 95%CL (1 toyMC)
median expected limit: r < 6.19871 @ 95%CL (1 toyMC)
   68% expected band : 6.19871 < r < 6.19871
   95% expected band : 6.19871 < r < 6.19871
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1948130207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.2016 +/- 0.0142182 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.2016 @ 95%CL (1 toyMC)
median expected limit: r < 11.2016 @ 95%CL (1 toyMC)
   68% expected band : 11.2016 < r < 11.2016
   95% expected band : 11.2016 < r < 11.2016
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1546713930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6391 +/- 0.0149056 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.6391 @ 95%CL (1 toyMC)
median expected limit: r < 10.6391 @ 95%CL (1 toyMC)
   68% expected band : 10.6391 < r < 10.6391
   95% expected band : 10.6391 < r < 10.6391
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1565717089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.39507 +/- 0.0137954 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.39507 @ 95%CL (1 toyMC)
median expected limit: r < 8.39507 @ 95%CL (1 toyMC)
   68% expected band : 8.39507 < r < 8.39507
   95% expected band : 8.39507 < r < 8.39507
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 46859451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.5662 +/- 0.0114837 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 14.5662 @ 95%CL (1 toyMC)
median expected limit: r < 14.5662 @ 95%CL (1 toyMC)
   68% expected band : 14.5662 < r < 14.5662
   95% expected band : 14.5662 < r < 14.5662
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1704266838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.5051 +/- 0.0128184 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 13.5051 @ 95%CL (1 toyMC)
median expected limit: r < 13.5051 @ 95%CL (1 toyMC)
   68% expected band : 13.5051 < r < 13.5051
   95% expected band : 13.5051 < r < 13.5051
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -479708900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.42077 +/- 0.0136553 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.42077 @ 95%CL (1 toyMC)
median expected limit: r < 9.42077 @ 95%CL (1 toyMC)
   68% expected band : 9.42077 < r < 9.42077
   95% expected band : 9.42077 < r < 9.42077
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1937585870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9727 +/- 0.0163402 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 10.9727 @ 95%CL (1 toyMC)
median expected limit: r < 10.9727 @ 95%CL (1 toyMC)
   68% expected band : 10.9727 < r < 10.9727
   95% expected band : 10.9727 < r < 10.9727
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -283535558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.2155 +/- 0.0117644 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.2155 @ 95%CL (1 toyMC)
median expected limit: r < 6.2155 @ 95%CL (1 toyMC)
   68% expected band : 6.2155 < r < 6.2155
   95% expected band : 6.2155 < r < 6.2155
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1773101697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.4281 +/- 0.0185451 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.4281 @ 95%CL (1 toyMC)
median expected limit: r < 10.4281 @ 95%CL (1 toyMC)
   68% expected band : 10.4281 < r < 10.4281
   95% expected band : 10.4281 < r < 10.4281
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -841702653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.5673 +/- 0.0180272 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 12.5673 @ 95%CL (1 toyMC)
median expected limit: r < 12.5673 @ 95%CL (1 toyMC)
   68% expected band : 12.5673 < r < 12.5673
   95% expected band : 12.5673 < r < 12.5673
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1790718697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.39794 +/- 0.0162139 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.39794 @ 95%CL (1 toyMC)
median expected limit: r < 8.39794 @ 95%CL (1 toyMC)
   68% expected band : 8.39794 < r < 8.39794
   95% expected band : 8.39794 < r < 8.39794
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1864538206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.60478 +/- 0.0151196 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.60478 @ 95%CL (1 toyMC)
median expected limit: r < 6.60478 @ 95%CL (1 toyMC)
   68% expected band : 6.60478 < r < 6.60478
   95% expected band : 6.60478 < r < 6.60478
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 312601320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.223 +/- 0.0128874 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.223 @ 95%CL (1 toyMC)
median expected limit: r < 7.223 @ 95%CL (1 toyMC)
   68% expected band : 7.223 < r < 7.223
   95% expected band : 7.223 < r < 7.223
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1246380977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.1789 +/- 0.0132593 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 13.1789 @ 95%CL (1 toyMC)
median expected limit: r < 13.1789 @ 95%CL (1 toyMC)
   68% expected band : 13.1789 < r < 13.1789
   95% expected band : 13.1789 < r < 13.1789
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1598743547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.03135 +/- 0.0148584 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.03135 @ 95%CL (1 toyMC)
median expected limit: r < 8.03135 @ 95%CL (1 toyMC)
   68% expected band : 8.03135 < r < 8.03135
   95% expected band : 8.03135 < r < 8.03135
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1207386370
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.58579 +/- 0.0118208 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.58579 @ 95%CL (1 toyMC)
median expected limit: r < 7.58579 @ 95%CL (1 toyMC)
   68% expected band : 7.58579 < r < 7.58579
   95% expected band : 7.58579 < r < 7.58579
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 225578183
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.5302 +/- 0.0156001 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.5302 @ 95%CL (1 toyMC)
median expected limit: r < 10.5302 @ 95%CL (1 toyMC)
   68% expected band : 10.5302 < r < 10.5302
   95% expected band : 10.5302 < r < 10.5302
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1125676826
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.19064 +/- 0.0177676 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.19064 @ 95%CL (1 toyMC)
median expected limit: r < 9.19064 @ 95%CL (1 toyMC)
   68% expected band : 9.19064 < r < 9.19064
   95% expected band : 9.19064 < r < 9.19064
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 604521581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.05919 +/- 0.0170701 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.05919 @ 95%CL (1 toyMC)
median expected limit: r < 9.05919 @ 95%CL (1 toyMC)
   68% expected band : 9.05919 < r < 9.05919
   95% expected band : 9.05919 < r < 9.05919
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2059547698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.18819 +/- 0.0114281 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.18819 @ 95%CL (1 toyMC)
median expected limit: r < 6.18819 @ 95%CL (1 toyMC)
   68% expected band : 6.18819 < r < 6.18819
   95% expected band : 6.18819 < r < 6.18819
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1310355191
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.60601 +/- 0.017065 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.60601 @ 95%CL (1 toyMC)
median expected limit: r < 7.60601 @ 95%CL (1 toyMC)
   68% expected band : 7.60601 < r < 7.60601
   95% expected band : 7.60601 < r < 7.60601
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1405187294
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.12501 +/- 0.0131105 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.12501 @ 95%CL (1 toyMC)
median expected limit: r < 6.12501 @ 95%CL (1 toyMC)
   68% expected band : 6.12501 < r < 6.12501
   95% expected band : 6.12501 < r < 6.12501
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 603787095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.21335 +/- 0.0156214 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.21335 @ 95%CL (1 toyMC)
median expected limit: r < 7.21335 @ 95%CL (1 toyMC)
   68% expected band : 7.21335 < r < 7.21335
   95% expected band : 7.21335 < r < 7.21335
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1723912357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.1711 +/- 0.0153197 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.1711 @ 95%CL (1 toyMC)
median expected limit: r < 12.1711 @ 95%CL (1 toyMC)
   68% expected band : 12.1711 < r < 12.1711
   95% expected band : 12.1711 < r < 12.1711
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -931191462
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.98508 +/- 0.0156015 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.98508 @ 95%CL (1 toyMC)
median expected limit: r < 9.98508 @ 95%CL (1 toyMC)
   68% expected band : 9.98508 < r < 9.98508
   95% expected band : 9.98508 < r < 9.98508
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2045907065
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.302 +/- 0.0142399 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.302 @ 95%CL (1 toyMC)
median expected limit: r < 12.302 @ 95%CL (1 toyMC)
   68% expected band : 12.302 < r < 12.302
   95% expected band : 12.302 < r < 12.302
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1133225274
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.93548 +/- 0.0166307 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.93548 @ 95%CL (1 toyMC)
median expected limit: r < 6.93548 @ 95%CL (1 toyMC)
   68% expected band : 6.93548 < r < 6.93548
   95% expected band : 6.93548 < r < 6.93548
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -642133631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.38936 +/- 0.0174097 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.38936 @ 95%CL (1 toyMC)
median expected limit: r < 8.38936 @ 95%CL (1 toyMC)
   68% expected band : 8.38936 < r < 8.38936
   95% expected band : 8.38936 < r < 8.38936
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1779463934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.67909 +/- 0.0133113 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.67909 @ 95%CL (1 toyMC)
median expected limit: r < 6.67909 @ 95%CL (1 toyMC)
   68% expected band : 6.67909 < r < 6.67909
   95% expected band : 6.67909 < r < 6.67909
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 182570595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.86316 +/- 0.0137322 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.86316 @ 95%CL (1 toyMC)
median expected limit: r < 9.86316 @ 95%CL (1 toyMC)
   68% expected band : 9.86316 < r < 9.86316
   95% expected band : 9.86316 < r < 9.86316
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1035954657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.3097 +/- 0.0146367 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.3097 @ 95%CL (1 toyMC)
median expected limit: r < 6.3097 @ 95%CL (1 toyMC)
   68% expected band : 6.3097 < r < 6.3097
   95% expected band : 6.3097 < r < 6.3097
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2103326616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.67083 +/- 0.0154959 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.67083 @ 95%CL (1 toyMC)
median expected limit: r < 7.67083 @ 95%CL (1 toyMC)
   68% expected band : 7.67083 < r < 7.67083
   95% expected band : 7.67083 < r < 7.67083
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1042133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.46077 +/- 0.0160682 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.46077 @ 95%CL (1 toyMC)
median expected limit: r < 7.46077 @ 95%CL (1 toyMC)
   68% expected band : 7.46077 < r < 7.46077
   95% expected band : 7.46077 < r < 7.46077
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1266619044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.86417 +/- 0.0178907 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.86417 @ 95%CL (1 toyMC)
median expected limit: r < 8.86417 @ 95%CL (1 toyMC)
   68% expected band : 8.86417 < r < 8.86417
   95% expected band : 8.86417 < r < 8.86417
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 540241514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6323 +/- 0.0147606 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.6323 @ 95%CL (1 toyMC)
median expected limit: r < 10.6323 @ 95%CL (1 toyMC)
   68% expected band : 10.6323 < r < 10.6323
   95% expected band : 10.6323 < r < 10.6323
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -898447620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1521 +/- 0.0180112 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.1521 @ 95%CL (1 toyMC)
median expected limit: r < 10.1521 @ 95%CL (1 toyMC)
   68% expected band : 10.1521 < r < 10.1521
   95% expected band : 10.1521 < r < 10.1521
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 306174985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.34041 +/- 0.0135029 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.34041 @ 95%CL (1 toyMC)
median expected limit: r < 8.34041 @ 95%CL (1 toyMC)
   68% expected band : 8.34041 < r < 8.34041
   95% expected band : 8.34041 < r < 8.34041
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 518216556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.75835 +/- 0.0140218 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.75835 @ 95%CL (1 toyMC)
median expected limit: r < 6.75835 @ 95%CL (1 toyMC)
   68% expected band : 6.75835 < r < 6.75835
   95% expected band : 6.75835 < r < 6.75835
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1874401588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.85062 +/- 0.0181826 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.85062 @ 95%CL (1 toyMC)
median expected limit: r < 8.85062 @ 95%CL (1 toyMC)
   68% expected band : 8.85062 < r < 8.85062
   95% expected band : 8.85062 < r < 8.85062
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 337039738
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.5509 +/- 0.0110035 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 14.5509 @ 95%CL (1 toyMC)
median expected limit: r < 14.5509 @ 95%CL (1 toyMC)
   68% expected band : 14.5509 < r < 14.5509
   95% expected band : 14.5509 < r < 14.5509
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1014361826.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1035954657.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1071004244.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1112914392.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1125676826.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1172089896.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-118471081.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1266619044.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-129974832.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1308812111.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1312924523.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1404826617.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1545846348.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1586224243.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1598743547.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1606158859.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1685984791.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1704266838.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1723912357.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1779463934.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1782856213.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1864538206.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1937585870.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1948130207.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1956953384.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-2044015279.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-2045907065.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-2059547698.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-229299634.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-283535558.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-3128601.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-384676999.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-452372451.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-456393980.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-479708900.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-642133631.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-81953357.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-841702653.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-898447620.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-931191462.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.1014804768.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.1025153529.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.102730691.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.1042133.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.1048018367.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.1072320284.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.1095222579.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.1109480968.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1133225274.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1172065232.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1184229815.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1207386370.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1246380977.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1252418107.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1310355191.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1317497288.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1320116664.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1369866320.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1392592646.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1405187294.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1459402929.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1535909886.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1546713930.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1565717089.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1588137252.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1703548562.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1773101697.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1790718697.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.182570595.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1874401588.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1940416291.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1963748507.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1980341954.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.2028491050.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.204798787.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.2103326616.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.225578183.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.306174985.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.312601320.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.337039738.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.402472550.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.411758741.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.452132681.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.46859451.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.474744382.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.499953473.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.518216556.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.540241514.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.554348477.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.603787095.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.604096892.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.604521581.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.621552541.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.625118951.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.695722277.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.716047854.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.72016609.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.721947439.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.88999715.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.934682167.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1985557834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.46254 +/- 0.0170116 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.46254 @ 95%CL (1 toyMC)
median expected limit: r < 8.46254 @ 95%CL (1 toyMC)
   68% expected band : 8.46254 < r < 8.46254
   95% expected band : 8.46254 < r < 8.46254
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1365499869
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.73837 +/- 0.0124207 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.73837 @ 95%CL (1 toyMC)
median expected limit: r < 7.73837 @ 95%CL (1 toyMC)
   68% expected band : 7.73837 < r < 7.73837
   95% expected band : 7.73837 < r < 7.73837
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1365049904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.14197 +/- 0.0194463 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.14197 @ 95%CL (1 toyMC)
median expected limit: r < 8.14197 @ 95%CL (1 toyMC)
   68% expected band : 8.14197 < r < 8.14197
   95% expected band : 8.14197 < r < 8.14197
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 482581216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.7784 +/- 0.0142874 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 14.7784 @ 95%CL (1 toyMC)
median expected limit: r < 14.7784 @ 95%CL (1 toyMC)
   68% expected band : 14.7784 < r < 14.7784
   95% expected band : 14.7784 < r < 14.7784
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 716236830
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.4866 +/- 0.0165533 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.4866 @ 95%CL (1 toyMC)
median expected limit: r < 12.4866 @ 95%CL (1 toyMC)
   68% expected band : 12.4866 < r < 12.4866
   95% expected band : 12.4866 < r < 12.4866
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1534532995
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.74295 +/- 0.0181339 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.74295 @ 95%CL (1 toyMC)
median expected limit: r < 7.74295 @ 95%CL (1 toyMC)
   68% expected band : 7.74295 < r < 7.74295
   95% expected band : 7.74295 < r < 7.74295
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 252179795
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.82455 +/- 0.010618 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.82455 @ 95%CL (1 toyMC)
median expected limit: r < 6.82455 @ 95%CL (1 toyMC)
   68% expected band : 6.82455 < r < 6.82455
   95% expected band : 6.82455 < r < 6.82455
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1320975162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.69512 +/- 0.0125478 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 5.69512 @ 95%CL (1 toyMC)
median expected limit: r < 5.69512 @ 95%CL (1 toyMC)
   68% expected band : 5.69512 < r < 5.69512
   95% expected band : 5.69512 < r < 5.69512
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2030695001
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9585 +/- 0.0170853 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.9585 @ 95%CL (1 toyMC)
median expected limit: r < 10.9585 @ 95%CL (1 toyMC)
   68% expected band : 10.9585 < r < 10.9585
   95% expected band : 10.9585 < r < 10.9585
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1836085570
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.3123 +/- 0.0202388 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.3123 @ 95%CL (1 toyMC)
median expected limit: r < 13.3123 @ 95%CL (1 toyMC)
   68% expected band : 13.3123 < r < 13.3123
   95% expected band : 13.3123 < r < 13.3123
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 848214472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.50017 +/- 0.0164174 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.50017 @ 95%CL (1 toyMC)
median expected limit: r < 7.50017 @ 95%CL (1 toyMC)
   68% expected band : 7.50017 < r < 7.50017
   95% expected band : 7.50017 < r < 7.50017
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1412196853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.63498 +/- 0.0195681 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.63498 @ 95%CL (1 toyMC)
median expected limit: r < 8.63498 @ 95%CL (1 toyMC)
   68% expected band : 8.63498 < r < 8.63498
   95% expected band : 8.63498 < r < 8.63498
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 859295671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1563 +/- 0.016619 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.1563 @ 95%CL (1 toyMC)
median expected limit: r < 10.1563 @ 95%CL (1 toyMC)
   68% expected band : 10.1563 < r < 10.1563
   95% expected band : 10.1563 < r < 10.1563
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1600824339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.6592 +/- 0.0118849 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.6592 @ 95%CL (1 toyMC)
median expected limit: r < 8.6592 @ 95%CL (1 toyMC)
   68% expected band : 8.6592 < r < 8.6592
   95% expected band : 8.6592 < r < 8.6592
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 983307178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8379 +/- 0.0205847 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.8379 @ 95%CL (1 toyMC)
median expected limit: r < 10.8379 @ 95%CL (1 toyMC)
   68% expected band : 10.8379 < r < 10.8379
   95% expected band : 10.8379 < r < 10.8379
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1222233625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.58103 +/- 0.0141857 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.58103 @ 95%CL (1 toyMC)
median expected limit: r < 7.58103 @ 95%CL (1 toyMC)
   68% expected band : 7.58103 < r < 7.58103
   95% expected band : 7.58103 < r < 7.58103
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1566753185
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.84416 +/- 0.0166921 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.84416 @ 95%CL (1 toyMC)
median expected limit: r < 6.84416 @ 95%CL (1 toyMC)
   68% expected band : 6.84416 < r < 6.84416
   95% expected band : 6.84416 < r < 6.84416
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -28613649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.56864 +/- 0.0173073 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.56864 @ 95%CL (1 toyMC)
median expected limit: r < 6.56864 @ 95%CL (1 toyMC)
   68% expected band : 6.56864 < r < 6.56864
   95% expected band : 6.56864 < r < 6.56864
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2104240002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.06243 +/- 0.0159662 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.06243 @ 95%CL (1 toyMC)
median expected limit: r < 9.06243 @ 95%CL (1 toyMC)
   68% expected band : 9.06243 < r < 9.06243
   95% expected band : 9.06243 < r < 9.06243
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -686553215
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.79557 +/- 0.0137518 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.79557 @ 95%CL (1 toyMC)
median expected limit: r < 7.79557 @ 95%CL (1 toyMC)
   68% expected band : 7.79557 < r < 7.79557
   95% expected band : 7.79557 < r < 7.79557
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1933522488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.22498 +/- 0.0184418 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.22498 @ 95%CL (1 toyMC)
median expected limit: r < 7.22498 @ 95%CL (1 toyMC)
   68% expected band : 7.22498 < r < 7.22498
   95% expected band : 7.22498 < r < 7.22498
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 792172369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.66593 +/- 0.015854 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.66593 @ 95%CL (1 toyMC)
median expected limit: r < 9.66593 @ 95%CL (1 toyMC)
   68% expected band : 9.66593 < r < 9.66593
   95% expected band : 9.66593 < r < 9.66593
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1772901982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.22068 +/- 0.0161295 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.22068 @ 95%CL (1 toyMC)
median expected limit: r < 9.22068 @ 95%CL (1 toyMC)
   68% expected band : 9.22068 < r < 9.22068
   95% expected band : 9.22068 < r < 9.22068
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 85749307
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.5847 +/- 0.0170986 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.5847 @ 95%CL (1 toyMC)
median expected limit: r < 8.5847 @ 95%CL (1 toyMC)
   68% expected band : 8.5847 < r < 8.5847
   95% expected band : 8.5847 < r < 8.5847
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1998801170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.12564 +/- 0.0180592 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.12564 @ 95%CL (1 toyMC)
median expected limit: r < 8.12564 @ 95%CL (1 toyMC)
   68% expected band : 8.12564 < r < 8.12564
   95% expected band : 8.12564 < r < 8.12564
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1662927976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.42104 +/- 0.017465 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.42104 @ 95%CL (1 toyMC)
median expected limit: r < 7.42104 @ 95%CL (1 toyMC)
   68% expected band : 7.42104 < r < 7.42104
   95% expected band : 7.42104 < r < 7.42104
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1287593112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.32391 +/- 0.0207369 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.32391 @ 95%CL (1 toyMC)
median expected limit: r < 9.32391 @ 95%CL (1 toyMC)
   68% expected band : 9.32391 < r < 9.32391
   95% expected band : 9.32391 < r < 9.32391
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 286049000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6818 +/- 0.0197738 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.6818 @ 95%CL (1 toyMC)
median expected limit: r < 10.6818 @ 95%CL (1 toyMC)
   68% expected band : 10.6818 < r < 10.6818
   95% expected band : 10.6818 < r < 10.6818
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2072173026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.60676 +/- 0.0175397 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.60676 @ 95%CL (1 toyMC)
median expected limit: r < 8.60676 @ 95%CL (1 toyMC)
   68% expected band : 8.60676 < r < 8.60676
   95% expected band : 8.60676 < r < 8.60676
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -741463930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2313 +/- 0.0181462 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.2313 @ 95%CL (1 toyMC)
median expected limit: r < 10.2313 @ 95%CL (1 toyMC)
   68% expected band : 10.2313 < r < 10.2313
   95% expected band : 10.2313 < r < 10.2313
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1713310583
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.25605 +/- 0.0197049 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.25605 @ 95%CL (1 toyMC)
median expected limit: r < 9.25605 @ 95%CL (1 toyMC)
   68% expected band : 9.25605 < r < 9.25605
   95% expected band : 9.25605 < r < 9.25605
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 372826935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.0714 +/- 0.0124309 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 15.0714 @ 95%CL (1 toyMC)
median expected limit: r < 15.0714 @ 95%CL (1 toyMC)
   68% expected band : 15.0714 < r < 15.0714
   95% expected band : 15.0714 < r < 15.0714
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 3086467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.83132 +/- 0.0177842 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.83132 @ 95%CL (1 toyMC)
median expected limit: r < 9.83132 @ 95%CL (1 toyMC)
   68% expected band : 9.83132 < r < 9.83132
   95% expected band : 9.83132 < r < 9.83132
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1037744149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.28271 +/- 0.0154757 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.28271 @ 95%CL (1 toyMC)
median expected limit: r < 6.28271 @ 95%CL (1 toyMC)
   68% expected band : 6.28271 < r < 6.28271
   95% expected band : 6.28271 < r < 6.28271
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2145294265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.54756 +/- 0.0161342 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.54756 @ 95%CL (1 toyMC)
median expected limit: r < 6.54756 @ 95%CL (1 toyMC)
   68% expected band : 6.54756 < r < 6.54756
   95% expected band : 6.54756 < r < 6.54756
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1120010800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.21399 +/- 0.0173263 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.21399 @ 95%CL (1 toyMC)
median expected limit: r < 7.21399 @ 95%CL (1 toyMC)
   68% expected band : 7.21399 < r < 7.21399
   95% expected band : 7.21399 < r < 7.21399
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -578570796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.61481 +/- 0.016617 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.61481 @ 95%CL (1 toyMC)
median expected limit: r < 8.61481 @ 95%CL (1 toyMC)
   68% expected band : 8.61481 < r < 8.61481
   95% expected band : 8.61481 < r < 8.61481
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 581939465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.2759 +/- 0.017687 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.2759 @ 95%CL (1 toyMC)
median expected limit: r < 7.2759 @ 95%CL (1 toyMC)
   68% expected band : 7.2759 < r < 7.2759
   95% expected band : 7.2759 < r < 7.2759
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -681208069
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.62797 +/- 0.0178892 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.62797 @ 95%CL (1 toyMC)
median expected limit: r < 7.62797 @ 95%CL (1 toyMC)
   68% expected band : 7.62797 < r < 7.62797
   95% expected band : 7.62797 < r < 7.62797
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 276768338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.2919 +/- 0.0177994 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 11.2919 @ 95%CL (1 toyMC)
median expected limit: r < 11.2919 @ 95%CL (1 toyMC)
   68% expected band : 11.2919 < r < 11.2919
   95% expected band : 11.2919 < r < 11.2919
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -503054778
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.14333 +/- 0.018204 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.14333 @ 95%CL (1 toyMC)
median expected limit: r < 8.14333 @ 95%CL (1 toyMC)
   68% expected band : 8.14333 < r < 8.14333
   95% expected band : 8.14333 < r < 8.14333
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1702826070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.8949 +/- 0.0165636 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.8949 @ 95%CL (1 toyMC)
median expected limit: r < 13.8949 @ 95%CL (1 toyMC)
   68% expected band : 13.8949 < r < 13.8949
   95% expected band : 13.8949 < r < 13.8949
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1738110539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.5994 +/- 0.00837099 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 17.5994 @ 95%CL (1 toyMC)
median expected limit: r < 17.5994 @ 95%CL (1 toyMC)
   68% expected band : 17.5994 < r < 17.5994
   95% expected band : 17.5994 < r < 17.5994
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -515663832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.844 +/- 0.0166877 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.844 @ 95%CL (1 toyMC)
median expected limit: r < 11.844 @ 95%CL (1 toyMC)
   68% expected band : 11.844 < r < 11.844
   95% expected band : 11.844 < r < 11.844
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 994401983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.95456 +/- 0.0133068 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.95456 @ 95%CL (1 toyMC)
median expected limit: r < 6.95456 @ 95%CL (1 toyMC)
   68% expected band : 6.95456 < r < 6.95456
   95% expected band : 6.95456 < r < 6.95456
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1183853509
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.99901 +/- 0.0162062 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.99901 @ 95%CL (1 toyMC)
median expected limit: r < 6.99901 @ 95%CL (1 toyMC)
   68% expected band : 6.99901 < r < 6.99901
   95% expected band : 6.99901 < r < 6.99901
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1116230552
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.78243 +/- 0.0187705 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.78243 @ 95%CL (1 toyMC)
median expected limit: r < 9.78243 @ 95%CL (1 toyMC)
   68% expected band : 9.78243 < r < 9.78243
   95% expected band : 9.78243 < r < 9.78243
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1869256360
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3153 +/- 0.0210806 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.3153 @ 95%CL (1 toyMC)
median expected limit: r < 10.3153 @ 95%CL (1 toyMC)
   68% expected band : 10.3153 < r < 10.3153
   95% expected band : 10.3153 < r < 10.3153
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1710869761
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.064 +/- 0.0168265 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.064 @ 95%CL (1 toyMC)
median expected limit: r < 13.064 @ 95%CL (1 toyMC)
   68% expected band : 13.064 < r < 13.064
   95% expected band : 13.064 < r < 13.064
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1214120564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2299 +/- 0.0210423 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.2299 @ 95%CL (1 toyMC)
median expected limit: r < 10.2299 @ 95%CL (1 toyMC)
   68% expected band : 10.2299 < r < 10.2299
   95% expected band : 10.2299 < r < 10.2299
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 519765184
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.1746 +/- 0.0171347 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.1746 @ 95%CL (1 toyMC)
median expected limit: r < 11.1746 @ 95%CL (1 toyMC)
   68% expected band : 11.1746 < r < 11.1746
   95% expected band : 11.1746 < r < 11.1746
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1830435283
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.61844 +/- 0.0174608 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.61844 @ 95%CL (1 toyMC)
median expected limit: r < 8.61844 @ 95%CL (1 toyMC)
   68% expected band : 8.61844 < r < 8.61844
   95% expected band : 8.61844 < r < 8.61844
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 576002190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.5211 +/- 0.0185974 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.5211 @ 95%CL (1 toyMC)
median expected limit: r < 10.5211 @ 95%CL (1 toyMC)
   68% expected band : 10.5211 < r < 10.5211
   95% expected band : 10.5211 < r < 10.5211
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 711772912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.6175 +/- 0.0152184 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 14.6175 @ 95%CL (1 toyMC)
median expected limit: r < 14.6175 @ 95%CL (1 toyMC)
   68% expected band : 14.6175 < r < 14.6175
   95% expected band : 14.6175 < r < 14.6175
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -224364313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.29309 +/- 0.0176694 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.29309 @ 95%CL (1 toyMC)
median expected limit: r < 8.29309 @ 95%CL (1 toyMC)
   68% expected band : 8.29309 < r < 8.29309
   95% expected band : 8.29309 < r < 8.29309
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1888965648
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.4127 +/- 0.0153889 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.4127 @ 95%CL (1 toyMC)
median expected limit: r < 11.4127 @ 95%CL (1 toyMC)
   68% expected band : 11.4127 < r < 11.4127
   95% expected band : 11.4127 < r < 11.4127
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1435163262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.98559 +/- 0.0180905 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.98559 @ 95%CL (1 toyMC)
median expected limit: r < 8.98559 @ 95%CL (1 toyMC)
   68% expected band : 8.98559 < r < 8.98559
   95% expected band : 8.98559 < r < 8.98559
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1374229136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.60758 +/- 0.0178145 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.60758 @ 95%CL (1 toyMC)
median expected limit: r < 8.60758 @ 95%CL (1 toyMC)
   68% expected band : 8.60758 < r < 8.60758
   95% expected band : 8.60758 < r < 8.60758
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2053205425
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.43449 +/- 0.0179202 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.43449 @ 95%CL (1 toyMC)
median expected limit: r < 9.43449 @ 95%CL (1 toyMC)
   68% expected band : 9.43449 < r < 9.43449
   95% expected band : 9.43449 < r < 9.43449
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1095860986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6068 +/- 0.0205852 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.6068 @ 95%CL (1 toyMC)
median expected limit: r < 10.6068 @ 95%CL (1 toyMC)
   68% expected band : 10.6068 < r < 10.6068
   95% expected band : 10.6068 < r < 10.6068
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -399467577
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.9462 +/- 0.0164114 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.9462 @ 95%CL (1 toyMC)
median expected limit: r < 7.9462 @ 95%CL (1 toyMC)
   68% expected band : 7.9462 < r < 7.9462
   95% expected band : 7.9462 < r < 7.9462
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 491707397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.3939 +/- 0.0171483 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.3939 @ 95%CL (1 toyMC)
median expected limit: r < 12.3939 @ 95%CL (1 toyMC)
   68% expected band : 12.3939 < r < 12.3939
   95% expected band : 12.3939 < r < 12.3939
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 385877166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.5084 +/- 0.01605 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.5084 @ 95%CL (1 toyMC)
median expected limit: r < 13.5084 @ 95%CL (1 toyMC)
   68% expected band : 13.5084 < r < 13.5084
   95% expected band : 13.5084 < r < 13.5084
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1095563703
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.8195 +/- 0.0136957 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.8195 @ 95%CL (1 toyMC)
median expected limit: r < 12.8195 @ 95%CL (1 toyMC)
   68% expected band : 12.8195 < r < 12.8195
   95% expected band : 12.8195 < r < 12.8195
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -177379262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.10033 +/- 0.0158959 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.10033 @ 95%CL (1 toyMC)
median expected limit: r < 7.10033 @ 95%CL (1 toyMC)
   68% expected band : 7.10033 < r < 7.10033
   95% expected band : 7.10033 < r < 7.10033
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1624521063
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.60475 +/- 0.0129318 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.60475 @ 95%CL (1 toyMC)
median expected limit: r < 8.60475 @ 95%CL (1 toyMC)
   68% expected band : 8.60475 < r < 8.60475
   95% expected band : 8.60475 < r < 8.60475
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 884835697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6389 +/- 0.0140995 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.6389 @ 95%CL (1 toyMC)
median expected limit: r < 10.6389 @ 95%CL (1 toyMC)
   68% expected band : 10.6389 < r < 10.6389
   95% expected band : 10.6389 < r < 10.6389
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 687026189
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.5332 +/- 0.0164194 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 14.5332 @ 95%CL (1 toyMC)
median expected limit: r < 14.5332 @ 95%CL (1 toyMC)
   68% expected band : 14.5332 < r < 14.5332
   95% expected band : 14.5332 < r < 14.5332
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1092927508
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.89748 +/- 0.0207525 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.89748 @ 95%CL (1 toyMC)
median expected limit: r < 7.89748 @ 95%CL (1 toyMC)
   68% expected band : 7.89748 < r < 7.89748
   95% expected band : 7.89748 < r < 7.89748
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1798170838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.58964 +/- 0.0190412 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.58964 @ 95%CL (1 toyMC)
median expected limit: r < 7.58964 @ 95%CL (1 toyMC)
   68% expected band : 7.58964 < r < 7.58964
   95% expected band : 7.58964 < r < 7.58964
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 554583861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.7177 +/- 0.0101338 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 16.7177 @ 95%CL (1 toyMC)
median expected limit: r < 16.7177 @ 95%CL (1 toyMC)
   68% expected band : 16.7177 < r < 16.7177
   95% expected band : 16.7177 < r < 16.7177
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1957870358
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.9801 +/- 0.0166018 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.9801 @ 95%CL (1 toyMC)
median expected limit: r < 12.9801 @ 95%CL (1 toyMC)
   68% expected band : 12.9801 < r < 12.9801
   95% expected band : 12.9801 < r < 12.9801
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1759524633
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.4687 +/- 0.0236854 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 11.4687 @ 95%CL (1 toyMC)
median expected limit: r < 11.4687 @ 95%CL (1 toyMC)
   68% expected band : 11.4687 < r < 11.4687
   95% expected band : 11.4687 < r < 11.4687
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 850152654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.5903 +/- 0.0156745 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.5903 @ 95%CL (1 toyMC)
median expected limit: r < 11.5903 @ 95%CL (1 toyMC)
   68% expected band : 11.5903 < r < 11.5903
   95% expected band : 11.5903 < r < 11.5903
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2011250569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.6169 +/- 0.0142043 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 14.6169 @ 95%CL (1 toyMC)
median expected limit: r < 14.6169 @ 95%CL (1 toyMC)
   68% expected band : 14.6169 < r < 14.6169
   95% expected band : 14.6169 < r < 14.6169
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1879703374
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.59012 +/- 0.020179 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.59012 @ 95%CL (1 toyMC)
median expected limit: r < 9.59012 @ 95%CL (1 toyMC)
   68% expected band : 9.59012 < r < 9.59012
   95% expected band : 9.59012 < r < 9.59012
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -804042994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8642 +/- 0.0217148 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.8642 @ 95%CL (1 toyMC)
median expected limit: r < 10.8642 @ 95%CL (1 toyMC)
   68% expected band : 10.8642 < r < 10.8642
   95% expected band : 10.8642 < r < 10.8642
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1544990085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.5413 +/- 0.0143298 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 15.5413 @ 95%CL (1 toyMC)
median expected limit: r < 15.5413 @ 95%CL (1 toyMC)
   68% expected band : 15.5413 < r < 15.5413
   95% expected band : 15.5413 < r < 15.5413
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1631790812
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.23129 +/- 0.0188145 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.23129 @ 95%CL (1 toyMC)
median expected limit: r < 9.23129 @ 95%CL (1 toyMC)
   68% expected band : 9.23129 < r < 9.23129
   95% expected band : 9.23129 < r < 9.23129
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -311613101
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.5462 +/- 0.0118007 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.5462 @ 95%CL (1 toyMC)
median expected limit: r < 15.5462 @ 95%CL (1 toyMC)
   68% expected band : 15.5462 < r < 15.5462
   95% expected band : 15.5462 < r < 15.5462
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1840448738
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.49255 +/- 0.0202551 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.49255 @ 95%CL (1 toyMC)
median expected limit: r < 7.49255 @ 95%CL (1 toyMC)
   68% expected band : 7.49255 < r < 7.49255
   95% expected band : 7.49255 < r < 7.49255
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1003165484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.7597 +/- 0.0179146 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.7597 @ 95%CL (1 toyMC)
median expected limit: r < 10.7597 @ 95%CL (1 toyMC)
   68% expected band : 10.7597 < r < 10.7597
   95% expected band : 10.7597 < r < 10.7597
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -800929314
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.4404 +/- 0.0192551 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.4404 @ 95%CL (1 toyMC)
median expected limit: r < 10.4404 @ 95%CL (1 toyMC)
   68% expected band : 10.4404 < r < 10.4404
   95% expected band : 10.4404 < r < 10.4404
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1110223179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.57851 +/- 0.0187666 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.57851 @ 95%CL (1 toyMC)
median expected limit: r < 9.57851 @ 95%CL (1 toyMC)
   68% expected band : 9.57851 < r < 9.57851
   95% expected band : 9.57851 < r < 9.57851
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2106672369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.43435 +/- 0.0192699 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.43435 @ 95%CL (1 toyMC)
median expected limit: r < 8.43435 @ 95%CL (1 toyMC)
   68% expected band : 8.43435 < r < 8.43435
   95% expected band : 8.43435 < r < 8.43435
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1523975174
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.5657 +/- 0.0209175 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.5657 @ 95%CL (1 toyMC)
median expected limit: r < 10.5657 @ 95%CL (1 toyMC)
   68% expected band : 10.5657 < r < 10.5657
   95% expected band : 10.5657 < r < 10.5657
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 502072524
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.53362 +/- 0.0184895 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.53362 @ 95%CL (1 toyMC)
median expected limit: r < 7.53362 @ 95%CL (1 toyMC)
   68% expected band : 7.53362 < r < 7.53362
   95% expected band : 7.53362 < r < 7.53362
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1696735691
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.4099 +/- 0.0178604 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.4099 @ 95%CL (1 toyMC)
median expected limit: r < 12.4099 @ 95%CL (1 toyMC)
   68% expected band : 12.4099 < r < 12.4099
   95% expected band : 12.4099 < r < 12.4099
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1982510387
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8579 +/- 0.018003 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.8579 @ 95%CL (1 toyMC)
median expected limit: r < 10.8579 @ 95%CL (1 toyMC)
   68% expected band : 10.8579 < r < 10.8579
   95% expected band : 10.8579 < r < 10.8579
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -154268982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.8476 +/- 0.0206997 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.8476 @ 95%CL (1 toyMC)
median expected limit: r < 8.8476 @ 95%CL (1 toyMC)
   68% expected band : 8.8476 < r < 8.8476
   95% expected band : 8.8476 < r < 8.8476
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1954634951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.5518 +/- 0.0178547 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.5518 @ 95%CL (1 toyMC)
median expected limit: r < 12.5518 @ 95%CL (1 toyMC)
   68% expected band : 12.5518 < r < 12.5518
   95% expected band : 12.5518 < r < 12.5518
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -700963001
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.56287 +/- 0.0158311 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.56287 @ 95%CL (1 toyMC)
median expected limit: r < 7.56287 @ 95%CL (1 toyMC)
   68% expected band : 7.56287 < r < 7.56287
   95% expected band : 7.56287 < r < 7.56287
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1516085977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.3479 +/- 0.0180269 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.3479 @ 95%CL (1 toyMC)
median expected limit: r < 11.3479 @ 95%CL (1 toyMC)
   68% expected band : 11.3479 < r < 11.3479
   95% expected band : 11.3479 < r < 11.3479
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1810255827
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.58485 +/- 0.017878 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.58485 @ 95%CL (1 toyMC)
median expected limit: r < 8.58485 @ 95%CL (1 toyMC)
   68% expected band : 8.58485 < r < 8.58485
   95% expected band : 8.58485 < r < 8.58485
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 322761730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.5534 +/- 0.0165338 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 14.5534 @ 95%CL (1 toyMC)
median expected limit: r < 14.5534 @ 95%CL (1 toyMC)
   68% expected band : 14.5534 < r < 14.5534
   95% expected band : 14.5534 < r < 14.5534
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1792521098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.88382 +/- 0.0186765 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.88382 @ 95%CL (1 toyMC)
median expected limit: r < 7.88382 @ 95%CL (1 toyMC)
   68% expected band : 7.88382 < r < 7.88382
   95% expected band : 7.88382 < r < 7.88382
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1517758191
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.87692 +/- 0.0172601 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.87692 @ 95%CL (1 toyMC)
median expected limit: r < 7.87692 @ 95%CL (1 toyMC)
   68% expected band : 7.87692 < r < 7.87692
   95% expected band : 7.87692 < r < 7.87692
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 297327673
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.16309 +/- 0.01661 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.16309 @ 95%CL (1 toyMC)
median expected limit: r < 7.16309 @ 95%CL (1 toyMC)
   68% expected band : 7.16309 < r < 7.16309
   95% expected band : 7.16309 < r < 7.16309
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1124243217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.7324 +/- 0.0198545 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.7324 @ 95%CL (1 toyMC)
median expected limit: r < 10.7324 @ 95%CL (1 toyMC)
   68% expected band : 10.7324 < r < 10.7324
   95% expected band : 10.7324 < r < 10.7324
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -570582292
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1486 +/- 0.0215108 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.1486 @ 95%CL (1 toyMC)
median expected limit: r < 10.1486 @ 95%CL (1 toyMC)
   68% expected band : 10.1486 < r < 10.1486
   95% expected band : 10.1486 < r < 10.1486
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1092927508.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1124243217.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1183853509.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1214120564.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1287593112.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1320975162.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1365499869.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1412196853.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1435163262.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1517758191.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-154268982.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1544990085.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1624521063.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1631790812.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1662927976.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1710869761.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1713310583.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1738110539.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1759524633.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1772901982.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-177379262.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1810255827.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1830435283.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1888965648.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1933522488.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-1982510387.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-1985557834.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-2053205425.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-2072173026.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-2145294265.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-224364313.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-28613649.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-311613101.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-399467577.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-503054778.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-515663832.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-570582292.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-578570796.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-681208069.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-686553215.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-700963001.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-741463930.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-800929314.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-804042994.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.1003165484.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.1037744149.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.1095563703.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.1095860986.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1110223179.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1116230552.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1120010800.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1222233625.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1365049904.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1374229136.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1516085977.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1523975174.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1534532995.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1566753185.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1600824339.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1696735691.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1702826070.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1792521098.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1798170838.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1836085570.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1840448738.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1869256360.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1879703374.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1954634951.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1957870358.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1998801170.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.2011250569.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.2030695001.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.2104240002.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.2106672369.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.252179795.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.276768338.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.286049000.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.297327673.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.3086467.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.322761730.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.372826935.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.385877166.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.482581216.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.491707397.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.502072524.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.519765184.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.554583861.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.576002190.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.581939465.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.687026189.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.711772912.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.716236830.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.792172369.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.848214472.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.850152654.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.85749307.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.859295671.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.884835697.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.983307178.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.994401983.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -710047617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.68879 +/- 0.0133221 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.68879 @ 95%CL (1 toyMC)
median expected limit: r < 7.68879 @ 95%CL (1 toyMC)
   68% expected band : 7.68879 < r < 7.68879
   95% expected band : 7.68879 < r < 7.68879
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1210135097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.7981 +/- 0.0143152 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.7981 @ 95%CL (1 toyMC)
median expected limit: r < 8.7981 @ 95%CL (1 toyMC)
   68% expected band : 8.7981 < r < 8.7981
   95% expected band : 8.7981 < r < 8.7981
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1897948699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.46374 +/- 0.0138952 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.46374 @ 95%CL (1 toyMC)
median expected limit: r < 7.46374 @ 95%CL (1 toyMC)
   68% expected band : 7.46374 < r < 7.46374
   95% expected band : 7.46374 < r < 7.46374
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 345709815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.34194 +/- 0.0128619 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.34194 @ 95%CL (1 toyMC)
median expected limit: r < 6.34194 @ 95%CL (1 toyMC)
   68% expected band : 6.34194 < r < 6.34194
   95% expected band : 6.34194 < r < 6.34194
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1784735770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.70668 +/- 0.0161101 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.70668 @ 95%CL (1 toyMC)
median expected limit: r < 8.70668 @ 95%CL (1 toyMC)
   68% expected band : 8.70668 < r < 8.70668
   95% expected band : 8.70668 < r < 8.70668
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 401636779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.5286 +/- 0.00903175 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 14.5286 @ 95%CL (1 toyMC)
median expected limit: r < 14.5286 @ 95%CL (1 toyMC)
   68% expected band : 14.5286 < r < 14.5286
   95% expected band : 14.5286 < r < 14.5286
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1766037561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.91741 +/- 0.0138886 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.91741 @ 95%CL (1 toyMC)
median expected limit: r < 6.91741 @ 95%CL (1 toyMC)
   68% expected band : 6.91741 < r < 6.91741
   95% expected band : 6.91741 < r < 6.91741
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1778292424
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.39439 +/- 0.0167246 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.39439 @ 95%CL (1 toyMC)
median expected limit: r < 9.39439 @ 95%CL (1 toyMC)
   68% expected band : 9.39439 < r < 9.39439
   95% expected band : 9.39439 < r < 9.39439
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1600071363
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.17919 +/- 0.0116703 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.17919 @ 95%CL (1 toyMC)
median expected limit: r < 6.17919 @ 95%CL (1 toyMC)
   68% expected band : 6.17919 < r < 6.17919
   95% expected band : 6.17919 < r < 6.17919
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 588450789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.5675 +/- 0.0143126 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.5675 @ 95%CL (1 toyMC)
median expected limit: r < 12.5675 @ 95%CL (1 toyMC)
   68% expected band : 12.5675 < r < 12.5675
   95% expected band : 12.5675 < r < 12.5675
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 762925710
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.2725 +/- 0.0149531 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.2725 @ 95%CL (1 toyMC)
median expected limit: r < 12.2725 @ 95%CL (1 toyMC)
   68% expected band : 12.2725 < r < 12.2725
   95% expected band : 12.2725 < r < 12.2725
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 761497988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7776 +/- 0.0160386 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.7776 @ 95%CL (1 toyMC)
median expected limit: r < 12.7776 @ 95%CL (1 toyMC)
   68% expected band : 12.7776 < r < 12.7776
   95% expected band : 12.7776 < r < 12.7776
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1655639918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.20572 +/- 0.0151947 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.20572 @ 95%CL (1 toyMC)
median expected limit: r < 9.20572 @ 95%CL (1 toyMC)
   68% expected band : 9.20572 < r < 9.20572
   95% expected band : 9.20572 < r < 9.20572
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 249813692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9172 +/- 0.0172514 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.9172 @ 95%CL (1 toyMC)
median expected limit: r < 10.9172 @ 95%CL (1 toyMC)
   68% expected band : 10.9172 < r < 10.9172
   95% expected band : 10.9172 < r < 10.9172
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1407590456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.85651 +/- 0.0152087 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.85651 @ 95%CL (1 toyMC)
median expected limit: r < 6.85651 @ 95%CL (1 toyMC)
   68% expected band : 6.85651 < r < 6.85651
   95% expected band : 6.85651 < r < 6.85651
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1138113880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.66559 +/- 0.0162926 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.66559 @ 95%CL (1 toyMC)
median expected limit: r < 7.66559 @ 95%CL (1 toyMC)
   68% expected band : 7.66559 < r < 7.66559
   95% expected band : 7.66559 < r < 7.66559
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -866369300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.97625 +/- 0.0179215 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.97625 @ 95%CL (1 toyMC)
median expected limit: r < 6.97625 @ 95%CL (1 toyMC)
   68% expected band : 6.97625 < r < 6.97625
   95% expected band : 6.97625 < r < 6.97625
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -823832535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.1951 +/- 0.0107398 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 14.1951 @ 95%CL (1 toyMC)
median expected limit: r < 14.1951 @ 95%CL (1 toyMC)
   68% expected band : 14.1951 < r < 14.1951
   95% expected band : 14.1951 < r < 14.1951
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 171415148
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.4352 +/- 0.0158977 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 10.4352 @ 95%CL (1 toyMC)
median expected limit: r < 10.4352 @ 95%CL (1 toyMC)
   68% expected band : 10.4352 < r < 10.4352
   95% expected band : 10.4352 < r < 10.4352
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1879471318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.19685 +/- 0.0111216 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.19685 @ 95%CL (1 toyMC)
median expected limit: r < 6.19685 @ 95%CL (1 toyMC)
   68% expected band : 6.19685 < r < 6.19685
   95% expected band : 6.19685 < r < 6.19685
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -451213854
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.3667 +/- 0.00589752 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 17.3667 @ 95%CL (1 toyMC)
median expected limit: r < 17.3667 @ 95%CL (1 toyMC)
   68% expected band : 17.3667 < r < 17.3667
   95% expected band : 17.3667 < r < 17.3667
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 903536094
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.53291 +/- 0.0137027 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.53291 @ 95%CL (1 toyMC)
median expected limit: r < 6.53291 @ 95%CL (1 toyMC)
   68% expected band : 6.53291 < r < 6.53291
   95% expected band : 6.53291 < r < 6.53291
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 293914212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.78559 +/- 0.0138097 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.78559 @ 95%CL (1 toyMC)
median expected limit: r < 6.78559 @ 95%CL (1 toyMC)
   68% expected band : 6.78559 < r < 6.78559
   95% expected band : 6.78559 < r < 6.78559
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1481790958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6619 +/- 0.0150091 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.6619 @ 95%CL (1 toyMC)
median expected limit: r < 10.6619 @ 95%CL (1 toyMC)
   68% expected band : 10.6619 < r < 10.6619
   95% expected band : 10.6619 < r < 10.6619
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 929569973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.14924 +/- 0.0133735 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.14924 @ 95%CL (1 toyMC)
median expected limit: r < 8.14924 @ 95%CL (1 toyMC)
   68% expected band : 8.14924 < r < 8.14924
   95% expected band : 8.14924 < r < 8.14924
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1318906685
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.60423 +/- 0.0133676 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.60423 @ 95%CL (1 toyMC)
median expected limit: r < 7.60423 @ 95%CL (1 toyMC)
   68% expected band : 7.60423 < r < 7.60423
   95% expected band : 7.60423 < r < 7.60423
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1678691887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.44765 +/- 0.0143046 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.44765 @ 95%CL (1 toyMC)
median expected limit: r < 8.44765 @ 95%CL (1 toyMC)
   68% expected band : 8.44765 < r < 8.44765
   95% expected band : 8.44765 < r < 8.44765
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1772006188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.46202 +/- 0.0171099 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.46202 @ 95%CL (1 toyMC)
median expected limit: r < 9.46202 @ 95%CL (1 toyMC)
   68% expected band : 9.46202 < r < 9.46202
   95% expected band : 9.46202 < r < 9.46202
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1242098918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.5152 +/- 0.014993 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.5152 @ 95%CL (1 toyMC)
median expected limit: r < 10.5152 @ 95%CL (1 toyMC)
   68% expected band : 10.5152 < r < 10.5152
   95% expected band : 10.5152 < r < 10.5152
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1833812170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.10635 +/- 0.0200466 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.10635 @ 95%CL (1 toyMC)
median expected limit: r < 9.10635 @ 95%CL (1 toyMC)
   68% expected band : 9.10635 < r < 9.10635
   95% expected band : 9.10635 < r < 9.10635
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1319872792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.1092 +/- 0.0149429 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 12.1092 @ 95%CL (1 toyMC)
median expected limit: r < 12.1092 @ 95%CL (1 toyMC)
   68% expected band : 12.1092 < r < 12.1092
   95% expected band : 12.1092 < r < 12.1092
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1655542650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.328 +/- 0.0144193 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 12.328 @ 95%CL (1 toyMC)
median expected limit: r < 12.328 @ 95%CL (1 toyMC)
   68% expected band : 12.328 < r < 12.328
   95% expected band : 12.328 < r < 12.328
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2147466875
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.8025 +/- 0.0205278 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.8025 @ 95%CL (1 toyMC)
median expected limit: r < 11.8025 @ 95%CL (1 toyMC)
   68% expected band : 11.8025 < r < 11.8025
   95% expected band : 11.8025 < r < 11.8025
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2140418034
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.4679 +/- 0.0136882 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.4679 @ 95%CL (1 toyMC)
median expected limit: r < 10.4679 @ 95%CL (1 toyMC)
   68% expected band : 10.4679 < r < 10.4679
   95% expected band : 10.4679 < r < 10.4679
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1067710240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.3552 +/- 0.013947 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.3552 @ 95%CL (1 toyMC)
median expected limit: r < 6.3552 @ 95%CL (1 toyMC)
   68% expected band : 6.3552 < r < 6.3552
   95% expected band : 6.3552 < r < 6.3552
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1583420836
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6306 +/- 0.0122168 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 10.6306 @ 95%CL (1 toyMC)
median expected limit: r < 10.6306 @ 95%CL (1 toyMC)
   68% expected band : 10.6306 < r < 10.6306
   95% expected band : 10.6306 < r < 10.6306
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1471640961
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.30561 +/- 0.0114478 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.30561 @ 95%CL (1 toyMC)
median expected limit: r < 6.30561 @ 95%CL (1 toyMC)
   68% expected band : 6.30561 < r < 6.30561
   95% expected band : 6.30561 < r < 6.30561
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1433734779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.35994 +/- 0.0124975 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.35994 @ 95%CL (1 toyMC)
median expected limit: r < 6.35994 @ 95%CL (1 toyMC)
   68% expected band : 6.35994 < r < 6.35994
   95% expected band : 6.35994 < r < 6.35994
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1065907482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.4197 +/- 0.0176474 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.4197 @ 95%CL (1 toyMC)
median expected limit: r < 8.4197 @ 95%CL (1 toyMC)
   68% expected band : 8.4197 < r < 8.4197
   95% expected band : 8.4197 < r < 8.4197
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2106025236
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.01202 +/- 0.0168003 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.01202 @ 95%CL (1 toyMC)
median expected limit: r < 8.01202 @ 95%CL (1 toyMC)
   68% expected band : 8.01202 < r < 8.01202
   95% expected band : 8.01202 < r < 8.01202
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1661168295
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7761 +/- 0.0159657 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.7761 @ 95%CL (1 toyMC)
median expected limit: r < 11.7761 @ 95%CL (1 toyMC)
   68% expected band : 11.7761 < r < 11.7761
   95% expected band : 11.7761 < r < 11.7761
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1021681295
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.58854 +/- 0.0139607 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.58854 @ 95%CL (1 toyMC)
median expected limit: r < 6.58854 @ 95%CL (1 toyMC)
   68% expected band : 6.58854 < r < 6.58854
   95% expected band : 6.58854 < r < 6.58854
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 907550474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.15959 +/- 0.0141813 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.15959 @ 95%CL (1 toyMC)
median expected limit: r < 9.15959 @ 95%CL (1 toyMC)
   68% expected band : 9.15959 < r < 9.15959
   95% expected band : 9.15959 < r < 9.15959
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 850873035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.02356 +/- 0.0169417 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.02356 @ 95%CL (1 toyMC)
median expected limit: r < 9.02356 @ 95%CL (1 toyMC)
   68% expected band : 9.02356 < r < 9.02356
   95% expected band : 9.02356 < r < 9.02356
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 845191263
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.5158 +/- 0.00946648 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 16.5158 @ 95%CL (1 toyMC)
median expected limit: r < 16.5158 @ 95%CL (1 toyMC)
   68% expected band : 16.5158 < r < 16.5158
   95% expected band : 16.5158 < r < 16.5158
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -469973020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.34204 +/- 0.0132514 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.34204 @ 95%CL (1 toyMC)
median expected limit: r < 6.34204 @ 95%CL (1 toyMC)
   68% expected band : 6.34204 < r < 6.34204
   95% expected band : 6.34204 < r < 6.34204
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -5124292
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.6454 +/- 0.0129894 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 12.6454 @ 95%CL (1 toyMC)
median expected limit: r < 12.6454 @ 95%CL (1 toyMC)
   68% expected band : 12.6454 < r < 12.6454
   95% expected band : 12.6454 < r < 12.6454
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -619422747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.64612 +/- 0.0134644 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.64612 @ 95%CL (1 toyMC)
median expected limit: r < 9.64612 @ 95%CL (1 toyMC)
   68% expected band : 9.64612 < r < 9.64612
   95% expected band : 9.64612 < r < 9.64612
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1845916236
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.3045 +/- 0.0150087 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.3045 @ 95%CL (1 toyMC)
median expected limit: r < 6.3045 @ 95%CL (1 toyMC)
   68% expected band : 6.3045 < r < 6.3045
   95% expected band : 6.3045 < r < 6.3045
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -896814589
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.01304 +/- 0.0151486 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.01304 @ 95%CL (1 toyMC)
median expected limit: r < 8.01304 @ 95%CL (1 toyMC)
   68% expected band : 8.01304 < r < 8.01304
   95% expected band : 8.01304 < r < 8.01304
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 313382812
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.48653 +/- 0.0171753 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.48653 @ 95%CL (1 toyMC)
median expected limit: r < 7.48653 @ 95%CL (1 toyMC)
   68% expected band : 7.48653 < r < 7.48653
   95% expected band : 7.48653 < r < 7.48653
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1735471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.89046 +/- 0.014122 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.89046 @ 95%CL (1 toyMC)
median expected limit: r < 8.89046 @ 95%CL (1 toyMC)
   68% expected band : 8.89046 < r < 8.89046
   95% expected band : 8.89046 < r < 8.89046
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 419905210
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.0797 +/- 0.0156408 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 12.0797 @ 95%CL (1 toyMC)
median expected limit: r < 12.0797 @ 95%CL (1 toyMC)
   68% expected band : 12.0797 < r < 12.0797
   95% expected band : 12.0797 < r < 12.0797
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1262609970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.38782 +/- 0.0136888 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.38782 @ 95%CL (1 toyMC)
median expected limit: r < 7.38782 @ 95%CL (1 toyMC)
   68% expected band : 7.38782 < r < 7.38782
   95% expected band : 7.38782 < r < 7.38782
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -665006116
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.53344 +/- 0.0166467 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.53344 @ 95%CL (1 toyMC)
median expected limit: r < 6.53344 @ 95%CL (1 toyMC)
   68% expected band : 6.53344 < r < 6.53344
   95% expected band : 6.53344 < r < 6.53344
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2019116708
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.19166 +/- 0.0147083 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.19166 @ 95%CL (1 toyMC)
median expected limit: r < 8.19166 @ 95%CL (1 toyMC)
   68% expected band : 8.19166 < r < 8.19166
   95% expected band : 8.19166 < r < 8.19166
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2109099184
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.7478 +/- 0.0151981 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 10.7478 @ 95%CL (1 toyMC)
median expected limit: r < 10.7478 @ 95%CL (1 toyMC)
   68% expected band : 10.7478 < r < 10.7478
   95% expected band : 10.7478 < r < 10.7478
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 376845325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.00338 +/- 0.0152543 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.00338 @ 95%CL (1 toyMC)
median expected limit: r < 7.00338 @ 95%CL (1 toyMC)
   68% expected band : 7.00338 < r < 7.00338
   95% expected band : 7.00338 < r < 7.00338
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1842960860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0095 +/- 0.0187926 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.0095 @ 95%CL (1 toyMC)
median expected limit: r < 10.0095 @ 95%CL (1 toyMC)
   68% expected band : 10.0095 < r < 10.0095
   95% expected band : 10.0095 < r < 10.0095
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1629193604
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.97019 +/- 0.020194 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.97019 @ 95%CL (1 toyMC)
median expected limit: r < 8.97019 @ 95%CL (1 toyMC)
   68% expected band : 8.97019 < r < 8.97019
   95% expected band : 8.97019 < r < 8.97019
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 886772565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.73986 +/- 0.0171859 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.73986 @ 95%CL (1 toyMC)
median expected limit: r < 8.73986 @ 95%CL (1 toyMC)
   68% expected band : 8.73986 < r < 8.73986
   95% expected band : 8.73986 < r < 8.73986
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1349319900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.89138 +/- 0.0146253 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.89138 @ 95%CL (1 toyMC)
median expected limit: r < 9.89138 @ 95%CL (1 toyMC)
   68% expected band : 9.89138 < r < 9.89138
   95% expected band : 9.89138 < r < 9.89138
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1499752356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6834 +/- 0.0148057 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.6834 @ 95%CL (1 toyMC)
median expected limit: r < 10.6834 @ 95%CL (1 toyMC)
   68% expected band : 10.6834 < r < 10.6834
   95% expected band : 10.6834 < r < 10.6834
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -117966831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.56843 +/- 0.0155313 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.56843 @ 95%CL (1 toyMC)
median expected limit: r < 6.56843 @ 95%CL (1 toyMC)
   68% expected band : 6.56843 < r < 6.56843
   95% expected band : 6.56843 < r < 6.56843
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1369549107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.8585 +/- 0.0146787 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 12.8585 @ 95%CL (1 toyMC)
median expected limit: r < 12.8585 @ 95%CL (1 toyMC)
   68% expected band : 12.8585 < r < 12.8585
   95% expected band : 12.8585 < r < 12.8585
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 807221627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.0251 +/- 0.0146672 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.0251 @ 95%CL (1 toyMC)
median expected limit: r < 13.0251 @ 95%CL (1 toyMC)
   68% expected band : 13.0251 < r < 13.0251
   95% expected band : 13.0251 < r < 13.0251
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 790056830
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.02685 +/- 0.0143424 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.02685 @ 95%CL (1 toyMC)
median expected limit: r < 9.02685 @ 95%CL (1 toyMC)
   68% expected band : 9.02685 < r < 9.02685
   95% expected band : 9.02685 < r < 9.02685
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1033950024
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3951 +/- 0.0153678 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.3951 @ 95%CL (1 toyMC)
median expected limit: r < 10.3951 @ 95%CL (1 toyMC)
   68% expected band : 10.3951 < r < 10.3951
   95% expected band : 10.3951 < r < 10.3951
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 494896098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.24392 +/- 0.0143366 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.24392 @ 95%CL (1 toyMC)
median expected limit: r < 6.24392 @ 95%CL (1 toyMC)
   68% expected band : 6.24392 < r < 6.24392
   95% expected band : 6.24392 < r < 6.24392
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 690819897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.25003 +/- 0.017427 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.25003 @ 95%CL (1 toyMC)
median expected limit: r < 9.25003 @ 95%CL (1 toyMC)
   68% expected band : 9.25003 < r < 9.25003
   95% expected band : 9.25003 < r < 9.25003
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1864127443
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.59058 +/- 0.0152915 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.59058 @ 95%CL (1 toyMC)
median expected limit: r < 9.59058 @ 95%CL (1 toyMC)
   68% expected band : 9.59058 < r < 9.59058
   95% expected band : 9.59058 < r < 9.59058
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1703714974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.23443 +/- 0.0121701 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.23443 @ 95%CL (1 toyMC)
median expected limit: r < 6.23443 @ 95%CL (1 toyMC)
   68% expected band : 6.23443 < r < 6.23443
   95% expected band : 6.23443 < r < 6.23443
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1492036697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.92675 +/- 0.0145787 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.92675 @ 95%CL (1 toyMC)
median expected limit: r < 7.92675 @ 95%CL (1 toyMC)
   68% expected band : 7.92675 < r < 7.92675
   95% expected band : 7.92675 < r < 7.92675
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 895266186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.93407 +/- 0.0171065 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 9.93407 @ 95%CL (1 toyMC)
median expected limit: r < 9.93407 @ 95%CL (1 toyMC)
   68% expected band : 9.93407 < r < 9.93407
   95% expected band : 9.93407 < r < 9.93407
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1935548959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.22159 +/- 0.0163438 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.22159 @ 95%CL (1 toyMC)
median expected limit: r < 8.22159 @ 95%CL (1 toyMC)
   68% expected band : 8.22159 < r < 8.22159
   95% expected band : 8.22159 < r < 8.22159
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -659927772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.66229 +/- 0.0141547 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.66229 @ 95%CL (1 toyMC)
median expected limit: r < 8.66229 @ 95%CL (1 toyMC)
   68% expected band : 8.66229 < r < 8.66229
   95% expected band : 8.66229 < r < 8.66229
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -640507308
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.2097 +/- 0.016881 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.2097 @ 95%CL (1 toyMC)
median expected limit: r < 11.2097 @ 95%CL (1 toyMC)
   68% expected band : 11.2097 < r < 11.2097
   95% expected band : 11.2097 < r < 11.2097
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1059125781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.36787 +/- 0.0163489 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.36787 @ 95%CL (1 toyMC)
median expected limit: r < 8.36787 @ 95%CL (1 toyMC)
   68% expected band : 8.36787 < r < 8.36787
   95% expected band : 8.36787 < r < 8.36787
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1439451545
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.21971 +/- 0.0148656 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.21971 @ 95%CL (1 toyMC)
median expected limit: r < 8.21971 @ 95%CL (1 toyMC)
   68% expected band : 8.21971 < r < 8.21971
   95% expected band : 8.21971 < r < 8.21971
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -6365418
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.161 +/- 0.0148336 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.161 @ 95%CL (1 toyMC)
median expected limit: r < 11.161 @ 95%CL (1 toyMC)
   68% expected band : 11.161 < r < 11.161
   95% expected band : 11.161 < r < 11.161
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 276558308
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.0226 +/- 0.0159808 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.0226 @ 95%CL (1 toyMC)
median expected limit: r < 12.0226 @ 95%CL (1 toyMC)
   68% expected band : 12.0226 < r < 12.0226
   95% expected band : 12.0226 < r < 12.0226
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -490276014
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.60835 +/- 0.0144406 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.60835 @ 95%CL (1 toyMC)
median expected limit: r < 7.60835 @ 95%CL (1 toyMC)
   68% expected band : 7.60835 < r < 7.60835
   95% expected band : 7.60835 < r < 7.60835
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 665269287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9924 +/- 0.0142596 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.9924 @ 95%CL (1 toyMC)
median expected limit: r < 10.9924 @ 95%CL (1 toyMC)
   68% expected band : 10.9924 < r < 10.9924
   95% expected band : 10.9924 < r < 10.9924
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -836155882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.4115 +/- 0.017428 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.4115 @ 95%CL (1 toyMC)
median expected limit: r < 11.4115 @ 95%CL (1 toyMC)
   68% expected band : 11.4115 < r < 11.4115
   95% expected band : 11.4115 < r < 11.4115
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1965619528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.33214 +/- 0.0144989 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.33214 @ 95%CL (1 toyMC)
median expected limit: r < 8.33214 @ 95%CL (1 toyMC)
   68% expected band : 8.33214 < r < 8.33214
   95% expected band : 8.33214 < r < 8.33214
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -934382395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.2119 +/- 0.010932 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 14.2119 @ 95%CL (1 toyMC)
median expected limit: r < 14.2119 @ 95%CL (1 toyMC)
   68% expected band : 14.2119 < r < 14.2119
   95% expected band : 14.2119 < r < 14.2119
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 717918251
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.35649 +/- 0.0160295 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.35649 @ 95%CL (1 toyMC)
median expected limit: r < 8.35649 @ 95%CL (1 toyMC)
   68% expected band : 8.35649 < r < 8.35649
   95% expected band : 8.35649 < r < 8.35649
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1576888370
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.59526 +/- 0.0170977 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.59526 @ 95%CL (1 toyMC)
median expected limit: r < 7.59526 @ 95%CL (1 toyMC)
   68% expected band : 7.59526 < r < 7.59526
   95% expected band : 7.59526 < r < 7.59526
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -680176801
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.18889 +/- 0.0135362 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.18889 @ 95%CL (1 toyMC)
median expected limit: r < 6.18889 @ 95%CL (1 toyMC)
   68% expected band : 6.18889 < r < 6.18889
   95% expected band : 6.18889 < r < 6.18889
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 241773448
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.43313 +/- 0.0135192 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.43313 @ 95%CL (1 toyMC)
median expected limit: r < 7.43313 @ 95%CL (1 toyMC)
   68% expected band : 7.43313 < r < 7.43313
   95% expected band : 7.43313 < r < 7.43313
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -906891920
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.44387 +/- 0.0165525 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.44387 @ 95%CL (1 toyMC)
median expected limit: r < 7.44387 @ 95%CL (1 toyMC)
   68% expected band : 7.44387 < r < 7.44387
   95% expected band : 7.44387 < r < 7.44387
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 436770662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.80057 +/- 0.013882 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.80057 @ 95%CL (1 toyMC)
median expected limit: r < 8.80057 @ 95%CL (1 toyMC)
   68% expected band : 8.80057 < r < 8.80057
   95% expected band : 8.80057 < r < 8.80057
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 745110286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.51559 +/- 0.0135706 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.51559 @ 95%CL (1 toyMC)
median expected limit: r < 6.51559 @ 95%CL (1 toyMC)
   68% expected band : 6.51559 < r < 6.51559
   95% expected band : 6.51559 < r < 6.51559
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1069213817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.77647 +/- 0.017376 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.77647 @ 95%CL (1 toyMC)
median expected limit: r < 8.77647 @ 95%CL (1 toyMC)
   68% expected band : 8.77647 < r < 8.77647
   95% expected band : 8.77647 < r < 8.77647
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2005312384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.86302 +/- 0.0138668 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.86302 @ 95%CL (1 toyMC)
median expected limit: r < 7.86302 @ 95%CL (1 toyMC)
   68% expected band : 7.86302 < r < 7.86302
   95% expected band : 7.86302 < r < 7.86302
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 978329484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.05819 +/- 0.0120473 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.05819 @ 95%CL (1 toyMC)
median expected limit: r < 7.05819 @ 95%CL (1 toyMC)
   68% expected band : 7.05819 < r < 7.05819
   95% expected band : 7.05819 < r < 7.05819
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2085517219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.12098 +/- 0.0161058 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.12098 @ 95%CL (1 toyMC)
median expected limit: r < 8.12098 @ 95%CL (1 toyMC)
   68% expected band : 8.12098 < r < 8.12098
   95% expected band : 8.12098 < r < 8.12098
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -967270159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.29369 +/- 0.0146092 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.29369 @ 95%CL (1 toyMC)
median expected limit: r < 6.29369 @ 95%CL (1 toyMC)
   68% expected band : 6.29369 < r < 6.29369
   95% expected band : 6.29369 < r < 6.29369
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -435324660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.016 +/- 0.0130888 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.016 @ 95%CL (1 toyMC)
median expected limit: r < 6.016 @ 95%CL (1 toyMC)
   68% expected band : 6.016 < r < 6.016
   95% expected band : 6.016 < r < 6.016
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1278464252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7921 +/- 0.0138289 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 12.7921 @ 95%CL (1 toyMC)
median expected limit: r < 12.7921 @ 95%CL (1 toyMC)
   68% expected band : 12.7921 < r < 12.7921
   95% expected band : 12.7921 < r < 12.7921
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1021681295.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1033950024.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1059125781.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1067710240.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1069213817.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1138113880.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-117966831.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1242098918.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1278464252.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1318906685.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1471640961.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1629193604.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1655639918.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1678691887.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1703714974.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1735471.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1766037561.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1778292424.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1784735770.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1833812170.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1842960860.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1845916236.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1864127443.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1879471318.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1935548959.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-2106025236.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-2109099184.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-2147466875.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-435324660.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-451213854.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-469973020.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-490276014.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-5124292.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-619422747.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-6365418.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-640507308.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-659927772.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-665006116.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-680176801.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-710047617.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-823832535.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-836155882.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-866369300.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-896814589.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-906891920.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-934382395.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-967270159.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.1065907482.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1210135097.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1262609970.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1319872792.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1349319900.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1369549107.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1407590456.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1433734779.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1439451545.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1481790958.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1492036697.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1499752356.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1576888370.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1583420836.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1600071363.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1655542650.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1661168295.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.171415148.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1772006188.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1897948699.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1965619528.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.2005312384.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.2019116708.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.2085517219.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.2140418034.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.241773448.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.249813692.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.276558308.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.293914212.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.313382812.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.345709815.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.376845325.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.401636779.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.419905210.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.436770662.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.494896098.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.588450789.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.665269287.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.690819897.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.717918251.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.745110286.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.761497988.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.762925710.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.790056830.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.807221627.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.845191263.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.850873035.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.886772565.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.895266186.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.903536094.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.907550474.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.929569973.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.978329484.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1164682356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.94856 +/- 0.0145427 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 8.94856 @ 95%CL (1 toyMC)
median expected limit: r < 8.94856 @ 95%CL (1 toyMC)
   68% expected band : 8.94856 < r < 8.94856
   95% expected band : 8.94856 < r < 8.94856
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1825237145
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9138 +/- 0.0114678 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.9138 @ 95%CL (1 toyMC)
median expected limit: r < 10.9138 @ 95%CL (1 toyMC)
   68% expected band : 10.9138 < r < 10.9138
   95% expected band : 10.9138 < r < 10.9138
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -24320976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.46937 +/- 0.0129437 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.46937 @ 95%CL (1 toyMC)
median expected limit: r < 7.46937 @ 95%CL (1 toyMC)
   68% expected band : 7.46937 < r < 7.46937
   95% expected band : 7.46937 < r < 7.46937
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1559783056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.13576 +/- 0.0146305 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.13576 @ 95%CL (1 toyMC)
median expected limit: r < 8.13576 @ 95%CL (1 toyMC)
   68% expected band : 8.13576 < r < 8.13576
   95% expected band : 8.13576 < r < 8.13576
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1925519737
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.67762 +/- 0.0149022 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.67762 @ 95%CL (1 toyMC)
median expected limit: r < 8.67762 @ 95%CL (1 toyMC)
   68% expected band : 8.67762 < r < 8.67762
   95% expected band : 8.67762 < r < 8.67762
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1413714783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.86647 +/- 0.0144098 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.86647 @ 95%CL (1 toyMC)
median expected limit: r < 6.86647 @ 95%CL (1 toyMC)
   68% expected band : 6.86647 < r < 6.86647
   95% expected band : 6.86647 < r < 6.86647
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1352631506
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.8641 +/- 0.0124951 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.8641 @ 95%CL (1 toyMC)
median expected limit: r < 13.8641 @ 95%CL (1 toyMC)
   68% expected band : 13.8641 < r < 13.8641
   95% expected band : 13.8641 < r < 13.8641
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 27112105
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.1127 +/- 0.0157504 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.1127 @ 95%CL (1 toyMC)
median expected limit: r < 8.1127 @ 95%CL (1 toyMC)
   68% expected band : 8.1127 < r < 8.1127
   95% expected band : 8.1127 < r < 8.1127
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1540070556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.7997 +/- 0.0146532 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.7997 @ 95%CL (1 toyMC)
median expected limit: r < 10.7997 @ 95%CL (1 toyMC)
   68% expected band : 10.7997 < r < 10.7997
   95% expected band : 10.7997 < r < 10.7997
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1094639913
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.81992 +/- 0.016157 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.81992 @ 95%CL (1 toyMC)
median expected limit: r < 6.81992 @ 95%CL (1 toyMC)
   68% expected band : 6.81992 < r < 6.81992
   95% expected band : 6.81992 < r < 6.81992
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1824974190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.29695 +/- 0.0143738 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.29695 @ 95%CL (1 toyMC)
median expected limit: r < 7.29695 @ 95%CL (1 toyMC)
   68% expected band : 7.29695 < r < 7.29695
   95% expected band : 7.29695 < r < 7.29695
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1627658753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.13689 +/- 0.0143392 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.13689 @ 95%CL (1 toyMC)
median expected limit: r < 8.13689 @ 95%CL (1 toyMC)
   68% expected band : 8.13689 < r < 8.13689
   95% expected band : 8.13689 < r < 8.13689
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1258709535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2742 +/- 0.0180052 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 10.2742 @ 95%CL (1 toyMC)
median expected limit: r < 10.2742 @ 95%CL (1 toyMC)
   68% expected band : 10.2742 < r < 10.2742
   95% expected band : 10.2742 < r < 10.2742
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1771104018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6014 +/- 0.0170401 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.6014 @ 95%CL (1 toyMC)
median expected limit: r < 10.6014 @ 95%CL (1 toyMC)
   68% expected band : 10.6014 < r < 10.6014
   95% expected band : 10.6014 < r < 10.6014
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1501861271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.15214 +/- 0.00997055 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.15214 @ 95%CL (1 toyMC)
median expected limit: r < 8.15214 @ 95%CL (1 toyMC)
   68% expected band : 8.15214 < r < 8.15214
   95% expected band : 8.15214 < r < 8.15214
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1961344921
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.3175 +/- 0.0194002 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.3175 @ 95%CL (1 toyMC)
median expected limit: r < 11.3175 @ 95%CL (1 toyMC)
   68% expected band : 11.3175 < r < 11.3175
   95% expected band : 11.3175 < r < 11.3175
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 293037461
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.44927 +/- 0.0172059 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.44927 @ 95%CL (1 toyMC)
median expected limit: r < 9.44927 @ 95%CL (1 toyMC)
   68% expected band : 9.44927 < r < 9.44927
   95% expected band : 9.44927 < r < 9.44927
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 490814841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.30518 +/- 0.0163478 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.30518 @ 95%CL (1 toyMC)
median expected limit: r < 8.30518 @ 95%CL (1 toyMC)
   68% expected band : 8.30518 < r < 8.30518
   95% expected band : 8.30518 < r < 8.30518
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -541248193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.2669 +/- 0.0133421 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.2669 @ 95%CL (1 toyMC)
median expected limit: r < 12.2669 @ 95%CL (1 toyMC)
   68% expected band : 12.2669 < r < 12.2669
   95% expected band : 12.2669 < r < 12.2669
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -74475604
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.57863 +/- 0.0144164 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.57863 @ 95%CL (1 toyMC)
median expected limit: r < 7.57863 @ 95%CL (1 toyMC)
   68% expected band : 7.57863 < r < 7.57863
   95% expected band : 7.57863 < r < 7.57863
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -232925826
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.28544 +/- 0.0119509 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.28544 @ 95%CL (1 toyMC)
median expected limit: r < 6.28544 @ 95%CL (1 toyMC)
   68% expected band : 6.28544 < r < 6.28544
   95% expected band : 6.28544 < r < 6.28544
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1432888436
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.5357 +/- 0.0157302 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.5357 @ 95%CL (1 toyMC)
median expected limit: r < 8.5357 @ 95%CL (1 toyMC)
   68% expected band : 8.5357 < r < 8.5357
   95% expected band : 8.5357 < r < 8.5357
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1307869312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.92363 +/- 0.017653 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.92363 @ 95%CL (1 toyMC)
median expected limit: r < 9.92363 @ 95%CL (1 toyMC)
   68% expected band : 9.92363 < r < 9.92363
   95% expected band : 9.92363 < r < 9.92363
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1860807956
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.489 +/- 0.0148464 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.489 @ 95%CL (1 toyMC)
median expected limit: r < 10.489 @ 95%CL (1 toyMC)
   68% expected band : 10.489 < r < 10.489
   95% expected band : 10.489 < r < 10.489
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -841948683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6477 +/- 0.0142583 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.6477 @ 95%CL (1 toyMC)
median expected limit: r < 11.6477 @ 95%CL (1 toyMC)
   68% expected band : 11.6477 < r < 11.6477
   95% expected band : 11.6477 < r < 11.6477
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1556929858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.27245 +/- 0.0132474 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.27245 @ 95%CL (1 toyMC)
median expected limit: r < 8.27245 @ 95%CL (1 toyMC)
   68% expected band : 8.27245 < r < 8.27245
   95% expected band : 8.27245 < r < 8.27245
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 646516454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.7008 +/- 0.0156227 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.7008 @ 95%CL (1 toyMC)
median expected limit: r < 7.7008 @ 95%CL (1 toyMC)
   68% expected band : 7.7008 < r < 7.7008
   95% expected band : 7.7008 < r < 7.7008
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1600754582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.5214 +/- 0.0162678 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.5214 @ 95%CL (1 toyMC)
median expected limit: r < 8.5214 @ 95%CL (1 toyMC)
   68% expected band : 8.5214 < r < 8.5214
   95% expected band : 8.5214 < r < 8.5214
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2086866821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.1271 +/- 0.0135358 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.1271 @ 95%CL (1 toyMC)
median expected limit: r < 12.1271 @ 95%CL (1 toyMC)
   68% expected band : 12.1271 < r < 12.1271
   95% expected band : 12.1271 < r < 12.1271
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 200202792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.88902 +/- 0.0181177 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.88902 @ 95%CL (1 toyMC)
median expected limit: r < 7.88902 @ 95%CL (1 toyMC)
   68% expected band : 7.88902 < r < 7.88902
   95% expected band : 7.88902 < r < 7.88902
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 902371114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.70904 +/- 0.0144737 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.70904 @ 95%CL (1 toyMC)
median expected limit: r < 7.70904 @ 95%CL (1 toyMC)
   68% expected band : 7.70904 < r < 7.70904
   95% expected band : 7.70904 < r < 7.70904
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -920636526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.60017 +/- 0.0146917 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.60017 @ 95%CL (1 toyMC)
median expected limit: r < 8.60017 @ 95%CL (1 toyMC)
   68% expected band : 8.60017 < r < 8.60017
   95% expected band : 8.60017 < r < 8.60017
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1414597363
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9844 +/- 0.0203325 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.9844 @ 95%CL (1 toyMC)
median expected limit: r < 10.9844 @ 95%CL (1 toyMC)
   68% expected band : 10.9844 < r < 10.9844
   95% expected band : 10.9844 < r < 10.9844
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1379860797
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.3167 +/- 0.016664 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.3167 @ 95%CL (1 toyMC)
median expected limit: r < 11.3167 @ 95%CL (1 toyMC)
   68% expected band : 11.3167 < r < 11.3167
   95% expected band : 11.3167 < r < 11.3167
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1979810050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.6719 +/- 0.0148873 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 12.6719 @ 95%CL (1 toyMC)
median expected limit: r < 12.6719 @ 95%CL (1 toyMC)
   68% expected band : 12.6719 < r < 12.6719
   95% expected band : 12.6719 < r < 12.6719
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1683992256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.48441 +/- 0.014362 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.48441 @ 95%CL (1 toyMC)
median expected limit: r < 7.48441 @ 95%CL (1 toyMC)
   68% expected band : 7.48441 < r < 7.48441
   95% expected band : 7.48441 < r < 7.48441
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1679231641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.65922 +/- 0.0126942 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.65922 @ 95%CL (1 toyMC)
median expected limit: r < 7.65922 @ 95%CL (1 toyMC)
   68% expected band : 7.65922 < r < 7.65922
   95% expected band : 7.65922 < r < 7.65922
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1739872250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.12087 +/- 0.0107315 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.12087 @ 95%CL (1 toyMC)
median expected limit: r < 7.12087 @ 95%CL (1 toyMC)
   68% expected band : 7.12087 < r < 7.12087
   95% expected band : 7.12087 < r < 7.12087
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 865932173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.30233 +/- 0.0124438 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.30233 @ 95%CL (1 toyMC)
median expected limit: r < 8.30233 @ 95%CL (1 toyMC)
   68% expected band : 8.30233 < r < 8.30233
   95% expected band : 8.30233 < r < 8.30233
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -585543973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1642 +/- 0.0144484 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.1642 @ 95%CL (1 toyMC)
median expected limit: r < 10.1642 @ 95%CL (1 toyMC)
   68% expected band : 10.1642 < r < 10.1642
   95% expected band : 10.1642 < r < 10.1642
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1661405900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.59751 +/- 0.0142057 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.59751 @ 95%CL (1 toyMC)
median expected limit: r < 7.59751 @ 95%CL (1 toyMC)
   68% expected band : 7.59751 < r < 7.59751
   95% expected band : 7.59751 < r < 7.59751
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1829239835
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.97289 +/- 0.0177494 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.97289 @ 95%CL (1 toyMC)
median expected limit: r < 6.97289 @ 95%CL (1 toyMC)
   68% expected band : 6.97289 < r < 6.97289
   95% expected band : 6.97289 < r < 6.97289
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1149622440
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.60541 +/- 0.0155177 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.60541 @ 95%CL (1 toyMC)
median expected limit: r < 8.60541 @ 95%CL (1 toyMC)
   68% expected band : 8.60541 < r < 8.60541
   95% expected band : 8.60541 < r < 8.60541
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1291921319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3751 +/- 0.0154935 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.3751 @ 95%CL (1 toyMC)
median expected limit: r < 10.3751 @ 95%CL (1 toyMC)
   68% expected band : 10.3751 < r < 10.3751
   95% expected band : 10.3751 < r < 10.3751
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 303966350
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.9523 +/- 0.00934696 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 16.9523 @ 95%CL (1 toyMC)
median expected limit: r < 16.9523 @ 95%CL (1 toyMC)
   68% expected band : 16.9523 < r < 16.9523
   95% expected band : 16.9523 < r < 16.9523
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -820769302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.78368 +/- 0.0189779 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.78368 @ 95%CL (1 toyMC)
median expected limit: r < 9.78368 @ 95%CL (1 toyMC)
   68% expected band : 9.78368 < r < 9.78368
   95% expected band : 9.78368 < r < 9.78368
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 8141518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.40956 +/- 0.0162599 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.40956 @ 95%CL (1 toyMC)
median expected limit: r < 8.40956 @ 95%CL (1 toyMC)
   68% expected band : 8.40956 < r < 8.40956
   95% expected band : 8.40956 < r < 8.40956
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1446370059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.78727 +/- 0.0134396 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.78727 @ 95%CL (1 toyMC)
median expected limit: r < 6.78727 @ 95%CL (1 toyMC)
   68% expected band : 6.78727 < r < 6.78727
   95% expected band : 6.78727 < r < 6.78727
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1711334725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.58503 +/- 0.0165479 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.58503 @ 95%CL (1 toyMC)
median expected limit: r < 8.58503 @ 95%CL (1 toyMC)
   68% expected band : 8.58503 < r < 8.58503
   95% expected band : 8.58503 < r < 8.58503
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1549224429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.10083 +/- 0.0129096 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.10083 @ 95%CL (1 toyMC)
median expected limit: r < 7.10083 @ 95%CL (1 toyMC)
   68% expected band : 7.10083 < r < 7.10083
   95% expected band : 7.10083 < r < 7.10083
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -965438808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.1866 +/- 0.0146555 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.1866 @ 95%CL (1 toyMC)
median expected limit: r < 11.1866 @ 95%CL (1 toyMC)
   68% expected band : 11.1866 < r < 11.1866
   95% expected band : 11.1866 < r < 11.1866
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1409232597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.0395 +/- 0.0187675 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 12.0395 @ 95%CL (1 toyMC)
median expected limit: r < 12.0395 @ 95%CL (1 toyMC)
   68% expected band : 12.0395 < r < 12.0395
   95% expected band : 12.0395 < r < 12.0395
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 104721441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.11992 +/- 0.012588 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.11992 @ 95%CL (1 toyMC)
median expected limit: r < 6.11992 @ 95%CL (1 toyMC)
   68% expected band : 6.11992 < r < 6.11992
   95% expected band : 6.11992 < r < 6.11992
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 959339901
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.2824 +/- 0.0130138 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.2824 @ 95%CL (1 toyMC)
median expected limit: r < 6.2824 @ 95%CL (1 toyMC)
   68% expected band : 6.2824 < r < 6.2824
   95% expected band : 6.2824 < r < 6.2824
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1206541409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.12462 +/- 0.0118254 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.12462 @ 95%CL (1 toyMC)
median expected limit: r < 8.12462 @ 95%CL (1 toyMC)
   68% expected band : 8.12462 < r < 8.12462
   95% expected band : 8.12462 < r < 8.12462
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1686727550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.15363 +/- 0.016164 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.15363 @ 95%CL (1 toyMC)
median expected limit: r < 9.15363 @ 95%CL (1 toyMC)
   68% expected band : 9.15363 < r < 9.15363
   95% expected band : 9.15363 < r < 9.15363
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1570776031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.40621 +/- 0.0135444 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.40621 @ 95%CL (1 toyMC)
median expected limit: r < 8.40621 @ 95%CL (1 toyMC)
   68% expected band : 8.40621 < r < 8.40621
   95% expected band : 8.40621 < r < 8.40621
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -471409843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.57784 +/- 0.014203 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.57784 @ 95%CL (1 toyMC)
median expected limit: r < 7.57784 @ 95%CL (1 toyMC)
   68% expected band : 7.57784 < r < 7.57784
   95% expected band : 7.57784 < r < 7.57784
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1206971837
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8973 +/- 0.0154709 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 10.8973 @ 95%CL (1 toyMC)
median expected limit: r < 10.8973 @ 95%CL (1 toyMC)
   68% expected band : 10.8973 < r < 10.8973
   95% expected band : 10.8973 < r < 10.8973
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -528342721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.13661 +/- 0.0127796 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.13661 @ 95%CL (1 toyMC)
median expected limit: r < 8.13661 @ 95%CL (1 toyMC)
   68% expected band : 8.13661 < r < 8.13661
   95% expected band : 8.13661 < r < 8.13661
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1892311449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.2426 +/- 0.0142339 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.2426 @ 95%CL (1 toyMC)
median expected limit: r < 9.2426 @ 95%CL (1 toyMC)
   68% expected band : 9.2426 < r < 9.2426
   95% expected band : 9.2426 < r < 9.2426
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1751574841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.76644 +/- 0.0167564 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.76644 @ 95%CL (1 toyMC)
median expected limit: r < 8.76644 @ 95%CL (1 toyMC)
   68% expected band : 8.76644 < r < 8.76644
   95% expected band : 8.76644 < r < 8.76644
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1651838277
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.40237 +/- 0.016212 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.40237 @ 95%CL (1 toyMC)
median expected limit: r < 8.40237 @ 95%CL (1 toyMC)
   68% expected band : 8.40237 < r < 8.40237
   95% expected band : 8.40237 < r < 8.40237
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -256723406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.7148 +/- 0.0180912 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.7148 @ 95%CL (1 toyMC)
median expected limit: r < 7.7148 @ 95%CL (1 toyMC)
   68% expected band : 7.7148 < r < 7.7148
   95% expected band : 7.7148 < r < 7.7148
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -92326422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.62456 +/- 0.0124443 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.62456 @ 95%CL (1 toyMC)
median expected limit: r < 7.62456 @ 95%CL (1 toyMC)
   68% expected band : 7.62456 < r < 7.62456
   95% expected band : 7.62456 < r < 7.62456
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1600731123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.28289 +/- 0.0152745 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.28289 @ 95%CL (1 toyMC)
median expected limit: r < 9.28289 @ 95%CL (1 toyMC)
   68% expected band : 9.28289 < r < 9.28289
   95% expected band : 9.28289 < r < 9.28289
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -647389434
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.8524 +/- 0.0159625 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.8524 @ 95%CL (1 toyMC)
median expected limit: r < 7.8524 @ 95%CL (1 toyMC)
   68% expected band : 7.8524 < r < 7.8524
   95% expected band : 7.8524 < r < 7.8524
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1236319820
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.6798 +/- 0.0148062 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.6798 @ 95%CL (1 toyMC)
median expected limit: r < 8.6798 @ 95%CL (1 toyMC)
   68% expected band : 8.6798 < r < 8.6798
   95% expected band : 8.6798 < r < 8.6798
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1305071389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.6149 +/- 0.0174319 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.6149 @ 95%CL (1 toyMC)
median expected limit: r < 9.6149 @ 95%CL (1 toyMC)
   68% expected band : 9.6149 < r < 9.6149
   95% expected band : 9.6149 < r < 9.6149
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 534196277
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.66064 +/- 0.0100584 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.66064 @ 95%CL (1 toyMC)
median expected limit: r < 6.66064 @ 95%CL (1 toyMC)
   68% expected band : 6.66064 < r < 6.66064
   95% expected band : 6.66064 < r < 6.66064
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 918447764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.1678 +/- 0.0160002 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.1678 @ 95%CL (1 toyMC)
median expected limit: r < 13.1678 @ 95%CL (1 toyMC)
   68% expected band : 13.1678 < r < 13.1678
   95% expected band : 13.1678 < r < 13.1678
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1992822096
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.25801 +/- 0.0138144 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.25801 @ 95%CL (1 toyMC)
median expected limit: r < 6.25801 @ 95%CL (1 toyMC)
   68% expected band : 6.25801 < r < 6.25801
   95% expected band : 6.25801 < r < 6.25801
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1798945350
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6169 +/- 0.015107 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.6169 @ 95%CL (1 toyMC)
median expected limit: r < 10.6169 @ 95%CL (1 toyMC)
   68% expected band : 10.6169 < r < 10.6169
   95% expected band : 10.6169 < r < 10.6169
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1244655514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.25519 +/- 0.0117042 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.25519 @ 95%CL (1 toyMC)
median expected limit: r < 6.25519 @ 95%CL (1 toyMC)
   68% expected band : 6.25519 < r < 6.25519
   95% expected band : 6.25519 < r < 6.25519
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1408095133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9284 +/- 0.016482 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 10.9284 @ 95%CL (1 toyMC)
median expected limit: r < 10.9284 @ 95%CL (1 toyMC)
   68% expected band : 10.9284 < r < 10.9284
   95% expected band : 10.9284 < r < 10.9284
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -585635469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.77551 +/- 0.0142127 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.77551 @ 95%CL (1 toyMC)
median expected limit: r < 6.77551 @ 95%CL (1 toyMC)
   68% expected band : 6.77551 < r < 6.77551
   95% expected band : 6.77551 < r < 6.77551
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1495965858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.41573 +/- 0.0131368 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.41573 @ 95%CL (1 toyMC)
median expected limit: r < 7.41573 @ 95%CL (1 toyMC)
   68% expected band : 7.41573 < r < 7.41573
   95% expected band : 7.41573 < r < 7.41573
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 341303706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.95286 +/- 0.0141663 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 7.95286 @ 95%CL (1 toyMC)
median expected limit: r < 7.95286 @ 95%CL (1 toyMC)
   68% expected band : 7.95286 < r < 7.95286
   95% expected band : 7.95286 < r < 7.95286
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -662834287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.98973 +/- 0.017675 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.98973 @ 95%CL (1 toyMC)
median expected limit: r < 8.98973 @ 95%CL (1 toyMC)
   68% expected band : 8.98973 < r < 8.98973
   95% expected band : 8.98973 < r < 8.98973
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1693107946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.40302 +/- 0.015372 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.40302 @ 95%CL (1 toyMC)
median expected limit: r < 9.40302 @ 95%CL (1 toyMC)
   68% expected band : 9.40302 < r < 9.40302
   95% expected band : 9.40302 < r < 9.40302
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1469445177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.87428 +/- 0.0126509 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 9.87428 @ 95%CL (1 toyMC)
median expected limit: r < 9.87428 @ 95%CL (1 toyMC)
   68% expected band : 9.87428 < r < 9.87428
   95% expected band : 9.87428 < r < 9.87428
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 334126898
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7383 +/- 0.0137056 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 12.7383 @ 95%CL (1 toyMC)
median expected limit: r < 12.7383 @ 95%CL (1 toyMC)
   68% expected band : 12.7383 < r < 12.7383
   95% expected band : 12.7383 < r < 12.7383
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1032087047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.0624 +/- 0.0111301 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 14.0624 @ 95%CL (1 toyMC)
median expected limit: r < 14.0624 @ 95%CL (1 toyMC)
   68% expected band : 14.0624 < r < 14.0624
   95% expected band : 14.0624 < r < 14.0624
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 963502110
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.4071 +/- 0.0124531 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 14.4071 @ 95%CL (1 toyMC)
median expected limit: r < 14.4071 @ 95%CL (1 toyMC)
   68% expected band : 14.4071 < r < 14.4071
   95% expected band : 14.4071 < r < 14.4071
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1533789437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0272 +/- 0.0156757 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.0272 @ 95%CL (1 toyMC)
median expected limit: r < 10.0272 @ 95%CL (1 toyMC)
   68% expected band : 10.0272 < r < 10.0272
   95% expected band : 10.0272 < r < 10.0272
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1114009616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.7064 +/- 0.0172088 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.7064 @ 95%CL (1 toyMC)
median expected limit: r < 6.7064 @ 95%CL (1 toyMC)
   68% expected band : 6.7064 < r < 6.7064
   95% expected band : 6.7064 < r < 6.7064
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 314555769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.18867 +/- 0.0158718 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.18867 @ 95%CL (1 toyMC)
median expected limit: r < 7.18867 @ 95%CL (1 toyMC)
   68% expected band : 7.18867 < r < 7.18867
   95% expected band : 7.18867 < r < 7.18867
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2132813436
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.8019 +/- 0.0133066 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.8019 @ 95%CL (1 toyMC)
median expected limit: r < 12.8019 @ 95%CL (1 toyMC)
   68% expected band : 12.8019 < r < 12.8019
   95% expected band : 12.8019 < r < 12.8019
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2026482008
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.26455 +/- 0.0129872 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.26455 @ 95%CL (1 toyMC)
median expected limit: r < 7.26455 @ 95%CL (1 toyMC)
   68% expected band : 7.26455 < r < 7.26455
   95% expected band : 7.26455 < r < 7.26455
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1318226880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.10464 +/- 0.0127212 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.10464 @ 95%CL (1 toyMC)
median expected limit: r < 7.10464 @ 95%CL (1 toyMC)
   68% expected band : 7.10464 < r < 7.10464
   95% expected band : 7.10464 < r < 7.10464
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -272774587
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.57522 +/- 0.0151941 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.57522 @ 95%CL (1 toyMC)
median expected limit: r < 7.57522 @ 95%CL (1 toyMC)
   68% expected band : 7.57522 < r < 7.57522
   95% expected band : 7.57522 < r < 7.57522
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 916779897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.06998 +/- 0.0147083 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.06998 @ 95%CL (1 toyMC)
median expected limit: r < 7.06998 @ 95%CL (1 toyMC)
   68% expected band : 7.06998 < r < 7.06998
   95% expected band : 7.06998 < r < 7.06998
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1872563255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.43257 +/- 0.0123462 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.43257 @ 95%CL (1 toyMC)
median expected limit: r < 7.43257 @ 95%CL (1 toyMC)
   68% expected band : 7.43257 < r < 7.43257
   95% expected band : 7.43257 < r < 7.43257
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1492195085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.98702 +/- 0.0159623 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.98702 @ 95%CL (1 toyMC)
median expected limit: r < 8.98702 @ 95%CL (1 toyMC)
   68% expected band : 8.98702 < r < 8.98702
   95% expected band : 8.98702 < r < 8.98702
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1526738805
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.488 +/- 0.0159486 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.488 @ 95%CL (1 toyMC)
median expected limit: r < 12.488 @ 95%CL (1 toyMC)
   68% expected band : 12.488 < r < 12.488
   95% expected band : 12.488 < r < 12.488
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1958912431
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.80652 +/- 0.0146921 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.80652 @ 95%CL (1 toyMC)
median expected limit: r < 7.80652 @ 95%CL (1 toyMC)
   68% expected band : 7.80652 < r < 7.80652
   95% expected band : 7.80652 < r < 7.80652
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2003999811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.54993 +/- 0.0165317 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.54993 @ 95%CL (1 toyMC)
median expected limit: r < 7.54993 @ 95%CL (1 toyMC)
   68% expected band : 7.54993 < r < 7.54993
   95% expected band : 7.54993 < r < 7.54993
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -779044865
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.26665 +/- 0.0111951 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.26665 @ 95%CL (1 toyMC)
median expected limit: r < 6.26665 @ 95%CL (1 toyMC)
   68% expected band : 6.26665 < r < 6.26665
   95% expected band : 6.26665 < r < 6.26665
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2023198822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.3169 +/- 0.0131198 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.3169 @ 95%CL (1 toyMC)
median expected limit: r < 7.3169 @ 95%CL (1 toyMC)
   68% expected band : 7.3169 < r < 7.3169
   95% expected band : 7.3169 < r < 7.3169
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 886335870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.209 +/- 0.0158809 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.209 @ 95%CL (1 toyMC)
median expected limit: r < 10.209 @ 95%CL (1 toyMC)
   68% expected band : 10.209 < r < 10.209
   95% expected band : 10.209 < r < 10.209
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1164682356.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1258709535.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1307869312.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1318226880.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1352631506.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1409232597.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1413714783.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1414597363.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1432888436.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1446370059.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1495965858.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1533789437.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1556929858.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1559783056.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1570776031.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1600754582.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1627658753.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1679231641.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1683992256.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1686727550.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1693107946.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1829239835.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1860807956.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1872563255.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1925519737.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-2026482008.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-2086866821.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-232925826.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-24320976.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-256723406.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-272774587.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-471409843.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-528342721.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-541248193.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-585543973.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-585635469.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-647389434.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-662834287.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-74475604.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-779044865.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-820769302.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-841948683.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-920636526.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-92326422.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-965438808.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.1032087047.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.104721441.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.1094639913.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1114009616.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1149622440.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1206541409.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1206971837.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1236319820.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1244655514.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1291921319.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1305071389.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1379860797.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1408095133.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1469445177.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1492195085.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1501861271.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1526738805.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1540070556.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1549224429.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1600731123.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1651838277.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1661405900.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1711334725.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1739872250.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1751574841.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1771104018.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1798945350.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1824974190.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1825237145.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.1892311449.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.1958912431.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.1961344921.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.1979810050.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.1992822096.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.200202792.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.2003999811.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.2023198822.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.2132813436.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.27112105.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.293037461.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.303966350.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.314555769.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.334126898.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.341303706.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.490814841.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.534196277.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.646516454.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.8141518.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.865932173.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.886335870.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.902371114.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.916779897.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.918447764.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.959339901.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.963502110.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 743038348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.83694 +/- 0.0156761 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.83694 @ 95%CL (1 toyMC)
median expected limit: r < 7.83694 @ 95%CL (1 toyMC)
   68% expected band : 7.83694 < r < 7.83694
   95% expected band : 7.83694 < r < 7.83694
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -925432511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.53766 +/- 0.0157208 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.53766 @ 95%CL (1 toyMC)
median expected limit: r < 9.53766 @ 95%CL (1 toyMC)
   68% expected band : 9.53766 < r < 9.53766
   95% expected band : 9.53766 < r < 9.53766
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2064182202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.61459 +/- 0.0146634 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.61459 @ 95%CL (1 toyMC)
median expected limit: r < 7.61459 @ 95%CL (1 toyMC)
   68% expected band : 7.61459 < r < 7.61459
   95% expected band : 7.61459 < r < 7.61459
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1384294614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.72449 +/- 0.0125861 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.72449 @ 95%CL (1 toyMC)
median expected limit: r < 6.72449 @ 95%CL (1 toyMC)
   68% expected band : 6.72449 < r < 6.72449
   95% expected band : 6.72449 < r < 6.72449
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1102559232
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.22359 +/- 0.0186645 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.22359 @ 95%CL (1 toyMC)
median expected limit: r < 7.22359 @ 95%CL (1 toyMC)
   68% expected band : 7.22359 < r < 7.22359
   95% expected band : 7.22359 < r < 7.22359
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1897077160
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.53643 +/- 0.0154822 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.53643 @ 95%CL (1 toyMC)
median expected limit: r < 8.53643 @ 95%CL (1 toyMC)
   68% expected band : 8.53643 < r < 8.53643
   95% expected band : 8.53643 < r < 8.53643
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1538638392
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.21936 +/- 0.0156159 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.21936 @ 95%CL (1 toyMC)
median expected limit: r < 7.21936 @ 95%CL (1 toyMC)
   68% expected band : 7.21936 < r < 7.21936
   95% expected band : 7.21936 < r < 7.21936
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1421008080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.04575 +/- 0.0181178 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.04575 @ 95%CL (1 toyMC)
median expected limit: r < 9.04575 @ 95%CL (1 toyMC)
   68% expected band : 9.04575 < r < 9.04575
   95% expected band : 9.04575 < r < 9.04575
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 181603609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.60544 +/- 0.0144292 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.60544 @ 95%CL (1 toyMC)
median expected limit: r < 7.60544 @ 95%CL (1 toyMC)
   68% expected band : 7.60544 < r < 7.60544
   95% expected band : 7.60544 < r < 7.60544
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -501639343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.0671 +/- 0.0109981 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.0671 @ 95%CL (1 toyMC)
median expected limit: r < 15.0671 @ 95%CL (1 toyMC)
   68% expected band : 15.0671 < r < 15.0671
   95% expected band : 15.0671 < r < 15.0671
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 325151662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9116 +/- 0.016341 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 10.9116 @ 95%CL (1 toyMC)
median expected limit: r < 10.9116 @ 95%CL (1 toyMC)
   68% expected band : 10.9116 < r < 10.9116
   95% expected band : 10.9116 < r < 10.9116
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1796164857
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.32444 +/- 0.0129192 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.32444 @ 95%CL (1 toyMC)
median expected limit: r < 6.32444 @ 95%CL (1 toyMC)
   68% expected band : 6.32444 < r < 6.32444
   95% expected band : 6.32444 < r < 6.32444
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 486350147
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.37129 +/- 0.01554 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.37129 @ 95%CL (1 toyMC)
median expected limit: r < 7.37129 @ 95%CL (1 toyMC)
   68% expected band : 7.37129 < r < 7.37129
   95% expected band : 7.37129 < r < 7.37129
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2054782858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.46271 +/- 0.014613 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.46271 @ 95%CL (1 toyMC)
median expected limit: r < 6.46271 @ 95%CL (1 toyMC)
   68% expected band : 6.46271 < r < 6.46271
   95% expected band : 6.46271 < r < 6.46271
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1375674115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2088 +/- 0.0150571 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.2088 @ 95%CL (1 toyMC)
median expected limit: r < 10.2088 @ 95%CL (1 toyMC)
   68% expected band : 10.2088 < r < 10.2088
   95% expected band : 10.2088 < r < 10.2088
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1429200199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.2192 +/- 0.0144151 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.2192 @ 95%CL (1 toyMC)
median expected limit: r < 12.2192 @ 95%CL (1 toyMC)
   68% expected band : 12.2192 < r < 12.2192
   95% expected band : 12.2192 < r < 12.2192
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1819242486
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.22967 +/- 0.010206 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.22967 @ 95%CL (1 toyMC)
median expected limit: r < 7.22967 @ 95%CL (1 toyMC)
   68% expected band : 7.22967 < r < 7.22967
   95% expected band : 7.22967 < r < 7.22967
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -46795232
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7829 +/- 0.0145259 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 12.7829 @ 95%CL (1 toyMC)
median expected limit: r < 12.7829 @ 95%CL (1 toyMC)
   68% expected band : 12.7829 < r < 12.7829
   95% expected band : 12.7829 < r < 12.7829
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -809805083
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.51698 +/- 0.0128469 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.51698 @ 95%CL (1 toyMC)
median expected limit: r < 6.51698 @ 95%CL (1 toyMC)
   68% expected band : 6.51698 < r < 6.51698
   95% expected band : 6.51698 < r < 6.51698
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1067503902
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.3455 +/- 0.00947676 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.3455 @ 95%CL (1 toyMC)
median expected limit: r < 15.3455 @ 95%CL (1 toyMC)
   68% expected band : 15.3455 < r < 15.3455
   95% expected band : 15.3455 < r < 15.3455
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -996619130
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.72484 +/- 0.014182 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.72484 @ 95%CL (1 toyMC)
median expected limit: r < 8.72484 @ 95%CL (1 toyMC)
   68% expected band : 8.72484 < r < 8.72484
   95% expected band : 8.72484 < r < 8.72484
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 476373027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.26052 +/- 0.0164849 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.26052 @ 95%CL (1 toyMC)
median expected limit: r < 7.26052 @ 95%CL (1 toyMC)
   68% expected band : 7.26052 < r < 7.26052
   95% expected band : 7.26052 < r < 7.26052
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1416247518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.31172 +/- 0.0135201 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.31172 @ 95%CL (1 toyMC)
median expected limit: r < 6.31172 @ 95%CL (1 toyMC)
   68% expected band : 6.31172 < r < 6.31172
   95% expected band : 6.31172 < r < 6.31172
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1647352721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.71134 +/- 0.0126266 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.71134 @ 95%CL (1 toyMC)
median expected limit: r < 6.71134 @ 95%CL (1 toyMC)
   68% expected band : 6.71134 < r < 6.71134
   95% expected band : 6.71134 < r < 6.71134
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -55273348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.36814 +/- 0.0144955 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.36814 @ 95%CL (1 toyMC)
median expected limit: r < 6.36814 @ 95%CL (1 toyMC)
   68% expected band : 6.36814 < r < 6.36814
   95% expected band : 6.36814 < r < 6.36814
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1951385753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.91016 +/- 0.01759 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.91016 @ 95%CL (1 toyMC)
median expected limit: r < 8.91016 @ 95%CL (1 toyMC)
   68% expected band : 8.91016 < r < 8.91016
   95% expected band : 8.91016 < r < 8.91016
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 571568207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.10015 +/- 0.0119188 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.10015 @ 95%CL (1 toyMC)
median expected limit: r < 8.10015 @ 95%CL (1 toyMC)
   68% expected band : 8.10015 < r < 8.10015
   95% expected band : 8.10015 < r < 8.10015
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 640126050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.45152 +/- 0.0127091 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.45152 @ 95%CL (1 toyMC)
median expected limit: r < 6.45152 @ 95%CL (1 toyMC)
   68% expected band : 6.45152 < r < 6.45152
   95% expected band : 6.45152 < r < 6.45152
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 539250394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.30154 +/- 0.0127718 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.30154 @ 95%CL (1 toyMC)
median expected limit: r < 6.30154 @ 95%CL (1 toyMC)
   68% expected band : 6.30154 < r < 6.30154
   95% expected band : 6.30154 < r < 6.30154
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 650944239
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.46787 +/- 0.0152708 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.46787 @ 95%CL (1 toyMC)
median expected limit: r < 6.46787 @ 95%CL (1 toyMC)
   68% expected band : 6.46787 < r < 6.46787
   95% expected band : 6.46787 < r < 6.46787
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2121886612
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.05434 +/- 0.0122487 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.05434 @ 95%CL (1 toyMC)
median expected limit: r < 8.05434 @ 95%CL (1 toyMC)
   68% expected band : 8.05434 < r < 8.05434
   95% expected band : 8.05434 < r < 8.05434
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1887460667
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.2465 +/- 0.0147941 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 14.2465 @ 95%CL (1 toyMC)
median expected limit: r < 14.2465 @ 95%CL (1 toyMC)
   68% expected band : 14.2465 < r < 14.2465
   95% expected band : 14.2465 < r < 14.2465
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1266266129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.9671 +/- 0.0128881 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 14.9671 @ 95%CL (1 toyMC)
median expected limit: r < 14.9671 @ 95%CL (1 toyMC)
   68% expected band : 14.9671 < r < 14.9671
   95% expected band : 14.9671 < r < 14.9671
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -361597463
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.95414 +/- 0.0197995 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.95414 @ 95%CL (1 toyMC)
median expected limit: r < 8.95414 @ 95%CL (1 toyMC)
   68% expected band : 8.95414 < r < 8.95414
   95% expected band : 8.95414 < r < 8.95414
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -370384687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.24892 +/- 0.0169046 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.24892 @ 95%CL (1 toyMC)
median expected limit: r < 8.24892 @ 95%CL (1 toyMC)
   68% expected band : 8.24892 < r < 8.24892
   95% expected band : 8.24892 < r < 8.24892
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1709844227
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.3093 +/- 0.0158159 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.3093 @ 95%CL (1 toyMC)
median expected limit: r < 12.3093 @ 95%CL (1 toyMC)
   68% expected band : 12.3093 < r < 12.3093
   95% expected band : 12.3093 < r < 12.3093
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -697046725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.16564 +/- 0.0183438 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 9.16564 @ 95%CL (1 toyMC)
median expected limit: r < 9.16564 @ 95%CL (1 toyMC)
   68% expected band : 9.16564 < r < 9.16564
   95% expected band : 9.16564 < r < 9.16564
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 902855064
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.3094 +/- 0.0124734 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.3094 @ 95%CL (1 toyMC)
median expected limit: r < 6.3094 @ 95%CL (1 toyMC)
   68% expected band : 6.3094 < r < 6.3094
   95% expected band : 6.3094 < r < 6.3094
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -42659151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.19099 +/- 0.0141565 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.19099 @ 95%CL (1 toyMC)
median expected limit: r < 7.19099 @ 95%CL (1 toyMC)
   68% expected band : 7.19099 < r < 7.19099
   95% expected band : 7.19099 < r < 7.19099
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 651275511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.37066 +/- 0.013606 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.37066 @ 95%CL (1 toyMC)
median expected limit: r < 9.37066 @ 95%CL (1 toyMC)
   68% expected band : 9.37066 < r < 9.37066
   95% expected band : 9.37066 < r < 9.37066
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1432469473
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.32168 +/- 0.0160465 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.32168 @ 95%CL (1 toyMC)
median expected limit: r < 6.32168 @ 95%CL (1 toyMC)
   68% expected band : 6.32168 < r < 6.32168
   95% expected band : 6.32168 < r < 6.32168
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 317092514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.82778 +/- 0.0178663 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.82778 @ 95%CL (1 toyMC)
median expected limit: r < 8.82778 @ 95%CL (1 toyMC)
   68% expected band : 8.82778 < r < 8.82778
   95% expected band : 8.82778 < r < 8.82778
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1299015668
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.22828 +/- 0.0153692 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.22828 @ 95%CL (1 toyMC)
median expected limit: r < 8.22828 @ 95%CL (1 toyMC)
   68% expected band : 8.22828 < r < 8.22828
   95% expected band : 8.22828 < r < 8.22828
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 410314872
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.73932 +/- 0.0183842 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.73932 @ 95%CL (1 toyMC)
median expected limit: r < 7.73932 @ 95%CL (1 toyMC)
   68% expected band : 7.73932 < r < 7.73932
   95% expected band : 7.73932 < r < 7.73932
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -483335438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.87368 +/- 0.0191992 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.87368 @ 95%CL (1 toyMC)
median expected limit: r < 8.87368 @ 95%CL (1 toyMC)
   68% expected band : 8.87368 < r < 8.87368
   95% expected band : 8.87368 < r < 8.87368
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2121539140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.26408 +/- 0.0151359 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.26408 @ 95%CL (1 toyMC)
median expected limit: r < 8.26408 @ 95%CL (1 toyMC)
   68% expected band : 8.26408 < r < 8.26408
   95% expected band : 8.26408 < r < 8.26408
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1639222501
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.30907 +/- 0.0110057 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.30907 @ 95%CL (1 toyMC)
median expected limit: r < 6.30907 @ 95%CL (1 toyMC)
   68% expected band : 6.30907 < r < 6.30907
   95% expected band : 6.30907 < r < 6.30907
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 304427495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.1282 +/- 0.0186161 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 12.1282 @ 95%CL (1 toyMC)
median expected limit: r < 12.1282 @ 95%CL (1 toyMC)
   68% expected band : 12.1282 < r < 12.1282
   95% expected band : 12.1282 < r < 12.1282
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1271515705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.22871 +/- 0.0140796 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.22871 @ 95%CL (1 toyMC)
median expected limit: r < 7.22871 @ 95%CL (1 toyMC)
   68% expected band : 7.22871 < r < 7.22871
   95% expected band : 7.22871 < r < 7.22871
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1265234868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.74206 +/- 0.0142573 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.74206 @ 95%CL (1 toyMC)
median expected limit: r < 6.74206 @ 95%CL (1 toyMC)
   68% expected band : 6.74206 < r < 6.74206
   95% expected band : 6.74206 < r < 6.74206
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1213673041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.82431 +/- 0.0151174 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.82431 @ 95%CL (1 toyMC)
median expected limit: r < 9.82431 @ 95%CL (1 toyMC)
   68% expected band : 9.82431 < r < 9.82431
   95% expected band : 9.82431 < r < 9.82431
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1249816097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.30526 +/- 0.0134832 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.30526 @ 95%CL (1 toyMC)
median expected limit: r < 6.30526 @ 95%CL (1 toyMC)
   68% expected band : 6.30526 < r < 6.30526
   95% expected band : 6.30526 < r < 6.30526
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -13038213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.91343 +/- 0.0192854 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.91343 @ 95%CL (1 toyMC)
median expected limit: r < 7.91343 @ 95%CL (1 toyMC)
   68% expected band : 7.91343 < r < 7.91343
   95% expected band : 7.91343 < r < 7.91343
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1649502071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.62019 +/- 0.0140428 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.62019 @ 95%CL (1 toyMC)
median expected limit: r < 7.62019 @ 95%CL (1 toyMC)
   68% expected band : 7.62019 < r < 7.62019
   95% expected band : 7.62019 < r < 7.62019
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 316784888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.0264 +/- 0.0126126 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 14.0264 @ 95%CL (1 toyMC)
median expected limit: r < 14.0264 @ 95%CL (1 toyMC)
   68% expected band : 14.0264 < r < 14.0264
   95% expected band : 14.0264 < r < 14.0264
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1183558165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.5332 +/- 0.0174236 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.5332 @ 95%CL (1 toyMC)
median expected limit: r < 10.5332 @ 95%CL (1 toyMC)
   68% expected band : 10.5332 < r < 10.5332
   95% expected band : 10.5332 < r < 10.5332
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1649170759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.88495 +/- 0.0150564 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.88495 @ 95%CL (1 toyMC)
median expected limit: r < 7.88495 @ 95%CL (1 toyMC)
   68% expected band : 7.88495 < r < 7.88495
   95% expected band : 7.88495 < r < 7.88495
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -968725163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.19555 +/- 0.0159491 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.19555 @ 95%CL (1 toyMC)
median expected limit: r < 8.19555 @ 95%CL (1 toyMC)
   68% expected band : 8.19555 < r < 8.19555
   95% expected band : 8.19555 < r < 8.19555
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1164758698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.26164 +/- 0.0149895 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.26164 @ 95%CL (1 toyMC)
median expected limit: r < 9.26164 @ 95%CL (1 toyMC)
   68% expected band : 9.26164 < r < 9.26164
   95% expected band : 9.26164 < r < 9.26164
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -400355371
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.489 +/- 0.0108935 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 15.489 @ 95%CL (1 toyMC)
median expected limit: r < 15.489 @ 95%CL (1 toyMC)
   68% expected band : 15.489 < r < 15.489
   95% expected band : 15.489 < r < 15.489
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 987426411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.1694 +/- 0.0175714 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.1694 @ 95%CL (1 toyMC)
median expected limit: r < 11.1694 @ 95%CL (1 toyMC)
   68% expected band : 11.1694 < r < 11.1694
   95% expected band : 11.1694 < r < 11.1694
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2018954432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.18319 +/- 0.0161135 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.18319 @ 95%CL (1 toyMC)
median expected limit: r < 8.18319 @ 95%CL (1 toyMC)
   68% expected band : 8.18319 < r < 8.18319
   95% expected band : 8.18319 < r < 8.18319
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -965608396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.49539 +/- 0.0163751 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.49539 @ 95%CL (1 toyMC)
median expected limit: r < 7.49539 @ 95%CL (1 toyMC)
   68% expected band : 7.49539 < r < 7.49539
   95% expected band : 7.49539 < r < 7.49539
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1865820480
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.23493 +/- 0.0160381 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.23493 @ 95%CL (1 toyMC)
median expected limit: r < 9.23493 @ 95%CL (1 toyMC)
   68% expected band : 9.23493 < r < 9.23493
   95% expected band : 9.23493 < r < 9.23493
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1402602735
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3866 +/- 0.0157203 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.3866 @ 95%CL (1 toyMC)
median expected limit: r < 10.3866 @ 95%CL (1 toyMC)
   68% expected band : 10.3866 < r < 10.3866
   95% expected band : 10.3866 < r < 10.3866
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1336792692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.5242 +/- 0.0133411 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.5242 @ 95%CL (1 toyMC)
median expected limit: r < 12.5242 @ 95%CL (1 toyMC)
   68% expected band : 12.5242 < r < 12.5242
   95% expected band : 12.5242 < r < 12.5242
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 454875857
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.9698 +/- 0.0133315 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 11.9698 @ 95%CL (1 toyMC)
median expected limit: r < 11.9698 @ 95%CL (1 toyMC)
   68% expected band : 11.9698 < r < 11.9698
   95% expected band : 11.9698 < r < 11.9698
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 385968836
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.91526 +/- 0.0164944 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.91526 @ 95%CL (1 toyMC)
median expected limit: r < 7.91526 @ 95%CL (1 toyMC)
   68% expected band : 7.91526 < r < 7.91526
   95% expected band : 7.91526 < r < 7.91526
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1966482075
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.65578 +/- 0.0164806 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.65578 @ 95%CL (1 toyMC)
median expected limit: r < 7.65578 @ 95%CL (1 toyMC)
   68% expected band : 7.65578 < r < 7.65578
   95% expected band : 7.65578 < r < 7.65578
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1985721087
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.31806 +/- 0.0161268 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.31806 @ 95%CL (1 toyMC)
median expected limit: r < 6.31806 @ 95%CL (1 toyMC)
   68% expected band : 6.31806 < r < 6.31806
   95% expected band : 6.31806 < r < 6.31806
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1848148702
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.78273 +/- 0.0144525 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 8.78273 @ 95%CL (1 toyMC)
median expected limit: r < 8.78273 @ 95%CL (1 toyMC)
   68% expected band : 8.78273 < r < 8.78273
   95% expected band : 8.78273 < r < 8.78273
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1886596272
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.7271 +/- 0.0121882 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.7271 @ 95%CL (1 toyMC)
median expected limit: r < 10.7271 @ 95%CL (1 toyMC)
   68% expected band : 10.7271 < r < 10.7271
   95% expected band : 10.7271 < r < 10.7271
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 724218141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.22029 +/- 0.0161216 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.22029 @ 95%CL (1 toyMC)
median expected limit: r < 7.22029 @ 95%CL (1 toyMC)
   68% expected band : 7.22029 < r < 7.22029
   95% expected band : 7.22029 < r < 7.22029
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1844187973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.4121 +/- 0.0142127 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.4121 @ 95%CL (1 toyMC)
median expected limit: r < 10.4121 @ 95%CL (1 toyMC)
   68% expected band : 10.4121 < r < 10.4121
   95% expected band : 10.4121 < r < 10.4121
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1674421193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.22249 +/- 0.0115857 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.22249 @ 95%CL (1 toyMC)
median expected limit: r < 7.22249 @ 95%CL (1 toyMC)
   68% expected band : 7.22249 < r < 7.22249
   95% expected band : 7.22249 < r < 7.22249
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1112284691
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.99727 +/- 0.0174996 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.99727 @ 95%CL (1 toyMC)
median expected limit: r < 7.99727 @ 95%CL (1 toyMC)
   68% expected band : 7.99727 < r < 7.99727
   95% expected band : 7.99727 < r < 7.99727
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1540538061
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.77681 +/- 0.0170766 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.77681 @ 95%CL (1 toyMC)
median expected limit: r < 8.77681 @ 95%CL (1 toyMC)
   68% expected band : 8.77681 < r < 8.77681
   95% expected band : 8.77681 < r < 8.77681
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1548310980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0424 +/- 0.0191761 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.0424 @ 95%CL (1 toyMC)
median expected limit: r < 11.0424 @ 95%CL (1 toyMC)
   68% expected band : 11.0424 < r < 11.0424
   95% expected band : 11.0424 < r < 11.0424
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -631782332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.04326 +/- 0.0123693 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.04326 @ 95%CL (1 toyMC)
median expected limit: r < 8.04326 @ 95%CL (1 toyMC)
   68% expected band : 8.04326 < r < 8.04326
   95% expected band : 8.04326 < r < 8.04326
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 352475857
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0814 +/- 0.0177839 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.0814 @ 95%CL (1 toyMC)
median expected limit: r < 11.0814 @ 95%CL (1 toyMC)
   68% expected band : 11.0814 < r < 11.0814
   95% expected band : 11.0814 < r < 11.0814
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1349588244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.9784 +/- 0.0110155 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 11.9784 @ 95%CL (1 toyMC)
median expected limit: r < 11.9784 @ 95%CL (1 toyMC)
   68% expected band : 11.9784 < r < 11.9784
   95% expected band : 11.9784 < r < 11.9784
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -659266456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.66015 +/- 0.0144406 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.66015 @ 95%CL (1 toyMC)
median expected limit: r < 7.66015 @ 95%CL (1 toyMC)
   68% expected band : 7.66015 < r < 7.66015
   95% expected band : 7.66015 < r < 7.66015
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -408967305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.95768 +/- 0.0162685 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.95768 @ 95%CL (1 toyMC)
median expected limit: r < 7.95768 @ 95%CL (1 toyMC)
   68% expected band : 7.95768 < r < 7.95768
   95% expected band : 7.95768 < r < 7.95768
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1982614705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.20693 +/- 0.0183679 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.20693 @ 95%CL (1 toyMC)
median expected limit: r < 9.20693 @ 95%CL (1 toyMC)
   68% expected band : 9.20693 < r < 9.20693
   95% expected band : 9.20693 < r < 9.20693
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1615717871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.32607 +/- 0.0137338 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.32607 @ 95%CL (1 toyMC)
median expected limit: r < 6.32607 @ 95%CL (1 toyMC)
   68% expected band : 6.32607 < r < 6.32607
   95% expected band : 6.32607 < r < 6.32607
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 574052000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.86022 +/- 0.0157645 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.86022 @ 95%CL (1 toyMC)
median expected limit: r < 8.86022 @ 95%CL (1 toyMC)
   68% expected band : 8.86022 < r < 8.86022
   95% expected band : 8.86022 < r < 8.86022
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1757729658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.885 +/- 0.0134377 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 10.885 @ 95%CL (1 toyMC)
median expected limit: r < 10.885 @ 95%CL (1 toyMC)
   68% expected band : 10.885 < r < 10.885
   95% expected band : 10.885 < r < 10.885
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -845841254
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.62433 +/- 0.0119803 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.62433 @ 95%CL (1 toyMC)
median expected limit: r < 7.62433 @ 95%CL (1 toyMC)
   68% expected band : 7.62433 < r < 7.62433
   95% expected band : 7.62433 < r < 7.62433
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 696880773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.64192 +/- 0.0115326 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.64192 @ 95%CL (1 toyMC)
median expected limit: r < 6.64192 @ 95%CL (1 toyMC)
   68% expected band : 6.64192 < r < 6.64192
   95% expected band : 6.64192 < r < 6.64192
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -225958437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.00721 +/- 0.0155121 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.00721 @ 95%CL (1 toyMC)
median expected limit: r < 8.00721 @ 95%CL (1 toyMC)
   68% expected band : 8.00721 < r < 8.00721
   95% expected band : 8.00721 < r < 8.00721
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1489763624
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.29912 +/- 0.0127203 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.29912 @ 95%CL (1 toyMC)
median expected limit: r < 6.29912 @ 95%CL (1 toyMC)
   68% expected band : 6.29912 < r < 6.29912
   95% expected band : 6.29912 < r < 6.29912
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -313631103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.81384 +/- 0.0195573 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.81384 @ 95%CL (1 toyMC)
median expected limit: r < 9.81384 @ 95%CL (1 toyMC)
   68% expected band : 9.81384 < r < 9.81384
   95% expected band : 9.81384 < r < 9.81384
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1028591931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.68437 +/- 0.0177517 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.68437 @ 95%CL (1 toyMC)
median expected limit: r < 9.68437 @ 95%CL (1 toyMC)
   68% expected band : 9.68437 < r < 9.68437
   95% expected band : 9.68437 < r < 9.68437
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -84407112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6006 +/- 0.0184106 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.6006 @ 95%CL (1 toyMC)
median expected limit: r < 10.6006 @ 95%CL (1 toyMC)
   68% expected band : 10.6006 < r < 10.6006
   95% expected band : 10.6006 < r < 10.6006
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1286785838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.9573 +/- 0.00800371 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 17.9573 @ 95%CL (1 toyMC)
median expected limit: r < 17.9573 @ 95%CL (1 toyMC)
   68% expected band : 17.9573 < r < 17.9573
   95% expected band : 17.9573 < r < 17.9573
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 313236298
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3148 +/- 0.0160825 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.3148 @ 95%CL (1 toyMC)
median expected limit: r < 10.3148 @ 95%CL (1 toyMC)
   68% expected band : 10.3148 < r < 10.3148
   95% expected band : 10.3148 < r < 10.3148
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1663681287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.22978 +/- 0.0150154 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.22978 @ 95%CL (1 toyMC)
median expected limit: r < 7.22978 @ 95%CL (1 toyMC)
   68% expected band : 7.22978 < r < 7.22978
   95% expected band : 7.22978 < r < 7.22978
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 123956554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7857 +/- 0.0166303 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.7857 @ 95%CL (1 toyMC)
median expected limit: r < 12.7857 @ 95%CL (1 toyMC)
   68% expected band : 12.7857 < r < 12.7857
   95% expected band : 12.7857 < r < 12.7857
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1082109240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.20735 +/- 0.0129717 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.20735 @ 95%CL (1 toyMC)
median expected limit: r < 7.20735 @ 95%CL (1 toyMC)
   68% expected band : 7.20735 < r < 7.20735
   95% expected band : 7.20735 < r < 7.20735
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1798714945
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.15178 +/- 0.018403 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.15178 @ 95%CL (1 toyMC)
median expected limit: r < 9.15178 @ 95%CL (1 toyMC)
   68% expected band : 9.15178 < r < 9.15178
   95% expected band : 9.15178 < r < 9.15178
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1067503902.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1102559232.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1164758698.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1249816097.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1265234868.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1266266129.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1271515705.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1286785838.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1299015668.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-13038213.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1349588244.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1384294614.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1429200199.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1538638392.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1615717871.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1639222501.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1674421193.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1757729658.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1796164857.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1819242486.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1844187973.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1848148702.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1886596272.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1887460667.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1897077160.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-1951385753.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-1966482075.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-2018954432.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-2054782858.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-2064182202.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-2121886612.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-225958437.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-313631103.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-361597463.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-370384687.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-400355371.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-408967305.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-42659151.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-46795232.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-483335438.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-501639343.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-55273348.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-631782332.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-659266456.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-697046725.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-809805083.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-84407112.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.-845841254.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.-925432511.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.-965608396.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.-968725163.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.-996619130.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1028591931.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1082109240.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1112284691.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1183558165.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1213673041.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.123956554.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1336792692.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1375674115.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1402602735.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1416247518.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1421008080.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1432469473.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1489763624.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1540538061.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1548310980.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1647352721.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1649170759.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1649502071.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1663681287.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1709844227.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1798714945.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.181603609.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.1865820480.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.1982614705.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.1985721087.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.2121539140.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.304427495.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.313236298.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.316784888.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.317092514.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.325151662.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.352475857.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.385968836.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.410314872.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.454875857.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.476373027.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.486350147.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.539250394.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.571568207.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.574052000.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.640126050.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.650944239.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.651275511.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.696880773.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.724218141.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.743038348.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.902855064.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.987426411.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 343923932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0069 +/- 0.0125566 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.0069 @ 95%CL (1 toyMC)
median expected limit: r < 10.0069 @ 95%CL (1 toyMC)
   68% expected band : 10.0069 < r < 10.0069
   95% expected band : 10.0069 < r < 10.0069
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1968715155
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.65455 +/- 0.0171155 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.65455 @ 95%CL (1 toyMC)
median expected limit: r < 8.65455 @ 95%CL (1 toyMC)
   68% expected band : 8.65455 < r < 8.65455
   95% expected band : 8.65455 < r < 8.65455
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2128303031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.46831 +/- 0.0182094 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.46831 @ 95%CL (1 toyMC)
median expected limit: r < 7.46831 @ 95%CL (1 toyMC)
   68% expected band : 7.46831 < r < 7.46831
   95% expected band : 7.46831 < r < 7.46831
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2130838988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9354 +/- 0.0124861 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 10.9354 @ 95%CL (1 toyMC)
median expected limit: r < 10.9354 @ 95%CL (1 toyMC)
   68% expected band : 10.9354 < r < 10.9354
   95% expected band : 10.9354 < r < 10.9354
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1939071082
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.97814 +/- 0.0150936 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.97814 @ 95%CL (1 toyMC)
median expected limit: r < 8.97814 @ 95%CL (1 toyMC)
   68% expected band : 8.97814 < r < 8.97814
   95% expected band : 8.97814 < r < 8.97814
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -831959037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.5273 +/- 0.0146273 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.5273 @ 95%CL (1 toyMC)
median expected limit: r < 12.5273 @ 95%CL (1 toyMC)
   68% expected band : 12.5273 < r < 12.5273
   95% expected band : 12.5273 < r < 12.5273
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1665752530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0071 +/- 0.0148761 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.0071 @ 95%CL (1 toyMC)
median expected limit: r < 11.0071 @ 95%CL (1 toyMC)
   68% expected band : 11.0071 < r < 11.0071
   95% expected band : 11.0071 < r < 11.0071
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 298887696
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.40978 +/- 0.0161298 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.40978 @ 95%CL (1 toyMC)
median expected limit: r < 9.40978 @ 95%CL (1 toyMC)
   68% expected band : 9.40978 < r < 9.40978
   95% expected band : 9.40978 < r < 9.40978
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 32313117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.32557 +/- 0.0158058 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.32557 @ 95%CL (1 toyMC)
median expected limit: r < 9.32557 @ 95%CL (1 toyMC)
   68% expected band : 9.32557 < r < 9.32557
   95% expected band : 9.32557 < r < 9.32557
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -870467349
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.30913 +/- 0.0191244 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.30913 @ 95%CL (1 toyMC)
median expected limit: r < 9.30913 @ 95%CL (1 toyMC)
   68% expected band : 9.30913 < r < 9.30913
   95% expected band : 9.30913 < r < 9.30913
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1089512125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.51167 +/- 0.0135964 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.51167 @ 95%CL (1 toyMC)
median expected limit: r < 6.51167 @ 95%CL (1 toyMC)
   68% expected band : 6.51167 < r < 6.51167
   95% expected band : 6.51167 < r < 6.51167
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1169562821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.82449 +/- 0.0160286 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.82449 @ 95%CL (1 toyMC)
median expected limit: r < 7.82449 @ 95%CL (1 toyMC)
   68% expected band : 7.82449 < r < 7.82449
   95% expected band : 7.82449 < r < 7.82449
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 758576242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.4521 +/- 0.0132715 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.4521 @ 95%CL (1 toyMC)
median expected limit: r < 6.4521 @ 95%CL (1 toyMC)
   68% expected band : 6.4521 < r < 6.4521
   95% expected band : 6.4521 < r < 6.4521
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 423117556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.78155 +/- 0.0181905 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.78155 @ 95%CL (1 toyMC)
median expected limit: r < 7.78155 @ 95%CL (1 toyMC)
   68% expected band : 7.78155 < r < 7.78155
   95% expected band : 7.78155 < r < 7.78155
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1332941710
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.41202 +/- 0.0160455 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.41202 @ 95%CL (1 toyMC)
median expected limit: r < 7.41202 @ 95%CL (1 toyMC)
   68% expected band : 7.41202 < r < 7.41202
   95% expected band : 7.41202 < r < 7.41202
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -607968890
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.45814 +/- 0.0162137 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.45814 @ 95%CL (1 toyMC)
median expected limit: r < 7.45814 @ 95%CL (1 toyMC)
   68% expected band : 7.45814 < r < 7.45814
   95% expected band : 7.45814 < r < 7.45814
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -958413338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.56203 +/- 0.0125092 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.56203 @ 95%CL (1 toyMC)
median expected limit: r < 6.56203 @ 95%CL (1 toyMC)
   68% expected band : 6.56203 < r < 6.56203
   95% expected band : 6.56203 < r < 6.56203
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1493535517
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.50256 +/- 0.013677 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.50256 @ 95%CL (1 toyMC)
median expected limit: r < 6.50256 @ 95%CL (1 toyMC)
   68% expected band : 6.50256 < r < 6.50256
   95% expected band : 6.50256 < r < 6.50256
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -120105329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.42081 +/- 0.0144977 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.42081 @ 95%CL (1 toyMC)
median expected limit: r < 7.42081 @ 95%CL (1 toyMC)
   68% expected band : 7.42081 < r < 7.42081
   95% expected band : 7.42081 < r < 7.42081
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 566823330
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.15779 +/- 0.015176 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.15779 @ 95%CL (1 toyMC)
median expected limit: r < 8.15779 @ 95%CL (1 toyMC)
   68% expected band : 8.15779 < r < 8.15779
   95% expected band : 8.15779 < r < 8.15779
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1972877656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.37685 +/- 0.0128148 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.37685 @ 95%CL (1 toyMC)
median expected limit: r < 7.37685 @ 95%CL (1 toyMC)
   68% expected band : 7.37685 < r < 7.37685
   95% expected band : 7.37685 < r < 7.37685
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 604892637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.07789 +/- 0.0146197 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.07789 @ 95%CL (1 toyMC)
median expected limit: r < 9.07789 @ 95%CL (1 toyMC)
   68% expected band : 9.07789 < r < 9.07789
   95% expected band : 9.07789 < r < 9.07789
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1121993189
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.3719 +/- 0.0169691 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.3719 @ 95%CL (1 toyMC)
median expected limit: r < 9.3719 @ 95%CL (1 toyMC)
   68% expected band : 9.3719 < r < 9.3719
   95% expected band : 9.3719 < r < 9.3719
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1064343103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.31141 +/- 0.0162686 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.31141 @ 95%CL (1 toyMC)
median expected limit: r < 9.31141 @ 95%CL (1 toyMC)
   68% expected band : 9.31141 < r < 9.31141
   95% expected band : 9.31141 < r < 9.31141
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2057285877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.65511 +/- 0.0141379 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.65511 @ 95%CL (1 toyMC)
median expected limit: r < 7.65511 @ 95%CL (1 toyMC)
   68% expected band : 7.65511 < r < 7.65511
   95% expected band : 7.65511 < r < 7.65511
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 206035703
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.5242 +/- 0.0125358 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 14.5242 @ 95%CL (1 toyMC)
median expected limit: r < 14.5242 @ 95%CL (1 toyMC)
   68% expected band : 14.5242 < r < 14.5242
   95% expected band : 14.5242 < r < 14.5242
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -170163605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.67236 +/- 0.016206 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.67236 @ 95%CL (1 toyMC)
median expected limit: r < 7.67236 @ 95%CL (1 toyMC)
   68% expected band : 7.67236 < r < 7.67236
   95% expected band : 7.67236 < r < 7.67236
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -919492583
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.03976 +/- 0.0181903 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.03976 @ 95%CL (1 toyMC)
median expected limit: r < 9.03976 @ 95%CL (1 toyMC)
   68% expected band : 9.03976 < r < 9.03976
   95% expected band : 9.03976 < r < 9.03976
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 55145038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.83305 +/- 0.0159001 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.83305 @ 95%CL (1 toyMC)
median expected limit: r < 8.83305 @ 95%CL (1 toyMC)
   68% expected band : 8.83305 < r < 8.83305
   95% expected band : 8.83305 < r < 8.83305
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1290863959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.11198 +/- 0.0181962 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.11198 @ 95%CL (1 toyMC)
median expected limit: r < 9.11198 @ 95%CL (1 toyMC)
   68% expected band : 9.11198 < r < 9.11198
   95% expected band : 9.11198 < r < 9.11198
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1642154764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.47503 +/- 0.0140581 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.47503 @ 95%CL (1 toyMC)
median expected limit: r < 6.47503 @ 95%CL (1 toyMC)
   68% expected band : 6.47503 < r < 6.47503
   95% expected band : 6.47503 < r < 6.47503
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1739044377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.20434 +/- 0.0150704 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.20434 @ 95%CL (1 toyMC)
median expected limit: r < 9.20434 @ 95%CL (1 toyMC)
   68% expected band : 9.20434 < r < 9.20434
   95% expected band : 9.20434 < r < 9.20434
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1902184381
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.47616 +/- 0.0150801 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.47616 @ 95%CL (1 toyMC)
median expected limit: r < 6.47616 @ 95%CL (1 toyMC)
   68% expected band : 6.47616 < r < 6.47616
   95% expected band : 6.47616 < r < 6.47616
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 262982776
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.1 +/- 0.0150537 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.1 @ 95%CL (1 toyMC)
median expected limit: r < 9.1 @ 95%CL (1 toyMC)
   68% expected band : 9.1 < r < 9.1
   95% expected band : 9.1 < r < 9.1
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1198472488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.28931 +/- 0.013897 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.28931 @ 95%CL (1 toyMC)
median expected limit: r < 9.28931 @ 95%CL (1 toyMC)
   68% expected band : 9.28931 < r < 9.28931
   95% expected band : 9.28931 < r < 9.28931
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1116041592
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.3539 +/- 0.0126576 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.3539 @ 95%CL (1 toyMC)
median expected limit: r < 13.3539 @ 95%CL (1 toyMC)
   68% expected band : 13.3539 < r < 13.3539
   95% expected band : 13.3539 < r < 13.3539
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 957366397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.47325 +/- 0.0120436 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.47325 @ 95%CL (1 toyMC)
median expected limit: r < 6.47325 @ 95%CL (1 toyMC)
   68% expected band : 6.47325 < r < 6.47325
   95% expected band : 6.47325 < r < 6.47325
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2001597676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.5965 +/- 0.0181131 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.5965 @ 95%CL (1 toyMC)
median expected limit: r < 7.5965 @ 95%CL (1 toyMC)
   68% expected band : 7.5965 < r < 7.5965
   95% expected band : 7.5965 < r < 7.5965
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1160256745
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.49549 +/- 0.014414 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.49549 @ 95%CL (1 toyMC)
median expected limit: r < 6.49549 @ 95%CL (1 toyMC)
   68% expected band : 6.49549 < r < 6.49549
   95% expected band : 6.49549 < r < 6.49549
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -699911975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.78489 +/- 0.0143744 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.78489 @ 95%CL (1 toyMC)
median expected limit: r < 7.78489 @ 95%CL (1 toyMC)
   68% expected band : 7.78489 < r < 7.78489
   95% expected band : 7.78489 < r < 7.78489
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1624724323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.47799 +/- 0.0105665 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.47799 @ 95%CL (1 toyMC)
median expected limit: r < 6.47799 @ 95%CL (1 toyMC)
   68% expected band : 6.47799 < r < 6.47799
   95% expected band : 6.47799 < r < 6.47799
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1145743446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6659 +/- 0.0174471 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.6659 @ 95%CL (1 toyMC)
median expected limit: r < 11.6659 @ 95%CL (1 toyMC)
   68% expected band : 11.6659 < r < 11.6659
   95% expected band : 11.6659 < r < 11.6659
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2005104449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.49038 +/- 0.0104525 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.49038 @ 95%CL (1 toyMC)
median expected limit: r < 6.49038 @ 95%CL (1 toyMC)
   68% expected band : 6.49038 < r < 6.49038
   95% expected band : 6.49038 < r < 6.49038
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 22437167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6575 +/- 0.0144313 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.6575 @ 95%CL (1 toyMC)
median expected limit: r < 10.6575 @ 95%CL (1 toyMC)
   68% expected band : 10.6575 < r < 10.6575
   95% expected band : 10.6575 < r < 10.6575
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -833556296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.576 +/- 0.0139776 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.576 @ 95%CL (1 toyMC)
median expected limit: r < 12.576 @ 95%CL (1 toyMC)
   68% expected band : 12.576 < r < 12.576
   95% expected band : 12.576 < r < 12.576
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1483718448
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.2754 +/- 0.0131818 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 14.2754 @ 95%CL (1 toyMC)
median expected limit: r < 14.2754 @ 95%CL (1 toyMC)
   68% expected band : 14.2754 < r < 14.2754
   95% expected band : 14.2754 < r < 14.2754
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1326905878
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.4607 +/- 0.0118689 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.4607 @ 95%CL (1 toyMC)
median expected limit: r < 6.4607 @ 95%CL (1 toyMC)
   68% expected band : 6.4607 < r < 6.4607
   95% expected band : 6.4607 < r < 6.4607
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1102469576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.42073 +/- 0.0169093 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.42073 @ 95%CL (1 toyMC)
median expected limit: r < 7.42073 @ 95%CL (1 toyMC)
   68% expected band : 7.42073 < r < 7.42073
   95% expected band : 7.42073 < r < 7.42073
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1188212560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.32994 +/- 0.0182359 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.32994 @ 95%CL (1 toyMC)
median expected limit: r < 9.32994 @ 95%CL (1 toyMC)
   68% expected band : 9.32994 < r < 9.32994
   95% expected band : 9.32994 < r < 9.32994
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1732980314
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.76012 +/- 0.0164158 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.76012 @ 95%CL (1 toyMC)
median expected limit: r < 7.76012 @ 95%CL (1 toyMC)
   68% expected band : 7.76012 < r < 7.76012
   95% expected band : 7.76012 < r < 7.76012
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 839800265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.47365 +/- 0.0170157 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.47365 @ 95%CL (1 toyMC)
median expected limit: r < 9.47365 @ 95%CL (1 toyMC)
   68% expected band : 9.47365 < r < 9.47365
   95% expected band : 9.47365 < r < 9.47365
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1438830338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.60804 +/- 0.0162234 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.60804 @ 95%CL (1 toyMC)
median expected limit: r < 7.60804 @ 95%CL (1 toyMC)
   68% expected band : 7.60804 < r < 7.60804
   95% expected band : 7.60804 < r < 7.60804
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -529835934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.66804 +/- 0.0144785 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.66804 @ 95%CL (1 toyMC)
median expected limit: r < 8.66804 @ 95%CL (1 toyMC)
   68% expected band : 8.66804 < r < 8.66804
   95% expected band : 8.66804 < r < 8.66804
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -525238035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.07513 +/- 0.0149161 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.07513 @ 95%CL (1 toyMC)
median expected limit: r < 9.07513 @ 95%CL (1 toyMC)
   68% expected band : 9.07513 < r < 9.07513
   95% expected band : 9.07513 < r < 9.07513
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 102848985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.44355 +/- 0.0129792 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.44355 @ 95%CL (1 toyMC)
median expected limit: r < 7.44355 @ 95%CL (1 toyMC)
   68% expected band : 7.44355 < r < 7.44355
   95% expected band : 7.44355 < r < 7.44355
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -836067460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.50902 +/- 0.0100782 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 6.50902 @ 95%CL (1 toyMC)
median expected limit: r < 6.50902 @ 95%CL (1 toyMC)
   68% expected band : 6.50902 < r < 6.50902
   95% expected band : 6.50902 < r < 6.50902
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 61708855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.21476 +/- 0.016656 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.21476 @ 95%CL (1 toyMC)
median expected limit: r < 9.21476 @ 95%CL (1 toyMC)
   68% expected band : 9.21476 < r < 9.21476
   95% expected band : 9.21476 < r < 9.21476
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 338168009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.44776 +/- 0.0136607 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.44776 @ 95%CL (1 toyMC)
median expected limit: r < 6.44776 @ 95%CL (1 toyMC)
   68% expected band : 6.44776 < r < 6.44776
   95% expected band : 6.44776 < r < 6.44776
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -888571594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.52806 +/- 0.0131234 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.52806 @ 95%CL (1 toyMC)
median expected limit: r < 6.52806 @ 95%CL (1 toyMC)
   68% expected band : 6.52806 < r < 6.52806
   95% expected band : 6.52806 < r < 6.52806
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1393921378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.58839 +/- 0.0176973 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.58839 @ 95%CL (1 toyMC)
median expected limit: r < 9.58839 @ 95%CL (1 toyMC)
   68% expected band : 9.58839 < r < 9.58839
   95% expected band : 9.58839 < r < 9.58839
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -378429035
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.41952 +/- 0.0158825 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.41952 @ 95%CL (1 toyMC)
median expected limit: r < 7.41952 @ 95%CL (1 toyMC)
   68% expected band : 7.41952 < r < 7.41952
   95% expected band : 7.41952 < r < 7.41952
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 420850499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.48394 +/- 0.0175329 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.48394 @ 95%CL (1 toyMC)
median expected limit: r < 6.48394 @ 95%CL (1 toyMC)
   68% expected band : 6.48394 < r < 6.48394
   95% expected band : 6.48394 < r < 6.48394
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1968216594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.47478 +/- 0.0160469 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.47478 @ 95%CL (1 toyMC)
median expected limit: r < 6.47478 @ 95%CL (1 toyMC)
   68% expected band : 6.47478 < r < 6.47478
   95% expected band : 6.47478 < r < 6.47478
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 227417704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.49016 +/- 0.0176978 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.49016 @ 95%CL (1 toyMC)
median expected limit: r < 9.49016 @ 95%CL (1 toyMC)
   68% expected band : 9.49016 < r < 9.49016
   95% expected band : 9.49016 < r < 9.49016
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -320219363
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.6047 +/- 0.0128682 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 15.6047 @ 95%CL (1 toyMC)
median expected limit: r < 15.6047 @ 95%CL (1 toyMC)
   68% expected band : 15.6047 < r < 15.6047
   95% expected band : 15.6047 < r < 15.6047
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -169107078
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.2146 +/- 0.0130491 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.2146 @ 95%CL (1 toyMC)
median expected limit: r < 13.2146 @ 95%CL (1 toyMC)
   68% expected band : 13.2146 < r < 13.2146
   95% expected band : 13.2146 < r < 13.2146
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 469043324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.2394 +/- 0.0128099 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.2394 @ 95%CL (1 toyMC)
median expected limit: r < 8.2394 @ 95%CL (1 toyMC)
   68% expected band : 8.2394 < r < 8.2394
   95% expected band : 8.2394 < r < 8.2394
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1795254382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.36991 +/- 0.0157051 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.36991 @ 95%CL (1 toyMC)
median expected limit: r < 9.36991 @ 95%CL (1 toyMC)
   68% expected band : 9.36991 < r < 9.36991
   95% expected band : 9.36991 < r < 9.36991
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1293916087
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.00484 +/- 0.019265 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.00484 @ 95%CL (1 toyMC)
median expected limit: r < 9.00484 @ 95%CL (1 toyMC)
   68% expected band : 9.00484 < r < 9.00484
   95% expected band : 9.00484 < r < 9.00484
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 807483600
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0407 +/- 0.0177983 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 11.0407 @ 95%CL (1 toyMC)
median expected limit: r < 11.0407 @ 95%CL (1 toyMC)
   68% expected band : 11.0407 < r < 11.0407
   95% expected band : 11.0407 < r < 11.0407
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1383594413
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0475 +/- 0.0132713 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.0475 @ 95%CL (1 toyMC)
median expected limit: r < 11.0475 @ 95%CL (1 toyMC)
   68% expected band : 11.0475 < r < 11.0475
   95% expected band : 11.0475 < r < 11.0475
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 229053809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.22646 +/- 0.0153203 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.22646 @ 95%CL (1 toyMC)
median expected limit: r < 8.22646 @ 95%CL (1 toyMC)
   68% expected band : 8.22646 < r < 8.22646
   95% expected band : 8.22646 < r < 8.22646
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1792540120
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.43723 +/- 0.0133206 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.43723 @ 95%CL (1 toyMC)
median expected limit: r < 8.43723 @ 95%CL (1 toyMC)
   68% expected band : 8.43723 < r < 8.43723
   95% expected band : 8.43723 < r < 8.43723
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1232086819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.5304 +/- 0.0130243 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.5304 @ 95%CL (1 toyMC)
median expected limit: r < 11.5304 @ 95%CL (1 toyMC)
   68% expected band : 11.5304 < r < 11.5304
   95% expected band : 11.5304 < r < 11.5304
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 663509452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.42656 +/- 0.0152112 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.42656 @ 95%CL (1 toyMC)
median expected limit: r < 7.42656 @ 95%CL (1 toyMC)
   68% expected band : 7.42656 < r < 7.42656
   95% expected band : 7.42656 < r < 7.42656
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1274971322
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.51239 +/- 0.0117832 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.51239 @ 95%CL (1 toyMC)
median expected limit: r < 6.51239 @ 95%CL (1 toyMC)
   68% expected band : 6.51239 < r < 6.51239
   95% expected band : 6.51239 < r < 6.51239
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -903220426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.1215 +/- 0.0173115 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.1215 @ 95%CL (1 toyMC)
median expected limit: r < 12.1215 @ 95%CL (1 toyMC)
   68% expected band : 12.1215 < r < 12.1215
   95% expected band : 12.1215 < r < 12.1215
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2004420629
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.49308 +/- 0.01345 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.49308 @ 95%CL (1 toyMC)
median expected limit: r < 6.49308 @ 95%CL (1 toyMC)
   68% expected band : 6.49308 < r < 6.49308
   95% expected band : 6.49308 < r < 6.49308
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 219759665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.46135 +/- 0.0139054 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.46135 @ 95%CL (1 toyMC)
median expected limit: r < 6.46135 @ 95%CL (1 toyMC)
   68% expected band : 6.46135 < r < 6.46135
   95% expected band : 6.46135 < r < 6.46135
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1278297051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6348 +/- 0.0160601 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.6348 @ 95%CL (1 toyMC)
median expected limit: r < 10.6348 @ 95%CL (1 toyMC)
   68% expected band : 10.6348 < r < 10.6348
   95% expected band : 10.6348 < r < 10.6348
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 395015964
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.48871 +/- 0.0113889 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.48871 @ 95%CL (1 toyMC)
median expected limit: r < 6.48871 @ 95%CL (1 toyMC)
   68% expected band : 6.48871 < r < 6.48871
   95% expected band : 6.48871 < r < 6.48871
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 906014771
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.474 +/- 0.0123629 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 14.474 @ 95%CL (1 toyMC)
median expected limit: r < 14.474 @ 95%CL (1 toyMC)
   68% expected band : 14.474 < r < 14.474
   95% expected band : 14.474 < r < 14.474
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 340547794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.36588 +/- 0.0175716 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.36588 @ 95%CL (1 toyMC)
median expected limit: r < 9.36588 @ 95%CL (1 toyMC)
   68% expected band : 9.36588 < r < 9.36588
   95% expected band : 9.36588 < r < 9.36588
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1447733910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.9968 +/- 0.014912 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.9968 @ 95%CL (1 toyMC)
median expected limit: r < 12.9968 @ 95%CL (1 toyMC)
   68% expected band : 12.9968 < r < 12.9968
   95% expected band : 12.9968 < r < 12.9968
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1780466095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.6042 +/- 0.0155142 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.6042 @ 95%CL (1 toyMC)
median expected limit: r < 7.6042 @ 95%CL (1 toyMC)
   68% expected band : 7.6042 < r < 7.6042
   95% expected band : 7.6042 < r < 7.6042
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -126729133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1881 +/- 0.0146887 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.1881 @ 95%CL (1 toyMC)
median expected limit: r < 10.1881 @ 95%CL (1 toyMC)
   68% expected band : 10.1881 < r < 10.1881
   95% expected band : 10.1881 < r < 10.1881
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -530670232
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.97534 +/- 0.0153156 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.97534 @ 95%CL (1 toyMC)
median expected limit: r < 8.97534 @ 95%CL (1 toyMC)
   68% expected band : 8.97534 < r < 8.97534
   95% expected band : 8.97534 < r < 8.97534
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1641829118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.5792 +/- 0.0183829 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.5792 @ 95%CL (1 toyMC)
median expected limit: r < 8.5792 @ 95%CL (1 toyMC)
   68% expected band : 8.5792 < r < 8.5792
   95% expected band : 8.5792 < r < 8.5792
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1000945009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.49848 +/- 0.0135122 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 6.49848 @ 95%CL (1 toyMC)
median expected limit: r < 6.49848 @ 95%CL (1 toyMC)
   68% expected band : 6.49848 < r < 6.49848
   95% expected band : 6.49848 < r < 6.49848
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 409540909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.50355 +/- 0.0148691 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.50355 @ 95%CL (1 toyMC)
median expected limit: r < 6.50355 @ 95%CL (1 toyMC)
   68% expected band : 6.50355 < r < 6.50355
   95% expected band : 6.50355 < r < 6.50355
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1965794870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.6059 +/- 0.0160746 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.6059 @ 95%CL (1 toyMC)
median expected limit: r < 9.6059 @ 95%CL (1 toyMC)
   68% expected band : 9.6059 < r < 9.6059
   95% expected band : 9.6059 < r < 9.6059
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -139165644
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.4993 +/- 0.0144377 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.4993 @ 95%CL (1 toyMC)
median expected limit: r < 6.4993 @ 95%CL (1 toyMC)
   68% expected band : 6.4993 < r < 6.4993
   95% expected band : 6.4993 < r < 6.4993
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1118047741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.40362 +/- 0.0123763 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.40362 @ 95%CL (1 toyMC)
median expected limit: r < 7.40362 @ 95%CL (1 toyMC)
   68% expected band : 7.40362 < r < 7.40362
   95% expected band : 7.40362 < r < 7.40362
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -261112758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.26196 +/- 0.0162867 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.26196 @ 95%CL (1 toyMC)
median expected limit: r < 8.26196 @ 95%CL (1 toyMC)
   68% expected band : 8.26196 < r < 8.26196
   95% expected band : 8.26196 < r < 8.26196
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 779560800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.8539 +/- 0.012099 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.8539 @ 95%CL (1 toyMC)
median expected limit: r < 12.8539 @ 95%CL (1 toyMC)
   68% expected band : 12.8539 < r < 12.8539
   95% expected band : 12.8539 < r < 12.8539
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -237352701
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.73476 +/- 0.0164976 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.73476 @ 95%CL (1 toyMC)
median expected limit: r < 7.73476 @ 95%CL (1 toyMC)
   68% expected band : 7.73476 < r < 7.73476
   95% expected band : 7.73476 < r < 7.73476
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -358944088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.50104 +/- 0.0153806 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.50104 @ 95%CL (1 toyMC)
median expected limit: r < 6.50104 @ 95%CL (1 toyMC)
   68% expected band : 6.50104 < r < 6.50104
   95% expected band : 6.50104 < r < 6.50104
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1770234499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.63433 +/- 0.0163158 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.63433 @ 95%CL (1 toyMC)
median expected limit: r < 9.63433 @ 95%CL (1 toyMC)
   68% expected band : 9.63433 < r < 9.63433
   95% expected band : 9.63433 < r < 9.63433
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1519425302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.89311 +/- 0.0169558 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.89311 @ 95%CL (1 toyMC)
median expected limit: r < 9.89311 @ 95%CL (1 toyMC)
   68% expected band : 9.89311 < r < 9.89311
   95% expected band : 9.89311 < r < 9.89311
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1072901351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.14006 +/- 0.0145385 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.14006 @ 95%CL (1 toyMC)
median expected limit: r < 8.14006 @ 95%CL (1 toyMC)
   68% expected band : 8.14006 < r < 8.14006
   95% expected band : 8.14006 < r < 8.14006
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1000945009.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1089512125.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1102469576.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1198472488.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-120105329.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1232086819.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-126729133.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1278297051.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1290863959.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-139165644.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1393921378.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1438830338.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-169107078.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-170163605.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1770234499.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1780466095.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1792540120.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1965794870.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1968715155.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-2005104449.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-2057285877.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-2130838988.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-237352701.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-261112758.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-320219363.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-358944088.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-378429035.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-525238035.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-529835934.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-530670232.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-607968890.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-699911975.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-831959037.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-833556296.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-836067460.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-870467349.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-888571594.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-903220426.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-919492583.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-958413338.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.102848985.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.1064343103.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.1072901351.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.1116041592.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.1118047741.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.1121993189.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.1145743446.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.1160256745.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1169562821.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1188212560.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1274971322.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1293916087.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1326905878.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1332941710.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1383594413.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1447733910.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1483718448.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1493535517.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1519425302.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1624724323.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1641829118.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1642154764.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1665752530.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1732980314.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1739044377.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1795254382.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1902184381.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1939071082.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1968216594.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1972877656.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.2001597676.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.2004420629.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.206035703.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.2128303031.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.219759665.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.22437167.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.227417704.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.229053809.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.262982776.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.298887696.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.32313117.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.338168009.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.340547794.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.343923932.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.395015964.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.409540909.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.420850499.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.423117556.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.469043324.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.55145038.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.566823330.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.604892637.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.61708855.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.663509452.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.758576242.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.779560800.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.807483600.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.839800265.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.906014771.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.957366397.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2010168791
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.7978 +/- 0.0135472 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.7978 @ 95%CL (1 toyMC)
median expected limit: r < 10.7978 @ 95%CL (1 toyMC)
   68% expected band : 10.7978 < r < 10.7978
   95% expected band : 10.7978 < r < 10.7978
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -881557477
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.64587 +/- 0.0198325 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.64587 @ 95%CL (1 toyMC)
median expected limit: r < 9.64587 @ 95%CL (1 toyMC)
   68% expected band : 9.64587 < r < 9.64587
   95% expected band : 9.64587 < r < 9.64587
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1695806042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.94668 +/- 0.0159464 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.94668 @ 95%CL (1 toyMC)
median expected limit: r < 6.94668 @ 95%CL (1 toyMC)
   68% expected band : 6.94668 < r < 6.94668
   95% expected band : 6.94668 < r < 6.94668
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1550057225
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.93073 +/- 0.0145021 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.93073 @ 95%CL (1 toyMC)
median expected limit: r < 6.93073 @ 95%CL (1 toyMC)
   68% expected band : 6.93073 < r < 6.93073
   95% expected band : 6.93073 < r < 6.93073
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 693780152
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.99146 +/- 0.0151137 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.99146 @ 95%CL (1 toyMC)
median expected limit: r < 9.99146 @ 95%CL (1 toyMC)
   68% expected band : 9.99146 < r < 9.99146
   95% expected band : 9.99146 < r < 9.99146
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1511125057
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.4636 +/- 0.0146905 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.4636 @ 95%CL (1 toyMC)
median expected limit: r < 8.4636 @ 95%CL (1 toyMC)
   68% expected band : 8.4636 < r < 8.4636
   95% expected band : 8.4636 < r < 8.4636
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1083309076
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.0005 +/- 0.0164437 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.0005 @ 95%CL (1 toyMC)
median expected limit: r < 7.0005 @ 95%CL (1 toyMC)
   68% expected band : 7.0005 < r < 7.0005
   95% expected band : 7.0005 < r < 7.0005
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 492178567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.95534 +/- 0.0161894 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.95534 @ 95%CL (1 toyMC)
median expected limit: r < 6.95534 @ 95%CL (1 toyMC)
   68% expected band : 6.95534 < r < 6.95534
   95% expected band : 6.95534 < r < 6.95534
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 692528376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.93804 +/- 0.0130743 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.93804 @ 95%CL (1 toyMC)
median expected limit: r < 6.93804 @ 95%CL (1 toyMC)
   68% expected band : 6.93804 < r < 6.93804
   95% expected band : 6.93804 < r < 6.93804
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2056015895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.91113 +/- 0.0185917 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.91113 @ 95%CL (1 toyMC)
median expected limit: r < 9.91113 @ 95%CL (1 toyMC)
   68% expected band : 9.91113 < r < 9.91113
   95% expected band : 9.91113 < r < 9.91113
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 820487609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0499 +/- 0.0147359 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.0499 @ 95%CL (1 toyMC)
median expected limit: r < 11.0499 @ 95%CL (1 toyMC)
   68% expected band : 11.0499 < r < 11.0499
   95% expected band : 11.0499 < r < 11.0499
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1383560644
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.42407 +/- 0.0173139 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.42407 @ 95%CL (1 toyMC)
median expected limit: r < 8.42407 @ 95%CL (1 toyMC)
   68% expected band : 8.42407 < r < 8.42407
   95% expected band : 8.42407 < r < 8.42407
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 180627772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.26869 +/- 0.0165347 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.26869 @ 95%CL (1 toyMC)
median expected limit: r < 8.26869 @ 95%CL (1 toyMC)
   68% expected band : 8.26869 < r < 8.26869
   95% expected band : 8.26869 < r < 8.26869
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1389744388
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.4276 +/- 0.0157946 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.4276 @ 95%CL (1 toyMC)
median expected limit: r < 8.4276 @ 95%CL (1 toyMC)
   68% expected band : 8.4276 < r < 8.4276
   95% expected band : 8.4276 < r < 8.4276
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1377605923
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7291 +/- 0.0181645 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 11.7291 @ 95%CL (1 toyMC)
median expected limit: r < 11.7291 @ 95%CL (1 toyMC)
   68% expected band : 11.7291 < r < 11.7291
   95% expected band : 11.7291 < r < 11.7291
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -641096041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.4122 +/- 0.0188922 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.4122 @ 95%CL (1 toyMC)
median expected limit: r < 8.4122 @ 95%CL (1 toyMC)
   68% expected band : 8.4122 < r < 8.4122
   95% expected band : 8.4122 < r < 8.4122
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1088625093
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3666 +/- 0.0147162 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.3666 @ 95%CL (1 toyMC)
median expected limit: r < 10.3666 @ 95%CL (1 toyMC)
   68% expected band : 10.3666 < r < 10.3666
   95% expected band : 10.3666 < r < 10.3666
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1586927126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.4878 +/- 0.0172543 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.4878 @ 95%CL (1 toyMC)
median expected limit: r < 10.4878 @ 95%CL (1 toyMC)
   68% expected band : 10.4878 < r < 10.4878
   95% expected band : 10.4878 < r < 10.4878
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 890146456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.3339 +/- 0.013845 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 12.3339 @ 95%CL (1 toyMC)
median expected limit: r < 12.3339 @ 95%CL (1 toyMC)
   68% expected band : 12.3339 < r < 12.3339
   95% expected band : 12.3339 < r < 12.3339
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 904655565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.51559 +/- 0.0158495 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.51559 @ 95%CL (1 toyMC)
median expected limit: r < 8.51559 @ 95%CL (1 toyMC)
   68% expected band : 8.51559 < r < 8.51559
   95% expected band : 8.51559 < r < 8.51559
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -956176529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.93727 +/- 0.0129567 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.93727 @ 95%CL (1 toyMC)
median expected limit: r < 6.93727 @ 95%CL (1 toyMC)
   68% expected band : 6.93727 < r < 6.93727
   95% expected band : 6.93727 < r < 6.93727
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -483946994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.06 +/- 0.0147261 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.06 @ 95%CL (1 toyMC)
median expected limit: r < 9.06 @ 95%CL (1 toyMC)
   68% expected band : 9.06 < r < 9.06
   95% expected band : 9.06 < r < 9.06
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1842700533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.91937 +/- 0.0135825 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.91937 @ 95%CL (1 toyMC)
median expected limit: r < 6.91937 @ 95%CL (1 toyMC)
   68% expected band : 6.91937 < r < 6.91937
   95% expected band : 6.91937 < r < 6.91937
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -705026687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.76546 +/- 0.0161147 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.76546 @ 95%CL (1 toyMC)
median expected limit: r < 8.76546 @ 95%CL (1 toyMC)
   68% expected band : 8.76546 < r < 8.76546
   95% expected band : 8.76546 < r < 8.76546
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1548194477
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.3767 +/- 0.0131569 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.3767 @ 95%CL (1 toyMC)
median expected limit: r < 8.3767 @ 95%CL (1 toyMC)
   68% expected band : 8.3767 < r < 8.3767
   95% expected band : 8.3767 < r < 8.3767
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 951640788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.94093 +/- 0.0176889 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.94093 @ 95%CL (1 toyMC)
median expected limit: r < 6.94093 @ 95%CL (1 toyMC)
   68% expected band : 6.94093 < r < 6.94093
   95% expected band : 6.94093 < r < 6.94093
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1857728871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.95577 +/- 0.014584 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.95577 @ 95%CL (1 toyMC)
median expected limit: r < 6.95577 @ 95%CL (1 toyMC)
   68% expected band : 6.95577 < r < 6.95577
   95% expected band : 6.95577 < r < 6.95577
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1105708441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.46525 +/- 0.0155857 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.46525 @ 95%CL (1 toyMC)
median expected limit: r < 8.46525 @ 95%CL (1 toyMC)
   68% expected band : 8.46525 < r < 8.46525
   95% expected band : 8.46525 < r < 8.46525
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -750058360
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.73977 +/- 0.0168659 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.73977 @ 95%CL (1 toyMC)
median expected limit: r < 8.73977 @ 95%CL (1 toyMC)
   68% expected band : 8.73977 < r < 8.73977
   95% expected band : 8.73977 < r < 8.73977
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1565167719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.15241 +/- 0.0160879 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.15241 @ 95%CL (1 toyMC)
median expected limit: r < 8.15241 @ 95%CL (1 toyMC)
   68% expected band : 8.15241 < r < 8.15241
   95% expected band : 8.15241 < r < 8.15241
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -293395129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.2059 +/- 0.0182045 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.2059 @ 95%CL (1 toyMC)
median expected limit: r < 8.2059 @ 95%CL (1 toyMC)
   68% expected band : 8.2059 < r < 8.2059
   95% expected band : 8.2059 < r < 8.2059
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1331263441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8922 +/- 0.0135299 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.8922 @ 95%CL (1 toyMC)
median expected limit: r < 10.8922 @ 95%CL (1 toyMC)
   68% expected band : 10.8922 < r < 10.8922
   95% expected band : 10.8922 < r < 10.8922
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -83406107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.0188 +/- 0.00831724 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 17.0188 @ 95%CL (1 toyMC)
median expected limit: r < 17.0188 @ 95%CL (1 toyMC)
   68% expected band : 17.0188 < r < 17.0188
   95% expected band : 17.0188 < r < 17.0188
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1724367601
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.91601 +/- 0.0148915 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.91601 @ 95%CL (1 toyMC)
median expected limit: r < 6.91601 @ 95%CL (1 toyMC)
   68% expected band : 6.91601 < r < 6.91601
   95% expected band : 6.91601 < r < 6.91601
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1043014616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.95126 +/- 0.0130958 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.95126 @ 95%CL (1 toyMC)
median expected limit: r < 6.95126 @ 95%CL (1 toyMC)
   68% expected band : 6.95126 < r < 6.95126
   95% expected band : 6.95126 < r < 6.95126
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1328586514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.757 +/- 0.0173087 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.757 @ 95%CL (1 toyMC)
median expected limit: r < 8.757 @ 95%CL (1 toyMC)
   68% expected band : 8.757 < r < 8.757
   95% expected band : 8.757 < r < 8.757
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -975778091
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.91078 +/- 0.01485 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.91078 @ 95%CL (1 toyMC)
median expected limit: r < 6.91078 @ 95%CL (1 toyMC)
   68% expected band : 6.91078 < r < 6.91078
   95% expected band : 6.91078 < r < 6.91078
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -336225224
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.70783 +/- 0.0126495 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.70783 @ 95%CL (1 toyMC)
median expected limit: r < 8.70783 @ 95%CL (1 toyMC)
   68% expected band : 8.70783 < r < 8.70783
   95% expected band : 8.70783 < r < 8.70783
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 712610214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.24128 +/- 0.0208691 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.24128 @ 95%CL (1 toyMC)
median expected limit: r < 8.24128 @ 95%CL (1 toyMC)
   68% expected band : 8.24128 < r < 8.24128
   95% expected band : 8.24128 < r < 8.24128
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1455535525
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.27927 +/- 0.01824 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.27927 @ 95%CL (1 toyMC)
median expected limit: r < 9.27927 @ 95%CL (1 toyMC)
   68% expected band : 9.27927 < r < 9.27927
   95% expected band : 9.27927 < r < 9.27927
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -395002410
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.45358 +/- 0.0177753 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.45358 @ 95%CL (1 toyMC)
median expected limit: r < 8.45358 @ 95%CL (1 toyMC)
   68% expected band : 8.45358 < r < 8.45358
   95% expected band : 8.45358 < r < 8.45358
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1327708513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.78336 +/- 0.0149696 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.78336 @ 95%CL (1 toyMC)
median expected limit: r < 8.78336 @ 95%CL (1 toyMC)
   68% expected band : 8.78336 < r < 8.78336
   95% expected band : 8.78336 < r < 8.78336
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1801067988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.92807 +/- 0.0158307 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 9.92807 @ 95%CL (1 toyMC)
median expected limit: r < 9.92807 @ 95%CL (1 toyMC)
   68% expected band : 9.92807 < r < 9.92807
   95% expected band : 9.92807 < r < 9.92807
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1353854675
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.12495 +/- 0.0163456 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.12495 @ 95%CL (1 toyMC)
median expected limit: r < 8.12495 @ 95%CL (1 toyMC)
   68% expected band : 8.12495 < r < 8.12495
   95% expected band : 8.12495 < r < 8.12495
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1738386004
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.76458 +/- 0.017165 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.76458 @ 95%CL (1 toyMC)
median expected limit: r < 8.76458 @ 95%CL (1 toyMC)
   68% expected band : 8.76458 < r < 8.76458
   95% expected band : 8.76458 < r < 8.76458
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2132948522
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.7908 +/- 0.0145225 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.7908 @ 95%CL (1 toyMC)
median expected limit: r < 13.7908 @ 95%CL (1 toyMC)
   68% expected band : 13.7908 < r < 13.7908
   95% expected band : 13.7908 < r < 13.7908
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -672515991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.5736 +/- 0.0165691 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.5736 @ 95%CL (1 toyMC)
median expected limit: r < 10.5736 @ 95%CL (1 toyMC)
   68% expected band : 10.5736 < r < 10.5736
   95% expected band : 10.5736 < r < 10.5736
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -854396208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.15553 +/- 0.01748 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.15553 @ 95%CL (1 toyMC)
median expected limit: r < 8.15553 @ 95%CL (1 toyMC)
   68% expected band : 8.15553 < r < 8.15553
   95% expected band : 8.15553 < r < 8.15553
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1146828841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.92948 +/- 0.0170248 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.92948 @ 95%CL (1 toyMC)
median expected limit: r < 6.92948 @ 95%CL (1 toyMC)
   68% expected band : 6.92948 < r < 6.92948
   95% expected band : 6.92948 < r < 6.92948
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2110260144
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.91087 +/- 0.0161206 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.91087 @ 95%CL (1 toyMC)
median expected limit: r < 6.91087 @ 95%CL (1 toyMC)
   68% expected band : 6.91087 < r < 6.91087
   95% expected band : 6.91087 < r < 6.91087
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1710833632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.76983 +/- 0.0131136 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 8.76983 @ 95%CL (1 toyMC)
median expected limit: r < 8.76983 @ 95%CL (1 toyMC)
   68% expected band : 8.76983 < r < 8.76983
   95% expected band : 8.76983 < r < 8.76983
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1044811390
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.27317 +/- 0.0172467 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.27317 @ 95%CL (1 toyMC)
median expected limit: r < 8.27317 @ 95%CL (1 toyMC)
   68% expected band : 8.27317 < r < 8.27317
   95% expected band : 8.27317 < r < 8.27317
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 839675897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.31782 +/- 0.0154364 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.31782 @ 95%CL (1 toyMC)
median expected limit: r < 8.31782 @ 95%CL (1 toyMC)
   68% expected band : 8.31782 < r < 8.31782
   95% expected band : 8.31782 < r < 8.31782
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1072368881
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.88536 +/- 0.0139065 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.88536 @ 95%CL (1 toyMC)
median expected limit: r < 6.88536 @ 95%CL (1 toyMC)
   68% expected band : 6.88536 < r < 6.88536
   95% expected band : 6.88536 < r < 6.88536
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 653900999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.89619 +/- 0.0150448 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.89619 @ 95%CL (1 toyMC)
median expected limit: r < 6.89619 @ 95%CL (1 toyMC)
   68% expected band : 6.89619 < r < 6.89619
   95% expected band : 6.89619 < r < 6.89619
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -268298189
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.91446 +/- 0.0157281 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.91446 @ 95%CL (1 toyMC)
median expected limit: r < 9.91446 @ 95%CL (1 toyMC)
   68% expected band : 9.91446 < r < 9.91446
   95% expected band : 9.91446 < r < 9.91446
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1091272978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.96403 +/- 0.0135286 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.96403 @ 95%CL (1 toyMC)
median expected limit: r < 6.96403 @ 95%CL (1 toyMC)
   68% expected band : 6.96403 < r < 6.96403
   95% expected band : 6.96403 < r < 6.96403
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 190922794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.89019 +/- 0.0188057 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.89019 @ 95%CL (1 toyMC)
median expected limit: r < 6.89019 @ 95%CL (1 toyMC)
   68% expected band : 6.89019 < r < 6.89019
   95% expected band : 6.89019 < r < 6.89019
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1528998368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.94093 +/- 0.0142196 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.94093 @ 95%CL (1 toyMC)
median expected limit: r < 6.94093 @ 95%CL (1 toyMC)
   68% expected band : 6.94093 < r < 6.94093
   95% expected band : 6.94093 < r < 6.94093
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1834107226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.90318 +/- 0.019139 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.90318 @ 95%CL (1 toyMC)
median expected limit: r < 9.90318 @ 95%CL (1 toyMC)
   68% expected band : 9.90318 < r < 9.90318
   95% expected band : 9.90318 < r < 9.90318
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -579348504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.91003 +/- 0.0145537 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.91003 @ 95%CL (1 toyMC)
median expected limit: r < 6.91003 @ 95%CL (1 toyMC)
   68% expected band : 6.91003 < r < 6.91003
   95% expected band : 6.91003 < r < 6.91003
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -772426287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.9783 +/- 0.0109519 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 13.9783 @ 95%CL (1 toyMC)
median expected limit: r < 13.9783 @ 95%CL (1 toyMC)
   68% expected band : 13.9783 < r < 13.9783
   95% expected band : 13.9783 < r < 13.9783
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1022868674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.41325 +/- 0.0177834 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.41325 @ 95%CL (1 toyMC)
median expected limit: r < 8.41325 @ 95%CL (1 toyMC)
   68% expected band : 8.41325 < r < 8.41325
   95% expected band : 8.41325 < r < 8.41325
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 391288942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9534 +/- 0.0165895 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.9534 @ 95%CL (1 toyMC)
median expected limit: r < 10.9534 @ 95%CL (1 toyMC)
   68% expected band : 10.9534 < r < 10.9534
   95% expected band : 10.9534 < r < 10.9534
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1022788897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3629 +/- 0.0181832 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.3629 @ 95%CL (1 toyMC)
median expected limit: r < 10.3629 @ 95%CL (1 toyMC)
   68% expected band : 10.3629 < r < 10.3629
   95% expected band : 10.3629 < r < 10.3629
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1490860922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.454 +/- 0.0155099 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.454 @ 95%CL (1 toyMC)
median expected limit: r < 8.454 @ 95%CL (1 toyMC)
   68% expected band : 8.454 < r < 8.454
   95% expected band : 8.454 < r < 8.454
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -36301006
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.17384 +/- 0.0151854 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.17384 @ 95%CL (1 toyMC)
median expected limit: r < 8.17384 @ 95%CL (1 toyMC)
   68% expected band : 8.17384 < r < 8.17384
   95% expected band : 8.17384 < r < 8.17384
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 823397754
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.9604 +/- 0.0154049 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 6.9604 @ 95%CL (1 toyMC)
median expected limit: r < 6.9604 @ 95%CL (1 toyMC)
   68% expected band : 6.9604 < r < 6.9604
   95% expected band : 6.9604 < r < 6.9604
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1757884407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.369 +/- 0.0164092 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.369 @ 95%CL (1 toyMC)
median expected limit: r < 11.369 @ 95%CL (1 toyMC)
   68% expected band : 11.369 < r < 11.369
   95% expected band : 11.369 < r < 11.369
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 970620410
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9063 +/- 0.0146013 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.9063 @ 95%CL (1 toyMC)
median expected limit: r < 10.9063 @ 95%CL (1 toyMC)
   68% expected band : 10.9063 < r < 10.9063
   95% expected band : 10.9063 < r < 10.9063
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 76887679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.7583 +/- 0.0131692 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 13.7583 @ 95%CL (1 toyMC)
median expected limit: r < 13.7583 @ 95%CL (1 toyMC)
   68% expected band : 13.7583 < r < 13.7583
   95% expected band : 13.7583 < r < 13.7583
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2142289944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.25832 +/- 0.0172738 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.25832 @ 95%CL (1 toyMC)
median expected limit: r < 8.25832 @ 95%CL (1 toyMC)
   68% expected band : 8.25832 < r < 8.25832
   95% expected band : 8.25832 < r < 8.25832
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1481452166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.93556 +/- 0.0160415 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.93556 @ 95%CL (1 toyMC)
median expected limit: r < 6.93556 @ 95%CL (1 toyMC)
   68% expected band : 6.93556 < r < 6.93556
   95% expected band : 6.93556 < r < 6.93556
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1532546069
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.78236 +/- 0.0152306 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.78236 @ 95%CL (1 toyMC)
median expected limit: r < 9.78236 @ 95%CL (1 toyMC)
   68% expected band : 9.78236 < r < 9.78236
   95% expected band : 9.78236 < r < 9.78236
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1170492089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.775 +/- 0.0150953 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.775 @ 95%CL (1 toyMC)
median expected limit: r < 11.775 @ 95%CL (1 toyMC)
   68% expected band : 11.775 < r < 11.775
   95% expected band : 11.775 < r < 11.775
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2007966168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.89146 +/- 0.0123185 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 6.89146 @ 95%CL (1 toyMC)
median expected limit: r < 6.89146 @ 95%CL (1 toyMC)
   68% expected band : 6.89146 < r < 6.89146
   95% expected band : 6.89146 < r < 6.89146
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1243710725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.22615 +/- 0.016194 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.22615 @ 95%CL (1 toyMC)
median expected limit: r < 8.22615 @ 95%CL (1 toyMC)
   68% expected band : 8.22615 < r < 8.22615
   95% expected band : 8.22615 < r < 8.22615
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2019661266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.88706 +/- 0.0148922 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.88706 @ 95%CL (1 toyMC)
median expected limit: r < 6.88706 @ 95%CL (1 toyMC)
   68% expected band : 6.88706 < r < 6.88706
   95% expected band : 6.88706 < r < 6.88706
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1712694742
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.90265 +/- 0.0155001 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.90265 @ 95%CL (1 toyMC)
median expected limit: r < 6.90265 @ 95%CL (1 toyMC)
   68% expected band : 6.90265 < r < 6.90265
   95% expected band : 6.90265 < r < 6.90265
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2004862015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.94 +/- 0.0154282 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 6.94 @ 95%CL (1 toyMC)
median expected limit: r < 6.94 @ 95%CL (1 toyMC)
   68% expected band : 6.94 < r < 6.94
   95% expected band : 6.94 < r < 6.94
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2059497751
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.90619 +/- 0.0199258 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.90619 @ 95%CL (1 toyMC)
median expected limit: r < 9.90619 @ 95%CL (1 toyMC)
   68% expected band : 9.90619 < r < 9.90619
   95% expected band : 9.90619 < r < 9.90619
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 789484982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.19056 +/- 0.0136063 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.19056 @ 95%CL (1 toyMC)
median expected limit: r < 9.19056 @ 95%CL (1 toyMC)
   68% expected band : 9.19056 < r < 9.19056
   95% expected band : 9.19056 < r < 9.19056
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1650738702
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.90789 +/- 0.0157792 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.90789 @ 95%CL (1 toyMC)
median expected limit: r < 6.90789 @ 95%CL (1 toyMC)
   68% expected band : 6.90789 < r < 6.90789
   95% expected band : 6.90789 < r < 6.90789
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -142906916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.92487 +/- 0.0125175 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.92487 @ 95%CL (1 toyMC)
median expected limit: r < 6.92487 @ 95%CL (1 toyMC)
   68% expected band : 6.92487 < r < 6.92487
   95% expected band : 6.92487 < r < 6.92487
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2029246286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.3159 +/- 0.0177729 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.3159 @ 95%CL (1 toyMC)
median expected limit: r < 11.3159 @ 95%CL (1 toyMC)
   68% expected band : 11.3159 < r < 11.3159
   95% expected band : 11.3159 < r < 11.3159
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -191300083
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.19428 +/- 0.0150428 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.19428 @ 95%CL (1 toyMC)
median expected limit: r < 8.19428 @ 95%CL (1 toyMC)
   68% expected band : 8.19428 < r < 8.19428
   95% expected band : 8.19428 < r < 8.19428
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1203127650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.88453 +/- 0.0143079 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.88453 @ 95%CL (1 toyMC)
median expected limit: r < 9.88453 @ 95%CL (1 toyMC)
   68% expected band : 9.88453 < r < 9.88453
   95% expected band : 9.88453 < r < 9.88453
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -565473561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.4372 +/- 0.0180749 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.4372 @ 95%CL (1 toyMC)
median expected limit: r < 8.4372 @ 95%CL (1 toyMC)
   68% expected band : 8.4372 < r < 8.4372
   95% expected band : 8.4372 < r < 8.4372
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1238456756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.63184 +/- 0.0162291 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.63184 @ 95%CL (1 toyMC)
median expected limit: r < 8.63184 @ 95%CL (1 toyMC)
   68% expected band : 8.63184 < r < 8.63184
   95% expected band : 8.63184 < r < 8.63184
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 680039235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.2998 +/- 0.0167238 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.2998 @ 95%CL (1 toyMC)
median expected limit: r < 9.2998 @ 95%CL (1 toyMC)
   68% expected band : 9.2998 < r < 9.2998
   95% expected band : 9.2998 < r < 9.2998
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -413963948
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.92904 +/- 0.0178182 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 6.92904 @ 95%CL (1 toyMC)
median expected limit: r < 6.92904 @ 95%CL (1 toyMC)
   68% expected band : 6.92904 < r < 6.92904
   95% expected band : 6.92904 < r < 6.92904
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 448836148
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.92803 +/- 0.0132467 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 6.92803 @ 95%CL (1 toyMC)
median expected limit: r < 6.92803 @ 95%CL (1 toyMC)
   68% expected band : 6.92803 < r < 6.92803
   95% expected band : 6.92803 < r < 6.92803
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1192109620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.82486 +/- 0.0159974 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 9.82486 @ 95%CL (1 toyMC)
median expected limit: r < 9.82486 @ 95%CL (1 toyMC)
   68% expected band : 9.82486 < r < 9.82486
   95% expected band : 9.82486 < r < 9.82486
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1288703582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.5581 +/- 0.0193982 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.5581 @ 95%CL (1 toyMC)
median expected limit: r < 10.5581 @ 95%CL (1 toyMC)
   68% expected band : 10.5581 < r < 10.5581
   95% expected band : 10.5581 < r < 10.5581
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1367753768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.31052 +/- 0.0148155 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.31052 @ 95%CL (1 toyMC)
median expected limit: r < 8.31052 @ 95%CL (1 toyMC)
   68% expected band : 8.31052 < r < 8.31052
   95% expected band : 8.31052 < r < 8.31052
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 735148120
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.77285 +/- 0.0197776 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.77285 @ 95%CL (1 toyMC)
median expected limit: r < 8.77285 @ 95%CL (1 toyMC)
   68% expected band : 8.77285 < r < 8.77285
   95% expected band : 8.77285 < r < 8.77285
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1681174416
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.93019 +/- 0.0182924 @ 95% CL (100 tries)
Done in 0.19 min (cpu), 0.19 min (real)
mean   expected limit: r < 6.93019 @ 95%CL (1 toyMC)
median expected limit: r < 6.93019 @ 95%CL (1 toyMC)
   68% expected band : 6.93019 < r < 6.93019
   95% expected band : 6.93019 < r < 6.93019
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 23684335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.12445 +/- 0.0129806 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.12445 @ 95%CL (1 toyMC)
median expected limit: r < 9.12445 @ 95%CL (1 toyMC)
   68% expected band : 9.12445 < r < 9.12445
   95% expected band : 9.12445 < r < 9.12445
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1972621848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.95167 +/- 0.0156753 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 6.95167 @ 95%CL (1 toyMC)
median expected limit: r < 6.95167 @ 95%CL (1 toyMC)
   68% expected band : 6.95167 < r < 6.95167
   95% expected band : 6.95167 < r < 6.95167
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1414921468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.92914 +/- 0.0165634 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 6.92914 @ 95%CL (1 toyMC)
median expected limit: r < 6.92914 @ 95%CL (1 toyMC)
   68% expected band : 6.92914 < r < 6.92914
   95% expected band : 6.92914 < r < 6.92914
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1022868674.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1043014616.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1072368881.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1088625093.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1105708441.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1192109620.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1203127650.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1243710725.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1288703582.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1367753768.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1377605923.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1389744388.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1414921468.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-142906916.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1528998368.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1532546069.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1550057225.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1586927126.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1681174416.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1710833632.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1724367601.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1738386004.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1757884407.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1801067988.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1857728871.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-191300083.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-2029246286.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-2110260144.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-268298189.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-293395129.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-336225224.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-36301006.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-395002410.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-413963948.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-483946994.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-565473561.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-579348504.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-641096041.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-672515991.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-705026687.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-750058360.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-772426287.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-83406107.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-854396208.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-881557477.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-956176529.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-975778091.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.1022788897.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1044811390.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1083309076.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1091272978.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1146828841.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1170492089.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1238456756.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1327708513.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1328586514.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1331263441.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1353854675.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1383560644.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1455535525.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1481452166.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1490860922.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1511125057.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1548194477.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1565167719.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1650738702.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1695806042.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1712694742.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.180627772.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1834107226.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1842700533.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.190922794.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1972621848.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.2004862015.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.2007966168.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.2010168791.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.2019661266.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.2056015895.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.2059497751.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.2132948522.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.2142289944.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.23684335.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.391288942.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.448836148.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.492178567.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.653900999.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.680039235.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.692528376.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.693780152.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.712610214.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.735148120.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.76887679.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.789484982.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.820487609.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.823397754.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.839675897.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.890146456.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.904655565.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.951640788.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.970620410.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2137805417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.42938 +/- 0.0175282 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.42938 @ 95%CL (1 toyMC)
median expected limit: r < 7.42938 @ 95%CL (1 toyMC)
   68% expected band : 7.42938 < r < 7.42938
   95% expected band : 7.42938 < r < 7.42938
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1897219894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.38099 +/- 0.0165942 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.38099 @ 95%CL (1 toyMC)
median expected limit: r < 9.38099 @ 95%CL (1 toyMC)
   68% expected band : 9.38099 < r < 9.38099
   95% expected band : 9.38099 < r < 9.38099
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1218148151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.3063 +/- 0.0154003 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.3063 @ 95%CL (1 toyMC)
median expected limit: r < 11.3063 @ 95%CL (1 toyMC)
   68% expected band : 11.3063 < r < 11.3063
   95% expected band : 11.3063 < r < 11.3063
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 386032906
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.45548 +/- 0.017002 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.45548 @ 95%CL (1 toyMC)
median expected limit: r < 7.45548 @ 95%CL (1 toyMC)
   68% expected band : 7.45548 < r < 7.45548
   95% expected band : 7.45548 < r < 7.45548
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -859082142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0546 +/- 0.0169043 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.0546 @ 95%CL (1 toyMC)
median expected limit: r < 11.0546 @ 95%CL (1 toyMC)
   68% expected band : 11.0546 < r < 11.0546
   95% expected band : 11.0546 < r < 11.0546
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1212044202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.44651 +/- 0.0174332 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.44651 @ 95%CL (1 toyMC)
median expected limit: r < 9.44651 @ 95%CL (1 toyMC)
   68% expected band : 9.44651 < r < 9.44651
   95% expected band : 9.44651 < r < 9.44651
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -966374840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.46044 +/- 0.0180058 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.46044 @ 95%CL (1 toyMC)
median expected limit: r < 7.46044 @ 95%CL (1 toyMC)
   68% expected band : 7.46044 < r < 7.46044
   95% expected band : 7.46044 < r < 7.46044
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1653133901
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.1519 +/- 0.0178857 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.1519 @ 95%CL (1 toyMC)
median expected limit: r < 9.1519 @ 95%CL (1 toyMC)
   68% expected band : 9.1519 < r < 9.1519
   95% expected band : 9.1519 < r < 9.1519
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1917061625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.49182 +/- 0.0155772 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.49182 @ 95%CL (1 toyMC)
median expected limit: r < 7.49182 @ 95%CL (1 toyMC)
   68% expected band : 7.49182 < r < 7.49182
   95% expected band : 7.49182 < r < 7.49182
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1173407631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.5373 +/- 0.0132329 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.5373 @ 95%CL (1 toyMC)
median expected limit: r < 10.5373 @ 95%CL (1 toyMC)
   68% expected band : 10.5373 < r < 10.5373
   95% expected band : 10.5373 < r < 10.5373
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -453832679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.47854 +/- 0.013492 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.47854 @ 95%CL (1 toyMC)
median expected limit: r < 7.47854 @ 95%CL (1 toyMC)
   68% expected band : 7.47854 < r < 7.47854
   95% expected band : 7.47854 < r < 7.47854
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1252557177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.43945 +/- 0.017694 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.43945 @ 95%CL (1 toyMC)
median expected limit: r < 7.43945 @ 95%CL (1 toyMC)
   68% expected band : 7.43945 < r < 7.43945
   95% expected band : 7.43945 < r < 7.43945
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 556766345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.78573 +/- 0.0166937 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.78573 @ 95%CL (1 toyMC)
median expected limit: r < 9.78573 @ 95%CL (1 toyMC)
   68% expected band : 9.78573 < r < 9.78573
   95% expected band : 9.78573 < r < 9.78573
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1379727809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.46104 +/- 0.015282 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.46104 @ 95%CL (1 toyMC)
median expected limit: r < 9.46104 @ 95%CL (1 toyMC)
   68% expected band : 9.46104 < r < 9.46104
   95% expected band : 9.46104 < r < 9.46104
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 351849654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.12782 +/- 0.0151075 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.12782 @ 95%CL (1 toyMC)
median expected limit: r < 9.12782 @ 95%CL (1 toyMC)
   68% expected band : 9.12782 < r < 9.12782
   95% expected band : 9.12782 < r < 9.12782
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 98839323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.743 +/- 0.0171693 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 13.743 @ 95%CL (1 toyMC)
median expected limit: r < 13.743 @ 95%CL (1 toyMC)
   68% expected band : 13.743 < r < 13.743
   95% expected band : 13.743 < r < 13.743
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 910793778
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.426 +/- 0.0170488 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.426 @ 95%CL (1 toyMC)
median expected limit: r < 11.426 @ 95%CL (1 toyMC)
   68% expected band : 11.426 < r < 11.426
   95% expected band : 11.426 < r < 11.426
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1717055005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.47556 +/- 0.0152657 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.47556 @ 95%CL (1 toyMC)
median expected limit: r < 7.47556 @ 95%CL (1 toyMC)
   68% expected band : 7.47556 < r < 7.47556
   95% expected band : 7.47556 < r < 7.47556
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 865690848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.48615 +/- 0.0132861 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.48615 @ 95%CL (1 toyMC)
median expected limit: r < 7.48615 @ 95%CL (1 toyMC)
   68% expected band : 7.48615 < r < 7.48615
   95% expected band : 7.48615 < r < 7.48615
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1589677371
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.8046 +/- 0.00828774 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 16.8046 @ 95%CL (1 toyMC)
median expected limit: r < 16.8046 @ 95%CL (1 toyMC)
   68% expected band : 16.8046 < r < 16.8046
   95% expected band : 16.8046 < r < 16.8046
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2015459145
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8097 +/- 0.0183901 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.8097 @ 95%CL (1 toyMC)
median expected limit: r < 10.8097 @ 95%CL (1 toyMC)
   68% expected band : 10.8097 < r < 10.8097
   95% expected band : 10.8097 < r < 10.8097
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 402414249
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.01973 +/- 0.0175788 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.01973 @ 95%CL (1 toyMC)
median expected limit: r < 9.01973 @ 95%CL (1 toyMC)
   68% expected band : 9.01973 < r < 9.01973
   95% expected band : 9.01973 < r < 9.01973
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1992953928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.43873 +/- 0.0168197 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.43873 @ 95%CL (1 toyMC)
median expected limit: r < 7.43873 @ 95%CL (1 toyMC)
   68% expected band : 7.43873 < r < 7.43873
   95% expected band : 7.43873 < r < 7.43873
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -76228366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.44486 +/- 0.0158522 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.44486 @ 95%CL (1 toyMC)
median expected limit: r < 7.44486 @ 95%CL (1 toyMC)
   68% expected band : 7.44486 < r < 7.44486
   95% expected band : 7.44486 < r < 7.44486
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -332952924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.49439 +/- 0.0151424 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.49439 @ 95%CL (1 toyMC)
median expected limit: r < 7.49439 @ 95%CL (1 toyMC)
   68% expected band : 7.49439 < r < 7.49439
   95% expected band : 7.49439 < r < 7.49439
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -712544493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.4737 +/- 0.0178651 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.4737 @ 95%CL (1 toyMC)
median expected limit: r < 7.4737 @ 95%CL (1 toyMC)
   68% expected band : 7.4737 < r < 7.4737
   95% expected band : 7.4737 < r < 7.4737
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -782498900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.42771 +/- 0.0153531 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.42771 @ 95%CL (1 toyMC)
median expected limit: r < 7.42771 @ 95%CL (1 toyMC)
   68% expected band : 7.42771 < r < 7.42771
   95% expected band : 7.42771 < r < 7.42771
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1239077744
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.45238 +/- 0.0165528 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.45238 @ 95%CL (1 toyMC)
median expected limit: r < 7.45238 @ 95%CL (1 toyMC)
   68% expected band : 7.45238 < r < 7.45238
   95% expected band : 7.45238 < r < 7.45238
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -299240847
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.15473 +/- 0.0136921 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.15473 @ 95%CL (1 toyMC)
median expected limit: r < 9.15473 @ 95%CL (1 toyMC)
   68% expected band : 9.15473 < r < 9.15473
   95% expected band : 9.15473 < r < 9.15473
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1399458375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.16927 +/- 0.0151995 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.16927 @ 95%CL (1 toyMC)
median expected limit: r < 9.16927 @ 95%CL (1 toyMC)
   68% expected band : 9.16927 < r < 9.16927
   95% expected band : 9.16927 < r < 9.16927
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2022112242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.8015 +/- 0.0168383 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.8015 @ 95%CL (1 toyMC)
median expected limit: r < 11.8015 @ 95%CL (1 toyMC)
   68% expected band : 11.8015 < r < 11.8015
   95% expected band : 11.8015 < r < 11.8015
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1825848540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.4051 +/- 0.0152332 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.4051 @ 95%CL (1 toyMC)
median expected limit: r < 9.4051 @ 95%CL (1 toyMC)
   68% expected band : 9.4051 < r < 9.4051
   95% expected band : 9.4051 < r < 9.4051
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1979439129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.7727 +/- 0.0111589 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 14.7727 @ 95%CL (1 toyMC)
median expected limit: r < 14.7727 @ 95%CL (1 toyMC)
   68% expected band : 14.7727 < r < 14.7727
   95% expected band : 14.7727 < r < 14.7727
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 708816160
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.9751 +/- 0.0153736 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 11.9751 @ 95%CL (1 toyMC)
median expected limit: r < 11.9751 @ 95%CL (1 toyMC)
   68% expected band : 11.9751 < r < 11.9751
   95% expected band : 11.9751 < r < 11.9751
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1499282969
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.48265 +/- 0.0162956 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.48265 @ 95%CL (1 toyMC)
median expected limit: r < 7.48265 @ 95%CL (1 toyMC)
   68% expected band : 7.48265 < r < 7.48265
   95% expected band : 7.48265 < r < 7.48265
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -397599887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.47362 +/- 0.01353 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.47362 @ 95%CL (1 toyMC)
median expected limit: r < 7.47362 @ 95%CL (1 toyMC)
   68% expected band : 7.47362 < r < 7.47362
   95% expected band : 7.47362 < r < 7.47362
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1067800500
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.11141 +/- 0.0184071 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.11141 @ 95%CL (1 toyMC)
median expected limit: r < 9.11141 @ 95%CL (1 toyMC)
   68% expected band : 9.11141 < r < 9.11141
   95% expected band : 9.11141 < r < 9.11141
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 117143296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.8388 +/- 0.0105011 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 15.8388 @ 95%CL (1 toyMC)
median expected limit: r < 15.8388 @ 95%CL (1 toyMC)
   68% expected band : 15.8388 < r < 15.8388
   95% expected band : 15.8388 < r < 15.8388
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -347546149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.5068 +/- 0.01233 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 14.5068 @ 95%CL (1 toyMC)
median expected limit: r < 14.5068 @ 95%CL (1 toyMC)
   68% expected band : 14.5068 < r < 14.5068
   95% expected band : 14.5068 < r < 14.5068
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 398821347
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.01937 +/- 0.0211408 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.01937 @ 95%CL (1 toyMC)
median expected limit: r < 9.01937 @ 95%CL (1 toyMC)
   68% expected band : 9.01937 < r < 9.01937
   95% expected band : 9.01937 < r < 9.01937
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 401319870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0435 +/- 0.0146854 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.0435 @ 95%CL (1 toyMC)
median expected limit: r < 11.0435 @ 95%CL (1 toyMC)
   68% expected band : 11.0435 < r < 11.0435
   95% expected band : 11.0435 < r < 11.0435
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1644448401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.45425 +/- 0.0211161 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.45425 @ 95%CL (1 toyMC)
median expected limit: r < 9.45425 @ 95%CL (1 toyMC)
   68% expected band : 9.45425 < r < 9.45425
   95% expected band : 9.45425 < r < 9.45425
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1532000564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.44122 +/- 0.015697 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.44122 @ 95%CL (1 toyMC)
median expected limit: r < 7.44122 @ 95%CL (1 toyMC)
   68% expected band : 7.44122 < r < 7.44122
   95% expected band : 7.44122 < r < 7.44122
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1623804538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7316 +/- 0.0149333 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 12.7316 @ 95%CL (1 toyMC)
median expected limit: r < 12.7316 @ 95%CL (1 toyMC)
   68% expected band : 12.7316 < r < 12.7316
   95% expected band : 12.7316 < r < 12.7316
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -254178906
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.14273 +/- 0.0182117 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.14273 @ 95%CL (1 toyMC)
median expected limit: r < 9.14273 @ 95%CL (1 toyMC)
   68% expected band : 9.14273 < r < 9.14273
   95% expected band : 9.14273 < r < 9.14273
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2077437787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.4778 +/- 0.0183716 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.4778 @ 95%CL (1 toyMC)
median expected limit: r < 11.4778 @ 95%CL (1 toyMC)
   68% expected band : 11.4778 < r < 11.4778
   95% expected band : 11.4778 < r < 11.4778
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 898242765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.49934 +/- 0.0127483 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.49934 @ 95%CL (1 toyMC)
median expected limit: r < 7.49934 @ 95%CL (1 toyMC)
   68% expected band : 7.49934 < r < 7.49934
   95% expected band : 7.49934 < r < 7.49934
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1501494531
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.11757 +/- 0.0188502 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.11757 @ 95%CL (1 toyMC)
median expected limit: r < 9.11757 @ 95%CL (1 toyMC)
   68% expected band : 9.11757 < r < 9.11757
   95% expected band : 9.11757 < r < 9.11757
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 165642650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.6235 +/- 0.0140674 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.6235 @ 95%CL (1 toyMC)
median expected limit: r < 12.6235 @ 95%CL (1 toyMC)
   68% expected band : 12.6235 < r < 12.6235
   95% expected band : 12.6235 < r < 12.6235
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -389153646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.10515 +/- 0.0183474 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.10515 @ 95%CL (1 toyMC)
median expected limit: r < 9.10515 @ 95%CL (1 toyMC)
   68% expected band : 9.10515 < r < 9.10515
   95% expected band : 9.10515 < r < 9.10515
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1504033101
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.4977 +/- 0.00852779 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 16.4977 @ 95%CL (1 toyMC)
median expected limit: r < 16.4977 @ 95%CL (1 toyMC)
   68% expected band : 16.4977 < r < 16.4977
   95% expected band : 16.4977 < r < 16.4977
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1082021467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.48662 +/- 0.0135685 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.48662 @ 95%CL (1 toyMC)
median expected limit: r < 7.48662 @ 95%CL (1 toyMC)
   68% expected band : 7.48662 < r < 7.48662
   95% expected band : 7.48662 < r < 7.48662
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1710628216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.81907 +/- 0.0182023 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.81907 @ 95%CL (1 toyMC)
median expected limit: r < 9.81907 @ 95%CL (1 toyMC)
   68% expected band : 9.81907 < r < 9.81907
   95% expected band : 9.81907 < r < 9.81907
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1907798246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.4456 +/- 0.0164327 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.4456 @ 95%CL (1 toyMC)
median expected limit: r < 7.4456 @ 95%CL (1 toyMC)
   68% expected band : 7.4456 < r < 7.4456
   95% expected band : 7.4456 < r < 7.4456
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1841213680
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.5349 +/- 0.0189021 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.5349 @ 95%CL (1 toyMC)
median expected limit: r < 11.5349 @ 95%CL (1 toyMC)
   68% expected band : 11.5349 < r < 11.5349
   95% expected band : 11.5349 < r < 11.5349
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -403174291
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.4926 +/- 0.019297 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.4926 @ 95%CL (1 toyMC)
median expected limit: r < 7.4926 @ 95%CL (1 toyMC)
   68% expected band : 7.4926 < r < 7.4926
   95% expected band : 7.4926 < r < 7.4926
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1351952240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.4769 +/- 0.0145067 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.4769 @ 95%CL (1 toyMC)
median expected limit: r < 9.4769 @ 95%CL (1 toyMC)
   68% expected band : 9.4769 < r < 9.4769
   95% expected band : 9.4769 < r < 9.4769
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -291922737
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.12966 +/- 0.0172389 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.12966 @ 95%CL (1 toyMC)
median expected limit: r < 9.12966 @ 95%CL (1 toyMC)
   68% expected band : 9.12966 < r < 9.12966
   95% expected band : 9.12966 < r < 9.12966
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1606746570
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.48361 +/- 0.0143518 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.48361 @ 95%CL (1 toyMC)
median expected limit: r < 7.48361 @ 95%CL (1 toyMC)
   68% expected band : 7.48361 < r < 7.48361
   95% expected band : 7.48361 < r < 7.48361
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 810267478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.45656 +/- 0.016689 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.45656 @ 95%CL (1 toyMC)
median expected limit: r < 7.45656 @ 95%CL (1 toyMC)
   68% expected band : 7.45656 < r < 7.45656
   95% expected band : 7.45656 < r < 7.45656
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1276281004
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.48738 +/- 0.0153654 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.48738 @ 95%CL (1 toyMC)
median expected limit: r < 7.48738 @ 95%CL (1 toyMC)
   68% expected band : 7.48738 < r < 7.48738
   95% expected band : 7.48738 < r < 7.48738
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 315423540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.13785 +/- 0.0161503 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.13785 @ 95%CL (1 toyMC)
median expected limit: r < 9.13785 @ 95%CL (1 toyMC)
   68% expected band : 9.13785 < r < 9.13785
   95% expected band : 9.13785 < r < 9.13785
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -337859147
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.04969 +/- 0.0142307 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.04969 @ 95%CL (1 toyMC)
median expected limit: r < 9.04969 @ 95%CL (1 toyMC)
   68% expected band : 9.04969 < r < 9.04969
   95% expected band : 9.04969 < r < 9.04969
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 881300774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.46314 +/- 0.0152719 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.46314 @ 95%CL (1 toyMC)
median expected limit: r < 7.46314 @ 95%CL (1 toyMC)
   68% expected band : 7.46314 < r < 7.46314
   95% expected band : 7.46314 < r < 7.46314
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1343283029
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.1409 +/- 0.0146082 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.1409 @ 95%CL (1 toyMC)
median expected limit: r < 9.1409 @ 95%CL (1 toyMC)
   68% expected band : 9.1409 < r < 9.1409
   95% expected band : 9.1409 < r < 9.1409
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1086794981
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.45893 +/- 0.015011 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.45893 @ 95%CL (1 toyMC)
median expected limit: r < 7.45893 @ 95%CL (1 toyMC)
   68% expected band : 7.45893 < r < 7.45893
   95% expected band : 7.45893 < r < 7.45893
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1689172323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.9741 +/- 0.0120942 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 12.9741 @ 95%CL (1 toyMC)
median expected limit: r < 12.9741 @ 95%CL (1 toyMC)
   68% expected band : 12.9741 < r < 12.9741
   95% expected band : 12.9741 < r < 12.9741
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1927575971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.46804 +/- 0.0186982 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.46804 @ 95%CL (1 toyMC)
median expected limit: r < 9.46804 @ 95%CL (1 toyMC)
   68% expected band : 9.46804 < r < 9.46804
   95% expected band : 9.46804 < r < 9.46804
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1714085752
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.3203 +/- 0.0161464 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 12.3203 @ 95%CL (1 toyMC)
median expected limit: r < 12.3203 @ 95%CL (1 toyMC)
   68% expected band : 12.3203 < r < 12.3203
   95% expected band : 12.3203 < r < 12.3203
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1265004354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7227 +/- 0.0145897 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.7227 @ 95%CL (1 toyMC)
median expected limit: r < 12.7227 @ 95%CL (1 toyMC)
   68% expected band : 12.7227 < r < 12.7227
   95% expected band : 12.7227 < r < 12.7227
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -399563767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.08353 +/- 0.0176201 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.08353 @ 95%CL (1 toyMC)
median expected limit: r < 9.08353 @ 95%CL (1 toyMC)
   68% expected band : 9.08353 < r < 9.08353
   95% expected band : 9.08353 < r < 9.08353
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -565404707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.1377 +/- 0.0173946 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.1377 @ 95%CL (1 toyMC)
median expected limit: r < 11.1377 @ 95%CL (1 toyMC)
   68% expected band : 11.1377 < r < 11.1377
   95% expected band : 11.1377 < r < 11.1377
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 95703494
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.46172 +/- 0.0146389 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.46172 @ 95%CL (1 toyMC)
median expected limit: r < 7.46172 @ 95%CL (1 toyMC)
   68% expected band : 7.46172 < r < 7.46172
   95% expected band : 7.46172 < r < 7.46172
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 278867048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0297 +/- 0.0164205 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.0297 @ 95%CL (1 toyMC)
median expected limit: r < 11.0297 @ 95%CL (1 toyMC)
   68% expected band : 11.0297 < r < 11.0297
   95% expected band : 11.0297 < r < 11.0297
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1174174327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.5337 +/- 0.0177325 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.5337 @ 95%CL (1 toyMC)
median expected limit: r < 10.5337 @ 95%CL (1 toyMC)
   68% expected band : 10.5337 < r < 10.5337
   95% expected band : 10.5337 < r < 10.5337
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1926448475
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7785 +/- 0.0191866 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.7785 @ 95%CL (1 toyMC)
median expected limit: r < 12.7785 @ 95%CL (1 toyMC)
   68% expected band : 12.7785 < r < 12.7785
   95% expected band : 12.7785 < r < 12.7785
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1941197792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.49363 +/- 0.0190277 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.49363 @ 95%CL (1 toyMC)
median expected limit: r < 7.49363 @ 95%CL (1 toyMC)
   68% expected band : 7.49363 < r < 7.49363
   95% expected band : 7.49363 < r < 7.49363
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 352430504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.50365 +/- 0.0155104 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.50365 @ 95%CL (1 toyMC)
median expected limit: r < 7.50365 @ 95%CL (1 toyMC)
   68% expected band : 7.50365 < r < 7.50365
   95% expected band : 7.50365 < r < 7.50365
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 821910905
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.42565 +/- 0.0183567 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.42565 @ 95%CL (1 toyMC)
median expected limit: r < 7.42565 @ 95%CL (1 toyMC)
   68% expected band : 7.42565 < r < 7.42565
   95% expected band : 7.42565 < r < 7.42565
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2069417658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.08382 +/- 0.017887 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.08382 @ 95%CL (1 toyMC)
median expected limit: r < 9.08382 @ 95%CL (1 toyMC)
   68% expected band : 9.08382 < r < 9.08382
   95% expected band : 9.08382 < r < 9.08382
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1695857439
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.9138 +/- 0.0133826 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 13.9138 @ 95%CL (1 toyMC)
median expected limit: r < 13.9138 @ 95%CL (1 toyMC)
   68% expected band : 13.9138 < r < 13.9138
   95% expected band : 13.9138 < r < 13.9138
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1270891561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.4472 +/- 0.0150226 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.4472 @ 95%CL (1 toyMC)
median expected limit: r < 12.4472 @ 95%CL (1 toyMC)
   68% expected band : 12.4472 < r < 12.4472
   95% expected band : 12.4472 < r < 12.4472
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 679509826
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.5125 +/- 0.0196165 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 10.5125 @ 95%CL (1 toyMC)
median expected limit: r < 10.5125 @ 95%CL (1 toyMC)
   68% expected band : 10.5125 < r < 10.5125
   95% expected band : 10.5125 < r < 10.5125
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1508676219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.0068 +/- 0.010348 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 16.0068 @ 95%CL (1 toyMC)
median expected limit: r < 16.0068 @ 95%CL (1 toyMC)
   68% expected band : 16.0068 < r < 16.0068
   95% expected band : 16.0068 < r < 16.0068
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 722305328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.48079 +/- 0.0151426 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.48079 @ 95%CL (1 toyMC)
median expected limit: r < 7.48079 @ 95%CL (1 toyMC)
   68% expected band : 7.48079 < r < 7.48079
   95% expected band : 7.48079 < r < 7.48079
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -553921162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.46143 +/- 0.0176583 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.46143 @ 95%CL (1 toyMC)
median expected limit: r < 9.46143 @ 95%CL (1 toyMC)
   68% expected band : 9.46143 < r < 9.46143
   95% expected band : 9.46143 < r < 9.46143
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -768497553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.48576 +/- 0.015708 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.48576 @ 95%CL (1 toyMC)
median expected limit: r < 7.48576 @ 95%CL (1 toyMC)
   68% expected band : 7.48576 < r < 7.48576
   95% expected band : 7.48576 < r < 7.48576
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1213629605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.6773 +/- 0.014624 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 12.6773 @ 95%CL (1 toyMC)
median expected limit: r < 12.6773 @ 95%CL (1 toyMC)
   68% expected band : 12.6773 < r < 12.6773
   95% expected band : 12.6773 < r < 12.6773
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1510242795
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.50562 +/- 0.0171672 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.50562 @ 95%CL (1 toyMC)
median expected limit: r < 7.50562 @ 95%CL (1 toyMC)
   68% expected band : 7.50562 < r < 7.50562
   95% expected band : 7.50562 < r < 7.50562
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1804128354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.5863 +/- 0.0140588 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 14.5863 @ 95%CL (1 toyMC)
median expected limit: r < 14.5863 @ 95%CL (1 toyMC)
   68% expected band : 14.5863 < r < 14.5863
   95% expected band : 14.5863 < r < 14.5863
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1600412528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.45057 +/- 0.0170746 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.45057 @ 95%CL (1 toyMC)
median expected limit: r < 7.45057 @ 95%CL (1 toyMC)
   68% expected band : 7.45057 < r < 7.45057
   95% expected band : 7.45057 < r < 7.45057
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1570222140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.8252 +/- 0.0154424 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.8252 @ 95%CL (1 toyMC)
median expected limit: r < 13.8252 @ 95%CL (1 toyMC)
   68% expected band : 13.8252 < r < 13.8252
   95% expected band : 13.8252 < r < 13.8252
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 207992703
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.44744 +/- 0.0132326 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.44744 @ 95%CL (1 toyMC)
median expected limit: r < 7.44744 @ 95%CL (1 toyMC)
   68% expected band : 7.44744 < r < 7.44744
   95% expected band : 7.44744 < r < 7.44744
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2090456691
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.47954 +/- 0.0173344 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 9.47954 @ 95%CL (1 toyMC)
median expected limit: r < 9.47954 @ 95%CL (1 toyMC)
   68% expected band : 9.47954 < r < 9.47954
   95% expected band : 9.47954 < r < 9.47954
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2108171241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.45063 +/- 0.0129469 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.45063 @ 95%CL (1 toyMC)
median expected limit: r < 7.45063 @ 95%CL (1 toyMC)
   68% expected band : 7.45063 < r < 7.45063
   95% expected band : 7.45063 < r < 7.45063
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1680430908
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.48779 +/- 0.0159824 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.48779 @ 95%CL (1 toyMC)
median expected limit: r < 7.48779 @ 95%CL (1 toyMC)
   68% expected band : 7.48779 < r < 7.48779
   95% expected band : 7.48779 < r < 7.48779
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1269602532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.42279 +/- 0.0143717 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.42279 @ 95%CL (1 toyMC)
median expected limit: r < 7.42279 @ 95%CL (1 toyMC)
   68% expected band : 7.42279 < r < 7.42279
   95% expected band : 7.42279 < r < 7.42279
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -264506929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.5528 +/- 0.0149417 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 12.5528 @ 95%CL (1 toyMC)
median expected limit: r < 12.5528 @ 95%CL (1 toyMC)
   68% expected band : 12.5528 < r < 12.5528
   95% expected band : 12.5528 < r < 12.5528
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1401446646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.49631 +/- 0.0171384 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.49631 @ 95%CL (1 toyMC)
median expected limit: r < 7.49631 @ 95%CL (1 toyMC)
   68% expected band : 7.49631 < r < 7.49631
   95% expected band : 7.49631 < r < 7.49631
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1688775452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.46313 +/- 0.0139981 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.46313 @ 95%CL (1 toyMC)
median expected limit: r < 7.46313 @ 95%CL (1 toyMC)
   68% expected band : 7.46313 < r < 7.46313
   95% expected band : 7.46313 < r < 7.46313
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1086794981.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1213629605.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1252557177.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1351952240.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1508676219.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1510242795.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1532000564.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1653133901.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1695857439.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1710628216.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1717055005.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1804128354.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1825848540.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1897219894.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1907798246.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1926448475.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1927575971.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1979439129.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-2015459145.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-2069417658.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-2077437787.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-2090456691.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-254178906.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-264506929.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-291922737.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-299240847.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-332952924.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-337859147.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-347546149.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-389153646.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-397599887.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-399563767.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-403174291.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-453832679.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-553921162.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-565404707.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-712544493.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-76228366.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-768497553.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-782498900.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-859082142.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-966374840.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.1067800500.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.1082021467.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.117143296.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.1173407631.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.1174174327.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.1212044202.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1218148151.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1239077744.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1265004354.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1269602532.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1270891561.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1276281004.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1343283029.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1379727809.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1399458375.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1401446646.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1499282969.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1501494531.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1504033101.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1570222140.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1589677371.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1600412528.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1606746570.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1623804538.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1644448401.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.165642650.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1680430908.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1688775452.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1689172323.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1714085752.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1841213680.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1917061625.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.1941197792.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.1992953928.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.2022112242.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.207992703.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.2108171241.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.2137805417.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.278867048.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.315423540.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.351849654.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.352430504.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.386032906.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.398821347.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.401319870.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.402414249.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.556766345.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.679509826.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.708816160.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.722305328.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.810267478.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.821910905.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.865690848.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.881300774.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.898242765.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.910793778.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.95703494.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.98839323.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1795699229
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.02978 +/- 0.0159683 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 8.02978 @ 95%CL (1 toyMC)
median expected limit: r < 8.02978 @ 95%CL (1 toyMC)
   68% expected band : 8.02978 < r < 8.02978
   95% expected band : 8.02978 < r < 8.02978
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1617962530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.00203 +/- 0.014015 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.00203 @ 95%CL (1 toyMC)
median expected limit: r < 8.00203 @ 95%CL (1 toyMC)
   68% expected band : 8.00203 < r < 8.00203
   95% expected band : 8.00203 < r < 8.00203
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1819665726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.02153 +/- 0.0137283 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.02153 @ 95%CL (1 toyMC)
median expected limit: r < 8.02153 @ 95%CL (1 toyMC)
   68% expected band : 8.02153 < r < 8.02153
   95% expected band : 8.02153 < r < 8.02153
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -269944602
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6292 +/- 0.0153287 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 11.6292 @ 95%CL (1 toyMC)
median expected limit: r < 11.6292 @ 95%CL (1 toyMC)
   68% expected band : 11.6292 < r < 11.6292
   95% expected band : 11.6292 < r < 11.6292
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1055631359
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.99033 +/- 0.0163532 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 7.99033 @ 95%CL (1 toyMC)
median expected limit: r < 7.99033 @ 95%CL (1 toyMC)
   68% expected band : 7.99033 < r < 7.99033
   95% expected band : 7.99033 < r < 7.99033
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2031845319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.04525 +/- 0.0165163 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.04525 @ 95%CL (1 toyMC)
median expected limit: r < 8.04525 @ 95%CL (1 toyMC)
   68% expected band : 8.04525 < r < 8.04525
   95% expected band : 8.04525 < r < 8.04525
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 52332099
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.06917 +/- 0.0151796 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.06917 @ 95%CL (1 toyMC)
median expected limit: r < 8.06917 @ 95%CL (1 toyMC)
   68% expected band : 8.06917 < r < 8.06917
   95% expected band : 8.06917 < r < 8.06917
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1535449315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.10265 +/- 0.0167355 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.10265 @ 95%CL (1 toyMC)
median expected limit: r < 8.10265 @ 95%CL (1 toyMC)
   68% expected band : 8.10265 < r < 8.10265
   95% expected band : 8.10265 < r < 8.10265
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1805394328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.224 +/- 0.0146461 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.224 @ 95%CL (1 toyMC)
median expected limit: r < 10.224 @ 95%CL (1 toyMC)
   68% expected band : 10.224 < r < 10.224
   95% expected band : 10.224 < r < 10.224
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 576558729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9306 +/- 0.0189153 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 10.9306 @ 95%CL (1 toyMC)
median expected limit: r < 10.9306 @ 95%CL (1 toyMC)
   68% expected band : 10.9306 < r < 10.9306
   95% expected band : 10.9306 < r < 10.9306
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1524530345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.04637 +/- 0.0195552 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.04637 @ 95%CL (1 toyMC)
median expected limit: r < 8.04637 @ 95%CL (1 toyMC)
   68% expected band : 8.04637 < r < 8.04637
   95% expected band : 8.04637 < r < 8.04637
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 966054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.243 +/- 0.0158044 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.243 @ 95%CL (1 toyMC)
median expected limit: r < 11.243 @ 95%CL (1 toyMC)
   68% expected band : 11.243 < r < 11.243
   95% expected band : 11.243 < r < 11.243
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2049340493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.3402 +/- 0.0193255 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.3402 @ 95%CL (1 toyMC)
median expected limit: r < 12.3402 @ 95%CL (1 toyMC)
   68% expected band : 12.3402 < r < 12.3402
   95% expected band : 12.3402 < r < 12.3402
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1313275495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.96587 +/- 0.0133195 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.96587 @ 95%CL (1 toyMC)
median expected limit: r < 7.96587 @ 95%CL (1 toyMC)
   68% expected band : 7.96587 < r < 7.96587
   95% expected band : 7.96587 < r < 7.96587
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 940695714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.00572 +/- 0.0174282 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.00572 @ 95%CL (1 toyMC)
median expected limit: r < 8.00572 @ 95%CL (1 toyMC)
   68% expected band : 8.00572 < r < 8.00572
   95% expected band : 8.00572 < r < 8.00572
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1275754447
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.00576 +/- 0.0153425 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.00576 @ 95%CL (1 toyMC)
median expected limit: r < 8.00576 @ 95%CL (1 toyMC)
   68% expected band : 8.00576 < r < 8.00576
   95% expected band : 8.00576 < r < 8.00576
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 423770986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.02774 +/- 0.0157063 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.02774 @ 95%CL (1 toyMC)
median expected limit: r < 8.02774 @ 95%CL (1 toyMC)
   68% expected band : 8.02774 < r < 8.02774
   95% expected band : 8.02774 < r < 8.02774
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -464563527
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1 +/- 0.0179351 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 10.1 @ 95%CL (1 toyMC)
median expected limit: r < 10.1 @ 95%CL (1 toyMC)
   68% expected band : 10.1 < r < 10.1
   95% expected band : 10.1 < r < 10.1
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -825990432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.03155 +/- 0.0152359 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.03155 @ 95%CL (1 toyMC)
median expected limit: r < 8.03155 @ 95%CL (1 toyMC)
   68% expected band : 8.03155 < r < 8.03155
   95% expected band : 8.03155 < r < 8.03155
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1751281132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.4402 +/- 0.0127183 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.4402 @ 95%CL (1 toyMC)
median expected limit: r < 13.4402 @ 95%CL (1 toyMC)
   68% expected band : 13.4402 < r < 13.4402
   95% expected band : 13.4402 < r < 13.4402
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1319150412
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.03142 +/- 0.0163454 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.03142 @ 95%CL (1 toyMC)
median expected limit: r < 8.03142 @ 95%CL (1 toyMC)
   68% expected band : 8.03142 < r < 8.03142
   95% expected band : 8.03142 < r < 8.03142
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1796364276
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6038 +/- 0.0164713 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.6038 @ 95%CL (1 toyMC)
median expected limit: r < 11.6038 @ 95%CL (1 toyMC)
   68% expected band : 11.6038 < r < 11.6038
   95% expected band : 11.6038 < r < 11.6038
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 591493839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.0161 +/- 0.0139983 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.0161 @ 95%CL (1 toyMC)
median expected limit: r < 8.0161 @ 95%CL (1 toyMC)
   68% expected band : 8.0161 < r < 8.0161
   95% expected band : 8.0161 < r < 8.0161
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 57048591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.02795 +/- 0.0164148 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.02795 @ 95%CL (1 toyMC)
median expected limit: r < 8.02795 @ 95%CL (1 toyMC)
   68% expected band : 8.02795 < r < 8.02795
   95% expected band : 8.02795 < r < 8.02795
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1222111832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.0586 +/- 0.0173353 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.0586 @ 95%CL (1 toyMC)
median expected limit: r < 8.0586 @ 95%CL (1 toyMC)
   68% expected band : 8.0586 < r < 8.0586
   95% expected band : 8.0586 < r < 8.0586
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2030098154
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.98124 +/- 0.016276 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.98124 @ 95%CL (1 toyMC)
median expected limit: r < 7.98124 @ 95%CL (1 toyMC)
   68% expected band : 7.98124 < r < 7.98124
   95% expected band : 7.98124 < r < 7.98124
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1940231723
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.00663 +/- 0.0194182 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.00663 @ 95%CL (1 toyMC)
median expected limit: r < 8.00663 @ 95%CL (1 toyMC)
   68% expected band : 8.00663 < r < 8.00663
   95% expected band : 8.00663 < r < 8.00663
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -639499099
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.8678 +/- 0.00680916 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 17.8678 @ 95%CL (1 toyMC)
median expected limit: r < 17.8678 @ 95%CL (1 toyMC)
   68% expected band : 17.8678 < r < 17.8678
   95% expected band : 17.8678 < r < 17.8678
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1114413359
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.9962 +/- 0.0157435 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.9962 @ 95%CL (1 toyMC)
median expected limit: r < 7.9962 @ 95%CL (1 toyMC)
   68% expected band : 7.9962 < r < 7.9962
   95% expected band : 7.9962 < r < 7.9962
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1437534626
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.1046 +/- 0.0139757 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 15.1046 @ 95%CL (1 toyMC)
median expected limit: r < 15.1046 @ 95%CL (1 toyMC)
   68% expected band : 15.1046 < r < 15.1046
   95% expected band : 15.1046 < r < 15.1046
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1855316356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.01906 +/- 0.0149805 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.01906 @ 95%CL (1 toyMC)
median expected limit: r < 8.01906 @ 95%CL (1 toyMC)
   68% expected band : 8.01906 < r < 8.01906
   95% expected band : 8.01906 < r < 8.01906
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -601452854
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.06455 +/- 0.017568 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.06455 @ 95%CL (1 toyMC)
median expected limit: r < 8.06455 @ 95%CL (1 toyMC)
   68% expected band : 8.06455 < r < 8.06455
   95% expected band : 8.06455 < r < 8.06455
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 715365308
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.00346 +/- 0.0125525 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.00346 @ 95%CL (1 toyMC)
median expected limit: r < 8.00346 @ 95%CL (1 toyMC)
   68% expected band : 8.00346 < r < 8.00346
   95% expected band : 8.00346 < r < 8.00346
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1804611717
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.00489 +/- 0.0166625 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.00489 @ 95%CL (1 toyMC)
median expected limit: r < 8.00489 @ 95%CL (1 toyMC)
   68% expected band : 8.00489 < r < 8.00489
   95% expected band : 8.00489 < r < 8.00489
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 298919833
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1808 +/- 0.0156738 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.1808 @ 95%CL (1 toyMC)
median expected limit: r < 10.1808 @ 95%CL (1 toyMC)
   68% expected band : 10.1808 < r < 10.1808
   95% expected band : 10.1808 < r < 10.1808
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 932298832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.0094 +/- 0.0164724 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.0094 @ 95%CL (1 toyMC)
median expected limit: r < 8.0094 @ 95%CL (1 toyMC)
   68% expected band : 8.0094 < r < 8.0094
   95% expected band : 8.0094 < r < 8.0094
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1366777990
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.0406 +/- 0.0157204 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.0406 @ 95%CL (1 toyMC)
median expected limit: r < 8.0406 @ 95%CL (1 toyMC)
   68% expected band : 8.0406 < r < 8.0406
   95% expected band : 8.0406 < r < 8.0406
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 38206843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.01842 +/- 0.0178482 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.01842 @ 95%CL (1 toyMC)
median expected limit: r < 8.01842 @ 95%CL (1 toyMC)
   68% expected band : 8.01842 < r < 8.01842
   95% expected band : 8.01842 < r < 8.01842
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -478126417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.00105 +/- 0.0168335 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.00105 @ 95%CL (1 toyMC)
median expected limit: r < 8.00105 @ 95%CL (1 toyMC)
   68% expected band : 8.00105 < r < 8.00105
   95% expected band : 8.00105 < r < 8.00105
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1350116046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.02447 +/- 0.0189943 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.02447 @ 95%CL (1 toyMC)
median expected limit: r < 8.02447 @ 95%CL (1 toyMC)
   68% expected band : 8.02447 < r < 8.02447
   95% expected band : 8.02447 < r < 8.02447
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1804456854
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.6189 +/- 0.0147997 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.6189 @ 95%CL (1 toyMC)
median expected limit: r < 12.6189 @ 95%CL (1 toyMC)
   68% expected band : 12.6189 < r < 12.6189
   95% expected band : 12.6189 < r < 12.6189
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -19506031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.564 +/- 0.0144481 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 13.564 @ 95%CL (1 toyMC)
median expected limit: r < 13.564 @ 95%CL (1 toyMC)
   68% expected band : 13.564 < r < 13.564
   95% expected band : 13.564 < r < 13.564
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 520342356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.98893 +/- 0.0166098 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.98893 @ 95%CL (1 toyMC)
median expected limit: r < 7.98893 @ 95%CL (1 toyMC)
   68% expected band : 7.98893 < r < 7.98893
   95% expected band : 7.98893 < r < 7.98893
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1344076707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2018 +/- 0.0168403 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 10.2018 @ 95%CL (1 toyMC)
median expected limit: r < 10.2018 @ 95%CL (1 toyMC)
   68% expected band : 10.2018 < r < 10.2018
   95% expected band : 10.2018 < r < 10.2018
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 118396671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.98885 +/- 0.0175058 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.98885 @ 95%CL (1 toyMC)
median expected limit: r < 7.98885 @ 95%CL (1 toyMC)
   68% expected band : 7.98885 < r < 7.98885
   95% expected band : 7.98885 < r < 7.98885
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1908536915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.0191 +/- 0.017745 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.0191 @ 95%CL (1 toyMC)
median expected limit: r < 8.0191 @ 95%CL (1 toyMC)
   68% expected band : 8.0191 < r < 8.0191
   95% expected band : 8.0191 < r < 8.0191
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -52638478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.91043 +/- 0.0216663 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.91043 @ 95%CL (1 toyMC)
median expected limit: r < 9.91043 @ 95%CL (1 toyMC)
   68% expected band : 9.91043 < r < 9.91043
   95% expected band : 9.91043 < r < 9.91043
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 821069567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2292 +/- 0.0172083 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.2292 @ 95%CL (1 toyMC)
median expected limit: r < 10.2292 @ 95%CL (1 toyMC)
   68% expected band : 10.2292 < r < 10.2292
   95% expected band : 10.2292 < r < 10.2292
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -550157017
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.235 +/- 0.0196943 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.235 @ 95%CL (1 toyMC)
median expected limit: r < 11.235 @ 95%CL (1 toyMC)
   68% expected band : 11.235 < r < 11.235
   95% expected band : 11.235 < r < 11.235
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 181705497
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.00954 +/- 0.016282 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.00954 @ 95%CL (1 toyMC)
median expected limit: r < 8.00954 @ 95%CL (1 toyMC)
   68% expected band : 8.00954 < r < 8.00954
   95% expected band : 8.00954 < r < 8.00954
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1627973122
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.08724 +/- 0.0177117 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.08724 @ 95%CL (1 toyMC)
median expected limit: r < 8.08724 @ 95%CL (1 toyMC)
   68% expected band : 8.08724 < r < 8.08724
   95% expected band : 8.08724 < r < 8.08724
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1317758012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9213 +/- 0.0154773 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.9213 @ 95%CL (1 toyMC)
median expected limit: r < 10.9213 @ 95%CL (1 toyMC)
   68% expected band : 10.9213 < r < 10.9213
   95% expected band : 10.9213 < r < 10.9213
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -355559783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.01795 +/- 0.0180177 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.01795 @ 95%CL (1 toyMC)
median expected limit: r < 8.01795 @ 95%CL (1 toyMC)
   68% expected band : 8.01795 < r < 8.01795
   95% expected band : 8.01795 < r < 8.01795
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -385544937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.05099 +/- 0.0164112 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.05099 @ 95%CL (1 toyMC)
median expected limit: r < 8.05099 @ 95%CL (1 toyMC)
   68% expected band : 8.05099 < r < 8.05099
   95% expected band : 8.05099 < r < 8.05099
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1124069852
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8384 +/- 0.0143943 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 10.8384 @ 95%CL (1 toyMC)
median expected limit: r < 10.8384 @ 95%CL (1 toyMC)
   68% expected band : 10.8384 < r < 10.8384
   95% expected band : 10.8384 < r < 10.8384
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2079222670
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.01451 +/- 0.0185622 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.01451 @ 95%CL (1 toyMC)
median expected limit: r < 8.01451 @ 95%CL (1 toyMC)
   68% expected band : 8.01451 < r < 8.01451
   95% expected band : 8.01451 < r < 8.01451
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1430278825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2773 +/- 0.0160228 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.2773 @ 95%CL (1 toyMC)
median expected limit: r < 10.2773 @ 95%CL (1 toyMC)
   68% expected band : 10.2773 < r < 10.2773
   95% expected band : 10.2773 < r < 10.2773
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 226701080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.02161 +/- 0.0159195 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.02161 @ 95%CL (1 toyMC)
median expected limit: r < 8.02161 @ 95%CL (1 toyMC)
   68% expected band : 8.02161 < r < 8.02161
   95% expected band : 8.02161 < r < 8.02161
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1295019002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.98952 +/- 0.0135474 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.98952 @ 95%CL (1 toyMC)
median expected limit: r < 7.98952 @ 95%CL (1 toyMC)
   68% expected band : 7.98952 < r < 7.98952
   95% expected band : 7.98952 < r < 7.98952
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -802404480
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.151 +/- 0.0192171 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.151 @ 95%CL (1 toyMC)
median expected limit: r < 10.151 @ 95%CL (1 toyMC)
   68% expected band : 10.151 < r < 10.151
   95% expected band : 10.151 < r < 10.151
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -40296573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.95828 +/- 0.0165346 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.95828 @ 95%CL (1 toyMC)
median expected limit: r < 7.95828 @ 95%CL (1 toyMC)
   68% expected band : 7.95828 < r < 7.95828
   95% expected band : 7.95828 < r < 7.95828
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -947128574
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2308 +/- 0.0157643 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.2308 @ 95%CL (1 toyMC)
median expected limit: r < 10.2308 @ 95%CL (1 toyMC)
   68% expected band : 10.2308 < r < 10.2308
   95% expected band : 10.2308 < r < 10.2308
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1345584257
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.02287 +/- 0.0152674 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.02287 @ 95%CL (1 toyMC)
median expected limit: r < 8.02287 @ 95%CL (1 toyMC)
   68% expected band : 8.02287 < r < 8.02287
   95% expected band : 8.02287 < r < 8.02287
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1436703924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.00921 +/- 0.0183077 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 8.00921 @ 95%CL (1 toyMC)
median expected limit: r < 8.00921 @ 95%CL (1 toyMC)
   68% expected band : 8.00921 < r < 8.00921
   95% expected band : 8.00921 < r < 8.00921
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1559726290
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1631 +/- 0.016275 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.1631 @ 95%CL (1 toyMC)
median expected limit: r < 10.1631 @ 95%CL (1 toyMC)
   68% expected band : 10.1631 < r < 10.1631
   95% expected band : 10.1631 < r < 10.1631
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1383549344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.98771 +/- 0.0137675 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 7.98771 @ 95%CL (1 toyMC)
median expected limit: r < 7.98771 @ 95%CL (1 toyMC)
   68% expected band : 7.98771 < r < 7.98771
   95% expected band : 7.98771 < r < 7.98771
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 810605212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.2061 +/- 0.0179978 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.2061 @ 95%CL (1 toyMC)
median expected limit: r < 11.2061 @ 95%CL (1 toyMC)
   68% expected band : 11.2061 < r < 11.2061
   95% expected band : 11.2061 < r < 11.2061
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -687551525
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.9119 +/- 0.0141796 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.9119 @ 95%CL (1 toyMC)
median expected limit: r < 11.9119 @ 95%CL (1 toyMC)
   68% expected band : 11.9119 < r < 11.9119
   95% expected band : 11.9119 < r < 11.9119
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 743775951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.01759 +/- 0.016544 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.01759 @ 95%CL (1 toyMC)
median expected limit: r < 8.01759 @ 95%CL (1 toyMC)
   68% expected band : 8.01759 < r < 8.01759
   95% expected band : 8.01759 < r < 8.01759
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1506368299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.02769 +/- 0.011449 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.02769 @ 95%CL (1 toyMC)
median expected limit: r < 8.02769 @ 95%CL (1 toyMC)
   68% expected band : 8.02769 < r < 8.02769
   95% expected band : 8.02769 < r < 8.02769
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1065946174
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1338 +/- 0.0191678 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 10.1338 @ 95%CL (1 toyMC)
median expected limit: r < 10.1338 @ 95%CL (1 toyMC)
   68% expected band : 10.1338 < r < 10.1338
   95% expected band : 10.1338 < r < 10.1338
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2119833841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.97482 +/- 0.0162183 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.97482 @ 95%CL (1 toyMC)
median expected limit: r < 7.97482 @ 95%CL (1 toyMC)
   68% expected band : 7.97482 < r < 7.97482
   95% expected band : 7.97482 < r < 7.97482
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 881519966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.0544 +/- 0.0183328 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.0544 @ 95%CL (1 toyMC)
median expected limit: r < 8.0544 @ 95%CL (1 toyMC)
   68% expected band : 8.0544 < r < 8.0544
   95% expected band : 8.0544 < r < 8.0544
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1959567326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.7322 +/- 0.0114576 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 14.7322 @ 95%CL (1 toyMC)
median expected limit: r < 14.7322 @ 95%CL (1 toyMC)
   68% expected band : 14.7322 < r < 14.7322
   95% expected band : 14.7322 < r < 14.7322
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1753487682
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.97947 +/- 0.0137754 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.97947 @ 95%CL (1 toyMC)
median expected limit: r < 7.97947 @ 95%CL (1 toyMC)
   68% expected band : 7.97947 < r < 7.97947
   95% expected band : 7.97947 < r < 7.97947
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 442410498
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.02029 +/- 0.0171326 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.02029 @ 95%CL (1 toyMC)
median expected limit: r < 8.02029 @ 95%CL (1 toyMC)
   68% expected band : 8.02029 < r < 8.02029
   95% expected band : 8.02029 < r < 8.02029
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 408043428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.5051 +/- 0.0158074 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 14.5051 @ 95%CL (1 toyMC)
median expected limit: r < 14.5051 @ 95%CL (1 toyMC)
   68% expected band : 14.5051 < r < 14.5051
   95% expected band : 14.5051 < r < 14.5051
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -808661348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1856 +/- 0.0178484 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 10.1856 @ 95%CL (1 toyMC)
median expected limit: r < 10.1856 @ 95%CL (1 toyMC)
   68% expected band : 10.1856 < r < 10.1856
   95% expected band : 10.1856 < r < 10.1856
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2120379953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.3114 +/- 0.0170501 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.3114 @ 95%CL (1 toyMC)
median expected limit: r < 12.3114 @ 95%CL (1 toyMC)
   68% expected band : 12.3114 < r < 12.3114
   95% expected band : 12.3114 < r < 12.3114
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1291021553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.97136 +/- 0.015133 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.97136 @ 95%CL (1 toyMC)
median expected limit: r < 7.97136 @ 95%CL (1 toyMC)
   68% expected band : 7.97136 < r < 7.97136
   95% expected band : 7.97136 < r < 7.97136
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1712818539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.03507 +/- 0.0168484 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.03507 @ 95%CL (1 toyMC)
median expected limit: r < 8.03507 @ 95%CL (1 toyMC)
   68% expected band : 8.03507 < r < 8.03507
   95% expected band : 8.03507 < r < 8.03507
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1396260709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.5561 +/- 0.015869 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 13.5561 @ 95%CL (1 toyMC)
median expected limit: r < 13.5561 @ 95%CL (1 toyMC)
   68% expected band : 13.5561 < r < 13.5561
   95% expected band : 13.5561 < r < 13.5561
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -529887259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.00101 +/- 0.0185469 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.00101 @ 95%CL (1 toyMC)
median expected limit: r < 8.00101 @ 95%CL (1 toyMC)
   68% expected band : 8.00101 < r < 8.00101
   95% expected band : 8.00101 < r < 8.00101
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 444069040
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.002 +/- 0.0129717 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 8.002 @ 95%CL (1 toyMC)
median expected limit: r < 8.002 @ 95%CL (1 toyMC)
   68% expected band : 8.002 < r < 8.002
   95% expected band : 8.002 < r < 8.002
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 107342788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.03389 +/- 0.0154948 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 8.03389 @ 95%CL (1 toyMC)
median expected limit: r < 8.03389 @ 95%CL (1 toyMC)
   68% expected band : 8.03389 < r < 8.03389
   95% expected band : 8.03389 < r < 8.03389
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1690387468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.4554 +/- 0.0104468 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.4554 @ 95%CL (1 toyMC)
median expected limit: r < 14.4554 @ 95%CL (1 toyMC)
   68% expected band : 14.4554 < r < 14.4554
   95% expected band : 14.4554 < r < 14.4554
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1320247594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.01643 +/- 0.0179052 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.01643 @ 95%CL (1 toyMC)
median expected limit: r < 8.01643 @ 95%CL (1 toyMC)
   68% expected band : 8.01643 < r < 8.01643
   95% expected band : 8.01643 < r < 8.01643
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1517466799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2546 +/- 0.0148127 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 10.2546 @ 95%CL (1 toyMC)
median expected limit: r < 10.2546 @ 95%CL (1 toyMC)
   68% expected band : 10.2546 < r < 10.2546
   95% expected band : 10.2546 < r < 10.2546
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -507967915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.98798 +/- 0.0175154 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 7.98798 @ 95%CL (1 toyMC)
median expected limit: r < 7.98798 @ 95%CL (1 toyMC)
   68% expected band : 7.98798 < r < 7.98798
   95% expected band : 7.98798 < r < 7.98798
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1276549918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.679 +/- 0.0168356 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.679 @ 95%CL (1 toyMC)
median expected limit: r < 11.679 @ 95%CL (1 toyMC)
   68% expected band : 11.679 < r < 11.679
   95% expected band : 11.679 < r < 11.679
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -713541029
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.3513 +/- 0.0152397 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.3513 @ 95%CL (1 toyMC)
median expected limit: r < 13.3513 @ 95%CL (1 toyMC)
   68% expected band : 13.3513 < r < 13.3513
   95% expected band : 13.3513 < r < 13.3513
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1414531867
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3446 +/- 0.0174043 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 10.3446 @ 95%CL (1 toyMC)
median expected limit: r < 10.3446 @ 95%CL (1 toyMC)
   68% expected band : 10.3446 < r < 10.3446
   95% expected band : 10.3446 < r < 10.3446
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1554534023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.52 +/- 0.0184105 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.52 @ 95%CL (1 toyMC)
median expected limit: r < 11.52 @ 95%CL (1 toyMC)
   68% expected band : 11.52 < r < 11.52
   95% expected band : 11.52 < r < 11.52
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1240401892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.6062 +/- 0.0216364 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.6062 @ 95%CL (1 toyMC)
median expected limit: r < 10.6062 @ 95%CL (1 toyMC)
   68% expected band : 10.6062 < r < 10.6062
   95% expected band : 10.6062 < r < 10.6062
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 443308433
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.00947 +/- 0.0147836 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 8.00947 @ 95%CL (1 toyMC)
median expected limit: r < 8.00947 @ 95%CL (1 toyMC)
   68% expected band : 8.00947 < r < 8.00947
   95% expected band : 8.00947 < r < 8.00947
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -547139809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.098 +/- 0.0114947 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.098 @ 95%CL (1 toyMC)
median expected limit: r < 14.098 @ 95%CL (1 toyMC)
   68% expected band : 14.098 < r < 14.098
   95% expected band : 14.098 < r < 14.098
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2043999581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.0777 +/- 0.0171566 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 12.0777 @ 95%CL (1 toyMC)
median expected limit: r < 12.0777 @ 95%CL (1 toyMC)
   68% expected band : 12.0777 < r < 12.0777
   95% expected band : 12.0777 < r < 12.0777
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -223612219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.98177 +/- 0.0180424 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.98177 @ 95%CL (1 toyMC)
median expected limit: r < 7.98177 @ 95%CL (1 toyMC)
   68% expected band : 7.98177 < r < 7.98177
   95% expected band : 7.98177 < r < 7.98177
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1454920012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1805 +/- 0.0176906 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 10.1805 @ 95%CL (1 toyMC)
median expected limit: r < 10.1805 @ 95%CL (1 toyMC)
   68% expected band : 10.1805 < r < 10.1805
   95% expected band : 10.1805 < r < 10.1805
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -348014433
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.94955 +/- 0.0164074 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 7.94955 @ 95%CL (1 toyMC)
median expected limit: r < 7.94955 @ 95%CL (1 toyMC)
   68% expected band : 7.94955 < r < 7.94955
   95% expected band : 7.94955 < r < 7.94955
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1055631359.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1065946174.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1114413359.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1295019002.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1317758012.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1319150412.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1320247594.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1345584257.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1350116046.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1414531867.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1430278825.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1436703924.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1454920012.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1506368299.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1517466799.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1554534023.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1617962530.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1712818539.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1753487682.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1804456854.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1804611717.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1805394328.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1855316356.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-19506031.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1959567326.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-2049340493.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-2119833841.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-223612219.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-269944602.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-348014433.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-355559783.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-385544937.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-40296573.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-464563527.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-478126417.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-507967915.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-52638478.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-529887259.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-547139809.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-550157017.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-601452854.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-639499099.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-687551525.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-713541029.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-802404480.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-808661348.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-825990432.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.-947128574.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.107342788.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1124069852.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.118396671.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1222111832.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1240401892.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1275754447.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1276549918.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1291021553.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1313275495.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1344076707.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1366777990.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1383549344.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1396260709.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1437534626.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1524530345.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1535449315.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1559726290.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1627973122.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1690387468.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1751281132.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1795699229.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1796364276.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.181705497.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1819665726.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1908536915.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1940231723.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.2030098154.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.2031845319.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.2043999581.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.2079222670.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.2120379953.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.226701080.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.298919833.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.38206843.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.408043428.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.423770986.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.442410498.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.443308433.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.444069040.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.520342356.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.52332099.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.57048591.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.576558729.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.591493839.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.715365308.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.743775951.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.810605212.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.821069567.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.881519966.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.932298832.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.940695714.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.966054.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 841953990
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6516 +/- 0.0139354 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 11.6516 @ 95%CL (1 toyMC)
median expected limit: r < 11.6516 @ 95%CL (1 toyMC)
   68% expected band : 11.6516 < r < 11.6516
   95% expected band : 11.6516 < r < 11.6516
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1358645127
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9362 +/- 0.0186606 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9362 @ 95%CL (1 toyMC)
median expected limit: r < 10.9362 @ 95%CL (1 toyMC)
   68% expected band : 10.9362 < r < 10.9362
   95% expected band : 10.9362 < r < 10.9362
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1720889086
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.58696 +/- 0.0201504 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.58696 @ 95%CL (1 toyMC)
median expected limit: r < 8.58696 @ 95%CL (1 toyMC)
   68% expected band : 8.58696 < r < 8.58696
   95% expected band : 8.58696 < r < 8.58696
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 290675415
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.49823 +/- 0.0165004 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.49823 @ 95%CL (1 toyMC)
median expected limit: r < 8.49823 @ 95%CL (1 toyMC)
   68% expected band : 8.49823 < r < 8.49823
   95% expected band : 8.49823 < r < 8.49823
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1726009064
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.807 +/- 0.0142878 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.807 @ 95%CL (1 toyMC)
median expected limit: r < 10.807 @ 95%CL (1 toyMC)
   68% expected band : 10.807 < r < 10.807
   95% expected band : 10.807 < r < 10.807
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1295438332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.2185 +/- 0.0156599 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.2185 @ 95%CL (1 toyMC)
median expected limit: r < 12.2185 @ 95%CL (1 toyMC)
   68% expected band : 12.2185 < r < 12.2185
   95% expected band : 12.2185 < r < 12.2185
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -65701273
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.54513 +/- 0.0180853 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.54513 @ 95%CL (1 toyMC)
median expected limit: r < 8.54513 @ 95%CL (1 toyMC)
   68% expected band : 8.54513 < r < 8.54513
   95% expected band : 8.54513 < r < 8.54513
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1061657171
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.0701 +/- 0.0143779 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.0701 @ 95%CL (1 toyMC)
median expected limit: r < 12.0701 @ 95%CL (1 toyMC)
   68% expected band : 12.0701 < r < 12.0701
   95% expected band : 12.0701 < r < 12.0701
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 105235168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.54069 +/- 0.0154995 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 8.54069 @ 95%CL (1 toyMC)
median expected limit: r < 8.54069 @ 95%CL (1 toyMC)
   68% expected band : 8.54069 < r < 8.54069
   95% expected band : 8.54069 < r < 8.54069
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -957114978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.0706 +/- 0.0149423 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.0706 @ 95%CL (1 toyMC)
median expected limit: r < 14.0706 @ 95%CL (1 toyMC)
   68% expected band : 14.0706 < r < 14.0706
   95% expected band : 14.0706 < r < 14.0706
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -440141789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.3126 +/- 0.0154349 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.3126 @ 95%CL (1 toyMC)
median expected limit: r < 12.3126 @ 95%CL (1 toyMC)
   68% expected band : 12.3126 < r < 12.3126
   95% expected band : 12.3126 < r < 12.3126
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 781985967
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.3591 +/- 0.0151561 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 14.3591 @ 95%CL (1 toyMC)
median expected limit: r < 14.3591 @ 95%CL (1 toyMC)
   68% expected band : 14.3591 < r < 14.3591
   95% expected band : 14.3591 < r < 14.3591
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1280944316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8959 +/- 0.0150037 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.8959 @ 95%CL (1 toyMC)
median expected limit: r < 10.8959 @ 95%CL (1 toyMC)
   68% expected band : 10.8959 < r < 10.8959
   95% expected band : 10.8959 < r < 10.8959
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -624016625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.51843 +/- 0.0163197 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.51843 @ 95%CL (1 toyMC)
median expected limit: r < 8.51843 @ 95%CL (1 toyMC)
   68% expected band : 8.51843 < r < 8.51843
   95% expected band : 8.51843 < r < 8.51843
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -174990202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.55978 +/- 0.0165465 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.55978 @ 95%CL (1 toyMC)
median expected limit: r < 8.55978 @ 95%CL (1 toyMC)
   68% expected band : 8.55978 < r < 8.55978
   95% expected band : 8.55978 < r < 8.55978
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -435664506
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.54998 +/- 0.0180964 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.54998 @ 95%CL (1 toyMC)
median expected limit: r < 8.54998 @ 95%CL (1 toyMC)
   68% expected band : 8.54998 < r < 8.54998
   95% expected band : 8.54998 < r < 8.54998
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1542584232
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.55719 +/- 0.0135298 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.55719 @ 95%CL (1 toyMC)
median expected limit: r < 8.55719 @ 95%CL (1 toyMC)
   68% expected band : 8.55719 < r < 8.55719
   95% expected band : 8.55719 < r < 8.55719
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1127620535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.54738 +/- 0.018067 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.54738 @ 95%CL (1 toyMC)
median expected limit: r < 8.54738 @ 95%CL (1 toyMC)
   68% expected band : 8.54738 < r < 8.54738
   95% expected band : 8.54738 < r < 8.54738
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1074975023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.5568 +/- 0.0156887 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.5568 @ 95%CL (1 toyMC)
median expected limit: r < 8.5568 @ 95%CL (1 toyMC)
   68% expected band : 8.5568 < r < 8.5568
   95% expected band : 8.5568 < r < 8.5568
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2069474995
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.1333 +/- 0.015926 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 14.1333 @ 95%CL (1 toyMC)
median expected limit: r < 14.1333 @ 95%CL (1 toyMC)
   68% expected band : 14.1333 < r < 14.1333
   95% expected band : 14.1333 < r < 14.1333
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1898100874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.47122 +/- 0.0192671 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.47122 @ 95%CL (1 toyMC)
median expected limit: r < 8.47122 @ 95%CL (1 toyMC)
   68% expected band : 8.47122 < r < 8.47122
   95% expected band : 8.47122 < r < 8.47122
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -491871646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.50945 +/- 0.0173698 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.50945 @ 95%CL (1 toyMC)
median expected limit: r < 8.50945 @ 95%CL (1 toyMC)
   68% expected band : 8.50945 < r < 8.50945
   95% expected band : 8.50945 < r < 8.50945
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 499281358
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9335 +/- 0.0212548 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 10.9335 @ 95%CL (1 toyMC)
median expected limit: r < 10.9335 @ 95%CL (1 toyMC)
   68% expected band : 10.9335 < r < 10.9335
   95% expected band : 10.9335 < r < 10.9335
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 852942809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.5396 +/- 0.0166869 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.5396 @ 95%CL (1 toyMC)
median expected limit: r < 8.5396 @ 95%CL (1 toyMC)
   68% expected band : 8.5396 < r < 8.5396
   95% expected band : 8.5396 < r < 8.5396
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1849492828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.54677 +/- 0.0184671 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 8.54677 @ 95%CL (1 toyMC)
median expected limit: r < 8.54677 @ 95%CL (1 toyMC)
   68% expected band : 8.54677 < r < 8.54677
   95% expected band : 8.54677 < r < 8.54677
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -98390182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.54826 +/- 0.0184667 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.54826 @ 95%CL (1 toyMC)
median expected limit: r < 8.54826 @ 95%CL (1 toyMC)
   68% expected band : 8.54826 < r < 8.54826
   95% expected band : 8.54826 < r < 8.54826
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 137509245
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.5157 +/- 0.0155514 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 12.5157 @ 95%CL (1 toyMC)
median expected limit: r < 12.5157 @ 95%CL (1 toyMC)
   68% expected band : 12.5157 < r < 12.5157
   95% expected band : 12.5157 < r < 12.5157
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1771483707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.43 +/- 0.0130897 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 14.43 @ 95%CL (1 toyMC)
median expected limit: r < 14.43 @ 95%CL (1 toyMC)
   68% expected band : 14.43 < r < 14.43
   95% expected band : 14.43 < r < 14.43
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 16863771
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.56502 +/- 0.0171923 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.56502 @ 95%CL (1 toyMC)
median expected limit: r < 8.56502 @ 95%CL (1 toyMC)
   68% expected band : 8.56502 < r < 8.56502
   95% expected band : 8.56502 < r < 8.56502
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1929509233
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.55271 +/- 0.0166583 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.55271 @ 95%CL (1 toyMC)
median expected limit: r < 8.55271 @ 95%CL (1 toyMC)
   68% expected band : 8.55271 < r < 8.55271
   95% expected band : 8.55271 < r < 8.55271
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -371352221
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.2457 +/- 0.0172078 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 11.2457 @ 95%CL (1 toyMC)
median expected limit: r < 11.2457 @ 95%CL (1 toyMC)
   68% expected band : 11.2457 < r < 11.2457
   95% expected band : 11.2457 < r < 11.2457
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -92960418
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.53717 +/- 0.0137937 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.53717 @ 95%CL (1 toyMC)
median expected limit: r < 8.53717 @ 95%CL (1 toyMC)
   68% expected band : 8.53717 < r < 8.53717
   95% expected band : 8.53717 < r < 8.53717
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1827973537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.55589 +/- 0.0182389 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.55589 @ 95%CL (1 toyMC)
median expected limit: r < 8.55589 @ 95%CL (1 toyMC)
   68% expected band : 8.55589 < r < 8.55589
   95% expected band : 8.55589 < r < 8.55589
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1034862556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.7741 +/- 0.0160442 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.7741 @ 95%CL (1 toyMC)
median expected limit: r < 10.7741 @ 95%CL (1 toyMC)
   68% expected band : 10.7741 < r < 10.7741
   95% expected band : 10.7741 < r < 10.7741
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 632897399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.50615 +/- 0.0167931 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.50615 @ 95%CL (1 toyMC)
median expected limit: r < 8.50615 @ 95%CL (1 toyMC)
   68% expected band : 8.50615 < r < 8.50615
   95% expected band : 8.50615 < r < 8.50615
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1852441371
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.4317 +/- 0.0176183 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 13.4317 @ 95%CL (1 toyMC)
median expected limit: r < 13.4317 @ 95%CL (1 toyMC)
   68% expected band : 13.4317 < r < 13.4317
   95% expected band : 13.4317 < r < 13.4317
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -548682024
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.52962 +/- 0.0163223 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.52962 @ 95%CL (1 toyMC)
median expected limit: r < 8.52962 @ 95%CL (1 toyMC)
   68% expected band : 8.52962 < r < 8.52962
   95% expected band : 8.52962 < r < 8.52962
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 375307335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.51894 +/- 0.0183616 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.51894 @ 95%CL (1 toyMC)
median expected limit: r < 8.51894 @ 95%CL (1 toyMC)
   68% expected band : 8.51894 < r < 8.51894
   95% expected band : 8.51894 < r < 8.51894
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -395598749
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.55063 +/- 0.0180357 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.55063 @ 95%CL (1 toyMC)
median expected limit: r < 8.55063 @ 95%CL (1 toyMC)
   68% expected band : 8.55063 < r < 8.55063
   95% expected band : 8.55063 < r < 8.55063
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1419414459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.6975 +/- 0.0118025 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 13.6975 @ 95%CL (1 toyMC)
median expected limit: r < 13.6975 @ 95%CL (1 toyMC)
   68% expected band : 13.6975 < r < 13.6975
   95% expected band : 13.6975 < r < 13.6975
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -569211047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.49125 +/- 0.0157598 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.49125 @ 95%CL (1 toyMC)
median expected limit: r < 8.49125 @ 95%CL (1 toyMC)
   68% expected band : 8.49125 < r < 8.49125
   95% expected band : 8.49125 < r < 8.49125
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -861711236
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.4727 +/- 0.0128734 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 14.4727 @ 95%CL (1 toyMC)
median expected limit: r < 14.4727 @ 95%CL (1 toyMC)
   68% expected band : 14.4727 < r < 14.4727
   95% expected band : 14.4727 < r < 14.4727
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 100281992
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.5911 +/- 0.0181168 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 12.5911 @ 95%CL (1 toyMC)
median expected limit: r < 12.5911 @ 95%CL (1 toyMC)
   68% expected band : 12.5911 < r < 12.5911
   95% expected band : 12.5911 < r < 12.5911
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1612892551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.49315 +/- 0.0177211 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.49315 @ 95%CL (1 toyMC)
median expected limit: r < 8.49315 @ 95%CL (1 toyMC)
   68% expected band : 8.49315 < r < 8.49315
   95% expected band : 8.49315 < r < 8.49315
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2098899068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.4957 +/- 0.0166249 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.4957 @ 95%CL (1 toyMC)
median expected limit: r < 8.4957 @ 95%CL (1 toyMC)
   68% expected band : 8.4957 < r < 8.4957
   95% expected band : 8.4957 < r < 8.4957
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1838287014
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.51373 +/- 0.0172228 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.51373 @ 95%CL (1 toyMC)
median expected limit: r < 8.51373 @ 95%CL (1 toyMC)
   68% expected band : 8.51373 < r < 8.51373
   95% expected band : 8.51373 < r < 8.51373
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -575763284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.50229 +/- 0.0183151 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.50229 @ 95%CL (1 toyMC)
median expected limit: r < 8.50229 @ 95%CL (1 toyMC)
   68% expected band : 8.50229 < r < 8.50229
   95% expected band : 8.50229 < r < 8.50229
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1579732823
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.49627 +/- 0.0186443 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.49627 @ 95%CL (1 toyMC)
median expected limit: r < 8.49627 @ 95%CL (1 toyMC)
   68% expected band : 8.49627 < r < 8.49627
   95% expected band : 8.49627 < r < 8.49627
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 405328125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.5127 +/- 0.014231 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 12.5127 @ 95%CL (1 toyMC)
median expected limit: r < 12.5127 @ 95%CL (1 toyMC)
   68% expected band : 12.5127 < r < 12.5127
   95% expected band : 12.5127 < r < 12.5127
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -822083632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.199 +/- 0.00988871 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 15.199 @ 95%CL (1 toyMC)
median expected limit: r < 15.199 @ 95%CL (1 toyMC)
   68% expected band : 15.199 < r < 15.199
   95% expected band : 15.199 < r < 15.199
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 833072441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.2569 +/- 0.0195116 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 11.2569 @ 95%CL (1 toyMC)
median expected limit: r < 11.2569 @ 95%CL (1 toyMC)
   68% expected band : 11.2569 < r < 11.2569
   95% expected band : 11.2569 < r < 11.2569
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1380844199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.5247 +/- 0.018039 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.5247 @ 95%CL (1 toyMC)
median expected limit: r < 8.5247 @ 95%CL (1 toyMC)
   68% expected band : 8.5247 < r < 8.5247
   95% expected band : 8.5247 < r < 8.5247
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1637451832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.8484 +/- 0.0218538 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.8484 @ 95%CL (1 toyMC)
median expected limit: r < 10.8484 @ 95%CL (1 toyMC)
   68% expected band : 10.8484 < r < 10.8484
   95% expected band : 10.8484 < r < 10.8484
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 566038235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.49871 +/- 0.0153628 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.49871 @ 95%CL (1 toyMC)
median expected limit: r < 8.49871 @ 95%CL (1 toyMC)
   68% expected band : 8.49871 < r < 8.49871
   95% expected band : 8.49871 < r < 8.49871
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1062350504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.52458 +/- 0.0184958 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.52458 @ 95%CL (1 toyMC)
median expected limit: r < 8.52458 @ 95%CL (1 toyMC)
   68% expected band : 8.52458 < r < 8.52458
   95% expected band : 8.52458 < r < 8.52458
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1473896130
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.53537 +/- 0.0157714 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.53537 @ 95%CL (1 toyMC)
median expected limit: r < 8.53537 @ 95%CL (1 toyMC)
   68% expected band : 8.53537 < r < 8.53537
   95% expected band : 8.53537 < r < 8.53537
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1979676640
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.6844 +/- 0.0149609 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 13.6844 @ 95%CL (1 toyMC)
median expected limit: r < 13.6844 @ 95%CL (1 toyMC)
   68% expected band : 13.6844 < r < 13.6844
   95% expected band : 13.6844 < r < 13.6844
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1138750576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.50632 +/- 0.0176948 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.50632 @ 95%CL (1 toyMC)
median expected limit: r < 8.50632 @ 95%CL (1 toyMC)
   68% expected band : 8.50632 < r < 8.50632
   95% expected band : 8.50632 < r < 8.50632
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1212679995
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.49808 +/- 0.016482 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.49808 @ 95%CL (1 toyMC)
median expected limit: r < 8.49808 @ 95%CL (1 toyMC)
   68% expected band : 8.49808 < r < 8.49808
   95% expected band : 8.49808 < r < 8.49808
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 344512459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.52212 +/- 0.0204018 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.52212 @ 95%CL (1 toyMC)
median expected limit: r < 8.52212 @ 95%CL (1 toyMC)
   68% expected band : 8.52212 < r < 8.52212
   95% expected band : 8.52212 < r < 8.52212
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1819813787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.57054 +/- 0.0162624 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.57054 @ 95%CL (1 toyMC)
median expected limit: r < 8.57054 @ 95%CL (1 toyMC)
   68% expected band : 8.57054 < r < 8.57054
   95% expected band : 8.57054 < r < 8.57054
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1269116525
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.50289 +/- 0.0169889 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.50289 @ 95%CL (1 toyMC)
median expected limit: r < 8.50289 @ 95%CL (1 toyMC)
   68% expected band : 8.50289 < r < 8.50289
   95% expected band : 8.50289 < r < 8.50289
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1294244736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.933 +/- 0.0162121 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 10.933 @ 95%CL (1 toyMC)
median expected limit: r < 10.933 @ 95%CL (1 toyMC)
   68% expected band : 10.933 < r < 10.933
   95% expected band : 10.933 < r < 10.933
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -739172840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.3622 +/- 0.0150431 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 11.3622 @ 95%CL (1 toyMC)
median expected limit: r < 11.3622 @ 95%CL (1 toyMC)
   68% expected band : 11.3622 < r < 11.3622
   95% expected band : 11.3622 < r < 11.3622
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -595777217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.5178 +/- 0.0202225 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.5178 @ 95%CL (1 toyMC)
median expected limit: r < 8.5178 @ 95%CL (1 toyMC)
   68% expected band : 8.5178 < r < 8.5178
   95% expected band : 8.5178 < r < 8.5178
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 92306241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.5225 +/- 0.0171843 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 8.5225 @ 95%CL (1 toyMC)
median expected limit: r < 8.5225 @ 95%CL (1 toyMC)
   68% expected band : 8.5225 < r < 8.5225
   95% expected band : 8.5225 < r < 8.5225
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 445544878
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.53633 +/- 0.0194672 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.53633 @ 95%CL (1 toyMC)
median expected limit: r < 8.53633 @ 95%CL (1 toyMC)
   68% expected band : 8.53633 < r < 8.53633
   95% expected band : 8.53633 < r < 8.53633
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1453498981
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.3211 +/- 0.017602 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 11.3211 @ 95%CL (1 toyMC)
median expected limit: r < 11.3211 @ 95%CL (1 toyMC)
   68% expected band : 11.3211 < r < 11.3211
   95% expected band : 11.3211 < r < 11.3211
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 192084117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.9732 +/- 0.0169157 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 11.9732 @ 95%CL (1 toyMC)
median expected limit: r < 11.9732 @ 95%CL (1 toyMC)
   68% expected band : 11.9732 < r < 11.9732
   95% expected band : 11.9732 < r < 11.9732
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -453216762
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.50905 +/- 0.0148069 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.50905 @ 95%CL (1 toyMC)
median expected limit: r < 8.50905 @ 95%CL (1 toyMC)
   68% expected band : 8.50905 < r < 8.50905
   95% expected band : 8.50905 < r < 8.50905
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -926786164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.54557 +/- 0.0181862 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.54557 @ 95%CL (1 toyMC)
median expected limit: r < 8.54557 @ 95%CL (1 toyMC)
   68% expected band : 8.54557 < r < 8.54557
   95% expected band : 8.54557 < r < 8.54557
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 338084710
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.50433 +/- 0.0177475 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.50433 @ 95%CL (1 toyMC)
median expected limit: r < 8.50433 @ 95%CL (1 toyMC)
   68% expected band : 8.50433 < r < 8.50433
   95% expected band : 8.50433 < r < 8.50433
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -57740579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.60194 +/- 0.0166688 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.60194 @ 95%CL (1 toyMC)
median expected limit: r < 8.60194 @ 95%CL (1 toyMC)
   68% expected band : 8.60194 < r < 8.60194
   95% expected band : 8.60194 < r < 8.60194
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1480050607
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.5665 +/- 0.0129903 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 16.5665 @ 95%CL (1 toyMC)
median expected limit: r < 16.5665 @ 95%CL (1 toyMC)
   68% expected band : 16.5665 < r < 16.5665
   95% expected band : 16.5665 < r < 16.5665
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -409396195
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.52033 +/- 0.0151208 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.52033 @ 95%CL (1 toyMC)
median expected limit: r < 8.52033 @ 95%CL (1 toyMC)
   68% expected band : 8.52033 < r < 8.52033
   95% expected band : 8.52033 < r < 8.52033
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1760314881
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.4405 +/- 0.0127635 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.4405 @ 95%CL (1 toyMC)
median expected limit: r < 13.4405 @ 95%CL (1 toyMC)
   68% expected band : 13.4405 < r < 13.4405
   95% expected band : 13.4405 < r < 13.4405
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1789569680
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.48131 +/- 0.0144067 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.48131 @ 95%CL (1 toyMC)
median expected limit: r < 8.48131 @ 95%CL (1 toyMC)
   68% expected band : 8.48131 < r < 8.48131
   95% expected band : 8.48131 < r < 8.48131
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -518537286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.458 +/- 0.0141938 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.458 @ 95%CL (1 toyMC)
median expected limit: r < 13.458 @ 95%CL (1 toyMC)
   68% expected band : 13.458 < r < 13.458
   95% expected band : 13.458 < r < 13.458
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 162210428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.2374 +/- 0.0183976 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 12.2374 @ 95%CL (1 toyMC)
median expected limit: r < 12.2374 @ 95%CL (1 toyMC)
   68% expected band : 12.2374 < r < 12.2374
   95% expected band : 12.2374 < r < 12.2374
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2040017197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.2416 +/- 0.0191275 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 11.2416 @ 95%CL (1 toyMC)
median expected limit: r < 11.2416 @ 95%CL (1 toyMC)
   68% expected band : 11.2416 < r < 11.2416
   95% expected band : 11.2416 < r < 11.2416
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1161412946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.48586 +/- 0.0161032 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.48586 @ 95%CL (1 toyMC)
median expected limit: r < 8.48586 @ 95%CL (1 toyMC)
   68% expected band : 8.48586 < r < 8.48586
   95% expected band : 8.48586 < r < 8.48586
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 946780401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.51475 +/- 0.0180244 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 8.51475 @ 95%CL (1 toyMC)
median expected limit: r < 8.51475 @ 95%CL (1 toyMC)
   68% expected band : 8.51475 < r < 8.51475
   95% expected band : 8.51475 < r < 8.51475
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -765123565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.2462 +/- 0.0159038 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.2462 @ 95%CL (1 toyMC)
median expected limit: r < 12.2462 @ 95%CL (1 toyMC)
   68% expected band : 12.2462 < r < 12.2462
   95% expected band : 12.2462 < r < 12.2462
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 87006
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.50824 +/- 0.0169812 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.50824 @ 95%CL (1 toyMC)
median expected limit: r < 8.50824 @ 95%CL (1 toyMC)
   68% expected band : 8.50824 < r < 8.50824
   95% expected band : 8.50824 < r < 8.50824
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1833385007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.56283 +/- 0.019661 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.56283 @ 95%CL (1 toyMC)
median expected limit: r < 8.56283 @ 95%CL (1 toyMC)
   68% expected band : 8.56283 < r < 8.56283
   95% expected band : 8.56283 < r < 8.56283
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1037618913
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.3841 +/- 0.0123575 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.3841 @ 95%CL (1 toyMC)
median expected limit: r < 15.3841 @ 95%CL (1 toyMC)
   68% expected band : 15.3841 < r < 15.3841
   95% expected band : 15.3841 < r < 15.3841
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1213874650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.587 +/- 0.0149203 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.587 @ 95%CL (1 toyMC)
median expected limit: r < 12.587 @ 95%CL (1 toyMC)
   68% expected band : 12.587 < r < 12.587
   95% expected band : 12.587 < r < 12.587
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1463769426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.55298 +/- 0.0153665 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 8.55298 @ 95%CL (1 toyMC)
median expected limit: r < 8.55298 @ 95%CL (1 toyMC)
   68% expected band : 8.55298 < r < 8.55298
   95% expected band : 8.55298 < r < 8.55298
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1189403083
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.5814 +/- 0.0151412 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 8.5814 @ 95%CL (1 toyMC)
median expected limit: r < 8.5814 @ 95%CL (1 toyMC)
   68% expected band : 8.5814 < r < 8.5814
   95% expected band : 8.5814 < r < 8.5814
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1898068391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.51644 +/- 0.0189251 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.51644 @ 95%CL (1 toyMC)
median expected limit: r < 8.51644 @ 95%CL (1 toyMC)
   68% expected band : 8.51644 < r < 8.51644
   95% expected band : 8.51644 < r < 8.51644
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1811595087
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.1946 +/- 0.0140357 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.1946 @ 95%CL (1 toyMC)
median expected limit: r < 12.1946 @ 95%CL (1 toyMC)
   68% expected band : 12.1946 < r < 12.1946
   95% expected band : 12.1946 < r < 12.1946
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -52371245
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.5519 +/- 0.0224347 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 8.5519 @ 95%CL (1 toyMC)
median expected limit: r < 8.5519 @ 95%CL (1 toyMC)
   68% expected band : 8.5519 < r < 8.5519
   95% expected band : 8.5519 < r < 8.5519
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 535149236
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.59876 +/- 0.0194459 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 8.59876 @ 95%CL (1 toyMC)
median expected limit: r < 8.59876 @ 95%CL (1 toyMC)
   68% expected band : 8.59876 < r < 8.59876
   95% expected band : 8.59876 < r < 8.59876
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -39596654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.51936 +/- 0.0204575 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.51936 @ 95%CL (1 toyMC)
median expected limit: r < 8.51936 @ 95%CL (1 toyMC)
   68% expected band : 8.51936 < r < 8.51936
   95% expected band : 8.51936 < r < 8.51936
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 958739516
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.49298 +/- 0.0161159 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.49298 @ 95%CL (1 toyMC)
median expected limit: r < 8.49298 @ 95%CL (1 toyMC)
   68% expected band : 8.49298 < r < 8.49298
   95% expected band : 8.49298 < r < 8.49298
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1043855688
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.53312 +/- 0.0195193 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.53312 @ 95%CL (1 toyMC)
median expected limit: r < 8.53312 @ 95%CL (1 toyMC)
   68% expected band : 8.53312 < r < 8.53312
   95% expected band : 8.53312 < r < 8.53312
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1148968986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.8766 +/- 0.0127335 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 15.8766 @ 95%CL (1 toyMC)
median expected limit: r < 15.8766 @ 95%CL (1 toyMC)
   68% expected band : 15.8766 < r < 15.8766
   95% expected band : 15.8766 < r < 15.8766
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1975736181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.7847 +/- 0.0136417 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.7847 @ 95%CL (1 toyMC)
median expected limit: r < 13.7847 @ 95%CL (1 toyMC)
   68% expected band : 13.7847 < r < 13.7847
   95% expected band : 13.7847 < r < 13.7847
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 48677227
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.54422 +/- 0.0174456 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 8.54422 @ 95%CL (1 toyMC)
median expected limit: r < 8.54422 @ 95%CL (1 toyMC)
   68% expected band : 8.54422 < r < 8.54422
   95% expected band : 8.54422 < r < 8.54422
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1901240390
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.5653 +/- 0.0175086 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.5653 @ 95%CL (1 toyMC)
median expected limit: r < 13.5653 @ 95%CL (1 toyMC)
   68% expected band : 13.5653 < r < 13.5653
   95% expected band : 13.5653 < r < 13.5653
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1034862556.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1037618913.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1061657171.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1074975023.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1138750576.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1148968986.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1189403083.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1280944316.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1294244736.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1295438332.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1358645127.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1380844199.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1419414459.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1453498981.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1473896130.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1542584232.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-174990202.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1771483707.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1789569680.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1811595087.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1819813787.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1849492828.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1852441371.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1898100874.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1975736181.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-2040017197.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-371352221.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-395598749.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-39596654.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-409396195.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-435664506.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-440141789.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-453216762.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-491871646.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-518537286.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-52371245.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-548682024.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-569211047.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-575763284.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-57740579.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-595777217.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-624016625.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-65701273.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-739172840.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-765123565.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-822083632.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-861711236.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.-926786164.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.-92960418.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.-957114978.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.-98390182.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.100281992.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1043855688.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.105235168.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1062350504.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1127620535.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1161412946.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1212679995.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1213874650.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1269116525.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.137509245.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1463769426.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1480050607.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1579732823.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1612892551.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.162210428.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1637451832.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.16863771.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1720889086.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1726009064.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1760314881.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1827973537.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1833385007.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1838287014.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.1898068391.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.1901240390.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.192084117.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.1929509233.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.1979676640.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.2069474995.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.2098899068.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.290675415.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.338084710.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.344512459.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.375307335.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.405328125.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.445544878.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.48677227.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.499281358.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.535149236.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.566038235.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.632897399.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.781985967.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.833072441.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.841953990.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.852942809.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.87006.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.92306241.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.946780401.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.958739516.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1961653751
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.04547 +/- 0.0136273 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.04547 @ 95%CL (1 toyMC)
median expected limit: r < 9.04547 @ 95%CL (1 toyMC)
   68% expected band : 9.04547 < r < 9.04547
   95% expected band : 9.04547 < r < 9.04547
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 324053903
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.13251 +/- 0.0181214 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.13251 @ 95%CL (1 toyMC)
median expected limit: r < 9.13251 @ 95%CL (1 toyMC)
   68% expected band : 9.13251 < r < 9.13251
   95% expected band : 9.13251 < r < 9.13251
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 510815660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.9934 +/- 0.0169345 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 11.9934 @ 95%CL (1 toyMC)
median expected limit: r < 11.9934 @ 95%CL (1 toyMC)
   68% expected band : 11.9934 < r < 11.9934
   95% expected band : 11.9934 < r < 11.9934
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 971710826
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.12131 +/- 0.0191921 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.12131 @ 95%CL (1 toyMC)
median expected limit: r < 9.12131 @ 95%CL (1 toyMC)
   68% expected band : 9.12131 < r < 9.12131
   95% expected band : 9.12131 < r < 9.12131
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -426039271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.8609 +/- 0.0149019 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.8609 @ 95%CL (1 toyMC)
median expected limit: r < 14.8609 @ 95%CL (1 toyMC)
   68% expected band : 14.8609 < r < 14.8609
   95% expected band : 14.8609 < r < 14.8609
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1088794642
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.10958 +/- 0.0178397 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.10958 @ 95%CL (1 toyMC)
median expected limit: r < 9.10958 @ 95%CL (1 toyMC)
   68% expected band : 9.10958 < r < 9.10958
   95% expected band : 9.10958 < r < 9.10958
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1595263108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.5639 +/- 0.0179291 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.5639 @ 95%CL (1 toyMC)
median expected limit: r < 11.5639 @ 95%CL (1 toyMC)
   68% expected band : 11.5639 < r < 11.5639
   95% expected band : 11.5639 < r < 11.5639
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 195340903
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.05492 +/- 0.0191753 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.05492 @ 95%CL (1 toyMC)
median expected limit: r < 9.05492 @ 95%CL (1 toyMC)
   68% expected band : 9.05492 < r < 9.05492
   95% expected band : 9.05492 < r < 9.05492
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1463941435
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.06462 +/- 0.0197857 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.06462 @ 95%CL (1 toyMC)
median expected limit: r < 9.06462 @ 95%CL (1 toyMC)
   68% expected band : 9.06462 < r < 9.06462
   95% expected band : 9.06462 < r < 9.06462
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 134483661
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.02788 +/- 0.0163912 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.02788 @ 95%CL (1 toyMC)
median expected limit: r < 9.02788 @ 95%CL (1 toyMC)
   68% expected band : 9.02788 < r < 9.02788
   95% expected band : 9.02788 < r < 9.02788
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1891272675
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.26 +/- 0.0212951 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.26 @ 95%CL (1 toyMC)
median expected limit: r < 12.26 @ 95%CL (1 toyMC)
   68% expected band : 12.26 < r < 12.26
   95% expected band : 12.26 < r < 12.26
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1570646855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.06101 +/- 0.0194879 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.06101 @ 95%CL (1 toyMC)
median expected limit: r < 9.06101 @ 95%CL (1 toyMC)
   68% expected band : 9.06101 < r < 9.06101
   95% expected band : 9.06101 < r < 9.06101
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 743387975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.11457 +/- 0.0175751 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.11457 @ 95%CL (1 toyMC)
median expected limit: r < 9.11457 @ 95%CL (1 toyMC)
   68% expected band : 9.11457 < r < 9.11457
   95% expected band : 9.11457 < r < 9.11457
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1694366523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.08951 +/- 0.0187545 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.08951 @ 95%CL (1 toyMC)
median expected limit: r < 9.08951 @ 95%CL (1 toyMC)
   68% expected band : 9.08951 < r < 9.08951
   95% expected band : 9.08951 < r < 9.08951
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -45765437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.11542 +/- 0.0191292 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.11542 @ 95%CL (1 toyMC)
median expected limit: r < 9.11542 @ 95%CL (1 toyMC)
   68% expected band : 9.11542 < r < 9.11542
   95% expected band : 9.11542 < r < 9.11542
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2079416976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.10438 +/- 0.0193445 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.10438 @ 95%CL (1 toyMC)
median expected limit: r < 9.10438 @ 95%CL (1 toyMC)
   68% expected band : 9.10438 < r < 9.10438
   95% expected band : 9.10438 < r < 9.10438
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1495363255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6259 +/- 0.0155455 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.6259 @ 95%CL (1 toyMC)
median expected limit: r < 11.6259 @ 95%CL (1 toyMC)
   68% expected band : 11.6259 < r < 11.6259
   95% expected band : 11.6259 < r < 11.6259
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 701266788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.09255 +/- 0.0201192 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.09255 @ 95%CL (1 toyMC)
median expected limit: r < 9.09255 @ 95%CL (1 toyMC)
   68% expected band : 9.09255 < r < 9.09255
   95% expected band : 9.09255 < r < 9.09255
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 117853310
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.727 +/- 0.0124772 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.727 @ 95%CL (1 toyMC)
median expected limit: r < 13.727 @ 95%CL (1 toyMC)
   68% expected band : 13.727 < r < 13.727
   95% expected band : 13.727 < r < 13.727
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1289516888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.00745 +/- 0.019129 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.00745 @ 95%CL (1 toyMC)
median expected limit: r < 9.00745 @ 95%CL (1 toyMC)
   68% expected band : 9.00745 < r < 9.00745
   95% expected band : 9.00745 < r < 9.00745
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 926285246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7446 +/- 0.0196566 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.7446 @ 95%CL (1 toyMC)
median expected limit: r < 11.7446 @ 95%CL (1 toyMC)
   68% expected band : 11.7446 < r < 11.7446
   95% expected band : 11.7446 < r < 11.7446
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -470261934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.10426 +/- 0.016753 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.10426 @ 95%CL (1 toyMC)
median expected limit: r < 9.10426 @ 95%CL (1 toyMC)
   68% expected band : 9.10426 < r < 9.10426
   95% expected band : 9.10426 < r < 9.10426
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 676221676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.2593 +/- 0.0171512 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 12.2593 @ 95%CL (1 toyMC)
median expected limit: r < 12.2593 @ 95%CL (1 toyMC)
   68% expected band : 12.2593 < r < 12.2593
   95% expected band : 12.2593 < r < 12.2593
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -113189383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.10896 +/- 0.0206747 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.10896 @ 95%CL (1 toyMC)
median expected limit: r < 9.10896 @ 95%CL (1 toyMC)
   68% expected band : 9.10896 < r < 9.10896
   95% expected band : 9.10896 < r < 9.10896
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2146838863
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.07606 +/- 0.0199027 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.07606 @ 95%CL (1 toyMC)
median expected limit: r < 9.07606 @ 95%CL (1 toyMC)
   68% expected band : 9.07606 < r < 9.07606
   95% expected band : 9.07606 < r < 9.07606
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1264432426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7648 +/- 0.0140803 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.7648 @ 95%CL (1 toyMC)
median expected limit: r < 12.7648 @ 95%CL (1 toyMC)
   68% expected band : 12.7648 < r < 12.7648
   95% expected band : 12.7648 < r < 12.7648
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -670462362
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.0911 +/- 0.0158039 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.0911 @ 95%CL (1 toyMC)
median expected limit: r < 9.0911 @ 95%CL (1 toyMC)
   68% expected band : 9.0911 < r < 9.0911
   95% expected band : 9.0911 < r < 9.0911
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1373744836
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.564 +/- 0.0160004 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.564 @ 95%CL (1 toyMC)
median expected limit: r < 11.564 @ 95%CL (1 toyMC)
   68% expected band : 11.564 < r < 11.564
   95% expected band : 11.564 < r < 11.564
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1174982337
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.8662 +/- 0.00870519 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 16.8662 @ 95%CL (1 toyMC)
median expected limit: r < 16.8662 @ 95%CL (1 toyMC)
   68% expected band : 16.8662 < r < 16.8662
   95% expected band : 16.8662 < r < 16.8662
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2099489164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.09025 +/- 0.0204493 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.09025 @ 95%CL (1 toyMC)
median expected limit: r < 9.09025 @ 95%CL (1 toyMC)
   68% expected band : 9.09025 < r < 9.09025
   95% expected band : 9.09025 < r < 9.09025
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -375026428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.07458 +/- 0.0196488 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.07458 @ 95%CL (1 toyMC)
median expected limit: r < 9.07458 @ 95%CL (1 toyMC)
   68% expected band : 9.07458 < r < 9.07458
   95% expected band : 9.07458 < r < 9.07458
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1139498517
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.0664 +/- 0.0133624 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.0664 @ 95%CL (1 toyMC)
median expected limit: r < 9.0664 @ 95%CL (1 toyMC)
   68% expected band : 9.0664 < r < 9.0664
   95% expected band : 9.0664 < r < 9.0664
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1566130933
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.09449 +/- 0.0163375 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.09449 @ 95%CL (1 toyMC)
median expected limit: r < 9.09449 @ 95%CL (1 toyMC)
   68% expected band : 9.09449 < r < 9.09449
   95% expected band : 9.09449 < r < 9.09449
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -531403383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.07095 +/- 0.0180497 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.07095 @ 95%CL (1 toyMC)
median expected limit: r < 9.07095 @ 95%CL (1 toyMC)
   68% expected band : 9.07095 < r < 9.07095
   95% expected band : 9.07095 < r < 9.07095
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1290101797
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.0712 +/- 0.0163152 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 13.0712 @ 95%CL (1 toyMC)
median expected limit: r < 13.0712 @ 95%CL (1 toyMC)
   68% expected band : 13.0712 < r < 13.0712
   95% expected band : 13.0712 < r < 13.0712
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -503334483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.10363 +/- 0.014553 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 9.10363 @ 95%CL (1 toyMC)
median expected limit: r < 9.10363 @ 95%CL (1 toyMC)
   68% expected band : 9.10363 < r < 9.10363
   95% expected band : 9.10363 < r < 9.10363
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1591911295
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.0191 +/- 0.0174081 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 12.0191 @ 95%CL (1 toyMC)
median expected limit: r < 12.0191 @ 95%CL (1 toyMC)
   68% expected band : 12.0191 < r < 12.0191
   95% expected band : 12.0191 < r < 12.0191
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2049712743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.5959 +/- 0.018704 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.25 min (real)
mean   expected limit: r < 11.5959 @ 95%CL (1 toyMC)
median expected limit: r < 11.5959 @ 95%CL (1 toyMC)
   68% expected band : 11.5959 < r < 11.5959
   95% expected band : 11.5959 < r < 11.5959
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1755310566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.06693 +/- 0.0149183 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.06693 @ 95%CL (1 toyMC)
median expected limit: r < 9.06693 @ 95%CL (1 toyMC)
   68% expected band : 9.06693 < r < 9.06693
   95% expected band : 9.06693 < r < 9.06693
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 643583306
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.5586 +/- 0.0156404 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 11.5586 @ 95%CL (1 toyMC)
median expected limit: r < 11.5586 @ 95%CL (1 toyMC)
   68% expected band : 11.5586 < r < 11.5586
   95% expected band : 11.5586 < r < 11.5586
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1462573469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.0725 +/- 0.0158017 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 12.0725 @ 95%CL (1 toyMC)
median expected limit: r < 12.0725 @ 95%CL (1 toyMC)
   68% expected band : 12.0725 < r < 12.0725
   95% expected band : 12.0725 < r < 12.0725
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1307587534
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.08764 +/- 0.0200826 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 9.08764 @ 95%CL (1 toyMC)
median expected limit: r < 9.08764 @ 95%CL (1 toyMC)
   68% expected band : 9.08764 < r < 9.08764
   95% expected band : 9.08764 < r < 9.08764
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1658879361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.05343 +/- 0.0170568 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.05343 @ 95%CL (1 toyMC)
median expected limit: r < 9.05343 @ 95%CL (1 toyMC)
   68% expected band : 9.05343 < r < 9.05343
   95% expected band : 9.05343 < r < 9.05343
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1819305045
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.12519 +/- 0.01858 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.12519 @ 95%CL (1 toyMC)
median expected limit: r < 9.12519 @ 95%CL (1 toyMC)
   68% expected band : 9.12519 < r < 9.12519
   95% expected band : 9.12519 < r < 9.12519
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 724263518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.0603 +/- 0.01889 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.0603 @ 95%CL (1 toyMC)
median expected limit: r < 9.0603 @ 95%CL (1 toyMC)
   68% expected band : 9.0603 < r < 9.0603
   95% expected band : 9.0603 < r < 9.0603
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1126780729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.11622 +/- 0.0170241 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 9.11622 @ 95%CL (1 toyMC)
median expected limit: r < 9.11622 @ 95%CL (1 toyMC)
   68% expected band : 9.11622 < r < 9.11622
   95% expected band : 9.11622 < r < 9.11622
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1308161211
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.0811 +/- 0.017228 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.0811 @ 95%CL (1 toyMC)
median expected limit: r < 9.0811 @ 95%CL (1 toyMC)
   68% expected band : 9.0811 < r < 9.0811
   95% expected band : 9.0811 < r < 9.0811
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -645648834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.07116 +/- 0.0167609 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.07116 @ 95%CL (1 toyMC)
median expected limit: r < 9.07116 @ 95%CL (1 toyMC)
   68% expected band : 9.07116 < r < 9.07116
   95% expected band : 9.07116 < r < 9.07116
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 878348061
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.0398 +/- 0.0147208 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.0398 @ 95%CL (1 toyMC)
median expected limit: r < 13.0398 @ 95%CL (1 toyMC)
   68% expected band : 13.0398 < r < 13.0398
   95% expected band : 13.0398 < r < 13.0398
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1291073741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.10299 +/- 0.020129 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.10299 @ 95%CL (1 toyMC)
median expected limit: r < 9.10299 @ 95%CL (1 toyMC)
   68% expected band : 9.10299 < r < 9.10299
   95% expected band : 9.10299 < r < 9.10299
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -70710940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.07908 +/- 0.0156407 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.07908 @ 95%CL (1 toyMC)
median expected limit: r < 9.07908 @ 95%CL (1 toyMC)
   68% expected band : 9.07908 < r < 9.07908
   95% expected band : 9.07908 < r < 9.07908
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -956643914
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.2399 +/- 0.017702 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 12.2399 @ 95%CL (1 toyMC)
median expected limit: r < 12.2399 @ 95%CL (1 toyMC)
   68% expected band : 12.2399 < r < 12.2399
   95% expected band : 12.2399 < r < 12.2399
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -852798110
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.10094 +/- 0.0199567 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.10094 @ 95%CL (1 toyMC)
median expected limit: r < 9.10094 @ 95%CL (1 toyMC)
   68% expected band : 9.10094 < r < 9.10094
   95% expected band : 9.10094 < r < 9.10094
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -501763863
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.08399 +/- 0.0165935 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.08399 @ 95%CL (1 toyMC)
median expected limit: r < 9.08399 @ 95%CL (1 toyMC)
   68% expected band : 9.08399 < r < 9.08399
   95% expected band : 9.08399 < r < 9.08399
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -522196926
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.0386 +/- 0.0176401 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 12.0386 @ 95%CL (1 toyMC)
median expected limit: r < 12.0386 @ 95%CL (1 toyMC)
   68% expected band : 12.0386 < r < 12.0386
   95% expected band : 12.0386 < r < 12.0386
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2108312415
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.08737 +/- 0.017006 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.08737 @ 95%CL (1 toyMC)
median expected limit: r < 9.08737 @ 95%CL (1 toyMC)
   68% expected band : 9.08737 < r < 9.08737
   95% expected band : 9.08737 < r < 9.08737
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -305224945
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.08201 +/- 0.021193 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.08201 @ 95%CL (1 toyMC)
median expected limit: r < 9.08201 @ 95%CL (1 toyMC)
   68% expected band : 9.08201 < r < 9.08201
   95% expected band : 9.08201 < r < 9.08201
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1780058813
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.05601 +/- 0.0178257 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.05601 @ 95%CL (1 toyMC)
median expected limit: r < 9.05601 @ 95%CL (1 toyMC)
   68% expected band : 9.05601 < r < 9.05601
   95% expected band : 9.05601 < r < 9.05601
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -678993974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.05752 +/- 0.0169413 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.05752 @ 95%CL (1 toyMC)
median expected limit: r < 9.05752 @ 95%CL (1 toyMC)
   68% expected band : 9.05752 < r < 9.05752
   95% expected band : 9.05752 < r < 9.05752
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1676782704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7732 +/- 0.0146595 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 12.7732 @ 95%CL (1 toyMC)
median expected limit: r < 12.7732 @ 95%CL (1 toyMC)
   68% expected band : 12.7732 < r < 12.7732
   95% expected band : 12.7732 < r < 12.7732
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 637112683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.09939 +/- 0.0139007 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.09939 @ 95%CL (1 toyMC)
median expected limit: r < 9.09939 @ 95%CL (1 toyMC)
   68% expected band : 9.09939 < r < 9.09939
   95% expected band : 9.09939 < r < 9.09939
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -529480279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.6619 +/- 0.0154643 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.6619 @ 95%CL (1 toyMC)
median expected limit: r < 12.6619 @ 95%CL (1 toyMC)
   68% expected band : 12.6619 < r < 12.6619
   95% expected band : 12.6619 < r < 12.6619
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2065254911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.10867 +/- 0.0159145 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.10867 @ 95%CL (1 toyMC)
median expected limit: r < 9.10867 @ 95%CL (1 toyMC)
   68% expected band : 9.10867 < r < 9.10867
   95% expected band : 9.10867 < r < 9.10867
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1062997636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.04501 +/- 0.0203555 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.04501 @ 95%CL (1 toyMC)
median expected limit: r < 9.04501 @ 95%CL (1 toyMC)
   68% expected band : 9.04501 < r < 9.04501
   95% expected band : 9.04501 < r < 9.04501
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -783003391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.1464 +/- 0.0168633 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.1464 @ 95%CL (1 toyMC)
median expected limit: r < 9.1464 @ 95%CL (1 toyMC)
   68% expected band : 9.1464 < r < 9.1464
   95% expected band : 9.1464 < r < 9.1464
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1138535037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.10363 +/- 0.0220109 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.10363 @ 95%CL (1 toyMC)
median expected limit: r < 9.10363 @ 95%CL (1 toyMC)
   68% expected band : 9.10363 < r < 9.10363
   95% expected band : 9.10363 < r < 9.10363
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1784445719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.13631 +/- 0.0177745 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.13631 @ 95%CL (1 toyMC)
median expected limit: r < 9.13631 @ 95%CL (1 toyMC)
   68% expected band : 9.13631 < r < 9.13631
   95% expected band : 9.13631 < r < 9.13631
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -433790819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.13386 +/- 0.0190751 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.13386 @ 95%CL (1 toyMC)
median expected limit: r < 9.13386 @ 95%CL (1 toyMC)
   68% expected band : 9.13386 < r < 9.13386
   95% expected band : 9.13386 < r < 9.13386
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1831787355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.491 +/- 0.0188013 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 12.491 @ 95%CL (1 toyMC)
median expected limit: r < 12.491 @ 95%CL (1 toyMC)
   68% expected band : 12.491 < r < 12.491
   95% expected band : 12.491 < r < 12.491
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1015801534
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.11927 +/- 0.0202165 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.11927 @ 95%CL (1 toyMC)
median expected limit: r < 9.11927 @ 95%CL (1 toyMC)
   68% expected band : 9.11927 < r < 9.11927
   95% expected band : 9.11927 < r < 9.11927
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -434814782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.08259 +/- 0.0171481 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.08259 @ 95%CL (1 toyMC)
median expected limit: r < 9.08259 @ 95%CL (1 toyMC)
   68% expected band : 9.08259 < r < 9.08259
   95% expected band : 9.08259 < r < 9.08259
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1850672622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.1116 +/- 0.0182042 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 12.1116 @ 95%CL (1 toyMC)
median expected limit: r < 12.1116 @ 95%CL (1 toyMC)
   68% expected band : 12.1116 < r < 12.1116
   95% expected band : 12.1116 < r < 12.1116
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 798658172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.08003 +/- 0.0186996 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.08003 @ 95%CL (1 toyMC)
median expected limit: r < 9.08003 @ 95%CL (1 toyMC)
   68% expected band : 9.08003 < r < 9.08003
   95% expected band : 9.08003 < r < 9.08003
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 171255607
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.06686 +/- 0.0153637 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 9.06686 @ 95%CL (1 toyMC)
median expected limit: r < 9.06686 @ 95%CL (1 toyMC)
   68% expected band : 9.06686 < r < 9.06686
   95% expected band : 9.06686 < r < 9.06686
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1965346472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.09039 +/- 0.0201813 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.09039 @ 95%CL (1 toyMC)
median expected limit: r < 9.09039 @ 95%CL (1 toyMC)
   68% expected band : 9.09039 < r < 9.09039
   95% expected band : 9.09039 < r < 9.09039
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1100913577
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.09032 +/- 0.0162507 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.09032 @ 95%CL (1 toyMC)
median expected limit: r < 9.09032 @ 95%CL (1 toyMC)
   68% expected band : 9.09032 < r < 9.09032
   95% expected band : 9.09032 < r < 9.09032
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1901798084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.08814 +/- 0.0180798 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.08814 @ 95%CL (1 toyMC)
median expected limit: r < 9.08814 @ 95%CL (1 toyMC)
   68% expected band : 9.08814 < r < 9.08814
   95% expected band : 9.08814 < r < 9.08814
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1981350003
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.09384 +/- 0.0183721 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.09384 @ 95%CL (1 toyMC)
median expected limit: r < 9.09384 @ 95%CL (1 toyMC)
   68% expected band : 9.09384 < r < 9.09384
   95% expected band : 9.09384 < r < 9.09384
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -513587344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.06836 +/- 0.0170343 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.06836 @ 95%CL (1 toyMC)
median expected limit: r < 9.06836 @ 95%CL (1 toyMC)
   68% expected band : 9.06836 < r < 9.06836
   95% expected band : 9.06836 < r < 9.06836
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -499936285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.14778 +/- 0.0205687 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.14778 @ 95%CL (1 toyMC)
median expected limit: r < 9.14778 @ 95%CL (1 toyMC)
   68% expected band : 9.14778 < r < 9.14778
   95% expected band : 9.14778 < r < 9.14778
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1123564976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.6269 +/- 0.0151304 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.6269 @ 95%CL (1 toyMC)
median expected limit: r < 12.6269 @ 95%CL (1 toyMC)
   68% expected band : 12.6269 < r < 12.6269
   95% expected band : 12.6269 < r < 12.6269
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -357227109
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7444 +/- 0.0158906 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.7444 @ 95%CL (1 toyMC)
median expected limit: r < 11.7444 @ 95%CL (1 toyMC)
   68% expected band : 11.7444 < r < 11.7444
   95% expected band : 11.7444 < r < 11.7444
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1879835924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.09616 +/- 0.0184367 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 9.09616 @ 95%CL (1 toyMC)
median expected limit: r < 9.09616 @ 95%CL (1 toyMC)
   68% expected band : 9.09616 < r < 9.09616
   95% expected band : 9.09616 < r < 9.09616
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -924718502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.8699 +/- 0.0156706 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 12.8699 @ 95%CL (1 toyMC)
median expected limit: r < 12.8699 @ 95%CL (1 toyMC)
   68% expected band : 12.8699 < r < 12.8699
   95% expected band : 12.8699 < r < 12.8699
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1338938986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7069 +/- 0.015577 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 12.7069 @ 95%CL (1 toyMC)
median expected limit: r < 12.7069 @ 95%CL (1 toyMC)
   68% expected band : 12.7069 < r < 12.7069
   95% expected band : 12.7069 < r < 12.7069
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 371839091
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.521 +/- 0.0182103 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.521 @ 95%CL (1 toyMC)
median expected limit: r < 12.521 @ 95%CL (1 toyMC)
   68% expected band : 12.521 < r < 12.521
   95% expected band : 12.521 < r < 12.521
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -345970146
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.05065 +/- 0.0189872 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.05065 @ 95%CL (1 toyMC)
median expected limit: r < 9.05065 @ 95%CL (1 toyMC)
   68% expected band : 9.05065 < r < 9.05065
   95% expected band : 9.05065 < r < 9.05065
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 961716994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.03458 +/- 0.016658 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.03458 @ 95%CL (1 toyMC)
median expected limit: r < 9.03458 @ 95%CL (1 toyMC)
   68% expected band : 9.03458 < r < 9.03458
   95% expected band : 9.03458 < r < 9.03458
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -742550181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.13349 +/- 0.0206741 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.13349 @ 95%CL (1 toyMC)
median expected limit: r < 9.13349 @ 95%CL (1 toyMC)
   68% expected band : 9.13349 < r < 9.13349
   95% expected band : 9.13349 < r < 9.13349
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1150535250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.2664 +/- 0.0127958 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.2664 @ 95%CL (1 toyMC)
median expected limit: r < 15.2664 @ 95%CL (1 toyMC)
   68% expected band : 15.2664 < r < 15.2664
   95% expected band : 15.2664 < r < 15.2664
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 401179529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.10005 +/- 0.0193795 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 9.10005 @ 95%CL (1 toyMC)
median expected limit: r < 9.10005 @ 95%CL (1 toyMC)
   68% expected band : 9.10005 < r < 9.10005
   95% expected band : 9.10005 < r < 9.10005
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1021490391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.2299 +/- 0.0151308 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 13.2299 @ 95%CL (1 toyMC)
median expected limit: r < 13.2299 @ 95%CL (1 toyMC)
   68% expected band : 13.2299 < r < 13.2299
   95% expected band : 13.2299 < r < 13.2299
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1548102848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.08349 +/- 0.0180477 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.08349 @ 95%CL (1 toyMC)
median expected limit: r < 9.08349 @ 95%CL (1 toyMC)
   68% expected band : 9.08349 < r < 9.08349
   95% expected band : 9.08349 < r < 9.08349
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1019082328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.14455 +/- 0.0159979 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.14455 @ 95%CL (1 toyMC)
median expected limit: r < 9.14455 @ 95%CL (1 toyMC)
   68% expected band : 9.14455 < r < 9.14455
   95% expected band : 9.14455 < r < 9.14455
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -770914199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.05643 +/- 0.0167029 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.05643 @ 95%CL (1 toyMC)
median expected limit: r < 9.05643 @ 95%CL (1 toyMC)
   68% expected band : 9.05643 < r < 9.05643
   95% expected band : 9.05643 < r < 9.05643
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 296910158
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.1022 +/- 0.0156194 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.1022 @ 95%CL (1 toyMC)
median expected limit: r < 9.1022 @ 95%CL (1 toyMC)
   68% expected band : 9.1022 < r < 9.1022
   95% expected band : 9.1022 < r < 9.1022
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 841777676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.09231 +/- 0.0208789 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.09231 @ 95%CL (1 toyMC)
median expected limit: r < 9.09231 @ 95%CL (1 toyMC)
   68% expected band : 9.09231 < r < 9.09231
   95% expected band : 9.09231 < r < 9.09231
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1732336980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.11082 +/- 0.0171543 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.11082 @ 95%CL (1 toyMC)
median expected limit: r < 9.11082 @ 95%CL (1 toyMC)
   68% expected band : 9.11082 < r < 9.11082
   95% expected band : 9.11082 < r < 9.11082
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1748517397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.12446 +/- 0.0166703 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.12446 @ 95%CL (1 toyMC)
median expected limit: r < 9.12446 @ 95%CL (1 toyMC)
   68% expected band : 9.12446 < r < 9.12446
   95% expected band : 9.12446 < r < 9.12446
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2098791423
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.9998 +/- 0.0175314 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.9998 @ 95%CL (1 toyMC)
median expected limit: r < 12.9998 @ 95%CL (1 toyMC)
   68% expected band : 12.9998 < r < 12.9998
   95% expected band : 12.9998 < r < 12.9998
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1015801534.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1019082328.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1126780729.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-113189383.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1150535250.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1174982337.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1289516888.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1290101797.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1291073741.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1308161211.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1462573469.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1495363255.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1566130933.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1570646855.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1591911295.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1595263108.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1676782704.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1694366523.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1732336980.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1748517397.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1780058813.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1784445719.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1819305045.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1831787355.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1850672622.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-1891272675.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-1901798084.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-1965346472.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-1981350003.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-2049712743.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-2098791423.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-2099489164.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-2108312415.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-2146838863.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-305224945.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-345970146.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-357227109.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-375026428.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-426039271.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-433790819.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-434814782.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-45765437.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-470261934.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-499936285.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-501763863.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-503334483.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-513587344.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.-522196926.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.-529480279.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.-531403383.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.-645648834.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.-670462362.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.-678993974.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.-70710940.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.-742550181.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.-770914199.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.-783003391.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.-852798110.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.-924718502.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.-956643914.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1021490391.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1062997636.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1088794642.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1100913577.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1123564976.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1138535037.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1139498517.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.117853310.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1264432426.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1307587534.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1338938986.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.134483661.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1373744836.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1463941435.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.1548102848.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.1658879361.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.171255607.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.1755310566.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.1879835924.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.195340903.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.1961653751.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.2065254911.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.2079416976.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.296910158.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.324053903.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.371839091.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.401179529.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.510815660.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.637112683.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.643583306.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.676221676.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.701266788.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.724263518.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.743387975.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.798658172.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.841777676.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.878348061.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.926285246.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.961716994.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.971710826.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 875309548
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.62299 +/- 0.0153939 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.62299 @ 95%CL (1 toyMC)
median expected limit: r < 9.62299 @ 95%CL (1 toyMC)
   68% expected band : 9.62299 < r < 9.62299
   95% expected band : 9.62299 < r < 9.62299
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 215140796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.65887 +/- 0.0182516 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.65887 @ 95%CL (1 toyMC)
median expected limit: r < 9.65887 @ 95%CL (1 toyMC)
   68% expected band : 9.65887 < r < 9.65887
   95% expected band : 9.65887 < r < 9.65887
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1517236750
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.73601 +/- 0.0132931 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.73601 @ 95%CL (1 toyMC)
median expected limit: r < 9.73601 @ 95%CL (1 toyMC)
   68% expected band : 9.73601 < r < 9.73601
   95% expected band : 9.73601 < r < 9.73601
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1569768946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.74217 +/- 0.0214169 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.74217 @ 95%CL (1 toyMC)
median expected limit: r < 9.74217 @ 95%CL (1 toyMC)
   68% expected band : 9.74217 < r < 9.74217
   95% expected band : 9.74217 < r < 9.74217
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 313039978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.64416 +/- 0.0205988 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.64416 @ 95%CL (1 toyMC)
median expected limit: r < 9.64416 @ 95%CL (1 toyMC)
   68% expected band : 9.64416 < r < 9.64416
   95% expected band : 9.64416 < r < 9.64416
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -330168893
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.66107 +/- 0.0164859 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.66107 @ 95%CL (1 toyMC)
median expected limit: r < 9.66107 @ 95%CL (1 toyMC)
   68% expected band : 9.66107 < r < 9.66107
   95% expected band : 9.66107 < r < 9.66107
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 978485130
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.65138 +/- 0.0153132 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.65138 @ 95%CL (1 toyMC)
median expected limit: r < 9.65138 @ 95%CL (1 toyMC)
   68% expected band : 9.65138 < r < 9.65138
   95% expected band : 9.65138 < r < 9.65138
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 328481448
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.73874 +/- 0.01998 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.73874 @ 95%CL (1 toyMC)
median expected limit: r < 9.73874 @ 95%CL (1 toyMC)
   68% expected band : 9.73874 < r < 9.73874
   95% expected band : 9.73874 < r < 9.73874
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -115693049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.75462 +/- 0.0166478 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.75462 @ 95%CL (1 toyMC)
median expected limit: r < 9.75462 @ 95%CL (1 toyMC)
   68% expected band : 9.75462 < r < 9.75462
   95% expected band : 9.75462 < r < 9.75462
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 177420000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.77829 +/- 0.0179185 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.77829 @ 95%CL (1 toyMC)
median expected limit: r < 9.77829 @ 95%CL (1 toyMC)
   68% expected band : 9.77829 < r < 9.77829
   95% expected band : 9.77829 < r < 9.77829
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1742808902
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.6182 +/- 0.0134687 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.6182 @ 95%CL (1 toyMC)
median expected limit: r < 13.6182 @ 95%CL (1 toyMC)
   68% expected band : 13.6182 < r < 13.6182
   95% expected band : 13.6182 < r < 13.6182
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1186009025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.69423 +/- 0.0204246 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.69423 @ 95%CL (1 toyMC)
median expected limit: r < 9.69423 @ 95%CL (1 toyMC)
   68% expected band : 9.69423 < r < 9.69423
   95% expected band : 9.69423 < r < 9.69423
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1326961486
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.68732 +/- 0.0170397 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.68732 @ 95%CL (1 toyMC)
median expected limit: r < 9.68732 @ 95%CL (1 toyMC)
   68% expected band : 9.68732 < r < 9.68732
   95% expected band : 9.68732 < r < 9.68732
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1626053174
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.72263 +/- 0.0168604 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.72263 @ 95%CL (1 toyMC)
median expected limit: r < 9.72263 @ 95%CL (1 toyMC)
   68% expected band : 9.72263 < r < 9.72263
   95% expected band : 9.72263 < r < 9.72263
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1136295431
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.68652 +/- 0.0204334 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.68652 @ 95%CL (1 toyMC)
median expected limit: r < 9.68652 @ 95%CL (1 toyMC)
   68% expected band : 9.68652 < r < 9.68652
   95% expected band : 9.68652 < r < 9.68652
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -620791777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.74207 +/- 0.0181674 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.74207 @ 95%CL (1 toyMC)
median expected limit: r < 9.74207 @ 95%CL (1 toyMC)
   68% expected band : 9.74207 < r < 9.74207
   95% expected band : 9.74207 < r < 9.74207
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1139185126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.4686 +/- 0.015889 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.4686 @ 95%CL (1 toyMC)
median expected limit: r < 12.4686 @ 95%CL (1 toyMC)
   68% expected band : 12.4686 < r < 12.4686
   95% expected band : 12.4686 < r < 12.4686
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1307444457
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.67261 +/- 0.0164112 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.67261 @ 95%CL (1 toyMC)
median expected limit: r < 9.67261 @ 95%CL (1 toyMC)
   68% expected band : 9.67261 < r < 9.67261
   95% expected band : 9.67261 < r < 9.67261
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1011189668
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.69465 +/- 0.017559 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.69465 @ 95%CL (1 toyMC)
median expected limit: r < 9.69465 @ 95%CL (1 toyMC)
   68% expected band : 9.69465 < r < 9.69465
   95% expected band : 9.69465 < r < 9.69465
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -181564360
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.75784 +/- 0.0163477 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.75784 @ 95%CL (1 toyMC)
median expected limit: r < 9.75784 @ 95%CL (1 toyMC)
   68% expected band : 9.75784 < r < 9.75784
   95% expected band : 9.75784 < r < 9.75784
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 57713252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.70301 +/- 0.0168286 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.70301 @ 95%CL (1 toyMC)
median expected limit: r < 9.70301 @ 95%CL (1 toyMC)
   68% expected band : 9.70301 < r < 9.70301
   95% expected band : 9.70301 < r < 9.70301
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1961035311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.70828 +/- 0.0168024 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.70828 @ 95%CL (1 toyMC)
median expected limit: r < 9.70828 @ 95%CL (1 toyMC)
   68% expected band : 9.70828 < r < 9.70828
   95% expected band : 9.70828 < r < 9.70828
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1972222844
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.66424 +/- 0.0156261 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.66424 @ 95%CL (1 toyMC)
median expected limit: r < 9.66424 @ 95%CL (1 toyMC)
   68% expected band : 9.66424 < r < 9.66424
   95% expected band : 9.66424 < r < 9.66424
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -199454586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.8317 +/- 0.0175198 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 12.8317 @ 95%CL (1 toyMC)
median expected limit: r < 12.8317 @ 95%CL (1 toyMC)
   68% expected band : 12.8317 < r < 12.8317
   95% expected band : 12.8317 < r < 12.8317
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1067862112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.74337 +/- 0.0183424 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.74337 @ 95%CL (1 toyMC)
median expected limit: r < 9.74337 @ 95%CL (1 toyMC)
   68% expected band : 9.74337 < r < 9.74337
   95% expected band : 9.74337 < r < 9.74337
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 22806002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.77884 +/- 0.0181887 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.77884 @ 95%CL (1 toyMC)
median expected limit: r < 9.77884 @ 95%CL (1 toyMC)
   68% expected band : 9.77884 < r < 9.77884
   95% expected band : 9.77884 < r < 9.77884
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1763203884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.70882 +/- 0.0224155 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.70882 @ 95%CL (1 toyMC)
median expected limit: r < 9.70882 @ 95%CL (1 toyMC)
   68% expected band : 9.70882 < r < 9.70882
   95% expected band : 9.70882 < r < 9.70882
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1587668776
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.64784 +/- 0.0187065 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.64784 @ 95%CL (1 toyMC)
median expected limit: r < 9.64784 @ 95%CL (1 toyMC)
   68% expected band : 9.64784 < r < 9.64784
   95% expected band : 9.64784 < r < 9.64784
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 376310909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.6732 +/- 0.0127496 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.6732 @ 95%CL (1 toyMC)
median expected limit: r < 9.6732 @ 95%CL (1 toyMC)
   68% expected band : 9.6732 < r < 9.6732
   95% expected band : 9.6732 < r < 9.6732
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -361721301
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.1189 +/- 0.0146323 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 14.1189 @ 95%CL (1 toyMC)
median expected limit: r < 14.1189 @ 95%CL (1 toyMC)
   68% expected band : 14.1189 < r < 14.1189
   95% expected band : 14.1189 < r < 14.1189
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -345521332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.71301 +/- 0.0155027 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.71301 @ 95%CL (1 toyMC)
median expected limit: r < 9.71301 @ 95%CL (1 toyMC)
   68% expected band : 9.71301 < r < 9.71301
   95% expected band : 9.71301 < r < 9.71301
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1513975560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.73374 +/- 0.0224582 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.73374 @ 95%CL (1 toyMC)
median expected limit: r < 9.73374 @ 95%CL (1 toyMC)
   68% expected band : 9.73374 < r < 9.73374
   95% expected band : 9.73374 < r < 9.73374
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 369837358
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.0586 +/- 0.0112998 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 16.0586 @ 95%CL (1 toyMC)
median expected limit: r < 16.0586 @ 95%CL (1 toyMC)
   68% expected band : 16.0586 < r < 16.0586
   95% expected band : 16.0586 < r < 16.0586
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1675105399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.72302 +/- 0.0212336 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.72302 @ 95%CL (1 toyMC)
median expected limit: r < 9.72302 @ 95%CL (1 toyMC)
   68% expected band : 9.72302 < r < 9.72302
   95% expected band : 9.72302 < r < 9.72302
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1255000673
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.67693 +/- 0.0176925 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.67693 @ 95%CL (1 toyMC)
median expected limit: r < 9.67693 @ 95%CL (1 toyMC)
   68% expected band : 9.67693 < r < 9.67693
   95% expected band : 9.67693 < r < 9.67693
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1942084628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.62959 +/- 0.0190016 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.62959 @ 95%CL (1 toyMC)
median expected limit: r < 9.62959 @ 95%CL (1 toyMC)
   68% expected band : 9.62959 < r < 9.62959
   95% expected band : 9.62959 < r < 9.62959
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2008690271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.69267 +/- 0.0181388 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.69267 @ 95%CL (1 toyMC)
median expected limit: r < 9.69267 @ 95%CL (1 toyMC)
   68% expected band : 9.69267 < r < 9.69267
   95% expected band : 9.69267 < r < 9.69267
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 669530931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.76049 +/- 0.0177068 @ 95% CL (100 tries)
Done in 0.20 min (cpu), 0.20 min (real)
mean   expected limit: r < 9.76049 @ 95%CL (1 toyMC)
median expected limit: r < 9.76049 @ 95%CL (1 toyMC)
   68% expected band : 9.76049 < r < 9.76049
   95% expected band : 9.76049 < r < 9.76049
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1345065781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.667 +/- 0.0173881 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.667 @ 95%CL (1 toyMC)
median expected limit: r < 9.667 @ 95%CL (1 toyMC)
   68% expected band : 9.667 < r < 9.667
   95% expected band : 9.667 < r < 9.667
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1260039355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.73656 +/- 0.0177768 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.73656 @ 95%CL (1 toyMC)
median expected limit: r < 9.73656 @ 95%CL (1 toyMC)
   68% expected band : 9.73656 < r < 9.73656
   95% expected band : 9.73656 < r < 9.73656
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1344892789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.68017 +/- 0.0177223 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.68017 @ 95%CL (1 toyMC)
median expected limit: r < 9.68017 @ 95%CL (1 toyMC)
   68% expected band : 9.68017 < r < 9.68017
   95% expected band : 9.68017 < r < 9.68017
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1507677836
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.67455 +/- 0.0169433 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.67455 @ 95%CL (1 toyMC)
median expected limit: r < 9.67455 @ 95%CL (1 toyMC)
   68% expected band : 9.67455 < r < 9.67455
   95% expected band : 9.67455 < r < 9.67455
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2117062536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.68327 +/- 0.0205917 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.68327 @ 95%CL (1 toyMC)
median expected limit: r < 9.68327 @ 95%CL (1 toyMC)
   68% expected band : 9.68327 < r < 9.68327
   95% expected band : 9.68327 < r < 9.68327
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1612836715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.66813 +/- 0.0149761 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.66813 @ 95%CL (1 toyMC)
median expected limit: r < 9.66813 @ 95%CL (1 toyMC)
   68% expected band : 9.66813 < r < 9.66813
   95% expected band : 9.66813 < r < 9.66813
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1899057315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.72336 +/- 0.0159201 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.72336 @ 95%CL (1 toyMC)
median expected limit: r < 9.72336 @ 95%CL (1 toyMC)
   68% expected band : 9.72336 < r < 9.72336
   95% expected band : 9.72336 < r < 9.72336
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1292086665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.144 +/- 0.0190998 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 13.144 @ 95%CL (1 toyMC)
median expected limit: r < 13.144 @ 95%CL (1 toyMC)
   68% expected band : 13.144 < r < 13.144
   95% expected band : 13.144 < r < 13.144
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -54994365
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.73814 +/- 0.0177248 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.73814 @ 95%CL (1 toyMC)
median expected limit: r < 9.73814 @ 95%CL (1 toyMC)
   68% expected band : 9.73814 < r < 9.73814
   95% expected band : 9.73814 < r < 9.73814
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -100610564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.7316 +/- 0.0201559 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.7316 @ 95%CL (1 toyMC)
median expected limit: r < 9.7316 @ 95%CL (1 toyMC)
   68% expected band : 9.7316 < r < 9.7316
   95% expected band : 9.7316 < r < 9.7316
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -257708465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.3348 +/- 0.0145971 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.3348 @ 95%CL (1 toyMC)
median expected limit: r < 13.3348 @ 95%CL (1 toyMC)
   68% expected band : 13.3348 < r < 13.3348
   95% expected band : 13.3348 < r < 13.3348
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1120063810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.73619 +/- 0.0175836 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.73619 @ 95%CL (1 toyMC)
median expected limit: r < 9.73619 @ 95%CL (1 toyMC)
   68% expected band : 9.73619 < r < 9.73619
   95% expected band : 9.73619 < r < 9.73619
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 517976935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.2515 +/- 0.0117435 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 13.2515 @ 95%CL (1 toyMC)
median expected limit: r < 13.2515 @ 95%CL (1 toyMC)
   68% expected band : 13.2515 < r < 13.2515
   95% expected band : 13.2515 < r < 13.2515
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1299116265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.72072 +/- 0.0220765 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.72072 @ 95%CL (1 toyMC)
median expected limit: r < 9.72072 @ 95%CL (1 toyMC)
   68% expected band : 9.72072 < r < 9.72072
   95% expected band : 9.72072 < r < 9.72072
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1717423716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.65992 +/- 0.0165672 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.65992 @ 95%CL (1 toyMC)
median expected limit: r < 9.65992 @ 95%CL (1 toyMC)
   68% expected band : 9.65992 < r < 9.65992
   95% expected band : 9.65992 < r < 9.65992
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 208536378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.7572 +/- 0.0211723 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.7572 @ 95%CL (1 toyMC)
median expected limit: r < 9.7572 @ 95%CL (1 toyMC)
   68% expected band : 9.7572 < r < 9.7572
   95% expected band : 9.7572 < r < 9.7572
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -835733071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.0444 +/- 0.018827 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.0444 @ 95%CL (1 toyMC)
median expected limit: r < 13.0444 @ 95%CL (1 toyMC)
   68% expected band : 13.0444 < r < 13.0444
   95% expected band : 13.0444 < r < 13.0444
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 855033441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.70348 +/- 0.017711 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.70348 @ 95%CL (1 toyMC)
median expected limit: r < 9.70348 @ 95%CL (1 toyMC)
   68% expected band : 9.70348 < r < 9.70348
   95% expected band : 9.70348 < r < 9.70348
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -495630230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.74476 +/- 0.018399 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.74476 @ 95%CL (1 toyMC)
median expected limit: r < 9.74476 @ 95%CL (1 toyMC)
   68% expected band : 9.74476 < r < 9.74476
   95% expected band : 9.74476 < r < 9.74476
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 447278349
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.72561 +/- 0.0203239 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.72561 @ 95%CL (1 toyMC)
median expected limit: r < 9.72561 @ 95%CL (1 toyMC)
   68% expected band : 9.72561 < r < 9.72561
   95% expected band : 9.72561 < r < 9.72561
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -279215203
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.68595 +/- 0.0207229 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.68595 @ 95%CL (1 toyMC)
median expected limit: r < 9.68595 @ 95%CL (1 toyMC)
   68% expected band : 9.68595 < r < 9.68595
   95% expected band : 9.68595 < r < 9.68595
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -11597855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.6746 +/- 0.0172816 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.6746 @ 95%CL (1 toyMC)
median expected limit: r < 13.6746 @ 95%CL (1 toyMC)
   68% expected band : 13.6746 < r < 13.6746
   95% expected band : 13.6746 < r < 13.6746
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 280320464
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.74607 +/- 0.0183801 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.74607 @ 95%CL (1 toyMC)
median expected limit: r < 9.74607 @ 95%CL (1 toyMC)
   68% expected band : 9.74607 < r < 9.74607
   95% expected band : 9.74607 < r < 9.74607
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1204010047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.75825 +/- 0.0206878 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.75825 @ 95%CL (1 toyMC)
median expected limit: r < 9.75825 @ 95%CL (1 toyMC)
   68% expected band : 9.75825 < r < 9.75825
   95% expected band : 9.75825 < r < 9.75825
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1392276647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.4208 +/- 0.0148834 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 13.4208 @ 95%CL (1 toyMC)
median expected limit: r < 13.4208 @ 95%CL (1 toyMC)
   68% expected band : 13.4208 < r < 13.4208
   95% expected band : 13.4208 < r < 13.4208
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1309621647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.6884 +/- 0.00940098 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 16.6884 @ 95%CL (1 toyMC)
median expected limit: r < 16.6884 @ 95%CL (1 toyMC)
   68% expected band : 16.6884 < r < 16.6884
   95% expected band : 16.6884 < r < 16.6884
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1413142115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.72508 +/- 0.0189482 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.72508 @ 95%CL (1 toyMC)
median expected limit: r < 9.72508 @ 95%CL (1 toyMC)
   68% expected band : 9.72508 < r < 9.72508
   95% expected band : 9.72508 < r < 9.72508
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1434436520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.7397 +/- 0.0131449 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 13.7397 @ 95%CL (1 toyMC)
median expected limit: r < 13.7397 @ 95%CL (1 toyMC)
   68% expected band : 13.7397 < r < 13.7397
   95% expected band : 13.7397 < r < 13.7397
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1466173449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.4536 +/- 0.0171015 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 13.4536 @ 95%CL (1 toyMC)
median expected limit: r < 13.4536 @ 95%CL (1 toyMC)
   68% expected band : 13.4536 < r < 13.4536
   95% expected band : 13.4536 < r < 13.4536
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2107399369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.9118 +/- 0.0083026 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 15.9118 @ 95%CL (1 toyMC)
median expected limit: r < 15.9118 @ 95%CL (1 toyMC)
   68% expected band : 15.9118 < r < 15.9118
   95% expected band : 15.9118 < r < 15.9118
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1342237095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.79222 +/- 0.0179736 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.79222 @ 95%CL (1 toyMC)
median expected limit: r < 9.79222 @ 95%CL (1 toyMC)
   68% expected band : 9.79222 < r < 9.79222
   95% expected band : 9.79222 < r < 9.79222
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -684281523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.71757 +/- 0.014438 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.71757 @ 95%CL (1 toyMC)
median expected limit: r < 9.71757 @ 95%CL (1 toyMC)
   68% expected band : 9.71757 < r < 9.71757
   95% expected band : 9.71757 < r < 9.71757
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -309881410
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.68679 +/- 0.0182122 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.68679 @ 95%CL (1 toyMC)
median expected limit: r < 9.68679 @ 95%CL (1 toyMC)
   68% expected band : 9.68679 < r < 9.68679
   95% expected band : 9.68679 < r < 9.68679
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 691696227
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.71601 +/- 0.0192788 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.71601 @ 95%CL (1 toyMC)
median expected limit: r < 9.71601 @ 95%CL (1 toyMC)
   68% expected band : 9.71601 < r < 9.71601
   95% expected band : 9.71601 < r < 9.71601
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 368606255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.66679 +/- 0.0193625 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.66679 @ 95%CL (1 toyMC)
median expected limit: r < 9.66679 @ 95%CL (1 toyMC)
   68% expected band : 9.66679 < r < 9.66679
   95% expected band : 9.66679 < r < 9.66679
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1119198938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.73806 +/- 0.0177505 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.73806 @ 95%CL (1 toyMC)
median expected limit: r < 9.73806 @ 95%CL (1 toyMC)
   68% expected band : 9.73806 < r < 9.73806
   95% expected band : 9.73806 < r < 9.73806
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1618366139
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.4606 +/- 0.0150145 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.4606 @ 95%CL (1 toyMC)
median expected limit: r < 14.4606 @ 95%CL (1 toyMC)
   68% expected band : 14.4606 < r < 14.4606
   95% expected band : 14.4606 < r < 14.4606
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 397749646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.3074 +/- 0.0131263 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 14.3074 @ 95%CL (1 toyMC)
median expected limit: r < 14.3074 @ 95%CL (1 toyMC)
   68% expected band : 14.3074 < r < 14.3074
   95% expected band : 14.3074 < r < 14.3074
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1426739616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.4895 +/- 0.0148257 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.4895 @ 95%CL (1 toyMC)
median expected limit: r < 13.4895 @ 95%CL (1 toyMC)
   68% expected band : 13.4895 < r < 13.4895
   95% expected band : 13.4895 < r < 13.4895
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1052342751
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.69231 +/- 0.0228358 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.69231 @ 95%CL (1 toyMC)
median expected limit: r < 9.69231 @ 95%CL (1 toyMC)
   68% expected band : 9.69231 < r < 9.69231
   95% expected band : 9.69231 < r < 9.69231
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1420466655
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.7755 +/- 0.018195 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.7755 @ 95%CL (1 toyMC)
median expected limit: r < 9.7755 @ 95%CL (1 toyMC)
   68% expected band : 9.7755 < r < 9.7755
   95% expected band : 9.7755 < r < 9.7755
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -814274332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.72669 +/- 0.0216506 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.72669 @ 95%CL (1 toyMC)
median expected limit: r < 9.72669 @ 95%CL (1 toyMC)
   68% expected band : 9.72669 < r < 9.72669
   95% expected band : 9.72669 < r < 9.72669
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1828703538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.66802 +/- 0.0190133 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.66802 @ 95%CL (1 toyMC)
median expected limit: r < 9.66802 @ 95%CL (1 toyMC)
   68% expected band : 9.66802 < r < 9.66802
   95% expected band : 9.66802 < r < 9.66802
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1420738690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.2202 +/- 0.0129832 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.2202 @ 95%CL (1 toyMC)
median expected limit: r < 14.2202 @ 95%CL (1 toyMC)
   68% expected band : 14.2202 < r < 14.2202
   95% expected band : 14.2202 < r < 14.2202
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2070820571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.2135 +/- 0.0111342 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 16.2135 @ 95%CL (1 toyMC)
median expected limit: r < 16.2135 @ 95%CL (1 toyMC)
   68% expected band : 16.2135 < r < 16.2135
   95% expected band : 16.2135 < r < 16.2135
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1153730861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.64178 +/- 0.0184732 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 9.64178 @ 95%CL (1 toyMC)
median expected limit: r < 9.64178 @ 95%CL (1 toyMC)
   68% expected band : 9.64178 < r < 9.64178
   95% expected band : 9.64178 < r < 9.64178
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1751062930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.7356 +/- 0.0190223 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.7356 @ 95%CL (1 toyMC)
median expected limit: r < 9.7356 @ 95%CL (1 toyMC)
   68% expected band : 9.7356 < r < 9.7356
   95% expected band : 9.7356 < r < 9.7356
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1910084803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.4159 +/- 0.0156376 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 13.4159 @ 95%CL (1 toyMC)
median expected limit: r < 13.4159 @ 95%CL (1 toyMC)
   68% expected band : 13.4159 < r < 13.4159
   95% expected band : 13.4159 < r < 13.4159
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1286050050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.63695 +/- 0.0179544 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.63695 @ 95%CL (1 toyMC)
median expected limit: r < 9.63695 @ 95%CL (1 toyMC)
   68% expected band : 9.63695 < r < 9.63695
   95% expected band : 9.63695 < r < 9.63695
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -529738383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.70569 +/- 0.0200712 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.70569 @ 95%CL (1 toyMC)
median expected limit: r < 9.70569 @ 95%CL (1 toyMC)
   68% expected band : 9.70569 < r < 9.70569
   95% expected band : 9.70569 < r < 9.70569
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -508433159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.8387 +/- 0.0138391 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 15.8387 @ 95%CL (1 toyMC)
median expected limit: r < 15.8387 @ 95%CL (1 toyMC)
   68% expected band : 15.8387 < r < 15.8387
   95% expected band : 15.8387 < r < 15.8387
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1920721418
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.72802 +/- 0.0162432 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.72802 @ 95%CL (1 toyMC)
median expected limit: r < 9.72802 @ 95%CL (1 toyMC)
   68% expected band : 9.72802 < r < 9.72802
   95% expected band : 9.72802 < r < 9.72802
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -919479028
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.68131 +/- 0.0221771 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.68131 @ 95%CL (1 toyMC)
median expected limit: r < 9.68131 @ 95%CL (1 toyMC)
   68% expected band : 9.68131 < r < 9.68131
   95% expected band : 9.68131 < r < 9.68131
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1524394364
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.7556 +/- 0.0163085 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.7556 @ 95%CL (1 toyMC)
median expected limit: r < 13.7556 @ 95%CL (1 toyMC)
   68% expected band : 13.7556 < r < 13.7556
   95% expected band : 13.7556 < r < 13.7556
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1131556493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.71688 +/- 0.0183117 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.71688 @ 95%CL (1 toyMC)
median expected limit: r < 9.71688 @ 95%CL (1 toyMC)
   68% expected band : 9.71688 < r < 9.71688
   95% expected band : 9.71688 < r < 9.71688
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -717593068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.74409 +/- 0.0252429 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.74409 @ 95%CL (1 toyMC)
median expected limit: r < 9.74409 @ 95%CL (1 toyMC)
   68% expected band : 9.74409 < r < 9.74409
   95% expected band : 9.74409 < r < 9.74409
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1483406969
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.76743 +/- 0.0206698 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.76743 @ 95%CL (1 toyMC)
median expected limit: r < 9.76743 @ 95%CL (1 toyMC)
   68% expected band : 9.76743 < r < 9.76743
   95% expected band : 9.76743 < r < 9.76743
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1014638465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.67673 +/- 0.018923 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.67673 @ 95%CL (1 toyMC)
median expected limit: r < 9.67673 @ 95%CL (1 toyMC)
   68% expected band : 9.67673 < r < 9.67673
   95% expected band : 9.67673 < r < 9.67673
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1534842475
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.68855 +/- 0.0180999 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.68855 @ 95%CL (1 toyMC)
median expected limit: r < 9.68855 @ 95%CL (1 toyMC)
   68% expected band : 9.68855 < r < 9.68855
   95% expected band : 9.68855 < r < 9.68855
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 967894816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.75107 +/- 0.0176193 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 9.75107 @ 95%CL (1 toyMC)
median expected limit: r < 9.75107 @ 95%CL (1 toyMC)
   68% expected band : 9.75107 < r < 9.75107
   95% expected band : 9.75107 < r < 9.75107
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 790375670
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.78435 +/- 0.021536 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.78435 @ 95%CL (1 toyMC)
median expected limit: r < 9.78435 @ 95%CL (1 toyMC)
   68% expected band : 9.78435 < r < 9.78435
   95% expected band : 9.78435 < r < 9.78435
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -70575747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.68674 +/- 0.0221382 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 9.68674 @ 95%CL (1 toyMC)
median expected limit: r < 9.68674 @ 95%CL (1 toyMC)
   68% expected band : 9.68674 < r < 9.68674
   95% expected band : 9.68674 < r < 9.68674
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-100610564.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1052342751.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1119198938.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1139185126.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-115693049.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-11597855.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1186009025.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1204010047.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1255000673.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1286050050.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1299116265.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1307444457.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1342237095.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-1345065781.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1420466655.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1420738690.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1426739616.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1434436520.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1517236750.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1524394364.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1569768946.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1587668776.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1612836715.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1626053174.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1717423716.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-1763203884.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-181564360.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-1828703538.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-1961035311.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-199454586.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-2070820571.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-257708465.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-279215203.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-309881410.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-330168893.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-345521332.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-361721301.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-495630230.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-508433159.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-529738383.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-54994365.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-620791777.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-684281523.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-70575747.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-717593068.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-814274332.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-835733071.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.-919479028.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1011189668.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1014638465.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1067862112.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1120063810.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1131556493.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1136295431.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1153730861.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1260039355.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1292086665.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1309621647.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1326961486.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1344892789.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1392276647.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1413142115.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1466173449.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1483406969.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1507677836.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1513975560.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1534842475.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1618366139.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1675105399.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1742808902.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1751062930.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.177420000.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1899057315.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1910084803.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.1920721418.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.1942084628.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.1972222844.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.2008690271.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.208536378.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.2107399369.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.2117062536.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.215140796.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.22806002.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.280320464.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.313039978.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.328481448.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.368606255.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.369837358.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.376310909.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.397749646.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.447278349.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.517976935.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.57713252.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.669530931.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.691696227.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.790375670.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.855033441.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.875309548.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.967894816.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.978485130.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1970550287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3386 +/- 0.0226428 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 10.3386 @ 95%CL (1 toyMC)
median expected limit: r < 10.3386 @ 95%CL (1 toyMC)
   68% expected band : 10.3386 < r < 10.3386
   95% expected band : 10.3386 < r < 10.3386
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 940384170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.3583 +/- 0.0154504 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 14.3583 @ 95%CL (1 toyMC)
median expected limit: r < 14.3583 @ 95%CL (1 toyMC)
   68% expected band : 14.3583 < r < 14.3583
   95% expected band : 14.3583 < r < 14.3583
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1181133911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.557 +/- 0.0156343 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 13.557 @ 95%CL (1 toyMC)
median expected limit: r < 13.557 @ 95%CL (1 toyMC)
   68% expected band : 13.557 < r < 13.557
   95% expected band : 13.557 < r < 13.557
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1996234045
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3563 +/- 0.0181523 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3563 @ 95%CL (1 toyMC)
median expected limit: r < 10.3563 @ 95%CL (1 toyMC)
   68% expected band : 10.3563 < r < 10.3563
   95% expected band : 10.3563 < r < 10.3563
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -538507121
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.821 +/- 0.017098 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.821 @ 95%CL (1 toyMC)
median expected limit: r < 13.821 @ 95%CL (1 toyMC)
   68% expected band : 13.821 < r < 13.821
   95% expected band : 13.821 < r < 13.821
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 523409891
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.262 +/- 0.0223478 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.262 @ 95%CL (1 toyMC)
median expected limit: r < 10.262 @ 95%CL (1 toyMC)
   68% expected band : 10.262 < r < 10.262
   95% expected band : 10.262 < r < 10.262
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 628858682
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2092 +/- 0.0211551 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2092 @ 95%CL (1 toyMC)
median expected limit: r < 10.2092 @ 95%CL (1 toyMC)
   68% expected band : 10.2092 < r < 10.2092
   95% expected band : 10.2092 < r < 10.2092
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1455637429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3415 +/- 0.0177613 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3415 @ 95%CL (1 toyMC)
median expected limit: r < 10.3415 @ 95%CL (1 toyMC)
   68% expected band : 10.3415 < r < 10.3415
   95% expected band : 10.3415 < r < 10.3415
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1455390987
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3489 +/- 0.0188484 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3489 @ 95%CL (1 toyMC)
median expected limit: r < 10.3489 @ 95%CL (1 toyMC)
   68% expected band : 10.3489 < r < 10.3489
   95% expected band : 10.3489 < r < 10.3489
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1268853638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2459 +/- 0.0180237 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2459 @ 95%CL (1 toyMC)
median expected limit: r < 10.2459 @ 95%CL (1 toyMC)
   68% expected band : 10.2459 < r < 10.2459
   95% expected band : 10.2459 < r < 10.2459
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 861838596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2986 +/- 0.0208296 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2986 @ 95%CL (1 toyMC)
median expected limit: r < 10.2986 @ 95%CL (1 toyMC)
   68% expected band : 10.2986 < r < 10.2986
   95% expected band : 10.2986 < r < 10.2986
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1269836909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.2927 +/- 0.0121843 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.2927 @ 95%CL (1 toyMC)
median expected limit: r < 14.2927 @ 95%CL (1 toyMC)
   68% expected band : 14.2927 < r < 14.2927
   95% expected band : 14.2927 < r < 14.2927
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1035583116
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.9977 +/- 0.0133576 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.9977 @ 95%CL (1 toyMC)
median expected limit: r < 13.9977 @ 95%CL (1 toyMC)
   68% expected band : 13.9977 < r < 13.9977
   95% expected band : 13.9977 < r < 13.9977
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1693164561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.0996 +/- 0.00946462 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 17.0996 @ 95%CL (1 toyMC)
median expected limit: r < 17.0996 @ 95%CL (1 toyMC)
   68% expected band : 17.0996 < r < 17.0996
   95% expected band : 17.0996 < r < 17.0996
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1139120747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.064 +/- 0.00939461 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 17.064 @ 95%CL (1 toyMC)
median expected limit: r < 17.064 @ 95%CL (1 toyMC)
   68% expected band : 17.064 < r < 17.064
   95% expected band : 17.064 < r < 17.064
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1479532938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3327 +/- 0.0194027 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.3327 @ 95%CL (1 toyMC)
median expected limit: r < 10.3327 @ 95%CL (1 toyMC)
   68% expected band : 10.3327 < r < 10.3327
   95% expected band : 10.3327 < r < 10.3327
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 118512619
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2543 +/- 0.0183651 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2543 @ 95%CL (1 toyMC)
median expected limit: r < 10.2543 @ 95%CL (1 toyMC)
   68% expected band : 10.2543 < r < 10.2543
   95% expected band : 10.2543 < r < 10.2543
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -100534209
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2659 +/- 0.0181027 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2659 @ 95%CL (1 toyMC)
median expected limit: r < 10.2659 @ 95%CL (1 toyMC)
   68% expected band : 10.2659 < r < 10.2659
   95% expected band : 10.2659 < r < 10.2659
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1470819124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2845 +/- 0.0178935 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2845 @ 95%CL (1 toyMC)
median expected limit: r < 10.2845 @ 95%CL (1 toyMC)
   68% expected band : 10.2845 < r < 10.2845
   95% expected band : 10.2845 < r < 10.2845
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 164533043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2641 +/- 0.0160031 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2641 @ 95%CL (1 toyMC)
median expected limit: r < 10.2641 @ 95%CL (1 toyMC)
   68% expected band : 10.2641 < r < 10.2641
   95% expected band : 10.2641 < r < 10.2641
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -684963070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2685 +/- 0.017877 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2685 @ 95%CL (1 toyMC)
median expected limit: r < 10.2685 @ 95%CL (1 toyMC)
   68% expected band : 10.2685 < r < 10.2685
   95% expected band : 10.2685 < r < 10.2685
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -177126273
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.264 +/- 0.0167065 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.264 @ 95%CL (1 toyMC)
median expected limit: r < 10.264 @ 95%CL (1 toyMC)
   68% expected band : 10.264 < r < 10.264
   95% expected band : 10.264 < r < 10.264
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 106754723
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.269 +/- 0.0206952 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.269 @ 95%CL (1 toyMC)
median expected limit: r < 10.269 @ 95%CL (1 toyMC)
   68% expected band : 10.269 < r < 10.269
   95% expected band : 10.269 < r < 10.269
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1304229255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2771 +/- 0.0207475 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2771 @ 95%CL (1 toyMC)
median expected limit: r < 10.2771 @ 95%CL (1 toyMC)
   68% expected band : 10.2771 < r < 10.2771
   95% expected band : 10.2771 < r < 10.2771
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1965005043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.9698 +/- 0.0144194 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 13.9698 @ 95%CL (1 toyMC)
median expected limit: r < 13.9698 @ 95%CL (1 toyMC)
   68% expected band : 13.9698 < r < 13.9698
   95% expected band : 13.9698 < r < 13.9698
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1307962234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3406 +/- 0.0212302 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 10.3406 @ 95%CL (1 toyMC)
median expected limit: r < 10.3406 @ 95%CL (1 toyMC)
   68% expected band : 10.3406 < r < 10.3406
   95% expected band : 10.3406 < r < 10.3406
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -857956090
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3223 +/- 0.0149763 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3223 @ 95%CL (1 toyMC)
median expected limit: r < 10.3223 @ 95%CL (1 toyMC)
   68% expected band : 10.3223 < r < 10.3223
   95% expected band : 10.3223 < r < 10.3223
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 330982202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1868 +/- 0.0178856 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.1868 @ 95%CL (1 toyMC)
median expected limit: r < 10.1868 @ 95%CL (1 toyMC)
   68% expected band : 10.1868 < r < 10.1868
   95% expected band : 10.1868 < r < 10.1868
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2138120870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3361 +/- 0.0223195 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3361 @ 95%CL (1 toyMC)
median expected limit: r < 10.3361 @ 95%CL (1 toyMC)
   68% expected band : 10.3361 < r < 10.3361
   95% expected band : 10.3361 < r < 10.3361
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 851779861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2658 +/- 0.0215057 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2658 @ 95%CL (1 toyMC)
median expected limit: r < 10.2658 @ 95%CL (1 toyMC)
   68% expected band : 10.2658 < r < 10.2658
   95% expected band : 10.2658 < r < 10.2658
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 940284805
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3187 +/- 0.0185823 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 10.3187 @ 95%CL (1 toyMC)
median expected limit: r < 10.3187 @ 95%CL (1 toyMC)
   68% expected band : 10.3187 < r < 10.3187
   95% expected band : 10.3187 < r < 10.3187
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 52624907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.5301 +/- 0.0145123 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.5301 @ 95%CL (1 toyMC)
median expected limit: r < 13.5301 @ 95%CL (1 toyMC)
   68% expected band : 13.5301 < r < 13.5301
   95% expected band : 13.5301 < r < 13.5301
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 104936385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2791 +/- 0.0169767 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.2791 @ 95%CL (1 toyMC)
median expected limit: r < 10.2791 @ 95%CL (1 toyMC)
   68% expected band : 10.2791 < r < 10.2791
   95% expected band : 10.2791 < r < 10.2791
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1030035023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.0571 +/- 0.0154733 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 14.0571 @ 95%CL (1 toyMC)
median expected limit: r < 14.0571 @ 95%CL (1 toyMC)
   68% expected band : 14.0571 < r < 14.0571
   95% expected band : 14.0571 < r < 14.0571
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1481412698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.3121 +/- 0.0168646 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.3121 @ 95%CL (1 toyMC)
median expected limit: r < 14.3121 @ 95%CL (1 toyMC)
   68% expected band : 14.3121 < r < 14.3121
   95% expected band : 14.3121 < r < 14.3121
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 20452556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.7822 +/- 0.015374 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.7822 @ 95%CL (1 toyMC)
median expected limit: r < 13.7822 @ 95%CL (1 toyMC)
   68% expected band : 13.7822 < r < 13.7822
   95% expected band : 13.7822 < r < 13.7822
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2142290180
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.1132 +/- 0.0167093 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.1132 @ 95%CL (1 toyMC)
median expected limit: r < 14.1132 @ 95%CL (1 toyMC)
   68% expected band : 14.1132 < r < 14.1132
   95% expected band : 14.1132 < r < 14.1132
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 604875084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2367 +/- 0.0178051 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 10.2367 @ 95%CL (1 toyMC)
median expected limit: r < 10.2367 @ 95%CL (1 toyMC)
   68% expected band : 10.2367 < r < 10.2367
   95% expected band : 10.2367 < r < 10.2367
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -406150782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.2568 +/- 0.0134984 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.2568 @ 95%CL (1 toyMC)
median expected limit: r < 14.2568 @ 95%CL (1 toyMC)
   68% expected band : 14.2568 < r < 14.2568
   95% expected band : 14.2568 < r < 14.2568
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1319503429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2649 +/- 0.0166288 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2649 @ 95%CL (1 toyMC)
median expected limit: r < 10.2649 @ 95%CL (1 toyMC)
   68% expected band : 10.2649 < r < 10.2649
   95% expected band : 10.2649 < r < 10.2649
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -855569386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2245 +/- 0.0207412 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.2245 @ 95%CL (1 toyMC)
median expected limit: r < 10.2245 @ 95%CL (1 toyMC)
   68% expected band : 10.2245 < r < 10.2245
   95% expected band : 10.2245 < r < 10.2245
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 537617020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3146 +/- 0.0168336 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3146 @ 95%CL (1 toyMC)
median expected limit: r < 10.3146 @ 95%CL (1 toyMC)
   68% expected band : 10.3146 < r < 10.3146
   95% expected band : 10.3146 < r < 10.3146
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1924250318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3255 +/- 0.0181568 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3255 @ 95%CL (1 toyMC)
median expected limit: r < 10.3255 @ 95%CL (1 toyMC)
   68% expected band : 10.3255 < r < 10.3255
   95% expected band : 10.3255 < r < 10.3255
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -525440522
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2823 +/- 0.0155049 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2823 @ 95%CL (1 toyMC)
median expected limit: r < 10.2823 @ 95%CL (1 toyMC)
   68% expected band : 10.2823 < r < 10.2823
   95% expected band : 10.2823 < r < 10.2823
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 966688865
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3008 +/- 0.0216503 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3008 @ 95%CL (1 toyMC)
median expected limit: r < 10.3008 @ 95%CL (1 toyMC)
   68% expected band : 10.3008 < r < 10.3008
   95% expected band : 10.3008 < r < 10.3008
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 610257383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2688 +/- 0.0223118 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2688 @ 95%CL (1 toyMC)
median expected limit: r < 10.2688 @ 95%CL (1 toyMC)
   68% expected band : 10.2688 < r < 10.2688
   95% expected band : 10.2688 < r < 10.2688
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 199925743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3409 +/- 0.0224042 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3409 @ 95%CL (1 toyMC)
median expected limit: r < 10.3409 @ 95%CL (1 toyMC)
   68% expected band : 10.3409 < r < 10.3409
   95% expected band : 10.3409 < r < 10.3409
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1997544310
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.273 +/- 0.00838477 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 17.273 @ 95%CL (1 toyMC)
median expected limit: r < 17.273 @ 95%CL (1 toyMC)
   68% expected band : 17.273 < r < 17.273
   95% expected band : 17.273 < r < 17.273
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1126432820
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2887 +/- 0.0194494 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2887 @ 95%CL (1 toyMC)
median expected limit: r < 10.2887 @ 95%CL (1 toyMC)
   68% expected band : 10.2887 < r < 10.2887
   95% expected band : 10.2887 < r < 10.2887
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1417042662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2858 +/- 0.0226633 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2858 @ 95%CL (1 toyMC)
median expected limit: r < 10.2858 @ 95%CL (1 toyMC)
   68% expected band : 10.2858 < r < 10.2858
   95% expected band : 10.2858 < r < 10.2858
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1199597360
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.7865 +/- 0.00808504 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 16.7865 @ 95%CL (1 toyMC)
median expected limit: r < 16.7865 @ 95%CL (1 toyMC)
   68% expected band : 16.7865 < r < 16.7865
   95% expected band : 16.7865 < r < 16.7865
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 769465086
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.289 +/- 0.0211848 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 10.289 @ 95%CL (1 toyMC)
median expected limit: r < 10.289 @ 95%CL (1 toyMC)
   68% expected band : 10.289 < r < 10.289
   95% expected band : 10.289 < r < 10.289
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1978149543
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2852 +/- 0.0201255 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2852 @ 95%CL (1 toyMC)
median expected limit: r < 10.2852 @ 95%CL (1 toyMC)
   68% expected band : 10.2852 < r < 10.2852
   95% expected band : 10.2852 < r < 10.2852
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 404175819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.3711 +/- 0.0139284 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.3711 @ 95%CL (1 toyMC)
median expected limit: r < 14.3711 @ 95%CL (1 toyMC)
   68% expected band : 14.3711 < r < 14.3711
   95% expected band : 14.3711 < r < 14.3711
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1662936402
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3169 +/- 0.0212979 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3169 @ 95%CL (1 toyMC)
median expected limit: r < 10.3169 @ 95%CL (1 toyMC)
   68% expected band : 10.3169 < r < 10.3169
   95% expected band : 10.3169 < r < 10.3169
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1965579462
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.9729 +/- 0.0157631 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 13.9729 @ 95%CL (1 toyMC)
median expected limit: r < 13.9729 @ 95%CL (1 toyMC)
   68% expected band : 13.9729 < r < 13.9729
   95% expected band : 13.9729 < r < 13.9729
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 113620834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2553 +/- 0.0179987 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2553 @ 95%CL (1 toyMC)
median expected limit: r < 10.2553 @ 95%CL (1 toyMC)
   68% expected band : 10.2553 < r < 10.2553
   95% expected band : 10.2553 < r < 10.2553
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2040983829
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2753 +/- 0.0169256 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2753 @ 95%CL (1 toyMC)
median expected limit: r < 10.2753 @ 95%CL (1 toyMC)
   68% expected band : 10.2753 < r < 10.2753
   95% expected band : 10.2753 < r < 10.2753
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -94744747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 18.1668 +/- 0.00611534 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 18.1668 @ 95%CL (1 toyMC)
median expected limit: r < 18.1668 @ 95%CL (1 toyMC)
   68% expected band : 18.1668 < r < 18.1668
   95% expected band : 18.1668 < r < 18.1668
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1170774689
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2935 +/- 0.0206679 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2935 @ 95%CL (1 toyMC)
median expected limit: r < 10.2935 @ 95%CL (1 toyMC)
   68% expected band : 10.2935 < r < 10.2935
   95% expected band : 10.2935 < r < 10.2935
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -660279946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.6371 +/- 0.0152569 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.6371 @ 95%CL (1 toyMC)
median expected limit: r < 14.6371 @ 95%CL (1 toyMC)
   68% expected band : 14.6371 < r < 14.6371
   95% expected band : 14.6371 < r < 14.6371
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1878819899
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2764 +/- 0.0168778 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2764 @ 95%CL (1 toyMC)
median expected limit: r < 10.2764 @ 95%CL (1 toyMC)
   68% expected band : 10.2764 < r < 10.2764
   95% expected band : 10.2764 < r < 10.2764
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -704025840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2896 +/- 0.0198367 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2896 @ 95%CL (1 toyMC)
median expected limit: r < 10.2896 @ 95%CL (1 toyMC)
   68% expected band : 10.2896 < r < 10.2896
   95% expected band : 10.2896 < r < 10.2896
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1292153747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3117 +/- 0.0197383 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 10.3117 @ 95%CL (1 toyMC)
median expected limit: r < 10.3117 @ 95%CL (1 toyMC)
   68% expected band : 10.3117 < r < 10.3117
   95% expected band : 10.3117 < r < 10.3117
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1932621833
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.5513 +/- 0.0112333 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 13.5513 @ 95%CL (1 toyMC)
median expected limit: r < 13.5513 @ 95%CL (1 toyMC)
   68% expected band : 13.5513 < r < 13.5513
   95% expected band : 13.5513 < r < 13.5513
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1435080760
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3186 +/- 0.019012 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.3186 @ 95%CL (1 toyMC)
median expected limit: r < 10.3186 @ 95%CL (1 toyMC)
   68% expected band : 10.3186 < r < 10.3186
   95% expected band : 10.3186 < r < 10.3186
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2114140136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3088 +/- 0.0181861 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3088 @ 95%CL (1 toyMC)
median expected limit: r < 10.3088 @ 95%CL (1 toyMC)
   68% expected band : 10.3088 < r < 10.3088
   95% expected band : 10.3088 < r < 10.3088
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -720568451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2301 +/- 0.0164198 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2301 @ 95%CL (1 toyMC)
median expected limit: r < 10.2301 @ 95%CL (1 toyMC)
   68% expected band : 10.2301 < r < 10.2301
   95% expected band : 10.2301 < r < 10.2301
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -175461396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.1334 +/- 0.0166844 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 14.1334 @ 95%CL (1 toyMC)
median expected limit: r < 14.1334 @ 95%CL (1 toyMC)
   68% expected band : 14.1334 < r < 14.1334
   95% expected band : 14.1334 < r < 14.1334
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 809279622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2662 +/- 0.0218198 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2662 @ 95%CL (1 toyMC)
median expected limit: r < 10.2662 @ 95%CL (1 toyMC)
   68% expected band : 10.2662 < r < 10.2662
   95% expected band : 10.2662 < r < 10.2662
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -535304399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.482 +/- 0.0149853 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 13.482 @ 95%CL (1 toyMC)
median expected limit: r < 13.482 @ 95%CL (1 toyMC)
   68% expected band : 13.482 < r < 13.482
   95% expected band : 13.482 < r < 13.482
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -439382631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2654 +/- 0.0191277 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2654 @ 95%CL (1 toyMC)
median expected limit: r < 10.2654 @ 95%CL (1 toyMC)
   68% expected band : 10.2654 < r < 10.2654
   95% expected band : 10.2654 < r < 10.2654
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 94564096
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.3425 +/- 0.0176404 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.3425 @ 95%CL (1 toyMC)
median expected limit: r < 14.3425 @ 95%CL (1 toyMC)
   68% expected band : 14.3425 < r < 14.3425
   95% expected band : 14.3425 < r < 14.3425
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1172736485
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2929 +/- 0.020143 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2929 @ 95%CL (1 toyMC)
median expected limit: r < 10.2929 @ 95%CL (1 toyMC)
   68% expected band : 10.2929 < r < 10.2929
   95% expected band : 10.2929 < r < 10.2929
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1953632721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2818 +/- 0.0173371 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2818 @ 95%CL (1 toyMC)
median expected limit: r < 10.2818 @ 95%CL (1 toyMC)
   68% expected band : 10.2818 < r < 10.2818
   95% expected band : 10.2818 < r < 10.2818
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -462235074
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3244 +/- 0.0187013 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.3244 @ 95%CL (1 toyMC)
median expected limit: r < 10.3244 @ 95%CL (1 toyMC)
   68% expected band : 10.3244 < r < 10.3244
   95% expected band : 10.3244 < r < 10.3244
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 569635910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2445 +/- 0.0170182 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.2445 @ 95%CL (1 toyMC)
median expected limit: r < 10.2445 @ 95%CL (1 toyMC)
   68% expected band : 10.2445 < r < 10.2445
   95% expected band : 10.2445 < r < 10.2445
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1457624638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3241 +/- 0.0172455 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3241 @ 95%CL (1 toyMC)
median expected limit: r < 10.3241 @ 95%CL (1 toyMC)
   68% expected band : 10.3241 < r < 10.3241
   95% expected band : 10.3241 < r < 10.3241
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2049314937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3397 +/- 0.0175597 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3397 @ 95%CL (1 toyMC)
median expected limit: r < 10.3397 @ 95%CL (1 toyMC)
   68% expected band : 10.3397 < r < 10.3397
   95% expected band : 10.3397 < r < 10.3397
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 649072135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3375 +/- 0.0200178 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 10.3375 @ 95%CL (1 toyMC)
median expected limit: r < 10.3375 @ 95%CL (1 toyMC)
   68% expected band : 10.3375 < r < 10.3375
   95% expected band : 10.3375 < r < 10.3375
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1839731806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.3799 +/- 0.0130596 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 14.3799 @ 95%CL (1 toyMC)
median expected limit: r < 14.3799 @ 95%CL (1 toyMC)
   68% expected band : 14.3799 < r < 14.3799
   95% expected band : 14.3799 < r < 14.3799
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1945931798
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.281 +/- 0.0193469 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.281 @ 95%CL (1 toyMC)
median expected limit: r < 10.281 @ 95%CL (1 toyMC)
   68% expected band : 10.281 < r < 10.281
   95% expected band : 10.281 < r < 10.281
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1005285250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2525 +/- 0.0219146 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2525 @ 95%CL (1 toyMC)
median expected limit: r < 10.2525 @ 95%CL (1 toyMC)
   68% expected band : 10.2525 < r < 10.2525
   95% expected band : 10.2525 < r < 10.2525
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1037175645
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2936 +/- 0.0194213 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2936 @ 95%CL (1 toyMC)
median expected limit: r < 10.2936 @ 95%CL (1 toyMC)
   68% expected band : 10.2936 < r < 10.2936
   95% expected band : 10.2936 < r < 10.2936
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -858140772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3305 +/- 0.019617 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3305 @ 95%CL (1 toyMC)
median expected limit: r < 10.3305 @ 95%CL (1 toyMC)
   68% expected band : 10.3305 < r < 10.3305
   95% expected band : 10.3305 < r < 10.3305
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1670929168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2698 +/- 0.0175143 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 10.2698 @ 95%CL (1 toyMC)
median expected limit: r < 10.2698 @ 95%CL (1 toyMC)
   68% expected band : 10.2698 < r < 10.2698
   95% expected band : 10.2698 < r < 10.2698
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -830005377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.1885 +/- 0.0200275 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.1885 @ 95%CL (1 toyMC)
median expected limit: r < 10.1885 @ 95%CL (1 toyMC)
   68% expected band : 10.1885 < r < 10.1885
   95% expected band : 10.1885 < r < 10.1885
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1495544750
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2986 +/- 0.020946 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.2986 @ 95%CL (1 toyMC)
median expected limit: r < 10.2986 @ 95%CL (1 toyMC)
   68% expected band : 10.2986 < r < 10.2986
   95% expected band : 10.2986 < r < 10.2986
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1041610206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.268 +/- 0.0175772 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.268 @ 95%CL (1 toyMC)
median expected limit: r < 10.268 @ 95%CL (1 toyMC)
   68% expected band : 10.268 < r < 10.268
   95% expected band : 10.268 < r < 10.268
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2047478677
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3218 +/- 0.0174763 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3218 @ 95%CL (1 toyMC)
median expected limit: r < 10.3218 @ 95%CL (1 toyMC)
   68% expected band : 10.3218 < r < 10.3218
   95% expected band : 10.3218 < r < 10.3218
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1593715834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3358 +/- 0.0216551 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3358 @ 95%CL (1 toyMC)
median expected limit: r < 10.3358 @ 95%CL (1 toyMC)
   68% expected band : 10.3358 < r < 10.3358
   95% expected band : 10.3358 < r < 10.3358
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -119585106
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2665 +/- 0.0186951 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2665 @ 95%CL (1 toyMC)
median expected limit: r < 10.2665 @ 95%CL (1 toyMC)
   68% expected band : 10.2665 < r < 10.2665
   95% expected band : 10.2665 < r < 10.2665
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1621278073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2826 +/- 0.0171768 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 10.2826 @ 95%CL (1 toyMC)
median expected limit: r < 10.2826 @ 95%CL (1 toyMC)
   68% expected band : 10.2826 < r < 10.2826
   95% expected band : 10.2826 < r < 10.2826
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1481028874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.3144 +/- 0.0191673 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.3144 @ 95%CL (1 toyMC)
median expected limit: r < 10.3144 @ 95%CL (1 toyMC)
   68% expected band : 10.3144 < r < 10.3144
   95% expected band : 10.3144 < r < 10.3144
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -576865243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2727 +/- 0.0173051 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2727 @ 95%CL (1 toyMC)
median expected limit: r < 10.2727 @ 95%CL (1 toyMC)
   68% expected band : 10.2727 < r < 10.2727
   95% expected band : 10.2727 < r < 10.2727
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2017621862
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2463 +/- 0.0197003 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2463 @ 95%CL (1 toyMC)
median expected limit: r < 10.2463 @ 95%CL (1 toyMC)
   68% expected band : 10.2463 < r < 10.2463
   95% expected band : 10.2463 < r < 10.2463
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1056678318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2585 +/- 0.0212622 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.21 min (real)
mean   expected limit: r < 10.2585 @ 95%CL (1 toyMC)
median expected limit: r < 10.2585 @ 95%CL (1 toyMC)
   68% expected band : 10.2585 < r < 10.2585
   95% expected band : 10.2585 < r < 10.2585
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -669901424
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2601 +/- 0.021206 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.2601 @ 95%CL (1 toyMC)
median expected limit: r < 10.2601 @ 95%CL (1 toyMC)
   68% expected band : 10.2601 < r < 10.2601
   95% expected band : 10.2601 < r < 10.2601
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -631214173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.9971 +/- 0.0141655 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.9971 @ 95%CL (1 toyMC)
median expected limit: r < 14.9971 @ 95%CL (1 toyMC)
   68% expected band : 14.9971 < r < 14.9971
   95% expected band : 14.9971 < r < 14.9971
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1905977202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.2792 +/- 0.0163504 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.2792 @ 95%CL (1 toyMC)
median expected limit: r < 10.2792 @ 95%CL (1 toyMC)
   68% expected band : 10.2792 < r < 10.2792
   95% expected band : 10.2792 < r < 10.2792
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1005285250.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-100534209.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1041610206.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1139120747.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-119585106.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1199597360.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1269836909.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1292153747.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1435080760.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1455390987.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1479532938.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1621278073.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1693164561.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-175461396.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-177126273.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1839731806.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1924250318.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1965005043.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1978149543.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1996234045.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1997544310.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-2017621862.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-406150782.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-439382631.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-462235074.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-525440522.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-535304399.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-538507121.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-576865243.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-631214173.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-660279946.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-669901424.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-684963070.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-704025840.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-720568451.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-830005377.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-855569386.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-857956090.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-858140772.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-94744747.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.1030035023.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.1035583116.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.1037175645.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.104936385.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.1056678318.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.106754723.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.1126432820.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.113620834.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1170774689.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1172736485.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1181133911.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.118512619.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1268853638.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1304229255.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1307962234.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1319503429.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1417042662.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1455637429.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1457624638.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1470819124.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1481028874.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1481412698.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1495544750.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1593715834.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.164533043.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1662936402.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1670929168.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1878819899.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1905977202.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1932621833.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1945931798.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1953632721.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1965579462.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1970550287.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.199925743.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.2040983829.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.20452556.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.2047478677.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.2049314937.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.2114140136.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.2138120870.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.2142290180.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.330982202.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.404175819.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.523409891.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.52624907.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.537617020.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.569635910.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.604875084.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.610257383.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.628858682.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.649072135.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.769465086.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.809279622.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.851779861.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.861838596.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.940284805.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.940384170.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.94564096.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.966688865.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1842389248
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9597 +/- 0.0244279 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9597 @ 95%CL (1 toyMC)
median expected limit: r < 10.9597 @ 95%CL (1 toyMC)
   68% expected band : 10.9597 < r < 10.9597
   95% expected band : 10.9597 < r < 10.9597
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -234694293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.6065 +/- 0.00681535 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 17.6065 @ 95%CL (1 toyMC)
median expected limit: r < 17.6065 @ 95%CL (1 toyMC)
   68% expected band : 17.6065 < r < 17.6065
   95% expected band : 17.6065 < r < 17.6065
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1181588736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.8538 +/- 0.0122449 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.8538 @ 95%CL (1 toyMC)
median expected limit: r < 14.8538 @ 95%CL (1 toyMC)
   68% expected band : 14.8538 < r < 14.8538
   95% expected band : 14.8538 < r < 14.8538
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1395709644
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.6982 +/- 0.00858126 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 17.6982 @ 95%CL (1 toyMC)
median expected limit: r < 17.6982 @ 95%CL (1 toyMC)
   68% expected band : 17.6982 < r < 17.6982
   95% expected band : 17.6982 < r < 17.6982
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1584871465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9543 +/- 0.018707 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9543 @ 95%CL (1 toyMC)
median expected limit: r < 10.9543 @ 95%CL (1 toyMC)
   68% expected band : 10.9543 < r < 10.9543
   95% expected band : 10.9543 < r < 10.9543
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1732613759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0181 +/- 0.017617 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0181 @ 95%CL (1 toyMC)
median expected limit: r < 11.0181 @ 95%CL (1 toyMC)
   68% expected band : 11.0181 < r < 11.0181
   95% expected band : 11.0181 < r < 11.0181
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2030474322
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.7786 +/- 0.0164707 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.7786 @ 95%CL (1 toyMC)
median expected limit: r < 14.7786 @ 95%CL (1 toyMC)
   68% expected band : 14.7786 < r < 14.7786
   95% expected band : 14.7786 < r < 14.7786
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 108478000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9767 +/- 0.0182042 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9767 @ 95%CL (1 toyMC)
median expected limit: r < 10.9767 @ 95%CL (1 toyMC)
   68% expected band : 10.9767 < r < 10.9767
   95% expected band : 10.9767 < r < 10.9767
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -31975973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9708 +/- 0.0170125 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9708 @ 95%CL (1 toyMC)
median expected limit: r < 10.9708 @ 95%CL (1 toyMC)
   68% expected band : 10.9708 < r < 10.9708
   95% expected band : 10.9708 < r < 10.9708
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 36337629
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9601 +/- 0.0212225 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9601 @ 95%CL (1 toyMC)
median expected limit: r < 10.9601 @ 95%CL (1 toyMC)
   68% expected band : 10.9601 < r < 10.9601
   95% expected band : 10.9601 < r < 10.9601
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 17732593
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0343 +/- 0.0174011 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0343 @ 95%CL (1 toyMC)
median expected limit: r < 11.0343 @ 95%CL (1 toyMC)
   68% expected band : 11.0343 < r < 11.0343
   95% expected band : 11.0343 < r < 11.0343
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2123408583
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.2016 +/- 0.0127342 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.2016 @ 95%CL (1 toyMC)
median expected limit: r < 15.2016 @ 95%CL (1 toyMC)
   68% expected band : 15.2016 < r < 15.2016
   95% expected band : 15.2016 < r < 15.2016
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -250775710
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9903 +/- 0.016277 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9903 @ 95%CL (1 toyMC)
median expected limit: r < 10.9903 @ 95%CL (1 toyMC)
   68% expected band : 10.9903 < r < 10.9903
   95% expected band : 10.9903 < r < 10.9903
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1364676056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0035 +/- 0.0224029 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.0035 @ 95%CL (1 toyMC)
median expected limit: r < 11.0035 @ 95%CL (1 toyMC)
   68% expected band : 11.0035 < r < 11.0035
   95% expected band : 11.0035 < r < 11.0035
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -772771313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0275 +/- 0.0190486 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0275 @ 95%CL (1 toyMC)
median expected limit: r < 11.0275 @ 95%CL (1 toyMC)
   68% expected band : 11.0275 < r < 11.0275
   95% expected band : 11.0275 < r < 11.0275
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -564979772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9828 +/- 0.0217192 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9828 @ 95%CL (1 toyMC)
median expected limit: r < 10.9828 @ 95%CL (1 toyMC)
   68% expected band : 10.9828 < r < 10.9828
   95% expected band : 10.9828 < r < 10.9828
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 782499384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9867 +/- 0.0222356 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9867 @ 95%CL (1 toyMC)
median expected limit: r < 10.9867 @ 95%CL (1 toyMC)
   68% expected band : 10.9867 < r < 10.9867
   95% expected band : 10.9867 < r < 10.9867
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1272040294
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9835 +/- 0.0207638 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9835 @ 95%CL (1 toyMC)
median expected limit: r < 10.9835 @ 95%CL (1 toyMC)
   68% expected band : 10.9835 < r < 10.9835
   95% expected band : 10.9835 < r < 10.9835
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -55012453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0098 +/- 0.0167117 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0098 @ 95%CL (1 toyMC)
median expected limit: r < 11.0098 @ 95%CL (1 toyMC)
   68% expected band : 11.0098 < r < 11.0098
   95% expected band : 11.0098 < r < 11.0098
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 911950096
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9936 +/- 0.0159211 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9936 @ 95%CL (1 toyMC)
median expected limit: r < 10.9936 @ 95%CL (1 toyMC)
   68% expected band : 10.9936 < r < 10.9936
   95% expected band : 10.9936 < r < 10.9936
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1379464592
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0636 +/- 0.0221643 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0636 @ 95%CL (1 toyMC)
median expected limit: r < 11.0636 @ 95%CL (1 toyMC)
   68% expected band : 11.0636 < r < 11.0636
   95% expected band : 11.0636 < r < 11.0636
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1859258234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0427 +/- 0.0242206 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0427 @ 95%CL (1 toyMC)
median expected limit: r < 11.0427 @ 95%CL (1 toyMC)
   68% expected band : 11.0427 < r < 11.0427
   95% expected band : 11.0427 < r < 11.0427
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2115575579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9908 +/- 0.016894 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9908 @ 95%CL (1 toyMC)
median expected limit: r < 10.9908 @ 95%CL (1 toyMC)
   68% expected band : 10.9908 < r < 10.9908
   95% expected band : 10.9908 < r < 10.9908
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2138550930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.2422 +/- 0.0101631 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.2422 @ 95%CL (1 toyMC)
median expected limit: r < 15.2422 @ 95%CL (1 toyMC)
   68% expected band : 15.2422 < r < 15.2422
   95% expected band : 15.2422 < r < 15.2422
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -537575262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0792 +/- 0.0205043 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0792 @ 95%CL (1 toyMC)
median expected limit: r < 11.0792 @ 95%CL (1 toyMC)
   68% expected band : 11.0792 < r < 11.0792
   95% expected band : 11.0792 < r < 11.0792
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -57145544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.6682 +/- 0.0130495 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 14.6682 @ 95%CL (1 toyMC)
median expected limit: r < 14.6682 @ 95%CL (1 toyMC)
   68% expected band : 14.6682 < r < 14.6682
   95% expected band : 14.6682 < r < 14.6682
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -56748455
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0064 +/- 0.0186913 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0064 @ 95%CL (1 toyMC)
median expected limit: r < 11.0064 @ 95%CL (1 toyMC)
   68% expected band : 11.0064 < r < 11.0064
   95% expected band : 11.0064 < r < 11.0064
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 614869308
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9795 +/- 0.0179619 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9795 @ 95%CL (1 toyMC)
median expected limit: r < 10.9795 @ 95%CL (1 toyMC)
   68% expected band : 10.9795 < r < 10.9795
   95% expected band : 10.9795 < r < 10.9795
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1996254716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0482 +/- 0.0208105 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.0482 @ 95%CL (1 toyMC)
median expected limit: r < 11.0482 @ 95%CL (1 toyMC)
   68% expected band : 11.0482 < r < 11.0482
   95% expected band : 11.0482 < r < 11.0482
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 985303000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9973 +/- 0.0139696 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 10.9973 @ 95%CL (1 toyMC)
median expected limit: r < 10.9973 @ 95%CL (1 toyMC)
   68% expected band : 10.9973 < r < 10.9973
   95% expected band : 10.9973 < r < 10.9973
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2025179628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9745 +/- 0.0180999 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9745 @ 95%CL (1 toyMC)
median expected limit: r < 10.9745 @ 95%CL (1 toyMC)
   68% expected band : 10.9745 < r < 10.9745
   95% expected band : 10.9745 < r < 10.9745
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 690727839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.2341 +/- 0.0126446 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.2341 @ 95%CL (1 toyMC)
median expected limit: r < 15.2341 @ 95%CL (1 toyMC)
   68% expected band : 15.2341 < r < 15.2341
   95% expected band : 15.2341 < r < 15.2341
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -744652575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9546 +/- 0.0203409 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9546 @ 95%CL (1 toyMC)
median expected limit: r < 10.9546 @ 95%CL (1 toyMC)
   68% expected band : 10.9546 < r < 10.9546
   95% expected band : 10.9546 < r < 10.9546
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1990893249
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9963 +/- 0.0177855 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9963 @ 95%CL (1 toyMC)
median expected limit: r < 10.9963 @ 95%CL (1 toyMC)
   68% expected band : 10.9963 < r < 10.9963
   95% expected band : 10.9963 < r < 10.9963
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1812822487
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0336 +/- 0.0166099 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0336 @ 95%CL (1 toyMC)
median expected limit: r < 11.0336 @ 95%CL (1 toyMC)
   68% expected band : 11.0336 < r < 11.0336
   95% expected band : 11.0336 < r < 11.0336
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1107775815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0425 +/- 0.0147654 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0425 @ 95%CL (1 toyMC)
median expected limit: r < 11.0425 @ 95%CL (1 toyMC)
   68% expected band : 11.0425 < r < 11.0425
   95% expected band : 11.0425 < r < 11.0425
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 395242695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0729 +/- 0.0182511 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0729 @ 95%CL (1 toyMC)
median expected limit: r < 11.0729 @ 95%CL (1 toyMC)
   68% expected band : 11.0729 < r < 11.0729
   95% expected band : 11.0729 < r < 11.0729
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -260219587
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0359 +/- 0.0191035 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.0359 @ 95%CL (1 toyMC)
median expected limit: r < 11.0359 @ 95%CL (1 toyMC)
   68% expected band : 11.0359 < r < 11.0359
   95% expected band : 11.0359 < r < 11.0359
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2140115697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0122 +/- 0.0248326 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0122 @ 95%CL (1 toyMC)
median expected limit: r < 11.0122 @ 95%CL (1 toyMC)
   68% expected band : 11.0122 < r < 11.0122
   95% expected band : 11.0122 < r < 11.0122
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1248029407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9619 +/- 0.0204927 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9619 @ 95%CL (1 toyMC)
median expected limit: r < 10.9619 @ 95%CL (1 toyMC)
   68% expected band : 10.9619 < r < 10.9619
   95% expected band : 10.9619 < r < 10.9619
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1475978704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.222 +/- 0.0131794 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.222 @ 95%CL (1 toyMC)
median expected limit: r < 15.222 @ 95%CL (1 toyMC)
   68% expected band : 15.222 < r < 15.222
   95% expected band : 15.222 < r < 15.222
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 315967119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9823 +/- 0.0215816 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9823 @ 95%CL (1 toyMC)
median expected limit: r < 10.9823 @ 95%CL (1 toyMC)
   68% expected band : 10.9823 < r < 10.9823
   95% expected band : 10.9823 < r < 10.9823
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1066690420
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.8557 +/- 0.0146661 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.8557 @ 95%CL (1 toyMC)
median expected limit: r < 14.8557 @ 95%CL (1 toyMC)
   68% expected band : 14.8557 < r < 14.8557
   95% expected band : 14.8557 < r < 14.8557
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1966238824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9979 +/- 0.021147 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9979 @ 95%CL (1 toyMC)
median expected limit: r < 10.9979 @ 95%CL (1 toyMC)
   68% expected band : 10.9979 < r < 10.9979
   95% expected band : 10.9979 < r < 10.9979
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -450135537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.379 +/- 0.0108167 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 15.379 @ 95%CL (1 toyMC)
median expected limit: r < 15.379 @ 95%CL (1 toyMC)
   68% expected band : 15.379 < r < 15.379
   95% expected band : 15.379 < r < 15.379
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1707563332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0092 +/- 0.0227262 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.0092 @ 95%CL (1 toyMC)
median expected limit: r < 11.0092 @ 95%CL (1 toyMC)
   68% expected band : 11.0092 < r < 11.0092
   95% expected band : 11.0092 < r < 11.0092
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -805459354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9259 +/- 0.0193251 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9259 @ 95%CL (1 toyMC)
median expected limit: r < 10.9259 @ 95%CL (1 toyMC)
   68% expected band : 10.9259 < r < 10.9259
   95% expected band : 10.9259 < r < 10.9259
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1053925605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9571 +/- 0.0182981 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9571 @ 95%CL (1 toyMC)
median expected limit: r < 10.9571 @ 95%CL (1 toyMC)
   68% expected band : 10.9571 < r < 10.9571
   95% expected band : 10.9571 < r < 10.9571
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 526402790
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.989 +/- 0.0196224 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.989 @ 95%CL (1 toyMC)
median expected limit: r < 10.989 @ 95%CL (1 toyMC)
   68% expected band : 10.989 < r < 10.989
   95% expected band : 10.989 < r < 10.989
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1574140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0167 +/- 0.0189942 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.0167 @ 95%CL (1 toyMC)
median expected limit: r < 11.0167 @ 95%CL (1 toyMC)
   68% expected band : 11.0167 < r < 11.0167
   95% expected band : 11.0167 < r < 11.0167
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2032051351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0996 +/- 0.0238276 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0996 @ 95%CL (1 toyMC)
median expected limit: r < 11.0996 @ 95%CL (1 toyMC)
   68% expected band : 11.0996 < r < 11.0996
   95% expected band : 11.0996 < r < 11.0996
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 81621941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9812 +/- 0.0197442 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9812 @ 95%CL (1 toyMC)
median expected limit: r < 10.9812 @ 95%CL (1 toyMC)
   68% expected band : 10.9812 < r < 10.9812
   95% expected band : 10.9812 < r < 10.9812
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1416436293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9515 +/- 0.0173119 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9515 @ 95%CL (1 toyMC)
median expected limit: r < 10.9515 @ 95%CL (1 toyMC)
   68% expected band : 10.9515 < r < 10.9515
   95% expected band : 10.9515 < r < 10.9515
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -738898151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.982 +/- 0.0192223 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.982 @ 95%CL (1 toyMC)
median expected limit: r < 10.982 @ 95%CL (1 toyMC)
   68% expected band : 10.982 < r < 10.982
   95% expected band : 10.982 < r < 10.982
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -520297202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0259 +/- 0.0209894 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.0259 @ 95%CL (1 toyMC)
median expected limit: r < 11.0259 @ 95%CL (1 toyMC)
   68% expected band : 11.0259 < r < 11.0259
   95% expected band : 11.0259 < r < 11.0259
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1102698868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0104 +/- 0.0204405 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.0104 @ 95%CL (1 toyMC)
median expected limit: r < 11.0104 @ 95%CL (1 toyMC)
   68% expected band : 11.0104 < r < 11.0104
   95% expected band : 11.0104 < r < 11.0104
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2084303011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0028 +/- 0.017646 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.0028 @ 95%CL (1 toyMC)
median expected limit: r < 11.0028 @ 95%CL (1 toyMC)
   68% expected band : 11.0028 < r < 11.0028
   95% expected band : 11.0028 < r < 11.0028
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 653661270
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9945 +/- 0.0199697 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 10.9945 @ 95%CL (1 toyMC)
median expected limit: r < 10.9945 @ 95%CL (1 toyMC)
   68% expected band : 10.9945 < r < 10.9945
   95% expected band : 10.9945 < r < 10.9945
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1378257828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0026 +/- 0.0185881 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0026 @ 95%CL (1 toyMC)
median expected limit: r < 11.0026 @ 95%CL (1 toyMC)
   68% expected band : 11.0026 < r < 11.0026
   95% expected band : 11.0026 < r < 11.0026
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1339524311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9932 +/- 0.0178683 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9932 @ 95%CL (1 toyMC)
median expected limit: r < 10.9932 @ 95%CL (1 toyMC)
   68% expected band : 10.9932 < r < 10.9932
   95% expected band : 10.9932 < r < 10.9932
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1072964335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9991 +/- 0.0189797 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9991 @ 95%CL (1 toyMC)
median expected limit: r < 10.9991 @ 95%CL (1 toyMC)
   68% expected band : 10.9991 < r < 10.9991
   95% expected band : 10.9991 < r < 10.9991
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1840699661
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.951 +/- 0.0195254 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.951 @ 95%CL (1 toyMC)
median expected limit: r < 10.951 @ 95%CL (1 toyMC)
   68% expected band : 10.951 < r < 10.951
   95% expected band : 10.951 < r < 10.951
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1547375724
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.8768 +/- 0.0123685 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 14.8768 @ 95%CL (1 toyMC)
median expected limit: r < 14.8768 @ 95%CL (1 toyMC)
   68% expected band : 14.8768 < r < 14.8768
   95% expected band : 14.8768 < r < 14.8768
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1905906017
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9941 +/- 0.0199231 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9941 @ 95%CL (1 toyMC)
median expected limit: r < 10.9941 @ 95%CL (1 toyMC)
   68% expected band : 10.9941 < r < 10.9941
   95% expected band : 10.9941 < r < 10.9941
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -155256735
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9302 +/- 0.01857 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9302 @ 95%CL (1 toyMC)
median expected limit: r < 10.9302 @ 95%CL (1 toyMC)
   68% expected band : 10.9302 < r < 10.9302
   95% expected band : 10.9302 < r < 10.9302
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 161598757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9197 +/- 0.0198571 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9197 @ 95%CL (1 toyMC)
median expected limit: r < 10.9197 @ 95%CL (1 toyMC)
   68% expected band : 10.9197 < r < 10.9197
   95% expected band : 10.9197 < r < 10.9197
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 907361033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.94 +/- 0.0201088 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.94 @ 95%CL (1 toyMC)
median expected limit: r < 10.94 @ 95%CL (1 toyMC)
   68% expected band : 10.94 < r < 10.94
   95% expected band : 10.94 < r < 10.94
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 612544470
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.976 +/- 0.0178521 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.976 @ 95%CL (1 toyMC)
median expected limit: r < 10.976 @ 95%CL (1 toyMC)
   68% expected band : 10.976 < r < 10.976
   95% expected band : 10.976 < r < 10.976
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1588930097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9963 +/- 0.0214157 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9963 @ 95%CL (1 toyMC)
median expected limit: r < 10.9963 @ 95%CL (1 toyMC)
   68% expected band : 10.9963 < r < 10.9963
   95% expected band : 10.9963 < r < 10.9963
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 963983132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9847 +/- 0.0189495 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9847 @ 95%CL (1 toyMC)
median expected limit: r < 10.9847 @ 95%CL (1 toyMC)
   68% expected band : 10.9847 < r < 10.9847
   95% expected band : 10.9847 < r < 10.9847
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1250158591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0116 +/- 0.0199809 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0116 @ 95%CL (1 toyMC)
median expected limit: r < 11.0116 @ 95%CL (1 toyMC)
   68% expected band : 11.0116 < r < 11.0116
   95% expected band : 11.0116 < r < 11.0116
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1016359420
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9575 +/- 0.0174583 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9575 @ 95%CL (1 toyMC)
median expected limit: r < 10.9575 @ 95%CL (1 toyMC)
   68% expected band : 10.9575 < r < 10.9575
   95% expected band : 10.9575 < r < 10.9575
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 226866907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0228 +/- 0.0181408 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.0228 @ 95%CL (1 toyMC)
median expected limit: r < 11.0228 @ 95%CL (1 toyMC)
   68% expected band : 11.0228 < r < 11.0228
   95% expected band : 11.0228 < r < 11.0228
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1203431144
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0031 +/- 0.0203318 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0031 @ 95%CL (1 toyMC)
median expected limit: r < 11.0031 @ 95%CL (1 toyMC)
   68% expected band : 11.0031 < r < 11.0031
   95% expected band : 11.0031 < r < 11.0031
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -652069500
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.1695 +/- 0.0100713 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.1695 @ 95%CL (1 toyMC)
median expected limit: r < 15.1695 @ 95%CL (1 toyMC)
   68% expected band : 15.1695 < r < 15.1695
   95% expected band : 15.1695 < r < 15.1695
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1747168207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0156 +/- 0.0166628 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.0156 @ 95%CL (1 toyMC)
median expected limit: r < 11.0156 @ 95%CL (1 toyMC)
   68% expected band : 11.0156 < r < 11.0156
   95% expected band : 11.0156 < r < 11.0156
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1127256421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9831 +/- 0.0205237 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9831 @ 95%CL (1 toyMC)
median expected limit: r < 10.9831 @ 95%CL (1 toyMC)
   68% expected band : 10.9831 < r < 10.9831
   95% expected band : 10.9831 < r < 10.9831
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1743569351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0034 +/- 0.0164812 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0034 @ 95%CL (1 toyMC)
median expected limit: r < 11.0034 @ 95%CL (1 toyMC)
   68% expected band : 11.0034 < r < 11.0034
   95% expected band : 11.0034 < r < 11.0034
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1096222810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9308 +/- 0.0186979 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9308 @ 95%CL (1 toyMC)
median expected limit: r < 10.9308 @ 95%CL (1 toyMC)
   68% expected band : 10.9308 < r < 10.9308
   95% expected band : 10.9308 < r < 10.9308
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1974451828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9561 +/- 0.0194606 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9561 @ 95%CL (1 toyMC)
median expected limit: r < 10.9561 @ 95%CL (1 toyMC)
   68% expected band : 10.9561 < r < 10.9561
   95% expected band : 10.9561 < r < 10.9561
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -702012311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.731 +/- 0.0135998 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 14.731 @ 95%CL (1 toyMC)
median expected limit: r < 14.731 @ 95%CL (1 toyMC)
   68% expected band : 14.731 < r < 14.731
   95% expected band : 14.731 < r < 14.731
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1471200366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0716 +/- 0.0209004 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0716 @ 95%CL (1 toyMC)
median expected limit: r < 11.0716 @ 95%CL (1 toyMC)
   68% expected band : 11.0716 < r < 11.0716
   95% expected band : 11.0716 < r < 11.0716
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 50881388
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0107 +/- 0.0240112 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.0107 @ 95%CL (1 toyMC)
median expected limit: r < 11.0107 @ 95%CL (1 toyMC)
   68% expected band : 11.0107 < r < 11.0107
   95% expected band : 11.0107 < r < 11.0107
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 743075186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9365 +/- 0.018808 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9365 @ 95%CL (1 toyMC)
median expected limit: r < 10.9365 @ 95%CL (1 toyMC)
   68% expected band : 10.9365 < r < 10.9365
   95% expected band : 10.9365 < r < 10.9365
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 807870739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9874 +/- 0.0195131 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9874 @ 95%CL (1 toyMC)
median expected limit: r < 10.9874 @ 95%CL (1 toyMC)
   68% expected band : 10.9874 < r < 10.9874
   95% expected band : 10.9874 < r < 10.9874
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -305825547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.8252 +/- 0.0126338 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.8252 @ 95%CL (1 toyMC)
median expected limit: r < 14.8252 @ 95%CL (1 toyMC)
   68% expected band : 14.8252 < r < 14.8252
   95% expected band : 14.8252 < r < 14.8252
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1558961413
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9709 +/- 0.0178384 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9709 @ 95%CL (1 toyMC)
median expected limit: r < 10.9709 @ 95%CL (1 toyMC)
   68% expected band : 10.9709 < r < 10.9709
   95% expected band : 10.9709 < r < 10.9709
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1539127163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0006 +/- 0.0186509 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.0006 @ 95%CL (1 toyMC)
median expected limit: r < 11.0006 @ 95%CL (1 toyMC)
   68% expected band : 11.0006 < r < 11.0006
   95% expected band : 11.0006 < r < 11.0006
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2028480399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.6579 +/- 0.00638509 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 17.6579 @ 95%CL (1 toyMC)
median expected limit: r < 17.6579 @ 95%CL (1 toyMC)
   68% expected band : 17.6579 < r < 17.6579
   95% expected band : 17.6579 < r < 17.6579
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1520920708
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9917 +/- 0.0166742 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9917 @ 95%CL (1 toyMC)
median expected limit: r < 10.9917 @ 95%CL (1 toyMC)
   68% expected band : 10.9917 < r < 10.9917
   95% expected band : 10.9917 < r < 10.9917
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 440396566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0124 +/- 0.0198571 @ 95% CL (100 tries)
Done in 0.21 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.0124 @ 95%CL (1 toyMC)
median expected limit: r < 11.0124 @ 95%CL (1 toyMC)
   68% expected band : 11.0124 < r < 11.0124
   95% expected band : 11.0124 < r < 11.0124
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -476665463
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9918 +/- 0.0194895 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9918 @ 95%CL (1 toyMC)
median expected limit: r < 10.9918 @ 95%CL (1 toyMC)
   68% expected band : 10.9918 < r < 10.9918
   95% expected band : 10.9918 < r < 10.9918
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1680887664
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9785 +/- 0.0237061 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.9785 @ 95%CL (1 toyMC)
median expected limit: r < 10.9785 @ 95%CL (1 toyMC)
   68% expected band : 10.9785 < r < 10.9785
   95% expected band : 10.9785 < r < 10.9785
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1792832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.993 +/- 0.0147111 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 10.993 @ 95%CL (1 toyMC)
median expected limit: r < 10.993 @ 95%CL (1 toyMC)
   68% expected band : 10.993 < r < 10.993
   95% expected band : 10.993 < r < 10.993
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1897439024
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.018 +/- 0.0177449 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.018 @ 95%CL (1 toyMC)
median expected limit: r < 11.018 @ 95%CL (1 toyMC)
   68% expected band : 11.018 < r < 11.018
   95% expected band : 11.018 < r < 11.018
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1318862248
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.0159 +/- 0.0222062 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.0159 @ 95%CL (1 toyMC)
median expected limit: r < 11.0159 @ 95%CL (1 toyMC)
   68% expected band : 11.0159 < r < 11.0159
   95% expected band : 11.0159 < r < 11.0159
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1049534646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9957 +/- 0.018861 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9957 @ 95%CL (1 toyMC)
median expected limit: r < 10.9957 @ 95%CL (1 toyMC)
   68% expected band : 10.9957 < r < 10.9957
   95% expected band : 10.9957 < r < 10.9957
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1110279332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.8267 +/- 0.0149023 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 14.8267 @ 95%CL (1 toyMC)
median expected limit: r < 14.8267 @ 95%CL (1 toyMC)
   68% expected band : 14.8267 < r < 14.8267
   95% expected band : 14.8267 < r < 14.8267
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 499685605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.9935 +/- 0.0181787 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 10.9935 @ 95%CL (1 toyMC)
median expected limit: r < 10.9935 @ 95%CL (1 toyMC)
   68% expected band : 10.9935 < r < 10.9935
   95% expected band : 10.9935 < r < 10.9935
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1064286145
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 14.7771 +/- 0.0148113 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 14.7771 @ 95%CL (1 toyMC)
median expected limit: r < 14.7771 @ 95%CL (1 toyMC)
   68% expected band : 14.7771 < r < 14.7771
   95% expected band : 14.7771 < r < 14.7771
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1016359420.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1053925605.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1096222810.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1102698868.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1181588736.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1203431144.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1248029407.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-1250158591.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1318862248.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1364676056.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1395709644.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1539127163.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1547375724.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-155256735.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1574140.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1680887664.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1707563332.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-1732613759.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1747168207.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1812822487.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1840699661.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1842389248.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-1897439024.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-1905906017.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-1996254716.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-2025179628.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-2028480399.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-2030474322.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-2115575579.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-234694293.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-250775710.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-260219587.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-305825547.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-31975973.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-450135537.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-476665463.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-520297202.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-537575262.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-55012453.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-564979772.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-56748455.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-57145544.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-652069500.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-702012311.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-738898151.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-744652575.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-772771313.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.-805459354.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.1049534646.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.1064286145.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1066690420.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1072964335.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.108478000.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1107775815.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1110279332.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1127256421.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1272040294.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1339524311.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.1378257828.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1379464592.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1416436293.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1471200366.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1475978704.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1520920708.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.1558961413.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1584871465.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1588930097.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.161598757.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1743569351.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.17732593.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1792832.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.1859258234.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.1966238824.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1974451828.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.1990893249.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.2032051351.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.2084303011.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.2123408583.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.2138550930.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.2140115697.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.226866907.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.315967119.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.36337629.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.395242695.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.440396566.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.499685605.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.50881388.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.526402790.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.612544470.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.614869308.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.653661270.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.690727839.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.743075186.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.782499384.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.807870739.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.81621941.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.907361033.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.911950096.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.963983132.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.985303000.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1656500226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6973 +/- 0.0196026 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.6973 @ 95%CL (1 toyMC)
median expected limit: r < 11.6973 @ 95%CL (1 toyMC)
   68% expected band : 11.6973 < r < 11.6973
   95% expected band : 11.6973 < r < 11.6973
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -558062944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.5434 +/- 0.0107144 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 15.5434 @ 95%CL (1 toyMC)
median expected limit: r < 15.5434 @ 95%CL (1 toyMC)
   68% expected band : 15.5434 < r < 15.5434
   95% expected band : 15.5434 < r < 15.5434
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 638799128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7193 +/- 0.0166863 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.7193 @ 95%CL (1 toyMC)
median expected limit: r < 11.7193 @ 95%CL (1 toyMC)
   68% expected band : 11.7193 < r < 11.7193
   95% expected band : 11.7193 < r < 11.7193
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1789032551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6561 +/- 0.017301 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6561 @ 95%CL (1 toyMC)
median expected limit: r < 11.6561 @ 95%CL (1 toyMC)
   68% expected band : 11.6561 < r < 11.6561
   95% expected band : 11.6561 < r < 11.6561
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -400960221
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.8661 +/- 0.0105941 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 15.8661 @ 95%CL (1 toyMC)
median expected limit: r < 15.8661 @ 95%CL (1 toyMC)
   68% expected band : 15.8661 < r < 15.8661
   95% expected band : 15.8661 < r < 15.8661
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2093898
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7413 +/- 0.0181579 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.7413 @ 95%CL (1 toyMC)
median expected limit: r < 11.7413 @ 95%CL (1 toyMC)
   68% expected band : 11.7413 < r < 11.7413
   95% expected band : 11.7413 < r < 11.7413
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1299147545
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6826 +/- 0.0180123 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.6826 @ 95%CL (1 toyMC)
median expected limit: r < 11.6826 @ 95%CL (1 toyMC)
   68% expected band : 11.6826 < r < 11.6826
   95% expected band : 11.6826 < r < 11.6826
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -833079198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6689 +/- 0.0197348 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6689 @ 95%CL (1 toyMC)
median expected limit: r < 11.6689 @ 95%CL (1 toyMC)
   68% expected band : 11.6689 < r < 11.6689
   95% expected band : 11.6689 < r < 11.6689
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -323243416
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6695 +/- 0.0158724 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6695 @ 95%CL (1 toyMC)
median expected limit: r < 11.6695 @ 95%CL (1 toyMC)
   68% expected band : 11.6695 < r < 11.6695
   95% expected band : 11.6695 < r < 11.6695
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -146818762
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6958 +/- 0.0195569 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6958 @ 95%CL (1 toyMC)
median expected limit: r < 11.6958 @ 95%CL (1 toyMC)
   68% expected band : 11.6958 < r < 11.6958
   95% expected band : 11.6958 < r < 11.6958
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 134325920
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.7851 +/- 0.00879608 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 17.7851 @ 95%CL (1 toyMC)
median expected limit: r < 17.7851 @ 95%CL (1 toyMC)
   68% expected band : 17.7851 < r < 17.7851
   95% expected band : 17.7851 < r < 17.7851
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1040368656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6252 +/- 0.0211811 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6252 @ 95%CL (1 toyMC)
median expected limit: r < 11.6252 @ 95%CL (1 toyMC)
   68% expected band : 11.6252 < r < 11.6252
   95% expected band : 11.6252 < r < 11.6252
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 187045169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6603 +/- 0.0190206 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6603 @ 95%CL (1 toyMC)
median expected limit: r < 11.6603 @ 95%CL (1 toyMC)
   68% expected band : 11.6603 < r < 11.6603
   95% expected band : 11.6603 < r < 11.6603
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 324689107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.667 +/- 0.0161585 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.667 @ 95%CL (1 toyMC)
median expected limit: r < 11.667 @ 95%CL (1 toyMC)
   68% expected band : 11.667 < r < 11.667
   95% expected band : 11.667 < r < 11.667
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1775333175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.694 +/- 0.021104 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.694 @ 95%CL (1 toyMC)
median expected limit: r < 11.694 @ 95%CL (1 toyMC)
   68% expected band : 11.694 < r < 11.694
   95% expected band : 11.694 < r < 11.694
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2065084332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6665 +/- 0.016343 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6665 @ 95%CL (1 toyMC)
median expected limit: r < 11.6665 @ 95%CL (1 toyMC)
   68% expected band : 11.6665 < r < 11.6665
   95% expected band : 11.6665 < r < 11.6665
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1737671779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6532 +/- 0.0205042 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.6532 @ 95%CL (1 toyMC)
median expected limit: r < 11.6532 @ 95%CL (1 toyMC)
   68% expected band : 11.6532 < r < 11.6532
   95% expected band : 11.6532 < r < 11.6532
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1932283999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7176 +/- 0.0172985 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.7176 @ 95%CL (1 toyMC)
median expected limit: r < 11.7176 @ 95%CL (1 toyMC)
   68% expected band : 11.7176 < r < 11.7176
   95% expected band : 11.7176 < r < 11.7176
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 430975753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6945 +/- 0.0182806 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6945 @ 95%CL (1 toyMC)
median expected limit: r < 11.6945 @ 95%CL (1 toyMC)
   68% expected band : 11.6945 < r < 11.6945
   95% expected band : 11.6945 < r < 11.6945
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 429514731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6655 +/- 0.0152708 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6655 @ 95%CL (1 toyMC)
median expected limit: r < 11.6655 @ 95%CL (1 toyMC)
   68% expected band : 11.6655 < r < 11.6655
   95% expected band : 11.6655 < r < 11.6655
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 111961191
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6769 +/- 0.0175271 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.6769 @ 95%CL (1 toyMC)
median expected limit: r < 11.6769 @ 95%CL (1 toyMC)
   68% expected band : 11.6769 < r < 11.6769
   95% expected band : 11.6769 < r < 11.6769
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -280249238
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6075 +/- 0.0174954 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6075 @ 95%CL (1 toyMC)
median expected limit: r < 11.6075 @ 95%CL (1 toyMC)
   68% expected band : 11.6075 < r < 11.6075
   95% expected band : 11.6075 < r < 11.6075
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1099668350
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.648 +/- 0.0222577 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.648 @ 95%CL (1 toyMC)
median expected limit: r < 11.648 @ 95%CL (1 toyMC)
   68% expected band : 11.648 < r < 11.648
   95% expected band : 11.648 < r < 11.648
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1982296054
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6402 +/- 0.0196819 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6402 @ 95%CL (1 toyMC)
median expected limit: r < 11.6402 @ 95%CL (1 toyMC)
   68% expected band : 11.6402 < r < 11.6402
   95% expected band : 11.6402 < r < 11.6402
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 868258807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7168 +/- 0.0218285 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.7168 @ 95%CL (1 toyMC)
median expected limit: r < 11.7168 @ 95%CL (1 toyMC)
   68% expected band : 11.7168 < r < 11.7168
   95% expected band : 11.7168 < r < 11.7168
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 757128329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7 +/- 0.0213995 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.7 @ 95%CL (1 toyMC)
median expected limit: r < 11.7 @ 95%CL (1 toyMC)
   68% expected band : 11.7 < r < 11.7
   95% expected band : 11.7 < r < 11.7
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -410073509
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6319 +/- 0.0213258 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6319 @ 95%CL (1 toyMC)
median expected limit: r < 11.6319 @ 95%CL (1 toyMC)
   68% expected band : 11.6319 < r < 11.6319
   95% expected band : 11.6319 < r < 11.6319
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -935854727
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.6659 +/- 0.0138955 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 15.6659 @ 95%CL (1 toyMC)
median expected limit: r < 15.6659 @ 95%CL (1 toyMC)
   68% expected band : 15.6659 < r < 15.6659
   95% expected band : 15.6659 < r < 15.6659
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1089695154
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6365 +/- 0.0224768 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6365 @ 95%CL (1 toyMC)
median expected limit: r < 11.6365 @ 95%CL (1 toyMC)
   68% expected band : 11.6365 < r < 11.6365
   95% expected band : 11.6365 < r < 11.6365
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 421569575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6105 +/- 0.0210768 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6105 @ 95%CL (1 toyMC)
median expected limit: r < 11.6105 @ 95%CL (1 toyMC)
   68% expected band : 11.6105 < r < 11.6105
   95% expected band : 11.6105 < r < 11.6105
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 317005641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6993 +/- 0.0180998 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6993 @ 95%CL (1 toyMC)
median expected limit: r < 11.6993 @ 95%CL (1 toyMC)
   68% expected band : 11.6993 < r < 11.6993
   95% expected band : 11.6993 < r < 11.6993
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1973028831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.5996 +/- 0.0111982 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 15.5996 @ 95%CL (1 toyMC)
median expected limit: r < 15.5996 @ 95%CL (1 toyMC)
   68% expected band : 15.5996 < r < 15.5996
   95% expected band : 15.5996 < r < 15.5996
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -686685491
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6076 +/- 0.0202982 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.6076 @ 95%CL (1 toyMC)
median expected limit: r < 11.6076 @ 95%CL (1 toyMC)
   68% expected band : 11.6076 < r < 11.6076
   95% expected band : 11.6076 < r < 11.6076
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1351434970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.612 +/- 0.0173342 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.612 @ 95%CL (1 toyMC)
median expected limit: r < 11.612 @ 95%CL (1 toyMC)
   68% expected band : 11.612 < r < 11.612
   95% expected band : 11.612 < r < 11.612
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -603552845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6824 +/- 0.0169857 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6824 @ 95%CL (1 toyMC)
median expected limit: r < 11.6824 @ 95%CL (1 toyMC)
   68% expected band : 11.6824 < r < 11.6824
   95% expected band : 11.6824 < r < 11.6824
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 700535602
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6932 +/- 0.0198596 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6932 @ 95%CL (1 toyMC)
median expected limit: r < 11.6932 @ 95%CL (1 toyMC)
   68% expected band : 11.6932 < r < 11.6932
   95% expected band : 11.6932 < r < 11.6932
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -232561150
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.3885 +/- 0.00931734 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 15.3885 @ 95%CL (1 toyMC)
median expected limit: r < 15.3885 @ 95%CL (1 toyMC)
   68% expected band : 15.3885 < r < 15.3885
   95% expected band : 15.3885 < r < 15.3885
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -227048025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.383 +/- 0.0138878 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.383 @ 95%CL (1 toyMC)
median expected limit: r < 15.383 @ 95%CL (1 toyMC)
   68% expected band : 15.383 < r < 15.383
   95% expected band : 15.383 < r < 15.383
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1171684163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6395 +/- 0.0207089 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6395 @ 95%CL (1 toyMC)
median expected limit: r < 11.6395 @ 95%CL (1 toyMC)
   68% expected band : 11.6395 < r < 11.6395
   95% expected band : 11.6395 < r < 11.6395
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 962174592
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.8797 +/- 0.0109341 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.8797 @ 95%CL (1 toyMC)
median expected limit: r < 15.8797 @ 95%CL (1 toyMC)
   68% expected band : 15.8797 < r < 15.8797
   95% expected band : 15.8797 < r < 15.8797
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1389624128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.3647 +/- 0.0128089 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.3647 @ 95%CL (1 toyMC)
median expected limit: r < 15.3647 @ 95%CL (1 toyMC)
   68% expected band : 15.3647 < r < 15.3647
   95% expected band : 15.3647 < r < 15.3647
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 758402920
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6395 +/- 0.0186491 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6395 @ 95%CL (1 toyMC)
median expected limit: r < 11.6395 @ 95%CL (1 toyMC)
   68% expected band : 11.6395 < r < 11.6395
   95% expected band : 11.6395 < r < 11.6395
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1215050961
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6875 +/- 0.0178853 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6875 @ 95%CL (1 toyMC)
median expected limit: r < 11.6875 @ 95%CL (1 toyMC)
   68% expected band : 11.6875 < r < 11.6875
   95% expected band : 11.6875 < r < 11.6875
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1799055871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6212 +/- 0.0196964 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.6212 @ 95%CL (1 toyMC)
median expected limit: r < 11.6212 @ 95%CL (1 toyMC)
   68% expected band : 11.6212 < r < 11.6212
   95% expected band : 11.6212 < r < 11.6212
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 732441873
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6475 +/- 0.0208458 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.6475 @ 95%CL (1 toyMC)
median expected limit: r < 11.6475 @ 95%CL (1 toyMC)
   68% expected band : 11.6475 < r < 11.6475
   95% expected band : 11.6475 < r < 11.6475
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1433835828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6573 +/- 0.0200531 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6573 @ 95%CL (1 toyMC)
median expected limit: r < 11.6573 @ 95%CL (1 toyMC)
   68% expected band : 11.6573 < r < 11.6573
   95% expected band : 11.6573 < r < 11.6573
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1009133400
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6846 +/- 0.0197794 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6846 @ 95%CL (1 toyMC)
median expected limit: r < 11.6846 @ 95%CL (1 toyMC)
   68% expected band : 11.6846 < r < 11.6846
   95% expected band : 11.6846 < r < 11.6846
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 655011944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.6387 +/- 0.0120565 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.6387 @ 95%CL (1 toyMC)
median expected limit: r < 15.6387 @ 95%CL (1 toyMC)
   68% expected band : 15.6387 < r < 15.6387
   95% expected band : 15.6387 < r < 15.6387
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1952691975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7057 +/- 0.022922 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.7057 @ 95%CL (1 toyMC)
median expected limit: r < 11.7057 @ 95%CL (1 toyMC)
   68% expected band : 11.7057 < r < 11.7057
   95% expected band : 11.7057 < r < 11.7057
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1196085883
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7062 +/- 0.0203277 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.7062 @ 95%CL (1 toyMC)
median expected limit: r < 11.7062 @ 95%CL (1 toyMC)
   68% expected band : 11.7062 < r < 11.7062
   95% expected band : 11.7062 < r < 11.7062
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1529611129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6612 +/- 0.0184534 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6612 @ 95%CL (1 toyMC)
median expected limit: r < 11.6612 @ 95%CL (1 toyMC)
   68% expected band : 11.6612 < r < 11.6612
   95% expected band : 11.6612 < r < 11.6612
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1744219089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6912 +/- 0.0194294 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.6912 @ 95%CL (1 toyMC)
median expected limit: r < 11.6912 @ 95%CL (1 toyMC)
   68% expected band : 11.6912 < r < 11.6912
   95% expected band : 11.6912 < r < 11.6912
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 236711132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6764 +/- 0.0177574 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6764 @ 95%CL (1 toyMC)
median expected limit: r < 11.6764 @ 95%CL (1 toyMC)
   68% expected band : 11.6764 < r < 11.6764
   95% expected band : 11.6764 < r < 11.6764
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 467843465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.6278 +/- 0.0125427 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.6278 @ 95%CL (1 toyMC)
median expected limit: r < 15.6278 @ 95%CL (1 toyMC)
   68% expected band : 15.6278 < r < 15.6278
   95% expected band : 15.6278 < r < 15.6278
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1207593183
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6418 +/- 0.0189453 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.6418 @ 95%CL (1 toyMC)
median expected limit: r < 11.6418 @ 95%CL (1 toyMC)
   68% expected band : 11.6418 < r < 11.6418
   95% expected band : 11.6418 < r < 11.6418
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1441014858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6939 +/- 0.018576 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6939 @ 95%CL (1 toyMC)
median expected limit: r < 11.6939 @ 95%CL (1 toyMC)
   68% expected band : 11.6939 < r < 11.6939
   95% expected band : 11.6939 < r < 11.6939
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -99332559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.4253 +/- 0.0113052 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.4253 @ 95%CL (1 toyMC)
median expected limit: r < 15.4253 @ 95%CL (1 toyMC)
   68% expected band : 15.4253 < r < 15.4253
   95% expected band : 15.4253 < r < 15.4253
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1079423861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6404 +/- 0.0249039 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6404 @ 95%CL (1 toyMC)
median expected limit: r < 11.6404 @ 95%CL (1 toyMC)
   68% expected band : 11.6404 < r < 11.6404
   95% expected band : 11.6404 < r < 11.6404
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 474137095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.4677 +/- 0.0114384 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.4677 @ 95%CL (1 toyMC)
median expected limit: r < 15.4677 @ 95%CL (1 toyMC)
   68% expected band : 15.4677 < r < 15.4677
   95% expected band : 15.4677 < r < 15.4677
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1050649811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6619 +/- 0.0193404 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6619 @ 95%CL (1 toyMC)
median expected limit: r < 11.6619 @ 95%CL (1 toyMC)
   68% expected band : 11.6619 < r < 11.6619
   95% expected band : 11.6619 < r < 11.6619
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -588074904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.6612 +/- 0.0111234 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 15.6612 @ 95%CL (1 toyMC)
median expected limit: r < 15.6612 @ 95%CL (1 toyMC)
   68% expected band : 15.6612 < r < 15.6612
   95% expected band : 15.6612 < r < 15.6612
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 403682997
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6857 +/- 0.0187547 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.6857 @ 95%CL (1 toyMC)
median expected limit: r < 11.6857 @ 95%CL (1 toyMC)
   68% expected band : 11.6857 < r < 11.6857
   95% expected band : 11.6857 < r < 11.6857
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 656619814
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.4879 +/- 0.0116769 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 15.4879 @ 95%CL (1 toyMC)
median expected limit: r < 15.4879 @ 95%CL (1 toyMC)
   68% expected band : 15.4879 < r < 15.4879
   95% expected band : 15.4879 < r < 15.4879
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 350576988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6555 +/- 0.0192576 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.6555 @ 95%CL (1 toyMC)
median expected limit: r < 11.6555 @ 95%CL (1 toyMC)
   68% expected band : 11.6555 < r < 11.6555
   95% expected band : 11.6555 < r < 11.6555
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1846324966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6564 +/- 0.0160962 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6564 @ 95%CL (1 toyMC)
median expected limit: r < 11.6564 @ 95%CL (1 toyMC)
   68% expected band : 11.6564 < r < 11.6564
   95% expected band : 11.6564 < r < 11.6564
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1680007309
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6877 +/- 0.0172197 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6877 @ 95%CL (1 toyMC)
median expected limit: r < 11.6877 @ 95%CL (1 toyMC)
   68% expected band : 11.6877 < r < 11.6877
   95% expected band : 11.6877 < r < 11.6877
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -183379985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7003 +/- 0.0180035 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.7003 @ 95%CL (1 toyMC)
median expected limit: r < 11.7003 @ 95%CL (1 toyMC)
   68% expected band : 11.7003 < r < 11.7003
   95% expected band : 11.7003 < r < 11.7003
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2043210917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.9438 +/- 0.00607858 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 17.9438 @ 95%CL (1 toyMC)
median expected limit: r < 17.9438 @ 95%CL (1 toyMC)
   68% expected band : 17.9438 < r < 17.9438
   95% expected band : 17.9438 < r < 17.9438
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -578788109
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6595 +/- 0.0221599 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6595 @ 95%CL (1 toyMC)
median expected limit: r < 11.6595 @ 95%CL (1 toyMC)
   68% expected band : 11.6595 < r < 11.6595
   95% expected band : 11.6595 < r < 11.6595
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -559602960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6509 +/- 0.0184017 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.6509 @ 95%CL (1 toyMC)
median expected limit: r < 11.6509 @ 95%CL (1 toyMC)
   68% expected band : 11.6509 < r < 11.6509
   95% expected band : 11.6509 < r < 11.6509
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -173334897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.6529 +/- 0.0133169 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 15.6529 @ 95%CL (1 toyMC)
median expected limit: r < 15.6529 @ 95%CL (1 toyMC)
   68% expected band : 15.6529 < r < 15.6529
   95% expected band : 15.6529 < r < 15.6529
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1559728181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6637 +/- 0.0200136 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6637 @ 95%CL (1 toyMC)
median expected limit: r < 11.6637 @ 95%CL (1 toyMC)
   68% expected band : 11.6637 < r < 11.6637
   95% expected band : 11.6637 < r < 11.6637
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1921758609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6984 +/- 0.0190093 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6984 @ 95%CL (1 toyMC)
median expected limit: r < 11.6984 @ 95%CL (1 toyMC)
   68% expected band : 11.6984 < r < 11.6984
   95% expected band : 11.6984 < r < 11.6984
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1044050197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6764 +/- 0.0205414 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6764 @ 95%CL (1 toyMC)
median expected limit: r < 11.6764 @ 95%CL (1 toyMC)
   68% expected band : 11.6764 < r < 11.6764
   95% expected band : 11.6764 < r < 11.6764
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -827234122
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6142 +/- 0.0204112 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.6142 @ 95%CL (1 toyMC)
median expected limit: r < 11.6142 @ 95%CL (1 toyMC)
   68% expected band : 11.6142 < r < 11.6142
   95% expected band : 11.6142 < r < 11.6142
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2044435139
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7224 +/- 0.0196991 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.7224 @ 95%CL (1 toyMC)
median expected limit: r < 11.7224 @ 95%CL (1 toyMC)
   68% expected band : 11.7224 < r < 11.7224
   95% expected band : 11.7224 < r < 11.7224
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1275663953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7161 +/- 0.018495 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.7161 @ 95%CL (1 toyMC)
median expected limit: r < 11.7161 @ 95%CL (1 toyMC)
   68% expected band : 11.7161 < r < 11.7161
   95% expected band : 11.7161 < r < 11.7161
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2003887582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.3862 +/- 0.0114447 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.3862 @ 95%CL (1 toyMC)
median expected limit: r < 15.3862 @ 95%CL (1 toyMC)
   68% expected band : 15.3862 < r < 15.3862
   95% expected band : 15.3862 < r < 15.3862
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1150121028
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6602 +/- 0.0217056 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6602 @ 95%CL (1 toyMC)
median expected limit: r < 11.6602 @ 95%CL (1 toyMC)
   68% expected band : 11.6602 < r < 11.6602
   95% expected band : 11.6602 < r < 11.6602
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1226197594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6133 +/- 0.0199027 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.6133 @ 95%CL (1 toyMC)
median expected limit: r < 11.6133 @ 95%CL (1 toyMC)
   68% expected band : 11.6133 < r < 11.6133
   95% expected band : 11.6133 < r < 11.6133
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -967668024
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7179 +/- 0.0199295 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.7179 @ 95%CL (1 toyMC)
median expected limit: r < 11.7179 @ 95%CL (1 toyMC)
   68% expected band : 11.7179 < r < 11.7179
   95% expected band : 11.7179 < r < 11.7179
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -649255907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7245 +/- 0.0195934 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.7245 @ 95%CL (1 toyMC)
median expected limit: r < 11.7245 @ 95%CL (1 toyMC)
   68% expected band : 11.7245 < r < 11.7245
   95% expected band : 11.7245 < r < 11.7245
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1099433240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.9017 +/- 0.00563127 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 17.9017 @ 95%CL (1 toyMC)
median expected limit: r < 17.9017 @ 95%CL (1 toyMC)
   68% expected band : 17.9017 < r < 17.9017
   95% expected band : 17.9017 < r < 17.9017
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2051839782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6686 +/- 0.0210771 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6686 @ 95%CL (1 toyMC)
median expected limit: r < 11.6686 @ 95%CL (1 toyMC)
   68% expected band : 11.6686 < r < 11.6686
   95% expected band : 11.6686 < r < 11.6686
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1393583884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6738 +/- 0.0175664 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6738 @ 95%CL (1 toyMC)
median expected limit: r < 11.6738 @ 95%CL (1 toyMC)
   68% expected band : 11.6738 < r < 11.6738
   95% expected band : 11.6738 < r < 11.6738
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2049848918
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6962 +/- 0.0202706 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6962 @ 95%CL (1 toyMC)
median expected limit: r < 11.6962 @ 95%CL (1 toyMC)
   68% expected band : 11.6962 < r < 11.6962
   95% expected band : 11.6962 < r < 11.6962
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1821159730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6516 +/- 0.0160195 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6516 @ 95%CL (1 toyMC)
median expected limit: r < 11.6516 @ 95%CL (1 toyMC)
   68% expected band : 11.6516 < r < 11.6516
   95% expected band : 11.6516 < r < 11.6516
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 803426265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.612 +/- 0.0177499 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.612 @ 95%CL (1 toyMC)
median expected limit: r < 11.612 @ 95%CL (1 toyMC)
   68% expected band : 11.612 < r < 11.612
   95% expected band : 11.612 < r < 11.612
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1118201976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6754 +/- 0.0187566 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.6754 @ 95%CL (1 toyMC)
median expected limit: r < 11.6754 @ 95%CL (1 toyMC)
   68% expected band : 11.6754 < r < 11.6754
   95% expected band : 11.6754 < r < 11.6754
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -776353051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6232 +/- 0.0157899 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6232 @ 95%CL (1 toyMC)
median expected limit: r < 11.6232 @ 95%CL (1 toyMC)
   68% expected band : 11.6232 < r < 11.6232
   95% expected band : 11.6232 < r < 11.6232
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -635168674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6742 +/- 0.0153983 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6742 @ 95%CL (1 toyMC)
median expected limit: r < 11.6742 @ 95%CL (1 toyMC)
   68% expected band : 11.6742 < r < 11.6742
   95% expected band : 11.6742 < r < 11.6742
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -34195904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6587 +/- 0.018892 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6587 @ 95%CL (1 toyMC)
median expected limit: r < 11.6587 @ 95%CL (1 toyMC)
   68% expected band : 11.6587 < r < 11.6587
   95% expected band : 11.6587 < r < 11.6587
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1610007443
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7001 +/- 0.0189825 @ 95% CL (100 tries)
Done in 0.22 min (cpu), 0.22 min (real)
mean   expected limit: r < 11.7001 @ 95%CL (1 toyMC)
median expected limit: r < 11.7001 @ 95%CL (1 toyMC)
   68% expected band : 11.7001 < r < 11.7001
   95% expected band : 11.7001 < r < 11.7001
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 322539083
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.6059 +/- 0.0114155 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 15.6059 @ 95%CL (1 toyMC)
median expected limit: r < 15.6059 @ 95%CL (1 toyMC)
   68% expected band : 15.6059 < r < 15.6059
   95% expected band : 15.6059 < r < 15.6059
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -417370473
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.655 +/- 0.018258 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.655 @ 95%CL (1 toyMC)
median expected limit: r < 11.655 @ 95%CL (1 toyMC)
   68% expected band : 11.655 < r < 11.655
   95% expected band : 11.655 < r < 11.655
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 371460124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.7196 +/- 0.00696708 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 17.7196 @ 95%CL (1 toyMC)
median expected limit: r < 17.7196 @ 95%CL (1 toyMC)
   68% expected band : 17.7196 < r < 17.7196
   95% expected band : 17.7196 < r < 17.7196
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 181169907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7334 +/- 0.0211758 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.7334 @ 95%CL (1 toyMC)
median expected limit: r < 11.7334 @ 95%CL (1 toyMC)
   68% expected band : 11.7334 < r < 11.7334
   95% expected band : 11.7334 < r < 11.7334
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1010469687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6375 +/- 0.020142 @ 95% CL (100 tries)
Done in 0.24 min (cpu), 0.24 min (real)
mean   expected limit: r < 11.6375 @ 95%CL (1 toyMC)
median expected limit: r < 11.6375 @ 95%CL (1 toyMC)
   68% expected band : 11.6375 < r < 11.6375
   95% expected band : 11.6375 < r < 11.6375
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -472546880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.6722 +/- 0.020037 @ 95% CL (100 tries)
Done in 0.23 min (cpu), 0.23 min (real)
mean   expected limit: r < 11.6722 @ 95%CL (1 toyMC)
median expected limit: r < 11.6722 @ 95%CL (1 toyMC)
   68% expected band : 11.6722 < r < 11.6722
   95% expected band : 11.6722 < r < 11.6722
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 728723151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 17.7842 +/- 0.00663988 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 17.7842 @ 95%CL (1 toyMC)
median expected limit: r < 17.7842 @ 95%CL (1 toyMC)
   68% expected band : 17.7842 < r < 17.7842
   95% expected band : 17.7842 < r < 17.7842
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine8000.MarkovChainMC.mH8000.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH8000.-1009133400.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH8000.-1050649811.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH8000.-1150121028.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH8000.-1196085883.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH8000.-1299147545.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH8000.-1389624128.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH8000.-1433835828.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH8000.-146818762.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH8000.-1529611129.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH8000.-1559728181.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH8000.-1610007443.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH8000.-1656500226.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH8000.-1680007309.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH8000.-173334897.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH8000.-1744219089.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH8000.-1775333175.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH8000.-1821159730.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH8000.-183379985.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH8000.-1846324966.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH8000.-1921758609.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH8000.-1932283999.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH8000.-1982296054.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH8000.-2003887582.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH8000.-2043210917.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH8000.-2044435139.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH8000.-2051839782.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH8000.-2093898.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH8000.-227048025.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH8000.-232561150.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH8000.-280249238.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH8000.-323243416.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH8000.-34195904.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH8000.-400960221.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH8000.-410073509.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH8000.-417370473.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH8000.-472546880.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH8000.-558062944.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH8000.-559602960.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH8000.-578788109.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH8000.-588074904.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH8000.-603552845.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH8000.-635168674.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH8000.-649255907.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH8000.-686685491.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH8000.-776353051.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH8000.-827234122.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH8000.-833079198.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH8000.-935854727.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH8000.-967668024.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH8000.-99332559.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH8000.1010469687.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH8000.1040368656.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH8000.1044050197.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH8000.1079423861.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH8000.1089695154.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH8000.1099433240.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH8000.1099668350.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH8000.1118201976.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH8000.111961191.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH8000.1171684163.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH8000.1207593183.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH8000.1215050961.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH8000.1226197594.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH8000.1275663953.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH8000.134325920.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH8000.1351434970.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH8000.1393583884.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH8000.1441014858.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH8000.1737671779.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH8000.1789032551.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH8000.1799055871.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH8000.181169907.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH8000.187045169.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH8000.1952691975.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH8000.1973028831.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH8000.2049848918.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH8000.2065084332.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH8000.236711132.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH8000.317005641.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH8000.322539083.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH8000.324689107.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH8000.350576988.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH8000.371460124.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH8000.403682997.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH8000.421569575.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH8000.429514731.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH8000.430975753.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH8000.467843465.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH8000.474137095.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH8000.638799128.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH8000.655011944.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH8000.656619814.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH8000.700535602.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH8000.728723151.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH8000.732441873.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH8000.757128329.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH8000.758402920.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH8000.803426265.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH8000.868258807.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH8000.962174592.root
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/
hadd Target path: higgsCombine8000.MarkovChainMC.mH8000.root:/toys
