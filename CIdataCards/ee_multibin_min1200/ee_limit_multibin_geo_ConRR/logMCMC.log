 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -529561317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 20 +/- 0 @ 95% CL (2 tries)
Done in 12.77 min (cpu), 12.83 min (real)
mean   expected limit: r < 20 @ 95%CL (1 toyMC)
median expected limit: r < 20 @ 95%CL (1 toyMC)
   68% expected band : 20 < r < 20
   95% expected band : 20 < r < 20
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1794050207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.49821 +/- 1.61256 @ 95% CL (39 tries)
Done in 7.67 min (cpu), 7.71 min (real)
mean   expected limit: r < 8.49821 @ 95%CL (1 toyMC)
median expected limit: r < 8.49821 @ 95%CL (1 toyMC)
   68% expected band : 8.49821 < r < 8.49821
   95% expected band : 8.49821 < r < 8.49821
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 581811228
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.10152 +/- 2.59351 @ 95% CL (13 tries)
Done in 11.98 min (cpu), 12.05 min (real)
mean   expected limit: r < 5.10152 @ 95%CL (1 toyMC)
median expected limit: r < 5.10152 @ 95%CL (1 toyMC)
   68% expected band : 5.10152 < r < 5.10152
   95% expected band : 5.10152 < r < 5.10152
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1000115074
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.142898 +/- 0.0139678 @ 95% CL (18 tries)
Done in 11.03 min (cpu), 11.08 min (real)
mean   expected limit: r < 0.142898 @ 95%CL (1 toyMC)
median expected limit: r < 0.142898 @ 95%CL (1 toyMC)
   68% expected band : 0.142898 < r < 0.142898
   95% expected band : 0.142898 < r < 0.142898
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -896309988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231189 +/- 0.00240331 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 0.231189 @ 95%CL (1 toyMC)
median expected limit: r < 0.231189 @ 95%CL (1 toyMC)
   68% expected band : 0.231189 < r < 0.231189
   95% expected band : 0.231189 < r < 0.231189
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -753777611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.141022 +/- 0.00468161 @ 95% CL (57 tries)
Done in 5.80 min (cpu), 5.83 min (real)
mean   expected limit: r < 0.141022 @ 95%CL (1 toyMC)
median expected limit: r < 0.141022 @ 95%CL (1 toyMC)
   68% expected band : 0.141022 < r < 0.141022
   95% expected band : 0.141022 < r < 0.141022
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1447953148
Generate toy 1/1
Done in 13.29 min (cpu), 13.36 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -638630449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.157613 +/- 0.00495842 @ 95% CL (77 tries)
Done in 1.69 min (cpu), 1.70 min (real)
mean   expected limit: r < 0.157613 @ 95%CL (1 toyMC)
median expected limit: r < 0.157613 @ 95%CL (1 toyMC)
   68% expected band : 0.157613 < r < 0.157613
   95% expected band : 0.157613 < r < 0.157613
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1464564232
Generate toy 1/1
Done in 13.28 min (cpu), 13.35 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 685115339
Generate toy 1/1
Done in 13.32 min (cpu), 13.39 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1912930397
Generate toy 1/1
Done in 12.74 min (cpu), 12.81 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -41501981
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.159648 +/- 0.00218562 @ 95% CL (98 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 0.159648 @ 95%CL (1 toyMC)
median expected limit: r < 0.159648 @ 95%CL (1 toyMC)
   68% expected band : 0.159648 < r < 0.159648
   95% expected band : 0.159648 < r < 0.159648
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1122432091
Generate toy 1/1
Done in 11.45 min (cpu), 11.52 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1550444346
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.289261 +/- 0.00235039 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.289261 @ 95%CL (1 toyMC)
median expected limit: r < 0.289261 @ 95%CL (1 toyMC)
   68% expected band : 0.289261 < r < 0.289261
   95% expected band : 0.289261 < r < 0.289261
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1549457982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.152925 +/- 0.0034007 @ 95% CL (90 tries)
Done in 0.63 min (cpu), 0.63 min (real)
mean   expected limit: r < 0.152925 @ 95%CL (1 toyMC)
median expected limit: r < 0.152925 @ 95%CL (1 toyMC)
   68% expected band : 0.152925 < r < 0.152925
   95% expected band : 0.152925 < r < 0.152925
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 423243354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.160605 +/- 0.00290439 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.160605 @ 95%CL (1 toyMC)
median expected limit: r < 0.160605 @ 95%CL (1 toyMC)
   68% expected band : 0.160605 < r < 0.160605
   95% expected band : 0.160605 < r < 0.160605
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 794994446
Generate toy 1/1
Done in 13.35 min (cpu), 13.44 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 29699494
Generate toy 1/1
Done in 13.54 min (cpu), 13.64 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1123632518
Generate toy 1/1
Done in 13.59 min (cpu), 13.68 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 972828332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.6925 +/- 3.30747 @ 95% CL (10 tries)
Done in 12.19 min (cpu), 12.26 min (real)
mean   expected limit: r < 16.6925 @ 95%CL (1 toyMC)
median expected limit: r < 16.6925 @ 95%CL (1 toyMC)
   68% expected band : 16.6925 < r < 16.6925
   95% expected band : 16.6925 < r < 16.6925
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1965851240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216299 +/- 0.00228218 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.216299 @ 95%CL (1 toyMC)
median expected limit: r < 0.216299 @ 95%CL (1 toyMC)
   68% expected band : 0.216299 < r < 0.216299
   95% expected band : 0.216299 < r < 0.216299
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -658217294
Generate toy 1/1
Done in 13.57 min (cpu), 13.67 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 829743844
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.151281 +/- 0.00399174 @ 95% CL (92 tries)
Done in 0.69 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.151281 @ 95%CL (1 toyMC)
median expected limit: r < 0.151281 @ 95%CL (1 toyMC)
   68% expected band : 0.151281 < r < 0.151281
   95% expected band : 0.151281 < r < 0.151281
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1691176234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.34415 +/- 2.20706 @ 95% CL (9 tries)
Done in 12.20 min (cpu), 12.29 min (real)
mean   expected limit: r < 2.34415 @ 95%CL (1 toyMC)
median expected limit: r < 2.34415 @ 95%CL (1 toyMC)
   68% expected band : 2.34415 < r < 2.34415
   95% expected band : 2.34415 < r < 2.34415
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -483957233
Generate toy 1/1
Done in 13.60 min (cpu), 13.69 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1266007497
Generate toy 1/1
Done in 13.51 min (cpu), 13.60 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2081325376
Generate toy 1/1
Done in 13.46 min (cpu), 13.54 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 142475302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.64431 +/- 1.32607 @ 95% CL (58 tries)
Done in 4.12 min (cpu), 4.14 min (real)
mean   expected limit: r < 8.64431 @ 95%CL (1 toyMC)
median expected limit: r < 8.64431 @ 95%CL (1 toyMC)
   68% expected band : 8.64431 < r < 8.64431
   95% expected band : 8.64431 < r < 8.64431
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1157467026
Generate toy 1/1
Done in 13.34 min (cpu), 13.41 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -4297498
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.130649 +/- 0.0089494 @ 95% CL (29 tries)
Done in 9.09 min (cpu), 9.13 min (real)
mean   expected limit: r < 0.130649 @ 95%CL (1 toyMC)
median expected limit: r < 0.130649 @ 95%CL (1 toyMC)
   68% expected band : 0.130649 < r < 0.130649
   95% expected band : 0.130649 < r < 0.130649
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1370635277
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.154414 +/- 0.00436873 @ 95% CL (85 tries)
Done in 1.20 min (cpu), 1.21 min (real)
mean   expected limit: r < 0.154414 @ 95%CL (1 toyMC)
median expected limit: r < 0.154414 @ 95%CL (1 toyMC)
   68% expected band : 0.154414 < r < 0.154414
   95% expected band : 0.154414 < r < 0.154414
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 274949341
Generate toy 1/1
Done in 13.26 min (cpu), 13.31 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -976029774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.161196 +/- 0.00265837 @ 95% CL (98 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.161196 @ 95%CL (1 toyMC)
median expected limit: r < 0.161196 @ 95%CL (1 toyMC)
   68% expected band : 0.161196 < r < 0.161196
   95% expected band : 0.161196 < r < 0.161196
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 775986663
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2e+29 +/- 2e+29 @ 95% CL (5 tries)
Done in 12.82 min (cpu), 12.88 min (real)
mean   expected limit: r < 2e+29 @ 95%CL (1 toyMC)
median expected limit: r < 2e+29 @ 95%CL (1 toyMC)
   68% expected band : 2e+29 < r < 2e+29
   95% expected band : 2e+29 < r < 2e+29
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1986963131
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.139205 +/- 0.0102109 @ 95% CL (30 tries)
Done in 8.55 min (cpu), 8.58 min (real)
mean   expected limit: r < 0.139205 @ 95%CL (1 toyMC)
median expected limit: r < 0.139205 @ 95%CL (1 toyMC)
   68% expected band : 0.139205 < r < 0.139205
   95% expected band : 0.139205 < r < 0.139205
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1179168705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.157743 +/- 0.00336306 @ 95% CL (92 tries)
Done in 0.63 min (cpu), 0.63 min (real)
mean   expected limit: r < 0.157743 @ 95%CL (1 toyMC)
median expected limit: r < 0.157743 @ 95%CL (1 toyMC)
   68% expected band : 0.157743 < r < 0.157743
   95% expected band : 0.157743 < r < 0.157743
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1122371102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.159255 +/- 0.0022286 @ 95% CL (98 tries)
Done in 0.45 min (cpu), 0.46 min (real)
mean   expected limit: r < 0.159255 @ 95%CL (1 toyMC)
median expected limit: r < 0.159255 @ 95%CL (1 toyMC)
   68% expected band : 0.159255 < r < 0.159255
   95% expected band : 0.159255 < r < 0.159255
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1219512897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.334786 +/- 0.00189695 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.334786 @ 95%CL (1 toyMC)
median expected limit: r < 0.334786 @ 95%CL (1 toyMC)
   68% expected band : 0.334786 < r < 0.334786
   95% expected band : 0.334786 < r < 0.334786
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -847440364
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.184628 +/- 0.00220116 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.184628 @ 95%CL (1 toyMC)
median expected limit: r < 0.184628 @ 95%CL (1 toyMC)
   68% expected band : 0.184628 < r < 0.184628
   95% expected band : 0.184628 < r < 0.184628
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -93207072
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206059 +/- 0.002205 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.206059 @ 95%CL (1 toyMC)
median expected limit: r < 0.206059 @ 95%CL (1 toyMC)
   68% expected band : 0.206059 < r < 0.206059
   95% expected band : 0.206059 < r < 0.206059
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1238217995
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66667e+29 +/- 1.66667e+29 @ 95% CL (6 tries)
Done in 12.25 min (cpu), 12.29 min (real)
mean   expected limit: r < 1.66667e+29 @ 95%CL (1 toyMC)
median expected limit: r < 1.66667e+29 @ 95%CL (1 toyMC)
   68% expected band : 1.66667e+29 < r < 1.66667e+29
   95% expected band : 1.66667e+29 < r < 1.66667e+29
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1719235927
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.36077 +/- 2.3743 @ 95% CL (19 tries)
Done in 11.14 min (cpu), 11.17 min (real)
mean   expected limit: r < 6.36077 @ 95%CL (1 toyMC)
median expected limit: r < 6.36077 @ 95%CL (1 toyMC)
   68% expected band : 6.36077 < r < 6.36077
   95% expected band : 6.36077 < r < 6.36077
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1505611555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.167791 +/- 0.00253238 @ 95% CL (95 tries)
Done in 0.64 min (cpu), 0.64 min (real)
mean   expected limit: r < 0.167791 @ 95%CL (1 toyMC)
median expected limit: r < 0.167791 @ 95%CL (1 toyMC)
   68% expected band : 0.167791 < r < 0.167791
   95% expected band : 0.167791 < r < 0.167791
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1813173687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.150277 +/- 0.00606667 @ 95% CL (60 tries)
Done in 4.53 min (cpu), 4.55 min (real)
mean   expected limit: r < 0.150277 @ 95%CL (1 toyMC)
median expected limit: r < 0.150277 @ 95%CL (1 toyMC)
   68% expected band : 0.150277 < r < 0.150277
   95% expected band : 0.150277 < r < 0.150277
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1533931724
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.74276 +/- 4.19233 @ 95% CL (6 tries)
Done in 12.51 min (cpu), 12.56 min (real)
mean   expected limit: r < 6.74276 @ 95%CL (1 toyMC)
median expected limit: r < 6.74276 @ 95%CL (1 toyMC)
   68% expected band : 6.74276 < r < 6.74276
   95% expected band : 6.74276 < r < 6.74276
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -163934470
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0714 +/- 4.44023 @ 95% CL (6 tries)
Done in 12.39 min (cpu), 12.44 min (real)
mean   expected limit: r < 10.0714 @ 95%CL (1 toyMC)
median expected limit: r < 10.0714 @ 95%CL (1 toyMC)
   68% expected band : 10.0714 < r < 10.0714
   95% expected band : 10.0714 < r < 10.0714
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 622588200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0505 +/- 5.74442 @ 95% CL (4 tries)
Done in 12.77 min (cpu), 12.82 min (real)
mean   expected limit: r < 10.0505 @ 95%CL (1 toyMC)
median expected limit: r < 10.0505 @ 95%CL (1 toyMC)
   68% expected band : 10.0505 < r < 10.0505
   95% expected band : 10.0505 < r < 10.0505
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -131014208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.199097 +/- 0.00284364 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.199097 @ 95%CL (1 toyMC)
median expected limit: r < 0.199097 @ 95%CL (1 toyMC)
   68% expected band : 0.199097 < r < 0.199097
   95% expected band : 0.199097 < r < 0.199097
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1055501655
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.148811 +/- 0.00437278 @ 95% CL (70 tries)
Done in 2.64 min (cpu), 2.65 min (real)
mean   expected limit: r < 0.148811 @ 95%CL (1 toyMC)
median expected limit: r < 0.148811 @ 95%CL (1 toyMC)
   68% expected band : 0.148811 < r < 0.148811
   95% expected band : 0.148811 < r < 0.148811
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -170362103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206024 +/- 0.00264988 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 0.206024 @ 95%CL (1 toyMC)
median expected limit: r < 0.206024 @ 95%CL (1 toyMC)
   68% expected band : 0.206024 < r < 0.206024
   95% expected band : 0.206024 < r < 0.206024
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -876448389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.10692 +/- 1.15943 @ 95% CL (58 tries)
Done in 4.66 min (cpu), 4.67 min (real)
mean   expected limit: r < 5.10692 @ 95%CL (1 toyMC)
median expected limit: r < 5.10692 @ 95%CL (1 toyMC)
   68% expected band : 5.10692 < r < 5.10692
   95% expected band : 5.10692 < r < 5.10692
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -355198288
Generate toy 1/1
Done in 13.16 min (cpu), 13.21 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 838602407
Generate toy 1/1
Done in 13.22 min (cpu), 13.26 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1811275489
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.75728 +/- 2.50266 @ 95% CL (15 tries)
Done in 11.34 min (cpu), 11.39 min (real)
mean   expected limit: r < 6.75728 @ 95%CL (1 toyMC)
median expected limit: r < 6.75728 @ 95%CL (1 toyMC)
   68% expected band : 6.75728 < r < 6.75728
   95% expected band : 6.75728 < r < 6.75728
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -906332120
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28195 +/- 0.00182385 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 0.28195 @ 95%CL (1 toyMC)
median expected limit: r < 0.28195 @ 95%CL (1 toyMC)
   68% expected band : 0.28195 < r < 0.28195
   95% expected band : 0.28195 < r < 0.28195
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1236764588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.148813 +/- 0.0049986 @ 95% CL (75 tries)
Done in 2.24 min (cpu), 2.25 min (real)
mean   expected limit: r < 0.148813 @ 95%CL (1 toyMC)
median expected limit: r < 0.148813 @ 95%CL (1 toyMC)
   68% expected band : 0.148813 < r < 0.148813
   95% expected band : 0.148813 < r < 0.148813
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -142477092
Generate toy 1/1
Done in 13.25 min (cpu), 13.31 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2065593088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.11791 +/- 0.015521 @ 95% CL (2 tries)
Done in 12.86 min (cpu), 12.92 min (real)
mean   expected limit: r < 0.11791 @ 95%CL (1 toyMC)
median expected limit: r < 0.11791 @ 95%CL (1 toyMC)
   68% expected band : 0.11791 < r < 0.11791
   95% expected band : 0.11791 < r < 0.11791
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -861259343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.150129 +/- 0.00520511 @ 95% CL (75 tries)
Done in 2.30 min (cpu), 2.31 min (real)
mean   expected limit: r < 0.150129 @ 95%CL (1 toyMC)
median expected limit: r < 0.150129 @ 95%CL (1 toyMC)
   68% expected band : 0.150129 < r < 0.150129
   95% expected band : 0.150129 < r < 0.150129
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 529455097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.241424 +/- 0.00243491 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.241424 @ 95%CL (1 toyMC)
median expected limit: r < 0.241424 @ 95%CL (1 toyMC)
   68% expected band : 0.241424 < r < 0.241424
   95% expected band : 0.241424 < r < 0.241424
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1704762627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 20 @ 95% CL
Done in 13.12 min (cpu), 13.17 min (real)
mean   expected limit: r < 20 @ 95%CL (1 toyMC)
median expected limit: r < 20 @ 95%CL (1 toyMC)
   68% expected band : 20 < r < 20
   95% expected band : 20 < r < 20
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1183486623
Generate toy 1/1
Done in 11.83 min (cpu), 11.87 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 924321568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.14208 +/- 0.00905498 @ 95% CL (45 tries)
Done in 7.15 min (cpu), 7.17 min (real)
mean   expected limit: r < 0.14208 @ 95%CL (1 toyMC)
median expected limit: r < 0.14208 @ 95%CL (1 toyMC)
   68% expected band : 0.14208 < r < 0.14208
   95% expected band : 0.14208 < r < 0.14208
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 682325898
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.135318 +/- 0.00392127 @ 95% CL (66 tries)
Done in 3.24 min (cpu), 3.25 min (real)
mean   expected limit: r < 0.135318 @ 95%CL (1 toyMC)
median expected limit: r < 0.135318 @ 95%CL (1 toyMC)
   68% expected band : 0.135318 < r < 0.135318
   95% expected band : 0.135318 < r < 0.135318
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1286896763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.179882 +/- 0.00237316 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.179882 @ 95%CL (1 toyMC)
median expected limit: r < 0.179882 @ 95%CL (1 toyMC)
   68% expected band : 0.179882 < r < 0.179882
   95% expected band : 0.179882 < r < 0.179882
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 628217230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.36832 +/- 2.06105 @ 95% CL (19 tries)
Done in 10.81 min (cpu), 10.85 min (real)
mean   expected limit: r < 5.36832 @ 95%CL (1 toyMC)
median expected limit: r < 5.36832 @ 95%CL (1 toyMC)
   68% expected band : 5.36832 < r < 5.36832
   95% expected band : 5.36832 < r < 5.36832
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1247588177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.24766 +/- 0.00188274 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 0.24766 @ 95%CL (1 toyMC)
median expected limit: r < 0.24766 @ 95%CL (1 toyMC)
   68% expected band : 0.24766 < r < 0.24766
   95% expected band : 0.24766 < r < 0.24766
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -215112538
Generate toy 1/1
Done in 13.30 min (cpu), 13.34 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 319921324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.36902 +/- 2.26402 @ 95% CL (15 tries)
Done in 11.02 min (cpu), 11.05 min (real)
mean   expected limit: r < 4.36902 @ 95%CL (1 toyMC)
median expected limit: r < 4.36902 @ 95%CL (1 toyMC)
   68% expected band : 4.36902 < r < 4.36902
   95% expected band : 4.36902 < r < 4.36902
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2127016600
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.1606 +/- 0.00360524 @ 95% CL (93 tries)
Done in 0.55 min (cpu), 0.56 min (real)
mean   expected limit: r < 0.1606 @ 95%CL (1 toyMC)
median expected limit: r < 0.1606 @ 95%CL (1 toyMC)
   68% expected band : 0.1606 < r < 0.1606
   95% expected band : 0.1606 < r < 0.1606
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1203881050
Generate toy 1/1
Done in 13.18 min (cpu), 13.23 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1327278420
Generate toy 1/1
Done in 13.18 min (cpu), 13.22 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 800493613
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.138346 +/- 0.00676939 @ 95% CL (66 tries)
Done in 3.42 min (cpu), 3.43 min (real)
mean   expected limit: r < 0.138346 @ 95%CL (1 toyMC)
median expected limit: r < 0.138346 @ 95%CL (1 toyMC)
   68% expected band : 0.138346 < r < 0.138346
   95% expected band : 0.138346 < r < 0.138346
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1701398409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.164648 +/- 0.00189952 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 0.164648 @ 95%CL (1 toyMC)
median expected limit: r < 0.164648 @ 95%CL (1 toyMC)
   68% expected band : 0.164648 < r < 0.164648
   95% expected band : 0.164648 < r < 0.164648
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 801111680
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.165609 +/- 0.00245376 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.165609 @ 95%CL (1 toyMC)
median expected limit: r < 0.165609 @ 95%CL (1 toyMC)
   68% expected band : 0.165609 < r < 0.165609
   95% expected band : 0.165609 < r < 0.165609
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1891195673
Generate toy 1/1
Done in 13.11 min (cpu), 13.14 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -655758013
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.196108 +/- 0.00240447 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.196108 @ 95%CL (1 toyMC)
median expected limit: r < 0.196108 @ 95%CL (1 toyMC)
   68% expected band : 0.196108 < r < 0.196108
   95% expected band : 0.196108 < r < 0.196108
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1359251084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.67056 +/- 1.82149 @ 95% CL (30 tries)
Done in 8.50 min (cpu), 8.52 min (real)
mean   expected limit: r < 7.67056 @ 95%CL (1 toyMC)
median expected limit: r < 7.67056 @ 95%CL (1 toyMC)
   68% expected band : 7.67056 < r < 7.67056
   95% expected band : 7.67056 < r < 7.67056
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1431973043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.153408 +/- 0.00384166 @ 95% CL (88 tries)
Done in 0.94 min (cpu), 0.95 min (real)
mean   expected limit: r < 0.153408 @ 95%CL (1 toyMC)
median expected limit: r < 0.153408 @ 95%CL (1 toyMC)
   68% expected band : 0.153408 < r < 0.153408
   95% expected band : 0.153408 < r < 0.153408
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -547517006
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200583 +/- 0.00202553 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.200583 @ 95%CL (1 toyMC)
median expected limit: r < 0.200583 @ 95%CL (1 toyMC)
   68% expected band : 0.200583 < r < 0.200583
   95% expected band : 0.200583 < r < 0.200583
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 860965748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.159735 +/- 0.00576928 @ 95% CL (80 tries)
Done in 1.61 min (cpu), 1.61 min (real)
mean   expected limit: r < 0.159735 @ 95%CL (1 toyMC)
median expected limit: r < 0.159735 @ 95%CL (1 toyMC)
   68% expected band : 0.159735 < r < 0.159735
   95% expected band : 0.159735 < r < 0.159735
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -918925618
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.157814 +/- 0.00310871 @ 95% CL (98 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 0.157814 @ 95%CL (1 toyMC)
median expected limit: r < 0.157814 @ 95%CL (1 toyMC)
   68% expected band : 0.157814 < r < 0.157814
   95% expected band : 0.157814 < r < 0.157814
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1806518931
Generate toy 1/1
Done in 13.09 min (cpu), 13.12 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 72018141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20679 +/- 0.00250616 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 0.20679 @ 95%CL (1 toyMC)
median expected limit: r < 0.20679 @ 95%CL (1 toyMC)
   68% expected band : 0.20679 < r < 0.20679
   95% expected band : 0.20679 < r < 0.20679
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -270260999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.274842 +/- 0.00206439 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 0.274842 @ 95%CL (1 toyMC)
median expected limit: r < 0.274842 @ 95%CL (1 toyMC)
   68% expected band : 0.274842 < r < 0.274842
   95% expected band : 0.274842 < r < 0.274842
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -694127572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.157447 +/- 0.00300723 @ 95% CL (93 tries)
Done in 0.58 min (cpu), 0.58 min (real)
mean   expected limit: r < 0.157447 @ 95%CL (1 toyMC)
median expected limit: r < 0.157447 @ 95%CL (1 toyMC)
   68% expected band : 0.157447 < r < 0.157447
   95% expected band : 0.157447 < r < 0.157447
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1845706338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.176632 +/- 0.00192856 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.176632 @ 95%CL (1 toyMC)
median expected limit: r < 0.176632 @ 95%CL (1 toyMC)
   68% expected band : 0.176632 < r < 0.176632
   95% expected band : 0.176632 < r < 0.176632
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 223985927
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.0711872 @ 95% CL
Done in 13.01 min (cpu), 13.04 min (real)
mean   expected limit: r < 0.0711872 @ 95%CL (1 toyMC)
median expected limit: r < 0.0711872 @ 95%CL (1 toyMC)
   68% expected band : 0.0711872 < r < 0.0711872
   95% expected band : 0.0711872 < r < 0.0711872
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -382280566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213024 +/- 0.00205638 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 0.213024 @ 95%CL (1 toyMC)
median expected limit: r < 0.213024 @ 95%CL (1 toyMC)
   68% expected band : 0.213024 < r < 0.213024
   95% expected band : 0.213024 < r < 0.213024
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 313917252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.80498 +/- 1.72778 @ 95% CL (31 tries)
Done in 9.09 min (cpu), 9.11 min (real)
mean   expected limit: r < 5.80498 @ 95%CL (1 toyMC)
median expected limit: r < 5.80498 @ 95%CL (1 toyMC)
   68% expected band : 5.80498 < r < 5.80498
   95% expected band : 5.80498 < r < 5.80498
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1489319394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.152497 +/- 0.00474895 @ 95% CL (76 tries)
Done in 1.86 min (cpu), 1.87 min (real)
mean   expected limit: r < 0.152497 @ 95%CL (1 toyMC)
median expected limit: r < 0.152497 @ 95%CL (1 toyMC)
   68% expected band : 0.152497 < r < 0.152497
   95% expected band : 0.152497 < r < 0.152497
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1741706922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.149792 +/- 0.00457388 @ 95% CL (72 tries)
Done in 2.51 min (cpu), 2.52 min (real)
mean   expected limit: r < 0.149792 @ 95%CL (1 toyMC)
median expected limit: r < 0.149792 @ 95%CL (1 toyMC)
   68% expected band : 0.149792 < r < 0.149792
   95% expected band : 0.149792 < r < 0.149792
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -958548913
Generate toy 1/1
Done in 13.23 min (cpu), 13.26 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 96138016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.6067 +/- 2.90587 @ 95% CL (12 tries)
Done in 11.30 min (cpu), 11.33 min (real)
mean   expected limit: r < 15.6067 @ 95%CL (1 toyMC)
median expected limit: r < 15.6067 @ 95%CL (1 toyMC)
   68% expected band : 15.6067 < r < 15.6067
   95% expected band : 15.6067 < r < 15.6067
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1939583409
Generate toy 1/1
Done in 13.22 min (cpu), 13.26 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1941933867
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.254545 +/- 0.00189766 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.254545 @ 95%CL (1 toyMC)
median expected limit: r < 0.254545 @ 95%CL (1 toyMC)
   68% expected band : 0.254545 < r < 0.254545
   95% expected band : 0.254545 < r < 0.254545
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 930814428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.152766 +/- 0.00517683 @ 95% CL (83 tries)
Done in 1.23 min (cpu), 1.23 min (real)
mean   expected limit: r < 0.152766 @ 95%CL (1 toyMC)
median expected limit: r < 0.152766 @ 95%CL (1 toyMC)
   68% expected band : 0.152766 < r < 0.152766
   95% expected band : 0.152766 < r < 0.152766
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 303642198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.198599 +/- 0.00233853 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.198599 @ 95%CL (1 toyMC)
median expected limit: r < 0.198599 @ 95%CL (1 toyMC)
   68% expected band : 0.198599 < r < 0.198599
   95% expected band : 0.198599 < r < 0.198599
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -436883306
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.148836 +/- 0.00311284 @ 95% CL (95 tries)
Done in 0.54 min (cpu), 0.55 min (real)
mean   expected limit: r < 0.148836 @ 95%CL (1 toyMC)
median expected limit: r < 0.148836 @ 95%CL (1 toyMC)
   68% expected band : 0.148836 < r < 0.148836
   95% expected band : 0.148836 < r < 0.148836
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1706970728
Generate toy 1/1
Done in 13.16 min (cpu), 13.20 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine16.MarkovChainMC.mH16.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH16.-1000115074.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH16.-1122432091.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH16.-1123632518.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH16.-1157467026.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH16.-1183486623.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH16.-1219512897.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH16.-1236764588.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH16.-1238217995.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH16.-1247588177.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH16.-131014208.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH16.-1327278420.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH16.-1359251084.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH16.-1370635277.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH16.-142477092.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH16.-1431973043.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH16.-163934470.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH16.-1691176234.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH16.-170362103.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH16.-1741706922.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH16.-1794050207.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH16.-1813173687.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH16.-1845706338.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH16.-1965851240.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH16.-2065593088.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH16.-2081325376.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH16.-2127016600.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH16.-215112538.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH16.-270260999.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH16.-355198288.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH16.-382280566.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH16.-41501981.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH16.-4297498.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH16.-436883306.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH16.-483957233.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH16.-529561317.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH16.-547517006.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH16.-638630449.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH16.-655758013.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH16.-658217294.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH16.-694127572.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH16.-753777611.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH16.-847440364.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH16.-861259343.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH16.-876448389.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH16.-896309988.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH16.-906332120.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH16.-918925618.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH16.-93207072.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH16.-958548913.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH16.-976029774.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH16.1055501655.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH16.1122371102.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH16.1179168705.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH16.1203881050.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH16.1266007497.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH16.1286896763.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH16.142475302.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH16.1447953148.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH16.1464564232.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH16.1489319394.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH16.1505611555.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH16.1533931724.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH16.1549457982.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH16.1550444346.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH16.1701398409.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH16.1704762627.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH16.1706970728.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH16.1719235927.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH16.1806518931.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH16.1811275489.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH16.1891195673.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH16.1912930397.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH16.1939583409.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH16.1941933867.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH16.1986963131.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH16.223985927.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH16.274949341.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH16.29699494.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH16.303642198.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH16.313917252.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH16.319921324.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH16.423243354.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH16.529455097.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH16.581811228.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH16.622588200.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH16.628217230.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH16.682325898.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH16.685115339.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH16.72018141.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH16.775986663.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH16.794994446.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH16.800493613.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH16.801111680.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH16.829743844.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH16.838602407.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH16.860965748.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH16.924321568.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH16.930814428.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH16.96138016.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH16.972828332.root
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 828725241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361955 +/- 0.00241994 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.361955 @ 95%CL (1 toyMC)
median expected limit: r < 0.361955 @ 95%CL (1 toyMC)
   68% expected band : 0.361955 < r < 0.361955
   95% expected band : 0.361955 < r < 0.361955
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -30925933
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.473675 +/- 0.00257032 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.473675 @ 95%CL (1 toyMC)
median expected limit: r < 0.473675 @ 95%CL (1 toyMC)
   68% expected band : 0.473675 < r < 0.473675
   95% expected band : 0.473675 < r < 0.473675
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 114231386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309279 +/- 0.00272431 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.309279 @ 95%CL (1 toyMC)
median expected limit: r < 0.309279 @ 95%CL (1 toyMC)
   68% expected band : 0.309279 < r < 0.309279
   95% expected band : 0.309279 < r < 0.309279
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -550842441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.461399 +/- 0.00188872 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.461399 @ 95%CL (1 toyMC)
median expected limit: r < 0.461399 @ 95%CL (1 toyMC)
   68% expected band : 0.461399 < r < 0.461399
   95% expected band : 0.461399 < r < 0.461399
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1260809206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393137 +/- 0.00310776 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.393137 @ 95%CL (1 toyMC)
median expected limit: r < 0.393137 @ 95%CL (1 toyMC)
   68% expected band : 0.393137 < r < 0.393137
   95% expected band : 0.393137 < r < 0.393137
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 400475175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.733077 +/- 0.00219252 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.733077 @ 95%CL (1 toyMC)
median expected limit: r < 0.733077 @ 95%CL (1 toyMC)
   68% expected band : 0.733077 < r < 0.733077
   95% expected band : 0.733077 < r < 0.733077
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2055905759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.416584 +/- 0.0024028 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.416584 @ 95%CL (1 toyMC)
median expected limit: r < 0.416584 @ 95%CL (1 toyMC)
   68% expected band : 0.416584 < r < 0.416584
   95% expected band : 0.416584 < r < 0.416584
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2002367380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.460791 +/- 0.00264025 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.460791 @ 95%CL (1 toyMC)
median expected limit: r < 0.460791 @ 95%CL (1 toyMC)
   68% expected band : 0.460791 < r < 0.460791
   95% expected band : 0.460791 < r < 0.460791
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 765971765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388161 +/- 0.00276744 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.388161 @ 95%CL (1 toyMC)
median expected limit: r < 0.388161 @ 95%CL (1 toyMC)
   68% expected band : 0.388161 < r < 0.388161
   95% expected band : 0.388161 < r < 0.388161
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -733135634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29638 +/- 0.00271276 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.29638 @ 95%CL (1 toyMC)
median expected limit: r < 0.29638 @ 95%CL (1 toyMC)
   68% expected band : 0.29638 < r < 0.29638
   95% expected band : 0.29638 < r < 0.29638
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -754356527
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.706881 +/- 0.00284291 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.706881 @ 95%CL (1 toyMC)
median expected limit: r < 0.706881 @ 95%CL (1 toyMC)
   68% expected band : 0.706881 < r < 0.706881
   95% expected band : 0.706881 < r < 0.706881
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 782454172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.493757 +/- 0.00305727 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.493757 @ 95%CL (1 toyMC)
median expected limit: r < 0.493757 @ 95%CL (1 toyMC)
   68% expected band : 0.493757 < r < 0.493757
   95% expected band : 0.493757 < r < 0.493757
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1182784220
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.358621 +/- 0.00264907 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.358621 @ 95%CL (1 toyMC)
median expected limit: r < 0.358621 @ 95%CL (1 toyMC)
   68% expected band : 0.358621 < r < 0.358621
   95% expected band : 0.358621 < r < 0.358621
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1232954537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.524313 +/- 0.00204578 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.524313 @ 95%CL (1 toyMC)
median expected limit: r < 0.524313 @ 95%CL (1 toyMC)
   68% expected band : 0.524313 < r < 0.524313
   95% expected band : 0.524313 < r < 0.524313
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1718285379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.265359 +/- 0.0024485 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.265359 @ 95%CL (1 toyMC)
median expected limit: r < 0.265359 @ 95%CL (1 toyMC)
   68% expected band : 0.265359 < r < 0.265359
   95% expected band : 0.265359 < r < 0.265359
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2109837157
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.590299 +/- 0.00248108 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.590299 @ 95%CL (1 toyMC)
median expected limit: r < 0.590299 @ 95%CL (1 toyMC)
   68% expected band : 0.590299 < r < 0.590299
   95% expected band : 0.590299 < r < 0.590299
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1653533287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.481377 +/- 0.00269398 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.481377 @ 95%CL (1 toyMC)
median expected limit: r < 0.481377 @ 95%CL (1 toyMC)
   68% expected band : 0.481377 < r < 0.481377
   95% expected band : 0.481377 < r < 0.481377
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -88434404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.291566 +/- 0.00259142 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.291566 @ 95%CL (1 toyMC)
median expected limit: r < 0.291566 @ 95%CL (1 toyMC)
   68% expected band : 0.291566 < r < 0.291566
   95% expected band : 0.291566 < r < 0.291566
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1502087025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.401617 +/- 0.00316575 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.401617 @ 95%CL (1 toyMC)
median expected limit: r < 0.401617 @ 95%CL (1 toyMC)
   68% expected band : 0.401617 < r < 0.401617
   95% expected band : 0.401617 < r < 0.401617
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -423487720
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.581131 +/- 0.00264632 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.581131 @ 95%CL (1 toyMC)
median expected limit: r < 0.581131 @ 95%CL (1 toyMC)
   68% expected band : 0.581131 < r < 0.581131
   95% expected band : 0.581131 < r < 0.581131
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 415816081
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.553437 +/- 0.002333 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.553437 @ 95%CL (1 toyMC)
median expected limit: r < 0.553437 @ 95%CL (1 toyMC)
   68% expected band : 0.553437 < r < 0.553437
   95% expected band : 0.553437 < r < 0.553437
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1872407253
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.846544 +/- 0.00267785 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.846544 @ 95%CL (1 toyMC)
median expected limit: r < 0.846544 @ 95%CL (1 toyMC)
   68% expected band : 0.846544 < r < 0.846544
   95% expected band : 0.846544 < r < 0.846544
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1296468575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.351283 +/- 0.00260872 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.351283 @ 95%CL (1 toyMC)
median expected limit: r < 0.351283 @ 95%CL (1 toyMC)
   68% expected band : 0.351283 < r < 0.351283
   95% expected band : 0.351283 < r < 0.351283
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 28557044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.554103 +/- 0.00244399 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.554103 @ 95%CL (1 toyMC)
median expected limit: r < 0.554103 @ 95%CL (1 toyMC)
   68% expected band : 0.554103 < r < 0.554103
   95% expected band : 0.554103 < r < 0.554103
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1731884974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.528373 +/- 0.00288841 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.528373 @ 95%CL (1 toyMC)
median expected limit: r < 0.528373 @ 95%CL (1 toyMC)
   68% expected band : 0.528373 < r < 0.528373
   95% expected band : 0.528373 < r < 0.528373
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2111926680
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.379397 +/- 0.00234659 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.379397 @ 95%CL (1 toyMC)
median expected limit: r < 0.379397 @ 95%CL (1 toyMC)
   68% expected band : 0.379397 < r < 0.379397
   95% expected band : 0.379397 < r < 0.379397
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -938058558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.38794 +/- 0.00260312 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.38794 @ 95%CL (1 toyMC)
median expected limit: r < 0.38794 @ 95%CL (1 toyMC)
   68% expected band : 0.38794 < r < 0.38794
   95% expected band : 0.38794 < r < 0.38794
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1975719208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.582477 +/- 0.00293274 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.582477 @ 95%CL (1 toyMC)
median expected limit: r < 0.582477 @ 95%CL (1 toyMC)
   68% expected band : 0.582477 < r < 0.582477
   95% expected band : 0.582477 < r < 0.582477
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -825886452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.550596 +/- 0.00284981 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.550596 @ 95%CL (1 toyMC)
median expected limit: r < 0.550596 @ 95%CL (1 toyMC)
   68% expected band : 0.550596 < r < 0.550596
   95% expected band : 0.550596 < r < 0.550596
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -560132512
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.526312 +/- 0.00206576 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.526312 @ 95%CL (1 toyMC)
median expected limit: r < 0.526312 @ 95%CL (1 toyMC)
   68% expected band : 0.526312 < r < 0.526312
   95% expected band : 0.526312 < r < 0.526312
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1267427528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.799775 +/- 0.00284375 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.799775 @ 95%CL (1 toyMC)
median expected limit: r < 0.799775 @ 95%CL (1 toyMC)
   68% expected band : 0.799775 < r < 0.799775
   95% expected band : 0.799775 < r < 0.799775
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1388521403
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.394601 +/- 0.00275488 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.394601 @ 95%CL (1 toyMC)
median expected limit: r < 0.394601 @ 95%CL (1 toyMC)
   68% expected band : 0.394601 < r < 0.394601
   95% expected band : 0.394601 < r < 0.394601
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1069589328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.362681 +/- 0.00290622 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.362681 @ 95%CL (1 toyMC)
median expected limit: r < 0.362681 @ 95%CL (1 toyMC)
   68% expected band : 0.362681 < r < 0.362681
   95% expected band : 0.362681 < r < 0.362681
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -114213020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.562013 +/- 0.00268522 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.562013 @ 95%CL (1 toyMC)
median expected limit: r < 0.562013 @ 95%CL (1 toyMC)
   68% expected band : 0.562013 < r < 0.562013
   95% expected band : 0.562013 < r < 0.562013
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1621752377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.292011 +/- 0.002905 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.292011 @ 95%CL (1 toyMC)
median expected limit: r < 0.292011 @ 95%CL (1 toyMC)
   68% expected band : 0.292011 < r < 0.292011
   95% expected band : 0.292011 < r < 0.292011
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1028992044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280784 +/- 0.00296333 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.280784 @ 95%CL (1 toyMC)
median expected limit: r < 0.280784 @ 95%CL (1 toyMC)
   68% expected band : 0.280784 < r < 0.280784
   95% expected band : 0.280784 < r < 0.280784
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 530842042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.676104 +/- 0.00294003 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.676104 @ 95%CL (1 toyMC)
median expected limit: r < 0.676104 @ 95%CL (1 toyMC)
   68% expected band : 0.676104 < r < 0.676104
   95% expected band : 0.676104 < r < 0.676104
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1345464526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200905 +/- 0.00268777 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.200905 @ 95%CL (1 toyMC)
median expected limit: r < 0.200905 @ 95%CL (1 toyMC)
   68% expected band : 0.200905 < r < 0.200905
   95% expected band : 0.200905 < r < 0.200905
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -661083989
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.423902 +/- 0.00213465 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.423902 @ 95%CL (1 toyMC)
median expected limit: r < 0.423902 @ 95%CL (1 toyMC)
   68% expected band : 0.423902 < r < 0.423902
   95% expected band : 0.423902 < r < 0.423902
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1421329546
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.365334 +/- 0.00346502 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.365334 @ 95%CL (1 toyMC)
median expected limit: r < 0.365334 @ 95%CL (1 toyMC)
   68% expected band : 0.365334 < r < 0.365334
   95% expected band : 0.365334 < r < 0.365334
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -281862731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.582789 +/- 0.00284368 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.582789 @ 95%CL (1 toyMC)
median expected limit: r < 0.582789 @ 95%CL (1 toyMC)
   68% expected band : 0.582789 < r < 0.582789
   95% expected band : 0.582789 < r < 0.582789
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2146222970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.386508 +/- 0.00255998 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.386508 @ 95%CL (1 toyMC)
median expected limit: r < 0.386508 @ 95%CL (1 toyMC)
   68% expected band : 0.386508 < r < 0.386508
   95% expected band : 0.386508 < r < 0.386508
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -562585960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.347392 +/- 0.00257175 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.347392 @ 95%CL (1 toyMC)
median expected limit: r < 0.347392 @ 95%CL (1 toyMC)
   68% expected band : 0.347392 < r < 0.347392
   95% expected band : 0.347392 < r < 0.347392
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 701186796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.398944 +/- 0.00299078 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.398944 @ 95%CL (1 toyMC)
median expected limit: r < 0.398944 @ 95%CL (1 toyMC)
   68% expected band : 0.398944 < r < 0.398944
   95% expected band : 0.398944 < r < 0.398944
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1958747764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.387749 +/- 0.00257145 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.387749 @ 95%CL (1 toyMC)
median expected limit: r < 0.387749 @ 95%CL (1 toyMC)
   68% expected band : 0.387749 < r < 0.387749
   95% expected band : 0.387749 < r < 0.387749
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 23456594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.598811 +/- 0.00245735 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.598811 @ 95%CL (1 toyMC)
median expected limit: r < 0.598811 @ 95%CL (1 toyMC)
   68% expected band : 0.598811 < r < 0.598811
   95% expected band : 0.598811 < r < 0.598811
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 767026590
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.287885 +/- 0.00176817 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.287885 @ 95%CL (1 toyMC)
median expected limit: r < 0.287885 @ 95%CL (1 toyMC)
   68% expected band : 0.287885 < r < 0.287885
   95% expected band : 0.287885 < r < 0.287885
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -682447025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.528609 +/- 0.00252285 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.528609 @ 95%CL (1 toyMC)
median expected limit: r < 0.528609 @ 95%CL (1 toyMC)
   68% expected band : 0.528609 < r < 0.528609
   95% expected band : 0.528609 < r < 0.528609
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 35339983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.536293 +/- 0.00277826 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.536293 @ 95%CL (1 toyMC)
median expected limit: r < 0.536293 @ 95%CL (1 toyMC)
   68% expected band : 0.536293 < r < 0.536293
   95% expected band : 0.536293 < r < 0.536293
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1190766762
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.514139 +/- 0.0025284 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.514139 @ 95%CL (1 toyMC)
median expected limit: r < 0.514139 @ 95%CL (1 toyMC)
   68% expected band : 0.514139 < r < 0.514139
   95% expected band : 0.514139 < r < 0.514139
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1625381238
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.436655 +/- 0.00220218 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.436655 @ 95%CL (1 toyMC)
median expected limit: r < 0.436655 @ 95%CL (1 toyMC)
   68% expected band : 0.436655 < r < 0.436655
   95% expected band : 0.436655 < r < 0.436655
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1510842429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.456487 +/- 0.00323919 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.456487 @ 95%CL (1 toyMC)
median expected limit: r < 0.456487 @ 95%CL (1 toyMC)
   68% expected band : 0.456487 < r < 0.456487
   95% expected band : 0.456487 < r < 0.456487
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -455055791
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281965 +/- 0.00281445 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.281965 @ 95%CL (1 toyMC)
median expected limit: r < 0.281965 @ 95%CL (1 toyMC)
   68% expected band : 0.281965 < r < 0.281965
   95% expected band : 0.281965 < r < 0.281965
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1410543329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.510945 +/- 0.00222587 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.510945 @ 95%CL (1 toyMC)
median expected limit: r < 0.510945 @ 95%CL (1 toyMC)
   68% expected band : 0.510945 < r < 0.510945
   95% expected band : 0.510945 < r < 0.510945
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1498250778
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.812441 +/- 0.00300678 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.812441 @ 95%CL (1 toyMC)
median expected limit: r < 0.812441 @ 95%CL (1 toyMC)
   68% expected band : 0.812441 < r < 0.812441
   95% expected band : 0.812441 < r < 0.812441
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1208628878
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.667929 +/- 0.00261463 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.667929 @ 95%CL (1 toyMC)
median expected limit: r < 0.667929 @ 95%CL (1 toyMC)
   68% expected band : 0.667929 < r < 0.667929
   95% expected band : 0.667929 < r < 0.667929
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 134231056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.546817 +/- 0.00266675 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.546817 @ 95%CL (1 toyMC)
median expected limit: r < 0.546817 @ 95%CL (1 toyMC)
   68% expected band : 0.546817 < r < 0.546817
   95% expected band : 0.546817 < r < 0.546817
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1417532193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.613342 +/- 0.00231879 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.613342 @ 95%CL (1 toyMC)
median expected limit: r < 0.613342 @ 95%CL (1 toyMC)
   68% expected band : 0.613342 < r < 0.613342
   95% expected band : 0.613342 < r < 0.613342
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1247471413
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.262377 +/- 0.00251441 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.262377 @ 95%CL (1 toyMC)
median expected limit: r < 0.262377 @ 95%CL (1 toyMC)
   68% expected band : 0.262377 < r < 0.262377
   95% expected band : 0.262377 < r < 0.262377
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1291836266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.295322 +/- 0.00237976 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.295322 @ 95%CL (1 toyMC)
median expected limit: r < 0.295322 @ 95%CL (1 toyMC)
   68% expected band : 0.295322 < r < 0.295322
   95% expected band : 0.295322 < r < 0.295322
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1239862641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.396172 +/- 0.00281225 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.396172 @ 95%CL (1 toyMC)
median expected limit: r < 0.396172 @ 95%CL (1 toyMC)
   68% expected band : 0.396172 < r < 0.396172
   95% expected band : 0.396172 < r < 0.396172
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1213107877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.606986 +/- 0.00213821 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.606986 @ 95%CL (1 toyMC)
median expected limit: r < 0.606986 @ 95%CL (1 toyMC)
   68% expected band : 0.606986 < r < 0.606986
   95% expected band : 0.606986 < r < 0.606986
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1488358561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.380996 +/- 0.00257668 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.380996 @ 95%CL (1 toyMC)
median expected limit: r < 0.380996 @ 95%CL (1 toyMC)
   68% expected band : 0.380996 < r < 0.380996
   95% expected band : 0.380996 < r < 0.380996
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1001941616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.484974 +/- 0.00245259 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.484974 @ 95%CL (1 toyMC)
median expected limit: r < 0.484974 @ 95%CL (1 toyMC)
   68% expected band : 0.484974 < r < 0.484974
   95% expected band : 0.484974 < r < 0.484974
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1344717129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.651995 +/- 0.00305817 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.651995 @ 95%CL (1 toyMC)
median expected limit: r < 0.651995 @ 95%CL (1 toyMC)
   68% expected band : 0.651995 < r < 0.651995
   95% expected band : 0.651995 < r < 0.651995
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 942405088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.505401 +/- 0.00334368 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.505401 @ 95%CL (1 toyMC)
median expected limit: r < 0.505401 @ 95%CL (1 toyMC)
   68% expected band : 0.505401 < r < 0.505401
   95% expected band : 0.505401 < r < 0.505401
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1886026163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.608271 +/- 0.00286264 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.608271 @ 95%CL (1 toyMC)
median expected limit: r < 0.608271 @ 95%CL (1 toyMC)
   68% expected band : 0.608271 < r < 0.608271
   95% expected band : 0.608271 < r < 0.608271
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1243692840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.339393 +/- 0.00247615 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.339393 @ 95%CL (1 toyMC)
median expected limit: r < 0.339393 @ 95%CL (1 toyMC)
   68% expected band : 0.339393 < r < 0.339393
   95% expected band : 0.339393 < r < 0.339393
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1729458164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.939575 +/- 0.00254387 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.939575 @ 95%CL (1 toyMC)
median expected limit: r < 0.939575 @ 95%CL (1 toyMC)
   68% expected band : 0.939575 < r < 0.939575
   95% expected band : 0.939575 < r < 0.939575
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -194342580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.641237 +/- 0.00312931 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.641237 @ 95%CL (1 toyMC)
median expected limit: r < 0.641237 @ 95%CL (1 toyMC)
   68% expected band : 0.641237 < r < 0.641237
   95% expected band : 0.641237 < r < 0.641237
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1008330430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.463936 +/- 0.00225199 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.463936 @ 95%CL (1 toyMC)
median expected limit: r < 0.463936 @ 95%CL (1 toyMC)
   68% expected band : 0.463936 < r < 0.463936
   95% expected band : 0.463936 < r < 0.463936
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 545876911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.423872 +/- 0.00265077 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.423872 @ 95%CL (1 toyMC)
median expected limit: r < 0.423872 @ 95%CL (1 toyMC)
   68% expected band : 0.423872 < r < 0.423872
   95% expected band : 0.423872 < r < 0.423872
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2082437776
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.356641 +/- 0.00266459 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.356641 @ 95%CL (1 toyMC)
median expected limit: r < 0.356641 @ 95%CL (1 toyMC)
   68% expected band : 0.356641 < r < 0.356641
   95% expected band : 0.356641 < r < 0.356641
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 988014729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.594997 +/- 0.00297737 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.594997 @ 95%CL (1 toyMC)
median expected limit: r < 0.594997 @ 95%CL (1 toyMC)
   68% expected band : 0.594997 < r < 0.594997
   95% expected band : 0.594997 < r < 0.594997
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1567707751
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.482782 +/- 0.00298834 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.482782 @ 95%CL (1 toyMC)
median expected limit: r < 0.482782 @ 95%CL (1 toyMC)
   68% expected band : 0.482782 < r < 0.482782
   95% expected band : 0.482782 < r < 0.482782
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 197015107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.640407 +/- 0.00294909 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.640407 @ 95%CL (1 toyMC)
median expected limit: r < 0.640407 @ 95%CL (1 toyMC)
   68% expected band : 0.640407 < r < 0.640407
   95% expected band : 0.640407 < r < 0.640407
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 139185602
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.661761 +/- 0.00228908 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.661761 @ 95%CL (1 toyMC)
median expected limit: r < 0.661761 @ 95%CL (1 toyMC)
   68% expected band : 0.661761 < r < 0.661761
   95% expected band : 0.661761 < r < 0.661761
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1392827259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.379958 +/- 0.00319275 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.379958 @ 95%CL (1 toyMC)
median expected limit: r < 0.379958 @ 95%CL (1 toyMC)
   68% expected band : 0.379958 < r < 0.379958
   95% expected band : 0.379958 < r < 0.379958
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1420211899
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361693 +/- 0.00229736 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.361693 @ 95%CL (1 toyMC)
median expected limit: r < 0.361693 @ 95%CL (1 toyMC)
   68% expected band : 0.361693 < r < 0.361693
   95% expected band : 0.361693 < r < 0.361693
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1164433682
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.407745 +/- 0.00209915 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.407745 @ 95%CL (1 toyMC)
median expected limit: r < 0.407745 @ 95%CL (1 toyMC)
   68% expected band : 0.407745 < r < 0.407745
   95% expected band : 0.407745 < r < 0.407745
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1244545882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.295315 +/- 0.00293433 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.295315 @ 95%CL (1 toyMC)
median expected limit: r < 0.295315 @ 95%CL (1 toyMC)
   68% expected band : 0.295315 < r < 0.295315
   95% expected band : 0.295315 < r < 0.295315
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1380168112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.357572 +/- 0.00275224 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.357572 @ 95%CL (1 toyMC)
median expected limit: r < 0.357572 @ 95%CL (1 toyMC)
   68% expected band : 0.357572 < r < 0.357572
   95% expected band : 0.357572 < r < 0.357572
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -974547098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.492103 +/- 0.00260976 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.492103 @ 95%CL (1 toyMC)
median expected limit: r < 0.492103 @ 95%CL (1 toyMC)
   68% expected band : 0.492103 < r < 0.492103
   95% expected band : 0.492103 < r < 0.492103
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2138795844
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.308362 +/- 0.00268016 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.308362 @ 95%CL (1 toyMC)
median expected limit: r < 0.308362 @ 95%CL (1 toyMC)
   68% expected band : 0.308362 < r < 0.308362
   95% expected band : 0.308362 < r < 0.308362
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1805397697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.316162 +/- 0.00310763 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.316162 @ 95%CL (1 toyMC)
median expected limit: r < 0.316162 @ 95%CL (1 toyMC)
   68% expected band : 0.316162 < r < 0.316162
   95% expected band : 0.316162 < r < 0.316162
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 643826954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.571367 +/- 0.00269864 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.571367 @ 95%CL (1 toyMC)
median expected limit: r < 0.571367 @ 95%CL (1 toyMC)
   68% expected band : 0.571367 < r < 0.571367
   95% expected band : 0.571367 < r < 0.571367
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2034712019
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.400863 +/- 0.00262093 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.400863 @ 95%CL (1 toyMC)
median expected limit: r < 0.400863 @ 95%CL (1 toyMC)
   68% expected band : 0.400863 < r < 0.400863
   95% expected band : 0.400863 < r < 0.400863
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1673569617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.471786 +/- 0.00269639 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.471786 @ 95%CL (1 toyMC)
median expected limit: r < 0.471786 @ 95%CL (1 toyMC)
   68% expected band : 0.471786 < r < 0.471786
   95% expected band : 0.471786 < r < 0.471786
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1823605556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.290867 +/- 0.00338507 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.290867 @ 95%CL (1 toyMC)
median expected limit: r < 0.290867 @ 95%CL (1 toyMC)
   68% expected band : 0.290867 < r < 0.290867
   95% expected band : 0.290867 < r < 0.290867
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1600337329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.821677 +/- 0.00202359 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.821677 @ 95%CL (1 toyMC)
median expected limit: r < 0.821677 @ 95%CL (1 toyMC)
   68% expected band : 0.821677 < r < 0.821677
   95% expected band : 0.821677 < r < 0.821677
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1300040781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.390028 +/- 0.00322876 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.390028 @ 95%CL (1 toyMC)
median expected limit: r < 0.390028 @ 95%CL (1 toyMC)
   68% expected band : 0.390028 < r < 0.390028
   95% expected band : 0.390028 < r < 0.390028
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1187959396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.436105 +/- 0.00259484 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.436105 @ 95%CL (1 toyMC)
median expected limit: r < 0.436105 @ 95%CL (1 toyMC)
   68% expected band : 0.436105 < r < 0.436105
   95% expected band : 0.436105 < r < 0.436105
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -117767889
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.32243 +/- 0.00298264 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.32243 @ 95%CL (1 toyMC)
median expected limit: r < 0.32243 @ 95%CL (1 toyMC)
   68% expected band : 0.32243 < r < 0.32243
   95% expected band : 0.32243 < r < 0.32243
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1412793114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.37263 +/- 0.00238759 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.37263 @ 95%CL (1 toyMC)
median expected limit: r < 0.37263 @ 95%CL (1 toyMC)
   68% expected band : 0.37263 < r < 0.37263
   95% expected band : 0.37263 < r < 0.37263
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1104151064
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.424819 +/- 0.00260935 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.424819 @ 95%CL (1 toyMC)
median expected limit: r < 0.424819 @ 95%CL (1 toyMC)
   68% expected band : 0.424819 < r < 0.424819
   95% expected band : 0.424819 < r < 0.424819
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1108723591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.400732 +/- 0.00291216 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.400732 @ 95%CL (1 toyMC)
median expected limit: r < 0.400732 @ 95%CL (1 toyMC)
   68% expected band : 0.400732 < r < 0.400732
   95% expected band : 0.400732 < r < 0.400732
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 51417278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.245129 +/- 0.00294824 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.245129 @ 95%CL (1 toyMC)
median expected limit: r < 0.245129 @ 95%CL (1 toyMC)
   68% expected band : 0.245129 < r < 0.245129
   95% expected band : 0.245129 < r < 0.245129
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1484827016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248023 +/- 0.0027678 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.248023 @ 95%CL (1 toyMC)
median expected limit: r < 0.248023 @ 95%CL (1 toyMC)
   68% expected band : 0.248023 < r < 0.248023
   95% expected band : 0.248023 < r < 0.248023
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 464497294
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.367598 +/- 0.00273688 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.367598 @ 95%CL (1 toyMC)
median expected limit: r < 0.367598 @ 95%CL (1 toyMC)
   68% expected band : 0.367598 < r < 0.367598
   95% expected band : 0.367598 < r < 0.367598
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -139118798
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.496636 +/- 0.00265243 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.496636 @ 95%CL (1 toyMC)
median expected limit: r < 0.496636 @ 95%CL (1 toyMC)
   68% expected band : 0.496636 < r < 0.496636
   95% expected band : 0.496636 < r < 0.496636
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine22.MarkovChainMC.mH22.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH22.-1008330430.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH22.-1108723591.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH22.-114213020.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH22.-1164433682.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH22.-117767889.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH22.-1182784220.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH22.-1187959396.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH22.-1190766762.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH22.-1239862641.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH22.-1243692840.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH22.-1244545882.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH22.-1247471413.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH22.-1267427528.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH22.-1291836266.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH22.-1344717129.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH22.-1380168112.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH22.-139118798.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH22.-1420211899.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH22.-1421329546.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH22.-1498250778.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH22.-1510842429.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH22.-1567707751.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH22.-1621752377.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH22.-1625381238.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH22.-1805397697.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH22.-1823605556.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH22.-1872407253.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH22.-1886026163.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH22.-194342580.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH22.-1958747764.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH22.-2002367380.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH22.-2109837157.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH22.-2111926680.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH22.-281862731.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH22.-30925933.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH22.-423487720.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH22.-455055791.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH22.-550842441.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH22.-560132512.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH22.-562585960.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH22.-661083989.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH22.-682447025.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH22.-733135634.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH22.-754356527.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH22.-825886452.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH22.-88434404.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH22.-938058558.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH22.-974547098.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH22.1001941616.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH22.1028992044.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH22.1069589328.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH22.1104151064.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH22.114231386.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH22.1208628878.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH22.1213107877.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH22.1232954537.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH22.1260809206.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH22.1296468575.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH22.1300040781.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH22.134231056.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH22.1345464526.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH22.1388521403.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH22.139185602.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH22.1392827259.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH22.1410543329.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH22.1412793114.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH22.1417532193.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH22.1484827016.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH22.1488358561.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH22.1502087025.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH22.1600337329.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH22.1653533287.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH22.1673569617.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH22.1718285379.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH22.1729458164.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH22.1731884974.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH22.197015107.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH22.1975719208.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH22.2034712019.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH22.2055905759.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH22.2082437776.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH22.2138795844.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH22.2146222970.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH22.23456594.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH22.28557044.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH22.35339983.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH22.400475175.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH22.415816081.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH22.464497294.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH22.51417278.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH22.530842042.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH22.545876911.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH22.643826954.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH22.701186796.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH22.765971765.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH22.767026590.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH22.782454172.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH22.828725241.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH22.942405088.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH22.988014729.root
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -464947723
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.692606 +/- 0.00264337 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.692606 @ 95%CL (1 toyMC)
median expected limit: r < 0.692606 @ 95%CL (1 toyMC)
   68% expected band : 0.692606 < r < 0.692606
   95% expected band : 0.692606 < r < 0.692606
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1451263432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.759998 +/- 0.00350053 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.759998 @ 95%CL (1 toyMC)
median expected limit: r < 0.759998 @ 95%CL (1 toyMC)
   68% expected band : 0.759998 < r < 0.759998
   95% expected band : 0.759998 < r < 0.759998
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1758237159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91689 +/- 0.00440029 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.91689 @ 95%CL (1 toyMC)
median expected limit: r < 1.91689 @ 95%CL (1 toyMC)
   68% expected band : 1.91689 < r < 1.91689
   95% expected band : 1.91689 < r < 1.91689
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -200547394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55267 +/- 0.00358115 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.55267 @ 95%CL (1 toyMC)
median expected limit: r < 1.55267 @ 95%CL (1 toyMC)
   68% expected band : 1.55267 < r < 1.55267
   95% expected band : 1.55267 < r < 1.55267
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -412905726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.906788 +/- 0.00315282 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.906788 @ 95%CL (1 toyMC)
median expected limit: r < 0.906788 @ 95%CL (1 toyMC)
   68% expected band : 0.906788 < r < 0.906788
   95% expected band : 0.906788 < r < 0.906788
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1406640874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.664674 +/- 0.00349002 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.664674 @ 95%CL (1 toyMC)
median expected limit: r < 0.664674 @ 95%CL (1 toyMC)
   68% expected band : 0.664674 < r < 0.664674
   95% expected band : 0.664674 < r < 0.664674
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 475532248
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2113 +/- 0.00382297 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.2113 @ 95%CL (1 toyMC)
median expected limit: r < 1.2113 @ 95%CL (1 toyMC)
   68% expected band : 1.2113 < r < 1.2113
   95% expected band : 1.2113 < r < 1.2113
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1269836112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.71936 +/- 0.00253502 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.71936 @ 95%CL (1 toyMC)
median expected limit: r < 0.71936 @ 95%CL (1 toyMC)
   68% expected band : 0.71936 < r < 0.71936
   95% expected band : 0.71936 < r < 0.71936
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1087884795
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30435 +/- 0.00413044 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.30435 @ 95%CL (1 toyMC)
median expected limit: r < 1.30435 @ 95%CL (1 toyMC)
   68% expected band : 1.30435 < r < 1.30435
   95% expected band : 1.30435 < r < 1.30435
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -868652339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00682 +/- 0.00358325 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.00682 @ 95%CL (1 toyMC)
median expected limit: r < 1.00682 @ 95%CL (1 toyMC)
   68% expected band : 1.00682 < r < 1.00682
   95% expected band : 1.00682 < r < 1.00682
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -624017558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.981837 +/- 0.00343261 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.981837 @ 95%CL (1 toyMC)
median expected limit: r < 0.981837 @ 95%CL (1 toyMC)
   68% expected band : 0.981837 < r < 0.981837
   95% expected band : 0.981837 < r < 0.981837
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1532371642
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.554182 +/- 0.00316685 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.554182 @ 95%CL (1 toyMC)
median expected limit: r < 0.554182 @ 95%CL (1 toyMC)
   68% expected band : 0.554182 < r < 0.554182
   95% expected band : 0.554182 < r < 0.554182
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1159363919
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21211 +/- 0.00379963 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.21211 @ 95%CL (1 toyMC)
median expected limit: r < 1.21211 @ 95%CL (1 toyMC)
   68% expected band : 1.21211 < r < 1.21211
   95% expected band : 1.21211 < r < 1.21211
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -915404442
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29767 +/- 0.00396548 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.29767 @ 95%CL (1 toyMC)
median expected limit: r < 1.29767 @ 95%CL (1 toyMC)
   68% expected band : 1.29767 < r < 1.29767
   95% expected band : 1.29767 < r < 1.29767
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -223017397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.823967 +/- 0.00322515 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.823967 @ 95%CL (1 toyMC)
median expected limit: r < 0.823967 @ 95%CL (1 toyMC)
   68% expected band : 0.823967 < r < 0.823967
   95% expected band : 0.823967 < r < 0.823967
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2120252174
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.930158 +/- 0.00325998 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.930158 @ 95%CL (1 toyMC)
median expected limit: r < 0.930158 @ 95%CL (1 toyMC)
   68% expected band : 0.930158 < r < 0.930158
   95% expected band : 0.930158 < r < 0.930158
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1886050844
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.683143 +/- 0.0029528 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.683143 @ 95%CL (1 toyMC)
median expected limit: r < 0.683143 @ 95%CL (1 toyMC)
   68% expected band : 0.683143 < r < 0.683143
   95% expected band : 0.683143 < r < 0.683143
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1271598953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05291 +/- 0.00302877 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.05291 @ 95%CL (1 toyMC)
median expected limit: r < 1.05291 @ 95%CL (1 toyMC)
   68% expected band : 1.05291 < r < 1.05291
   95% expected band : 1.05291 < r < 1.05291
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1950237220
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1684 +/- 0.00403114 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.1684 @ 95%CL (1 toyMC)
median expected limit: r < 1.1684 @ 95%CL (1 toyMC)
   68% expected band : 1.1684 < r < 1.1684
   95% expected band : 1.1684 < r < 1.1684
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1258137032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.971716 +/- 0.00271844 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.971716 @ 95%CL (1 toyMC)
median expected limit: r < 0.971716 @ 95%CL (1 toyMC)
   68% expected band : 0.971716 < r < 0.971716
   95% expected band : 0.971716 < r < 0.971716
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -794096757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.909431 +/- 0.00302895 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.909431 @ 95%CL (1 toyMC)
median expected limit: r < 0.909431 @ 95%CL (1 toyMC)
   68% expected band : 0.909431 < r < 0.909431
   95% expected band : 0.909431 < r < 0.909431
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 237769859
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16375 +/- 0.00315245 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.16375 @ 95%CL (1 toyMC)
median expected limit: r < 1.16375 @ 95%CL (1 toyMC)
   68% expected band : 1.16375 < r < 1.16375
   95% expected band : 1.16375 < r < 1.16375
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 399790973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.73168 +/- 0.0029245 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.73168 @ 95%CL (1 toyMC)
median expected limit: r < 0.73168 @ 95%CL (1 toyMC)
   68% expected band : 0.73168 < r < 0.73168
   95% expected band : 0.73168 < r < 0.73168
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -321165976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.806474 +/- 0.00435539 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.806474 @ 95%CL (1 toyMC)
median expected limit: r < 0.806474 @ 95%CL (1 toyMC)
   68% expected band : 0.806474 < r < 0.806474
   95% expected band : 0.806474 < r < 0.806474
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2039616066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.641501 +/- 0.00350702 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.641501 @ 95%CL (1 toyMC)
median expected limit: r < 0.641501 @ 95%CL (1 toyMC)
   68% expected band : 0.641501 < r < 0.641501
   95% expected band : 0.641501 < r < 0.641501
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2142907694
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50776 +/- 0.0029866 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.50776 @ 95%CL (1 toyMC)
median expected limit: r < 1.50776 @ 95%CL (1 toyMC)
   68% expected band : 1.50776 < r < 1.50776
   95% expected band : 1.50776 < r < 1.50776
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1515286190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.699591 +/- 0.00297323 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.699591 @ 95%CL (1 toyMC)
median expected limit: r < 0.699591 @ 95%CL (1 toyMC)
   68% expected band : 0.699591 < r < 0.699591
   95% expected band : 0.699591 < r < 0.699591
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1624985639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.675394 +/- 0.00363866 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.675394 @ 95%CL (1 toyMC)
median expected limit: r < 0.675394 @ 95%CL (1 toyMC)
   68% expected band : 0.675394 < r < 0.675394
   95% expected band : 0.675394 < r < 0.675394
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1734426987
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.935405 +/- 0.00355989 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.935405 @ 95%CL (1 toyMC)
median expected limit: r < 0.935405 @ 95%CL (1 toyMC)
   68% expected band : 0.935405 < r < 0.935405
   95% expected band : 0.935405 < r < 0.935405
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -135234870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05252 +/- 0.00278467 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.05252 @ 95%CL (1 toyMC)
median expected limit: r < 1.05252 @ 95%CL (1 toyMC)
   68% expected band : 1.05252 < r < 1.05252
   95% expected band : 1.05252 < r < 1.05252
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 835245730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28082 +/- 0.00353761 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.28082 @ 95%CL (1 toyMC)
median expected limit: r < 1.28082 @ 95%CL (1 toyMC)
   68% expected band : 1.28082 < r < 1.28082
   95% expected band : 1.28082 < r < 1.28082
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -616403707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.931806 +/- 0.00329271 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.931806 @ 95%CL (1 toyMC)
median expected limit: r < 0.931806 @ 95%CL (1 toyMC)
   68% expected band : 0.931806 < r < 0.931806
   95% expected band : 0.931806 < r < 0.931806
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -349874518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.880813 +/- 0.00271642 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.880813 @ 95%CL (1 toyMC)
median expected limit: r < 0.880813 @ 95%CL (1 toyMC)
   68% expected band : 0.880813 < r < 0.880813
   95% expected band : 0.880813 < r < 0.880813
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2041599099
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.930361 +/- 0.00325261 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.930361 @ 95%CL (1 toyMC)
median expected limit: r < 0.930361 @ 95%CL (1 toyMC)
   68% expected band : 0.930361 < r < 0.930361
   95% expected band : 0.930361 < r < 0.930361
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -549230660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.668328 +/- 0.00332451 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.668328 @ 95%CL (1 toyMC)
median expected limit: r < 0.668328 @ 95%CL (1 toyMC)
   68% expected band : 0.668328 < r < 0.668328
   95% expected band : 0.668328 < r < 0.668328
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1012655084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32395 +/- 0.00351467 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.32395 @ 95%CL (1 toyMC)
median expected limit: r < 1.32395 @ 95%CL (1 toyMC)
   68% expected band : 1.32395 < r < 1.32395
   95% expected band : 1.32395 < r < 1.32395
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -55403816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03805 +/- 0.0033386 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.03805 @ 95%CL (1 toyMC)
median expected limit: r < 1.03805 @ 95%CL (1 toyMC)
   68% expected band : 1.03805 < r < 1.03805
   95% expected band : 1.03805 < r < 1.03805
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1803232683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.92381 +/- 0.00318033 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.92381 @ 95%CL (1 toyMC)
median expected limit: r < 0.92381 @ 95%CL (1 toyMC)
   68% expected band : 0.92381 < r < 0.92381
   95% expected band : 0.92381 < r < 0.92381
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -700074221
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.947578 +/- 0.00369983 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.947578 @ 95%CL (1 toyMC)
median expected limit: r < 0.947578 @ 95%CL (1 toyMC)
   68% expected band : 0.947578 < r < 0.947578
   95% expected band : 0.947578 < r < 0.947578
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 180339554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12743 +/- 0.00373314 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.12743 @ 95%CL (1 toyMC)
median expected limit: r < 1.12743 @ 95%CL (1 toyMC)
   68% expected band : 1.12743 < r < 1.12743
   95% expected band : 1.12743 < r < 1.12743
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1408510361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.847196 +/- 0.00326709 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.847196 @ 95%CL (1 toyMC)
median expected limit: r < 0.847196 @ 95%CL (1 toyMC)
   68% expected band : 0.847196 < r < 0.847196
   95% expected band : 0.847196 < r < 0.847196
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1915897579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17326 +/- 0.00404669 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.17326 @ 95%CL (1 toyMC)
median expected limit: r < 1.17326 @ 95%CL (1 toyMC)
   68% expected band : 1.17326 < r < 1.17326
   95% expected band : 1.17326 < r < 1.17326
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1701565941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.954108 +/- 0.00368305 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.954108 @ 95%CL (1 toyMC)
median expected limit: r < 0.954108 @ 95%CL (1 toyMC)
   68% expected band : 0.954108 < r < 0.954108
   95% expected band : 0.954108 < r < 0.954108
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -264891777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.722335 +/- 0.0023399 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.722335 @ 95%CL (1 toyMC)
median expected limit: r < 0.722335 @ 95%CL (1 toyMC)
   68% expected band : 0.722335 < r < 0.722335
   95% expected band : 0.722335 < r < 0.722335
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2055574310
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.520819 +/- 0.002416 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.520819 @ 95%CL (1 toyMC)
median expected limit: r < 0.520819 @ 95%CL (1 toyMC)
   68% expected band : 0.520819 < r < 0.520819
   95% expected band : 0.520819 < r < 0.520819
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1988281221
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10838 +/- 0.00326748 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.10838 @ 95%CL (1 toyMC)
median expected limit: r < 1.10838 @ 95%CL (1 toyMC)
   68% expected band : 1.10838 < r < 1.10838
   95% expected band : 1.10838 < r < 1.10838
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1963645758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.638177 +/- 0.00333194 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.638177 @ 95%CL (1 toyMC)
median expected limit: r < 0.638177 @ 95%CL (1 toyMC)
   68% expected band : 0.638177 < r < 0.638177
   95% expected band : 0.638177 < r < 0.638177
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1911609504
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.819399 +/- 0.00288956 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.819399 @ 95%CL (1 toyMC)
median expected limit: r < 0.819399 @ 95%CL (1 toyMC)
   68% expected band : 0.819399 < r < 0.819399
   95% expected band : 0.819399 < r < 0.819399
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2069036684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.880267 +/- 0.00398011 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.880267 @ 95%CL (1 toyMC)
median expected limit: r < 0.880267 @ 95%CL (1 toyMC)
   68% expected band : 0.880267 < r < 0.880267
   95% expected band : 0.880267 < r < 0.880267
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1843415428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03952 +/- 0.00263543 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.03952 @ 95%CL (1 toyMC)
median expected limit: r < 1.03952 @ 95%CL (1 toyMC)
   68% expected band : 1.03952 < r < 1.03952
   95% expected band : 1.03952 < r < 1.03952
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1581360451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.768026 +/- 0.00308906 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.768026 @ 95%CL (1 toyMC)
median expected limit: r < 0.768026 @ 95%CL (1 toyMC)
   68% expected band : 0.768026 < r < 0.768026
   95% expected band : 0.768026 < r < 0.768026
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -699703532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.872854 +/- 0.00402259 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.872854 @ 95%CL (1 toyMC)
median expected limit: r < 0.872854 @ 95%CL (1 toyMC)
   68% expected band : 0.872854 < r < 0.872854
   95% expected band : 0.872854 < r < 0.872854
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -228581382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60745 +/- 0.00381926 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.60745 @ 95%CL (1 toyMC)
median expected limit: r < 1.60745 @ 95%CL (1 toyMC)
   68% expected band : 1.60745 < r < 1.60745
   95% expected band : 1.60745 < r < 1.60745
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1528231994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.956242 +/- 0.00262152 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.956242 @ 95%CL (1 toyMC)
median expected limit: r < 0.956242 @ 95%CL (1 toyMC)
   68% expected band : 0.956242 < r < 0.956242
   95% expected band : 0.956242 < r < 0.956242
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1002061267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00342 +/- 0.00367573 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.00342 @ 95%CL (1 toyMC)
median expected limit: r < 1.00342 @ 95%CL (1 toyMC)
   68% expected band : 1.00342 < r < 1.00342
   95% expected band : 1.00342 < r < 1.00342
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -622654290
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1774 +/- 0.00285146 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.1774 @ 95%CL (1 toyMC)
median expected limit: r < 1.1774 @ 95%CL (1 toyMC)
   68% expected band : 1.1774 < r < 1.1774
   95% expected band : 1.1774 < r < 1.1774
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1611255092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.986334 +/- 0.00308875 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.986334 @ 95%CL (1 toyMC)
median expected limit: r < 0.986334 @ 95%CL (1 toyMC)
   68% expected band : 0.986334 < r < 0.986334
   95% expected band : 0.986334 < r < 0.986334
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1289511621
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59682 +/- 0.00324956 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.59682 @ 95%CL (1 toyMC)
median expected limit: r < 1.59682 @ 95%CL (1 toyMC)
   68% expected band : 1.59682 < r < 1.59682
   95% expected band : 1.59682 < r < 1.59682
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1971650469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00544 +/- 0.00327084 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.00544 @ 95%CL (1 toyMC)
median expected limit: r < 1.00544 @ 95%CL (1 toyMC)
   68% expected band : 1.00544 < r < 1.00544
   95% expected band : 1.00544 < r < 1.00544
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -145286774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.926725 +/- 0.00297602 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.926725 @ 95%CL (1 toyMC)
median expected limit: r < 0.926725 @ 95%CL (1 toyMC)
   68% expected band : 0.926725 < r < 0.926725
   95% expected band : 0.926725 < r < 0.926725
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2054740658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00187 +/- 0.00349532 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.00187 @ 95%CL (1 toyMC)
median expected limit: r < 1.00187 @ 95%CL (1 toyMC)
   68% expected band : 1.00187 < r < 1.00187
   95% expected band : 1.00187 < r < 1.00187
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2031596571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.958667 +/- 0.00321128 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.958667 @ 95%CL (1 toyMC)
median expected limit: r < 0.958667 @ 95%CL (1 toyMC)
   68% expected band : 0.958667 < r < 0.958667
   95% expected band : 0.958667 < r < 0.958667
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -864372289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71011 +/- 0.00269918 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.71011 @ 95%CL (1 toyMC)
median expected limit: r < 1.71011 @ 95%CL (1 toyMC)
   68% expected band : 1.71011 < r < 1.71011
   95% expected band : 1.71011 < r < 1.71011
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 298089320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00712 +/- 0.00365108 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.00712 @ 95%CL (1 toyMC)
median expected limit: r < 2.00712 @ 95%CL (1 toyMC)
   68% expected band : 2.00712 < r < 2.00712
   95% expected band : 2.00712 < r < 2.00712
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2115361684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.864708 +/- 0.00348588 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.864708 @ 95%CL (1 toyMC)
median expected limit: r < 0.864708 @ 95%CL (1 toyMC)
   68% expected band : 0.864708 < r < 0.864708
   95% expected band : 0.864708 < r < 0.864708
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 260212817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07156 +/- 0.00342902 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.07156 @ 95%CL (1 toyMC)
median expected limit: r < 1.07156 @ 95%CL (1 toyMC)
   68% expected band : 1.07156 < r < 1.07156
   95% expected band : 1.07156 < r < 1.07156
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1317517134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85687 +/- 0.004713 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.85687 @ 95%CL (1 toyMC)
median expected limit: r < 1.85687 @ 95%CL (1 toyMC)
   68% expected band : 1.85687 < r < 1.85687
   95% expected band : 1.85687 < r < 1.85687
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 572984424
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.828772 +/- 0.00383533 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.828772 @ 95%CL (1 toyMC)
median expected limit: r < 0.828772 @ 95%CL (1 toyMC)
   68% expected band : 0.828772 < r < 0.828772
   95% expected band : 0.828772 < r < 0.828772
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 487981731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37588 +/- 0.00277074 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.37588 @ 95%CL (1 toyMC)
median expected limit: r < 1.37588 @ 95%CL (1 toyMC)
   68% expected band : 1.37588 < r < 1.37588
   95% expected band : 1.37588 < r < 1.37588
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1896649410
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.492904 +/- 0.00343378 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.492904 @ 95%CL (1 toyMC)
median expected limit: r < 0.492904 @ 95%CL (1 toyMC)
   68% expected band : 0.492904 < r < 0.492904
   95% expected band : 0.492904 < r < 0.492904
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1948356003
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.498703 +/- 0.00314925 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.498703 @ 95%CL (1 toyMC)
median expected limit: r < 0.498703 @ 95%CL (1 toyMC)
   68% expected band : 0.498703 < r < 0.498703
   95% expected band : 0.498703 < r < 0.498703
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2091625683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.819362 +/- 0.00371386 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.819362 @ 95%CL (1 toyMC)
median expected limit: r < 0.819362 @ 95%CL (1 toyMC)
   68% expected band : 0.819362 < r < 0.819362
   95% expected band : 0.819362 < r < 0.819362
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1852956201
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00825 +/- 0.00428666 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.00825 @ 95%CL (1 toyMC)
median expected limit: r < 2.00825 @ 95%CL (1 toyMC)
   68% expected band : 2.00825 < r < 2.00825
   95% expected band : 2.00825 < r < 2.00825
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2015523068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11009 +/- 0.00261268 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.11009 @ 95%CL (1 toyMC)
median expected limit: r < 1.11009 @ 95%CL (1 toyMC)
   68% expected band : 1.11009 < r < 1.11009
   95% expected band : 1.11009 < r < 1.11009
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2048138398
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05597 +/- 0.00319236 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.05597 @ 95%CL (1 toyMC)
median expected limit: r < 1.05597 @ 95%CL (1 toyMC)
   68% expected band : 1.05597 < r < 1.05597
   95% expected band : 1.05597 < r < 1.05597
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 122366012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.966332 +/- 0.00303844 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.966332 @ 95%CL (1 toyMC)
median expected limit: r < 0.966332 @ 95%CL (1 toyMC)
   68% expected band : 0.966332 < r < 0.966332
   95% expected band : 0.966332 < r < 0.966332
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1264271039
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.764709 +/- 0.00286059 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.764709 @ 95%CL (1 toyMC)
median expected limit: r < 0.764709 @ 95%CL (1 toyMC)
   68% expected band : 0.764709 < r < 0.764709
   95% expected band : 0.764709 < r < 0.764709
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -126286868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23934 +/- 0.00313242 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.23934 @ 95%CL (1 toyMC)
median expected limit: r < 1.23934 @ 95%CL (1 toyMC)
   68% expected band : 1.23934 < r < 1.23934
   95% expected band : 1.23934 < r < 1.23934
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 756911142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4792 +/- 0.003624 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.4792 @ 95%CL (1 toyMC)
median expected limit: r < 1.4792 @ 95%CL (1 toyMC)
   68% expected band : 1.4792 < r < 1.4792
   95% expected band : 1.4792 < r < 1.4792
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1170702432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26916 +/- 0.00225019 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.26916 @ 95%CL (1 toyMC)
median expected limit: r < 1.26916 @ 95%CL (1 toyMC)
   68% expected band : 1.26916 < r < 1.26916
   95% expected band : 1.26916 < r < 1.26916
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1102175680
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24067 +/- 0.00331419 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.24067 @ 95%CL (1 toyMC)
median expected limit: r < 1.24067 @ 95%CL (1 toyMC)
   68% expected band : 1.24067 < r < 1.24067
   95% expected band : 1.24067 < r < 1.24067
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1025248802
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07132 +/- 0.0038298 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.07132 @ 95%CL (1 toyMC)
median expected limit: r < 1.07132 @ 95%CL (1 toyMC)
   68% expected band : 1.07132 < r < 1.07132
   95% expected band : 1.07132 < r < 1.07132
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1212975452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.36948 +/- 0.00380962 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.36948 @ 95%CL (1 toyMC)
median expected limit: r < 2.36948 @ 95%CL (1 toyMC)
   68% expected band : 2.36948 < r < 2.36948
   95% expected band : 2.36948 < r < 2.36948
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1147642514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07603 +/- 0.00328695 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.07603 @ 95%CL (1 toyMC)
median expected limit: r < 1.07603 @ 95%CL (1 toyMC)
   68% expected band : 1.07603 < r < 1.07603
   95% expected band : 1.07603 < r < 1.07603
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1170654380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39071 +/- 0.00374367 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.39071 @ 95%CL (1 toyMC)
median expected limit: r < 1.39071 @ 95%CL (1 toyMC)
   68% expected band : 1.39071 < r < 1.39071
   95% expected band : 1.39071 < r < 1.39071
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -5283026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0546 +/- 0.00340124 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.0546 @ 95%CL (1 toyMC)
median expected limit: r < 1.0546 @ 95%CL (1 toyMC)
   68% expected band : 1.0546 < r < 1.0546
   95% expected band : 1.0546 < r < 1.0546
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -951557639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58789 +/- 0.0040914 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.58789 @ 95%CL (1 toyMC)
median expected limit: r < 1.58789 @ 95%CL (1 toyMC)
   68% expected band : 1.58789 < r < 1.58789
   95% expected band : 1.58789 < r < 1.58789
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1095218352
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.91406 +/- 0.00277046 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.91406 @ 95%CL (1 toyMC)
median expected limit: r < 0.91406 @ 95%CL (1 toyMC)
   68% expected band : 0.91406 < r < 0.91406
   95% expected band : 0.91406 < r < 0.91406
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1950975503
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.764958 +/- 0.00313976 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.764958 @ 95%CL (1 toyMC)
median expected limit: r < 0.764958 @ 95%CL (1 toyMC)
   68% expected band : 0.764958 < r < 0.764958
   95% expected band : 0.764958 < r < 0.764958
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1338906018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07942 +/- 0.00409595 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.07942 @ 95%CL (1 toyMC)
median expected limit: r < 1.07942 @ 95%CL (1 toyMC)
   68% expected band : 1.07942 < r < 1.07942
   95% expected band : 1.07942 < r < 1.07942
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1374967227
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53054 +/- 0.00372376 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.53054 @ 95%CL (1 toyMC)
median expected limit: r < 1.53054 @ 95%CL (1 toyMC)
   68% expected band : 1.53054 < r < 1.53054
   95% expected band : 1.53054 < r < 1.53054
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1733286451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12203 +/- 0.00328921 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.12203 @ 95%CL (1 toyMC)
median expected limit: r < 1.12203 @ 95%CL (1 toyMC)
   68% expected band : 1.12203 < r < 1.12203
   95% expected band : 1.12203 < r < 1.12203
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 103680454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.89345 +/- 0.00325293 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.89345 @ 95%CL (1 toyMC)
median expected limit: r < 0.89345 @ 95%CL (1 toyMC)
   68% expected band : 0.89345 < r < 0.89345
   95% expected band : 0.89345 < r < 0.89345
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1784213311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.703759 +/- 0.00425315 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.703759 @ 95%CL (1 toyMC)
median expected limit: r < 0.703759 @ 95%CL (1 toyMC)
   68% expected band : 0.703759 < r < 0.703759
   95% expected band : 0.703759 < r < 0.703759
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1706410483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00748 +/- 0.00330075 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.00748 @ 95%CL (1 toyMC)
median expected limit: r < 1.00748 @ 95%CL (1 toyMC)
   68% expected band : 1.00748 < r < 1.00748
   95% expected band : 1.00748 < r < 1.00748
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2030063425
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22348 +/- 0.00347781 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.22348 @ 95%CL (1 toyMC)
median expected limit: r < 1.22348 @ 95%CL (1 toyMC)
   68% expected band : 1.22348 < r < 1.22348
   95% expected band : 1.22348 < r < 1.22348
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -984316484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77945 +/- 0.00351302 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.77945 @ 95%CL (1 toyMC)
median expected limit: r < 1.77945 @ 95%CL (1 toyMC)
   68% expected band : 1.77945 < r < 1.77945
   95% expected band : 1.77945 < r < 1.77945
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 917886224
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.864785 +/- 0.0048203 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.864785 @ 95%CL (1 toyMC)
median expected limit: r < 0.864785 @ 95%CL (1 toyMC)
   68% expected band : 0.864785 < r < 0.864785
   95% expected band : 0.864785 < r < 0.864785
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -694954822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.886831 +/- 0.00339403 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.886831 @ 95%CL (1 toyMC)
median expected limit: r < 0.886831 @ 95%CL (1 toyMC)
   68% expected band : 0.886831 < r < 0.886831
   95% expected band : 0.886831 < r < 0.886831
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -495969383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39407 +/- 0.00364187 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.39407 @ 95%CL (1 toyMC)
median expected limit: r < 1.39407 @ 95%CL (1 toyMC)
   68% expected band : 1.39407 < r < 1.39407
   95% expected band : 1.39407 < r < 1.39407
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine28.MarkovChainMC.mH28.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH28.-1002061267.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH28.-1025248802.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH28.-1087884795.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH28.-1095218352.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH28.-1159363919.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH28.-1170654380.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH28.-126286868.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH28.-1271598953.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH28.-1317517134.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH28.-1338906018.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH28.-135234870.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH28.-1406640874.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH28.-1408510361.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH28.-1451263432.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH28.-145286774.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH28.-1611255092.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH28.-1624985639.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH28.-1733286451.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH28.-1734426987.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH28.-1784213311.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH28.-1886050844.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH28.-1915897579.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH28.-1950975503.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH28.-1971650469.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH28.-200547394.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH28.-2015523068.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH28.-2030063425.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH28.-2031596571.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH28.-2039616066.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH28.-2041599099.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH28.-2054740658.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH28.-2055574310.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH28.-2069036684.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH28.-2091625683.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH28.-2115361684.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH28.-2120252174.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH28.-2142907694.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH28.-223017397.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH28.-228581382.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH28.-264891777.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH28.-321165976.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH28.-349874518.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH28.-412905726.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH28.-464947723.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH28.-495969383.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH28.-5283026.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH28.-549230660.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH28.-55403816.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH28.-616403707.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH28.-622654290.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH28.-624017558.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH28.-694954822.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH28.-699703532.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH28.-700074221.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH28.-794096757.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH28.-864372289.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH28.-868652339.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH28.-915404442.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH28.-951557639.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH28.-984316484.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH28.1012655084.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH28.103680454.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH28.1102175680.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH28.1147642514.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH28.1170702432.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH28.1212975452.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH28.122366012.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH28.1258137032.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH28.1264271039.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH28.1269836112.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH28.1289511621.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH28.1374967227.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH28.1515286190.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH28.1528231994.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH28.1532371642.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH28.1581360451.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH28.1701565941.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH28.1706410483.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH28.1758237159.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH28.1803232683.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH28.180339554.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH28.1843415428.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH28.1852956201.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH28.1896649410.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH28.1911609504.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH28.1948356003.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH28.1950237220.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH28.1963645758.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH28.1988281221.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH28.2048138398.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH28.237769859.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH28.260212817.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH28.298089320.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH28.399790973.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH28.475532248.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH28.487981731.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH28.572984424.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH28.756911142.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH28.835245730.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH28.917886224.root
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1656782877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.86391 +/- 0.00283562 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.86391 @ 95%CL (1 toyMC)
median expected limit: r < 0.86391 @ 95%CL (1 toyMC)
   68% expected band : 0.86391 < r < 0.86391
   95% expected band : 0.86391 < r < 0.86391
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2125906282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69085 +/- 0.00417856 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.69085 @ 95%CL (1 toyMC)
median expected limit: r < 1.69085 @ 95%CL (1 toyMC)
   68% expected band : 1.69085 < r < 1.69085
   95% expected band : 1.69085 < r < 1.69085
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 227908981
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27216 +/- 0.00379887 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.27216 @ 95%CL (1 toyMC)
median expected limit: r < 1.27216 @ 95%CL (1 toyMC)
   68% expected band : 1.27216 < r < 1.27216
   95% expected band : 1.27216 < r < 1.27216
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1777469789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0592 +/- 0.00409179 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.0592 @ 95%CL (1 toyMC)
median expected limit: r < 1.0592 @ 95%CL (1 toyMC)
   68% expected band : 1.0592 < r < 1.0592
   95% expected band : 1.0592 < r < 1.0592
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1708813016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35821 +/- 0.00374337 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.35821 @ 95%CL (1 toyMC)
median expected limit: r < 1.35821 @ 95%CL (1 toyMC)
   68% expected band : 1.35821 < r < 1.35821
   95% expected band : 1.35821 < r < 1.35821
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1243333759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33699 +/- 0.00422146 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.33699 @ 95%CL (1 toyMC)
median expected limit: r < 1.33699 @ 95%CL (1 toyMC)
   68% expected band : 1.33699 < r < 1.33699
   95% expected band : 1.33699 < r < 1.33699
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 863844278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17113 +/- 0.0029246 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.17113 @ 95%CL (1 toyMC)
median expected limit: r < 1.17113 @ 95%CL (1 toyMC)
   68% expected band : 1.17113 < r < 1.17113
   95% expected band : 1.17113 < r < 1.17113
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 147214269
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.941005 +/- 0.00378016 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.941005 @ 95%CL (1 toyMC)
median expected limit: r < 0.941005 @ 95%CL (1 toyMC)
   68% expected band : 0.941005 < r < 0.941005
   95% expected band : 0.941005 < r < 0.941005
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1511951328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2392 +/- 0.0032419 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.2392 @ 95%CL (1 toyMC)
median expected limit: r < 1.2392 @ 95%CL (1 toyMC)
   68% expected band : 1.2392 < r < 1.2392
   95% expected band : 1.2392 < r < 1.2392
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1657025661
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.696347 +/- 0.00312731 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.696347 @ 95%CL (1 toyMC)
median expected limit: r < 0.696347 @ 95%CL (1 toyMC)
   68% expected band : 0.696347 < r < 0.696347
   95% expected band : 0.696347 < r < 0.696347
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1734019772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1203 +/- 0.00402279 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.1203 @ 95%CL (1 toyMC)
median expected limit: r < 1.1203 @ 95%CL (1 toyMC)
   68% expected band : 1.1203 < r < 1.1203
   95% expected band : 1.1203 < r < 1.1203
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1706449511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04043 +/- 0.00302244 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.04043 @ 95%CL (1 toyMC)
median expected limit: r < 1.04043 @ 95%CL (1 toyMC)
   68% expected band : 1.04043 < r < 1.04043
   95% expected band : 1.04043 < r < 1.04043
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 66979007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65809 +/- 0.00426758 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.65809 @ 95%CL (1 toyMC)
median expected limit: r < 1.65809 @ 95%CL (1 toyMC)
   68% expected band : 1.65809 < r < 1.65809
   95% expected band : 1.65809 < r < 1.65809
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1142779622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.984989 +/- 0.003362 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.984989 @ 95%CL (1 toyMC)
median expected limit: r < 0.984989 @ 95%CL (1 toyMC)
   68% expected band : 0.984989 < r < 0.984989
   95% expected band : 0.984989 < r < 0.984989
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -567044691
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51373 +/- 0.00321101 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.51373 @ 95%CL (1 toyMC)
median expected limit: r < 1.51373 @ 95%CL (1 toyMC)
   68% expected band : 1.51373 < r < 1.51373
   95% expected band : 1.51373 < r < 1.51373
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 953069372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.810049 +/- 0.00436307 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.810049 @ 95%CL (1 toyMC)
median expected limit: r < 0.810049 @ 95%CL (1 toyMC)
   68% expected band : 0.810049 < r < 0.810049
   95% expected band : 0.810049 < r < 0.810049
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 804360894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.817959 +/- 0.00336036 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.817959 @ 95%CL (1 toyMC)
median expected limit: r < 0.817959 @ 95%CL (1 toyMC)
   68% expected band : 0.817959 < r < 0.817959
   95% expected band : 0.817959 < r < 0.817959
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 380260362
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5658 +/- 0.00430394 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.5658 @ 95%CL (1 toyMC)
median expected limit: r < 1.5658 @ 95%CL (1 toyMC)
   68% expected band : 1.5658 < r < 1.5658
   95% expected band : 1.5658 < r < 1.5658
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1168037553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17525 +/- 0.00249496 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.17525 @ 95%CL (1 toyMC)
median expected limit: r < 1.17525 @ 95%CL (1 toyMC)
   68% expected band : 1.17525 < r < 1.17525
   95% expected band : 1.17525 < r < 1.17525
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 523529739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37802 +/- 0.00413402 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.37802 @ 95%CL (1 toyMC)
median expected limit: r < 1.37802 @ 95%CL (1 toyMC)
   68% expected band : 1.37802 < r < 1.37802
   95% expected band : 1.37802 < r < 1.37802
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1424675648
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36821 +/- 0.0040529 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.36821 @ 95%CL (1 toyMC)
median expected limit: r < 1.36821 @ 95%CL (1 toyMC)
   68% expected band : 1.36821 < r < 1.36821
   95% expected band : 1.36821 < r < 1.36821
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1947839688
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.860436 +/- 0.00362267 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.860436 @ 95%CL (1 toyMC)
median expected limit: r < 0.860436 @ 95%CL (1 toyMC)
   68% expected band : 0.860436 < r < 0.860436
   95% expected band : 0.860436 < r < 0.860436
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1527073803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27758 +/- 0.00310427 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.27758 @ 95%CL (1 toyMC)
median expected limit: r < 1.27758 @ 95%CL (1 toyMC)
   68% expected band : 1.27758 < r < 1.27758
   95% expected band : 1.27758 < r < 1.27758
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1065220526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12065 +/- 0.00404709 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.12065 @ 95%CL (1 toyMC)
median expected limit: r < 1.12065 @ 95%CL (1 toyMC)
   68% expected band : 1.12065 < r < 1.12065
   95% expected band : 1.12065 < r < 1.12065
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1995301441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.907682 +/- 0.00362801 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.907682 @ 95%CL (1 toyMC)
median expected limit: r < 0.907682 @ 95%CL (1 toyMC)
   68% expected band : 0.907682 < r < 0.907682
   95% expected band : 0.907682 < r < 0.907682
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1443753044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.11303 +/- 0.00404388 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.11303 @ 95%CL (1 toyMC)
median expected limit: r < 2.11303 @ 95%CL (1 toyMC)
   68% expected band : 2.11303 < r < 2.11303
   95% expected band : 2.11303 < r < 2.11303
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 433513850
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27873 +/- 0.00404787 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.27873 @ 95%CL (1 toyMC)
median expected limit: r < 1.27873 @ 95%CL (1 toyMC)
   68% expected band : 1.27873 < r < 1.27873
   95% expected band : 1.27873 < r < 1.27873
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1171483152
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18972 +/- 0.00352029 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.18972 @ 95%CL (1 toyMC)
median expected limit: r < 1.18972 @ 95%CL (1 toyMC)
   68% expected band : 1.18972 < r < 1.18972
   95% expected band : 1.18972 < r < 1.18972
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -228016853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14773 +/- 0.00287039 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.14773 @ 95%CL (1 toyMC)
median expected limit: r < 1.14773 @ 95%CL (1 toyMC)
   68% expected band : 1.14773 < r < 1.14773
   95% expected band : 1.14773 < r < 1.14773
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1376793259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3219 +/- 0.00289312 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.3219 @ 95%CL (1 toyMC)
median expected limit: r < 1.3219 @ 95%CL (1 toyMC)
   68% expected band : 1.3219 < r < 1.3219
   95% expected band : 1.3219 < r < 1.3219
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -42141057
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.968205 +/- 0.00433825 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.968205 @ 95%CL (1 toyMC)
median expected limit: r < 0.968205 @ 95%CL (1 toyMC)
   68% expected band : 0.968205 < r < 0.968205
   95% expected band : 0.968205 < r < 0.968205
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -214419641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84385 +/- 0.00408653 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.84385 @ 95%CL (1 toyMC)
median expected limit: r < 1.84385 @ 95%CL (1 toyMC)
   68% expected band : 1.84385 < r < 1.84385
   95% expected band : 1.84385 < r < 1.84385
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 923037283
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.66778 +/- 0.00278232 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.66778 @ 95%CL (1 toyMC)
median expected limit: r < 0.66778 @ 95%CL (1 toyMC)
   68% expected band : 0.66778 < r < 0.66778
   95% expected band : 0.66778 < r < 0.66778
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1392235476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3703 +/- 0.00399701 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.3703 @ 95%CL (1 toyMC)
median expected limit: r < 1.3703 @ 95%CL (1 toyMC)
   68% expected band : 1.3703 < r < 1.3703
   95% expected band : 1.3703 < r < 1.3703
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1212657137
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08823 +/- 0.0042015 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.08823 @ 95%CL (1 toyMC)
median expected limit: r < 1.08823 @ 95%CL (1 toyMC)
   68% expected band : 1.08823 < r < 1.08823
   95% expected band : 1.08823 < r < 1.08823
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -456112008
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03394 +/- 0.00369837 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.03394 @ 95%CL (1 toyMC)
median expected limit: r < 1.03394 @ 95%CL (1 toyMC)
   68% expected band : 1.03394 < r < 1.03394
   95% expected band : 1.03394 < r < 1.03394
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1621722335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.785359 +/- 0.00335896 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.785359 @ 95%CL (1 toyMC)
median expected limit: r < 0.785359 @ 95%CL (1 toyMC)
   68% expected band : 0.785359 < r < 0.785359
   95% expected band : 0.785359 < r < 0.785359
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2014057375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14491 +/- 0.00346389 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.14491 @ 95%CL (1 toyMC)
median expected limit: r < 1.14491 @ 95%CL (1 toyMC)
   68% expected band : 1.14491 < r < 1.14491
   95% expected band : 1.14491 < r < 1.14491
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 692228821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43221 +/- 0.0035141 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.43221 @ 95%CL (1 toyMC)
median expected limit: r < 1.43221 @ 95%CL (1 toyMC)
   68% expected band : 1.43221 < r < 1.43221
   95% expected band : 1.43221 < r < 1.43221
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1045448333
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91792 +/- 0.00468426 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.91792 @ 95%CL (1 toyMC)
median expected limit: r < 1.91792 @ 95%CL (1 toyMC)
   68% expected band : 1.91792 < r < 1.91792
   95% expected band : 1.91792 < r < 1.91792
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1862880936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20618 +/- 0.00356454 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.20618 @ 95%CL (1 toyMC)
median expected limit: r < 1.20618 @ 95%CL (1 toyMC)
   68% expected band : 1.20618 < r < 1.20618
   95% expected band : 1.20618 < r < 1.20618
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1946637219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36782 +/- 0.00382544 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.36782 @ 95%CL (1 toyMC)
median expected limit: r < 1.36782 @ 95%CL (1 toyMC)
   68% expected band : 1.36782 < r < 1.36782
   95% expected band : 1.36782 < r < 1.36782
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 868454262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82355 +/- 0.00456076 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.82355 @ 95%CL (1 toyMC)
median expected limit: r < 1.82355 @ 95%CL (1 toyMC)
   68% expected band : 1.82355 < r < 1.82355
   95% expected band : 1.82355 < r < 1.82355
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1693565464
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36659 +/- 0.00417158 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.36659 @ 95%CL (1 toyMC)
median expected limit: r < 1.36659 @ 95%CL (1 toyMC)
   68% expected band : 1.36659 < r < 1.36659
   95% expected band : 1.36659 < r < 1.36659
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -511639090
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08119 +/- 0.00354449 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.08119 @ 95%CL (1 toyMC)
median expected limit: r < 1.08119 @ 95%CL (1 toyMC)
   68% expected band : 1.08119 < r < 1.08119
   95% expected band : 1.08119 < r < 1.08119
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 644335469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.741977 +/- 0.00284148 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.741977 @ 95%CL (1 toyMC)
median expected limit: r < 0.741977 @ 95%CL (1 toyMC)
   68% expected band : 0.741977 < r < 0.741977
   95% expected band : 0.741977 < r < 0.741977
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2037655285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.926209 +/- 0.00321049 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.926209 @ 95%CL (1 toyMC)
median expected limit: r < 0.926209 @ 95%CL (1 toyMC)
   68% expected band : 0.926209 < r < 0.926209
   95% expected band : 0.926209 < r < 0.926209
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -275009386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.955714 +/- 0.00324014 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.955714 @ 95%CL (1 toyMC)
median expected limit: r < 0.955714 @ 95%CL (1 toyMC)
   68% expected band : 0.955714 < r < 0.955714
   95% expected band : 0.955714 < r < 0.955714
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1472080581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.952671 +/- 0.00351008 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.952671 @ 95%CL (1 toyMC)
median expected limit: r < 0.952671 @ 95%CL (1 toyMC)
   68% expected band : 0.952671 < r < 0.952671
   95% expected band : 0.952671 < r < 0.952671
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -25486558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.11506 +/- 0.00483687 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.11506 @ 95%CL (1 toyMC)
median expected limit: r < 2.11506 @ 95%CL (1 toyMC)
   68% expected band : 2.11506 < r < 2.11506
   95% expected band : 2.11506 < r < 2.11506
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 807334978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.727313 +/- 0.00325386 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.727313 @ 95%CL (1 toyMC)
median expected limit: r < 0.727313 @ 95%CL (1 toyMC)
   68% expected band : 0.727313 < r < 0.727313
   95% expected band : 0.727313 < r < 0.727313
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -826982817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.984693 +/- 0.00414534 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.984693 @ 95%CL (1 toyMC)
median expected limit: r < 0.984693 @ 95%CL (1 toyMC)
   68% expected band : 0.984693 < r < 0.984693
   95% expected band : 0.984693 < r < 0.984693
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2088716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19341 +/- 0.00356171 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.19341 @ 95%CL (1 toyMC)
median expected limit: r < 1.19341 @ 95%CL (1 toyMC)
   68% expected band : 1.19341 < r < 1.19341
   95% expected band : 1.19341 < r < 1.19341
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1441142218
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.880343 +/- 0.00444396 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.880343 @ 95%CL (1 toyMC)
median expected limit: r < 0.880343 @ 95%CL (1 toyMC)
   68% expected band : 0.880343 < r < 0.880343
   95% expected band : 0.880343 < r < 0.880343
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1945112521
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18481 +/- 0.00348051 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.18481 @ 95%CL (1 toyMC)
median expected limit: r < 1.18481 @ 95%CL (1 toyMC)
   68% expected band : 1.18481 < r < 1.18481
   95% expected band : 1.18481 < r < 1.18481
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1524171409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0614 +/- 0.00337738 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.0614 @ 95%CL (1 toyMC)
median expected limit: r < 1.0614 @ 95%CL (1 toyMC)
   68% expected band : 1.0614 < r < 1.0614
   95% expected band : 1.0614 < r < 1.0614
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 26571265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02531 +/- 0.00329953 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 1.02531 @ 95%CL (1 toyMC)
median expected limit: r < 1.02531 @ 95%CL (1 toyMC)
   68% expected band : 1.02531 < r < 1.02531
   95% expected band : 1.02531 < r < 1.02531
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1059336053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.724661 +/- 0.00364478 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.724661 @ 95%CL (1 toyMC)
median expected limit: r < 0.724661 @ 95%CL (1 toyMC)
   68% expected band : 0.724661 < r < 0.724661
   95% expected band : 0.724661 < r < 0.724661
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1786414692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0817 +/- 0.0032043 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.0817 @ 95%CL (1 toyMC)
median expected limit: r < 1.0817 @ 95%CL (1 toyMC)
   68% expected band : 1.0817 < r < 1.0817
   95% expected band : 1.0817 < r < 1.0817
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 612425356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32717 +/- 0.00389752 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.32717 @ 95%CL (1 toyMC)
median expected limit: r < 1.32717 @ 95%CL (1 toyMC)
   68% expected band : 1.32717 < r < 1.32717
   95% expected band : 1.32717 < r < 1.32717
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1697064141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38078 +/- 0.00333447 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.38078 @ 95%CL (1 toyMC)
median expected limit: r < 1.38078 @ 95%CL (1 toyMC)
   68% expected band : 1.38078 < r < 1.38078
   95% expected band : 1.38078 < r < 1.38078
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1288796473
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.716775 +/- 0.00296238 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.716775 @ 95%CL (1 toyMC)
median expected limit: r < 0.716775 @ 95%CL (1 toyMC)
   68% expected band : 0.716775 < r < 0.716775
   95% expected band : 0.716775 < r < 0.716775
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -275549647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.913962 +/- 0.00387795 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.913962 @ 95%CL (1 toyMC)
median expected limit: r < 0.913962 @ 95%CL (1 toyMC)
   68% expected band : 0.913962 < r < 0.913962
   95% expected band : 0.913962 < r < 0.913962
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 877122634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53954 +/- 0.00442208 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.53954 @ 95%CL (1 toyMC)
median expected limit: r < 1.53954 @ 95%CL (1 toyMC)
   68% expected band : 1.53954 < r < 1.53954
   95% expected band : 1.53954 < r < 1.53954
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 633723166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27844 +/- 0.00515025 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.27844 @ 95%CL (1 toyMC)
median expected limit: r < 1.27844 @ 95%CL (1 toyMC)
   68% expected band : 1.27844 < r < 1.27844
   95% expected band : 1.27844 < r < 1.27844
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -356422547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.972107 +/- 0.00372625 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.972107 @ 95%CL (1 toyMC)
median expected limit: r < 0.972107 @ 95%CL (1 toyMC)
   68% expected band : 0.972107 < r < 0.972107
   95% expected band : 0.972107 < r < 0.972107
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1433408395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61717 +/- 0.00374412 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.61717 @ 95%CL (1 toyMC)
median expected limit: r < 1.61717 @ 95%CL (1 toyMC)
   68% expected band : 1.61717 < r < 1.61717
   95% expected band : 1.61717 < r < 1.61717
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 733995363
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37786 +/- 0.00368081 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.37786 @ 95%CL (1 toyMC)
median expected limit: r < 1.37786 @ 95%CL (1 toyMC)
   68% expected band : 1.37786 < r < 1.37786
   95% expected band : 1.37786 < r < 1.37786
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 341931119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3798 +/- 0.00363558 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.3798 @ 95%CL (1 toyMC)
median expected limit: r < 1.3798 @ 95%CL (1 toyMC)
   68% expected band : 1.3798 < r < 1.3798
   95% expected band : 1.3798 < r < 1.3798
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 533973195
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36498 +/- 0.00363067 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.36498 @ 95%CL (1 toyMC)
median expected limit: r < 1.36498 @ 95%CL (1 toyMC)
   68% expected band : 1.36498 < r < 1.36498
   95% expected band : 1.36498 < r < 1.36498
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1242772431
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.903156 +/- 0.00345051 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.903156 @ 95%CL (1 toyMC)
median expected limit: r < 0.903156 @ 95%CL (1 toyMC)
   68% expected band : 0.903156 < r < 0.903156
   95% expected band : 0.903156 < r < 0.903156
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -342573782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.73365 +/- 0.003599 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.73365 @ 95%CL (1 toyMC)
median expected limit: r < 0.73365 @ 95%CL (1 toyMC)
   68% expected band : 0.73365 < r < 0.73365
   95% expected band : 0.73365 < r < 0.73365
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1780187936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66908 +/- 0.00335479 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.66908 @ 95%CL (1 toyMC)
median expected limit: r < 1.66908 @ 95%CL (1 toyMC)
   68% expected band : 1.66908 < r < 1.66908
   95% expected band : 1.66908 < r < 1.66908
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -745981687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0619 +/- 0.00347046 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.0619 @ 95%CL (1 toyMC)
median expected limit: r < 1.0619 @ 95%CL (1 toyMC)
   68% expected band : 1.0619 < r < 1.0619
   95% expected band : 1.0619 < r < 1.0619
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1672708074
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.590163 +/- 0.00317941 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.590163 @ 95%CL (1 toyMC)
median expected limit: r < 0.590163 @ 95%CL (1 toyMC)
   68% expected band : 0.590163 < r < 0.590163
   95% expected band : 0.590163 < r < 0.590163
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1039138803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.606848 +/- 0.00305439 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.606848 @ 95%CL (1 toyMC)
median expected limit: r < 0.606848 @ 95%CL (1 toyMC)
   68% expected band : 0.606848 < r < 0.606848
   95% expected band : 0.606848 < r < 0.606848
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1390218589
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.675264 +/- 0.00294791 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.675264 @ 95%CL (1 toyMC)
median expected limit: r < 0.675264 @ 95%CL (1 toyMC)
   68% expected band : 0.675264 < r < 0.675264
   95% expected band : 0.675264 < r < 0.675264
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1388818743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.805918 +/- 0.0036916 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.805918 @ 95%CL (1 toyMC)
median expected limit: r < 0.805918 @ 95%CL (1 toyMC)
   68% expected band : 0.805918 < r < 0.805918
   95% expected band : 0.805918 < r < 0.805918
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 810573690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.9116 +/- 0.00316926 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.9116 @ 95%CL (1 toyMC)
median expected limit: r < 0.9116 @ 95%CL (1 toyMC)
   68% expected band : 0.9116 < r < 0.9116
   95% expected band : 0.9116 < r < 0.9116
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1879637721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26304 +/- 0.00375592 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.26304 @ 95%CL (1 toyMC)
median expected limit: r < 1.26304 @ 95%CL (1 toyMC)
   68% expected band : 1.26304 < r < 1.26304
   95% expected band : 1.26304 < r < 1.26304
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1093806037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12283 +/- 0.00376074 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.12283 @ 95%CL (1 toyMC)
median expected limit: r < 2.12283 @ 95%CL (1 toyMC)
   68% expected band : 2.12283 < r < 2.12283
   95% expected band : 2.12283 < r < 2.12283
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1156815098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1306 +/- 0.00383942 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.1306 @ 95%CL (1 toyMC)
median expected limit: r < 1.1306 @ 95%CL (1 toyMC)
   68% expected band : 1.1306 < r < 1.1306
   95% expected band : 1.1306 < r < 1.1306
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1849497975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25443 +/- 0.00377174 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.25443 @ 95%CL (1 toyMC)
median expected limit: r < 1.25443 @ 95%CL (1 toyMC)
   68% expected band : 1.25443 < r < 1.25443
   95% expected band : 1.25443 < r < 1.25443
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 324971397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00005 +/- 0.00372376 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.00005 @ 95%CL (1 toyMC)
median expected limit: r < 1.00005 @ 95%CL (1 toyMC)
   68% expected band : 1.00005 < r < 1.00005
   95% expected band : 1.00005 < r < 1.00005
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -462737015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39233 +/- 0.00334755 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.39233 @ 95%CL (1 toyMC)
median expected limit: r < 1.39233 @ 95%CL (1 toyMC)
   68% expected band : 1.39233 < r < 1.39233
   95% expected band : 1.39233 < r < 1.39233
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2085799184
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17309 +/- 0.00358659 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.17309 @ 95%CL (1 toyMC)
median expected limit: r < 1.17309 @ 95%CL (1 toyMC)
   68% expected band : 1.17309 < r < 1.17309
   95% expected band : 1.17309 < r < 1.17309
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 210002970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46154 +/- 0.00440358 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.46154 @ 95%CL (1 toyMC)
median expected limit: r < 1.46154 @ 95%CL (1 toyMC)
   68% expected band : 1.46154 < r < 1.46154
   95% expected band : 1.46154 < r < 1.46154
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1784268243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.876795 +/- 0.00290372 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.876795 @ 95%CL (1 toyMC)
median expected limit: r < 0.876795 @ 95%CL (1 toyMC)
   68% expected band : 0.876795 < r < 0.876795
   95% expected band : 0.876795 < r < 0.876795
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 407860557
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.977897 +/- 0.00386966 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.977897 @ 95%CL (1 toyMC)
median expected limit: r < 0.977897 @ 95%CL (1 toyMC)
   68% expected band : 0.977897 < r < 0.977897
   95% expected band : 0.977897 < r < 0.977897
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2086879698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.956169 +/- 0.00386103 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.956169 @ 95%CL (1 toyMC)
median expected limit: r < 0.956169 @ 95%CL (1 toyMC)
   68% expected band : 0.956169 < r < 0.956169
   95% expected band : 0.956169 < r < 0.956169
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 872455417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.45319 +/- 0.00388539 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.45319 @ 95%CL (1 toyMC)
median expected limit: r < 2.45319 @ 95%CL (1 toyMC)
   68% expected band : 2.45319 < r < 2.45319
   95% expected band : 2.45319 < r < 2.45319
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -777019007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00728 +/- 0.0042118 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.00728 @ 95%CL (1 toyMC)
median expected limit: r < 2.00728 @ 95%CL (1 toyMC)
   68% expected band : 2.00728 < r < 2.00728
   95% expected band : 2.00728 < r < 2.00728
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1960483921
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07331 +/- 0.00288393 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.07331 @ 95%CL (1 toyMC)
median expected limit: r < 1.07331 @ 95%CL (1 toyMC)
   68% expected band : 1.07331 < r < 1.07331
   95% expected band : 1.07331 < r < 1.07331
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 238374117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63821 +/- 0.00375652 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.63821 @ 95%CL (1 toyMC)
median expected limit: r < 1.63821 @ 95%CL (1 toyMC)
   68% expected band : 1.63821 < r < 1.63821
   95% expected band : 1.63821 < r < 1.63821
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -663706843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17021 +/- 0.00441205 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.17021 @ 95%CL (1 toyMC)
median expected limit: r < 1.17021 @ 95%CL (1 toyMC)
   68% expected band : 1.17021 < r < 1.17021
   95% expected band : 1.17021 < r < 1.17021
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1022711671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27087 +/- 0.00484861 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.27087 @ 95%CL (1 toyMC)
median expected limit: r < 1.27087 @ 95%CL (1 toyMC)
   68% expected band : 1.27087 < r < 1.27087
   95% expected band : 1.27087 < r < 1.27087
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 377879266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1858 +/- 0.00324647 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.1858 @ 95%CL (1 toyMC)
median expected limit: r < 1.1858 @ 95%CL (1 toyMC)
   68% expected band : 1.1858 < r < 1.1858
   95% expected band : 1.1858 < r < 1.1858
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 512786331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45912 +/- 0.00375656 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.45912 @ 95%CL (1 toyMC)
median expected limit: r < 1.45912 @ 95%CL (1 toyMC)
   68% expected band : 1.45912 < r < 1.45912
   95% expected band : 1.45912 < r < 1.45912
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -180635377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00672 +/- 0.00454949 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.00672 @ 95%CL (1 toyMC)
median expected limit: r < 1.00672 @ 95%CL (1 toyMC)
   68% expected band : 1.00672 < r < 1.00672
   95% expected band : 1.00672 < r < 1.00672
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2096219070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.83078 +/- 0.00283957 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.83078 @ 95%CL (1 toyMC)
median expected limit: r < 0.83078 @ 95%CL (1 toyMC)
   68% expected band : 0.83078 < r < 0.83078
   95% expected band : 0.83078 < r < 0.83078
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine32.MarkovChainMC.mH32.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH32.-1022711671.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH32.-1093806037.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH32.-1142779622.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH32.-1156815098.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH32.-1168037553.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH32.-1171483152.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH32.-1243333759.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH32.-1288796473.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH32.-1376793259.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH32.-1388818743.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH32.-1392235476.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH32.-1424675648.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH32.-1443753044.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH32.-1524171409.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH32.-1527073803.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH32.-1672708074.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH32.-1693565464.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH32.-1706449511.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH32.-1708813016.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH32.-1734019772.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH32.-1777469789.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH32.-1784268243.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH32.-1786414692.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH32.-180635377.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH32.-1862880936.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH32.-1879637721.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH32.-1945112521.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH32.-1947839688.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH32.-1995301441.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH32.-2088716.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH32.-2096219070.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH32.-2125906282.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH32.-214419641.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH32.-228016853.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH32.-25486558.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH32.-275009386.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH32.-275549647.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH32.-342573782.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH32.-356422547.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH32.-42141057.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH32.-456112008.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH32.-462737015.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH32.-511639090.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH32.-567044691.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH32.-663706843.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH32.-745981687.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH32.-777019007.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH32.-826982817.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH32.1039138803.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH32.1045448333.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH32.1059336053.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH32.1065220526.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH32.1212657137.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH32.1242772431.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH32.1390218589.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH32.1433408395.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH32.1441142218.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH32.1472080581.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH32.147214269.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH32.1511951328.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH32.1621722335.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH32.1656782877.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH32.1657025661.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH32.1697064141.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH32.1780187936.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH32.1849497975.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH32.1946637219.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH32.1960483921.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH32.2014057375.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH32.2037655285.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH32.2085799184.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH32.2086879698.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH32.210002970.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH32.227908981.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH32.238374117.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH32.26571265.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH32.324971397.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH32.341931119.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH32.377879266.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH32.380260362.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH32.407860557.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH32.433513850.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH32.512786331.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH32.523529739.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH32.533973195.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH32.612425356.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH32.633723166.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH32.644335469.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH32.66979007.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH32.692228821.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH32.733995363.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH32.804360894.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH32.807334978.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH32.810573690.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH32.863844278.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH32.868454262.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH32.872455417.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH32.877122634.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH32.923037283.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH32.953069372.root
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 573712788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16927 +/- 0.00645625 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.16927 @ 95%CL (1 toyMC)
median expected limit: r < 3.16927 @ 95%CL (1 toyMC)
   68% expected band : 3.16927 < r < 3.16927
   95% expected band : 3.16927 < r < 3.16927
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1403212828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52141 +/- 0.00519172 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.52141 @ 95%CL (1 toyMC)
median expected limit: r < 2.52141 @ 95%CL (1 toyMC)
   68% expected band : 2.52141 < r < 2.52141
   95% expected band : 2.52141 < r < 2.52141
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1699081369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6597 +/- 0.00578792 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.6597 @ 95%CL (1 toyMC)
median expected limit: r < 2.6597 @ 95%CL (1 toyMC)
   68% expected band : 2.6597 < r < 2.6597
   95% expected band : 2.6597 < r < 2.6597
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -10944797
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.50973 +/- 0.00443191 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 3.50973 @ 95%CL (1 toyMC)
median expected limit: r < 3.50973 @ 95%CL (1 toyMC)
   68% expected band : 3.50973 < r < 3.50973
   95% expected band : 3.50973 < r < 3.50973
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1613240331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88007 +/- 0.00587806 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.88007 @ 95%CL (1 toyMC)
median expected limit: r < 2.88007 @ 95%CL (1 toyMC)
   68% expected band : 2.88007 < r < 2.88007
   95% expected band : 2.88007 < r < 2.88007
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1509661247
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69731 +/- 0.00544517 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.69731 @ 95%CL (1 toyMC)
median expected limit: r < 1.69731 @ 95%CL (1 toyMC)
   68% expected band : 1.69731 < r < 1.69731
   95% expected band : 1.69731 < r < 1.69731
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2101645596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.49295 +/- 0.0114841 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 8.49295 @ 95%CL (1 toyMC)
median expected limit: r < 8.49295 @ 95%CL (1 toyMC)
   68% expected band : 8.49295 < r < 8.49295
   95% expected band : 8.49295 < r < 8.49295
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 995527039
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7962 +/- 0.00582865 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.7962 @ 95%CL (1 toyMC)
median expected limit: r < 2.7962 @ 95%CL (1 toyMC)
   68% expected band : 2.7962 < r < 2.7962
   95% expected band : 2.7962 < r < 2.7962
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1131941481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.4351 +/- 0.00411858 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 4.4351 @ 95%CL (1 toyMC)
median expected limit: r < 4.4351 @ 95%CL (1 toyMC)
   68% expected band : 4.4351 < r < 4.4351
   95% expected band : 4.4351 < r < 4.4351
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 879924139
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91997 +/- 0.00433512 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.91997 @ 95%CL (1 toyMC)
median expected limit: r < 2.91997 @ 95%CL (1 toyMC)
   68% expected band : 2.91997 < r < 2.91997
   95% expected band : 2.91997 < r < 2.91997
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 89537689
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.70459 +/- 0.00509814 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.70459 @ 95%CL (1 toyMC)
median expected limit: r < 2.70459 @ 95%CL (1 toyMC)
   68% expected band : 2.70459 < r < 2.70459
   95% expected band : 2.70459 < r < 2.70459
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 619057580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.6645 +/- 0.0068393 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.6645 @ 95%CL (1 toyMC)
median expected limit: r < 4.6645 @ 95%CL (1 toyMC)
   68% expected band : 4.6645 < r < 4.6645
   95% expected band : 4.6645 < r < 4.6645
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 30909129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.23292 +/- 0.00563151 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.23292 @ 95%CL (1 toyMC)
median expected limit: r < 2.23292 @ 95%CL (1 toyMC)
   68% expected band : 2.23292 < r < 2.23292
   95% expected band : 2.23292 < r < 2.23292
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -510559288
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.37334 +/- 0.00482348 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.37334 @ 95%CL (1 toyMC)
median expected limit: r < 2.37334 @ 95%CL (1 toyMC)
   68% expected band : 2.37334 < r < 2.37334
   95% expected band : 2.37334 < r < 2.37334
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -154332200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.56553 +/- 0.00504152 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 3.56553 @ 95%CL (1 toyMC)
median expected limit: r < 3.56553 @ 95%CL (1 toyMC)
   68% expected band : 3.56553 < r < 3.56553
   95% expected band : 3.56553 < r < 3.56553
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 375130220
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.95559 +/- 0.0060429 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.95559 @ 95%CL (1 toyMC)
median expected limit: r < 3.95559 @ 95%CL (1 toyMC)
   68% expected band : 3.95559 < r < 3.95559
   95% expected band : 3.95559 < r < 3.95559
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1214610199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65577 +/- 0.00522776 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.65577 @ 95%CL (1 toyMC)
median expected limit: r < 1.65577 @ 95%CL (1 toyMC)
   68% expected band : 1.65577 < r < 1.65577
   95% expected band : 1.65577 < r < 1.65577
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1030566178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.02223 +/- 0.0059506 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.02223 @ 95%CL (1 toyMC)
median expected limit: r < 3.02223 @ 95%CL (1 toyMC)
   68% expected band : 3.02223 < r < 3.02223
   95% expected band : 3.02223 < r < 3.02223
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1138485100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.70277 +/- 0.00707818 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.70277 @ 95%CL (1 toyMC)
median expected limit: r < 3.70277 @ 95%CL (1 toyMC)
   68% expected band : 3.70277 < r < 3.70277
   95% expected band : 3.70277 < r < 3.70277
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 425737136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77334 +/- 0.00539738 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.77334 @ 95%CL (1 toyMC)
median expected limit: r < 2.77334 @ 95%CL (1 toyMC)
   68% expected band : 2.77334 < r < 2.77334
   95% expected band : 2.77334 < r < 2.77334
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1995421282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.96875 +/- 0.00830601 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.46 min (real)
mean   expected limit: r < 5.96875 @ 95%CL (1 toyMC)
median expected limit: r < 5.96875 @ 95%CL (1 toyMC)
   68% expected band : 5.96875 < r < 5.96875
   95% expected band : 5.96875 < r < 5.96875
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -435403816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.81917 +/- 0.00415647 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.81917 @ 95%CL (1 toyMC)
median expected limit: r < 2.81917 @ 95%CL (1 toyMC)
   68% expected band : 2.81917 < r < 2.81917
   95% expected band : 2.81917 < r < 2.81917
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 830030767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.74688 +/- 0.0069768 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.74688 @ 95%CL (1 toyMC)
median expected limit: r < 4.74688 @ 95%CL (1 toyMC)
   68% expected band : 4.74688 < r < 4.74688
   95% expected band : 4.74688 < r < 4.74688
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1693921910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64385 +/- 0.00559142 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.64385 @ 95%CL (1 toyMC)
median expected limit: r < 3.64385 @ 95%CL (1 toyMC)
   68% expected band : 3.64385 < r < 3.64385
   95% expected band : 3.64385 < r < 3.64385
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 525807431
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84278 +/- 0.0038517 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.84278 @ 95%CL (1 toyMC)
median expected limit: r < 1.84278 @ 95%CL (1 toyMC)
   68% expected band : 1.84278 < r < 1.84278
   95% expected band : 1.84278 < r < 1.84278
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2103038685
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.56719 +/- 0.00616908 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 5.56719 @ 95%CL (1 toyMC)
median expected limit: r < 5.56719 @ 95%CL (1 toyMC)
   68% expected band : 5.56719 < r < 5.56719
   95% expected band : 5.56719 < r < 5.56719
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1503518281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.07808 +/- 0.00727242 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.07808 @ 95%CL (1 toyMC)
median expected limit: r < 4.07808 @ 95%CL (1 toyMC)
   68% expected band : 4.07808 < r < 4.07808
   95% expected band : 4.07808 < r < 4.07808
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 484057395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13671 +/- 0.00596082 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.13671 @ 95%CL (1 toyMC)
median expected limit: r < 2.13671 @ 95%CL (1 toyMC)
   68% expected band : 2.13671 < r < 2.13671
   95% expected band : 2.13671 < r < 2.13671
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 442776264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.19867 +/- 0.00598295 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.19867 @ 95%CL (1 toyMC)
median expected limit: r < 2.19867 @ 95%CL (1 toyMC)
   68% expected band : 2.19867 < r < 2.19867
   95% expected band : 2.19867 < r < 2.19867
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1398451042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.34874 +/- 0.00590079 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.34874 @ 95%CL (1 toyMC)
median expected limit: r < 2.34874 @ 95%CL (1 toyMC)
   68% expected band : 2.34874 < r < 2.34874
   95% expected band : 2.34874 < r < 2.34874
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2089874380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.45007 +/- 0.00684868 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 5.45007 @ 95%CL (1 toyMC)
median expected limit: r < 5.45007 @ 95%CL (1 toyMC)
   68% expected band : 5.45007 < r < 5.45007
   95% expected band : 5.45007 < r < 5.45007
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2015153941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12446 +/- 0.00523056 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.12446 @ 95%CL (1 toyMC)
median expected limit: r < 3.12446 @ 95%CL (1 toyMC)
   68% expected band : 3.12446 < r < 3.12446
   95% expected band : 3.12446 < r < 3.12446
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 761872870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33624 +/- 0.00687398 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.33624 @ 95%CL (1 toyMC)
median expected limit: r < 2.33624 @ 95%CL (1 toyMC)
   68% expected band : 2.33624 < r < 2.33624
   95% expected band : 2.33624 < r < 2.33624
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1107314768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.44732 +/- 0.0055341 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.44732 @ 95%CL (1 toyMC)
median expected limit: r < 2.44732 @ 95%CL (1 toyMC)
   68% expected band : 2.44732 < r < 2.44732
   95% expected band : 2.44732 < r < 2.44732
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 558016491
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.39225 +/- 0.00581009 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.39225 @ 95%CL (1 toyMC)
median expected limit: r < 3.39225 @ 95%CL (1 toyMC)
   68% expected band : 3.39225 < r < 3.39225
   95% expected band : 3.39225 < r < 3.39225
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1132488334
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.09038 +/- 0.00830679 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 8.09038 @ 95%CL (1 toyMC)
median expected limit: r < 8.09038 @ 95%CL (1 toyMC)
   68% expected band : 8.09038 < r < 8.09038
   95% expected band : 8.09038 < r < 8.09038
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -500715059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.1822 +/- 0.00535582 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.1822 @ 95%CL (1 toyMC)
median expected limit: r < 2.1822 @ 95%CL (1 toyMC)
   68% expected band : 2.1822 < r < 2.1822
   95% expected band : 2.1822 < r < 2.1822
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -187542223
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.2905 +/- 0.00674932 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 4.2905 @ 95%CL (1 toyMC)
median expected limit: r < 4.2905 @ 95%CL (1 toyMC)
   68% expected band : 4.2905 < r < 4.2905
   95% expected band : 4.2905 < r < 4.2905
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -825914624
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.4539 +/- 0.00696611 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 5.4539 @ 95%CL (1 toyMC)
median expected limit: r < 5.4539 @ 95%CL (1 toyMC)
   68% expected band : 5.4539 < r < 5.4539
   95% expected band : 5.4539 < r < 5.4539
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -540734556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.16299 +/- 0.00479142 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.16299 @ 95%CL (1 toyMC)
median expected limit: r < 2.16299 @ 95%CL (1 toyMC)
   68% expected band : 2.16299 < r < 2.16299
   95% expected band : 2.16299 < r < 2.16299
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -891061441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.59127 +/- 0.00683778 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 3.59127 @ 95%CL (1 toyMC)
median expected limit: r < 3.59127 @ 95%CL (1 toyMC)
   68% expected band : 3.59127 < r < 3.59127
   95% expected band : 3.59127 < r < 3.59127
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1713792819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04968 +/- 0.00478405 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 3.04968 @ 95%CL (1 toyMC)
median expected limit: r < 3.04968 @ 95%CL (1 toyMC)
   68% expected band : 3.04968 < r < 3.04968
   95% expected band : 3.04968 < r < 3.04968
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 369067380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89992 +/- 0.00686063 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.89992 @ 95%CL (1 toyMC)
median expected limit: r < 3.89992 @ 95%CL (1 toyMC)
   68% expected band : 3.89992 < r < 3.89992
   95% expected band : 3.89992 < r < 3.89992
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -678651535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.33614 +/- 0.0068465 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 4.33614 @ 95%CL (1 toyMC)
median expected limit: r < 4.33614 @ 95%CL (1 toyMC)
   68% expected band : 4.33614 < r < 4.33614
   95% expected band : 4.33614 < r < 4.33614
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 392004129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22746 +/- 0.00586695 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.22746 @ 95%CL (1 toyMC)
median expected limit: r < 3.22746 @ 95%CL (1 toyMC)
   68% expected band : 3.22746 < r < 3.22746
   95% expected band : 3.22746 < r < 3.22746
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1492287805
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33373 +/- 0.00633787 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 3.33373 @ 95%CL (1 toyMC)
median expected limit: r < 3.33373 @ 95%CL (1 toyMC)
   68% expected band : 3.33373 < r < 3.33373
   95% expected band : 3.33373 < r < 3.33373
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 478965633
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.76918 +/- 0.00686266 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.76918 @ 95%CL (1 toyMC)
median expected limit: r < 4.76918 @ 95%CL (1 toyMC)
   68% expected band : 4.76918 < r < 4.76918
   95% expected band : 4.76918 < r < 4.76918
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 414993288
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76258 +/- 0.0048512 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.76258 @ 95%CL (1 toyMC)
median expected limit: r < 1.76258 @ 95%CL (1 toyMC)
   68% expected band : 1.76258 < r < 1.76258
   95% expected band : 1.76258 < r < 1.76258
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -817197231
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.30714 +/- 0.00567799 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.30714 @ 95%CL (1 toyMC)
median expected limit: r < 2.30714 @ 95%CL (1 toyMC)
   68% expected band : 2.30714 < r < 2.30714
   95% expected band : 2.30714 < r < 2.30714
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -178893012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.34612 +/- 0.00618663 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.34612 @ 95%CL (1 toyMC)
median expected limit: r < 2.34612 @ 95%CL (1 toyMC)
   68% expected band : 2.34612 < r < 2.34612
   95% expected band : 2.34612 < r < 2.34612
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1031473604
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.08173 +/- 0.00587199 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.08173 @ 95%CL (1 toyMC)
median expected limit: r < 4.08173 @ 95%CL (1 toyMC)
   68% expected band : 4.08173 < r < 4.08173
   95% expected band : 4.08173 < r < 4.08173
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1523612931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62407 +/- 0.00705844 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.62407 @ 95%CL (1 toyMC)
median expected limit: r < 2.62407 @ 95%CL (1 toyMC)
   68% expected band : 2.62407 < r < 2.62407
   95% expected band : 2.62407 < r < 2.62407
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 341263121
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67263 +/- 0.0054279 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.67263 @ 95%CL (1 toyMC)
median expected limit: r < 2.67263 @ 95%CL (1 toyMC)
   68% expected band : 2.67263 < r < 2.67263
   95% expected band : 2.67263 < r < 2.67263
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1927089148
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.51362 +/- 0.00507935 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.51362 @ 95%CL (1 toyMC)
median expected limit: r < 2.51362 @ 95%CL (1 toyMC)
   68% expected band : 2.51362 < r < 2.51362
   95% expected band : 2.51362 < r < 2.51362
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -480059832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.97853 +/- 0.0060848 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 3.97853 @ 95%CL (1 toyMC)
median expected limit: r < 3.97853 @ 95%CL (1 toyMC)
   68% expected band : 3.97853 < r < 3.97853
   95% expected band : 3.97853 < r < 3.97853
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -979124397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.64485 +/- 0.00586928 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 4.64485 @ 95%CL (1 toyMC)
median expected limit: r < 4.64485 @ 95%CL (1 toyMC)
   68% expected band : 4.64485 < r < 4.64485
   95% expected band : 4.64485 < r < 4.64485
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -386064575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.17381 +/- 0.00544848 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 4.17381 @ 95%CL (1 toyMC)
median expected limit: r < 4.17381 @ 95%CL (1 toyMC)
   68% expected band : 4.17381 < r < 4.17381
   95% expected band : 4.17381 < r < 4.17381
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1947617163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.21371 +/- 0.00664068 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 4.21371 @ 95%CL (1 toyMC)
median expected limit: r < 4.21371 @ 95%CL (1 toyMC)
   68% expected band : 4.21371 < r < 4.21371
   95% expected band : 4.21371 < r < 4.21371
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1776504924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.86435 +/- 0.00721365 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.86435 @ 95%CL (1 toyMC)
median expected limit: r < 3.86435 @ 95%CL (1 toyMC)
   68% expected band : 3.86435 < r < 3.86435
   95% expected band : 3.86435 < r < 3.86435
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1631257303
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65182 +/- 0.00662176 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.65182 @ 95%CL (1 toyMC)
median expected limit: r < 2.65182 @ 95%CL (1 toyMC)
   68% expected band : 2.65182 < r < 2.65182
   95% expected band : 2.65182 < r < 2.65182
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 341439580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.61446 +/- 0.00736865 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.61446 @ 95%CL (1 toyMC)
median expected limit: r < 3.61446 @ 95%CL (1 toyMC)
   68% expected band : 3.61446 < r < 3.61446
   95% expected band : 3.61446 < r < 3.61446
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1567135579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.02391 +/- 0.00562459 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.02391 @ 95%CL (1 toyMC)
median expected limit: r < 4.02391 @ 95%CL (1 toyMC)
   68% expected band : 4.02391 < r < 4.02391
   95% expected band : 4.02391 < r < 4.02391
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2142345224
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.93309 +/- 0.0052938 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.93309 @ 95%CL (1 toyMC)
median expected limit: r < 1.93309 @ 95%CL (1 toyMC)
   68% expected band : 1.93309 < r < 1.93309
   95% expected band : 1.93309 < r < 1.93309
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1531223510
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.36824 +/- 0.00508855 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.36824 @ 95%CL (1 toyMC)
median expected limit: r < 2.36824 @ 95%CL (1 toyMC)
   68% expected band : 2.36824 < r < 2.36824
   95% expected band : 2.36824 < r < 2.36824
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1886779393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.89207 +/- 0.00608039 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.89207 @ 95%CL (1 toyMC)
median expected limit: r < 2.89207 @ 95%CL (1 toyMC)
   68% expected band : 2.89207 < r < 2.89207
   95% expected band : 2.89207 < r < 2.89207
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 241890301
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5811 +/- 0.00648553 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.5811 @ 95%CL (1 toyMC)
median expected limit: r < 2.5811 @ 95%CL (1 toyMC)
   68% expected band : 2.5811 < r < 2.5811
   95% expected band : 2.5811 < r < 2.5811
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1495868974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.34452 +/- 0.00662364 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.34452 @ 95%CL (1 toyMC)
median expected limit: r < 3.34452 @ 95%CL (1 toyMC)
   68% expected band : 3.34452 < r < 3.34452
   95% expected band : 3.34452 < r < 3.34452
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1362545672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66245 +/- 0.00543272 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.66245 @ 95%CL (1 toyMC)
median expected limit: r < 2.66245 @ 95%CL (1 toyMC)
   68% expected band : 2.66245 < r < 2.66245
   95% expected band : 2.66245 < r < 2.66245
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 45236564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.71064 +/- 0.00586146 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.71064 @ 95%CL (1 toyMC)
median expected limit: r < 4.71064 @ 95%CL (1 toyMC)
   68% expected band : 4.71064 < r < 4.71064
   95% expected band : 4.71064 < r < 4.71064
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -167574628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28066 +/- 0.00558313 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.28066 @ 95%CL (1 toyMC)
median expected limit: r < 2.28066 @ 95%CL (1 toyMC)
   68% expected band : 2.28066 < r < 2.28066
   95% expected band : 2.28066 < r < 2.28066
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 614294211
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.75575 +/- 0.00556032 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.75575 @ 95%CL (1 toyMC)
median expected limit: r < 1.75575 @ 95%CL (1 toyMC)
   68% expected band : 1.75575 < r < 1.75575
   95% expected band : 1.75575 < r < 1.75575
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1000922213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.40043 +/- 0.00666673 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 3.40043 @ 95%CL (1 toyMC)
median expected limit: r < 3.40043 @ 95%CL (1 toyMC)
   68% expected band : 3.40043 < r < 3.40043
   95% expected band : 3.40043 < r < 3.40043
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -625415055
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.45894 +/- 0.00625369 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.45894 @ 95%CL (1 toyMC)
median expected limit: r < 4.45894 @ 95%CL (1 toyMC)
   68% expected band : 4.45894 < r < 4.45894
   95% expected band : 4.45894 < r < 4.45894
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2093331302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44656 +/- 0.00441971 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.44656 @ 95%CL (1 toyMC)
median expected limit: r < 1.44656 @ 95%CL (1 toyMC)
   68% expected band : 1.44656 < r < 1.44656
   95% expected band : 1.44656 < r < 1.44656
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1867192332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64588 +/- 0.00486382 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.64588 @ 95%CL (1 toyMC)
median expected limit: r < 2.64588 @ 95%CL (1 toyMC)
   68% expected band : 2.64588 < r < 2.64588
   95% expected band : 2.64588 < r < 2.64588
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1678861990
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.29812 +/- 0.00702057 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 3.29812 @ 95%CL (1 toyMC)
median expected limit: r < 3.29812 @ 95%CL (1 toyMC)
   68% expected band : 3.29812 < r < 3.29812
   95% expected band : 3.29812 < r < 3.29812
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1647503023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.57686 +/- 0.00789923 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.57686 @ 95%CL (1 toyMC)
median expected limit: r < 4.57686 @ 95%CL (1 toyMC)
   68% expected band : 4.57686 < r < 4.57686
   95% expected band : 4.57686 < r < 4.57686
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1478475296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.44462 +/- 0.0059967 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.44462 @ 95%CL (1 toyMC)
median expected limit: r < 2.44462 @ 95%CL (1 toyMC)
   68% expected band : 2.44462 < r < 2.44462
   95% expected band : 2.44462 < r < 2.44462
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1408521478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.39708 +/- 0.00725684 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 3.39708 @ 95%CL (1 toyMC)
median expected limit: r < 3.39708 @ 95%CL (1 toyMC)
   68% expected band : 3.39708 < r < 3.39708
   95% expected band : 3.39708 < r < 3.39708
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1497167564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.08194 +/- 0.00521414 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.08194 @ 95%CL (1 toyMC)
median expected limit: r < 2.08194 @ 95%CL (1 toyMC)
   68% expected band : 2.08194 < r < 2.08194
   95% expected band : 2.08194 < r < 2.08194
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1809072291
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28236 +/- 0.00535625 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.28236 @ 95%CL (1 toyMC)
median expected limit: r < 2.28236 @ 95%CL (1 toyMC)
   68% expected band : 2.28236 < r < 2.28236
   95% expected band : 2.28236 < r < 2.28236
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1546385300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.09415 +/- 0.00589993 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 5.09415 @ 95%CL (1 toyMC)
median expected limit: r < 5.09415 @ 95%CL (1 toyMC)
   68% expected band : 5.09415 < r < 5.09415
   95% expected band : 5.09415 < r < 5.09415
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1826747956
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10954 +/- 0.00586961 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.10954 @ 95%CL (1 toyMC)
median expected limit: r < 3.10954 @ 95%CL (1 toyMC)
   68% expected band : 3.10954 < r < 3.10954
   95% expected band : 3.10954 < r < 3.10954
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1404709533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.56844 +/- 0.00582046 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 3.56844 @ 95%CL (1 toyMC)
median expected limit: r < 3.56844 @ 95%CL (1 toyMC)
   68% expected band : 3.56844 < r < 3.56844
   95% expected band : 3.56844 < r < 3.56844
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 912293243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45289 +/- 0.00509625 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.45289 @ 95%CL (1 toyMC)
median expected limit: r < 1.45289 @ 95%CL (1 toyMC)
   68% expected band : 1.45289 < r < 1.45289
   95% expected band : 1.45289 < r < 1.45289
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1135330961
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6957 +/- 0.00481901 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.6957 @ 95%CL (1 toyMC)
median expected limit: r < 1.6957 @ 95%CL (1 toyMC)
   68% expected band : 1.6957 < r < 1.6957
   95% expected band : 1.6957 < r < 1.6957
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 212618808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33843 +/- 0.0063317 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.33843 @ 95%CL (1 toyMC)
median expected limit: r < 2.33843 @ 95%CL (1 toyMC)
   68% expected band : 2.33843 < r < 2.33843
   95% expected band : 2.33843 < r < 2.33843
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -23868996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.61643 +/- 0.00517545 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.61643 @ 95%CL (1 toyMC)
median expected limit: r < 2.61643 @ 95%CL (1 toyMC)
   68% expected band : 2.61643 < r < 2.61643
   95% expected band : 2.61643 < r < 2.61643
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 808198926
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.20283 +/- 0.00442263 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.20283 @ 95%CL (1 toyMC)
median expected limit: r < 2.20283 @ 95%CL (1 toyMC)
   68% expected band : 2.20283 < r < 2.20283
   95% expected band : 2.20283 < r < 2.20283
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1803761342
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39625 +/- 0.00479027 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.39625 @ 95%CL (1 toyMC)
median expected limit: r < 2.39625 @ 95%CL (1 toyMC)
   68% expected band : 2.39625 < r < 2.39625
   95% expected band : 2.39625 < r < 2.39625
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1501261004
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.88468 +/- 0.00559381 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.88468 @ 95%CL (1 toyMC)
median expected limit: r < 1.88468 @ 95%CL (1 toyMC)
   68% expected band : 1.88468 < r < 1.88468
   95% expected band : 1.88468 < r < 1.88468
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1050781515
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.61621 +/- 0.00623595 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.61621 @ 95%CL (1 toyMC)
median expected limit: r < 4.61621 @ 95%CL (1 toyMC)
   68% expected band : 4.61621 < r < 4.61621
   95% expected band : 4.61621 < r < 4.61621
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1943781615
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50381 +/- 0.00537798 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.50381 @ 95%CL (1 toyMC)
median expected limit: r < 2.50381 @ 95%CL (1 toyMC)
   68% expected band : 2.50381 < r < 2.50381
   95% expected band : 2.50381 < r < 2.50381
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1418333955
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66126 +/- 0.0039451 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.66126 @ 95%CL (1 toyMC)
median expected limit: r < 1.66126 @ 95%CL (1 toyMC)
   68% expected band : 1.66126 < r < 1.66126
   95% expected band : 1.66126 < r < 1.66126
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1052750882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.14029 +/- 0.00870695 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 5.14029 @ 95%CL (1 toyMC)
median expected limit: r < 5.14029 @ 95%CL (1 toyMC)
   68% expected band : 5.14029 < r < 5.14029
   95% expected band : 5.14029 < r < 5.14029
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -848410042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.53853 +/- 0.00664487 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.53853 @ 95%CL (1 toyMC)
median expected limit: r < 4.53853 @ 95%CL (1 toyMC)
   68% expected band : 4.53853 < r < 4.53853
   95% expected band : 4.53853 < r < 4.53853
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -624775010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.27437 +/- 0.00725447 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 4.27437 @ 95%CL (1 toyMC)
median expected limit: r < 4.27437 @ 95%CL (1 toyMC)
   68% expected band : 4.27437 < r < 4.27437
   95% expected band : 4.27437 < r < 4.27437
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 299056780
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49467 +/- 0.00601203 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.49467 @ 95%CL (1 toyMC)
median expected limit: r < 2.49467 @ 95%CL (1 toyMC)
   68% expected band : 2.49467 < r < 2.49467
   95% expected band : 2.49467 < r < 2.49467
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 793810455
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65174 +/- 0.00710814 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.65174 @ 95%CL (1 toyMC)
median expected limit: r < 3.65174 @ 95%CL (1 toyMC)
   68% expected band : 3.65174 < r < 3.65174
   95% expected band : 3.65174 < r < 3.65174
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1931954894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.49098 +/- 0.00763336 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.49098 @ 95%CL (1 toyMC)
median expected limit: r < 3.49098 @ 95%CL (1 toyMC)
   68% expected band : 3.49098 < r < 3.49098
   95% expected band : 3.49098 < r < 3.49098
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine40.MarkovChainMC.mH40.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH40.-1030566178.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH40.-10944797.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH40.-1131941481.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH40.-1214610199.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH40.-1418333955.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH40.-1492287805.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH40.-1495868974.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH40.-1501261004.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH40.-1503518281.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH40.-1509661247.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH40.-1523612931.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH40.-154332200.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH40.-1546385300.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH40.-1613240331.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH40.-167574628.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH40.-1699081369.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH40.-1713792819.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH40.-1776504924.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH40.-178893012.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH40.-1803761342.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH40.-1826747956.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH40.-1867192332.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH40.-187542223.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH40.-1886779393.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH40.-1927089148.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH40.-1943781615.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH40.-2101645596.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH40.-2103038685.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH40.-23868996.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH40.-386064575.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH40.-435403816.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH40.-480059832.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH40.-500715059.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH40.-510559288.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH40.-540734556.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH40.-624775010.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH40.-625415055.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH40.-678651535.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH40.-817197231.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH40.-825914624.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH40.-848410042.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH40.-891061441.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH40.-979124397.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH40.1000922213.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH40.1031473604.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH40.1050781515.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH40.1052750882.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH40.1107314768.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH40.1132488334.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH40.1135330961.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH40.1138485100.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH40.1362545672.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH40.1398451042.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH40.1403212828.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH40.1404709533.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH40.1408521478.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH40.1478475296.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH40.1497167564.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH40.1531223510.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH40.1567135579.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH40.1631257303.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH40.1647503023.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH40.1678861990.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH40.1693921910.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH40.1809072291.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH40.1931954894.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH40.1947617163.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH40.1995421282.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH40.2015153941.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH40.2089874380.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH40.2093331302.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH40.212618808.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH40.2142345224.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH40.241890301.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH40.299056780.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH40.30909129.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH40.341263121.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH40.341439580.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH40.369067380.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH40.375130220.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH40.392004129.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH40.414993288.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH40.425737136.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH40.442776264.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH40.45236564.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH40.478965633.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH40.484057395.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH40.525807431.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH40.558016491.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH40.573712788.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH40.614294211.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH40.619057580.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH40.761872870.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH40.793810455.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH40.808198926.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH40.830030767.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH40.879924139.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH40.89537689.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH40.912293243.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH40.995527039.root
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/toys
