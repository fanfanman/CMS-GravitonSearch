 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1769375656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.153828 +/- 0.00327949 @ 95% CL (94 tries)
Done in 2.14 min (cpu), 2.16 min (real)
mean   expected limit: r < 0.153828 @ 95%CL (1 toyMC)
median expected limit: r < 0.153828 @ 95%CL (1 toyMC)
   68% expected band : 0.153828 < r < 0.153828
   95% expected band : 0.153828 < r < 0.153828
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -12798753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.166518 +/- 0.00277714 @ 95% CL (98 tries)
Done in 1.11 min (cpu), 1.12 min (real)
mean   expected limit: r < 0.166518 @ 95%CL (1 toyMC)
median expected limit: r < 0.166518 @ 95%CL (1 toyMC)
   68% expected band : 0.166518 < r < 0.166518
   95% expected band : 0.166518 < r < 0.166518
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2058331971
Generate toy 1/1
Done in 33.33 min (cpu), 33.53 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 892285627
Generate toy 1/1
Done in 34.45 min (cpu), 34.65 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2018780343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194477 +/- 0.00158405 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.194477 @ 95%CL (1 toyMC)
median expected limit: r < 0.194477 @ 95%CL (1 toyMC)
   68% expected band : 0.194477 < r < 0.194477
   95% expected band : 0.194477 < r < 0.194477
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1917861659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0489 +/- 4.45025 @ 95% CL (6 tries)
Done in 32.78 min (cpu), 32.98 min (real)
mean   expected limit: r < 10.0489 @ 95%CL (1 toyMC)
median expected limit: r < 10.0489 @ 95%CL (1 toyMC)
   68% expected band : 10.0489 < r < 10.0489
   95% expected band : 10.0489 < r < 10.0489
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 454727818
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.153029 +/- 0.00357525 @ 95% CL (93 tries)
Done in 2.22 min (cpu), 2.24 min (real)
mean   expected limit: r < 0.153029 @ 95%CL (1 toyMC)
median expected limit: r < 0.153029 @ 95%CL (1 toyMC)
   68% expected band : 0.153029 < r < 0.153029
   95% expected band : 0.153029 < r < 0.153029
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1386568562
Generate toy 1/1
Done in 34.40 min (cpu), 34.58 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1815791056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.160486 +/- 0.00270664 @ 95% CL (92 tries)
Done in 2.85 min (cpu), 2.86 min (real)
mean   expected limit: r < 0.160486 @ 95%CL (1 toyMC)
median expected limit: r < 0.160486 @ 95%CL (1 toyMC)
   68% expected band : 0.160486 < r < 0.160486
   95% expected band : 0.160486 < r < 0.160486
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -456020564
Generate toy 1/1
Done in 33.69 min (cpu), 33.82 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1217069038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240654 +/- 0.00217061 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.240654 @ 95%CL (1 toyMC)
median expected limit: r < 0.240654 @ 95%CL (1 toyMC)
   68% expected band : 0.240654 < r < 0.240654
   95% expected band : 0.240654 < r < 0.240654
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 902823358
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.156886 +/- 0.00379491 @ 95% CL (93 tries)
Done in 2.12 min (cpu), 2.13 min (real)
mean   expected limit: r < 0.156886 @ 95%CL (1 toyMC)
median expected limit: r < 0.156886 @ 95%CL (1 toyMC)
   68% expected band : 0.156886 < r < 0.156886
   95% expected band : 0.156886 < r < 0.156886
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 668986164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.152632 +/- 0.00395481 @ 95% CL (85 tries)
Done in 5.21 min (cpu), 5.23 min (real)
mean   expected limit: r < 0.152632 @ 95%CL (1 toyMC)
median expected limit: r < 0.152632 @ 95%CL (1 toyMC)
   68% expected band : 0.152632 < r < 0.152632
   95% expected band : 0.152632 < r < 0.152632
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1557233753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0955 +/- 9.90445 @ 95% CL (2 tries)
Done in 30.55 min (cpu), 30.64 min (real)
mean   expected limit: r < 10.0955 @ 95%CL (1 toyMC)
median expected limit: r < 10.0955 @ 95%CL (1 toyMC)
   68% expected band : 10.0955 < r < 10.0955
   95% expected band : 10.0955 < r < 10.0955
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1961447845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20351 +/- 0.00304083 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.20351 @ 95%CL (1 toyMC)
median expected limit: r < 0.20351 @ 95%CL (1 toyMC)
   68% expected band : 0.20351 < r < 0.20351
   95% expected band : 0.20351 < r < 0.20351
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1370728862
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.168287 +/- 0.00367816 @ 95% CL (99 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.168287 @ 95%CL (1 toyMC)
median expected limit: r < 0.168287 @ 95%CL (1 toyMC)
   68% expected band : 0.168287 < r < 0.168287
   95% expected band : 0.168287 < r < 0.168287
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2098120505
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.179258 +/- 0.00234581 @ 95% CL (100 tries)
Done in 0.69 min (cpu), 0.69 min (real)
mean   expected limit: r < 0.179258 @ 95%CL (1 toyMC)
median expected limit: r < 0.179258 @ 95%CL (1 toyMC)
   68% expected band : 0.179258 < r < 0.179258
   95% expected band : 0.179258 < r < 0.179258
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 509835915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11111e+29 +/- 1.11111e+29 @ 95% CL (9 tries)
Done in 30.47 min (cpu), 30.58 min (real)
mean   expected limit: r < 1.11111e+29 @ 95%CL (1 toyMC)
median expected limit: r < 1.11111e+29 @ 95%CL (1 toyMC)
   68% expected band : 1.11111e+29 < r < 1.11111e+29
   95% expected band : 1.11111e+29 < r < 1.11111e+29
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1469591740
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.18065 +/- 0.00201237 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.18065 @ 95%CL (1 toyMC)
median expected limit: r < 0.18065 @ 95%CL (1 toyMC)
   68% expected band : 0.18065 < r < 0.18065
   95% expected band : 0.18065 < r < 0.18065
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1485592986
Generate toy 1/1
Done in 28.29 min (cpu), 28.38 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1444339157
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235831 +/- 0.00195769 @ 95% CL (100 tries)
Done in 0.69 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.235831 @ 95%CL (1 toyMC)
median expected limit: r < 0.235831 @ 95%CL (1 toyMC)
   68% expected band : 0.235831 < r < 0.235831
   95% expected band : 0.235831 < r < 0.235831
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1590058100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.148965 +/- 0.00348424 @ 95% CL (85 tries)
Done in 3.62 min (cpu), 3.63 min (real)
mean   expected limit: r < 0.148965 @ 95%CL (1 toyMC)
median expected limit: r < 0.148965 @ 95%CL (1 toyMC)
   68% expected band : 0.148965 < r < 0.148965
   95% expected band : 0.148965 < r < 0.148965
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1175165941
Generate toy 1/1
Done in 31.97 min (cpu), 32.07 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1551636314
Generate toy 1/1
Done in 33.12 min (cpu), 33.25 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -709601242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.174583 +/- 0.00244628 @ 95% CL (100 tries)
Done in 0.69 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.174583 @ 95%CL (1 toyMC)
median expected limit: r < 0.174583 @ 95%CL (1 toyMC)
   68% expected band : 0.174583 < r < 0.174583
   95% expected band : 0.174583 < r < 0.174583
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1059700765
Generate toy 1/1
Done in 26.42 min (cpu), 26.50 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1927593410
Generate toy 1/1
Done in 32.08 min (cpu), 32.17 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1890551200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.166812 +/- 0.00192527 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.166812 @ 95%CL (1 toyMC)
median expected limit: r < 0.166812 @ 95%CL (1 toyMC)
   68% expected band : 0.166812 < r < 0.166812
   95% expected band : 0.166812 < r < 0.166812
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -954599930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.170086 +/- 0.00266671 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.170086 @ 95%CL (1 toyMC)
median expected limit: r < 0.170086 @ 95%CL (1 toyMC)
   68% expected band : 0.170086 < r < 0.170086
   95% expected band : 0.170086 < r < 0.170086
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2089126220
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.151647 +/- 0.00372662 @ 95% CL (72 tries)
Done in 10.02 min (cpu), 10.05 min (real)
mean   expected limit: r < 0.151647 @ 95%CL (1 toyMC)
median expected limit: r < 0.151647 @ 95%CL (1 toyMC)
   68% expected band : 0.151647 < r < 0.151647
   95% expected band : 0.151647 < r < 0.151647
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 170129910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.172713 +/- 0.00398196 @ 95% CL (95 tries)
Done in 1.95 min (cpu), 1.96 min (real)
mean   expected limit: r < 0.172713 @ 95%CL (1 toyMC)
median expected limit: r < 0.172713 @ 95%CL (1 toyMC)
   68% expected band : 0.172713 < r < 0.172713
   95% expected band : 0.172713 < r < 0.172713
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2052007294
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.23456 +/- 0.00140867 @ 95% CL (100 tries)
Done in 0.69 min (cpu), 0.69 min (real)
mean   expected limit: r < 0.23456 @ 95%CL (1 toyMC)
median expected limit: r < 0.23456 @ 95%CL (1 toyMC)
   68% expected band : 0.23456 < r < 0.23456
   95% expected band : 0.23456 < r < 0.23456
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -489898395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 20 @ 95% CL
Done in 31.23 min (cpu), 31.31 min (real)
mean   expected limit: r < 20 @ 95%CL (1 toyMC)
median expected limit: r < 20 @ 95%CL (1 toyMC)
   68% expected band : 20 < r < 20
   95% expected band : 20 < r < 20
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -123049764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.138379 +/- 0.00633193 @ 95% CL (64 tries)
Done in 10.72 min (cpu), 10.74 min (real)
mean   expected limit: r < 0.138379 @ 95%CL (1 toyMC)
median expected limit: r < 0.138379 @ 95%CL (1 toyMC)
   68% expected band : 0.138379 < r < 0.138379
   95% expected band : 0.138379 < r < 0.138379
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1384777868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5e+29 +/- 2.5e+29 @ 95% CL (4 tries)
Done in 26.34 min (cpu), 26.40 min (real)
mean   expected limit: r < 2.5e+29 @ 95%CL (1 toyMC)
median expected limit: r < 2.5e+29 @ 95%CL (1 toyMC)
   68% expected band : 2.5e+29 < r < 2.5e+29
   95% expected band : 2.5e+29 < r < 2.5e+29
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -82675728
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.133756 +/- 0.00765837 @ 95% CL (38 tries)
Done in 17.98 min (cpu), 18.03 min (real)
mean   expected limit: r < 0.133756 @ 95%CL (1 toyMC)
median expected limit: r < 0.133756 @ 95%CL (1 toyMC)
   68% expected band : 0.133756 < r < 0.133756
   95% expected band : 0.133756 < r < 0.133756
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 483174111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.64989 +/- 1.45075 @ 95% CL (48 tries)
Done in 18.78 min (cpu), 18.83 min (real)
mean   expected limit: r < 7.64989 @ 95%CL (1 toyMC)
median expected limit: r < 7.64989 @ 95%CL (1 toyMC)
   68% expected band : 7.64989 < r < 7.64989
   95% expected band : 7.64989 < r < 7.64989
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 373100167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.156057 +/- 0.00338061 @ 95% CL (95 tries)
Done in 1.46 min (cpu), 1.47 min (real)
mean   expected limit: r < 0.156057 @ 95%CL (1 toyMC)
median expected limit: r < 0.156057 @ 95%CL (1 toyMC)
   68% expected band : 0.156057 < r < 0.156057
   95% expected band : 0.156057 < r < 0.156057
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1937397361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.198153 +/- 0.00233735 @ 95% CL (100 tries)
Done in 0.68 min (cpu), 0.68 min (real)
mean   expected limit: r < 0.198153 @ 95%CL (1 toyMC)
median expected limit: r < 0.198153 @ 95%CL (1 toyMC)
   68% expected band : 0.198153 < r < 0.198153
   95% expected band : 0.198153 < r < 0.198153
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1302790976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.182347 +/- 0.00325138 @ 95% CL (99 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 0.182347 @ 95%CL (1 toyMC)
median expected limit: r < 0.182347 @ 95%CL (1 toyMC)
   68% expected band : 0.182347 < r < 0.182347
   95% expected band : 0.182347 < r < 0.182347
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -826583197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.08228 +/- 2.60068 @ 95% CL (17 tries)
Done in 23.81 min (cpu), 23.87 min (real)
mean   expected limit: r < 8.08228 @ 95%CL (1 toyMC)
median expected limit: r < 8.08228 @ 95%CL (1 toyMC)
   68% expected band : 8.08228 < r < 8.08228
   95% expected band : 8.08228 < r < 8.08228
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -328137094
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.30231 +/- 1.24459 @ 95% CL (51 tries)
Done in 16.94 min (cpu), 16.99 min (real)
mean   expected limit: r < 5.30231 @ 95%CL (1 toyMC)
median expected limit: r < 5.30231 @ 95%CL (1 toyMC)
   68% expected band : 5.30231 < r < 5.30231
   95% expected band : 5.30231 < r < 5.30231
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -716532574
Generate toy 1/1
Done in 31.74 min (cpu), 31.84 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 936555843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 20 @ 95% CL
Done in 26.99 min (cpu), 27.08 min (real)
mean   expected limit: r < 20 @ 95%CL (1 toyMC)
median expected limit: r < 20 @ 95%CL (1 toyMC)
   68% expected band : 20 < r < 20
   95% expected band : 20 < r < 20
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1486621851
Generate toy 1/1
Done in 29.38 min (cpu), 29.47 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1933561496
Generate toy 1/1
Done in 28.74 min (cpu), 28.84 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -157882650
Generate toy 1/1
Done in 30.52 min (cpu), 30.63 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 877383585
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.16783 +/- 0.002009 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.16783 @ 95%CL (1 toyMC)
median expected limit: r < 0.16783 @ 95%CL (1 toyMC)
   68% expected band : 0.16783 < r < 0.16783
   95% expected band : 0.16783 < r < 0.16783
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1109998278
Generate toy 1/1
Done in 32.97 min (cpu), 33.06 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1868375608
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.168359 +/- 0.00223542 @ 95% CL (100 tries)
Done in 0.69 min (cpu), 0.69 min (real)
mean   expected limit: r < 0.168359 @ 95%CL (1 toyMC)
median expected limit: r < 0.168359 @ 95%CL (1 toyMC)
   68% expected band : 0.168359 < r < 0.168359
   95% expected band : 0.168359 < r < 0.168359
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2077555826
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28612 +/- 0.00193176 @ 95% CL (100 tries)
Done in 0.67 min (cpu), 0.68 min (real)
mean   expected limit: r < 0.28612 @ 95%CL (1 toyMC)
median expected limit: r < 0.28612 @ 95%CL (1 toyMC)
   68% expected band : 0.28612 < r < 0.28612
   95% expected band : 0.28612 < r < 0.28612
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -473829882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.136087 +/- 0.00497144 @ 95% CL (60 tries)
Done in 11.07 min (cpu), 11.10 min (real)
mean   expected limit: r < 0.136087 @ 95%CL (1 toyMC)
median expected limit: r < 0.136087 @ 95%CL (1 toyMC)
   68% expected band : 0.136087 < r < 0.136087
   95% expected band : 0.136087 < r < 0.136087
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1169744098
Generate toy 1/1
Done in 26.91 min (cpu), 26.97 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 297620638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.66623 +/- 1.3761 @ 95% CL (45 tries)
Done in 19.07 min (cpu), 19.12 min (real)
mean   expected limit: r < 5.66623 @ 95%CL (1 toyMC)
median expected limit: r < 5.66623 @ 95%CL (1 toyMC)
   68% expected band : 5.66623 < r < 5.66623
   95% expected band : 5.66623 < r < 5.66623
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -772610011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.55478 +/- 1.56376 @ 95% CL (35 tries)
Done in 15.40 min (cpu), 15.44 min (real)
mean   expected limit: r < 5.55478 @ 95%CL (1 toyMC)
median expected limit: r < 5.55478 @ 95%CL (1 toyMC)
   68% expected band : 5.55478 < r < 5.55478
   95% expected band : 5.55478 < r < 5.55478
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 675395306
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281053 +/- 0.0018278 @ 95% CL (100 tries)
Done in 0.67 min (cpu), 0.67 min (real)
mean   expected limit: r < 0.281053 @ 95%CL (1 toyMC)
median expected limit: r < 0.281053 @ 95%CL (1 toyMC)
   68% expected band : 0.281053 < r < 0.281053
   95% expected band : 0.281053 < r < 0.281053
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1107632825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.291543 +/- 0.0024097 @ 95% CL (100 tries)
Done in 0.68 min (cpu), 0.68 min (real)
mean   expected limit: r < 0.291543 @ 95%CL (1 toyMC)
median expected limit: r < 0.291543 @ 95%CL (1 toyMC)
   68% expected band : 0.291543 < r < 0.291543
   95% expected band : 0.291543 < r < 0.291543
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 119161048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.162423 +/- 0.00183181 @ 95% CL (100 tries)
Done in 0.68 min (cpu), 0.69 min (real)
mean   expected limit: r < 0.162423 @ 95%CL (1 toyMC)
median expected limit: r < 0.162423 @ 95%CL (1 toyMC)
   68% expected band : 0.162423 < r < 0.162423
   95% expected band : 0.162423 < r < 0.162423
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1846716479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.102941 @ 95% CL
Done in 28.73 min (cpu), 28.80 min (real)
mean   expected limit: r < 0.102941 @ 95%CL (1 toyMC)
median expected limit: r < 0.102941 @ 95%CL (1 toyMC)
   68% expected band : 0.102941 < r < 0.102941
   95% expected band : 0.102941 < r < 0.102941
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1975834609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.09704 +/- 2.59749 @ 95% CL (16 tries)
Done in 24.44 min (cpu), 24.49 min (real)
mean   expected limit: r < 8.09704 @ 95%CL (1 toyMC)
median expected limit: r < 8.09704 @ 95%CL (1 toyMC)
   68% expected band : 8.09704 < r < 8.09704
   95% expected band : 8.09704 < r < 8.09704
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1996604807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1e+30 @ 95% CL
Done in 31.91 min (cpu), 31.94 min (real)
mean   expected limit: r < 1e+30 @ 95%CL (1 toyMC)
median expected limit: r < 1e+30 @ 95%CL (1 toyMC)
   68% expected band : 1e+30 < r < 1e+30
   95% expected band : 1e+30 < r < 1e+30
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 181824161
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.147402 +/- 0.00467051 @ 95% CL (65 tries)
Done in 11.34 min (cpu), 11.35 min (real)
mean   expected limit: r < 0.147402 @ 95%CL (1 toyMC)
median expected limit: r < 0.147402 @ 95%CL (1 toyMC)
   68% expected band : 0.147402 < r < 0.147402
   95% expected band : 0.147402 < r < 0.147402
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 493299342
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.160151 +/- 0.00349583 @ 95% CL (93 tries)
Done in 2.31 min (cpu), 2.32 min (real)
mean   expected limit: r < 0.160151 @ 95%CL (1 toyMC)
median expected limit: r < 0.160151 @ 95%CL (1 toyMC)
   68% expected band : 0.160151 < r < 0.160151
   95% expected band : 0.160151 < r < 0.160151
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 463937045
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248983 +/- 0.00199998 @ 95% CL (100 tries)
Done in 0.66 min (cpu), 0.66 min (real)
mean   expected limit: r < 0.248983 @ 95%CL (1 toyMC)
median expected limit: r < 0.248983 @ 95%CL (1 toyMC)
   68% expected band : 0.248983 < r < 0.248983
   95% expected band : 0.248983 < r < 0.248983
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1007117965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.144525 +/- 0.00391314 @ 95% CL (95 tries)
Done in 1.57 min (cpu), 1.57 min (real)
mean   expected limit: r < 0.144525 @ 95%CL (1 toyMC)
median expected limit: r < 0.144525 @ 95%CL (1 toyMC)
   68% expected band : 0.144525 < r < 0.144525
   95% expected band : 0.144525 < r < 0.144525
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 465173439
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.133619 +/- 0.00555709 @ 95% CL (62 tries)
Done in 12.60 min (cpu), 12.61 min (real)
mean   expected limit: r < 0.133619 @ 95%CL (1 toyMC)
median expected limit: r < 0.133619 @ 95%CL (1 toyMC)
   68% expected band : 0.133619 < r < 0.133619
   95% expected band : 0.133619 < r < 0.133619
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 817871036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.163724 +/- 0.00267222 @ 95% CL (100 tries)
Done in 0.64 min (cpu), 0.64 min (real)
mean   expected limit: r < 0.163724 @ 95%CL (1 toyMC)
median expected limit: r < 0.163724 @ 95%CL (1 toyMC)
   68% expected band : 0.163724 < r < 0.163724
   95% expected band : 0.163724 < r < 0.163724
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -108352469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.5227 +/- 1.78513 @ 95% CL (28 tries)
Done in 24.02 min (cpu), 24.05 min (real)
mean   expected limit: r < 6.5227 @ 95%CL (1 toyMC)
median expected limit: r < 6.5227 @ 95%CL (1 toyMC)
   68% expected band : 6.5227 < r < 6.5227
   95% expected band : 6.5227 < r < 6.5227
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1158982923
Generate toy 1/1
Done in 30.75 min (cpu), 30.79 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -77526432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.148748 +/- 0.00232093 @ 95% CL (87 tries)
Done in 4.94 min (cpu), 4.94 min (real)
mean   expected limit: r < 0.148748 @ 95%CL (1 toyMC)
median expected limit: r < 0.148748 @ 95%CL (1 toyMC)
   68% expected band : 0.148748 < r < 0.148748
   95% expected band : 0.148748 < r < 0.148748
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 924569309
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.160542 +/- 0.00308533 @ 95% CL (98 tries)
Done in 0.73 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.160542 @ 95%CL (1 toyMC)
median expected limit: r < 0.160542 @ 95%CL (1 toyMC)
   68% expected band : 0.160542 < r < 0.160542
   95% expected band : 0.160542 < r < 0.160542
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -552678646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.07714 +/- 3.98073 @ 95% CL (5 tries)
Done in 24.92 min (cpu), 24.95 min (real)
mean   expected limit: r < 4.07714 @ 95%CL (1 toyMC)
median expected limit: r < 4.07714 @ 95%CL (1 toyMC)
   68% expected band : 4.07714 < r < 4.07714
   95% expected band : 4.07714 < r < 4.07714
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 927041701
Generate toy 1/1
Done in 27.10 min (cpu), 27.13 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1331035886
Generate toy 1/1
Done in 32.33 min (cpu), 32.37 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -231691353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66667e+29 +/- 1.66667e+29 @ 95% CL (6 tries)
Done in 30.01 min (cpu), 30.05 min (real)
mean   expected limit: r < 1.66667e+29 @ 95%CL (1 toyMC)
median expected limit: r < 1.66667e+29 @ 95%CL (1 toyMC)
   68% expected band : 1.66667e+29 < r < 1.66667e+29
   95% expected band : 1.66667e+29 < r < 1.66667e+29
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -740485614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.94993 +/- 1.42904 @ 95% CL (41 tries)
Done in 20.23 min (cpu), 20.25 min (real)
mean   expected limit: r < 5.94993 @ 95%CL (1 toyMC)
median expected limit: r < 5.94993 @ 95%CL (1 toyMC)
   68% expected band : 5.94993 < r < 5.94993
   95% expected band : 5.94993 < r < 5.94993
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1151032664
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.154219 +/- 0.005644 @ 95% CL (69 tries)
Done in 10.69 min (cpu), 10.70 min (real)
mean   expected limit: r < 0.154219 @ 95%CL (1 toyMC)
median expected limit: r < 0.154219 @ 95%CL (1 toyMC)
   68% expected band : 0.154219 < r < 0.154219
   95% expected band : 0.154219 < r < 0.154219
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 192045417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.178142 +/- 0.00199735 @ 95% CL (100 tries)
Done in 0.65 min (cpu), 0.65 min (real)
mean   expected limit: r < 0.178142 @ 95%CL (1 toyMC)
median expected limit: r < 0.178142 @ 95%CL (1 toyMC)
   68% expected band : 0.178142 < r < 0.178142
   95% expected band : 0.178142 < r < 0.178142
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -467312235
Generate toy 1/1
Done in 26.42 min (cpu), 26.46 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 196511534
Generate toy 1/1
Done in 25.33 min (cpu), 25.37 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -741700441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.157806 +/- 0.00399625 @ 95% CL (88 tries)
Done in 3.43 min (cpu), 3.43 min (real)
mean   expected limit: r < 0.157806 @ 95%CL (1 toyMC)
median expected limit: r < 0.157806 @ 95%CL (1 toyMC)
   68% expected band : 0.157806 < r < 0.157806
   95% expected band : 0.157806 < r < 0.157806
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1716300845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.0954284 @ 95% CL
Done in 26.57 min (cpu), 26.61 min (real)
mean   expected limit: r < 0.0954284 @ 95%CL (1 toyMC)
median expected limit: r < 0.0954284 @ 95%CL (1 toyMC)
   68% expected band : 0.0954284 < r < 0.0954284
   95% expected band : 0.0954284 < r < 0.0954284
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -636032981
Generate toy 1/1
Done in 32.78 min (cpu), 32.83 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1333536499
Generate toy 1/1
Done in 32.76 min (cpu), 32.80 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 742510109
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.15903 +/- 0.00206959 @ 95% CL (100 tries)
Done in 0.66 min (cpu), 0.66 min (real)
mean   expected limit: r < 0.15903 @ 95%CL (1 toyMC)
median expected limit: r < 0.15903 @ 95%CL (1 toyMC)
   68% expected band : 0.15903 < r < 0.15903
   95% expected band : 0.15903 < r < 0.15903
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 538372652
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.158062 +/- 0.00365434 @ 95% CL (81 tries)
Done in 7.24 min (cpu), 7.25 min (real)
mean   expected limit: r < 0.158062 @ 95%CL (1 toyMC)
median expected limit: r < 0.158062 @ 95%CL (1 toyMC)
   68% expected band : 0.158062 < r < 0.158062
   95% expected band : 0.158062 < r < 0.158062
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -667657273
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.146219 +/- 0.00520573 @ 95% CL (85 tries)
Done in 4.87 min (cpu), 4.88 min (real)
mean   expected limit: r < 0.146219 @ 95%CL (1 toyMC)
median expected limit: r < 0.146219 @ 95%CL (1 toyMC)
   68% expected band : 0.146219 < r < 0.146219
   95% expected band : 0.146219 < r < 0.146219
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1757092299
Generate toy 1/1
Done in 29.76 min (cpu), 29.80 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1383952374
Generate toy 1/1
Done in 28.90 min (cpu), 28.94 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 55490784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.161377 +/- 0.0025657 @ 95% CL (100 tries)
Done in 0.65 min (cpu), 0.65 min (real)
mean   expected limit: r < 0.161377 @ 95%CL (1 toyMC)
median expected limit: r < 0.161377 @ 95%CL (1 toyMC)
   68% expected band : 0.161377 < r < 0.161377
   95% expected band : 0.161377 < r < 0.161377
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1473455269
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.157887 +/- 0.00428516 @ 95% CL (83 tries)
Done in 4.54 min (cpu), 4.55 min (real)
mean   expected limit: r < 0.157887 @ 95%CL (1 toyMC)
median expected limit: r < 0.157887 @ 95%CL (1 toyMC)
   68% expected band : 0.157887 < r < 0.157887
   95% expected band : 0.157887 < r < 0.157887
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1773103658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.5683 +/- 3.62631 @ 95% CL (8 tries)
Done in 29.34 min (cpu), 29.38 min (real)
mean   expected limit: r < 12.5683 @ 95%CL (1 toyMC)
median expected limit: r < 12.5683 @ 95%CL (1 toyMC)
   68% expected band : 12.5683 < r < 12.5683
   95% expected band : 12.5683 < r < 12.5683
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 911214094
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.4027 +/- 6.59726 @ 95% CL (3 tries)
Done in 31.06 min (cpu), 31.10 min (real)
mean   expected limit: r < 13.4027 @ 95%CL (1 toyMC)
median expected limit: r < 13.4027 @ 95%CL (1 toyMC)
   68% expected band : 13.4027 < r < 13.4027
   95% expected band : 13.4027 < r < 13.4027
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 429504014
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229504 +/- 0.00131849 @ 95% CL (100 tries)
Done in 0.61 min (cpu), 0.61 min (real)
mean   expected limit: r < 0.229504 @ 95%CL (1 toyMC)
median expected limit: r < 0.229504 @ 95%CL (1 toyMC)
   68% expected band : 0.229504 < r < 0.229504
   95% expected band : 0.229504 < r < 0.229504
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1529715895
Generate toy 1/1
Done in 33.02 min (cpu), 33.06 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -623784355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1e+30 @ 95% CL
Done in 30.06 min (cpu), 30.10 min (real)
mean   expected limit: r < 1e+30 @ 95%CL (1 toyMC)
median expected limit: r < 1e+30 @ 95%CL (1 toyMC)
   68% expected band : 1e+30 < r < 1e+30
   95% expected band : 1e+30 < r < 1e+30
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1492874373
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.01354 +/- 1.18479 @ 95% CL (54 tries)
Done in 12.74 min (cpu), 12.76 min (real)
mean   expected limit: r < 5.01354 @ 95%CL (1 toyMC)
median expected limit: r < 5.01354 @ 95%CL (1 toyMC)
   68% expected band : 5.01354 < r < 5.01354
   95% expected band : 5.01354 < r < 5.01354
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1561095389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.156873 +/- 0.0027809 @ 95% CL (98 tries)
Done in 0.66 min (cpu), 0.66 min (real)
mean   expected limit: r < 0.156873 @ 95%CL (1 toyMC)
median expected limit: r < 0.156873 @ 95%CL (1 toyMC)
   68% expected band : 0.156873 < r < 0.156873
   95% expected band : 0.156873 < r < 0.156873
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 101059820
Generate toy 1/1
Done in 32.24 min (cpu), 32.27 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1105342695
Generate toy 1/1
Done in 32.42 min (cpu), 32.46 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine16.MarkovChainMC.mH16.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH16.-1007117965.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH16.-1059700765.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH16.-108352469.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH16.-1105342695.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH16.-1151032664.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH16.-1217069038.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH16.-123049764.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH16.-12798753.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH16.-1302790976.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH16.-1383952374.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH16.-1386568562.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH16.-1444339157.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH16.-1469591740.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH16.-1473455269.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH16.-1486621851.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH16.-1492874373.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH16.-157882650.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH16.-1590058100.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH16.-1757092299.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH16.-1769375656.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH16.-1815791056.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH16.-1846716479.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH16.-1868375608.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH16.-1933561496.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH16.-1937397361.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH16.-1975834609.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH16.-2018780343.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH16.-2058331971.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH16.-2098120505.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH16.-231691353.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH16.-328137094.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH16.-456020564.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH16.-467312235.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH16.-473829882.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH16.-489898395.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH16.-552678646.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH16.-623784355.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH16.-636032981.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH16.-667657273.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH16.-709601242.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH16.-716532574.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH16.-740485614.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH16.-741700441.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH16.-772610011.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH16.-77526432.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH16.-826583197.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH16.-82675728.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH16.-954599930.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH16.101059820.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH16.1107632825.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH16.1109998278.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH16.1158982923.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH16.1169744098.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH16.1175165941.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH16.119161048.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH16.1331035886.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH16.1333536499.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH16.1370728862.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH16.1384777868.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH16.1485592986.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH16.1529715895.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH16.1551636314.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH16.1557233753.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH16.1561095389.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH16.170129910.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH16.1716300845.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH16.1773103658.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH16.181824161.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH16.1890551200.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH16.1917861659.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH16.192045417.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH16.1927593410.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH16.1961447845.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH16.196511534.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH16.1996604807.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH16.2052007294.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH16.2077555826.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH16.2089126220.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH16.297620638.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH16.373100167.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH16.429504014.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH16.454727818.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH16.463937045.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH16.465173439.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH16.483174111.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH16.493299342.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH16.509835915.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH16.538372652.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH16.55490784.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH16.668986164.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH16.675395306.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH16.742510109.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH16.817871036.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH16.877383585.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH16.892285627.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH16.902823358.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH16.911214094.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH16.924569309.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH16.927041701.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH16.936555843.root
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1623446483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.293566 +/- 0.0021536 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.293566 @ 95%CL (1 toyMC)
median expected limit: r < 0.293566 @ 95%CL (1 toyMC)
   68% expected band : 0.293566 < r < 0.293566
   95% expected band : 0.293566 < r < 0.293566
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1716956478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.425691 +/- 0.0021692 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.425691 @ 95%CL (1 toyMC)
median expected limit: r < 0.425691 @ 95%CL (1 toyMC)
   68% expected band : 0.425691 < r < 0.425691
   95% expected band : 0.425691 < r < 0.425691
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -567437490
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.328447 +/- 0.00257882 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.328447 @ 95%CL (1 toyMC)
median expected limit: r < 0.328447 @ 95%CL (1 toyMC)
   68% expected band : 0.328447 < r < 0.328447
   95% expected band : 0.328447 < r < 0.328447
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2128687139
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272238 +/- 0.00250012 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.272238 @ 95%CL (1 toyMC)
median expected limit: r < 0.272238 @ 95%CL (1 toyMC)
   68% expected band : 0.272238 < r < 0.272238
   95% expected band : 0.272238 < r < 0.272238
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1476367603
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.359475 +/- 0.00199509 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.359475 @ 95%CL (1 toyMC)
median expected limit: r < 0.359475 @ 95%CL (1 toyMC)
   68% expected band : 0.359475 < r < 0.359475
   95% expected band : 0.359475 < r < 0.359475
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1533122564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.515651 +/- 0.00231629 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.515651 @ 95%CL (1 toyMC)
median expected limit: r < 0.515651 @ 95%CL (1 toyMC)
   68% expected band : 0.515651 < r < 0.515651
   95% expected band : 0.515651 < r < 0.515651
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2086163794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25276 +/- 0.002102 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.25276 @ 95%CL (1 toyMC)
median expected limit: r < 0.25276 @ 95%CL (1 toyMC)
   68% expected band : 0.25276 < r < 0.25276
   95% expected band : 0.25276 < r < 0.25276
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 201368364
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.324999 +/- 0.00304069 @ 95% CL (100 tries)
Done in 0.69 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.324999 @ 95%CL (1 toyMC)
median expected limit: r < 0.324999 @ 95%CL (1 toyMC)
   68% expected band : 0.324999 < r < 0.324999
   95% expected band : 0.324999 < r < 0.324999
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1315911129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.376329 +/- 0.00233873 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.376329 @ 95%CL (1 toyMC)
median expected limit: r < 0.376329 @ 95%CL (1 toyMC)
   68% expected band : 0.376329 < r < 0.376329
   95% expected band : 0.376329 < r < 0.376329
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 304350305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.575476 +/- 0.00258816 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.575476 @ 95%CL (1 toyMC)
median expected limit: r < 0.575476 @ 95%CL (1 toyMC)
   68% expected band : 0.575476 < r < 0.575476
   95% expected band : 0.575476 < r < 0.575476
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1931710922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270724 +/- 0.00244916 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.270724 @ 95%CL (1 toyMC)
median expected limit: r < 0.270724 @ 95%CL (1 toyMC)
   68% expected band : 0.270724 < r < 0.270724
   95% expected band : 0.270724 < r < 0.270724
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1100761159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.256215 +/- 0.00280651 @ 95% CL (100 tries)
Done in 0.68 min (cpu), 0.68 min (real)
mean   expected limit: r < 0.256215 @ 95%CL (1 toyMC)
median expected limit: r < 0.256215 @ 95%CL (1 toyMC)
   68% expected band : 0.256215 < r < 0.256215
   95% expected band : 0.256215 < r < 0.256215
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1102505278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.560196 +/- 0.00291469 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.560196 @ 95%CL (1 toyMC)
median expected limit: r < 0.560196 @ 95%CL (1 toyMC)
   68% expected band : 0.560196 < r < 0.560196
   95% expected band : 0.560196 < r < 0.560196
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1313811157
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.343237 +/- 0.00221019 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.343237 @ 95%CL (1 toyMC)
median expected limit: r < 0.343237 @ 95%CL (1 toyMC)
   68% expected band : 0.343237 < r < 0.343237
   95% expected band : 0.343237 < r < 0.343237
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1444858365
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.233892 +/- 0.00291907 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.233892 @ 95%CL (1 toyMC)
median expected limit: r < 0.233892 @ 95%CL (1 toyMC)
   68% expected band : 0.233892 < r < 0.233892
   95% expected band : 0.233892 < r < 0.233892
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -831454151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.34645 +/- 0.00232685 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.34645 @ 95%CL (1 toyMC)
median expected limit: r < 0.34645 @ 95%CL (1 toyMC)
   68% expected band : 0.34645 < r < 0.34645
   95% expected band : 0.34645 < r < 0.34645
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -778830534
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.348176 +/- 0.00226001 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 0.348176 @ 95%CL (1 toyMC)
median expected limit: r < 0.348176 @ 95%CL (1 toyMC)
   68% expected band : 0.348176 < r < 0.348176
   95% expected band : 0.348176 < r < 0.348176
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 414922789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393595 +/- 0.00273656 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.393595 @ 95%CL (1 toyMC)
median expected limit: r < 0.393595 @ 95%CL (1 toyMC)
   68% expected band : 0.393595 < r < 0.393595
   95% expected band : 0.393595 < r < 0.393595
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 854777757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.382793 +/- 0.00205891 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.382793 @ 95%CL (1 toyMC)
median expected limit: r < 0.382793 @ 95%CL (1 toyMC)
   68% expected band : 0.382793 < r < 0.382793
   95% expected band : 0.382793 < r < 0.382793
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2083104897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.556961 +/- 0.00241839 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.556961 @ 95%CL (1 toyMC)
median expected limit: r < 0.556961 @ 95%CL (1 toyMC)
   68% expected band : 0.556961 < r < 0.556961
   95% expected band : 0.556961 < r < 0.556961
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1380116972
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.264753 +/- 0.00271475 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.264753 @ 95%CL (1 toyMC)
median expected limit: r < 0.264753 @ 95%CL (1 toyMC)
   68% expected band : 0.264753 < r < 0.264753
   95% expected band : 0.264753 < r < 0.264753
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1444077618
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.368569 +/- 0.0026019 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.368569 @ 95%CL (1 toyMC)
median expected limit: r < 0.368569 @ 95%CL (1 toyMC)
   68% expected band : 0.368569 < r < 0.368569
   95% expected band : 0.368569 < r < 0.368569
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1033696020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224418 +/- 0.00277754 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.224418 @ 95%CL (1 toyMC)
median expected limit: r < 0.224418 @ 95%CL (1 toyMC)
   68% expected band : 0.224418 < r < 0.224418
   95% expected band : 0.224418 < r < 0.224418
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1819875254
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.364759 +/- 0.00208113 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.364759 @ 95%CL (1 toyMC)
median expected limit: r < 0.364759 @ 95%CL (1 toyMC)
   68% expected band : 0.364759 < r < 0.364759
   95% expected band : 0.364759 < r < 0.364759
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 459026292
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.359285 +/- 0.00209772 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.359285 @ 95%CL (1 toyMC)
median expected limit: r < 0.359285 @ 95%CL (1 toyMC)
   68% expected band : 0.359285 < r < 0.359285
   95% expected band : 0.359285 < r < 0.359285
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2108560868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.356859 +/- 0.00237924 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.356859 @ 95%CL (1 toyMC)
median expected limit: r < 0.356859 @ 95%CL (1 toyMC)
   68% expected band : 0.356859 < r < 0.356859
   95% expected band : 0.356859 < r < 0.356859
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 431834348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.397241 +/- 0.00261281 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.397241 @ 95%CL (1 toyMC)
median expected limit: r < 0.397241 @ 95%CL (1 toyMC)
   68% expected band : 0.397241 < r < 0.397241
   95% expected band : 0.397241 < r < 0.397241
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -299042264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.359965 +/- 0.00232697 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.359965 @ 95%CL (1 toyMC)
median expected limit: r < 0.359965 @ 95%CL (1 toyMC)
   68% expected band : 0.359965 < r < 0.359965
   95% expected band : 0.359965 < r < 0.359965
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1440082337
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.421699 +/- 0.00208211 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.421699 @ 95%CL (1 toyMC)
median expected limit: r < 0.421699 @ 95%CL (1 toyMC)
   68% expected band : 0.421699 < r < 0.421699
   95% expected band : 0.421699 < r < 0.421699
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -583043220
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.565523 +/- 0.00316308 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.565523 @ 95%CL (1 toyMC)
median expected limit: r < 0.565523 @ 95%CL (1 toyMC)
   68% expected band : 0.565523 < r < 0.565523
   95% expected band : 0.565523 < r < 0.565523
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -183523534
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.349855 +/- 0.00245541 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.349855 @ 95%CL (1 toyMC)
median expected limit: r < 0.349855 @ 95%CL (1 toyMC)
   68% expected band : 0.349855 < r < 0.349855
   95% expected band : 0.349855 < r < 0.349855
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 227713046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.339664 +/- 0.00250628 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.339664 @ 95%CL (1 toyMC)
median expected limit: r < 0.339664 @ 95%CL (1 toyMC)
   68% expected band : 0.339664 < r < 0.339664
   95% expected band : 0.339664 < r < 0.339664
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1640826385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.412607 +/- 0.00242723 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.412607 @ 95%CL (1 toyMC)
median expected limit: r < 0.412607 @ 95%CL (1 toyMC)
   68% expected band : 0.412607 < r < 0.412607
   95% expected band : 0.412607 < r < 0.412607
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1590701046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.372697 +/- 0.00225605 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.372697 @ 95%CL (1 toyMC)
median expected limit: r < 0.372697 @ 95%CL (1 toyMC)
   68% expected band : 0.372697 < r < 0.372697
   95% expected band : 0.372697 < r < 0.372697
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 174401314
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.414335 +/- 0.00216039 @ 95% CL (100 tries)
Done in 0.69 min (cpu), 0.69 min (real)
mean   expected limit: r < 0.414335 @ 95%CL (1 toyMC)
median expected limit: r < 0.414335 @ 95%CL (1 toyMC)
   68% expected band : 0.414335 < r < 0.414335
   95% expected band : 0.414335 < r < 0.414335
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 963876899
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.866754 +/- 0.00265354 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.866754 @ 95%CL (1 toyMC)
median expected limit: r < 0.866754 @ 95%CL (1 toyMC)
   68% expected band : 0.866754 < r < 0.866754
   95% expected band : 0.866754 < r < 0.866754
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1255548313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.336238 +/- 0.00217693 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.336238 @ 95%CL (1 toyMC)
median expected limit: r < 0.336238 @ 95%CL (1 toyMC)
   68% expected band : 0.336238 < r < 0.336238
   95% expected band : 0.336238 < r < 0.336238
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2022438704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.348691 +/- 0.0021955 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.348691 @ 95%CL (1 toyMC)
median expected limit: r < 0.348691 @ 95%CL (1 toyMC)
   68% expected band : 0.348691 < r < 0.348691
   95% expected band : 0.348691 < r < 0.348691
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1950009910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288892 +/- 0.00232006 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.288892 @ 95%CL (1 toyMC)
median expected limit: r < 0.288892 @ 95%CL (1 toyMC)
   68% expected band : 0.288892 < r < 0.288892
   95% expected band : 0.288892 < r < 0.288892
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -217244379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.373776 +/- 0.00244113 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.373776 @ 95%CL (1 toyMC)
median expected limit: r < 0.373776 @ 95%CL (1 toyMC)
   68% expected band : 0.373776 < r < 0.373776
   95% expected band : 0.373776 < r < 0.373776
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1383345429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.302442 +/- 0.00277075 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.302442 @ 95%CL (1 toyMC)
median expected limit: r < 0.302442 @ 95%CL (1 toyMC)
   68% expected band : 0.302442 < r < 0.302442
   95% expected band : 0.302442 < r < 0.302442
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 418500943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.676687 +/- 0.00239431 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.78 min (real)
mean   expected limit: r < 0.676687 @ 95%CL (1 toyMC)
median expected limit: r < 0.676687 @ 95%CL (1 toyMC)
   68% expected band : 0.676687 < r < 0.676687
   95% expected band : 0.676687 < r < 0.676687
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1618440510
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.398059 +/- 0.00246395 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.398059 @ 95%CL (1 toyMC)
median expected limit: r < 0.398059 @ 95%CL (1 toyMC)
   68% expected band : 0.398059 < r < 0.398059
   95% expected band : 0.398059 < r < 0.398059
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 574075274
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.277289 +/- 0.00236606 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.277289 @ 95%CL (1 toyMC)
median expected limit: r < 0.277289 @ 95%CL (1 toyMC)
   68% expected band : 0.277289 < r < 0.277289
   95% expected band : 0.277289 < r < 0.277289
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -511322290
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.371639 +/- 0.00210469 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.371639 @ 95%CL (1 toyMC)
median expected limit: r < 0.371639 @ 95%CL (1 toyMC)
   68% expected band : 0.371639 < r < 0.371639
   95% expected band : 0.371639 < r < 0.371639
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 158601677
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330546 +/- 0.00314992 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.330546 @ 95%CL (1 toyMC)
median expected limit: r < 0.330546 @ 95%CL (1 toyMC)
   68% expected band : 0.330546 < r < 0.330546
   95% expected band : 0.330546 < r < 0.330546
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1564666338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309709 +/- 0.00258242 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.309709 @ 95%CL (1 toyMC)
median expected limit: r < 0.309709 @ 95%CL (1 toyMC)
   68% expected band : 0.309709 < r < 0.309709
   95% expected band : 0.309709 < r < 0.309709
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 614135411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.327252 +/- 0.00289628 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.327252 @ 95%CL (1 toyMC)
median expected limit: r < 0.327252 @ 95%CL (1 toyMC)
   68% expected band : 0.327252 < r < 0.327252
   95% expected band : 0.327252 < r < 0.327252
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1736205581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.418785 +/- 0.00303964 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.418785 @ 95%CL (1 toyMC)
median expected limit: r < 0.418785 @ 95%CL (1 toyMC)
   68% expected band : 0.418785 < r < 0.418785
   95% expected band : 0.418785 < r < 0.418785
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 258412892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224048 +/- 0.00314227 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.224048 @ 95%CL (1 toyMC)
median expected limit: r < 0.224048 @ 95%CL (1 toyMC)
   68% expected band : 0.224048 < r < 0.224048
   95% expected band : 0.224048 < r < 0.224048
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1350327790
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263877 +/- 0.00287102 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.263877 @ 95%CL (1 toyMC)
median expected limit: r < 0.263877 @ 95%CL (1 toyMC)
   68% expected band : 0.263877 < r < 0.263877
   95% expected band : 0.263877 < r < 0.263877
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -576290340
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253852 +/- 0.00232366 @ 95% CL (100 tries)
Done in 0.69 min (cpu), 0.69 min (real)
mean   expected limit: r < 0.253852 @ 95%CL (1 toyMC)
median expected limit: r < 0.253852 @ 95%CL (1 toyMC)
   68% expected band : 0.253852 < r < 0.253852
   95% expected band : 0.253852 < r < 0.253852
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1381441982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.385609 +/- 0.00256465 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.385609 @ 95%CL (1 toyMC)
median expected limit: r < 0.385609 @ 95%CL (1 toyMC)
   68% expected band : 0.385609 < r < 0.385609
   95% expected band : 0.385609 < r < 0.385609
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1280342566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240887 +/- 0.00244899 @ 95% CL (100 tries)
Done in 0.69 min (cpu), 0.69 min (real)
mean   expected limit: r < 0.240887 @ 95%CL (1 toyMC)
median expected limit: r < 0.240887 @ 95%CL (1 toyMC)
   68% expected band : 0.240887 < r < 0.240887
   95% expected band : 0.240887 < r < 0.240887
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1205231042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235231 +/- 0.00298931 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.235231 @ 95%CL (1 toyMC)
median expected limit: r < 0.235231 @ 95%CL (1 toyMC)
   68% expected band : 0.235231 < r < 0.235231
   95% expected band : 0.235231 < r < 0.235231
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2132672455
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234253 +/- 0.00269648 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.234253 @ 95%CL (1 toyMC)
median expected limit: r < 0.234253 @ 95%CL (1 toyMC)
   68% expected band : 0.234253 < r < 0.234253
   95% expected band : 0.234253 < r < 0.234253
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -33054548
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.612463 +/- 0.00244665 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.612463 @ 95%CL (1 toyMC)
median expected limit: r < 0.612463 @ 95%CL (1 toyMC)
   68% expected band : 0.612463 < r < 0.612463
   95% expected band : 0.612463 < r < 0.612463
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -619087625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.634415 +/- 0.00293972 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.634415 @ 95%CL (1 toyMC)
median expected limit: r < 0.634415 @ 95%CL (1 toyMC)
   68% expected band : 0.634415 < r < 0.634415
   95% expected band : 0.634415 < r < 0.634415
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1763490939
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.403533 +/- 0.00239836 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.403533 @ 95%CL (1 toyMC)
median expected limit: r < 0.403533 @ 95%CL (1 toyMC)
   68% expected band : 0.403533 < r < 0.403533
   95% expected band : 0.403533 < r < 0.403533
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1106869275
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.590465 +/- 0.00264673 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.590465 @ 95%CL (1 toyMC)
median expected limit: r < 0.590465 @ 95%CL (1 toyMC)
   68% expected band : 0.590465 < r < 0.590465
   95% expected band : 0.590465 < r < 0.590465
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1917511151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.590392 +/- 0.00284878 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.590392 @ 95%CL (1 toyMC)
median expected limit: r < 0.590392 @ 95%CL (1 toyMC)
   68% expected band : 0.590392 < r < 0.590392
   95% expected band : 0.590392 < r < 0.590392
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 962337881
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280388 +/- 0.00226268 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.280388 @ 95%CL (1 toyMC)
median expected limit: r < 0.280388 @ 95%CL (1 toyMC)
   68% expected band : 0.280388 < r < 0.280388
   95% expected band : 0.280388 < r < 0.280388
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1232315193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.290331 +/- 0.00283238 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.290331 @ 95%CL (1 toyMC)
median expected limit: r < 0.290331 @ 95%CL (1 toyMC)
   68% expected band : 0.290331 < r < 0.290331
   95% expected band : 0.290331 < r < 0.290331
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1748666681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.643139 +/- 0.00275944 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.643139 @ 95%CL (1 toyMC)
median expected limit: r < 0.643139 @ 95%CL (1 toyMC)
   68% expected band : 0.643139 < r < 0.643139
   95% expected band : 0.643139 < r < 0.643139
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -576013246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288974 +/- 0.00251601 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.288974 @ 95%CL (1 toyMC)
median expected limit: r < 0.288974 @ 95%CL (1 toyMC)
   68% expected band : 0.288974 < r < 0.288974
   95% expected band : 0.288974 < r < 0.288974
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 93911558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.402849 +/- 0.00247337 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.402849 @ 95%CL (1 toyMC)
median expected limit: r < 0.402849 @ 95%CL (1 toyMC)
   68% expected band : 0.402849 < r < 0.402849
   95% expected band : 0.402849 < r < 0.402849
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 151890138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.509197 +/- 0.00280822 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.509197 @ 95%CL (1 toyMC)
median expected limit: r < 0.509197 @ 95%CL (1 toyMC)
   68% expected band : 0.509197 < r < 0.509197
   95% expected band : 0.509197 < r < 0.509197
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -537319033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.496589 +/- 0.00271232 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.496589 @ 95%CL (1 toyMC)
median expected limit: r < 0.496589 @ 95%CL (1 toyMC)
   68% expected band : 0.496589 < r < 0.496589
   95% expected band : 0.496589 < r < 0.496589
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1854731912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.273615 +/- 0.00273327 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.273615 @ 95%CL (1 toyMC)
median expected limit: r < 0.273615 @ 95%CL (1 toyMC)
   68% expected band : 0.273615 < r < 0.273615
   95% expected band : 0.273615 < r < 0.273615
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1288843610
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.2913 +/- 0.00228657 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.2913 @ 95%CL (1 toyMC)
median expected limit: r < 0.2913 @ 95%CL (1 toyMC)
   68% expected band : 0.2913 < r < 0.2913
   95% expected band : 0.2913 < r < 0.2913
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -144383442
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.316302 +/- 0.00270148 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.316302 @ 95%CL (1 toyMC)
median expected limit: r < 0.316302 @ 95%CL (1 toyMC)
   68% expected band : 0.316302 < r < 0.316302
   95% expected band : 0.316302 < r < 0.316302
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1983562344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.557706 +/- 0.00302906 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.557706 @ 95%CL (1 toyMC)
median expected limit: r < 0.557706 @ 95%CL (1 toyMC)
   68% expected band : 0.557706 < r < 0.557706
   95% expected band : 0.557706 < r < 0.557706
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -814043065
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388227 +/- 0.00253851 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.388227 @ 95%CL (1 toyMC)
median expected limit: r < 0.388227 @ 95%CL (1 toyMC)
   68% expected band : 0.388227 < r < 0.388227
   95% expected band : 0.388227 < r < 0.388227
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -26338815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.492083 +/- 0.0019647 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 0.492083 @ 95%CL (1 toyMC)
median expected limit: r < 0.492083 @ 95%CL (1 toyMC)
   68% expected band : 0.492083 < r < 0.492083
   95% expected band : 0.492083 < r < 0.492083
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 290249379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.295828 +/- 0.00276212 @ 95% CL (100 tries)
Done in 0.68 min (cpu), 0.68 min (real)
mean   expected limit: r < 0.295828 @ 95%CL (1 toyMC)
median expected limit: r < 0.295828 @ 95%CL (1 toyMC)
   68% expected band : 0.295828 < r < 0.295828
   95% expected band : 0.295828 < r < 0.295828
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2131162262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.474985 +/- 0.00272181 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.474985 @ 95%CL (1 toyMC)
median expected limit: r < 0.474985 @ 95%CL (1 toyMC)
   68% expected band : 0.474985 < r < 0.474985
   95% expected band : 0.474985 < r < 0.474985
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1684442568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.535437 +/- 0.00292424 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.535437 @ 95%CL (1 toyMC)
median expected limit: r < 0.535437 @ 95%CL (1 toyMC)
   68% expected band : 0.535437 < r < 0.535437
   95% expected band : 0.535437 < r < 0.535437
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -457495984
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.54709 +/- 0.00239988 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.54709 @ 95%CL (1 toyMC)
median expected limit: r < 0.54709 @ 95%CL (1 toyMC)
   68% expected band : 0.54709 < r < 0.54709
   95% expected band : 0.54709 < r < 0.54709
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1079970191
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.58593 +/- 0.00257703 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.58593 @ 95%CL (1 toyMC)
median expected limit: r < 0.58593 @ 95%CL (1 toyMC)
   68% expected band : 0.58593 < r < 0.58593
   95% expected band : 0.58593 < r < 0.58593
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -174239886
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.342905 +/- 0.00261062 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.342905 @ 95%CL (1 toyMC)
median expected limit: r < 0.342905 @ 95%CL (1 toyMC)
   68% expected band : 0.342905 < r < 0.342905
   95% expected band : 0.342905 < r < 0.342905
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -253878908
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.30816 +/- 0.00232777 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.30816 @ 95%CL (1 toyMC)
median expected limit: r < 0.30816 @ 95%CL (1 toyMC)
   68% expected band : 0.30816 < r < 0.30816
   95% expected band : 0.30816 < r < 0.30816
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1978280487
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.198993 +/- 0.00300895 @ 95% CL (100 tries)
Done in 0.69 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.198993 @ 95%CL (1 toyMC)
median expected limit: r < 0.198993 @ 95%CL (1 toyMC)
   68% expected band : 0.198993 < r < 0.198993
   95% expected band : 0.198993 < r < 0.198993
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 851062461
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.218045 +/- 0.00255799 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.218045 @ 95%CL (1 toyMC)
median expected limit: r < 0.218045 @ 95%CL (1 toyMC)
   68% expected band : 0.218045 < r < 0.218045
   95% expected band : 0.218045 < r < 0.218045
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1417869747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.512418 +/- 0.00285479 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.512418 @ 95%CL (1 toyMC)
median expected limit: r < 0.512418 @ 95%CL (1 toyMC)
   68% expected band : 0.512418 < r < 0.512418
   95% expected band : 0.512418 < r < 0.512418
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2019668224
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.446813 +/- 0.00322565 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.446813 @ 95%CL (1 toyMC)
median expected limit: r < 0.446813 @ 95%CL (1 toyMC)
   68% expected band : 0.446813 < r < 0.446813
   95% expected band : 0.446813 < r < 0.446813
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -816442411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238684 +/- 0.00212917 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.238684 @ 95%CL (1 toyMC)
median expected limit: r < 0.238684 @ 95%CL (1 toyMC)
   68% expected band : 0.238684 < r < 0.238684
   95% expected band : 0.238684 < r < 0.238684
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1107420492
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.21017 +/- 0.00198048 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.21017 @ 95%CL (1 toyMC)
median expected limit: r < 0.21017 @ 95%CL (1 toyMC)
   68% expected band : 0.21017 < r < 0.21017
   95% expected band : 0.21017 < r < 0.21017
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1287476798
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.519221 +/- 0.00230521 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.519221 @ 95%CL (1 toyMC)
median expected limit: r < 0.519221 @ 95%CL (1 toyMC)
   68% expected band : 0.519221 < r < 0.519221
   95% expected band : 0.519221 < r < 0.519221
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1293899118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.426359 +/- 0.00277712 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.426359 @ 95%CL (1 toyMC)
median expected limit: r < 0.426359 @ 95%CL (1 toyMC)
   68% expected band : 0.426359 < r < 0.426359
   95% expected band : 0.426359 < r < 0.426359
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1933783229
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236828 +/- 0.00227195 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.236828 @ 95%CL (1 toyMC)
median expected limit: r < 0.236828 @ 95%CL (1 toyMC)
   68% expected band : 0.236828 < r < 0.236828
   95% expected band : 0.236828 < r < 0.236828
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1329488933
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.436247 +/- 0.00252926 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.436247 @ 95%CL (1 toyMC)
median expected limit: r < 0.436247 @ 95%CL (1 toyMC)
   68% expected band : 0.436247 < r < 0.436247
   95% expected band : 0.436247 < r < 0.436247
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1459054667
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.30208 +/- 0.00279281 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.30208 @ 95%CL (1 toyMC)
median expected limit: r < 0.30208 @ 95%CL (1 toyMC)
   68% expected band : 0.30208 < r < 0.30208
   95% expected band : 0.30208 < r < 0.30208
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -125045973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253147 +/- 0.00277983 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.253147 @ 95%CL (1 toyMC)
median expected limit: r < 0.253147 @ 95%CL (1 toyMC)
   68% expected band : 0.253147 < r < 0.253147
   95% expected band : 0.253147 < r < 0.253147
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 814881649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.317818 +/- 0.00258698 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.317818 @ 95%CL (1 toyMC)
median expected limit: r < 0.317818 @ 95%CL (1 toyMC)
   68% expected band : 0.317818 < r < 0.317818
   95% expected band : 0.317818 < r < 0.317818
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1783487300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.291418 +/- 0.00252012 @ 95% CL (100 tries)
Done in 0.69 min (cpu), 0.69 min (real)
mean   expected limit: r < 0.291418 @ 95%CL (1 toyMC)
median expected limit: r < 0.291418 @ 95%CL (1 toyMC)
   68% expected band : 0.291418 < r < 0.291418
   95% expected band : 0.291418 < r < 0.291418
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2005413482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.296153 +/- 0.00252581 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.296153 @ 95%CL (1 toyMC)
median expected limit: r < 0.296153 @ 95%CL (1 toyMC)
   68% expected band : 0.296153 < r < 0.296153
   95% expected band : 0.296153 < r < 0.296153
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1782724940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.264557 +/- 0.00252833 @ 95% CL (100 tries)
Done in 0.69 min (cpu), 0.69 min (real)
mean   expected limit: r < 0.264557 @ 95%CL (1 toyMC)
median expected limit: r < 0.264557 @ 95%CL (1 toyMC)
   68% expected band : 0.264557 < r < 0.264557
   95% expected band : 0.264557 < r < 0.264557
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1515041083
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.466516 +/- 0.00274227 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.466516 @ 95%CL (1 toyMC)
median expected limit: r < 0.466516 @ 95%CL (1 toyMC)
   68% expected band : 0.466516 < r < 0.466516
   95% expected band : 0.466516 < r < 0.466516
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 433845938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.537223 +/- 0.0027499 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.537223 @ 95%CL (1 toyMC)
median expected limit: r < 0.537223 @ 95%CL (1 toyMC)
   68% expected band : 0.537223 < r < 0.537223
   95% expected band : 0.537223 < r < 0.537223
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1315867155
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.521622 +/- 0.00241227 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.521622 @ 95%CL (1 toyMC)
median expected limit: r < 0.521622 @ 95%CL (1 toyMC)
   68% expected band : 0.521622 < r < 0.521622
   95% expected band : 0.521622 < r < 0.521622
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine22.MarkovChainMC.mH22.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH22.-1102505278.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH22.-1106869275.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH22.-1107420492.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH22.-125045973.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH22.-1280342566.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH22.-1293899118.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH22.-1315867155.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH22.-1417869747.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH22.-1440082337.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH22.-144383442.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH22.-1444858365.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH22.-1564666338.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH22.-1684442568.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH22.-1736205581.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH22.-174239886.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH22.-1748666681.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH22.-1763490939.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH22.-1782724940.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH22.-1783487300.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH22.-183523534.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH22.-1854731912.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH22.-1917511151.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH22.-1931710922.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH22.-1950009910.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH22.-1978280487.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH22.-2022438704.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH22.-2108560868.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH22.-2131162262.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH22.-2132672455.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH22.-217244379.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH22.-253878908.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH22.-26338815.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH22.-299042264.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH22.-33054548.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH22.-457495984.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH22.-511322290.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH22.-537319033.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH22.-567437490.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH22.-576013246.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH22.-576290340.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH22.-583043220.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH22.-619087625.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH22.-778830534.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH22.-814043065.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH22.-816442411.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH22.-831454151.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH22.1033696020.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH22.1079970191.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH22.1100761159.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH22.1205231042.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH22.1232315193.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH22.1255548313.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH22.1287476798.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH22.1288843610.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH22.1313811157.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH22.1315911129.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH22.1329488933.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH22.1350327790.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH22.1380116972.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH22.1381441982.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH22.1383345429.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH22.1444077618.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH22.1459054667.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH22.1476367603.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH22.1515041083.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH22.151890138.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH22.1533122564.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH22.158601677.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH22.1590701046.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH22.1618440510.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH22.1623446483.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH22.1640826385.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH22.1716956478.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH22.174401314.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH22.1819875254.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH22.1933783229.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH22.1983562344.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH22.2005413482.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH22.201368364.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH22.2019668224.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH22.2083104897.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH22.2086163794.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH22.2128687139.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH22.227713046.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH22.258412892.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH22.290249379.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH22.304350305.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH22.414922789.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH22.418500943.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH22.431834348.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH22.433845938.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH22.459026292.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH22.574075274.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH22.614135411.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH22.814881649.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH22.851062461.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH22.854777757.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH22.93911558.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH22.962337881.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH22.963876899.root
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -436564866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.765632 +/- 0.00306533 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 0.765632 @ 95%CL (1 toyMC)
median expected limit: r < 0.765632 @ 95%CL (1 toyMC)
   68% expected band : 0.765632 < r < 0.765632
   95% expected band : 0.765632 < r < 0.765632
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2112596027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.713375 +/- 0.00280468 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.713375 @ 95%CL (1 toyMC)
median expected limit: r < 0.713375 @ 95%CL (1 toyMC)
   68% expected band : 0.713375 < r < 0.713375
   95% expected band : 0.713375 < r < 0.713375
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -291657676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.632499 +/- 0.00342942 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.632499 @ 95%CL (1 toyMC)
median expected limit: r < 0.632499 @ 95%CL (1 toyMC)
   68% expected band : 0.632499 < r < 0.632499
   95% expected band : 0.632499 < r < 0.632499
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -199761272
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.592292 +/- 0.00273222 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.592292 @ 95%CL (1 toyMC)
median expected limit: r < 0.592292 @ 95%CL (1 toyMC)
   68% expected band : 0.592292 < r < 0.592292
   95% expected band : 0.592292 < r < 0.592292
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -226063919
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01046 +/- 0.00245648 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.01046 @ 95%CL (1 toyMC)
median expected limit: r < 1.01046 @ 95%CL (1 toyMC)
   68% expected band : 1.01046 < r < 1.01046
   95% expected band : 1.01046 < r < 1.01046
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1704100246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.89718 +/- 0.0035991 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.89718 @ 95%CL (1 toyMC)
median expected limit: r < 0.89718 @ 95%CL (1 toyMC)
   68% expected band : 0.89718 < r < 0.89718
   95% expected band : 0.89718 < r < 0.89718
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1220856391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1785 +/- 0.00262225 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.1785 @ 95%CL (1 toyMC)
median expected limit: r < 1.1785 @ 95%CL (1 toyMC)
   68% expected band : 1.1785 < r < 1.1785
   95% expected band : 1.1785 < r < 1.1785
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2051941742
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.818687 +/- 0.00288199 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.818687 @ 95%CL (1 toyMC)
median expected limit: r < 0.818687 @ 95%CL (1 toyMC)
   68% expected band : 0.818687 < r < 0.818687
   95% expected band : 0.818687 < r < 0.818687
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1112288411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01952 +/- 0.0034595 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.01952 @ 95%CL (1 toyMC)
median expected limit: r < 1.01952 @ 95%CL (1 toyMC)
   68% expected band : 1.01952 < r < 1.01952
   95% expected band : 1.01952 < r < 1.01952
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1034796815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.734287 +/- 0.00351541 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.734287 @ 95%CL (1 toyMC)
median expected limit: r < 0.734287 @ 95%CL (1 toyMC)
   68% expected band : 0.734287 < r < 0.734287
   95% expected band : 0.734287 < r < 0.734287
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -942702267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07088 +/- 0.00290641 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.07088 @ 95%CL (1 toyMC)
median expected limit: r < 1.07088 @ 95%CL (1 toyMC)
   68% expected band : 1.07088 < r < 1.07088
   95% expected band : 1.07088 < r < 1.07088
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 742917519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.838842 +/- 0.00274054 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.838842 @ 95%CL (1 toyMC)
median expected limit: r < 0.838842 @ 95%CL (1 toyMC)
   68% expected band : 0.838842 < r < 0.838842
   95% expected band : 0.838842 < r < 0.838842
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -155193266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11352 +/- 0.0032925 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 1.11352 @ 95%CL (1 toyMC)
median expected limit: r < 1.11352 @ 95%CL (1 toyMC)
   68% expected band : 1.11352 < r < 1.11352
   95% expected band : 1.11352 < r < 1.11352
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1611970887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09037 +/- 0.00331565 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.09037 @ 95%CL (1 toyMC)
median expected limit: r < 1.09037 @ 95%CL (1 toyMC)
   68% expected band : 1.09037 < r < 1.09037
   95% expected band : 1.09037 < r < 1.09037
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 943304328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.673563 +/- 0.00256009 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.673563 @ 95%CL (1 toyMC)
median expected limit: r < 0.673563 @ 95%CL (1 toyMC)
   68% expected band : 0.673563 < r < 0.673563
   95% expected band : 0.673563 < r < 0.673563
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1141286674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01064 +/- 0.003344 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.01064 @ 95%CL (1 toyMC)
median expected limit: r < 1.01064 @ 95%CL (1 toyMC)
   68% expected band : 1.01064 < r < 1.01064
   95% expected band : 1.01064 < r < 1.01064
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 64980702
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.877239 +/- 0.00289774 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 0.877239 @ 95%CL (1 toyMC)
median expected limit: r < 0.877239 @ 95%CL (1 toyMC)
   68% expected band : 0.877239 < r < 0.877239
   95% expected band : 0.877239 < r < 0.877239
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1433500724
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24968 +/- 0.00344217 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.24968 @ 95%CL (1 toyMC)
median expected limit: r < 1.24968 @ 95%CL (1 toyMC)
   68% expected band : 1.24968 < r < 1.24968
   95% expected band : 1.24968 < r < 1.24968
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 554292043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.921432 +/- 0.00370218 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.921432 @ 95%CL (1 toyMC)
median expected limit: r < 0.921432 @ 95%CL (1 toyMC)
   68% expected band : 0.921432 < r < 0.921432
   95% expected band : 0.921432 < r < 0.921432
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 840226306
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91572 +/- 0.00396114 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.91572 @ 95%CL (1 toyMC)
median expected limit: r < 1.91572 @ 95%CL (1 toyMC)
   68% expected band : 1.91572 < r < 1.91572
   95% expected band : 1.91572 < r < 1.91572
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -983599920
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.611219 +/- 0.00389723 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.611219 @ 95%CL (1 toyMC)
median expected limit: r < 0.611219 @ 95%CL (1 toyMC)
   68% expected band : 0.611219 < r < 0.611219
   95% expected band : 0.611219 < r < 0.611219
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1831726732
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.067 +/- 0.00338177 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.067 @ 95%CL (1 toyMC)
median expected limit: r < 1.067 @ 95%CL (1 toyMC)
   68% expected band : 1.067 < r < 1.067
   95% expected band : 1.067 < r < 1.067
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2116266052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.787 +/- 0.0028613 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.787 @ 95%CL (1 toyMC)
median expected limit: r < 0.787 @ 95%CL (1 toyMC)
   68% expected band : 0.787 < r < 0.787
   95% expected band : 0.787 < r < 0.787
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 768179998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.796409 +/- 0.00269341 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.796409 @ 95%CL (1 toyMC)
median expected limit: r < 0.796409 @ 95%CL (1 toyMC)
   68% expected band : 0.796409 < r < 0.796409
   95% expected band : 0.796409 < r < 0.796409
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 531017437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03708 +/- 0.00322679 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 1.03708 @ 95%CL (1 toyMC)
median expected limit: r < 1.03708 @ 95%CL (1 toyMC)
   68% expected band : 1.03708 < r < 1.03708
   95% expected band : 1.03708 < r < 1.03708
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 709102780
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.43193 +/- 0.00259041 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.43193 @ 95%CL (1 toyMC)
median expected limit: r < 0.43193 @ 95%CL (1 toyMC)
   68% expected band : 0.43193 < r < 0.43193
   95% expected band : 0.43193 < r < 0.43193
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 471398484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09806 +/- 0.00342016 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 1.09806 @ 95%CL (1 toyMC)
median expected limit: r < 1.09806 @ 95%CL (1 toyMC)
   68% expected band : 1.09806 < r < 1.09806
   95% expected band : 1.09806 < r < 1.09806
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1124623217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.701015 +/- 0.00302725 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.701015 @ 95%CL (1 toyMC)
median expected limit: r < 0.701015 @ 95%CL (1 toyMC)
   68% expected band : 0.701015 < r < 0.701015
   95% expected band : 0.701015 < r < 0.701015
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -760389924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.973169 +/- 0.00307285 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.973169 @ 95%CL (1 toyMC)
median expected limit: r < 0.973169 @ 95%CL (1 toyMC)
   68% expected band : 0.973169 < r < 0.973169
   95% expected band : 0.973169 < r < 0.973169
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 834525813
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27668 +/- 0.00450133 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.27668 @ 95%CL (1 toyMC)
median expected limit: r < 1.27668 @ 95%CL (1 toyMC)
   68% expected band : 1.27668 < r < 1.27668
   95% expected band : 1.27668 < r < 1.27668
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -976136421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59714 +/- 0.00324704 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.59714 @ 95%CL (1 toyMC)
median expected limit: r < 1.59714 @ 95%CL (1 toyMC)
   68% expected band : 1.59714 < r < 1.59714
   95% expected band : 1.59714 < r < 1.59714
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -594734402
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.625901 +/- 0.00282116 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.625901 @ 95%CL (1 toyMC)
median expected limit: r < 0.625901 @ 95%CL (1 toyMC)
   68% expected band : 0.625901 < r < 0.625901
   95% expected band : 0.625901 < r < 0.625901
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 105521532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19615 +/- 0.00321278 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.19615 @ 95%CL (1 toyMC)
median expected limit: r < 1.19615 @ 95%CL (1 toyMC)
   68% expected band : 1.19615 < r < 1.19615
   95% expected band : 1.19615 < r < 1.19615
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 717927166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.586575 +/- 0.00336621 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.586575 @ 95%CL (1 toyMC)
median expected limit: r < 0.586575 @ 95%CL (1 toyMC)
   68% expected band : 0.586575 < r < 0.586575
   95% expected band : 0.586575 < r < 0.586575
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1680841961
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.545461 +/- 0.00329438 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.545461 @ 95%CL (1 toyMC)
median expected limit: r < 0.545461 @ 95%CL (1 toyMC)
   68% expected band : 0.545461 < r < 0.545461
   95% expected band : 0.545461 < r < 0.545461
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1895508944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.800015 +/- 0.0035512 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.800015 @ 95%CL (1 toyMC)
median expected limit: r < 0.800015 @ 95%CL (1 toyMC)
   68% expected band : 0.800015 < r < 0.800015
   95% expected band : 0.800015 < r < 0.800015
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 44646567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.637585 +/- 0.00319298 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.637585 @ 95%CL (1 toyMC)
median expected limit: r < 0.637585 @ 95%CL (1 toyMC)
   68% expected band : 0.637585 < r < 0.637585
   95% expected band : 0.637585 < r < 0.637585
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 883642536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22 +/- 0.00303009 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.22 @ 95%CL (1 toyMC)
median expected limit: r < 1.22 @ 95%CL (1 toyMC)
   68% expected band : 1.22 < r < 1.22
   95% expected band : 1.22 < r < 1.22
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1416392178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.476953 +/- 0.00240683 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.476953 @ 95%CL (1 toyMC)
median expected limit: r < 0.476953 @ 95%CL (1 toyMC)
   68% expected band : 0.476953 < r < 0.476953
   95% expected band : 0.476953 < r < 0.476953
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1079297418
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.831439 +/- 0.00289086 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.831439 @ 95%CL (1 toyMC)
median expected limit: r < 0.831439 @ 95%CL (1 toyMC)
   68% expected band : 0.831439 < r < 0.831439
   95% expected band : 0.831439 < r < 0.831439
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1844450164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.681616 +/- 0.00252408 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.681616 @ 95%CL (1 toyMC)
median expected limit: r < 0.681616 @ 95%CL (1 toyMC)
   68% expected band : 0.681616 < r < 0.681616
   95% expected band : 0.681616 < r < 0.681616
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1946417988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.62275 +/- 0.00317189 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.62275 @ 95%CL (1 toyMC)
median expected limit: r < 0.62275 @ 95%CL (1 toyMC)
   68% expected band : 0.62275 < r < 0.62275
   95% expected band : 0.62275 < r < 0.62275
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 947446234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.594087 +/- 0.00287599 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.594087 @ 95%CL (1 toyMC)
median expected limit: r < 0.594087 @ 95%CL (1 toyMC)
   68% expected band : 0.594087 < r < 0.594087
   95% expected band : 0.594087 < r < 0.594087
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 14436345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.921875 +/- 0.00349934 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.921875 @ 95%CL (1 toyMC)
median expected limit: r < 0.921875 @ 95%CL (1 toyMC)
   68% expected band : 0.921875 < r < 0.921875
   95% expected band : 0.921875 < r < 0.921875
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1887565758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3377 +/- 0.0034627 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.3377 @ 95%CL (1 toyMC)
median expected limit: r < 1.3377 @ 95%CL (1 toyMC)
   68% expected band : 1.3377 < r < 1.3377
   95% expected band : 1.3377 < r < 1.3377
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -313120057
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.867233 +/- 0.00332748 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.867233 @ 95%CL (1 toyMC)
median expected limit: r < 0.867233 @ 95%CL (1 toyMC)
   68% expected band : 0.867233 < r < 0.867233
   95% expected band : 0.867233 < r < 0.867233
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 984048100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.64977 +/- 0.00307695 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 0.64977 @ 95%CL (1 toyMC)
median expected limit: r < 0.64977 @ 95%CL (1 toyMC)
   68% expected band : 0.64977 < r < 0.64977
   95% expected band : 0.64977 < r < 0.64977
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1967717344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.646005 +/- 0.00307034 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.646005 @ 95%CL (1 toyMC)
median expected limit: r < 0.646005 @ 95%CL (1 toyMC)
   68% expected band : 0.646005 < r < 0.646005
   95% expected band : 0.646005 < r < 0.646005
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1191170091
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10949 +/- 0.00323515 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.10949 @ 95%CL (1 toyMC)
median expected limit: r < 1.10949 @ 95%CL (1 toyMC)
   68% expected band : 1.10949 < r < 1.10949
   95% expected band : 1.10949 < r < 1.10949
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1244190062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.943006 +/- 0.00411062 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.943006 @ 95%CL (1 toyMC)
median expected limit: r < 0.943006 @ 95%CL (1 toyMC)
   68% expected band : 0.943006 < r < 0.943006
   95% expected band : 0.943006 < r < 0.943006
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1102869041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.841707 +/- 0.00353647 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 0.841707 @ 95%CL (1 toyMC)
median expected limit: r < 0.841707 @ 95%CL (1 toyMC)
   68% expected band : 0.841707 < r < 0.841707
   95% expected band : 0.841707 < r < 0.841707
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1547921525
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.990275 +/- 0.00450146 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.990275 @ 95%CL (1 toyMC)
median expected limit: r < 0.990275 @ 95%CL (1 toyMC)
   68% expected band : 0.990275 < r < 0.990275
   95% expected band : 0.990275 < r < 0.990275
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 106810817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.818387 +/- 0.00330279 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.818387 @ 95%CL (1 toyMC)
median expected limit: r < 0.818387 @ 95%CL (1 toyMC)
   68% expected band : 0.818387 < r < 0.818387
   95% expected band : 0.818387 < r < 0.818387
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1850982402
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.727795 +/- 0.00350859 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.727795 @ 95%CL (1 toyMC)
median expected limit: r < 0.727795 @ 95%CL (1 toyMC)
   68% expected band : 0.727795 < r < 0.727795
   95% expected band : 0.727795 < r < 0.727795
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 317642717
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69092 +/- 0.00376227 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.69092 @ 95%CL (1 toyMC)
median expected limit: r < 1.69092 @ 95%CL (1 toyMC)
   68% expected band : 1.69092 < r < 1.69092
   95% expected band : 1.69092 < r < 1.69092
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1959094383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99862 +/- 0.00443195 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.79 min (real)
mean   expected limit: r < 1.99862 @ 95%CL (1 toyMC)
median expected limit: r < 1.99862 @ 95%CL (1 toyMC)
   68% expected band : 1.99862 < r < 1.99862
   95% expected band : 1.99862 < r < 1.99862
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 26125547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.638586 +/- 0.00251291 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.638586 @ 95%CL (1 toyMC)
median expected limit: r < 0.638586 @ 95%CL (1 toyMC)
   68% expected band : 0.638586 < r < 0.638586
   95% expected band : 0.638586 < r < 0.638586
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 404320654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.962582 +/- 0.00357302 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.962582 @ 95%CL (1 toyMC)
median expected limit: r < 0.962582 @ 95%CL (1 toyMC)
   68% expected band : 0.962582 < r < 0.962582
   95% expected band : 0.962582 < r < 0.962582
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 897809937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.565253 +/- 0.00268935 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.565253 @ 95%CL (1 toyMC)
median expected limit: r < 0.565253 @ 95%CL (1 toyMC)
   68% expected band : 0.565253 < r < 0.565253
   95% expected band : 0.565253 < r < 0.565253
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 979610004
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.617599 +/- 0.0029064 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.617599 @ 95%CL (1 toyMC)
median expected limit: r < 0.617599 @ 95%CL (1 toyMC)
   68% expected band : 0.617599 < r < 0.617599
   95% expected band : 0.617599 < r < 0.617599
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1024740300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43713 +/- 0.00257534 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 1.43713 @ 95%CL (1 toyMC)
median expected limit: r < 1.43713 @ 95%CL (1 toyMC)
   68% expected band : 1.43713 < r < 1.43713
   95% expected band : 1.43713 < r < 1.43713
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1154090080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85616 +/- 0.00318684 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.85616 @ 95%CL (1 toyMC)
median expected limit: r < 1.85616 @ 95%CL (1 toyMC)
   68% expected band : 1.85616 < r < 1.85616
   95% expected band : 1.85616 < r < 1.85616
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 773460732
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.451108 +/- 0.00258483 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.451108 @ 95%CL (1 toyMC)
median expected limit: r < 0.451108 @ 95%CL (1 toyMC)
   68% expected band : 0.451108 < r < 0.451108
   95% expected band : 0.451108 < r < 0.451108
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 899171928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.667128 +/- 0.00303013 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.667128 @ 95%CL (1 toyMC)
median expected limit: r < 0.667128 @ 95%CL (1 toyMC)
   68% expected band : 0.667128 < r < 0.667128
   95% expected band : 0.667128 < r < 0.667128
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2092710897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4604 +/- 0.00338478 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 1.4604 @ 95%CL (1 toyMC)
median expected limit: r < 1.4604 @ 95%CL (1 toyMC)
   68% expected band : 1.4604 < r < 1.4604
   95% expected band : 1.4604 < r < 1.4604
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 718804849
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.611037 +/- 0.00308303 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.611037 @ 95%CL (1 toyMC)
median expected limit: r < 0.611037 @ 95%CL (1 toyMC)
   68% expected band : 0.611037 < r < 0.611037
   95% expected band : 0.611037 < r < 0.611037
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1005331003
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.941213 +/- 0.00316922 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.941213 @ 95%CL (1 toyMC)
median expected limit: r < 0.941213 @ 95%CL (1 toyMC)
   68% expected band : 0.941213 < r < 0.941213
   95% expected band : 0.941213 < r < 0.941213
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1684647777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.537836 +/- 0.00278389 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.537836 @ 95%CL (1 toyMC)
median expected limit: r < 0.537836 @ 95%CL (1 toyMC)
   68% expected band : 0.537836 < r < 0.537836
   95% expected band : 0.537836 < r < 0.537836
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 750261934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.676531 +/- 0.00340232 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.676531 @ 95%CL (1 toyMC)
median expected limit: r < 0.676531 @ 95%CL (1 toyMC)
   68% expected band : 0.676531 < r < 0.676531
   95% expected band : 0.676531 < r < 0.676531
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -403610397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.829463 +/- 0.00319783 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.829463 @ 95%CL (1 toyMC)
median expected limit: r < 0.829463 @ 95%CL (1 toyMC)
   68% expected band : 0.829463 < r < 0.829463
   95% expected band : 0.829463 < r < 0.829463
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1234272755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25365 +/- 0.00291168 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 1.25365 @ 95%CL (1 toyMC)
median expected limit: r < 1.25365 @ 95%CL (1 toyMC)
   68% expected band : 1.25365 < r < 1.25365
   95% expected band : 1.25365 < r < 1.25365
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 153925825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31086 +/- 0.00375324 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 1.31086 @ 95%CL (1 toyMC)
median expected limit: r < 1.31086 @ 95%CL (1 toyMC)
   68% expected band : 1.31086 < r < 1.31086
   95% expected band : 1.31086 < r < 1.31086
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 473996962
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.951919 +/- 0.00369465 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.951919 @ 95%CL (1 toyMC)
median expected limit: r < 0.951919 @ 95%CL (1 toyMC)
   68% expected band : 0.951919 < r < 0.951919
   95% expected band : 0.951919 < r < 0.951919
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1419340879
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0058 +/- 0.0038659 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.0058 @ 95%CL (1 toyMC)
median expected limit: r < 1.0058 @ 95%CL (1 toyMC)
   68% expected band : 1.0058 < r < 1.0058
   95% expected band : 1.0058 < r < 1.0058
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 854876523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.618776 +/- 0.00311997 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.618776 @ 95%CL (1 toyMC)
median expected limit: r < 0.618776 @ 95%CL (1 toyMC)
   68% expected band : 0.618776 < r < 0.618776
   95% expected band : 0.618776 < r < 0.618776
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1551410274
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.873241 +/- 0.00329304 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.873241 @ 95%CL (1 toyMC)
median expected limit: r < 0.873241 @ 95%CL (1 toyMC)
   68% expected band : 0.873241 < r < 0.873241
   95% expected band : 0.873241 < r < 0.873241
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2019803468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.757333 +/- 0.00373814 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 0.757333 @ 95%CL (1 toyMC)
median expected limit: r < 0.757333 @ 95%CL (1 toyMC)
   68% expected band : 0.757333 < r < 0.757333
   95% expected band : 0.757333 < r < 0.757333
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1981113687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.868497 +/- 0.00381893 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.868497 @ 95%CL (1 toyMC)
median expected limit: r < 0.868497 @ 95%CL (1 toyMC)
   68% expected band : 0.868497 < r < 0.868497
   95% expected band : 0.868497 < r < 0.868497
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2134473108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.938682 +/- 0.00317823 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.78 min (real)
mean   expected limit: r < 0.938682 @ 95%CL (1 toyMC)
median expected limit: r < 0.938682 @ 95%CL (1 toyMC)
   68% expected band : 0.938682 < r < 0.938682
   95% expected band : 0.938682 < r < 0.938682
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 800607696
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.807215 +/- 0.00383879 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.807215 @ 95%CL (1 toyMC)
median expected limit: r < 0.807215 @ 95%CL (1 toyMC)
   68% expected band : 0.807215 < r < 0.807215
   95% expected band : 0.807215 < r < 0.807215
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 653207360
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07864 +/- 0.00357377 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.07864 @ 95%CL (1 toyMC)
median expected limit: r < 1.07864 @ 95%CL (1 toyMC)
   68% expected band : 1.07864 < r < 1.07864
   95% expected band : 1.07864 < r < 1.07864
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -994122168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.601599 +/- 0.00281976 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 0.601599 @ 95%CL (1 toyMC)
median expected limit: r < 0.601599 @ 95%CL (1 toyMC)
   68% expected band : 0.601599 < r < 0.601599
   95% expected band : 0.601599 < r < 0.601599
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1186776751
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.882804 +/- 0.00392709 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.882804 @ 95%CL (1 toyMC)
median expected limit: r < 0.882804 @ 95%CL (1 toyMC)
   68% expected band : 0.882804 < r < 0.882804
   95% expected band : 0.882804 < r < 0.882804
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -993131282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.795479 +/- 0.00294689 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.795479 @ 95%CL (1 toyMC)
median expected limit: r < 0.795479 @ 95%CL (1 toyMC)
   68% expected band : 0.795479 < r < 0.795479
   95% expected band : 0.795479 < r < 0.795479
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -799738290
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12926 +/- 0.00315473 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.12926 @ 95%CL (1 toyMC)
median expected limit: r < 1.12926 @ 95%CL (1 toyMC)
   68% expected band : 1.12926 < r < 1.12926
   95% expected band : 1.12926 < r < 1.12926
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1023217890
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.758446 +/- 0.00293791 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.758446 @ 95%CL (1 toyMC)
median expected limit: r < 0.758446 @ 95%CL (1 toyMC)
   68% expected band : 0.758446 < r < 0.758446
   95% expected band : 0.758446 < r < 0.758446
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -780830777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.753761 +/- 0.00316354 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.753761 @ 95%CL (1 toyMC)
median expected limit: r < 0.753761 @ 95%CL (1 toyMC)
   68% expected band : 0.753761 < r < 0.753761
   95% expected band : 0.753761 < r < 0.753761
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 342969674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.632297 +/- 0.00250837 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.632297 @ 95%CL (1 toyMC)
median expected limit: r < 0.632297 @ 95%CL (1 toyMC)
   68% expected band : 0.632297 < r < 0.632297
   95% expected band : 0.632297 < r < 0.632297
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1728072876
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13659 +/- 0.00308943 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 1.13659 @ 95%CL (1 toyMC)
median expected limit: r < 1.13659 @ 95%CL (1 toyMC)
   68% expected band : 1.13659 < r < 1.13659
   95% expected band : 1.13659 < r < 1.13659
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 50273529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4273 +/- 0.00327624 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.4273 @ 95%CL (1 toyMC)
median expected limit: r < 1.4273 @ 95%CL (1 toyMC)
   68% expected band : 1.4273 < r < 1.4273
   95% expected band : 1.4273 < r < 1.4273
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1781969266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.776904 +/- 0.00355022 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.776904 @ 95%CL (1 toyMC)
median expected limit: r < 0.776904 @ 95%CL (1 toyMC)
   68% expected band : 0.776904 < r < 0.776904
   95% expected band : 0.776904 < r < 0.776904
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1449991449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02623 +/- 0.00335049 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.02623 @ 95%CL (1 toyMC)
median expected limit: r < 1.02623 @ 95%CL (1 toyMC)
   68% expected band : 1.02623 < r < 1.02623
   95% expected band : 1.02623 < r < 1.02623
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -399470693
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15193 +/- 0.00363699 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 1.15193 @ 95%CL (1 toyMC)
median expected limit: r < 1.15193 @ 95%CL (1 toyMC)
   68% expected band : 1.15193 < r < 1.15193
   95% expected band : 1.15193 < r < 1.15193
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1062899887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18713 +/- 0.00334948 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.18713 @ 95%CL (1 toyMC)
median expected limit: r < 1.18713 @ 95%CL (1 toyMC)
   68% expected band : 1.18713 < r < 1.18713
   95% expected band : 1.18713 < r < 1.18713
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 603587202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.784973 +/- 0.00303353 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.784973 @ 95%CL (1 toyMC)
median expected limit: r < 0.784973 @ 95%CL (1 toyMC)
   68% expected band : 0.784973 < r < 0.784973
   95% expected band : 0.784973 < r < 0.784973
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1629352628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63785 +/- 0.00350459 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.63785 @ 95%CL (1 toyMC)
median expected limit: r < 1.63785 @ 95%CL (1 toyMC)
   68% expected band : 1.63785 < r < 1.63785
   95% expected band : 1.63785 < r < 1.63785
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1734010265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.871993 +/- 0.00331597 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.871993 @ 95%CL (1 toyMC)
median expected limit: r < 0.871993 @ 95%CL (1 toyMC)
   68% expected band : 0.871993 < r < 0.871993
   95% expected band : 0.871993 < r < 0.871993
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1033802125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.473684 +/- 0.00258502 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.473684 @ 95%CL (1 toyMC)
median expected limit: r < 0.473684 @ 95%CL (1 toyMC)
   68% expected band : 0.473684 < r < 0.473684
   95% expected band : 0.473684 < r < 0.473684
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1758294956
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.973141 +/- 0.00355917 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.973141 @ 95%CL (1 toyMC)
median expected limit: r < 0.973141 @ 95%CL (1 toyMC)
   68% expected band : 0.973141 < r < 0.973141
   95% expected band : 0.973141 < r < 0.973141
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 690658782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.748102 +/- 0.00296291 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.748102 @ 95%CL (1 toyMC)
median expected limit: r < 0.748102 @ 95%CL (1 toyMC)
   68% expected band : 0.748102 < r < 0.748102
   95% expected band : 0.748102 < r < 0.748102
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine28.MarkovChainMC.mH28.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH28.-1033802125.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH28.-1062899887.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH28.-1079297418.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH28.-1112288411.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH28.-1141286674.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH28.-1220856391.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH28.-1234272755.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH28.-1244190062.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH28.-1416392178.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH28.-1419340879.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH28.-1433500724.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH28.-1449991449.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH28.-1547921525.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH28.-155193266.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH28.-1629352628.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH28.-1680841961.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH28.-1684647777.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH28.-1781969266.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH28.-1831726732.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH28.-1887565758.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH28.-1959094383.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH28.-199761272.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH28.-2092710897.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH28.-2112596027.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH28.-2116266052.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH28.-226063919.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH28.-291657676.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH28.-313120057.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH28.-399470693.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH28.-403610397.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH28.-436564866.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH28.-594734402.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH28.-760389924.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH28.-780830777.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH28.-799738290.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH28.-942702267.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH28.-976136421.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH28.-983599920.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH28.-993131282.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH28.-994122168.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH28.1005331003.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH28.1023217890.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH28.1024740300.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH28.1034796815.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH28.105521532.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH28.106810817.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH28.1102869041.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH28.1124623217.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH28.1154090080.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH28.1186776751.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH28.1191170091.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH28.14436345.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH28.153925825.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH28.1551410274.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH28.1611970887.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH28.1704100246.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH28.1728072876.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH28.1734010265.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH28.1758294956.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH28.1844450164.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH28.1850982402.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH28.1895508944.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH28.1946417988.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH28.1967717344.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH28.1981113687.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH28.2019803468.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH28.2051941742.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH28.2134473108.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH28.26125547.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH28.317642717.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH28.342969674.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH28.404320654.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH28.44646567.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH28.471398484.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH28.473996962.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH28.50273529.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH28.531017437.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH28.554292043.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH28.603587202.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH28.64980702.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH28.653207360.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH28.690658782.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH28.709102780.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH28.717927166.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH28.718804849.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH28.742917519.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH28.750261934.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH28.768179998.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH28.773460732.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH28.800607696.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH28.834525813.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH28.840226306.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH28.854876523.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH28.883642536.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH28.897809937.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH28.899171928.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH28.943304328.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH28.947446234.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH28.979610004.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH28.984048100.root
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1396673546
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56937 +/- 0.00397463 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.56937 @ 95%CL (1 toyMC)
median expected limit: r < 1.56937 @ 95%CL (1 toyMC)
   68% expected band : 1.56937 < r < 1.56937
   95% expected band : 1.56937 < r < 1.56937
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1551619308
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.991472 +/- 0.00323338 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.991472 @ 95%CL (1 toyMC)
median expected limit: r < 0.991472 @ 95%CL (1 toyMC)
   68% expected band : 0.991472 < r < 0.991472
   95% expected band : 0.991472 < r < 0.991472
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -947316325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.840721 +/- 0.00305914 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.840721 @ 95%CL (1 toyMC)
median expected limit: r < 0.840721 @ 95%CL (1 toyMC)
   68% expected band : 0.840721 < r < 0.840721
   95% expected band : 0.840721 < r < 0.840721
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 340711606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14346 +/- 0.00367813 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.14346 @ 95%CL (1 toyMC)
median expected limit: r < 1.14346 @ 95%CL (1 toyMC)
   68% expected band : 1.14346 < r < 1.14346
   95% expected band : 1.14346 < r < 1.14346
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1422343495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17614 +/- 0.0032142 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.17614 @ 95%CL (1 toyMC)
median expected limit: r < 1.17614 @ 95%CL (1 toyMC)
   68% expected band : 1.17614 < r < 1.17614
   95% expected band : 1.17614 < r < 1.17614
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -668671570
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.79951 +/- 0.00325844 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.79951 @ 95%CL (1 toyMC)
median expected limit: r < 0.79951 @ 95%CL (1 toyMC)
   68% expected band : 0.79951 < r < 0.79951
   95% expected band : 0.79951 < r < 0.79951
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2112091825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65532 +/- 0.00416937 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.65532 @ 95%CL (1 toyMC)
median expected limit: r < 1.65532 @ 95%CL (1 toyMC)
   68% expected band : 1.65532 < r < 1.65532
   95% expected band : 1.65532 < r < 1.65532
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 319384162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.809496 +/- 0.00412096 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.809496 @ 95%CL (1 toyMC)
median expected limit: r < 0.809496 @ 95%CL (1 toyMC)
   68% expected band : 0.809496 < r < 0.809496
   95% expected band : 0.809496 < r < 0.809496
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1823509268
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07692 +/- 0.00444571 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 1.07692 @ 95%CL (1 toyMC)
median expected limit: r < 1.07692 @ 95%CL (1 toyMC)
   68% expected band : 1.07692 < r < 1.07692
   95% expected band : 1.07692 < r < 1.07692
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1708488333
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33698 +/- 0.00328958 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.33698 @ 95%CL (1 toyMC)
median expected limit: r < 1.33698 @ 95%CL (1 toyMC)
   68% expected band : 1.33698 < r < 1.33698
   95% expected band : 1.33698 < r < 1.33698
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -597448349
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32552 +/- 0.00398172 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.32552 @ 95%CL (1 toyMC)
median expected limit: r < 1.32552 @ 95%CL (1 toyMC)
   68% expected band : 1.32552 < r < 1.32552
   95% expected band : 1.32552 < r < 1.32552
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1785740784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07666 +/- 0.00368088 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.07666 @ 95%CL (1 toyMC)
median expected limit: r < 1.07666 @ 95%CL (1 toyMC)
   68% expected band : 1.07666 < r < 1.07666
   95% expected band : 1.07666 < r < 1.07666
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2040328420
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92776 +/- 0.00340415 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 1.92776 @ 95%CL (1 toyMC)
median expected limit: r < 1.92776 @ 95%CL (1 toyMC)
   68% expected band : 1.92776 < r < 1.92776
   95% expected band : 1.92776 < r < 1.92776
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1490313246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.776631 +/- 0.0028337 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.776631 @ 95%CL (1 toyMC)
median expected limit: r < 0.776631 @ 95%CL (1 toyMC)
   68% expected band : 0.776631 < r < 0.776631
   95% expected band : 0.776631 < r < 0.776631
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1295561523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36441 +/- 0.00414753 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.78 min (real)
mean   expected limit: r < 1.36441 @ 95%CL (1 toyMC)
median expected limit: r < 1.36441 @ 95%CL (1 toyMC)
   68% expected band : 1.36441 < r < 1.36441
   95% expected band : 1.36441 < r < 1.36441
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2073771338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20759 +/- 0.00296375 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.20759 @ 95%CL (1 toyMC)
median expected limit: r < 1.20759 @ 95%CL (1 toyMC)
   68% expected band : 1.20759 < r < 1.20759
   95% expected band : 1.20759 < r < 1.20759
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 574035622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39502 +/- 0.00438622 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 1.39502 @ 95%CL (1 toyMC)
median expected limit: r < 1.39502 @ 95%CL (1 toyMC)
   68% expected band : 1.39502 < r < 1.39502
   95% expected band : 1.39502 < r < 1.39502
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -114879537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.411 +/- 0.00356695 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.411 @ 95%CL (1 toyMC)
median expected limit: r < 1.411 @ 95%CL (1 toyMC)
   68% expected band : 1.411 < r < 1.411
   95% expected band : 1.411 < r < 1.411
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 656323592
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56698 +/- 0.00300396 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 1.56698 @ 95%CL (1 toyMC)
median expected limit: r < 1.56698 @ 95%CL (1 toyMC)
   68% expected band : 1.56698 < r < 1.56698
   95% expected band : 1.56698 < r < 1.56698
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 749321101
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52771 +/- 0.0040738 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.52771 @ 95%CL (1 toyMC)
median expected limit: r < 1.52771 @ 95%CL (1 toyMC)
   68% expected band : 1.52771 < r < 1.52771
   95% expected band : 1.52771 < r < 1.52771
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -294421170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34345 +/- 0.0033877 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.34345 @ 95%CL (1 toyMC)
median expected limit: r < 1.34345 @ 95%CL (1 toyMC)
   68% expected band : 1.34345 < r < 1.34345
   95% expected band : 1.34345 < r < 1.34345
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 988400921
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1594 +/- 0.00379843 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.1594 @ 95%CL (1 toyMC)
median expected limit: r < 1.1594 @ 95%CL (1 toyMC)
   68% expected band : 1.1594 < r < 1.1594
   95% expected band : 1.1594 < r < 1.1594
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 511797021
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13944 +/- 0.00318191 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.13944 @ 95%CL (1 toyMC)
median expected limit: r < 1.13944 @ 95%CL (1 toyMC)
   68% expected band : 1.13944 < r < 1.13944
   95% expected band : 1.13944 < r < 1.13944
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 275467408
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12026 +/- 0.00435802 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.12026 @ 95%CL (1 toyMC)
median expected limit: r < 2.12026 @ 95%CL (1 toyMC)
   68% expected band : 2.12026 < r < 2.12026
   95% expected band : 2.12026 < r < 2.12026
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -836459382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14456 +/- 0.0031615 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.14456 @ 95%CL (1 toyMC)
median expected limit: r < 1.14456 @ 95%CL (1 toyMC)
   68% expected band : 1.14456 < r < 1.14456
   95% expected band : 1.14456 < r < 1.14456
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1149341835
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06392 +/- 0.00337515 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.06392 @ 95%CL (1 toyMC)
median expected limit: r < 1.06392 @ 95%CL (1 toyMC)
   68% expected band : 1.06392 < r < 1.06392
   95% expected band : 1.06392 < r < 1.06392
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2101073657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.923034 +/- 0.00311226 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.923034 @ 95%CL (1 toyMC)
median expected limit: r < 0.923034 @ 95%CL (1 toyMC)
   68% expected band : 0.923034 < r < 0.923034
   95% expected band : 0.923034 < r < 0.923034
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1611717497
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36838 +/- 0.00395666 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.36838 @ 95%CL (1 toyMC)
median expected limit: r < 1.36838 @ 95%CL (1 toyMC)
   68% expected band : 1.36838 < r < 1.36838
   95% expected band : 1.36838 < r < 1.36838
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2071512608
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51778 +/- 0.00436971 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 1.51778 @ 95%CL (1 toyMC)
median expected limit: r < 1.51778 @ 95%CL (1 toyMC)
   68% expected band : 1.51778 < r < 1.51778
   95% expected band : 1.51778 < r < 1.51778
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 917708519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.38907 +/- 0.00405851 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 2.38907 @ 95%CL (1 toyMC)
median expected limit: r < 2.38907 @ 95%CL (1 toyMC)
   68% expected band : 2.38907 < r < 2.38907
   95% expected band : 2.38907 < r < 2.38907
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 237581162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.770824 +/- 0.00288435 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.770824 @ 95%CL (1 toyMC)
median expected limit: r < 0.770824 @ 95%CL (1 toyMC)
   68% expected band : 0.770824 < r < 0.770824
   95% expected band : 0.770824 < r < 0.770824
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2123066386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.8837 +/- 0.00416242 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.8837 @ 95%CL (1 toyMC)
median expected limit: r < 0.8837 @ 95%CL (1 toyMC)
   68% expected band : 0.8837 < r < 0.8837
   95% expected band : 0.8837 < r < 0.8837
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -346034155
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12927 +/- 0.003452 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.12927 @ 95%CL (1 toyMC)
median expected limit: r < 1.12927 @ 95%CL (1 toyMC)
   68% expected band : 1.12927 < r < 1.12927
   95% expected band : 1.12927 < r < 1.12927
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1815483479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.886351 +/- 0.00367842 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.886351 @ 95%CL (1 toyMC)
median expected limit: r < 0.886351 @ 95%CL (1 toyMC)
   68% expected band : 0.886351 < r < 0.886351
   95% expected band : 0.886351 < r < 0.886351
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1424212166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18961 +/- 0.00370441 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.18961 @ 95%CL (1 toyMC)
median expected limit: r < 1.18961 @ 95%CL (1 toyMC)
   68% expected band : 1.18961 < r < 1.18961
   95% expected band : 1.18961 < r < 1.18961
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1009172767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.842735 +/- 0.00377507 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.842735 @ 95%CL (1 toyMC)
median expected limit: r < 0.842735 @ 95%CL (1 toyMC)
   68% expected band : 0.842735 < r < 0.842735
   95% expected band : 0.842735 < r < 0.842735
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -553181546
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0721 +/- 0.00239435 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.0721 @ 95%CL (1 toyMC)
median expected limit: r < 1.0721 @ 95%CL (1 toyMC)
   68% expected band : 1.0721 < r < 1.0721
   95% expected band : 1.0721 < r < 1.0721
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -85521051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01101 +/- 0.00381755 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.01101 @ 95%CL (1 toyMC)
median expected limit: r < 1.01101 @ 95%CL (1 toyMC)
   68% expected band : 1.01101 < r < 1.01101
   95% expected band : 1.01101 < r < 1.01101
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1836124944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15189 +/- 0.00298238 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.15189 @ 95%CL (1 toyMC)
median expected limit: r < 1.15189 @ 95%CL (1 toyMC)
   68% expected band : 1.15189 < r < 1.15189
   95% expected band : 1.15189 < r < 1.15189
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 43754762
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33384 +/- 0.00392338 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.33384 @ 95%CL (1 toyMC)
median expected limit: r < 1.33384 @ 95%CL (1 toyMC)
   68% expected band : 1.33384 < r < 1.33384
   95% expected band : 1.33384 < r < 1.33384
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1075188548
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55172 +/- 0.00332594 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.55172 @ 95%CL (1 toyMC)
median expected limit: r < 1.55172 @ 95%CL (1 toyMC)
   68% expected band : 1.55172 < r < 1.55172
   95% expected band : 1.55172 < r < 1.55172
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1165662689
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27201 +/- 0.00384019 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.27201 @ 95%CL (1 toyMC)
median expected limit: r < 1.27201 @ 95%CL (1 toyMC)
   68% expected band : 1.27201 < r < 1.27201
   95% expected band : 1.27201 < r < 1.27201
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -135939908
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.619753 +/- 0.00304303 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.619753 @ 95%CL (1 toyMC)
median expected limit: r < 0.619753 @ 95%CL (1 toyMC)
   68% expected band : 0.619753 < r < 0.619753
   95% expected band : 0.619753 < r < 0.619753
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1412185764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6787 +/- 0.00367286 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.6787 @ 95%CL (1 toyMC)
median expected limit: r < 1.6787 @ 95%CL (1 toyMC)
   68% expected band : 1.6787 < r < 1.6787
   95% expected band : 1.6787 < r < 1.6787
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2043988354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21912 +/- 0.00324217 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.21912 @ 95%CL (1 toyMC)
median expected limit: r < 1.21912 @ 95%CL (1 toyMC)
   68% expected band : 1.21912 < r < 1.21912
   95% expected band : 1.21912 < r < 1.21912
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1156321222
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43534 +/- 0.00440089 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.43534 @ 95%CL (1 toyMC)
median expected limit: r < 1.43534 @ 95%CL (1 toyMC)
   68% expected band : 1.43534 < r < 1.43534
   95% expected band : 1.43534 < r < 1.43534
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -571523947
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.704866 +/- 0.00303107 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.704866 @ 95%CL (1 toyMC)
median expected limit: r < 0.704866 @ 95%CL (1 toyMC)
   68% expected band : 0.704866 < r < 0.704866
   95% expected band : 0.704866 < r < 0.704866
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1221994045
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58623 +/- 0.004274 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.58623 @ 95%CL (1 toyMC)
median expected limit: r < 1.58623 @ 95%CL (1 toyMC)
   68% expected band : 1.58623 < r < 1.58623
   95% expected band : 1.58623 < r < 1.58623
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -873507317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08701 +/- 0.00377591 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 1.08701 @ 95%CL (1 toyMC)
median expected limit: r < 1.08701 @ 95%CL (1 toyMC)
   68% expected band : 1.08701 < r < 1.08701
   95% expected band : 1.08701 < r < 1.08701
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 545242474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.873822 +/- 0.0025132 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.873822 @ 95%CL (1 toyMC)
median expected limit: r < 0.873822 @ 95%CL (1 toyMC)
   68% expected band : 0.873822 < r < 0.873822
   95% expected band : 0.873822 < r < 0.873822
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -662365134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.906429 +/- 0.00370332 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.906429 @ 95%CL (1 toyMC)
median expected limit: r < 0.906429 @ 95%CL (1 toyMC)
   68% expected band : 0.906429 < r < 0.906429
   95% expected band : 0.906429 < r < 0.906429
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1777495526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91259 +/- 0.0037291 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 1.91259 @ 95%CL (1 toyMC)
median expected limit: r < 1.91259 @ 95%CL (1 toyMC)
   68% expected band : 1.91259 < r < 1.91259
   95% expected band : 1.91259 < r < 1.91259
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -366224747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34896 +/- 0.00271804 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.34896 @ 95%CL (1 toyMC)
median expected limit: r < 1.34896 @ 95%CL (1 toyMC)
   68% expected band : 1.34896 < r < 1.34896
   95% expected band : 1.34896 < r < 1.34896
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -304537488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70394 +/- 0.00327292 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.70394 @ 95%CL (1 toyMC)
median expected limit: r < 1.70394 @ 95%CL (1 toyMC)
   68% expected band : 1.70394 < r < 1.70394
   95% expected band : 1.70394 < r < 1.70394
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1591196693
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11307 +/- 0.00335641 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.11307 @ 95%CL (1 toyMC)
median expected limit: r < 1.11307 @ 95%CL (1 toyMC)
   68% expected band : 1.11307 < r < 1.11307
   95% expected band : 1.11307 < r < 1.11307
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 913162033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65316 +/- 0.00340676 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.65316 @ 95%CL (1 toyMC)
median expected limit: r < 1.65316 @ 95%CL (1 toyMC)
   68% expected band : 1.65316 < r < 1.65316
   95% expected band : 1.65316 < r < 1.65316
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -165519721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.906962 +/- 0.00267167 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.906962 @ 95%CL (1 toyMC)
median expected limit: r < 0.906962 @ 95%CL (1 toyMC)
   68% expected band : 0.906962 < r < 0.906962
   95% expected band : 0.906962 < r < 0.906962
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -499554701
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.857102 +/- 0.00339402 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.857102 @ 95%CL (1 toyMC)
median expected limit: r < 0.857102 @ 95%CL (1 toyMC)
   68% expected band : 0.857102 < r < 0.857102
   95% expected band : 0.857102 < r < 0.857102
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1391904018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.476963 +/- 0.00304766 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.476963 @ 95%CL (1 toyMC)
median expected limit: r < 0.476963 @ 95%CL (1 toyMC)
   68% expected band : 0.476963 < r < 0.476963
   95% expected band : 0.476963 < r < 0.476963
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -653237522
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17498 +/- 0.00383123 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.17498 @ 95%CL (1 toyMC)
median expected limit: r < 1.17498 @ 95%CL (1 toyMC)
   68% expected band : 1.17498 < r < 1.17498
   95% expected band : 1.17498 < r < 1.17498
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 983875845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.87791 +/- 0.0044592 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.87791 @ 95%CL (1 toyMC)
median expected limit: r < 1.87791 @ 95%CL (1 toyMC)
   68% expected band : 1.87791 < r < 1.87791
   95% expected band : 1.87791 < r < 1.87791
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -925056639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28784 +/- 0.00349234 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.28784 @ 95%CL (1 toyMC)
median expected limit: r < 1.28784 @ 95%CL (1 toyMC)
   68% expected band : 1.28784 < r < 1.28784
   95% expected band : 1.28784 < r < 1.28784
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1338951098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.585091 +/- 0.00269609 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.585091 @ 95%CL (1 toyMC)
median expected limit: r < 0.585091 @ 95%CL (1 toyMC)
   68% expected band : 0.585091 < r < 0.585091
   95% expected band : 0.585091 < r < 0.585091
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1679842159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.26673 +/- 0.00341379 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 2.26673 @ 95%CL (1 toyMC)
median expected limit: r < 2.26673 @ 95%CL (1 toyMC)
   68% expected band : 2.26673 < r < 2.26673
   95% expected band : 2.26673 < r < 2.26673
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 708664169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73356 +/- 0.00305488 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.73356 @ 95%CL (1 toyMC)
median expected limit: r < 1.73356 @ 95%CL (1 toyMC)
   68% expected band : 1.73356 < r < 1.73356
   95% expected band : 1.73356 < r < 1.73356
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1093639306
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33751 +/- 0.00388773 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.33751 @ 95%CL (1 toyMC)
median expected limit: r < 1.33751 @ 95%CL (1 toyMC)
   68% expected band : 1.33751 < r < 1.33751
   95% expected band : 1.33751 < r < 1.33751
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2089880323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.874045 +/- 0.00327356 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.874045 @ 95%CL (1 toyMC)
median expected limit: r < 0.874045 @ 95%CL (1 toyMC)
   68% expected band : 0.874045 < r < 0.874045
   95% expected band : 0.874045 < r < 0.874045
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 671036593
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.881095 +/- 0.00325251 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.881095 @ 95%CL (1 toyMC)
median expected limit: r < 0.881095 @ 95%CL (1 toyMC)
   68% expected band : 0.881095 < r < 0.881095
   95% expected band : 0.881095 < r < 0.881095
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1662220975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3841 +/- 0.00306253 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.3841 @ 95%CL (1 toyMC)
median expected limit: r < 1.3841 @ 95%CL (1 toyMC)
   68% expected band : 1.3841 < r < 1.3841
   95% expected band : 1.3841 < r < 1.3841
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 35734704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13032 +/- 0.00388429 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.13032 @ 95%CL (1 toyMC)
median expected limit: r < 1.13032 @ 95%CL (1 toyMC)
   68% expected band : 1.13032 < r < 1.13032
   95% expected band : 1.13032 < r < 1.13032
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 710738555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22226 +/- 0.00431522 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.22226 @ 95%CL (1 toyMC)
median expected limit: r < 1.22226 @ 95%CL (1 toyMC)
   68% expected band : 1.22226 < r < 1.22226
   95% expected band : 1.22226 < r < 1.22226
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -544620897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.867706 +/- 0.00364926 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.867706 @ 95%CL (1 toyMC)
median expected limit: r < 0.867706 @ 95%CL (1 toyMC)
   68% expected band : 0.867706 < r < 0.867706
   95% expected band : 0.867706 < r < 0.867706
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1233198685
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.776489 +/- 0.00422345 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.776489 @ 95%CL (1 toyMC)
median expected limit: r < 0.776489 @ 95%CL (1 toyMC)
   68% expected band : 0.776489 < r < 0.776489
   95% expected band : 0.776489 < r < 0.776489
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 961830250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5606 +/- 0.00335188 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.5606 @ 95%CL (1 toyMC)
median expected limit: r < 1.5606 @ 95%CL (1 toyMC)
   68% expected band : 1.5606 < r < 1.5606
   95% expected band : 1.5606 < r < 1.5606
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2136886636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21076 +/- 0.00331473 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.21076 @ 95%CL (1 toyMC)
median expected limit: r < 1.21076 @ 95%CL (1 toyMC)
   68% expected band : 1.21076 < r < 1.21076
   95% expected band : 1.21076 < r < 1.21076
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1577529573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13955 +/- 0.00384753 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 2.13955 @ 95%CL (1 toyMC)
median expected limit: r < 2.13955 @ 95%CL (1 toyMC)
   68% expected band : 2.13955 < r < 2.13955
   95% expected band : 2.13955 < r < 2.13955
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1531194888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.03133 +/- 0.00380908 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 2.03133 @ 95%CL (1 toyMC)
median expected limit: r < 2.03133 @ 95%CL (1 toyMC)
   68% expected band : 2.03133 < r < 2.03133
   95% expected band : 2.03133 < r < 2.03133
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -109677299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.574727 +/- 0.00303311 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.574727 @ 95%CL (1 toyMC)
median expected limit: r < 0.574727 @ 95%CL (1 toyMC)
   68% expected band : 0.574727 < r < 0.574727
   95% expected band : 0.574727 < r < 0.574727
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1114464300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12405 +/- 0.00342169 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.12405 @ 95%CL (1 toyMC)
median expected limit: r < 1.12405 @ 95%CL (1 toyMC)
   68% expected band : 1.12405 < r < 1.12405
   95% expected band : 1.12405 < r < 1.12405
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -507495935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22316 +/- 0.00385239 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.22316 @ 95%CL (1 toyMC)
median expected limit: r < 1.22316 @ 95%CL (1 toyMC)
   68% expected band : 1.22316 < r < 1.22316
   95% expected band : 1.22316 < r < 1.22316
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 335663533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.966268 +/- 0.00369282 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.966268 @ 95%CL (1 toyMC)
median expected limit: r < 0.966268 @ 95%CL (1 toyMC)
   68% expected band : 0.966268 < r < 0.966268
   95% expected band : 0.966268 < r < 0.966268
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1262920694
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37642 +/- 0.0034706 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.37642 @ 95%CL (1 toyMC)
median expected limit: r < 1.37642 @ 95%CL (1 toyMC)
   68% expected band : 1.37642 < r < 1.37642
   95% expected band : 1.37642 < r < 1.37642
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -754287662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.02719 +/- 0.00341901 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 2.02719 @ 95%CL (1 toyMC)
median expected limit: r < 2.02719 @ 95%CL (1 toyMC)
   68% expected band : 2.02719 < r < 2.02719
   95% expected band : 2.02719 < r < 2.02719
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -259955882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.641159 +/- 0.00321538 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.641159 @ 95%CL (1 toyMC)
median expected limit: r < 0.641159 @ 95%CL (1 toyMC)
   68% expected band : 0.641159 < r < 0.641159
   95% expected band : 0.641159 < r < 0.641159
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1473625420
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.9001 +/- 0.00350982 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 1.9001 @ 95%CL (1 toyMC)
median expected limit: r < 1.9001 @ 95%CL (1 toyMC)
   68% expected band : 1.9001 < r < 1.9001
   95% expected band : 1.9001 < r < 1.9001
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -123027266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.552943 +/- 0.00349325 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.552943 @ 95%CL (1 toyMC)
median expected limit: r < 0.552943 @ 95%CL (1 toyMC)
   68% expected band : 0.552943 < r < 0.552943
   95% expected band : 0.552943 < r < 0.552943
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 662616941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39272 +/- 0.00337312 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.39272 @ 95%CL (1 toyMC)
median expected limit: r < 1.39272 @ 95%CL (1 toyMC)
   68% expected band : 1.39272 < r < 1.39272
   95% expected band : 1.39272 < r < 1.39272
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 655441289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19218 +/- 0.00348639 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.19218 @ 95%CL (1 toyMC)
median expected limit: r < 1.19218 @ 95%CL (1 toyMC)
   68% expected band : 1.19218 < r < 1.19218
   95% expected band : 1.19218 < r < 1.19218
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1358695743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09095 +/- 0.004169 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.09095 @ 95%CL (1 toyMC)
median expected limit: r < 1.09095 @ 95%CL (1 toyMC)
   68% expected band : 1.09095 < r < 1.09095
   95% expected band : 1.09095 < r < 1.09095
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -660815819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49121 +/- 0.00351223 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.49121 @ 95%CL (1 toyMC)
median expected limit: r < 1.49121 @ 95%CL (1 toyMC)
   68% expected band : 1.49121 < r < 1.49121
   95% expected band : 1.49121 < r < 1.49121
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 292569851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.7465 +/- 0.00388491 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.7465 @ 95%CL (1 toyMC)
median expected limit: r < 1.7465 @ 95%CL (1 toyMC)
   68% expected band : 1.7465 < r < 1.7465
   95% expected band : 1.7465 < r < 1.7465
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1884650091
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.840741 +/- 0.0033694 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.840741 @ 95%CL (1 toyMC)
median expected limit: r < 0.840741 @ 95%CL (1 toyMC)
   68% expected band : 0.840741 < r < 0.840741
   95% expected band : 0.840741 < r < 0.840741
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -842286595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.921156 +/- 0.00356282 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.921156 @ 95%CL (1 toyMC)
median expected limit: r < 0.921156 @ 95%CL (1 toyMC)
   68% expected band : 0.921156 < r < 0.921156
   95% expected band : 0.921156 < r < 0.921156
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -325200989
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69474 +/- 0.004239 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.69474 @ 95%CL (1 toyMC)
median expected limit: r < 1.69474 @ 95%CL (1 toyMC)
   68% expected band : 1.69474 < r < 1.69474
   95% expected band : 1.69474 < r < 1.69474
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2002769236
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1527 +/- 0.00332955 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.1527 @ 95%CL (1 toyMC)
median expected limit: r < 1.1527 @ 95%CL (1 toyMC)
   68% expected band : 1.1527 < r < 1.1527
   95% expected band : 1.1527 < r < 1.1527
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -299742476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.656576 +/- 0.00339862 @ 95% CL (100 tries)
Done in 0.70 min (cpu), 0.70 min (real)
mean   expected limit: r < 0.656576 @ 95%CL (1 toyMC)
median expected limit: r < 0.656576 @ 95%CL (1 toyMC)
   68% expected band : 0.656576 < r < 0.656576
   95% expected band : 0.656576 < r < 0.656576
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -294392869
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48458 +/- 0.00363103 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.48458 @ 95%CL (1 toyMC)
median expected limit: r < 1.48458 @ 95%CL (1 toyMC)
   68% expected band : 1.48458 < r < 1.48458
   95% expected band : 1.48458 < r < 1.48458
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1518528512
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70691 +/- 0.0030307 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.70691 @ 95%CL (1 toyMC)
median expected limit: r < 1.70691 @ 95%CL (1 toyMC)
   68% expected band : 1.70691 < r < 1.70691
   95% expected band : 1.70691 < r < 1.70691
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 453545129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27194 +/- 0.00436 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.27194 @ 95%CL (1 toyMC)
median expected limit: r < 1.27194 @ 95%CL (1 toyMC)
   68% expected band : 1.27194 < r < 1.27194
   95% expected band : 1.27194 < r < 1.27194
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -195473746
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00796 +/- 0.00319329 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 1.00796 @ 95%CL (1 toyMC)
median expected limit: r < 1.00796 @ 95%CL (1 toyMC)
   68% expected band : 1.00796 < r < 1.00796
   95% expected band : 1.00796 < r < 1.00796
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine32.MarkovChainMC.mH32.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH32.-109677299.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH32.-114879537.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH32.-1149341835.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH32.-123027266.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH32.-135939908.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH32.-1422343495.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH32.-1518528512.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH32.-1551619308.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH32.-1591196693.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH32.-1611717497.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH32.-165519721.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH32.-1662220975.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH32.-1777495526.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH32.-1815483479.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH32.-1823509268.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH32.-1884650091.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH32.-195473746.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH32.-2040328420.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH32.-2089880323.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH32.-2112091825.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH32.-259955882.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH32.-294392869.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH32.-294421170.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH32.-299742476.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH32.-304537488.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH32.-325200989.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH32.-346034155.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH32.-366224747.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH32.-499554701.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH32.-507495935.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH32.-544620897.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH32.-553181546.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH32.-571523947.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH32.-597448349.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH32.-653237522.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH32.-660815819.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH32.-662365134.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH32.-668671570.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH32.-754287662.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH32.-836459382.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH32.-842286595.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH32.-85521051.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH32.-873507317.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH32.-925056639.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH32.-947316325.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH32.1009172767.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH32.1075188548.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH32.1093639306.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH32.1114464300.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH32.1156321222.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH32.1165662689.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH32.1221994045.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH32.1233198685.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH32.1262920694.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH32.1295561523.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH32.1338951098.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH32.1358695743.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH32.1391904018.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH32.1396673546.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH32.1412185764.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH32.1424212166.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH32.1473625420.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH32.1490313246.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH32.1531194888.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH32.1577529573.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH32.1679842159.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH32.1708488333.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH32.1785740784.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH32.1836124944.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH32.2002769236.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH32.2043988354.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH32.2071512608.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH32.2073771338.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH32.2101073657.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH32.2123066386.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH32.2136886636.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH32.237581162.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH32.275467408.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH32.292569851.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH32.319384162.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH32.335663533.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH32.340711606.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH32.35734704.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH32.43754762.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH32.453545129.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH32.511797021.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH32.545242474.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH32.574035622.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH32.655441289.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH32.656323592.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH32.662616941.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH32.671036593.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH32.708664169.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH32.710738555.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH32.749321101.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH32.913162033.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH32.917708519.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH32.961830250.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH32.983875845.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH32.988400921.root
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 674687646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.03303 +/- 0.00608091 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 4.03303 @ 95%CL (1 toyMC)
median expected limit: r < 4.03303 @ 95%CL (1 toyMC)
   68% expected band : 4.03303 < r < 4.03303
   95% expected band : 4.03303 < r < 4.03303
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1886326107
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.96266 +/- 0.00525068 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.96266 @ 95%CL (1 toyMC)
median expected limit: r < 1.96266 @ 95%CL (1 toyMC)
   68% expected band : 1.96266 < r < 1.96266
   95% expected band : 1.96266 < r < 1.96266
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1528125437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.61047 +/- 0.00607277 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 4.61047 @ 95%CL (1 toyMC)
median expected limit: r < 4.61047 @ 95%CL (1 toyMC)
   68% expected band : 4.61047 < r < 4.61047
   95% expected band : 4.61047 < r < 4.61047
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 610027766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.18439 +/- 0.00568939 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.78 min (real)
mean   expected limit: r < 3.18439 @ 95%CL (1 toyMC)
median expected limit: r < 3.18439 @ 95%CL (1 toyMC)
   68% expected band : 3.18439 < r < 3.18439
   95% expected band : 3.18439 < r < 3.18439
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -46665143
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.20733 +/- 0.0058686 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 3.20733 @ 95%CL (1 toyMC)
median expected limit: r < 3.20733 @ 95%CL (1 toyMC)
   68% expected band : 3.20733 < r < 3.20733
   95% expected band : 3.20733 < r < 3.20733
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1416886061
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60457 +/- 0.00615329 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.60457 @ 95%CL (1 toyMC)
median expected limit: r < 2.60457 @ 95%CL (1 toyMC)
   68% expected band : 2.60457 < r < 2.60457
   95% expected band : 2.60457 < r < 2.60457
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1623306288
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2529 +/- 0.00585267 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.2529 @ 95%CL (1 toyMC)
median expected limit: r < 2.2529 @ 95%CL (1 toyMC)
   68% expected band : 2.2529 < r < 2.2529
   95% expected band : 2.2529 < r < 2.2529
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1462551853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62275 +/- 0.00508042 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 2.62275 @ 95%CL (1 toyMC)
median expected limit: r < 2.62275 @ 95%CL (1 toyMC)
   68% expected band : 2.62275 < r < 2.62275
   95% expected band : 2.62275 < r < 2.62275
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -618622509
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55343 +/- 0.00463772 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 1.55343 @ 95%CL (1 toyMC)
median expected limit: r < 1.55343 @ 95%CL (1 toyMC)
   68% expected band : 1.55343 < r < 1.55343
   95% expected band : 1.55343 < r < 1.55343
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 898573789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91016 +/- 0.00549452 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.91016 @ 95%CL (1 toyMC)
median expected limit: r < 1.91016 @ 95%CL (1 toyMC)
   68% expected band : 1.91016 < r < 1.91016
   95% expected band : 1.91016 < r < 1.91016
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 495301082
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.41467 +/- 0.00557001 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 2.41467 @ 95%CL (1 toyMC)
median expected limit: r < 2.41467 @ 95%CL (1 toyMC)
   68% expected band : 2.41467 < r < 2.41467
   95% expected band : 2.41467 < r < 2.41467
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -223231819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1567 +/- 0.00588329 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 3.1567 @ 95%CL (1 toyMC)
median expected limit: r < 3.1567 @ 95%CL (1 toyMC)
   68% expected band : 3.1567 < r < 3.1567
   95% expected band : 3.1567 < r < 3.1567
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -65341871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.12595 +/- 0.00756265 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 4.12595 @ 95%CL (1 toyMC)
median expected limit: r < 4.12595 @ 95%CL (1 toyMC)
   68% expected band : 4.12595 < r < 4.12595
   95% expected band : 4.12595 < r < 4.12595
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -989205059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63088 +/- 0.0049246 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.63088 @ 95%CL (1 toyMC)
median expected limit: r < 1.63088 @ 95%CL (1 toyMC)
   68% expected band : 1.63088 < r < 1.63088
   95% expected band : 1.63088 < r < 1.63088
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1881270324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90225 +/- 0.00551765 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.90225 @ 95%CL (1 toyMC)
median expected limit: r < 2.90225 @ 95%CL (1 toyMC)
   68% expected band : 2.90225 < r < 2.90225
   95% expected band : 2.90225 < r < 2.90225
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1909874149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.18317 +/- 0.00595312 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 2.18317 @ 95%CL (1 toyMC)
median expected limit: r < 2.18317 @ 95%CL (1 toyMC)
   68% expected band : 2.18317 < r < 2.18317
   95% expected band : 2.18317 < r < 2.18317
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1297464260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79649 +/- 0.00437782 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 2.79649 @ 95%CL (1 toyMC)
median expected limit: r < 2.79649 @ 95%CL (1 toyMC)
   68% expected band : 2.79649 < r < 2.79649
   95% expected band : 2.79649 < r < 2.79649
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1848272326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.80717 +/- 0.0046853 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 2.80717 @ 95%CL (1 toyMC)
median expected limit: r < 2.80717 @ 95%CL (1 toyMC)
   68% expected band : 2.80717 < r < 2.80717
   95% expected band : 2.80717 < r < 2.80717
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1179823197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.85224 +/- 0.00475139 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 2.85224 @ 95%CL (1 toyMC)
median expected limit: r < 2.85224 @ 95%CL (1 toyMC)
   68% expected band : 2.85224 < r < 2.85224
   95% expected band : 2.85224 < r < 2.85224
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1117645639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.36441 +/- 0.00510213 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 2.36441 @ 95%CL (1 toyMC)
median expected limit: r < 2.36441 @ 95%CL (1 toyMC)
   68% expected band : 2.36441 < r < 2.36441
   95% expected band : 2.36441 < r < 2.36441
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -91692676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.06548 +/- 0.00451843 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 2.06548 @ 95%CL (1 toyMC)
median expected limit: r < 2.06548 @ 95%CL (1 toyMC)
   68% expected band : 2.06548 < r < 2.06548
   95% expected band : 2.06548 < r < 2.06548
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -325937169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24006 +/- 0.00608268 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.78 min (real)
mean   expected limit: r < 3.24006 @ 95%CL (1 toyMC)
median expected limit: r < 3.24006 @ 95%CL (1 toyMC)
   68% expected band : 3.24006 < r < 3.24006
   95% expected band : 3.24006 < r < 3.24006
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -533383711
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87686 +/- 0.00673334 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.87686 @ 95%CL (1 toyMC)
median expected limit: r < 2.87686 @ 95%CL (1 toyMC)
   68% expected band : 2.87686 < r < 2.87686
   95% expected band : 2.87686 < r < 2.87686
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1940288156
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.11906 +/- 0.00547656 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 3.11906 @ 95%CL (1 toyMC)
median expected limit: r < 3.11906 @ 95%CL (1 toyMC)
   68% expected band : 3.11906 < r < 3.11906
   95% expected band : 3.11906 < r < 3.11906
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -213490634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98504 +/- 0.00557588 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 2.98504 @ 95%CL (1 toyMC)
median expected limit: r < 2.98504 @ 95%CL (1 toyMC)
   68% expected band : 2.98504 < r < 2.98504
   95% expected band : 2.98504 < r < 2.98504
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -248081326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62308 +/- 0.00510276 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.62308 @ 95%CL (1 toyMC)
median expected limit: r < 2.62308 @ 95%CL (1 toyMC)
   68% expected band : 2.62308 < r < 2.62308
   95% expected band : 2.62308 < r < 2.62308
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1610790062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90545 +/- 0.00720246 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 3.90545 @ 95%CL (1 toyMC)
median expected limit: r < 3.90545 @ 95%CL (1 toyMC)
   68% expected band : 3.90545 < r < 3.90545
   95% expected band : 3.90545 < r < 3.90545
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -519995298
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.69655 +/- 0.00624188 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.69655 @ 95%CL (1 toyMC)
median expected limit: r < 2.69655 @ 95%CL (1 toyMC)
   68% expected band : 2.69655 < r < 2.69655
   95% expected band : 2.69655 < r < 2.69655
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 981872930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.26834 +/- 0.0056133 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 3.26834 @ 95%CL (1 toyMC)
median expected limit: r < 3.26834 @ 95%CL (1 toyMC)
   68% expected band : 3.26834 < r < 3.26834
   95% expected band : 3.26834 < r < 3.26834
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1502588175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.82745 +/- 0.00654109 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.79 min (real)
mean   expected limit: r < 4.82745 @ 95%CL (1 toyMC)
median expected limit: r < 4.82745 @ 95%CL (1 toyMC)
   68% expected band : 4.82745 < r < 4.82745
   95% expected band : 4.82745 < r < 4.82745
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 131555582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93414 +/- 0.00511973 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.93414 @ 95%CL (1 toyMC)
median expected limit: r < 2.93414 @ 95%CL (1 toyMC)
   68% expected band : 2.93414 < r < 2.93414
   95% expected band : 2.93414 < r < 2.93414
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2089625741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.6521 +/- 0.0048236 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 3.6521 @ 95%CL (1 toyMC)
median expected limit: r < 3.6521 @ 95%CL (1 toyMC)
   68% expected band : 3.6521 < r < 3.6521
   95% expected band : 3.6521 < r < 3.6521
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 179709781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.17329 +/- 0.00599404 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 3.17329 @ 95%CL (1 toyMC)
median expected limit: r < 3.17329 @ 95%CL (1 toyMC)
   68% expected band : 3.17329 < r < 3.17329
   95% expected band : 3.17329 < r < 3.17329
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1066929824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.08891 +/- 0.00455474 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 2.08891 @ 95%CL (1 toyMC)
median expected limit: r < 2.08891 @ 95%CL (1 toyMC)
   68% expected band : 2.08891 < r < 2.08891
   95% expected band : 2.08891 < r < 2.08891
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 379675959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28401 +/- 0.00580144 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 2.28401 @ 95%CL (1 toyMC)
median expected limit: r < 2.28401 @ 95%CL (1 toyMC)
   68% expected band : 2.28401 < r < 2.28401
   95% expected band : 2.28401 < r < 2.28401
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2069595089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23867 +/- 0.00550266 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 3.23867 @ 95%CL (1 toyMC)
median expected limit: r < 3.23867 @ 95%CL (1 toyMC)
   68% expected band : 3.23867 < r < 3.23867
   95% expected band : 3.23867 < r < 3.23867
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1699775610
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.243 +/- 0.00517137 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.77 min (real)
mean   expected limit: r < 3.243 @ 95%CL (1 toyMC)
median expected limit: r < 3.243 @ 95%CL (1 toyMC)
   68% expected band : 3.243 < r < 3.243
   95% expected band : 3.243 < r < 3.243
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -261251036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13808 +/- 0.00530622 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 2.13808 @ 95%CL (1 toyMC)
median expected limit: r < 2.13808 @ 95%CL (1 toyMC)
   68% expected band : 2.13808 < r < 2.13808
   95% expected band : 2.13808 < r < 2.13808
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 754288417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17927 +/- 0.00644948 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 2.17927 @ 95%CL (1 toyMC)
median expected limit: r < 2.17927 @ 95%CL (1 toyMC)
   68% expected band : 2.17927 < r < 2.17927
   95% expected band : 2.17927 < r < 2.17927
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1731129483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82029 +/- 0.00583885 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.82029 @ 95%CL (1 toyMC)
median expected limit: r < 1.82029 @ 95%CL (1 toyMC)
   68% expected band : 1.82029 < r < 1.82029
   95% expected band : 1.82029 < r < 1.82029
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -88574959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7905 +/- 0.00597194 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.7905 @ 95%CL (1 toyMC)
median expected limit: r < 2.7905 @ 95%CL (1 toyMC)
   68% expected band : 2.7905 < r < 2.7905
   95% expected band : 2.7905 < r < 2.7905
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 891790007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78403 +/- 0.00698144 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.78403 @ 95%CL (1 toyMC)
median expected limit: r < 2.78403 @ 95%CL (1 toyMC)
   68% expected band : 2.78403 < r < 2.78403
   95% expected band : 2.78403 < r < 2.78403
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 436376033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.88992 +/- 0.00471554 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.88992 @ 95%CL (1 toyMC)
median expected limit: r < 1.88992 @ 95%CL (1 toyMC)
   68% expected band : 1.88992 < r < 1.88992
   95% expected band : 1.88992 < r < 1.88992
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 760965240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92619 +/- 0.00420489 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.92619 @ 95%CL (1 toyMC)
median expected limit: r < 1.92619 @ 95%CL (1 toyMC)
   68% expected band : 1.92619 < r < 1.92619
   95% expected band : 1.92619 < r < 1.92619
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 723829758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.14664 +/- 0.00503395 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 3.14664 @ 95%CL (1 toyMC)
median expected limit: r < 3.14664 @ 95%CL (1 toyMC)
   68% expected band : 3.14664 < r < 3.14664
   95% expected band : 3.14664 < r < 3.14664
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1573006393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65797 +/- 0.00509435 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 1.65797 @ 95%CL (1 toyMC)
median expected limit: r < 1.65797 @ 95%CL (1 toyMC)
   68% expected band : 1.65797 < r < 1.65797
   95% expected band : 1.65797 < r < 1.65797
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1171487415
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25962 +/- 0.00398289 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.25962 @ 95%CL (1 toyMC)
median expected limit: r < 1.25962 @ 95%CL (1 toyMC)
   68% expected band : 1.25962 < r < 1.25962
   95% expected band : 1.25962 < r < 1.25962
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -99794967
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90742 +/- 0.0060138 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 3.90742 @ 95%CL (1 toyMC)
median expected limit: r < 3.90742 @ 95%CL (1 toyMC)
   68% expected band : 3.90742 < r < 3.90742
   95% expected band : 3.90742 < r < 3.90742
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2135173362
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.11029 +/- 0.00593365 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 4.11029 @ 95%CL (1 toyMC)
median expected limit: r < 4.11029 @ 95%CL (1 toyMC)
   68% expected band : 4.11029 < r < 4.11029
   95% expected band : 4.11029 < r < 4.11029
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1142182537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.53941 +/- 0.00626224 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 3.53941 @ 95%CL (1 toyMC)
median expected limit: r < 3.53941 @ 95%CL (1 toyMC)
   68% expected band : 3.53941 < r < 3.53941
   95% expected band : 3.53941 < r < 3.53941
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1834894178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.85657 +/- 0.00531489 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 2.85657 @ 95%CL (1 toyMC)
median expected limit: r < 2.85657 @ 95%CL (1 toyMC)
   68% expected band : 2.85657 < r < 2.85657
   95% expected band : 2.85657 < r < 2.85657
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1102254326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87867 +/- 0.00605576 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 2.87867 @ 95%CL (1 toyMC)
median expected limit: r < 2.87867 @ 95%CL (1 toyMC)
   68% expected band : 2.87867 < r < 2.87867
   95% expected band : 2.87867 < r < 2.87867
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 93819322
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.47102 +/- 0.00456131 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 3.47102 @ 95%CL (1 toyMC)
median expected limit: r < 3.47102 @ 95%CL (1 toyMC)
   68% expected band : 3.47102 < r < 3.47102
   95% expected band : 3.47102 < r < 3.47102
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 732304998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.83194 +/- 0.00440187 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 2.83194 @ 95%CL (1 toyMC)
median expected limit: r < 2.83194 @ 95%CL (1 toyMC)
   68% expected band : 2.83194 < r < 2.83194
   95% expected band : 2.83194 < r < 2.83194
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 469606555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.0728 +/- 0.00565791 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 2.0728 @ 95%CL (1 toyMC)
median expected limit: r < 2.0728 @ 95%CL (1 toyMC)
   68% expected band : 2.0728 < r < 2.0728
   95% expected band : 2.0728 < r < 2.0728
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1884905062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.86461 +/- 0.0053194 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 3.86461 @ 95%CL (1 toyMC)
median expected limit: r < 3.86461 @ 95%CL (1 toyMC)
   68% expected band : 3.86461 < r < 3.86461
   95% expected band : 3.86461 < r < 3.86461
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 784751855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.18041 +/- 0.0048324 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.18041 @ 95%CL (1 toyMC)
median expected limit: r < 2.18041 @ 95%CL (1 toyMC)
   68% expected band : 2.18041 < r < 2.18041
   95% expected band : 2.18041 < r < 2.18041
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1262692948
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.26369 +/- 0.00812769 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 4.26369 @ 95%CL (1 toyMC)
median expected limit: r < 4.26369 @ 95%CL (1 toyMC)
   68% expected band : 4.26369 < r < 4.26369
   95% expected band : 4.26369 < r < 4.26369
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1869899788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04765 +/- 0.00535811 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 3.04765 @ 95%CL (1 toyMC)
median expected limit: r < 3.04765 @ 95%CL (1 toyMC)
   68% expected band : 3.04765 < r < 3.04765
   95% expected band : 3.04765 < r < 3.04765
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1188813915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50364 +/- 0.00532095 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 2.50364 @ 95%CL (1 toyMC)
median expected limit: r < 2.50364 @ 95%CL (1 toyMC)
   68% expected band : 2.50364 < r < 2.50364
   95% expected band : 2.50364 < r < 2.50364
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1272210555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49473 +/- 0.00594587 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 2.49473 @ 95%CL (1 toyMC)
median expected limit: r < 2.49473 @ 95%CL (1 toyMC)
   68% expected band : 2.49473 < r < 2.49473
   95% expected band : 2.49473 < r < 2.49473
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1706089224
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.22729 +/- 0.00505868 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.22729 @ 95%CL (1 toyMC)
median expected limit: r < 2.22729 @ 95%CL (1 toyMC)
   68% expected band : 2.22729 < r < 2.22729
   95% expected band : 2.22729 < r < 2.22729
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1394427980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.36192 +/- 0.00593282 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 4.36192 @ 95%CL (1 toyMC)
median expected limit: r < 4.36192 @ 95%CL (1 toyMC)
   68% expected band : 4.36192 < r < 4.36192
   95% expected band : 4.36192 < r < 4.36192
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2051752330
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.31841 +/- 0.00637733 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 3.31841 @ 95%CL (1 toyMC)
median expected limit: r < 3.31841 @ 95%CL (1 toyMC)
   68% expected band : 3.31841 < r < 3.31841
   95% expected band : 3.31841 < r < 3.31841
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 273878959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.98388 +/- 0.00424643 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.98388 @ 95%CL (1 toyMC)
median expected limit: r < 1.98388 @ 95%CL (1 toyMC)
   68% expected band : 1.98388 < r < 1.98388
   95% expected band : 1.98388 < r < 1.98388
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 815038482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46233 +/- 0.0047856 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.46233 @ 95%CL (1 toyMC)
median expected limit: r < 2.46233 @ 95%CL (1 toyMC)
   68% expected band : 2.46233 < r < 2.46233
   95% expected band : 2.46233 < r < 2.46233
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1344865143
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.83006 +/- 0.00548258 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 2.83006 @ 95%CL (1 toyMC)
median expected limit: r < 2.83006 @ 95%CL (1 toyMC)
   68% expected band : 2.83006 < r < 2.83006
   95% expected band : 2.83006 < r < 2.83006
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1339958800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98372 +/- 0.00518246 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 2.98372 @ 95%CL (1 toyMC)
median expected limit: r < 2.98372 @ 95%CL (1 toyMC)
   68% expected band : 2.98372 < r < 2.98372
   95% expected band : 2.98372 < r < 2.98372
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1614021173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.60775 +/- 0.00774129 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 4.60775 @ 95%CL (1 toyMC)
median expected limit: r < 4.60775 @ 95%CL (1 toyMC)
   68% expected band : 4.60775 < r < 4.60775
   95% expected band : 4.60775 < r < 4.60775
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1091593765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84699 +/- 0.00505655 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.84699 @ 95%CL (1 toyMC)
median expected limit: r < 1.84699 @ 95%CL (1 toyMC)
   68% expected band : 1.84699 < r < 1.84699
   95% expected band : 1.84699 < r < 1.84699
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -747001473
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.78563 +/- 0.0054045 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 3.78563 @ 95%CL (1 toyMC)
median expected limit: r < 3.78563 @ 95%CL (1 toyMC)
   68% expected band : 3.78563 < r < 3.78563
   95% expected band : 3.78563 < r < 3.78563
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 570143456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.51422 +/- 0.0062685 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.51422 @ 95%CL (1 toyMC)
median expected limit: r < 2.51422 @ 95%CL (1 toyMC)
   68% expected band : 2.51422 < r < 2.51422
   95% expected band : 2.51422 < r < 2.51422
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1571781759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63794 +/- 0.00549533 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.78 min (real)
mean   expected limit: r < 2.63794 @ 95%CL (1 toyMC)
median expected limit: r < 2.63794 @ 95%CL (1 toyMC)
   68% expected band : 2.63794 < r < 2.63794
   95% expected band : 2.63794 < r < 2.63794
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -728295572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10252 +/- 0.00514026 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.10252 @ 95%CL (1 toyMC)
median expected limit: r < 2.10252 @ 95%CL (1 toyMC)
   68% expected band : 2.10252 < r < 2.10252
   95% expected band : 2.10252 < r < 2.10252
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -968755084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.26833 +/- 0.00558042 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 3.26833 @ 95%CL (1 toyMC)
median expected limit: r < 3.26833 @ 95%CL (1 toyMC)
   68% expected band : 3.26833 < r < 3.26833
   95% expected band : 3.26833 < r < 3.26833
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 300227140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.75715 +/- 0.00527824 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.75715 @ 95%CL (1 toyMC)
median expected limit: r < 1.75715 @ 95%CL (1 toyMC)
   68% expected band : 1.75715 < r < 1.75715
   95% expected band : 1.75715 < r < 1.75715
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1610640872
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67942 +/- 0.00504771 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 1.67942 @ 95%CL (1 toyMC)
median expected limit: r < 1.67942 @ 95%CL (1 toyMC)
   68% expected band : 1.67942 < r < 1.67942
   95% expected band : 1.67942 < r < 1.67942
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 544011284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59658 +/- 0.00551803 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.59658 @ 95%CL (1 toyMC)
median expected limit: r < 1.59658 @ 95%CL (1 toyMC)
   68% expected band : 1.59658 < r < 1.59658
   95% expected band : 1.59658 < r < 1.59658
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1978736638
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.17886 +/- 0.00593194 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 3.17886 @ 95%CL (1 toyMC)
median expected limit: r < 3.17886 @ 95%CL (1 toyMC)
   68% expected band : 3.17886 < r < 3.17886
   95% expected band : 3.17886 < r < 3.17886
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -831284396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.03058 +/- 0.0062924 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 2.03058 @ 95%CL (1 toyMC)
median expected limit: r < 2.03058 @ 95%CL (1 toyMC)
   68% expected band : 2.03058 < r < 2.03058
   95% expected band : 2.03058 < r < 2.03058
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1204185536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.90846 +/- 0.00530335 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 1.90846 @ 95%CL (1 toyMC)
median expected limit: r < 1.90846 @ 95%CL (1 toyMC)
   68% expected band : 1.90846 < r < 1.90846
   95% expected band : 1.90846 < r < 1.90846
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 842853613
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52028 +/- 0.00545333 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.52028 @ 95%CL (1 toyMC)
median expected limit: r < 2.52028 @ 95%CL (1 toyMC)
   68% expected band : 2.52028 < r < 2.52028
   95% expected band : 2.52028 < r < 2.52028
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1741939134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59098 +/- 0.00643482 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 2.59098 @ 95%CL (1 toyMC)
median expected limit: r < 2.59098 @ 95%CL (1 toyMC)
   68% expected band : 2.59098 < r < 2.59098
   95% expected band : 2.59098 < r < 2.59098
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 378820305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27363 +/- 0.00658246 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.27363 @ 95%CL (1 toyMC)
median expected limit: r < 2.27363 @ 95%CL (1 toyMC)
   68% expected band : 2.27363 < r < 2.27363
   95% expected band : 2.27363 < r < 2.27363
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1636881341
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.80194 +/- 0.0060512 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.80194 @ 95%CL (1 toyMC)
median expected limit: r < 2.80194 @ 95%CL (1 toyMC)
   68% expected band : 2.80194 < r < 2.80194
   95% expected band : 2.80194 < r < 2.80194
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -716156479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.31016 +/- 0.00571559 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 3.31016 @ 95%CL (1 toyMC)
median expected limit: r < 3.31016 @ 95%CL (1 toyMC)
   68% expected band : 3.31016 < r < 3.31016
   95% expected band : 3.31016 < r < 3.31016
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1375167374
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1885 +/- 0.00623244 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 3.1885 @ 95%CL (1 toyMC)
median expected limit: r < 3.1885 @ 95%CL (1 toyMC)
   68% expected band : 3.1885 < r < 3.1885
   95% expected band : 3.1885 < r < 3.1885
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1033175418
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76827 +/- 0.00588199 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.76827 @ 95%CL (1 toyMC)
median expected limit: r < 1.76827 @ 95%CL (1 toyMC)
   68% expected band : 1.76827 < r < 1.76827
   95% expected band : 1.76827 < r < 1.76827
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1445833966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.62984 +/- 0.00587417 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 3.62984 @ 95%CL (1 toyMC)
median expected limit: r < 3.62984 @ 95%CL (1 toyMC)
   68% expected band : 3.62984 < r < 3.62984
   95% expected band : 3.62984 < r < 3.62984
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -371183017
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36233 +/- 0.00429791 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 1.36233 @ 95%CL (1 toyMC)
median expected limit: r < 1.36233 @ 95%CL (1 toyMC)
   68% expected band : 1.36233 < r < 1.36233
   95% expected band : 1.36233 < r < 1.36233
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -781104701
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.2119 +/- 0.0069146 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 4.2119 @ 95%CL (1 toyMC)
median expected limit: r < 4.2119 @ 95%CL (1 toyMC)
   68% expected band : 4.2119 < r < 4.2119
   95% expected band : 4.2119 < r < 4.2119
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1026833801
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.01299 +/- 0.0068002 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 5.01299 @ 95%CL (1 toyMC)
median expected limit: r < 5.01299 @ 95%CL (1 toyMC)
   68% expected band : 5.01299 < r < 5.01299
   95% expected band : 5.01299 < r < 5.01299
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -259687175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48552 +/- 0.0036614 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 1.48552 @ 95%CL (1 toyMC)
median expected limit: r < 1.48552 @ 95%CL (1 toyMC)
   68% expected band : 1.48552 < r < 1.48552
   95% expected band : 1.48552 < r < 1.48552
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 170780674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.065 +/- 0.00733623 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 5.065 @ 95%CL (1 toyMC)
median expected limit: r < 5.065 @ 95%CL (1 toyMC)
   68% expected band : 5.065 < r < 5.065
   95% expected band : 5.065 < r < 5.065
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2024795143
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.01395 +/- 0.00674299 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 5.01395 @ 95%CL (1 toyMC)
median expected limit: r < 5.01395 @ 95%CL (1 toyMC)
   68% expected band : 5.01395 < r < 5.01395
   95% expected band : 5.01395 < r < 5.01395
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1962935927
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.93685 +/- 0.00484467 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 1.93685 @ 95%CL (1 toyMC)
median expected limit: r < 1.93685 @ 95%CL (1 toyMC)
   68% expected band : 1.93685 < r < 1.93685
   95% expected band : 1.93685 < r < 1.93685
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 842602892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.86697 +/- 0.0051711 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 2.86697 @ 95%CL (1 toyMC)
median expected limit: r < 2.86697 @ 95%CL (1 toyMC)
   68% expected band : 2.86697 < r < 2.86697
   95% expected band : 2.86697 < r < 2.86697
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1467667010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.30843 +/- 0.00603023 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 2.30843 @ 95%CL (1 toyMC)
median expected limit: r < 2.30843 @ 95%CL (1 toyMC)
   68% expected band : 2.30843 < r < 2.30843
   95% expected band : 2.30843 < r < 2.30843
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1541956656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28241 +/- 0.00543624 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.76 min (real)
mean   expected limit: r < 2.28241 @ 95%CL (1 toyMC)
median expected limit: r < 2.28241 @ 95%CL (1 toyMC)
   68% expected band : 2.28241 < r < 2.28241
   95% expected band : 2.28241 < r < 2.28241
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -904964952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.0668 +/- 0.0061108 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 3.0668 @ 95%CL (1 toyMC)
median expected limit: r < 3.0668 @ 95%CL (1 toyMC)
   68% expected band : 3.0668 < r < 3.0668
   95% expected band : 3.0668 < r < 3.0668
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine40.MarkovChainMC.mH40.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH40.-1033175418.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH40.-1117645639.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH40.-1142182537.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH40.-1179823197.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH40.-1188813915.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH40.-1262692948.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH40.-1272210555.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH40.-1416886061.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH40.-1445833966.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH40.-1462551853.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH40.-1502588175.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH40.-1528125437.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH40.-1573006393.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH40.-1614021173.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH40.-1706089224.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH40.-1741939134.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH40.-1869899788.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH40.-1881270324.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH40.-1886326107.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH40.-2069595089.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH40.-2089625741.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH40.-213490634.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH40.-2135173362.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH40.-223231819.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH40.-248081326.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH40.-259687175.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH40.-261251036.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH40.-325937169.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH40.-371183017.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH40.-46665143.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH40.-519995298.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH40.-533383711.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH40.-618622509.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH40.-65341871.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH40.-716156479.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH40.-728295572.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH40.-747001473.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH40.-781104701.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH40.-831284396.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH40.-88574959.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH40.-904964952.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH40.-91692676.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH40.-968755084.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH40.-989205059.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH40.-99794967.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH40.1026833801.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH40.1066929824.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH40.1091593765.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH40.1102254326.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH40.1171487415.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH40.1204185536.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH40.1297464260.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH40.131555582.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH40.1339958800.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH40.1344865143.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH40.1375167374.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH40.1394427980.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH40.1467667010.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH40.1541956656.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH40.1571781759.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH40.1610640872.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH40.1610790062.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH40.1623306288.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH40.1636881341.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH40.1699775610.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH40.170780674.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH40.1731129483.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH40.179709781.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH40.1834894178.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH40.1848272326.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH40.1884905062.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH40.1909874149.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH40.1940288156.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH40.1962935927.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH40.1978736638.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH40.2024795143.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH40.2051752330.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH40.273878959.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH40.300227140.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH40.378820305.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH40.379675959.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH40.436376033.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH40.469606555.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH40.495301082.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH40.544011284.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH40.570143456.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH40.610027766.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH40.674687646.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH40.723829758.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH40.732304998.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH40.754288417.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH40.760965240.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH40.784751855.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH40.815038482.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH40.842602892.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH40.842853613.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH40.891790007.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH40.898573789.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH40.93819322.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH40.981872930.root
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/toys
