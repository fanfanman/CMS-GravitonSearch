 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1569923885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.302403 +/- 0.00221572 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.302403 @ 95%CL (1 toyMC)
median expected limit: r < 0.302403 @ 95%CL (1 toyMC)
   68% expected band : 0.302403 < r < 0.302403
   95% expected band : 0.302403 < r < 0.302403
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 785350998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272079 +/- 0.00209856 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.272079 @ 95%CL (1 toyMC)
median expected limit: r < 0.272079 @ 95%CL (1 toyMC)
   68% expected band : 0.272079 < r < 0.272079
   95% expected band : 0.272079 < r < 0.272079
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 458412325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.156694 +/- 0.00631172 @ 95% CL (75 tries)
Done in 3.48 min (cpu), 3.50 min (real)
mean   expected limit: r < 0.156694 @ 95%CL (1 toyMC)
median expected limit: r < 0.156694 @ 95%CL (1 toyMC)
   68% expected band : 0.156694 < r < 0.156694
   95% expected band : 0.156694 < r < 0.156694
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 313724144
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235301 +/- 0.00226992 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.235301 @ 95%CL (1 toyMC)
median expected limit: r < 0.235301 @ 95%CL (1 toyMC)
   68% expected band : 0.235301 < r < 0.235301
   95% expected band : 0.235301 < r < 0.235301
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1492491819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.172307 +/- 0.00358051 @ 95% CL (95 tries)
Done in 0.57 min (cpu), 0.57 min (real)
mean   expected limit: r < 0.172307 @ 95%CL (1 toyMC)
median expected limit: r < 0.172307 @ 95%CL (1 toyMC)
   68% expected band : 0.172307 < r < 0.172307
   95% expected band : 0.172307 < r < 0.172307
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1346147173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.484548 +/- 0.00249819 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.484548 @ 95%CL (1 toyMC)
median expected limit: r < 0.484548 @ 95%CL (1 toyMC)
   68% expected band : 0.484548 < r < 0.484548
   95% expected band : 0.484548 < r < 0.484548
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1143971655
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261685 +/- 0.00248326 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.261685 @ 95%CL (1 toyMC)
median expected limit: r < 0.261685 @ 95%CL (1 toyMC)
   68% expected band : 0.261685 < r < 0.261685
   95% expected band : 0.261685 < r < 0.261685
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 666979480
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.413815 +/- 0.0020502 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.413815 @ 95%CL (1 toyMC)
median expected limit: r < 0.413815 @ 95%CL (1 toyMC)
   68% expected band : 0.413815 < r < 0.413815
   95% expected band : 0.413815 < r < 0.413815
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1350009789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.11805 +/- 1.25331 @ 95% CL (49 tries)
Done in 6.75 min (cpu), 6.78 min (real)
mean   expected limit: r < 5.11805 @ 95%CL (1 toyMC)
median expected limit: r < 5.11805 @ 95%CL (1 toyMC)
   68% expected band : 5.11805 < r < 5.11805
   95% expected band : 5.11805 < r < 5.11805
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -575988973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263842 +/- 0.00208303 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.263842 @ 95%CL (1 toyMC)
median expected limit: r < 0.263842 @ 95%CL (1 toyMC)
   68% expected band : 0.263842 < r < 0.263842
   95% expected band : 0.263842 < r < 0.263842
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1668544792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268199 +/- 0.00230419 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.268199 @ 95%CL (1 toyMC)
median expected limit: r < 0.268199 @ 95%CL (1 toyMC)
   68% expected band : 0.268199 < r < 0.268199
   95% expected band : 0.268199 < r < 0.268199
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1832788446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.308262 +/- 0.00197928 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.308262 @ 95%CL (1 toyMC)
median expected limit: r < 0.308262 @ 95%CL (1 toyMC)
   68% expected band : 0.308262 < r < 0.308262
   95% expected band : 0.308262 < r < 0.308262
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 287570532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.188536 +/- 0.00316345 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.188536 @ 95%CL (1 toyMC)
median expected limit: r < 0.188536 @ 95%CL (1 toyMC)
   68% expected band : 0.188536 < r < 0.188536
   95% expected band : 0.188536 < r < 0.188536
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1337544520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261429 +/- 0.00214418 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.261429 @ 95%CL (1 toyMC)
median expected limit: r < 0.261429 @ 95%CL (1 toyMC)
   68% expected band : 0.261429 < r < 0.261429
   95% expected band : 0.261429 < r < 0.261429
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 116460367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.218941 +/- 0.00260341 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.218941 @ 95%CL (1 toyMC)
median expected limit: r < 0.218941 @ 95%CL (1 toyMC)
   68% expected band : 0.218941 < r < 0.218941
   95% expected band : 0.218941 < r < 0.218941
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -942324488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.161351 +/- 0.00465812 @ 95% CL (84 tries)
Done in 1.19 min (cpu), 1.20 min (real)
mean   expected limit: r < 0.161351 @ 95%CL (1 toyMC)
median expected limit: r < 0.161351 @ 95%CL (1 toyMC)
   68% expected band : 0.161351 < r < 0.161351
   95% expected band : 0.161351 < r < 0.161351
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1966005282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186891 +/- 0.00247682 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.186891 @ 95%CL (1 toyMC)
median expected limit: r < 0.186891 @ 95%CL (1 toyMC)
   68% expected band : 0.186891 < r < 0.186891
   95% expected band : 0.186891 < r < 0.186891
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2014260718
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.149068 +/- 0.00572399 @ 95% CL (79 tries)
Done in 1.85 min (cpu), 1.86 min (real)
mean   expected limit: r < 0.149068 @ 95%CL (1 toyMC)
median expected limit: r < 0.149068 @ 95%CL (1 toyMC)
   68% expected band : 0.149068 < r < 0.149068
   95% expected band : 0.149068 < r < 0.149068
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1323623181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.225196 +/- 0.00262987 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.225196 @ 95%CL (1 toyMC)
median expected limit: r < 0.225196 @ 95%CL (1 toyMC)
   68% expected band : 0.225196 < r < 0.225196
   95% expected band : 0.225196 < r < 0.225196
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1892927451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.278075 +/- 0.00268046 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.278075 @ 95%CL (1 toyMC)
median expected limit: r < 0.278075 @ 95%CL (1 toyMC)
   68% expected band : 0.278075 < r < 0.278075
   95% expected band : 0.278075 < r < 0.278075
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -892683350
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361409 +/- 0.00228064 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.361409 @ 95%CL (1 toyMC)
median expected limit: r < 0.361409 @ 95%CL (1 toyMC)
   68% expected band : 0.361409 < r < 0.361409
   95% expected band : 0.361409 < r < 0.361409
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -411402690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.187261 +/- 0.00436219 @ 95% CL (96 tries)
Done in 0.56 min (cpu), 0.56 min (real)
mean   expected limit: r < 0.187261 @ 95%CL (1 toyMC)
median expected limit: r < 0.187261 @ 95%CL (1 toyMC)
   68% expected band : 0.187261 < r < 0.187261
   95% expected band : 0.187261 < r < 0.187261
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -657403608
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221491 +/- 0.00263082 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.221491 @ 95%CL (1 toyMC)
median expected limit: r < 0.221491 @ 95%CL (1 toyMC)
   68% expected band : 0.221491 < r < 0.221491
   95% expected band : 0.221491 < r < 0.221491
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1634679589
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.321337 +/- 0.00218795 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.321337 @ 95%CL (1 toyMC)
median expected limit: r < 0.321337 @ 95%CL (1 toyMC)
   68% expected band : 0.321337 < r < 0.321337
   95% expected band : 0.321337 < r < 0.321337
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 659672037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.159048 +/- 0.00456669 @ 95% CL (93 tries)
Done in 0.69 min (cpu), 0.69 min (real)
mean   expected limit: r < 0.159048 @ 95%CL (1 toyMC)
median expected limit: r < 0.159048 @ 95%CL (1 toyMC)
   68% expected band : 0.159048 < r < 0.159048
   95% expected band : 0.159048 < r < 0.159048
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1123935077
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.303167 +/- 0.00177689 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.303167 @ 95%CL (1 toyMC)
median expected limit: r < 0.303167 @ 95%CL (1 toyMC)
   68% expected band : 0.303167 < r < 0.303167
   95% expected band : 0.303167 < r < 0.303167
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1010170272
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.350741 +/- 0.00236736 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.350741 @ 95%CL (1 toyMC)
median expected limit: r < 0.350741 @ 95%CL (1 toyMC)
   68% expected band : 0.350741 < r < 0.350741
   95% expected band : 0.350741 < r < 0.350741
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -5384742
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.149351 +/- 0.0109053 @ 95% CL (57 tries)
Done in 6.64 min (cpu), 6.68 min (real)
mean   expected limit: r < 0.149351 @ 95%CL (1 toyMC)
median expected limit: r < 0.149351 @ 95%CL (1 toyMC)
   68% expected band : 0.149351 < r < 0.149351
   95% expected band : 0.149351 < r < 0.149351
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1519323471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.207647 +/- 0.00304931 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.207647 @ 95%CL (1 toyMC)
median expected limit: r < 0.207647 @ 95%CL (1 toyMC)
   68% expected band : 0.207647 < r < 0.207647
   95% expected band : 0.207647 < r < 0.207647
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 195277540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.348085 +/- 0.00239373 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.348085 @ 95%CL (1 toyMC)
median expected limit: r < 0.348085 @ 95%CL (1 toyMC)
   68% expected band : 0.348085 < r < 0.348085
   95% expected band : 0.348085 < r < 0.348085
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 325936426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.191814 +/- 0.00267447 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.191814 @ 95%CL (1 toyMC)
median expected limit: r < 0.191814 @ 95%CL (1 toyMC)
   68% expected band : 0.191814 < r < 0.191814
   95% expected band : 0.191814 < r < 0.191814
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -964480560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300326 +/- 0.00259263 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.300326 @ 95%CL (1 toyMC)
median expected limit: r < 0.300326 @ 95%CL (1 toyMC)
   68% expected band : 0.300326 < r < 0.300326
   95% expected band : 0.300326 < r < 0.300326
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -643679173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217609 +/- 0.00217866 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.217609 @ 95%CL (1 toyMC)
median expected limit: r < 0.217609 @ 95%CL (1 toyMC)
   68% expected band : 0.217609 < r < 0.217609
   95% expected band : 0.217609 < r < 0.217609
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 270583164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.415595 +/- 0.00192695 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.415595 @ 95%CL (1 toyMC)
median expected limit: r < 0.415595 @ 95%CL (1 toyMC)
   68% expected band : 0.415595 < r < 0.415595
   95% expected band : 0.415595 < r < 0.415595
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1371646146
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200904 +/- 0.00317461 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.200904 @ 95%CL (1 toyMC)
median expected limit: r < 0.200904 @ 95%CL (1 toyMC)
   68% expected band : 0.200904 < r < 0.200904
   95% expected band : 0.200904 < r < 0.200904
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 540627208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.293845 +/- 0.00214693 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.293845 @ 95%CL (1 toyMC)
median expected limit: r < 0.293845 @ 95%CL (1 toyMC)
   68% expected band : 0.293845 < r < 0.293845
   95% expected band : 0.293845 < r < 0.293845
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 320923128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.211743 +/- 0.00301248 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.211743 @ 95%CL (1 toyMC)
median expected limit: r < 0.211743 @ 95%CL (1 toyMC)
   68% expected band : 0.211743 < r < 0.211743
   95% expected band : 0.211743 < r < 0.211743
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1635119961
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228521 +/- 0.00254976 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.228521 @ 95%CL (1 toyMC)
median expected limit: r < 0.228521 @ 95%CL (1 toyMC)
   68% expected band : 0.228521 < r < 0.228521
   95% expected band : 0.228521 < r < 0.228521
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 409975991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.321707 +/- 0.00220764 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.321707 @ 95%CL (1 toyMC)
median expected limit: r < 0.321707 @ 95%CL (1 toyMC)
   68% expected band : 0.321707 < r < 0.321707
   95% expected band : 0.321707 < r < 0.321707
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2139176995
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243638 +/- 0.00250534 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.243638 @ 95%CL (1 toyMC)
median expected limit: r < 0.243638 @ 95%CL (1 toyMC)
   68% expected band : 0.243638 < r < 0.243638
   95% expected band : 0.243638 < r < 0.243638
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -182037960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216563 +/- 0.00289142 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.216563 @ 95%CL (1 toyMC)
median expected limit: r < 0.216563 @ 95%CL (1 toyMC)
   68% expected band : 0.216563 < r < 0.216563
   95% expected band : 0.216563 < r < 0.216563
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1726979404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.239973 +/- 0.00250462 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.239973 @ 95%CL (1 toyMC)
median expected limit: r < 0.239973 @ 95%CL (1 toyMC)
   68% expected band : 0.239973 < r < 0.239973
   95% expected band : 0.239973 < r < 0.239973
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -32882206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.176533 +/- 0.00346998 @ 95% CL (95 tries)
Done in 0.56 min (cpu), 0.57 min (real)
mean   expected limit: r < 0.176533 @ 95%CL (1 toyMC)
median expected limit: r < 0.176533 @ 95%CL (1 toyMC)
   68% expected band : 0.176533 < r < 0.176533
   95% expected band : 0.176533 < r < 0.176533
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 110857830
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.263739 +/- 0.00217618 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.263739 @ 95%CL (1 toyMC)
median expected limit: r < 0.263739 @ 95%CL (1 toyMC)
   68% expected band : 0.263739 < r < 0.263739
   95% expected band : 0.263739 < r < 0.263739
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -508113274
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206538 +/- 0.00285161 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.206538 @ 95%CL (1 toyMC)
median expected limit: r < 0.206538 @ 95%CL (1 toyMC)
   68% expected band : 0.206538 < r < 0.206538
   95% expected band : 0.206538 < r < 0.206538
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1045720634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.158221 +/- 0.00582715 @ 95% CL (53 tries)
Done in 6.87 min (cpu), 6.91 min (real)
mean   expected limit: r < 0.158221 @ 95%CL (1 toyMC)
median expected limit: r < 0.158221 @ 95%CL (1 toyMC)
   68% expected band : 0.158221 < r < 0.158221
   95% expected band : 0.158221 < r < 0.158221
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1730516794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.285596 +/- 0.00301057 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.285596 @ 95%CL (1 toyMC)
median expected limit: r < 0.285596 @ 95%CL (1 toyMC)
   68% expected band : 0.285596 < r < 0.285596
   95% expected band : 0.285596 < r < 0.285596
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1061499612
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.487581 +/- 0.00176868 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.487581 @ 95%CL (1 toyMC)
median expected limit: r < 0.487581 @ 95%CL (1 toyMC)
   68% expected band : 0.487581 < r < 0.487581
   95% expected band : 0.487581 < r < 0.487581
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1276201366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.220609 +/- 0.00219549 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.220609 @ 95%CL (1 toyMC)
median expected limit: r < 0.220609 @ 95%CL (1 toyMC)
   68% expected band : 0.220609 < r < 0.220609
   95% expected band : 0.220609 < r < 0.220609
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1774988581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270213 +/- 0.00290921 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.270213 @ 95%CL (1 toyMC)
median expected limit: r < 0.270213 @ 95%CL (1 toyMC)
   68% expected band : 0.270213 < r < 0.270213
   95% expected band : 0.270213 < r < 0.270213
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -446027803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186426 +/- 0.00235201 @ 95% CL (99 tries)
Done in 0.45 min (cpu), 0.46 min (real)
mean   expected limit: r < 0.186426 @ 95%CL (1 toyMC)
median expected limit: r < 0.186426 @ 95%CL (1 toyMC)
   68% expected band : 0.186426 < r < 0.186426
   95% expected band : 0.186426 < r < 0.186426
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1391880396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253003 +/- 0.00298361 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.253003 @ 95%CL (1 toyMC)
median expected limit: r < 0.253003 @ 95%CL (1 toyMC)
   68% expected band : 0.253003 < r < 0.253003
   95% expected band : 0.253003 < r < 0.253003
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1470321749
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309379 +/- 0.00202934 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.309379 @ 95%CL (1 toyMC)
median expected limit: r < 0.309379 @ 95%CL (1 toyMC)
   68% expected band : 0.309379 < r < 0.309379
   95% expected band : 0.309379 < r < 0.309379
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 823672558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.403931 +/- 0.00224796 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.403931 @ 95%CL (1 toyMC)
median expected limit: r < 0.403931 @ 95%CL (1 toyMC)
   68% expected band : 0.403931 < r < 0.403931
   95% expected band : 0.403931 < r < 0.403931
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -178959630
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.18251 +/- 0.00305306 @ 95% CL (98 tries)
Done in 0.53 min (cpu), 0.53 min (real)
mean   expected limit: r < 0.18251 @ 95%CL (1 toyMC)
median expected limit: r < 0.18251 @ 95%CL (1 toyMC)
   68% expected band : 0.18251 < r < 0.18251
   95% expected band : 0.18251 < r < 0.18251
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1709913000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.171598 +/- 0.00394497 @ 95% CL (91 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.171598 @ 95%CL (1 toyMC)
median expected limit: r < 0.171598 @ 95%CL (1 toyMC)
   68% expected band : 0.171598 < r < 0.171598
   95% expected band : 0.171598 < r < 0.171598
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 439185357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11111e+29 +/- 1.11111e+29 @ 95% CL (9 tries)
Done in 13.90 min (cpu), 13.98 min (real)
mean   expected limit: r < 1.11111e+29 @ 95%CL (1 toyMC)
median expected limit: r < 1.11111e+29 @ 95%CL (1 toyMC)
   68% expected band : 1.11111e+29 < r < 1.11111e+29
   95% expected band : 1.11111e+29 < r < 1.11111e+29
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1068659487
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.253758 +/- 0.00175556 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.253758 @ 95%CL (1 toyMC)
median expected limit: r < 0.253758 @ 95%CL (1 toyMC)
   68% expected band : 0.253758 < r < 0.253758
   95% expected band : 0.253758 < r < 0.253758
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 91203562
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.339807 +/- 0.00229162 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.339807 @ 95%CL (1 toyMC)
median expected limit: r < 0.339807 @ 95%CL (1 toyMC)
   68% expected band : 0.339807 < r < 0.339807
   95% expected band : 0.339807 < r < 0.339807
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 138499994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.191122 +/- 0.00246899 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.191122 @ 95%CL (1 toyMC)
median expected limit: r < 0.191122 @ 95%CL (1 toyMC)
   68% expected band : 0.191122 < r < 0.191122
   95% expected band : 0.191122 < r < 0.191122
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2061025631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.205595 +/- 0.00302587 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.205595 @ 95%CL (1 toyMC)
median expected limit: r < 0.205595 @ 95%CL (1 toyMC)
   68% expected band : 0.205595 < r < 0.205595
   95% expected band : 0.205595 < r < 0.205595
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -273669135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309849 +/- 0.00236797 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 0.309849 @ 95%CL (1 toyMC)
median expected limit: r < 0.309849 @ 95%CL (1 toyMC)
   68% expected band : 0.309849 < r < 0.309849
   95% expected band : 0.309849 < r < 0.309849
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -697434655
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.173739 +/- 0.00416895 @ 95% CL (96 tries)
Done in 0.55 min (cpu), 0.56 min (real)
mean   expected limit: r < 0.173739 @ 95%CL (1 toyMC)
median expected limit: r < 0.173739 @ 95%CL (1 toyMC)
   68% expected band : 0.173739 < r < 0.173739
   95% expected band : 0.173739 < r < 0.173739
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -605685838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.303188 +/- 0.00318937 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.303188 @ 95%CL (1 toyMC)
median expected limit: r < 0.303188 @ 95%CL (1 toyMC)
   68% expected band : 0.303188 < r < 0.303188
   95% expected band : 0.303188 < r < 0.303188
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -119707736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294771 +/- 0.00156799 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.294771 @ 95%CL (1 toyMC)
median expected limit: r < 0.294771 @ 95%CL (1 toyMC)
   68% expected band : 0.294771 < r < 0.294771
   95% expected band : 0.294771 < r < 0.294771
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1073131743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.193946 +/- 0.00342911 @ 95% CL (98 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 0.193946 @ 95%CL (1 toyMC)
median expected limit: r < 0.193946 @ 95%CL (1 toyMC)
   68% expected band : 0.193946 < r < 0.193946
   95% expected band : 0.193946 < r < 0.193946
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -48233155
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.265389 +/- 0.00293097 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.265389 @ 95%CL (1 toyMC)
median expected limit: r < 0.265389 @ 95%CL (1 toyMC)
   68% expected band : 0.265389 < r < 0.265389
   95% expected band : 0.265389 < r < 0.265389
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -575646143
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.244919 +/- 0.00354027 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 0.244919 @ 95%CL (1 toyMC)
median expected limit: r < 0.244919 @ 95%CL (1 toyMC)
   68% expected band : 0.244919 < r < 0.244919
   95% expected band : 0.244919 < r < 0.244919
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -168605113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.296885 +/- 0.00196533 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.296885 @ 95%CL (1 toyMC)
median expected limit: r < 0.296885 @ 95%CL (1 toyMC)
   68% expected band : 0.296885 < r < 0.296885
   95% expected band : 0.296885 < r < 0.296885
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 433036736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.378812 +/- 0.00180286 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.378812 @ 95%CL (1 toyMC)
median expected limit: r < 0.378812 @ 95%CL (1 toyMC)
   68% expected band : 0.378812 < r < 0.378812
   95% expected band : 0.378812 < r < 0.378812
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 204995698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.220004 +/- 0.00262746 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.220004 @ 95%CL (1 toyMC)
median expected limit: r < 0.220004 @ 95%CL (1 toyMC)
   68% expected band : 0.220004 < r < 0.220004
   95% expected band : 0.220004 < r < 0.220004
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -809482884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.185949 +/- 0.00300383 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.185949 @ 95%CL (1 toyMC)
median expected limit: r < 0.185949 @ 95%CL (1 toyMC)
   68% expected band : 0.185949 < r < 0.185949
   95% expected band : 0.185949 < r < 0.185949
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1521439639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.382246 +/- 0.0019995 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.382246 @ 95%CL (1 toyMC)
median expected limit: r < 0.382246 @ 95%CL (1 toyMC)
   68% expected band : 0.382246 < r < 0.382246
   95% expected band : 0.382246 < r < 0.382246
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1501715907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312952 +/- 0.00231528 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.312952 @ 95%CL (1 toyMC)
median expected limit: r < 0.312952 @ 95%CL (1 toyMC)
   68% expected band : 0.312952 < r < 0.312952
   95% expected band : 0.312952 < r < 0.312952
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1012735008
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.264425 +/- 0.00261994 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.264425 @ 95%CL (1 toyMC)
median expected limit: r < 0.264425 @ 95%CL (1 toyMC)
   68% expected band : 0.264425 < r < 0.264425
   95% expected band : 0.264425 < r < 0.264425
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -688686333
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.209062 +/- 0.00347026 @ 95% CL (99 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.209062 @ 95%CL (1 toyMC)
median expected limit: r < 0.209062 @ 95%CL (1 toyMC)
   68% expected band : 0.209062 < r < 0.209062
   95% expected band : 0.209062 < r < 0.209062
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -303998501
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.269001 +/- 0.00223633 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.269001 @ 95%CL (1 toyMC)
median expected limit: r < 0.269001 @ 95%CL (1 toyMC)
   68% expected band : 0.269001 < r < 0.269001
   95% expected band : 0.269001 < r < 0.269001
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1090083963
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.170001 +/- 0.00321387 @ 95% CL (99 tries)
Done in 0.49 min (cpu), 0.49 min (real)
mean   expected limit: r < 0.170001 @ 95%CL (1 toyMC)
median expected limit: r < 0.170001 @ 95%CL (1 toyMC)
   68% expected band : 0.170001 < r < 0.170001
   95% expected band : 0.170001 < r < 0.170001
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1922981848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.271974 +/- 0.0019977 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.271974 @ 95%CL (1 toyMC)
median expected limit: r < 0.271974 @ 95%CL (1 toyMC)
   68% expected band : 0.271974 < r < 0.271974
   95% expected band : 0.271974 < r < 0.271974
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1048848067
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186676 +/- 0.00315288 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.186676 @ 95%CL (1 toyMC)
median expected limit: r < 0.186676 @ 95%CL (1 toyMC)
   68% expected band : 0.186676 < r < 0.186676
   95% expected band : 0.186676 < r < 0.186676
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1264834609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.287464 +/- 0.00200009 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.287464 @ 95%CL (1 toyMC)
median expected limit: r < 0.287464 @ 95%CL (1 toyMC)
   68% expected band : 0.287464 < r < 0.287464
   95% expected band : 0.287464 < r < 0.287464
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -392953646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.2206 +/- 0.00208952 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.2206 @ 95%CL (1 toyMC)
median expected limit: r < 0.2206 @ 95%CL (1 toyMC)
   68% expected band : 0.2206 < r < 0.2206
   95% expected band : 0.2206 < r < 0.2206
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1805852549
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.203174 +/- 0.00350024 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.203174 @ 95%CL (1 toyMC)
median expected limit: r < 0.203174 @ 95%CL (1 toyMC)
   68% expected band : 0.203174 < r < 0.203174
   95% expected band : 0.203174 < r < 0.203174
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1466397819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.362883 +/- 0.00261003 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.362883 @ 95%CL (1 toyMC)
median expected limit: r < 0.362883 @ 95%CL (1 toyMC)
   68% expected band : 0.362883 < r < 0.362883
   95% expected band : 0.362883 < r < 0.362883
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 433793853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.196392 +/- 0.00265103 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.196392 @ 95%CL (1 toyMC)
median expected limit: r < 0.196392 @ 95%CL (1 toyMC)
   68% expected band : 0.196392 < r < 0.196392
   95% expected band : 0.196392 < r < 0.196392
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1913376424
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.192857 +/- 0.00315237 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.192857 @ 95%CL (1 toyMC)
median expected limit: r < 0.192857 @ 95%CL (1 toyMC)
   68% expected band : 0.192857 < r < 0.192857
   95% expected band : 0.192857 < r < 0.192857
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1100258991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.183248 +/- 0.00283008 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.183248 @ 95%CL (1 toyMC)
median expected limit: r < 0.183248 @ 95%CL (1 toyMC)
   68% expected band : 0.183248 < r < 0.183248
   95% expected band : 0.183248 < r < 0.183248
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 795930428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.168746 +/- 0.00494884 @ 95% CL (80 tries)
Done in 1.62 min (cpu), 1.63 min (real)
mean   expected limit: r < 0.168746 @ 95%CL (1 toyMC)
median expected limit: r < 0.168746 @ 95%CL (1 toyMC)
   68% expected band : 0.168746 < r < 0.168746
   95% expected band : 0.168746 < r < 0.168746
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 36714230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.423838 +/- 0.00266149 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.423838 @ 95%CL (1 toyMC)
median expected limit: r < 0.423838 @ 95%CL (1 toyMC)
   68% expected band : 0.423838 < r < 0.423838
   95% expected band : 0.423838 < r < 0.423838
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 360372031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.27998 +/- 0.0031857 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.27998 @ 95%CL (1 toyMC)
median expected limit: r < 0.27998 @ 95%CL (1 toyMC)
   68% expected band : 0.27998 < r < 0.27998
   95% expected band : 0.27998 < r < 0.27998
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -75713628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.65744 +/- 1.60493 @ 95% CL (40 tries)
Done in 9.14 min (cpu), 9.20 min (real)
mean   expected limit: r < 7.65744 @ 95%CL (1 toyMC)
median expected limit: r < 7.65744 @ 95%CL (1 toyMC)
   68% expected band : 7.65744 < r < 7.65744
   95% expected band : 7.65744 < r < 7.65744
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1784205327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.227099 +/- 0.00303762 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.227099 @ 95%CL (1 toyMC)
median expected limit: r < 0.227099 @ 95%CL (1 toyMC)
   68% expected band : 0.227099 < r < 0.227099
   95% expected band : 0.227099 < r < 0.227099
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1569141262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329457 +/- 0.00213335 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.329457 @ 95%CL (1 toyMC)
median expected limit: r < 0.329457 @ 95%CL (1 toyMC)
   68% expected band : 0.329457 < r < 0.329457
   95% expected band : 0.329457 < r < 0.329457
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1286307713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260574 +/- 0.00330854 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.260574 @ 95%CL (1 toyMC)
median expected limit: r < 0.260574 @ 95%CL (1 toyMC)
   68% expected band : 0.260574 < r < 0.260574
   95% expected band : 0.260574 < r < 0.260574
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 909154559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.201633 +/- 0.00264328 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.201633 @ 95%CL (1 toyMC)
median expected limit: r < 0.201633 @ 95%CL (1 toyMC)
   68% expected band : 0.201633 < r < 0.201633
   95% expected band : 0.201633 < r < 0.201633
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1674110713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.385289 +/- 0.00195036 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.385289 @ 95%CL (1 toyMC)
median expected limit: r < 0.385289 @ 95%CL (1 toyMC)
   68% expected band : 0.385289 < r < 0.385289
   95% expected band : 0.385289 < r < 0.385289
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 974123368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.279347 +/- 0.00194887 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.279347 @ 95%CL (1 toyMC)
median expected limit: r < 0.279347 @ 95%CL (1 toyMC)
   68% expected band : 0.279347 < r < 0.279347
   95% expected band : 0.279347 < r < 0.279347
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -52338180
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.10479 +/- 3.23751 @ 95% CL (10 tries)
Done in 14.18 min (cpu), 14.27 min (real)
mean   expected limit: r < 8.10479 @ 95%CL (1 toyMC)
median expected limit: r < 8.10479 @ 95%CL (1 toyMC)
   68% expected band : 8.10479 < r < 8.10479
   95% expected band : 8.10479 < r < 8.10479
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 911053480
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280494 +/- 0.00221018 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.280494 @ 95%CL (1 toyMC)
median expected limit: r < 0.280494 @ 95%CL (1 toyMC)
   68% expected band : 0.280494 < r < 0.280494
   95% expected band : 0.280494 < r < 0.280494
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2131536521
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.279718 +/- 0.00285486 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.279718 @ 95%CL (1 toyMC)
median expected limit: r < 0.279718 @ 95%CL (1 toyMC)
   68% expected band : 0.279718 < r < 0.279718
   95% expected band : 0.279718 < r < 0.279718
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine16.MarkovChainMC.mH16.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH16.-1048848067.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH16.-1061499612.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH16.-1068659487.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH16.-1073131743.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH16.-1090083963.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH16.-1123935077.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH16.-1143971655.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH16.-119707736.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH16.-1264834609.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH16.-1276201366.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH16.-1350009789.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH16.-1371646146.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH16.-1466397819.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH16.-1470321749.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH16.-1492491819.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH16.-1501715907.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH16.-1519323471.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH16.-1521439639.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH16.-1569141262.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH16.-1569923885.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH16.-1634679589.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH16.-1635119961.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH16.-1668544792.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH16.-168605113.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH16.-1709913000.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH16.-178959630.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH16.-182037960.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH16.-1922981848.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH16.-1966005282.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH16.-2139176995.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH16.-273669135.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH16.-303998501.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH16.-32882206.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH16.-392953646.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH16.-411402690.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH16.-446027803.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH16.-48233155.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH16.-508113274.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH16.-52338180.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH16.-5384742.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH16.-575646143.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH16.-575988973.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH16.-605685838.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH16.-643679173.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH16.-657403608.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH16.-688686333.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH16.-697434655.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH16.-75713628.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH16.-809482884.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH16.-892683350.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH16.-942324488.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH16.-964480560.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH16.1010170272.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH16.1012735008.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH16.1045720634.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH16.1100258991.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH16.110857830.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH16.116460367.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH16.1286307713.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH16.1323623181.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH16.1337544520.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH16.1346147173.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH16.138499994.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH16.1391880396.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH16.1674110713.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH16.1726979404.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH16.1730516794.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH16.1774988581.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH16.1784205327.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH16.1805852549.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH16.1832788446.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH16.1892927451.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH16.1913376424.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH16.195277540.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH16.2014260718.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH16.204995698.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH16.2061025631.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH16.2131536521.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH16.270583164.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH16.287570532.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH16.313724144.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH16.320923128.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH16.325936426.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH16.360372031.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH16.36714230.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH16.409975991.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH16.433036736.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH16.433793853.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH16.439185357.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH16.458412325.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH16.540627208.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH16.659672037.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH16.666979480.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH16.785350998.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH16.795930428.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH16.823672558.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH16.909154559.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH16.911053480.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH16.91203562.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH16.974123368.root
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1920697347
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.887808 +/- 0.0026853 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.887808 @ 95%CL (1 toyMC)
median expected limit: r < 0.887808 @ 95%CL (1 toyMC)
   68% expected band : 0.887808 < r < 0.887808
   95% expected band : 0.887808 < r < 0.887808
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 248296706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.581806 +/- 0.00258779 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.581806 @ 95%CL (1 toyMC)
median expected limit: r < 0.581806 @ 95%CL (1 toyMC)
   68% expected band : 0.581806 < r < 0.581806
   95% expected band : 0.581806 < r < 0.581806
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -799004716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.792587 +/- 0.00271946 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.792587 @ 95%CL (1 toyMC)
median expected limit: r < 0.792587 @ 95%CL (1 toyMC)
   68% expected band : 0.792587 < r < 0.792587
   95% expected band : 0.792587 < r < 0.792587
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 673598148
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.551835 +/- 0.00187695 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.551835 @ 95%CL (1 toyMC)
median expected limit: r < 0.551835 @ 95%CL (1 toyMC)
   68% expected band : 0.551835 < r < 0.551835
   95% expected band : 0.551835 < r < 0.551835
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -141303376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.354156 +/- 0.00256226 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.354156 @ 95%CL (1 toyMC)
median expected limit: r < 0.354156 @ 95%CL (1 toyMC)
   68% expected band : 0.354156 < r < 0.354156
   95% expected band : 0.354156 < r < 0.354156
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1707291619
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0827 +/- 0.00310137 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.46 min (real)
mean   expected limit: r < 1.0827 @ 95%CL (1 toyMC)
median expected limit: r < 1.0827 @ 95%CL (1 toyMC)
   68% expected band : 1.0827 < r < 1.0827
   95% expected band : 1.0827 < r < 1.0827
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -380403760
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.249489 +/- 0.00284657 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.249489 @ 95%CL (1 toyMC)
median expected limit: r < 0.249489 @ 95%CL (1 toyMC)
   68% expected band : 0.249489 < r < 0.249489
   95% expected band : 0.249489 < r < 0.249489
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1750992789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.480486 +/- 0.0031554 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.480486 @ 95%CL (1 toyMC)
median expected limit: r < 0.480486 @ 95%CL (1 toyMC)
   68% expected band : 0.480486 < r < 0.480486
   95% expected band : 0.480486 < r < 0.480486
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1163419070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.684234 +/- 0.00267268 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.684234 @ 95%CL (1 toyMC)
median expected limit: r < 0.684234 @ 95%CL (1 toyMC)
   68% expected band : 0.684234 < r < 0.684234
   95% expected band : 0.684234 < r < 0.684234
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1433296452
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.380827 +/- 0.0029732 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.380827 @ 95%CL (1 toyMC)
median expected limit: r < 0.380827 @ 95%CL (1 toyMC)
   68% expected band : 0.380827 < r < 0.380827
   95% expected band : 0.380827 < r < 0.380827
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 957417734
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.811611 +/- 0.00317859 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.811611 @ 95%CL (1 toyMC)
median expected limit: r < 0.811611 @ 95%CL (1 toyMC)
   68% expected band : 0.811611 < r < 0.811611
   95% expected band : 0.811611 < r < 0.811611
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 152967984
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.556135 +/- 0.00211602 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.556135 @ 95%CL (1 toyMC)
median expected limit: r < 0.556135 @ 95%CL (1 toyMC)
   68% expected band : 0.556135 < r < 0.556135
   95% expected band : 0.556135 < r < 0.556135
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -527614317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.746117 +/- 0.00320358 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.746117 @ 95%CL (1 toyMC)
median expected limit: r < 0.746117 @ 95%CL (1 toyMC)
   68% expected band : 0.746117 < r < 0.746117
   95% expected band : 0.746117 < r < 0.746117
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1410307092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.398693 +/- 0.00270476 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.398693 @ 95%CL (1 toyMC)
median expected limit: r < 0.398693 @ 95%CL (1 toyMC)
   68% expected band : 0.398693 < r < 0.398693
   95% expected band : 0.398693 < r < 0.398693
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 613193181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02629 +/- 0.00282163 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.02629 @ 95%CL (1 toyMC)
median expected limit: r < 1.02629 @ 95%CL (1 toyMC)
   68% expected band : 1.02629 < r < 1.02629
   95% expected band : 1.02629 < r < 1.02629
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1885326208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.321974 +/- 0.00208937 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.321974 @ 95%CL (1 toyMC)
median expected limit: r < 0.321974 @ 95%CL (1 toyMC)
   68% expected band : 0.321974 < r < 0.321974
   95% expected band : 0.321974 < r < 0.321974
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1611202655
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.923986 +/- 0.00259859 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.923986 @ 95%CL (1 toyMC)
median expected limit: r < 0.923986 @ 95%CL (1 toyMC)
   68% expected band : 0.923986 < r < 0.923986
   95% expected band : 0.923986 < r < 0.923986
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 57651611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.701666 +/- 0.00333595 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 0.701666 @ 95%CL (1 toyMC)
median expected limit: r < 0.701666 @ 95%CL (1 toyMC)
   68% expected band : 0.701666 < r < 0.701666
   95% expected band : 0.701666 < r < 0.701666
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 136566520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.630283 +/- 0.00351225 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.630283 @ 95%CL (1 toyMC)
median expected limit: r < 0.630283 @ 95%CL (1 toyMC)
   68% expected band : 0.630283 < r < 0.630283
   95% expected band : 0.630283 < r < 0.630283
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2093130093
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.495707 +/- 0.00261788 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.495707 @ 95%CL (1 toyMC)
median expected limit: r < 0.495707 @ 95%CL (1 toyMC)
   68% expected band : 0.495707 < r < 0.495707
   95% expected band : 0.495707 < r < 0.495707
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2094587808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.32877 +/- 0.00306924 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.32877 @ 95%CL (1 toyMC)
median expected limit: r < 0.32877 @ 95%CL (1 toyMC)
   68% expected band : 0.32877 < r < 0.32877
   95% expected band : 0.32877 < r < 0.32877
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -431241559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.715292 +/- 0.00306674 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.715292 @ 95%CL (1 toyMC)
median expected limit: r < 0.715292 @ 95%CL (1 toyMC)
   68% expected band : 0.715292 < r < 0.715292
   95% expected band : 0.715292 < r < 0.715292
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1639158119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.47852 +/- 0.00268021 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.47852 @ 95%CL (1 toyMC)
median expected limit: r < 0.47852 @ 95%CL (1 toyMC)
   68% expected band : 0.47852 < r < 0.47852
   95% expected band : 0.47852 < r < 0.47852
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1777030985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.429133 +/- 0.00264783 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 0.429133 @ 95%CL (1 toyMC)
median expected limit: r < 0.429133 @ 95%CL (1 toyMC)
   68% expected band : 0.429133 < r < 0.429133
   95% expected band : 0.429133 < r < 0.429133
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -848021149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.900801 +/- 0.00244866 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.900801 @ 95%CL (1 toyMC)
median expected limit: r < 0.900801 @ 95%CL (1 toyMC)
   68% expected band : 0.900801 < r < 0.900801
   95% expected band : 0.900801 < r < 0.900801
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1132537566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.436663 +/- 0.00304121 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 0.436663 @ 95%CL (1 toyMC)
median expected limit: r < 0.436663 @ 95%CL (1 toyMC)
   68% expected band : 0.436663 < r < 0.436663
   95% expected band : 0.436663 < r < 0.436663
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1073090854
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.950407 +/- 0.00314582 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.950407 @ 95%CL (1 toyMC)
median expected limit: r < 0.950407 @ 95%CL (1 toyMC)
   68% expected band : 0.950407 < r < 0.950407
   95% expected band : 0.950407 < r < 0.950407
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -575483084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.811389 +/- 0.00330218 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.811389 @ 95%CL (1 toyMC)
median expected limit: r < 0.811389 @ 95%CL (1 toyMC)
   68% expected band : 0.811389 < r < 0.811389
   95% expected band : 0.811389 < r < 0.811389
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -456780151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.717008 +/- 0.00274135 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.717008 @ 95%CL (1 toyMC)
median expected limit: r < 0.717008 @ 95%CL (1 toyMC)
   68% expected band : 0.717008 < r < 0.717008
   95% expected band : 0.717008 < r < 0.717008
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1718266686
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.788591 +/- 0.00296396 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 0.788591 @ 95%CL (1 toyMC)
median expected limit: r < 0.788591 @ 95%CL (1 toyMC)
   68% expected band : 0.788591 < r < 0.788591
   95% expected band : 0.788591 < r < 0.788591
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -950389692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.508742 +/- 0.00299619 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.508742 @ 95%CL (1 toyMC)
median expected limit: r < 0.508742 @ 95%CL (1 toyMC)
   68% expected band : 0.508742 < r < 0.508742
   95% expected band : 0.508742 < r < 0.508742
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 571715895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.737546 +/- 0.00236541 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.737546 @ 95%CL (1 toyMC)
median expected limit: r < 0.737546 @ 95%CL (1 toyMC)
   68% expected band : 0.737546 < r < 0.737546
   95% expected band : 0.737546 < r < 0.737546
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1055641676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02822 +/- 0.00318959 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.46 min (real)
mean   expected limit: r < 1.02822 @ 95%CL (1 toyMC)
median expected limit: r < 1.02822 @ 95%CL (1 toyMC)
   68% expected band : 1.02822 < r < 1.02822
   95% expected band : 1.02822 < r < 1.02822
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2009604302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.406958 +/- 0.00287687 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.406958 @ 95%CL (1 toyMC)
median expected limit: r < 0.406958 @ 95%CL (1 toyMC)
   68% expected band : 0.406958 < r < 0.406958
   95% expected band : 0.406958 < r < 0.406958
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1005474004
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.688606 +/- 0.00276602 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.688606 @ 95%CL (1 toyMC)
median expected limit: r < 0.688606 @ 95%CL (1 toyMC)
   68% expected band : 0.688606 < r < 0.688606
   95% expected band : 0.688606 < r < 0.688606
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1354163411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.402119 +/- 0.00271027 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.402119 @ 95%CL (1 toyMC)
median expected limit: r < 0.402119 @ 95%CL (1 toyMC)
   68% expected band : 0.402119 < r < 0.402119
   95% expected band : 0.402119 < r < 0.402119
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1835810357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.377812 +/- 0.00259955 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.377812 @ 95%CL (1 toyMC)
median expected limit: r < 0.377812 @ 95%CL (1 toyMC)
   68% expected band : 0.377812 < r < 0.377812
   95% expected band : 0.377812 < r < 0.377812
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1950156304
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18417 +/- 0.00358483 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.18417 @ 95%CL (1 toyMC)
median expected limit: r < 1.18417 @ 95%CL (1 toyMC)
   68% expected band : 1.18417 < r < 1.18417
   95% expected band : 1.18417 < r < 1.18417
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 170765096
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.459335 +/- 0.0024702 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.459335 @ 95%CL (1 toyMC)
median expected limit: r < 0.459335 @ 95%CL (1 toyMC)
   68% expected band : 0.459335 < r < 0.459335
   95% expected band : 0.459335 < r < 0.459335
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1230312115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.665596 +/- 0.00217361 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.665596 @ 95%CL (1 toyMC)
median expected limit: r < 0.665596 @ 95%CL (1 toyMC)
   68% expected band : 0.665596 < r < 0.665596
   95% expected band : 0.665596 < r < 0.665596
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2062910942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11814 +/- 0.00272704 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.11814 @ 95%CL (1 toyMC)
median expected limit: r < 1.11814 @ 95%CL (1 toyMC)
   68% expected band : 1.11814 < r < 1.11814
   95% expected band : 1.11814 < r < 1.11814
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1822286650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.475651 +/- 0.0025709 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.475651 @ 95%CL (1 toyMC)
median expected limit: r < 0.475651 @ 95%CL (1 toyMC)
   68% expected band : 0.475651 < r < 0.475651
   95% expected band : 0.475651 < r < 0.475651
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1252245557
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.435237 +/- 0.00266109 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 0.435237 @ 95%CL (1 toyMC)
median expected limit: r < 0.435237 @ 95%CL (1 toyMC)
   68% expected band : 0.435237 < r < 0.435237
   95% expected band : 0.435237 < r < 0.435237
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1533426941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.577758 +/- 0.00330564 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.577758 @ 95%CL (1 toyMC)
median expected limit: r < 0.577758 @ 95%CL (1 toyMC)
   68% expected band : 0.577758 < r < 0.577758
   95% expected band : 0.577758 < r < 0.577758
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1970555663
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.504943 +/- 0.00247017 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.504943 @ 95%CL (1 toyMC)
median expected limit: r < 0.504943 @ 95%CL (1 toyMC)
   68% expected band : 0.504943 < r < 0.504943
   95% expected band : 0.504943 < r < 0.504943
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1289224904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.3684 +/- 0.00241214 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.3684 @ 95%CL (1 toyMC)
median expected limit: r < 0.3684 @ 95%CL (1 toyMC)
   68% expected band : 0.3684 < r < 0.3684
   95% expected band : 0.3684 < r < 0.3684
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 75460249
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.853205 +/- 0.00333483 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.853205 @ 95%CL (1 toyMC)
median expected limit: r < 0.853205 @ 95%CL (1 toyMC)
   68% expected band : 0.853205 < r < 0.853205
   95% expected band : 0.853205 < r < 0.853205
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1338683924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.597969 +/- 0.00319452 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.597969 @ 95%CL (1 toyMC)
median expected limit: r < 0.597969 @ 95%CL (1 toyMC)
   68% expected band : 0.597969 < r < 0.597969
   95% expected band : 0.597969 < r < 0.597969
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1409683999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.506245 +/- 0.00299758 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.506245 @ 95%CL (1 toyMC)
median expected limit: r < 0.506245 @ 95%CL (1 toyMC)
   68% expected band : 0.506245 < r < 0.506245
   95% expected band : 0.506245 < r < 0.506245
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 829239519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.538887 +/- 0.00267108 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.538887 @ 95%CL (1 toyMC)
median expected limit: r < 0.538887 @ 95%CL (1 toyMC)
   68% expected band : 0.538887 < r < 0.538887
   95% expected band : 0.538887 < r < 0.538887
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2105017157
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.784174 +/- 0.00274983 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.784174 @ 95%CL (1 toyMC)
median expected limit: r < 0.784174 @ 95%CL (1 toyMC)
   68% expected band : 0.784174 < r < 0.784174
   95% expected band : 0.784174 < r < 0.784174
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -879060952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.408881 +/- 0.00267639 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 0.408881 @ 95%CL (1 toyMC)
median expected limit: r < 0.408881 @ 95%CL (1 toyMC)
   68% expected band : 0.408881 < r < 0.408881
   95% expected band : 0.408881 < r < 0.408881
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 534678779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.429621 +/- 0.00269058 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.429621 @ 95%CL (1 toyMC)
median expected limit: r < 0.429621 @ 95%CL (1 toyMC)
   68% expected band : 0.429621 < r < 0.429621
   95% expected band : 0.429621 < r < 0.429621
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -689901165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.442113 +/- 0.00267847 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.442113 @ 95%CL (1 toyMC)
median expected limit: r < 0.442113 @ 95%CL (1 toyMC)
   68% expected band : 0.442113 < r < 0.442113
   95% expected band : 0.442113 < r < 0.442113
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1029469821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01642 +/- 0.00256733 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 1.01642 @ 95%CL (1 toyMC)
median expected limit: r < 1.01642 @ 95%CL (1 toyMC)
   68% expected band : 1.01642 < r < 1.01642
   95% expected band : 1.01642 < r < 1.01642
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2111321339
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.50535 +/- 0.00275597 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.50535 @ 95%CL (1 toyMC)
median expected limit: r < 0.50535 @ 95%CL (1 toyMC)
   68% expected band : 0.50535 < r < 0.50535
   95% expected band : 0.50535 < r < 0.50535
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1644002468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.539109 +/- 0.00315731 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.539109 @ 95%CL (1 toyMC)
median expected limit: r < 0.539109 @ 95%CL (1 toyMC)
   68% expected band : 0.539109 < r < 0.539109
   95% expected band : 0.539109 < r < 0.539109
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1081609369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.479168 +/- 0.00233217 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.479168 @ 95%CL (1 toyMC)
median expected limit: r < 0.479168 @ 95%CL (1 toyMC)
   68% expected band : 0.479168 < r < 0.479168
   95% expected band : 0.479168 < r < 0.479168
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -371603112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.742519 +/- 0.00272449 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.48 min (real)
mean   expected limit: r < 0.742519 @ 95%CL (1 toyMC)
median expected limit: r < 0.742519 @ 95%CL (1 toyMC)
   68% expected band : 0.742519 < r < 0.742519
   95% expected band : 0.742519 < r < 0.742519
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -441313404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.295697 +/- 0.00300636 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.295697 @ 95%CL (1 toyMC)
median expected limit: r < 0.295697 @ 95%CL (1 toyMC)
   68% expected band : 0.295697 < r < 0.295697
   95% expected band : 0.295697 < r < 0.295697
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1304723922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.936286 +/- 0.00261461 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.936286 @ 95%CL (1 toyMC)
median expected limit: r < 0.936286 @ 95%CL (1 toyMC)
   68% expected band : 0.936286 < r < 0.936286
   95% expected band : 0.936286 < r < 0.936286
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1983123588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.581894 +/- 0.00296113 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.581894 @ 95%CL (1 toyMC)
median expected limit: r < 0.581894 @ 95%CL (1 toyMC)
   68% expected band : 0.581894 < r < 0.581894
   95% expected band : 0.581894 < r < 0.581894
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -298315142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.466697 +/- 0.00319078 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.466697 @ 95%CL (1 toyMC)
median expected limit: r < 0.466697 @ 95%CL (1 toyMC)
   68% expected band : 0.466697 < r < 0.466697
   95% expected band : 0.466697 < r < 0.466697
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -699710580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.580606 +/- 0.00245187 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.580606 @ 95%CL (1 toyMC)
median expected limit: r < 0.580606 @ 95%CL (1 toyMC)
   68% expected band : 0.580606 < r < 0.580606
   95% expected band : 0.580606 < r < 0.580606
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1027799113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.662591 +/- 0.00271913 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.662591 @ 95%CL (1 toyMC)
median expected limit: r < 0.662591 @ 95%CL (1 toyMC)
   68% expected band : 0.662591 < r < 0.662591
   95% expected band : 0.662591 < r < 0.662591
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1237779114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.667865 +/- 0.00294142 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.667865 @ 95%CL (1 toyMC)
median expected limit: r < 0.667865 @ 95%CL (1 toyMC)
   68% expected band : 0.667865 < r < 0.667865
   95% expected band : 0.667865 < r < 0.667865
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 88359797
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.913467 +/- 0.00250922 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.913467 @ 95%CL (1 toyMC)
median expected limit: r < 0.913467 @ 95%CL (1 toyMC)
   68% expected band : 0.913467 < r < 0.913467
   95% expected band : 0.913467 < r < 0.913467
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1273517775
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08126 +/- 0.00263485 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.08126 @ 95%CL (1 toyMC)
median expected limit: r < 1.08126 @ 95%CL (1 toyMC)
   68% expected band : 1.08126 < r < 1.08126
   95% expected band : 1.08126 < r < 1.08126
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 188773870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05424 +/- 0.00367896 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.05424 @ 95%CL (1 toyMC)
median expected limit: r < 1.05424 @ 95%CL (1 toyMC)
   68% expected band : 1.05424 < r < 1.05424
   95% expected band : 1.05424 < r < 1.05424
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 733058193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.497978 +/- 0.00247441 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.48 min (real)
mean   expected limit: r < 0.497978 @ 95%CL (1 toyMC)
median expected limit: r < 0.497978 @ 95%CL (1 toyMC)
   68% expected band : 0.497978 < r < 0.497978
   95% expected band : 0.497978 < r < 0.497978
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 669304959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.601395 +/- 0.0025311 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.601395 @ 95%CL (1 toyMC)
median expected limit: r < 0.601395 @ 95%CL (1 toyMC)
   68% expected band : 0.601395 < r < 0.601395
   95% expected band : 0.601395 < r < 0.601395
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 534864310
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.970995 +/- 0.00317997 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.970995 @ 95%CL (1 toyMC)
median expected limit: r < 0.970995 @ 95%CL (1 toyMC)
   68% expected band : 0.970995 < r < 0.970995
   95% expected band : 0.970995 < r < 0.970995
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1686096781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282149 +/- 0.00343483 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.282149 @ 95%CL (1 toyMC)
median expected limit: r < 0.282149 @ 95%CL (1 toyMC)
   68% expected band : 0.282149 < r < 0.282149
   95% expected band : 0.282149 < r < 0.282149
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2115767563
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00843 +/- 0.00273014 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.00843 @ 95%CL (1 toyMC)
median expected limit: r < 1.00843 @ 95%CL (1 toyMC)
   68% expected band : 1.00843 < r < 1.00843
   95% expected band : 1.00843 < r < 1.00843
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1132434022
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.725245 +/- 0.00302754 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.725245 @ 95%CL (1 toyMC)
median expected limit: r < 0.725245 @ 95%CL (1 toyMC)
   68% expected band : 0.725245 < r < 0.725245
   95% expected band : 0.725245 < r < 0.725245
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 698199483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.810425 +/- 0.00328965 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.810425 @ 95%CL (1 toyMC)
median expected limit: r < 0.810425 @ 95%CL (1 toyMC)
   68% expected band : 0.810425 < r < 0.810425
   95% expected band : 0.810425 < r < 0.810425
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 79029
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.430788 +/- 0.00267462 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 0.430788 @ 95%CL (1 toyMC)
median expected limit: r < 0.430788 @ 95%CL (1 toyMC)
   68% expected band : 0.430788 < r < 0.430788
   95% expected band : 0.430788 < r < 0.430788
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -349488993
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.55821 +/- 0.00249642 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.55821 @ 95%CL (1 toyMC)
median expected limit: r < 0.55821 @ 95%CL (1 toyMC)
   68% expected band : 0.55821 < r < 0.55821
   95% expected band : 0.55821 < r < 0.55821
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1088364431
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.583496 +/- 0.00272749 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 0.583496 @ 95%CL (1 toyMC)
median expected limit: r < 0.583496 @ 95%CL (1 toyMC)
   68% expected band : 0.583496 < r < 0.583496
   95% expected band : 0.583496 < r < 0.583496
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2006571681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.65375 +/- 0.00254305 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.65375 @ 95%CL (1 toyMC)
median expected limit: r < 0.65375 @ 95%CL (1 toyMC)
   68% expected band : 0.65375 < r < 0.65375
   95% expected band : 0.65375 < r < 0.65375
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1188396143
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.797298 +/- 0.00242395 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.797298 @ 95%CL (1 toyMC)
median expected limit: r < 0.797298 @ 95%CL (1 toyMC)
   68% expected band : 0.797298 < r < 0.797298
   95% expected band : 0.797298 < r < 0.797298
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -839241924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.893696 +/- 0.00291569 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.893696 @ 95%CL (1 toyMC)
median expected limit: r < 0.893696 @ 95%CL (1 toyMC)
   68% expected band : 0.893696 < r < 0.893696
   95% expected band : 0.893696 < r < 0.893696
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1648249423
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.494661 +/- 0.00246096 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.494661 @ 95%CL (1 toyMC)
median expected limit: r < 0.494661 @ 95%CL (1 toyMC)
   68% expected band : 0.494661 < r < 0.494661
   95% expected band : 0.494661 < r < 0.494661
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -809010269
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.499448 +/- 0.0028132 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.499448 @ 95%CL (1 toyMC)
median expected limit: r < 0.499448 @ 95%CL (1 toyMC)
   68% expected band : 0.499448 < r < 0.499448
   95% expected band : 0.499448 < r < 0.499448
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1792983058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.810441 +/- 0.00333593 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.810441 @ 95%CL (1 toyMC)
median expected limit: r < 0.810441 @ 95%CL (1 toyMC)
   68% expected band : 0.810441 < r < 0.810441
   95% expected band : 0.810441 < r < 0.810441
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -71035502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.546879 +/- 0.00277096 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.546879 @ 95%CL (1 toyMC)
median expected limit: r < 0.546879 @ 95%CL (1 toyMC)
   68% expected band : 0.546879 < r < 0.546879
   95% expected band : 0.546879 < r < 0.546879
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 25758311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.58931 +/- 0.00357684 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.58931 @ 95%CL (1 toyMC)
median expected limit: r < 0.58931 @ 95%CL (1 toyMC)
   68% expected band : 0.58931 < r < 0.58931
   95% expected band : 0.58931 < r < 0.58931
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -548794908
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.486251 +/- 0.00268063 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.486251 @ 95%CL (1 toyMC)
median expected limit: r < 0.486251 @ 95%CL (1 toyMC)
   68% expected band : 0.486251 < r < 0.486251
   95% expected band : 0.486251 < r < 0.486251
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -817917085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.517404 +/- 0.00287887 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.517404 @ 95%CL (1 toyMC)
median expected limit: r < 0.517404 @ 95%CL (1 toyMC)
   68% expected band : 0.517404 < r < 0.517404
   95% expected band : 0.517404 < r < 0.517404
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2044971224
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.636931 +/- 0.00325951 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 0.636931 @ 95%CL (1 toyMC)
median expected limit: r < 0.636931 @ 95%CL (1 toyMC)
   68% expected band : 0.636931 < r < 0.636931
   95% expected band : 0.636931 < r < 0.636931
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1674153123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338678 +/- 0.00242773 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.338678 @ 95%CL (1 toyMC)
median expected limit: r < 0.338678 @ 95%CL (1 toyMC)
   68% expected band : 0.338678 < r < 0.338678
   95% expected band : 0.338678 < r < 0.338678
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -111676285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.675631 +/- 0.00278371 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 0.675631 @ 95%CL (1 toyMC)
median expected limit: r < 0.675631 @ 95%CL (1 toyMC)
   68% expected band : 0.675631 < r < 0.675631
   95% expected band : 0.675631 < r < 0.675631
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1776627478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.430853 +/- 0.00301089 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.430853 @ 95%CL (1 toyMC)
median expected limit: r < 0.430853 @ 95%CL (1 toyMC)
   68% expected band : 0.430853 < r < 0.430853
   95% expected band : 0.430853 < r < 0.430853
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1436073182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.587588 +/- 0.00246116 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.587588 @ 95%CL (1 toyMC)
median expected limit: r < 0.587588 @ 95%CL (1 toyMC)
   68% expected band : 0.587588 < r < 0.587588
   95% expected band : 0.587588 < r < 0.587588
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1680380356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.950206 +/- 0.00338872 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.950206 @ 95%CL (1 toyMC)
median expected limit: r < 0.950206 @ 95%CL (1 toyMC)
   68% expected band : 0.950206 < r < 0.950206
   95% expected band : 0.950206 < r < 0.950206
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2135283266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.50049 +/- 0.00251063 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.50049 @ 95%CL (1 toyMC)
median expected limit: r < 0.50049 @ 95%CL (1 toyMC)
   68% expected band : 0.50049 < r < 0.50049
   95% expected band : 0.50049 < r < 0.50049
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -344506650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.551788 +/- 0.00312319 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.551788 @ 95%CL (1 toyMC)
median expected limit: r < 0.551788 @ 95%CL (1 toyMC)
   68% expected band : 0.551788 < r < 0.551788
   95% expected band : 0.551788 < r < 0.551788
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1364950380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.676124 +/- 0.00226688 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.676124 @ 95%CL (1 toyMC)
median expected limit: r < 0.676124 @ 95%CL (1 toyMC)
   68% expected band : 0.676124 < r < 0.676124
   95% expected band : 0.676124 < r < 0.676124
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2040378596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.547146 +/- 0.00253007 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.547146 @ 95%CL (1 toyMC)
median expected limit: r < 0.547146 @ 95%CL (1 toyMC)
   68% expected band : 0.547146 < r < 0.547146
   95% expected band : 0.547146 < r < 0.547146
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1736687782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.912219 +/- 0.00311581 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 0.912219 @ 95%CL (1 toyMC)
median expected limit: r < 0.912219 @ 95%CL (1 toyMC)
   68% expected band : 0.912219 < r < 0.912219
   95% expected band : 0.912219 < r < 0.912219
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine22.MarkovChainMC.mH22.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH22.-1027799113.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH22.-1029469821.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH22.-1055641676.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH22.-1081609369.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH22.-1088364431.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH22.-111676285.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH22.-1132434022.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH22.-1132537566.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH22.-1230312115.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH22.-1273517775.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH22.-1289224904.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH22.-141303376.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH22.-1433296452.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH22.-1533426941.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH22.-1639158119.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH22.-1680380356.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH22.-1686096781.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH22.-1736687782.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH22.-1777030985.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH22.-1822286650.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH22.-1885326208.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH22.-1950156304.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH22.-1970555663.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH22.-2006571681.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH22.-2009604302.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH22.-2044971224.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH22.-2062910942.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH22.-2094587808.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH22.-2105017157.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH22.-2111321339.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH22.-2115767563.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH22.-2135283266.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH22.-298315142.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH22.-344506650.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH22.-349488993.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH22.-371603112.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH22.-380403760.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH22.-431241559.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH22.-441313404.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH22.-456780151.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH22.-527614317.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH22.-548794908.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH22.-575483084.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH22.-689901165.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH22.-699710580.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH22.-71035502.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH22.-799004716.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH22.-809010269.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH22.-817917085.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH22.-839241924.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH22.-848021149.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH22.-879060952.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH22.-950389692.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH22.1005474004.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH22.1073090854.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH22.1163419070.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH22.1188396143.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH22.1237779114.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH22.1252245557.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH22.1304723922.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH22.1338683924.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH22.1354163411.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH22.1364950380.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH22.136566520.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH22.1409683999.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH22.1410307092.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH22.1436073182.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH22.152967984.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH22.1611202655.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH22.1644002468.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH22.1648249423.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH22.1674153123.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH22.1707291619.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH22.170765096.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH22.1718266686.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH22.1750992789.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH22.1776627478.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH22.1792983058.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH22.1835810357.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH22.188773870.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH22.1920697347.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH22.1983123588.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH22.2040378596.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH22.2093130093.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH22.248296706.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH22.25758311.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH22.534678779.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH22.534864310.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH22.571715895.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH22.57651611.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH22.613193181.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH22.669304959.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH22.673598148.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH22.698199483.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH22.733058193.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH22.75460249.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH22.79029.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH22.829239519.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH22.88359797.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH22.957417734.root
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 48360163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25624 +/- 0.00261456 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 1.25624 @ 95%CL (1 toyMC)
median expected limit: r < 1.25624 @ 95%CL (1 toyMC)
   68% expected band : 1.25624 < r < 1.25624
   95% expected band : 1.25624 < r < 1.25624
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1926972598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.711599 +/- 0.00294538 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.711599 @ 95%CL (1 toyMC)
median expected limit: r < 0.711599 @ 95%CL (1 toyMC)
   68% expected band : 0.711599 < r < 0.711599
   95% expected band : 0.711599 < r < 0.711599
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -95171491
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.866714 +/- 0.00306976 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.866714 @ 95%CL (1 toyMC)
median expected limit: r < 0.866714 @ 95%CL (1 toyMC)
   68% expected band : 0.866714 < r < 0.866714
   95% expected band : 0.866714 < r < 0.866714
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1565550345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.938978 +/- 0.00278002 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.938978 @ 95%CL (1 toyMC)
median expected limit: r < 0.938978 @ 95%CL (1 toyMC)
   68% expected band : 0.938978 < r < 0.938978
   95% expected band : 0.938978 < r < 0.938978
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1138322301
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.823443 +/- 0.00268681 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 0.823443 @ 95%CL (1 toyMC)
median expected limit: r < 0.823443 @ 95%CL (1 toyMC)
   68% expected band : 0.823443 < r < 0.823443
   95% expected band : 0.823443 < r < 0.823443
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1507551391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.915724 +/- 0.00317117 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.915724 @ 95%CL (1 toyMC)
median expected limit: r < 0.915724 @ 95%CL (1 toyMC)
   68% expected band : 0.915724 < r < 0.915724
   95% expected band : 0.915724 < r < 0.915724
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 944389037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.793744 +/- 0.00360239 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.793744 @ 95%CL (1 toyMC)
median expected limit: r < 0.793744 @ 95%CL (1 toyMC)
   68% expected band : 0.793744 < r < 0.793744
   95% expected band : 0.793744 < r < 0.793744
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2075455110
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39951 +/- 0.00303135 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 1.39951 @ 95%CL (1 toyMC)
median expected limit: r < 1.39951 @ 95%CL (1 toyMC)
   68% expected band : 1.39951 < r < 1.39951
   95% expected band : 1.39951 < r < 1.39951
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -806046401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32797 +/- 0.00358477 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.32797 @ 95%CL (1 toyMC)
median expected limit: r < 1.32797 @ 95%CL (1 toyMC)
   68% expected band : 1.32797 < r < 1.32797
   95% expected band : 1.32797 < r < 1.32797
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1459966798
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.785721 +/- 0.00370348 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.785721 @ 95%CL (1 toyMC)
median expected limit: r < 0.785721 @ 95%CL (1 toyMC)
   68% expected band : 0.785721 < r < 0.785721
   95% expected band : 0.785721 < r < 0.785721
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -831231817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22359 +/- 0.00382494 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.22359 @ 95%CL (1 toyMC)
median expected limit: r < 1.22359 @ 95%CL (1 toyMC)
   68% expected band : 1.22359 < r < 1.22359
   95% expected band : 1.22359 < r < 1.22359
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 20986068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11054 +/- 0.00313259 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.11054 @ 95%CL (1 toyMC)
median expected limit: r < 1.11054 @ 95%CL (1 toyMC)
   68% expected band : 1.11054 < r < 1.11054
   95% expected band : 1.11054 < r < 1.11054
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1482423483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.744741 +/- 0.00348229 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.47 min (real)
mean   expected limit: r < 0.744741 @ 95%CL (1 toyMC)
median expected limit: r < 0.744741 @ 95%CL (1 toyMC)
   68% expected band : 0.744741 < r < 0.744741
   95% expected band : 0.744741 < r < 0.744741
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2071355247
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.723496 +/- 0.0030603 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.723496 @ 95%CL (1 toyMC)
median expected limit: r < 0.723496 @ 95%CL (1 toyMC)
   68% expected band : 0.723496 < r < 0.723496
   95% expected band : 0.723496 < r < 0.723496
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -254052340
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49768 +/- 0.00299845 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.49768 @ 95%CL (1 toyMC)
median expected limit: r < 1.49768 @ 95%CL (1 toyMC)
   68% expected band : 1.49768 < r < 1.49768
   95% expected band : 1.49768 < r < 1.49768
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -301719693
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.692967 +/- 0.00325686 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.692967 @ 95%CL (1 toyMC)
median expected limit: r < 0.692967 @ 95%CL (1 toyMC)
   68% expected band : 0.692967 < r < 0.692967
   95% expected band : 0.692967 < r < 0.692967
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1327372862
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04335 +/- 0.00405989 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 1.04335 @ 95%CL (1 toyMC)
median expected limit: r < 1.04335 @ 95%CL (1 toyMC)
   68% expected band : 1.04335 < r < 1.04335
   95% expected band : 1.04335 < r < 1.04335
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -344864820
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.974969 +/- 0.0029729 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.974969 @ 95%CL (1 toyMC)
median expected limit: r < 0.974969 @ 95%CL (1 toyMC)
   68% expected band : 0.974969 < r < 0.974969
   95% expected band : 0.974969 < r < 0.974969
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 577513400
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.885123 +/- 0.00288644 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.885123 @ 95%CL (1 toyMC)
median expected limit: r < 0.885123 @ 95%CL (1 toyMC)
   68% expected band : 0.885123 < r < 0.885123
   95% expected band : 0.885123 < r < 0.885123
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 736746317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29954 +/- 0.00403859 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.29954 @ 95%CL (1 toyMC)
median expected limit: r < 1.29954 @ 95%CL (1 toyMC)
   68% expected band : 1.29954 < r < 1.29954
   95% expected band : 1.29954 < r < 1.29954
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -772407943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03852 +/- 0.00324315 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.03852 @ 95%CL (1 toyMC)
median expected limit: r < 1.03852 @ 95%CL (1 toyMC)
   68% expected band : 1.03852 < r < 1.03852
   95% expected band : 1.03852 < r < 1.03852
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -606699924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33403 +/- 0.00273522 @ 95% CL (100 tries)
Done in 0.48 min (cpu), 0.48 min (real)
mean   expected limit: r < 1.33403 @ 95%CL (1 toyMC)
median expected limit: r < 1.33403 @ 95%CL (1 toyMC)
   68% expected band : 1.33403 < r < 1.33403
   95% expected band : 1.33403 < r < 1.33403
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -171567103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.869179 +/- 0.00296017 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.869179 @ 95%CL (1 toyMC)
median expected limit: r < 0.869179 @ 95%CL (1 toyMC)
   68% expected band : 0.869179 < r < 0.869179
   95% expected band : 0.869179 < r < 0.869179
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1729561729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38297 +/- 0.00370786 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.38297 @ 95%CL (1 toyMC)
median expected limit: r < 1.38297 @ 95%CL (1 toyMC)
   68% expected band : 1.38297 < r < 1.38297
   95% expected band : 1.38297 < r < 1.38297
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1307056301
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.647828 +/- 0.00362427 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.647828 @ 95%CL (1 toyMC)
median expected limit: r < 0.647828 @ 95%CL (1 toyMC)
   68% expected band : 0.647828 < r < 0.647828
   95% expected band : 0.647828 < r < 0.647828
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1167422404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25608 +/- 0.00313352 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 1.25608 @ 95%CL (1 toyMC)
median expected limit: r < 1.25608 @ 95%CL (1 toyMC)
   68% expected band : 1.25608 < r < 1.25608
   95% expected band : 1.25608 < r < 1.25608
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -172275925
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50935 +/- 0.00329361 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.50935 @ 95%CL (1 toyMC)
median expected limit: r < 1.50935 @ 95%CL (1 toyMC)
   68% expected band : 1.50935 < r < 1.50935
   95% expected band : 1.50935 < r < 1.50935
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1302503520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.821092 +/- 0.0032398 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.821092 @ 95%CL (1 toyMC)
median expected limit: r < 0.821092 @ 95%CL (1 toyMC)
   68% expected band : 0.821092 < r < 0.821092
   95% expected band : 0.821092 < r < 0.821092
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1238803176
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.761151 +/- 0.00352049 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.761151 @ 95%CL (1 toyMC)
median expected limit: r < 0.761151 @ 95%CL (1 toyMC)
   68% expected band : 0.761151 < r < 0.761151
   95% expected band : 0.761151 < r < 0.761151
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 209742207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.963272 +/- 0.00290677 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.963272 @ 95%CL (1 toyMC)
median expected limit: r < 0.963272 @ 95%CL (1 toyMC)
   68% expected band : 0.963272 < r < 0.963272
   95% expected band : 0.963272 < r < 0.963272
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1305911343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.716707 +/- 0.00300064 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.716707 @ 95%CL (1 toyMC)
median expected limit: r < 0.716707 @ 95%CL (1 toyMC)
   68% expected band : 0.716707 < r < 0.716707
   95% expected band : 0.716707 < r < 0.716707
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 640367446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20133 +/- 0.00347182 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.20133 @ 95%CL (1 toyMC)
median expected limit: r < 1.20133 @ 95%CL (1 toyMC)
   68% expected band : 1.20133 < r < 1.20133
   95% expected band : 1.20133 < r < 1.20133
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1368787303
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.650701 +/- 0.00279119 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.650701 @ 95%CL (1 toyMC)
median expected limit: r < 0.650701 @ 95%CL (1 toyMC)
   68% expected band : 0.650701 < r < 0.650701
   95% expected band : 0.650701 < r < 0.650701
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 429433219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34066 +/- 0.00410891 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.34066 @ 95%CL (1 toyMC)
median expected limit: r < 1.34066 @ 95%CL (1 toyMC)
   68% expected band : 1.34066 < r < 1.34066
   95% expected band : 1.34066 < r < 1.34066
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1008594627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21615 +/- 0.00318869 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.21615 @ 95%CL (1 toyMC)
median expected limit: r < 1.21615 @ 95%CL (1 toyMC)
   68% expected band : 1.21615 < r < 1.21615
   95% expected band : 1.21615 < r < 1.21615
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -260571528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.49275 +/- 0.00306706 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.49275 @ 95%CL (1 toyMC)
median expected limit: r < 0.49275 @ 95%CL (1 toyMC)
   68% expected band : 0.49275 < r < 0.49275
   95% expected band : 0.49275 < r < 0.49275
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 402981113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.781803 +/- 0.00338457 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.781803 @ 95%CL (1 toyMC)
median expected limit: r < 0.781803 @ 95%CL (1 toyMC)
   68% expected band : 0.781803 < r < 0.781803
   95% expected band : 0.781803 < r < 0.781803
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 653875398
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.802522 +/- 0.00298269 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.802522 @ 95%CL (1 toyMC)
median expected limit: r < 0.802522 @ 95%CL (1 toyMC)
   68% expected band : 0.802522 < r < 0.802522
   95% expected band : 0.802522 < r < 0.802522
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2027337532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.910763 +/- 0.00361914 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.910763 @ 95%CL (1 toyMC)
median expected limit: r < 0.910763 @ 95%CL (1 toyMC)
   68% expected band : 0.910763 < r < 0.910763
   95% expected band : 0.910763 < r < 0.910763
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1366996327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19267 +/- 0.00329023 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 1.19267 @ 95%CL (1 toyMC)
median expected limit: r < 1.19267 @ 95%CL (1 toyMC)
   68% expected band : 1.19267 < r < 1.19267
   95% expected band : 1.19267 < r < 1.19267
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1209080481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.985144 +/- 0.00407044 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.985144 @ 95%CL (1 toyMC)
median expected limit: r < 0.985144 @ 95%CL (1 toyMC)
   68% expected band : 0.985144 < r < 0.985144
   95% expected band : 0.985144 < r < 0.985144
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 887267218
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.762936 +/- 0.00324169 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.762936 @ 95%CL (1 toyMC)
median expected limit: r < 0.762936 @ 95%CL (1 toyMC)
   68% expected band : 0.762936 < r < 0.762936
   95% expected band : 0.762936 < r < 0.762936
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 843912695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19797 +/- 0.00316171 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.19797 @ 95%CL (1 toyMC)
median expected limit: r < 1.19797 @ 95%CL (1 toyMC)
   68% expected band : 1.19797 < r < 1.19797
   95% expected band : 1.19797 < r < 1.19797
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1042857251
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11712 +/- 0.00328153 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.11712 @ 95%CL (1 toyMC)
median expected limit: r < 1.11712 @ 95%CL (1 toyMC)
   68% expected band : 1.11712 < r < 1.11712
   95% expected band : 1.11712 < r < 1.11712
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1871192789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.861796 +/- 0.00370821 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.861796 @ 95%CL (1 toyMC)
median expected limit: r < 0.861796 @ 95%CL (1 toyMC)
   68% expected band : 0.861796 < r < 0.861796
   95% expected band : 0.861796 < r < 0.861796
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 32219214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.599055 +/- 0.00356782 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.599055 @ 95%CL (1 toyMC)
median expected limit: r < 0.599055 @ 95%CL (1 toyMC)
   68% expected band : 0.599055 < r < 0.599055
   95% expected band : 0.599055 < r < 0.599055
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2134020395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.762433 +/- 0.00226033 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.762433 @ 95%CL (1 toyMC)
median expected limit: r < 0.762433 @ 95%CL (1 toyMC)
   68% expected band : 0.762433 < r < 0.762433
   95% expected band : 0.762433 < r < 0.762433
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2098928997
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66494 +/- 0.00312516 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.66494 @ 95%CL (1 toyMC)
median expected limit: r < 1.66494 @ 95%CL (1 toyMC)
   68% expected band : 1.66494 < r < 1.66494
   95% expected band : 1.66494 < r < 1.66494
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 414917522
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.83123 +/- 0.0036247 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.83123 @ 95%CL (1 toyMC)
median expected limit: r < 0.83123 @ 95%CL (1 toyMC)
   68% expected band : 0.83123 < r < 0.83123
   95% expected band : 0.83123 < r < 0.83123
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1565102928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04105 +/- 0.00269715 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.04105 @ 95%CL (1 toyMC)
median expected limit: r < 1.04105 @ 95%CL (1 toyMC)
   68% expected band : 1.04105 < r < 1.04105
   95% expected band : 1.04105 < r < 1.04105
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1720446199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48382 +/- 0.00322546 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.48382 @ 95%CL (1 toyMC)
median expected limit: r < 1.48382 @ 95%CL (1 toyMC)
   68% expected band : 1.48382 < r < 1.48382
   95% expected band : 1.48382 < r < 1.48382
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -965388827
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00841 +/- 0.00384463 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.00841 @ 95%CL (1 toyMC)
median expected limit: r < 1.00841 @ 95%CL (1 toyMC)
   68% expected band : 1.00841 < r < 1.00841
   95% expected band : 1.00841 < r < 1.00841
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1778042911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.87949 +/- 0.00375854 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.87949 @ 95%CL (1 toyMC)
median expected limit: r < 0.87949 @ 95%CL (1 toyMC)
   68% expected band : 0.87949 < r < 0.87949
   95% expected band : 0.87949 < r < 0.87949
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1155264042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.8614 +/- 0.0027374 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.8614 @ 95%CL (1 toyMC)
median expected limit: r < 0.8614 @ 95%CL (1 toyMC)
   68% expected band : 0.8614 < r < 0.8614
   95% expected band : 0.8614 < r < 0.8614
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1440231662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.678236 +/- 0.00270391 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.678236 @ 95%CL (1 toyMC)
median expected limit: r < 0.678236 @ 95%CL (1 toyMC)
   68% expected band : 0.678236 < r < 0.678236
   95% expected band : 0.678236 < r < 0.678236
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1386605226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01231 +/- 0.00303369 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.01231 @ 95%CL (1 toyMC)
median expected limit: r < 1.01231 @ 95%CL (1 toyMC)
   68% expected band : 1.01231 < r < 1.01231
   95% expected band : 1.01231 < r < 1.01231
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -469847752
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.943791 +/- 0.00350943 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.943791 @ 95%CL (1 toyMC)
median expected limit: r < 0.943791 @ 95%CL (1 toyMC)
   68% expected band : 0.943791 < r < 0.943791
   95% expected band : 0.943791 < r < 0.943791
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1301400856
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73616 +/- 0.00326849 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.73616 @ 95%CL (1 toyMC)
median expected limit: r < 1.73616 @ 95%CL (1 toyMC)
   68% expected band : 1.73616 < r < 1.73616
   95% expected band : 1.73616 < r < 1.73616
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1330717952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03589 +/- 0.00264758 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.03589 @ 95%CL (1 toyMC)
median expected limit: r < 1.03589 @ 95%CL (1 toyMC)
   68% expected band : 1.03589 < r < 1.03589
   95% expected band : 1.03589 < r < 1.03589
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1978858867
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.990464 +/- 0.00291657 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.990464 @ 95%CL (1 toyMC)
median expected limit: r < 0.990464 @ 95%CL (1 toyMC)
   68% expected band : 0.990464 < r < 0.990464
   95% expected band : 0.990464 < r < 0.990464
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1318452307
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07487 +/- 0.00352014 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.07487 @ 95%CL (1 toyMC)
median expected limit: r < 1.07487 @ 95%CL (1 toyMC)
   68% expected band : 1.07487 < r < 1.07487
   95% expected band : 1.07487 < r < 1.07487
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2135853435
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02985 +/- 0.00243438 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.02985 @ 95%CL (1 toyMC)
median expected limit: r < 1.02985 @ 95%CL (1 toyMC)
   68% expected band : 1.02985 < r < 1.02985
   95% expected band : 1.02985 < r < 1.02985
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -732044191
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.975764 +/- 0.0031869 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.975764 @ 95%CL (1 toyMC)
median expected limit: r < 0.975764 @ 95%CL (1 toyMC)
   68% expected band : 0.975764 < r < 0.975764
   95% expected band : 0.975764 < r < 0.975764
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 532743168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35742 +/- 0.00314068 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.35742 @ 95%CL (1 toyMC)
median expected limit: r < 1.35742 @ 95%CL (1 toyMC)
   68% expected band : 1.35742 < r < 1.35742
   95% expected band : 1.35742 < r < 1.35742
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1828861730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43113 +/- 0.00364482 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.43113 @ 95%CL (1 toyMC)
median expected limit: r < 1.43113 @ 95%CL (1 toyMC)
   68% expected band : 1.43113 < r < 1.43113
   95% expected band : 1.43113 < r < 1.43113
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 675071129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06765 +/- 0.0034273 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.06765 @ 95%CL (1 toyMC)
median expected limit: r < 1.06765 @ 95%CL (1 toyMC)
   68% expected band : 1.06765 < r < 1.06765
   95% expected band : 1.06765 < r < 1.06765
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 484565834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.746728 +/- 0.00260875 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.746728 @ 95%CL (1 toyMC)
median expected limit: r < 0.746728 @ 95%CL (1 toyMC)
   68% expected band : 0.746728 < r < 0.746728
   95% expected band : 0.746728 < r < 0.746728
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -868017393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.416 +/- 0.00381581 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.416 @ 95%CL (1 toyMC)
median expected limit: r < 1.416 @ 95%CL (1 toyMC)
   68% expected band : 1.416 < r < 1.416
   95% expected band : 1.416 < r < 1.416
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 621219049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.850653 +/- 0.00345856 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.850653 @ 95%CL (1 toyMC)
median expected limit: r < 0.850653 @ 95%CL (1 toyMC)
   68% expected band : 0.850653 < r < 0.850653
   95% expected band : 0.850653 < r < 0.850653
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 904889837
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.825233 +/- 0.00314209 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.825233 @ 95%CL (1 toyMC)
median expected limit: r < 0.825233 @ 95%CL (1 toyMC)
   68% expected band : 0.825233 < r < 0.825233
   95% expected band : 0.825233 < r < 0.825233
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -600762609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40303 +/- 0.00293228 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.40303 @ 95%CL (1 toyMC)
median expected limit: r < 1.40303 @ 95%CL (1 toyMC)
   68% expected band : 1.40303 < r < 1.40303
   95% expected band : 1.40303 < r < 1.40303
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 980314069
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.951344 +/- 0.00378557 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.951344 @ 95%CL (1 toyMC)
median expected limit: r < 0.951344 @ 95%CL (1 toyMC)
   68% expected band : 0.951344 < r < 0.951344
   95% expected band : 0.951344 < r < 0.951344
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 155727215
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23205 +/- 0.00365255 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.23205 @ 95%CL (1 toyMC)
median expected limit: r < 1.23205 @ 95%CL (1 toyMC)
   68% expected band : 1.23205 < r < 1.23205
   95% expected band : 1.23205 < r < 1.23205
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1381821582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.769201 +/- 0.00374666 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.769201 @ 95%CL (1 toyMC)
median expected limit: r < 0.769201 @ 95%CL (1 toyMC)
   68% expected band : 0.769201 < r < 0.769201
   95% expected band : 0.769201 < r < 0.769201
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1027361179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.796675 +/- 0.00309562 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.796675 @ 95%CL (1 toyMC)
median expected limit: r < 0.796675 @ 95%CL (1 toyMC)
   68% expected band : 0.796675 < r < 0.796675
   95% expected band : 0.796675 < r < 0.796675
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -965495901
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.816845 +/- 0.0038895 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.816845 @ 95%CL (1 toyMC)
median expected limit: r < 0.816845 @ 95%CL (1 toyMC)
   68% expected band : 0.816845 < r < 0.816845
   95% expected band : 0.816845 < r < 0.816845
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2026821235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.947385 +/- 0.00339821 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.947385 @ 95%CL (1 toyMC)
median expected limit: r < 0.947385 @ 95%CL (1 toyMC)
   68% expected band : 0.947385 < r < 0.947385
   95% expected band : 0.947385 < r < 0.947385
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 975537013
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.65829 +/- 0.00299867 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.65829 @ 95%CL (1 toyMC)
median expected limit: r < 0.65829 @ 95%CL (1 toyMC)
   68% expected band : 0.65829 < r < 0.65829
   95% expected band : 0.65829 < r < 0.65829
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1611571594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.704764 +/- 0.00368388 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.704764 @ 95%CL (1 toyMC)
median expected limit: r < 0.704764 @ 95%CL (1 toyMC)
   68% expected band : 0.704764 < r < 0.704764
   95% expected band : 0.704764 < r < 0.704764
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 695223212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.712393 +/- 0.00336901 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.712393 @ 95%CL (1 toyMC)
median expected limit: r < 0.712393 @ 95%CL (1 toyMC)
   68% expected band : 0.712393 < r < 0.712393
   95% expected band : 0.712393 < r < 0.712393
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 137548868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10946 +/- 0.00330136 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.10946 @ 95%CL (1 toyMC)
median expected limit: r < 1.10946 @ 95%CL (1 toyMC)
   68% expected band : 1.10946 < r < 1.10946
   95% expected band : 1.10946 < r < 1.10946
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -401422859
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.62851 +/- 0.00264593 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.62851 @ 95%CL (1 toyMC)
median expected limit: r < 0.62851 @ 95%CL (1 toyMC)
   68% expected band : 0.62851 < r < 0.62851
   95% expected band : 0.62851 < r < 0.62851
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 6761831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52572 +/- 0.0026786 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.52572 @ 95%CL (1 toyMC)
median expected limit: r < 1.52572 @ 95%CL (1 toyMC)
   68% expected band : 1.52572 < r < 1.52572
   95% expected band : 1.52572 < r < 1.52572
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2075066432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.322 +/- 0.00427828 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.322 @ 95%CL (1 toyMC)
median expected limit: r < 2.322 @ 95%CL (1 toyMC)
   68% expected band : 2.322 < r < 2.322
   95% expected band : 2.322 < r < 2.322
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1301959429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22334 +/- 0.0042343 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.22334 @ 95%CL (1 toyMC)
median expected limit: r < 1.22334 @ 95%CL (1 toyMC)
   68% expected band : 1.22334 < r < 1.22334
   95% expected band : 1.22334 < r < 1.22334
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1010985922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.777445 +/- 0.00290637 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.777445 @ 95%CL (1 toyMC)
median expected limit: r < 0.777445 @ 95%CL (1 toyMC)
   68% expected band : 0.777445 < r < 0.777445
   95% expected band : 0.777445 < r < 0.777445
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2082609808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.727709 +/- 0.00300561 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.727709 @ 95%CL (1 toyMC)
median expected limit: r < 0.727709 @ 95%CL (1 toyMC)
   68% expected band : 0.727709 < r < 0.727709
   95% expected band : 0.727709 < r < 0.727709
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2752783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.858145 +/- 0.00326654 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.858145 @ 95%CL (1 toyMC)
median expected limit: r < 0.858145 @ 95%CL (1 toyMC)
   68% expected band : 0.858145 < r < 0.858145
   95% expected band : 0.858145 < r < 0.858145
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1350937156
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76075 +/- 0.00355906 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.76075 @ 95%CL (1 toyMC)
median expected limit: r < 1.76075 @ 95%CL (1 toyMC)
   68% expected band : 1.76075 < r < 1.76075
   95% expected band : 1.76075 < r < 1.76075
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 508728949
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.673036 +/- 0.00325074 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.673036 @ 95%CL (1 toyMC)
median expected limit: r < 0.673036 @ 95%CL (1 toyMC)
   68% expected band : 0.673036 < r < 0.673036
   95% expected band : 0.673036 < r < 0.673036
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1303551064
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.934221 +/- 0.00262681 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.934221 @ 95%CL (1 toyMC)
median expected limit: r < 0.934221 @ 95%CL (1 toyMC)
   68% expected band : 0.934221 < r < 0.934221
   95% expected band : 0.934221 < r < 0.934221
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 808322342
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.672775 +/- 0.00349281 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.672775 @ 95%CL (1 toyMC)
median expected limit: r < 0.672775 @ 95%CL (1 toyMC)
   68% expected band : 0.672775 < r < 0.672775
   95% expected band : 0.672775 < r < 0.672775
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -958337404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19463 +/- 0.00350735 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.19463 @ 95%CL (1 toyMC)
median expected limit: r < 1.19463 @ 95%CL (1 toyMC)
   68% expected band : 1.19463 < r < 1.19463
   95% expected band : 1.19463 < r < 1.19463
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2061025782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01331 +/- 0.00318416 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.01331 @ 95%CL (1 toyMC)
median expected limit: r < 1.01331 @ 95%CL (1 toyMC)
   68% expected band : 1.01331 < r < 1.01331
   95% expected band : 1.01331 < r < 1.01331
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 601984524
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.920102 +/- 0.00277887 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.920102 @ 95%CL (1 toyMC)
median expected limit: r < 0.920102 @ 95%CL (1 toyMC)
   68% expected band : 0.920102 < r < 0.920102
   95% expected band : 0.920102 < r < 0.920102
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1869218144
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53225 +/- 0.00371406 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.53225 @ 95%CL (1 toyMC)
median expected limit: r < 1.53225 @ 95%CL (1 toyMC)
   68% expected band : 1.53225 < r < 1.53225
   95% expected band : 1.53225 < r < 1.53225
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 294977849
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12815 +/- 0.00305811 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.12815 @ 95%CL (1 toyMC)
median expected limit: r < 1.12815 @ 95%CL (1 toyMC)
   68% expected band : 1.12815 < r < 1.12815
   95% expected band : 1.12815 < r < 1.12815
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1171565414
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.791337 +/- 0.00293766 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.791337 @ 95%CL (1 toyMC)
median expected limit: r < 0.791337 @ 95%CL (1 toyMC)
   68% expected band : 0.791337 < r < 0.791337
   95% expected band : 0.791337 < r < 0.791337
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -493011895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.566682 +/- 0.00268788 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.566682 @ 95%CL (1 toyMC)
median expected limit: r < 0.566682 @ 95%CL (1 toyMC)
   68% expected band : 0.566682 < r < 0.566682
   95% expected band : 0.566682 < r < 0.566682
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1729778735
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1735 +/- 0.0038434 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.1735 @ 95%CL (1 toyMC)
median expected limit: r < 1.1735 @ 95%CL (1 toyMC)
   68% expected band : 1.1735 < r < 1.1735
   95% expected band : 1.1735 < r < 1.1735
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine28.MarkovChainMC.mH28.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH28.-1008594627.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH28.-1010985922.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH28.-1171565414.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH28.-1209080481.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH28.-1301400856.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH28.-1301959429.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH28.-1302503520.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH28.-1303551064.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH28.-1307056301.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH28.-1327372862.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH28.-1330717952.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH28.-1350937156.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH28.-1368787303.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH28.-1381821582.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH28.-1386605226.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH28.-1440231662.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH28.-1482423483.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH28.-1507551391.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH28.-1565102928.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH28.-1565550345.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH28.-171567103.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH28.-1720446199.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH28.-172275925.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH28.-1729561729.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH28.-1778042911.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH28.-1869218144.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH28.-1871192789.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH28.-2071355247.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH28.-2075066432.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH28.-2098928997.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH28.-2135853435.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH28.-254052340.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH28.-260571528.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH28.-2752783.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH28.-301719693.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH28.-344864820.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH28.-401422859.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH28.-469847752.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH28.-493011895.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH28.-600762609.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH28.-606699924.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH28.-732044191.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH28.-772407943.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH28.-806046401.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH28.-831231817.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH28.-868017393.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH28.-95171491.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH28.-958337404.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH28.-965388827.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH28.-965495901.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH28.1027361179.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH28.1042857251.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH28.1138322301.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH28.1155264042.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH28.1167422404.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH28.1238803176.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH28.1305911343.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH28.1318452307.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH28.1366996327.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH28.137548868.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH28.1459966798.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH28.155727215.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH28.1611571594.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH28.1729778735.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH28.1828861730.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH28.1926972598.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH28.1978858867.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH28.2026821235.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH28.2027337532.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH28.2061025782.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH28.2075455110.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH28.2082609808.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH28.209742207.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH28.20986068.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH28.2134020395.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH28.294977849.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH28.32219214.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH28.402981113.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH28.414917522.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH28.429433219.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH28.48360163.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH28.484565834.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH28.508728949.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH28.532743168.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH28.577513400.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH28.601984524.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH28.621219049.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH28.640367446.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH28.653875398.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH28.675071129.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH28.6761831.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH28.695223212.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH28.736746317.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH28.808322342.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH28.843912695.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH28.887267218.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH28.904889837.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH28.944389037.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH28.975537013.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH28.980314069.root
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1428060783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.86061 +/- 0.00561921 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 2.86061 @ 95%CL (1 toyMC)
median expected limit: r < 2.86061 @ 95%CL (1 toyMC)
   68% expected band : 2.86061 < r < 2.86061
   95% expected band : 2.86061 < r < 2.86061
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1542385182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.830386 +/- 0.00318957 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.830386 @ 95%CL (1 toyMC)
median expected limit: r < 0.830386 @ 95%CL (1 toyMC)
   68% expected band : 0.830386 < r < 0.830386
   95% expected band : 0.830386 < r < 0.830386
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -294687820
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63662 +/- 0.00352771 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.63662 @ 95%CL (1 toyMC)
median expected limit: r < 1.63662 @ 95%CL (1 toyMC)
   68% expected band : 1.63662 < r < 1.63662
   95% expected band : 1.63662 < r < 1.63662
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -297372972
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.941891 +/- 0.00275664 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.941891 @ 95%CL (1 toyMC)
median expected limit: r < 0.941891 @ 95%CL (1 toyMC)
   68% expected band : 0.941891 < r < 0.941891
   95% expected band : 0.941891 < r < 0.941891
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1010076453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.05739 +/- 0.00377692 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.05739 @ 95%CL (1 toyMC)
median expected limit: r < 2.05739 @ 95%CL (1 toyMC)
   68% expected band : 2.05739 < r < 2.05739
   95% expected band : 2.05739 < r < 2.05739
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 807801037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58953 +/- 0.00409478 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.58953 @ 95%CL (1 toyMC)
median expected limit: r < 2.58953 @ 95%CL (1 toyMC)
   68% expected band : 2.58953 < r < 2.58953
   95% expected band : 2.58953 < r < 2.58953
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -102393922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24098 +/- 0.00304955 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.24098 @ 95%CL (1 toyMC)
median expected limit: r < 1.24098 @ 95%CL (1 toyMC)
   68% expected band : 1.24098 < r < 1.24098
   95% expected band : 1.24098 < r < 1.24098
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2115226390
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.854349 +/- 0.00392307 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.854349 @ 95%CL (1 toyMC)
median expected limit: r < 0.854349 @ 95%CL (1 toyMC)
   68% expected band : 0.854349 < r < 0.854349
   95% expected band : 0.854349 < r < 0.854349
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1177655699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.896008 +/- 0.00345546 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.896008 @ 95%CL (1 toyMC)
median expected limit: r < 0.896008 @ 95%CL (1 toyMC)
   68% expected band : 0.896008 < r < 0.896008
   95% expected band : 0.896008 < r < 0.896008
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -62479469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.9222 +/- 0.0042769 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.9222 @ 95%CL (1 toyMC)
median expected limit: r < 1.9222 @ 95%CL (1 toyMC)
   68% expected band : 1.9222 < r < 1.9222
   95% expected band : 1.9222 < r < 1.9222
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1562259442
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.901209 +/- 0.00346087 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.901209 @ 95%CL (1 toyMC)
median expected limit: r < 0.901209 @ 95%CL (1 toyMC)
   68% expected band : 0.901209 < r < 0.901209
   95% expected band : 0.901209 < r < 0.901209
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1823272706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.955723 +/- 0.00409094 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.955723 @ 95%CL (1 toyMC)
median expected limit: r < 0.955723 @ 95%CL (1 toyMC)
   68% expected band : 0.955723 < r < 0.955723
   95% expected band : 0.955723 < r < 0.955723
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -13541823
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.884033 +/- 0.00309239 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.884033 @ 95%CL (1 toyMC)
median expected limit: r < 0.884033 @ 95%CL (1 toyMC)
   68% expected band : 0.884033 < r < 0.884033
   95% expected band : 0.884033 < r < 0.884033
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 989821965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.9075 +/- 0.00458228 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.9075 @ 95%CL (1 toyMC)
median expected limit: r < 1.9075 @ 95%CL (1 toyMC)
   68% expected band : 1.9075 < r < 1.9075
   95% expected band : 1.9075 < r < 1.9075
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1600393838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49589 +/- 0.0034325 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.49589 @ 95%CL (1 toyMC)
median expected limit: r < 1.49589 @ 95%CL (1 toyMC)
   68% expected band : 1.49589 < r < 1.49589
   95% expected band : 1.49589 < r < 1.49589
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 173449428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.95141 +/- 0.0046882 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.95141 @ 95%CL (1 toyMC)
median expected limit: r < 0.95141 @ 95%CL (1 toyMC)
   68% expected band : 0.95141 < r < 0.95141
   95% expected band : 0.95141 < r < 0.95141
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1539057000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.969976 +/- 0.00389195 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.969976 @ 95%CL (1 toyMC)
median expected limit: r < 0.969976 @ 95%CL (1 toyMC)
   68% expected band : 0.969976 < r < 0.969976
   95% expected band : 0.969976 < r < 0.969976
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -241894230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52581 +/- 0.00374669 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.52581 @ 95%CL (1 toyMC)
median expected limit: r < 1.52581 @ 95%CL (1 toyMC)
   68% expected band : 1.52581 < r < 1.52581
   95% expected band : 1.52581 < r < 1.52581
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -417713996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38604 +/- 0.00433351 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.38604 @ 95%CL (1 toyMC)
median expected limit: r < 1.38604 @ 95%CL (1 toyMC)
   68% expected band : 1.38604 < r < 1.38604
   95% expected band : 1.38604 < r < 1.38604
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -342038967
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82867 +/- 0.00412139 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.82867 @ 95%CL (1 toyMC)
median expected limit: r < 1.82867 @ 95%CL (1 toyMC)
   68% expected band : 1.82867 < r < 1.82867
   95% expected band : 1.82867 < r < 1.82867
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 987421267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.91771 +/- 0.00354587 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.91771 @ 95%CL (1 toyMC)
median expected limit: r < 0.91771 @ 95%CL (1 toyMC)
   68% expected band : 0.91771 < r < 0.91771
   95% expected band : 0.91771 < r < 0.91771
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1243978739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.957543 +/- 0.00382845 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.957543 @ 95%CL (1 toyMC)
median expected limit: r < 0.957543 @ 95%CL (1 toyMC)
   68% expected band : 0.957543 < r < 0.957543
   95% expected band : 0.957543 < r < 0.957543
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1061643690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.06209 +/- 0.00415552 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.06209 @ 95%CL (1 toyMC)
median expected limit: r < 2.06209 @ 95%CL (1 toyMC)
   68% expected band : 2.06209 < r < 2.06209
   95% expected band : 2.06209 < r < 2.06209
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2064688141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76812 +/- 0.00366813 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.76812 @ 95%CL (1 toyMC)
median expected limit: r < 1.76812 @ 95%CL (1 toyMC)
   68% expected band : 1.76812 < r < 1.76812
   95% expected band : 1.76812 < r < 1.76812
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1246978870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27524 +/- 0.00403275 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.27524 @ 95%CL (1 toyMC)
median expected limit: r < 1.27524 @ 95%CL (1 toyMC)
   68% expected band : 1.27524 < r < 1.27524
   95% expected band : 1.27524 < r < 1.27524
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1958907680
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47912 +/- 0.00469094 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.47912 @ 95%CL (1 toyMC)
median expected limit: r < 2.47912 @ 95%CL (1 toyMC)
   68% expected band : 2.47912 < r < 2.47912
   95% expected band : 2.47912 < r < 2.47912
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1588540726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.929736 +/- 0.0039731 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.929736 @ 95%CL (1 toyMC)
median expected limit: r < 0.929736 @ 95%CL (1 toyMC)
   68% expected band : 0.929736 < r < 0.929736
   95% expected band : 0.929736 < r < 0.929736
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -61207621
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40722 +/- 0.00405073 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.40722 @ 95%CL (1 toyMC)
median expected limit: r < 1.40722 @ 95%CL (1 toyMC)
   68% expected band : 1.40722 < r < 1.40722
   95% expected band : 1.40722 < r < 1.40722
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1937237386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4277 +/- 0.00370064 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.4277 @ 95%CL (1 toyMC)
median expected limit: r < 1.4277 @ 95%CL (1 toyMC)
   68% expected band : 1.4277 < r < 1.4277
   95% expected band : 1.4277 < r < 1.4277
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1020623900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22346 +/- 0.00455193 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.22346 @ 95%CL (1 toyMC)
median expected limit: r < 1.22346 @ 95%CL (1 toyMC)
   68% expected band : 1.22346 < r < 1.22346
   95% expected band : 1.22346 < r < 1.22346
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 754553519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30861 +/- 0.00415555 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.30861 @ 95%CL (1 toyMC)
median expected limit: r < 1.30861 @ 95%CL (1 toyMC)
   68% expected band : 1.30861 < r < 1.30861
   95% expected band : 1.30861 < r < 1.30861
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -594977733
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12151 +/- 0.00501747 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.12151 @ 95%CL (1 toyMC)
median expected limit: r < 2.12151 @ 95%CL (1 toyMC)
   68% expected band : 2.12151 < r < 2.12151
   95% expected band : 2.12151 < r < 2.12151
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -700866482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81879 +/- 0.00444997 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.81879 @ 95%CL (1 toyMC)
median expected limit: r < 1.81879 @ 95%CL (1 toyMC)
   68% expected band : 1.81879 < r < 1.81879
   95% expected band : 1.81879 < r < 1.81879
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1120844326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71086 +/- 0.00413435 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.71086 @ 95%CL (1 toyMC)
median expected limit: r < 1.71086 @ 95%CL (1 toyMC)
   68% expected band : 1.71086 < r < 1.71086
   95% expected band : 1.71086 < r < 1.71086
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1695927193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.26051 +/- 0.0038164 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.26051 @ 95%CL (1 toyMC)
median expected limit: r < 2.26051 @ 95%CL (1 toyMC)
   68% expected band : 2.26051 < r < 2.26051
   95% expected band : 2.26051 < r < 2.26051
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1640337230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09071 +/- 0.00380894 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.09071 @ 95%CL (1 toyMC)
median expected limit: r < 2.09071 @ 95%CL (1 toyMC)
   68% expected band : 2.09071 < r < 2.09071
   95% expected band : 2.09071 < r < 2.09071
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1567761279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46377 +/- 0.00380978 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.46377 @ 95%CL (1 toyMC)
median expected limit: r < 2.46377 @ 95%CL (1 toyMC)
   68% expected band : 2.46377 < r < 2.46377
   95% expected band : 2.46377 < r < 2.46377
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1400623528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84296 +/- 0.00417847 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.84296 @ 95%CL (1 toyMC)
median expected limit: r < 1.84296 @ 95%CL (1 toyMC)
   68% expected band : 1.84296 < r < 1.84296
   95% expected band : 1.84296 < r < 1.84296
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1837232660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16142 +/- 0.00417394 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.16142 @ 95%CL (1 toyMC)
median expected limit: r < 1.16142 @ 95%CL (1 toyMC)
   68% expected band : 1.16142 < r < 1.16142
   95% expected band : 1.16142 < r < 1.16142
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1375995912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26505 +/- 0.00346389 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.26505 @ 95%CL (1 toyMC)
median expected limit: r < 1.26505 @ 95%CL (1 toyMC)
   68% expected band : 1.26505 < r < 1.26505
   95% expected band : 1.26505 < r < 1.26505
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2086704106
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.0613 +/- 0.00533289 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.0613 @ 95%CL (1 toyMC)
median expected limit: r < 2.0613 @ 95%CL (1 toyMC)
   68% expected band : 2.0613 < r < 2.0613
   95% expected band : 2.0613 < r < 2.0613
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1904525132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71309 +/- 0.00461399 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.71309 @ 95%CL (1 toyMC)
median expected limit: r < 1.71309 @ 95%CL (1 toyMC)
   68% expected band : 1.71309 < r < 1.71309
   95% expected band : 1.71309 < r < 1.71309
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -30833001
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40851 +/- 0.00393584 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.40851 @ 95%CL (1 toyMC)
median expected limit: r < 1.40851 @ 95%CL (1 toyMC)
   68% expected band : 1.40851 < r < 1.40851
   95% expected band : 1.40851 < r < 1.40851
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1440419260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07988 +/- 0.00467693 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.07988 @ 95%CL (1 toyMC)
median expected limit: r < 1.07988 @ 95%CL (1 toyMC)
   68% expected band : 1.07988 < r < 1.07988
   95% expected band : 1.07988 < r < 1.07988
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2050253560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6357 +/- 0.0045188 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.6357 @ 95%CL (1 toyMC)
median expected limit: r < 1.6357 @ 95%CL (1 toyMC)
   68% expected band : 1.6357 < r < 1.6357
   95% expected band : 1.6357 < r < 1.6357
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1369906408
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76043 +/- 0.00530923 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.76043 @ 95%CL (1 toyMC)
median expected limit: r < 1.76043 @ 95%CL (1 toyMC)
   68% expected band : 1.76043 < r < 1.76043
   95% expected band : 1.76043 < r < 1.76043
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -53673146
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66304 +/- 0.00416589 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.66304 @ 95%CL (1 toyMC)
median expected limit: r < 2.66304 @ 95%CL (1 toyMC)
   68% expected band : 2.66304 < r < 2.66304
   95% expected band : 2.66304 < r < 2.66304
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 401701981
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64283 +/- 0.00390445 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.64283 @ 95%CL (1 toyMC)
median expected limit: r < 1.64283 @ 95%CL (1 toyMC)
   68% expected band : 1.64283 < r < 1.64283
   95% expected band : 1.64283 < r < 1.64283
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1589726872
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3919 +/- 0.00440002 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.3919 @ 95%CL (1 toyMC)
median expected limit: r < 1.3919 @ 95%CL (1 toyMC)
   68% expected band : 1.3919 < r < 1.3919
   95% expected band : 1.3919 < r < 1.3919
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -128520495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28726 +/- 0.00432169 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.28726 @ 95%CL (1 toyMC)
median expected limit: r < 1.28726 @ 95%CL (1 toyMC)
   68% expected band : 1.28726 < r < 1.28726
   95% expected band : 1.28726 < r < 1.28726
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 383617019
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.95643 +/- 0.00422079 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 2.95643 @ 95%CL (1 toyMC)
median expected limit: r < 2.95643 @ 95%CL (1 toyMC)
   68% expected band : 2.95643 < r < 2.95643
   95% expected band : 2.95643 < r < 2.95643
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1269576260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73622 +/- 0.00535214 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.73622 @ 95%CL (1 toyMC)
median expected limit: r < 1.73622 @ 95%CL (1 toyMC)
   68% expected band : 1.73622 < r < 1.73622
   95% expected band : 1.73622 < r < 1.73622
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 334775321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05622 +/- 0.00434906 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.05622 @ 95%CL (1 toyMC)
median expected limit: r < 1.05622 @ 95%CL (1 toyMC)
   68% expected band : 1.05622 < r < 1.05622
   95% expected band : 1.05622 < r < 1.05622
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1714881230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74284 +/- 0.00445361 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.74284 @ 95%CL (1 toyMC)
median expected limit: r < 1.74284 @ 95%CL (1 toyMC)
   68% expected band : 1.74284 < r < 1.74284
   95% expected band : 1.74284 < r < 1.74284
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1876415779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22143 +/- 0.00451185 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.22143 @ 95%CL (1 toyMC)
median expected limit: r < 1.22143 @ 95%CL (1 toyMC)
   68% expected band : 1.22143 < r < 1.22143
   95% expected band : 1.22143 < r < 1.22143
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1859100720
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02092 +/- 0.00292935 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.02092 @ 95%CL (1 toyMC)
median expected limit: r < 1.02092 @ 95%CL (1 toyMC)
   68% expected band : 1.02092 < r < 1.02092
   95% expected band : 1.02092 < r < 1.02092
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 348972088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.56968 +/- 0.00412639 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.56968 @ 95%CL (1 toyMC)
median expected limit: r < 2.56968 @ 95%CL (1 toyMC)
   68% expected band : 2.56968 < r < 2.56968
   95% expected band : 2.56968 < r < 2.56968
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -263140238
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.969352 +/- 0.00310499 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.969352 @ 95%CL (1 toyMC)
median expected limit: r < 0.969352 @ 95%CL (1 toyMC)
   68% expected band : 0.969352 < r < 0.969352
   95% expected band : 0.969352 < r < 0.969352
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 466315805
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.40348 +/- 0.00695937 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.40348 @ 95%CL (1 toyMC)
median expected limit: r < 3.40348 @ 95%CL (1 toyMC)
   68% expected band : 3.40348 < r < 3.40348
   95% expected band : 3.40348 < r < 3.40348
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2063417168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22896 +/- 0.0042056 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.22896 @ 95%CL (1 toyMC)
median expected limit: r < 1.22896 @ 95%CL (1 toyMC)
   68% expected band : 1.22896 < r < 1.22896
   95% expected band : 1.22896 < r < 1.22896
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1292118896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13501 +/- 0.0038377 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.13501 @ 95%CL (1 toyMC)
median expected limit: r < 1.13501 @ 95%CL (1 toyMC)
   68% expected band : 1.13501 < r < 1.13501
   95% expected band : 1.13501 < r < 1.13501
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1402141898
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07646 +/- 0.00341991 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.07646 @ 95%CL (1 toyMC)
median expected limit: r < 2.07646 @ 95%CL (1 toyMC)
   68% expected band : 2.07646 < r < 2.07646
   95% expected band : 2.07646 < r < 2.07646
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1661522409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.14196 +/- 0.00372732 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.14196 @ 95%CL (1 toyMC)
median expected limit: r < 3.14196 @ 95%CL (1 toyMC)
   68% expected band : 3.14196 < r < 3.14196
   95% expected band : 3.14196 < r < 3.14196
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1032578479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.31285 +/- 0.00471005 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.31285 @ 95%CL (1 toyMC)
median expected limit: r < 2.31285 @ 95%CL (1 toyMC)
   68% expected band : 2.31285 < r < 2.31285
   95% expected band : 2.31285 < r < 2.31285
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 877154903
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6507 +/- 0.00453075 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.6507 @ 95%CL (1 toyMC)
median expected limit: r < 1.6507 @ 95%CL (1 toyMC)
   68% expected band : 1.6507 < r < 1.6507
   95% expected band : 1.6507 < r < 1.6507
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1693756979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.26845 +/- 0.00426139 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.26845 @ 95%CL (1 toyMC)
median expected limit: r < 2.26845 @ 95%CL (1 toyMC)
   68% expected band : 2.26845 < r < 2.26845
   95% expected band : 2.26845 < r < 2.26845
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1818712535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.16626 +/- 0.00430136 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.16626 @ 95%CL (1 toyMC)
median expected limit: r < 2.16626 @ 95%CL (1 toyMC)
   68% expected band : 2.16626 < r < 2.16626
   95% expected band : 2.16626 < r < 2.16626
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 139345394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53004 +/- 0.00477385 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.53004 @ 95%CL (1 toyMC)
median expected limit: r < 2.53004 @ 95%CL (1 toyMC)
   68% expected band : 2.53004 < r < 2.53004
   95% expected band : 2.53004 < r < 2.53004
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1041913798
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0352 +/- 0.00407744 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.0352 @ 95%CL (1 toyMC)
median expected limit: r < 1.0352 @ 95%CL (1 toyMC)
   68% expected band : 1.0352 < r < 1.0352
   95% expected band : 1.0352 < r < 1.0352
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -999036197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4172 +/- 0.00383221 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.4172 @ 95%CL (1 toyMC)
median expected limit: r < 1.4172 @ 95%CL (1 toyMC)
   68% expected band : 1.4172 < r < 1.4172
   95% expected band : 1.4172 < r < 1.4172
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1481651399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56948 +/- 0.00439424 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.56948 @ 95%CL (1 toyMC)
median expected limit: r < 1.56948 @ 95%CL (1 toyMC)
   68% expected band : 1.56948 < r < 1.56948
   95% expected band : 1.56948 < r < 1.56948
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2094581319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.975281 +/- 0.00389292 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.975281 @ 95%CL (1 toyMC)
median expected limit: r < 0.975281 @ 95%CL (1 toyMC)
   68% expected band : 0.975281 < r < 0.975281
   95% expected band : 0.975281 < r < 0.975281
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 548349204
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.997632 +/- 0.0034699 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.997632 @ 95%CL (1 toyMC)
median expected limit: r < 0.997632 @ 95%CL (1 toyMC)
   68% expected band : 0.997632 < r < 0.997632
   95% expected band : 0.997632 < r < 0.997632
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1372708887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19547 +/- 0.00381316 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.19547 @ 95%CL (1 toyMC)
median expected limit: r < 1.19547 @ 95%CL (1 toyMC)
   68% expected band : 1.19547 < r < 1.19547
   95% expected band : 1.19547 < r < 1.19547
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -633366497
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06937 +/- 0.00360668 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.06937 @ 95%CL (1 toyMC)
median expected limit: r < 1.06937 @ 95%CL (1 toyMC)
   68% expected band : 1.06937 < r < 1.06937
   95% expected band : 1.06937 < r < 1.06937
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1788205129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.867004 +/- 0.00364543 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.867004 @ 95%CL (1 toyMC)
median expected limit: r < 0.867004 @ 95%CL (1 toyMC)
   68% expected band : 0.867004 < r < 0.867004
   95% expected band : 0.867004 < r < 0.867004
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1482013410
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39087 +/- 0.00489901 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.39087 @ 95%CL (1 toyMC)
median expected limit: r < 1.39087 @ 95%CL (1 toyMC)
   68% expected band : 1.39087 < r < 1.39087
   95% expected band : 1.39087 < r < 1.39087
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -994704302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.996252 +/- 0.00396026 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.996252 @ 95%CL (1 toyMC)
median expected limit: r < 0.996252 @ 95%CL (1 toyMC)
   68% expected band : 0.996252 < r < 0.996252
   95% expected band : 0.996252 < r < 0.996252
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1089802860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.47595 +/- 0.00363927 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.47595 @ 95%CL (1 toyMC)
median expected limit: r < 1.47595 @ 95%CL (1 toyMC)
   68% expected band : 1.47595 < r < 1.47595
   95% expected band : 1.47595 < r < 1.47595
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 771661951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34286 +/- 0.00355955 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.34286 @ 95%CL (1 toyMC)
median expected limit: r < 1.34286 @ 95%CL (1 toyMC)
   68% expected band : 1.34286 < r < 1.34286
   95% expected band : 1.34286 < r < 1.34286
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -77935333
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10559 +/- 0.00329654 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.10559 @ 95%CL (1 toyMC)
median expected limit: r < 1.10559 @ 95%CL (1 toyMC)
   68% expected band : 1.10559 < r < 1.10559
   95% expected band : 1.10559 < r < 1.10559
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 257525987
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39883 +/- 0.00511399 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.39883 @ 95%CL (1 toyMC)
median expected limit: r < 1.39883 @ 95%CL (1 toyMC)
   68% expected band : 1.39883 < r < 1.39883
   95% expected band : 1.39883 < r < 1.39883
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1080086235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8023 +/- 0.00482965 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.8023 @ 95%CL (1 toyMC)
median expected limit: r < 2.8023 @ 95%CL (1 toyMC)
   68% expected band : 2.8023 < r < 2.8023
   95% expected band : 2.8023 < r < 2.8023
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 413018465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.52087 +/- 0.00449115 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.52087 @ 95%CL (1 toyMC)
median expected limit: r < 3.52087 @ 95%CL (1 toyMC)
   68% expected band : 3.52087 < r < 3.52087
   95% expected band : 3.52087 < r < 3.52087
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -175286782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0718 +/- 0.00387472 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.0718 @ 95%CL (1 toyMC)
median expected limit: r < 1.0718 @ 95%CL (1 toyMC)
   68% expected band : 1.0718 < r < 1.0718
   95% expected band : 1.0718 < r < 1.0718
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1815773641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.90348 +/- 0.00440875 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.90348 @ 95%CL (1 toyMC)
median expected limit: r < 1.90348 @ 95%CL (1 toyMC)
   68% expected band : 1.90348 < r < 1.90348
   95% expected band : 1.90348 < r < 1.90348
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 253891809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8836 +/- 0.0048249 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.8836 @ 95%CL (1 toyMC)
median expected limit: r < 1.8836 @ 95%CL (1 toyMC)
   68% expected band : 1.8836 < r < 1.8836
   95% expected band : 1.8836 < r < 1.8836
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -862910421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16843 +/- 0.00341137 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.16843 @ 95%CL (1 toyMC)
median expected limit: r < 1.16843 @ 95%CL (1 toyMC)
   68% expected band : 1.16843 < r < 1.16843
   95% expected band : 1.16843 < r < 1.16843
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -731226569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12257 +/- 0.00437618 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.12257 @ 95%CL (1 toyMC)
median expected limit: r < 2.12257 @ 95%CL (1 toyMC)
   68% expected band : 2.12257 < r < 2.12257
   95% expected band : 2.12257 < r < 2.12257
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 835306885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.88682 +/- 0.00498641 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.88682 @ 95%CL (1 toyMC)
median expected limit: r < 3.88682 @ 95%CL (1 toyMC)
   68% expected band : 3.88682 < r < 3.88682
   95% expected band : 3.88682 < r < 3.88682
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 402606377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91191 +/- 0.00390841 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.91191 @ 95%CL (1 toyMC)
median expected limit: r < 1.91191 @ 95%CL (1 toyMC)
   68% expected band : 1.91191 < r < 1.91191
   95% expected band : 1.91191 < r < 1.91191
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -81928024
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33812 +/- 0.00312804 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.33812 @ 95%CL (1 toyMC)
median expected limit: r < 2.33812 @ 95%CL (1 toyMC)
   68% expected band : 2.33812 < r < 2.33812
   95% expected band : 2.33812 < r < 2.33812
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 843852493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.71064 +/- 0.00504582 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.71064 @ 95%CL (1 toyMC)
median expected limit: r < 2.71064 @ 95%CL (1 toyMC)
   68% expected band : 2.71064 < r < 2.71064
   95% expected band : 2.71064 < r < 2.71064
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 439481742
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84467 +/- 0.00502119 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.84467 @ 95%CL (1 toyMC)
median expected limit: r < 1.84467 @ 95%CL (1 toyMC)
   68% expected band : 1.84467 < r < 1.84467
   95% expected band : 1.84467 < r < 1.84467
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -874297714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60184 +/- 0.00419334 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.60184 @ 95%CL (1 toyMC)
median expected limit: r < 1.60184 @ 95%CL (1 toyMC)
   68% expected band : 1.60184 < r < 1.60184
   95% expected band : 1.60184 < r < 1.60184
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1677197614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24283 +/- 0.00365915 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.24283 @ 95%CL (1 toyMC)
median expected limit: r < 1.24283 @ 95%CL (1 toyMC)
   68% expected band : 1.24283 < r < 1.24283
   95% expected band : 1.24283 < r < 1.24283
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1214315785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61642 +/- 0.00448574 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.61642 @ 95%CL (1 toyMC)
median expected limit: r < 1.61642 @ 95%CL (1 toyMC)
   68% expected band : 1.61642 < r < 1.61642
   95% expected band : 1.61642 < r < 1.61642
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -615333363
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.43268 +/- 0.00585118 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.43268 @ 95%CL (1 toyMC)
median expected limit: r < 3.43268 @ 95%CL (1 toyMC)
   68% expected band : 3.43268 < r < 3.43268
   95% expected band : 3.43268 < r < 3.43268
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 626533815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28123 +/- 0.00448578 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.28123 @ 95%CL (1 toyMC)
median expected limit: r < 1.28123 @ 95%CL (1 toyMC)
   68% expected band : 1.28123 < r < 1.28123
   95% expected band : 1.28123 < r < 1.28123
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -826770594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50987 +/- 0.00495879 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.50987 @ 95%CL (1 toyMC)
median expected limit: r < 2.50987 @ 95%CL (1 toyMC)
   68% expected band : 2.50987 < r < 2.50987
   95% expected band : 2.50987 < r < 2.50987
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine32.MarkovChainMC.mH32.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH32.-102393922.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH32.-1032578479.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH32.-1061643690.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH32.-1089802860.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH32.-1120844326.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH32.-1177655699.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH32.-1243978739.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH32.-1269576260.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH32.-128520495.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH32.-13541823.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH32.-1369906408.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH32.-1372708887.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH32.-1375995912.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH32.-1400623528.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH32.-1402141898.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH32.-1440419260.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH32.-1661522409.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH32.-1695927193.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH32.-1714881230.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH32.-175286782.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH32.-1876415779.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH32.-2063417168.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH32.-2064688141.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH32.-2086704106.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH32.-2115226390.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH32.-241894230.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH32.-263140238.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH32.-294687820.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH32.-297372972.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH32.-30833001.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH32.-342038967.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH32.-417713996.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH32.-53673146.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH32.-594977733.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH32.-61207621.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH32.-615333363.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH32.-62479469.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH32.-633366497.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH32.-700866482.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH32.-731226569.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH32.-77935333.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH32.-81928024.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH32.-826770594.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH32.-862910421.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH32.-874297714.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH32.-994704302.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH32.-999036197.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH32.1010076453.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH32.1020623900.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH32.1041913798.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH32.1080086235.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH32.1214315785.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH32.1246978870.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH32.1292118896.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH32.139345394.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH32.1428060783.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH32.1481651399.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH32.1482013410.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH32.1539057000.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH32.1542385182.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH32.1562259442.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH32.1567761279.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH32.1588540726.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH32.1589726872.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH32.1600393838.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH32.1640337230.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH32.1677197614.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH32.1693756979.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH32.173449428.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH32.1788205129.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH32.1815773641.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH32.1818712535.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH32.1823272706.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH32.1837232660.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH32.1859100720.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH32.1904525132.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH32.1937237386.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH32.1958907680.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH32.2050253560.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH32.2094581319.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH32.253891809.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH32.257525987.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH32.334775321.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH32.348972088.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH32.383617019.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH32.401701981.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH32.402606377.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH32.413018465.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH32.439481742.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH32.466315805.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH32.548349204.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH32.626533815.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH32.754553519.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH32.771661951.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH32.807801037.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH32.835306885.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH32.843852493.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH32.877154903.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH32.987421267.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH32.989821965.root
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -508016261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.86489 +/- 0.00633784 @ 95% CL (100 tries)
Done in 0.48 min (cpu), 0.48 min (real)
mean   expected limit: r < 3.86489 @ 95%CL (1 toyMC)
median expected limit: r < 3.86489 @ 95%CL (1 toyMC)
   68% expected band : 3.86489 < r < 3.86489
   95% expected band : 3.86489 < r < 3.86489
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1385943598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53377 +/- 0.00391511 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.53377 @ 95%CL (1 toyMC)
median expected limit: r < 1.53377 @ 95%CL (1 toyMC)
   68% expected band : 1.53377 < r < 1.53377
   95% expected band : 1.53377 < r < 1.53377
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 17916498
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76883 +/- 0.00548914 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.76883 @ 95%CL (1 toyMC)
median expected limit: r < 2.76883 @ 95%CL (1 toyMC)
   68% expected band : 2.76883 < r < 2.76883
   95% expected band : 2.76883 < r < 2.76883
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1162524430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.70057 +/- 0.00507741 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.70057 @ 95%CL (1 toyMC)
median expected limit: r < 2.70057 @ 95%CL (1 toyMC)
   68% expected band : 2.70057 < r < 2.70057
   95% expected band : 2.70057 < r < 2.70057
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1345722263
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.40575 +/- 0.00549269 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 3.40575 @ 95%CL (1 toyMC)
median expected limit: r < 3.40575 @ 95%CL (1 toyMC)
   68% expected band : 3.40575 < r < 3.40575
   95% expected band : 3.40575 < r < 3.40575
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1421641051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.61659 +/- 0.00616275 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 3.61659 @ 95%CL (1 toyMC)
median expected limit: r < 3.61659 @ 95%CL (1 toyMC)
   68% expected band : 3.61659 < r < 3.61659
   95% expected band : 3.61659 < r < 3.61659
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -382021514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.89988 +/- 0.00470579 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.89988 @ 95%CL (1 toyMC)
median expected limit: r < 1.89988 @ 95%CL (1 toyMC)
   68% expected band : 1.89988 < r < 1.89988
   95% expected band : 1.89988 < r < 1.89988
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 370597116
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12826 +/- 0.00403707 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.12826 @ 95%CL (1 toyMC)
median expected limit: r < 3.12826 @ 95%CL (1 toyMC)
   68% expected band : 3.12826 < r < 3.12826
   95% expected band : 3.12826 < r < 3.12826
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -193061457
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87338 +/- 0.00506243 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.87338 @ 95%CL (1 toyMC)
median expected limit: r < 2.87338 @ 95%CL (1 toyMC)
   68% expected band : 2.87338 < r < 2.87338
   95% expected band : 2.87338 < r < 2.87338
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1597418540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.97571 +/- 0.00428567 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.97571 @ 95%CL (1 toyMC)
median expected limit: r < 1.97571 @ 95%CL (1 toyMC)
   68% expected band : 1.97571 < r < 1.97571
   95% expected band : 1.97571 < r < 1.97571
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2038169543
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87676 +/- 0.00424278 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.87676 @ 95%CL (1 toyMC)
median expected limit: r < 2.87676 @ 95%CL (1 toyMC)
   68% expected band : 2.87676 < r < 2.87676
   95% expected band : 2.87676 < r < 2.87676
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 696094154
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.95956 +/- 0.00490021 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.95956 @ 95%CL (1 toyMC)
median expected limit: r < 2.95956 @ 95%CL (1 toyMC)
   68% expected band : 2.95956 < r < 2.95956
   95% expected band : 2.95956 < r < 2.95956
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1806663624
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33867 +/- 0.00508151 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 3.33867 @ 95%CL (1 toyMC)
median expected limit: r < 3.33867 @ 95%CL (1 toyMC)
   68% expected band : 3.33867 < r < 3.33867
   95% expected band : 3.33867 < r < 3.33867
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 875454311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54767 +/- 0.00456061 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.54767 @ 95%CL (1 toyMC)
median expected limit: r < 1.54767 @ 95%CL (1 toyMC)
   68% expected band : 1.54767 < r < 1.54767
   95% expected band : 1.54767 < r < 1.54767
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 430282765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.70313 +/- 0.00521924 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 2.70313 @ 95%CL (1 toyMC)
median expected limit: r < 2.70313 @ 95%CL (1 toyMC)
   68% expected band : 2.70313 < r < 2.70313
   95% expected band : 2.70313 < r < 2.70313
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1138064033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.56984 +/- 0.00475011 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.56984 @ 95%CL (1 toyMC)
median expected limit: r < 2.56984 @ 95%CL (1 toyMC)
   68% expected band : 2.56984 < r < 2.56984
   95% expected band : 2.56984 < r < 2.56984
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -433323128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.30929 +/- 0.00433471 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.30929 @ 95%CL (1 toyMC)
median expected limit: r < 2.30929 @ 95%CL (1 toyMC)
   68% expected band : 2.30929 < r < 2.30929
   95% expected band : 2.30929 < r < 2.30929
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1326026982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2891 +/- 0.00582583 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.2891 @ 95%CL (1 toyMC)
median expected limit: r < 3.2891 @ 95%CL (1 toyMC)
   68% expected band : 3.2891 < r < 3.2891
   95% expected band : 3.2891 < r < 3.2891
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -764204773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98031 +/- 0.00680099 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.98031 @ 95%CL (1 toyMC)
median expected limit: r < 2.98031 @ 95%CL (1 toyMC)
   68% expected band : 2.98031 < r < 2.98031
   95% expected band : 2.98031 < r < 2.98031
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1140268916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93005 +/- 0.00579094 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.93005 @ 95%CL (1 toyMC)
median expected limit: r < 2.93005 @ 95%CL (1 toyMC)
   68% expected band : 2.93005 < r < 2.93005
   95% expected band : 2.93005 < r < 2.93005
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1333340833
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.48824 +/- 0.00464622 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.48824 @ 95%CL (1 toyMC)
median expected limit: r < 3.48824 @ 95%CL (1 toyMC)
   68% expected band : 3.48824 < r < 3.48824
   95% expected band : 3.48824 < r < 3.48824
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1976001042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17541 +/- 0.00450691 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.17541 @ 95%CL (1 toyMC)
median expected limit: r < 2.17541 @ 95%CL (1 toyMC)
   68% expected band : 2.17541 < r < 2.17541
   95% expected band : 2.17541 < r < 2.17541
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1259422927
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.83534 +/- 0.00479608 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 2.83534 @ 95%CL (1 toyMC)
median expected limit: r < 2.83534 @ 95%CL (1 toyMC)
   68% expected band : 2.83534 < r < 2.83534
   95% expected band : 2.83534 < r < 2.83534
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1282188294
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63894 +/- 0.00395648 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.63894 @ 95%CL (1 toyMC)
median expected limit: r < 1.63894 @ 95%CL (1 toyMC)
   68% expected band : 1.63894 < r < 1.63894
   95% expected band : 1.63894 < r < 1.63894
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1703829138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92 +/- 0.00473711 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.92 @ 95%CL (1 toyMC)
median expected limit: r < 1.92 @ 95%CL (1 toyMC)
   68% expected band : 1.92 < r < 1.92
   95% expected band : 1.92 < r < 1.92
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1579373741
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.18153 +/- 0.00511606 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.18153 @ 95%CL (1 toyMC)
median expected limit: r < 2.18153 @ 95%CL (1 toyMC)
   68% expected band : 2.18153 < r < 2.18153
   95% expected band : 2.18153 < r < 2.18153
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -918337300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.19062 +/- 0.00637717 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.19062 @ 95%CL (1 toyMC)
median expected limit: r < 3.19062 @ 95%CL (1 toyMC)
   68% expected band : 3.19062 < r < 3.19062
   95% expected band : 3.19062 < r < 3.19062
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 111937407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07675 +/- 0.0046545 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.07675 @ 95%CL (1 toyMC)
median expected limit: r < 2.07675 @ 95%CL (1 toyMC)
   68% expected band : 2.07675 < r < 2.07675
   95% expected band : 2.07675 < r < 2.07675
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1914462004
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.78053 +/- 0.00576788 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.78053 @ 95%CL (1 toyMC)
median expected limit: r < 3.78053 @ 95%CL (1 toyMC)
   68% expected band : 3.78053 < r < 3.78053
   95% expected band : 3.78053 < r < 3.78053
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2024609490
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4679 +/- 0.00412397 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.4679 @ 95%CL (1 toyMC)
median expected limit: r < 1.4679 @ 95%CL (1 toyMC)
   68% expected band : 1.4679 < r < 1.4679
   95% expected band : 1.4679 < r < 1.4679
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1109080310
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66991 +/- 0.00504271 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.66991 @ 95%CL (1 toyMC)
median expected limit: r < 1.66991 @ 95%CL (1 toyMC)
   68% expected band : 1.66991 < r < 1.66991
   95% expected band : 1.66991 < r < 1.66991
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -509238515
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.55979 +/- 0.00523633 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.55979 @ 95%CL (1 toyMC)
median expected limit: r < 3.55979 @ 95%CL (1 toyMC)
   68% expected band : 3.55979 < r < 3.55979
   95% expected band : 3.55979 < r < 3.55979
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -585966409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.79649 +/- 0.00504894 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.79649 @ 95%CL (1 toyMC)
median expected limit: r < 1.79649 @ 95%CL (1 toyMC)
   68% expected band : 1.79649 < r < 1.79649
   95% expected band : 1.79649 < r < 1.79649
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 205957750
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12156 +/- 0.00514738 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.12156 @ 95%CL (1 toyMC)
median expected limit: r < 2.12156 @ 95%CL (1 toyMC)
   68% expected band : 2.12156 < r < 2.12156
   95% expected band : 2.12156 < r < 2.12156
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1831263256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7236 +/- 0.00429044 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.7236 @ 95%CL (1 toyMC)
median expected limit: r < 2.7236 @ 95%CL (1 toyMC)
   68% expected band : 2.7236 < r < 2.7236
   95% expected band : 2.7236 < r < 2.7236
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2065915070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22172 +/- 0.00441391 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.22172 @ 95%CL (1 toyMC)
median expected limit: r < 1.22172 @ 95%CL (1 toyMC)
   68% expected band : 1.22172 < r < 1.22172
   95% expected band : 1.22172 < r < 1.22172
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1035098299
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89278 +/- 0.00627693 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 3.89278 @ 95%CL (1 toyMC)
median expected limit: r < 3.89278 @ 95%CL (1 toyMC)
   68% expected band : 3.89278 < r < 3.89278
   95% expected band : 3.89278 < r < 3.89278
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 669246657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.24989 +/- 0.00392899 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.46 min (real)
mean   expected limit: r < 2.24989 @ 95%CL (1 toyMC)
median expected limit: r < 2.24989 @ 95%CL (1 toyMC)
   68% expected band : 2.24989 < r < 2.24989
   95% expected band : 2.24989 < r < 2.24989
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 782905303
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.11794 +/- 0.00485751 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.11794 @ 95%CL (1 toyMC)
median expected limit: r < 2.11794 @ 95%CL (1 toyMC)
   68% expected band : 2.11794 < r < 2.11794
   95% expected band : 2.11794 < r < 2.11794
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 729895641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.96087 +/- 0.0056334 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 3.96087 @ 95%CL (1 toyMC)
median expected limit: r < 3.96087 @ 95%CL (1 toyMC)
   68% expected band : 3.96087 < r < 3.96087
   95% expected band : 3.96087 < r < 3.96087
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1487253208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.30978 +/- 0.00447783 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.30978 @ 95%CL (1 toyMC)
median expected limit: r < 2.30978 @ 95%CL (1 toyMC)
   68% expected band : 2.30978 < r < 2.30978
   95% expected band : 2.30978 < r < 2.30978
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -817561317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.18457 +/- 0.00477602 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.18457 @ 95%CL (1 toyMC)
median expected limit: r < 2.18457 @ 95%CL (1 toyMC)
   68% expected band : 2.18457 < r < 2.18457
   95% expected band : 2.18457 < r < 2.18457
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 84579792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07607 +/- 0.00503594 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.07607 @ 95%CL (1 toyMC)
median expected limit: r < 3.07607 @ 95%CL (1 toyMC)
   68% expected band : 3.07607 < r < 3.07607
   95% expected band : 3.07607 < r < 3.07607
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1626402481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.56719 +/- 0.00544791 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.56719 @ 95%CL (1 toyMC)
median expected limit: r < 2.56719 @ 95%CL (1 toyMC)
   68% expected band : 2.56719 < r < 2.56719
   95% expected band : 2.56719 < r < 2.56719
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2119986940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42581 +/- 0.0038895 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 2.42581 @ 95%CL (1 toyMC)
median expected limit: r < 2.42581 @ 95%CL (1 toyMC)
   68% expected band : 2.42581 < r < 2.42581
   95% expected band : 2.42581 < r < 2.42581
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1394300025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.61688 +/- 0.00654792 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.48 min (real)
mean   expected limit: r < 4.61688 @ 95%CL (1 toyMC)
median expected limit: r < 4.61688 @ 95%CL (1 toyMC)
   68% expected band : 4.61688 < r < 4.61688
   95% expected band : 4.61688 < r < 4.61688
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1115541659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.57304 +/- 0.00718482 @ 95% CL (100 tries)
Done in 0.48 min (cpu), 0.48 min (real)
mean   expected limit: r < 5.57304 @ 95%CL (1 toyMC)
median expected limit: r < 5.57304 @ 95%CL (1 toyMC)
   68% expected band : 5.57304 < r < 5.57304
   95% expected band : 5.57304 < r < 5.57304
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 328250725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.82734 +/- 0.00595109 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.82734 @ 95%CL (1 toyMC)
median expected limit: r < 2.82734 @ 95%CL (1 toyMC)
   68% expected band : 2.82734 < r < 2.82734
   95% expected band : 2.82734 < r < 2.82734
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 436383537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.6392 +/- 0.0059911 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.6392 @ 95%CL (1 toyMC)
median expected limit: r < 2.6392 @ 95%CL (1 toyMC)
   68% expected band : 2.6392 < r < 2.6392
   95% expected band : 2.6392 < r < 2.6392
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1769673138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.25639 +/- 0.00587261 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.25639 @ 95%CL (1 toyMC)
median expected limit: r < 2.25639 @ 95%CL (1 toyMC)
   68% expected band : 2.25639 < r < 2.25639
   95% expected band : 2.25639 < r < 2.25639
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1297629398
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47031 +/- 0.00507294 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.47031 @ 95%CL (1 toyMC)
median expected limit: r < 2.47031 @ 95%CL (1 toyMC)
   68% expected band : 2.47031 < r < 2.47031
   95% expected band : 2.47031 < r < 2.47031
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -388646788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80834 +/- 0.00470389 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.80834 @ 95%CL (1 toyMC)
median expected limit: r < 1.80834 @ 95%CL (1 toyMC)
   68% expected band : 1.80834 < r < 1.80834
   95% expected band : 1.80834 < r < 1.80834
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1219277871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.216 +/- 0.00446958 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 4.216 @ 95%CL (1 toyMC)
median expected limit: r < 4.216 @ 95%CL (1 toyMC)
   68% expected band : 4.216 < r < 4.216
   95% expected band : 4.216 < r < 4.216
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 259808241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59909 +/- 0.00542479 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 2.59909 @ 95%CL (1 toyMC)
median expected limit: r < 2.59909 @ 95%CL (1 toyMC)
   68% expected band : 2.59909 < r < 2.59909
   95% expected band : 2.59909 < r < 2.59909
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -339951595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46951 +/- 0.00587673 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.46951 @ 95%CL (1 toyMC)
median expected limit: r < 3.46951 @ 95%CL (1 toyMC)
   68% expected band : 3.46951 < r < 3.46951
   95% expected band : 3.46951 < r < 3.46951
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 93413482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.7492 +/- 0.0052547 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 4.7492 @ 95%CL (1 toyMC)
median expected limit: r < 4.7492 @ 95%CL (1 toyMC)
   68% expected band : 4.7492 < r < 4.7492
   95% expected band : 4.7492 < r < 4.7492
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1388972558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09515 +/- 0.0044498 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.09515 @ 95%CL (1 toyMC)
median expected limit: r < 2.09515 @ 95%CL (1 toyMC)
   68% expected band : 2.09515 < r < 2.09515
   95% expected band : 2.09515 < r < 2.09515
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -405184617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50419 +/- 0.00538094 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.50419 @ 95%CL (1 toyMC)
median expected limit: r < 2.50419 @ 95%CL (1 toyMC)
   68% expected band : 2.50419 < r < 2.50419
   95% expected band : 2.50419 < r < 2.50419
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1571686490
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49994 +/- 0.00476803 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.49994 @ 95%CL (1 toyMC)
median expected limit: r < 1.49994 @ 95%CL (1 toyMC)
   68% expected band : 1.49994 < r < 1.49994
   95% expected band : 1.49994 < r < 1.49994
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -689119428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64069 +/- 0.00505484 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.64069 @ 95%CL (1 toyMC)
median expected limit: r < 1.64069 @ 95%CL (1 toyMC)
   68% expected band : 1.64069 < r < 1.64069
   95% expected band : 1.64069 < r < 1.64069
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1193196753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.76296 +/- 0.00553219 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 3.76296 @ 95%CL (1 toyMC)
median expected limit: r < 3.76296 @ 95%CL (1 toyMC)
   68% expected band : 3.76296 < r < 3.76296
   95% expected band : 3.76296 < r < 3.76296
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1470597713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.94796 +/- 0.00513115 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.94796 @ 95%CL (1 toyMC)
median expected limit: r < 1.94796 @ 95%CL (1 toyMC)
   68% expected band : 1.94796 < r < 1.94796
   95% expected band : 1.94796 < r < 1.94796
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1059459046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.51332 +/- 0.00762096 @ 95% CL (100 tries)
Done in 0.48 min (cpu), 0.48 min (real)
mean   expected limit: r < 5.51332 @ 95%CL (1 toyMC)
median expected limit: r < 5.51332 @ 95%CL (1 toyMC)
   68% expected band : 5.51332 < r < 5.51332
   95% expected band : 5.51332 < r < 5.51332
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -193262747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.21684 +/- 0.00688217 @ 95% CL (100 tries)
Done in 0.48 min (cpu), 0.48 min (real)
mean   expected limit: r < 4.21684 @ 95%CL (1 toyMC)
median expected limit: r < 4.21684 @ 95%CL (1 toyMC)
   68% expected band : 4.21684 < r < 4.21684
   95% expected band : 4.21684 < r < 4.21684
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2021341834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.74512 +/- 0.00394733 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.74512 @ 95%CL (1 toyMC)
median expected limit: r < 2.74512 @ 95%CL (1 toyMC)
   68% expected band : 2.74512 < r < 2.74512
   95% expected band : 2.74512 < r < 2.74512
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1933138965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79294 +/- 0.00574793 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.79294 @ 95%CL (1 toyMC)
median expected limit: r < 2.79294 @ 95%CL (1 toyMC)
   68% expected band : 2.79294 < r < 2.79294
   95% expected band : 2.79294 < r < 2.79294
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 78714168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.18308 +/- 0.00597593 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.18308 @ 95%CL (1 toyMC)
median expected limit: r < 2.18308 @ 95%CL (1 toyMC)
   68% expected band : 2.18308 < r < 2.18308
   95% expected band : 2.18308 < r < 2.18308
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 273933772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12233 +/- 0.00580207 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.12233 @ 95%CL (1 toyMC)
median expected limit: r < 2.12233 @ 95%CL (1 toyMC)
   68% expected band : 2.12233 < r < 2.12233
   95% expected band : 2.12233 < r < 2.12233
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1722620320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.31727 +/- 0.00559852 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.31727 @ 95%CL (1 toyMC)
median expected limit: r < 2.31727 @ 95%CL (1 toyMC)
   68% expected band : 2.31727 < r < 2.31727
   95% expected band : 2.31727 < r < 2.31727
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 646797301
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99553 +/- 0.00620186 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.99553 @ 95%CL (1 toyMC)
median expected limit: r < 1.99553 @ 95%CL (1 toyMC)
   68% expected band : 1.99553 < r < 1.99553
   95% expected band : 1.99553 < r < 1.99553
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -550151293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.10223 +/- 0.00641499 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.48 min (real)
mean   expected limit: r < 4.10223 @ 95%CL (1 toyMC)
median expected limit: r < 4.10223 @ 95%CL (1 toyMC)
   68% expected band : 4.10223 < r < 4.10223
   95% expected band : 4.10223 < r < 4.10223
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 913540129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29435 +/- 0.00532434 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.29435 @ 95%CL (1 toyMC)
median expected limit: r < 2.29435 @ 95%CL (1 toyMC)
   68% expected band : 2.29435 < r < 2.29435
   95% expected band : 2.29435 < r < 2.29435
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1270979074
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.79882 +/- 0.00506818 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.79882 @ 95%CL (1 toyMC)
median expected limit: r < 1.79882 @ 95%CL (1 toyMC)
   68% expected band : 1.79882 < r < 1.79882
   95% expected band : 1.79882 < r < 1.79882
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1023391484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.11033 +/- 0.00394169 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.11033 @ 95%CL (1 toyMC)
median expected limit: r < 2.11033 @ 95%CL (1 toyMC)
   68% expected band : 2.11033 < r < 2.11033
   95% expected band : 2.11033 < r < 2.11033
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1393187733
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.22056 +/- 0.00424727 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.22056 @ 95%CL (1 toyMC)
median expected limit: r < 2.22056 @ 95%CL (1 toyMC)
   68% expected band : 2.22056 < r < 2.22056
   95% expected band : 2.22056 < r < 2.22056
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 522114639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.01579 +/- 0.00421311 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.01579 @ 95%CL (1 toyMC)
median expected limit: r < 2.01579 @ 95%CL (1 toyMC)
   68% expected band : 2.01579 < r < 2.01579
   95% expected band : 2.01579 < r < 2.01579
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 896826940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.74441 +/- 0.00603105 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.48 min (real)
mean   expected limit: r < 4.74441 @ 95%CL (1 toyMC)
median expected limit: r < 4.74441 @ 95%CL (1 toyMC)
   68% expected band : 4.74441 < r < 4.74441
   95% expected band : 4.74441 < r < 4.74441
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 642226103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.74625 +/- 0.0048007 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.74625 @ 95%CL (1 toyMC)
median expected limit: r < 2.74625 @ 95%CL (1 toyMC)
   68% expected band : 2.74625 < r < 2.74625
   95% expected band : 2.74625 < r < 2.74625
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1006290948
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99866 +/- 0.00703134 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.99866 @ 95%CL (1 toyMC)
median expected limit: r < 2.99866 @ 95%CL (1 toyMC)
   68% expected band : 2.99866 < r < 2.99866
   95% expected band : 2.99866 < r < 2.99866
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -988744564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14032 +/- 0.00456902 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.14032 @ 95%CL (1 toyMC)
median expected limit: r < 2.14032 @ 95%CL (1 toyMC)
   68% expected band : 2.14032 < r < 2.14032
   95% expected band : 2.14032 < r < 2.14032
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1420638972
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33101 +/- 0.00497706 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.33101 @ 95%CL (1 toyMC)
median expected limit: r < 2.33101 @ 95%CL (1 toyMC)
   68% expected band : 2.33101 < r < 2.33101
   95% expected band : 2.33101 < r < 2.33101
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -251410922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10463 +/- 0.00606989 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.10463 @ 95%CL (1 toyMC)
median expected limit: r < 3.10463 @ 95%CL (1 toyMC)
   68% expected band : 3.10463 < r < 3.10463
   95% expected band : 3.10463 < r < 3.10463
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 838226649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10967 +/- 0.00458415 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.10967 @ 95%CL (1 toyMC)
median expected limit: r < 3.10967 @ 95%CL (1 toyMC)
   68% expected band : 3.10967 < r < 3.10967
   95% expected band : 3.10967 < r < 3.10967
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 914820334
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46195 +/- 0.00373104 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.46195 @ 95%CL (1 toyMC)
median expected limit: r < 1.46195 @ 95%CL (1 toyMC)
   68% expected band : 1.46195 < r < 1.46195
   95% expected band : 1.46195 < r < 1.46195
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1279416965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.30897 +/- 0.00407139 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.30897 @ 95%CL (1 toyMC)
median expected limit: r < 2.30897 @ 95%CL (1 toyMC)
   68% expected band : 2.30897 < r < 2.30897
   95% expected band : 2.30897 < r < 2.30897
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1582689071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.86996 +/- 0.00635914 @ 95% CL (100 tries)
Done in 0.48 min (cpu), 0.48 min (real)
mean   expected limit: r < 4.86996 @ 95%CL (1 toyMC)
median expected limit: r < 4.86996 @ 95%CL (1 toyMC)
   68% expected band : 4.86996 < r < 4.86996
   95% expected band : 4.86996 < r < 4.86996
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1652184960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93786 +/- 0.00577024 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 3.93786 @ 95%CL (1 toyMC)
median expected limit: r < 3.93786 @ 95%CL (1 toyMC)
   68% expected band : 3.93786 < r < 3.93786
   95% expected band : 3.93786 < r < 3.93786
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1351696651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.88693 +/- 0.00706661 @ 95% CL (100 tries)
Done in 0.49 min (cpu), 0.49 min (real)
mean   expected limit: r < 4.88693 @ 95%CL (1 toyMC)
median expected limit: r < 4.88693 @ 95%CL (1 toyMC)
   68% expected band : 4.88693 < r < 4.88693
   95% expected band : 4.88693 < r < 4.88693
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -709735197
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.52227 +/- 0.00634811 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.52227 @ 95%CL (1 toyMC)
median expected limit: r < 3.52227 @ 95%CL (1 toyMC)
   68% expected band : 3.52227 < r < 3.52227
   95% expected band : 3.52227 < r < 3.52227
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1991097898
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5476 +/- 0.00428934 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 1.5476 @ 95%CL (1 toyMC)
median expected limit: r < 1.5476 @ 95%CL (1 toyMC)
   68% expected band : 1.5476 < r < 1.5476
   95% expected band : 1.5476 < r < 1.5476
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -7687144
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1266 +/- 0.0061132 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.1266 @ 95%CL (1 toyMC)
median expected limit: r < 3.1266 @ 95%CL (1 toyMC)
   68% expected band : 3.1266 < r < 3.1266
   95% expected band : 3.1266 < r < 3.1266
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1057402957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92994 +/- 0.00467352 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 2.92994 @ 95%CL (1 toyMC)
median expected limit: r < 2.92994 @ 95%CL (1 toyMC)
   68% expected band : 2.92994 < r < 2.92994
   95% expected band : 2.92994 < r < 2.92994
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2118908106
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.44775 +/- 0.00427666 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.44775 @ 95%CL (1 toyMC)
median expected limit: r < 2.44775 @ 95%CL (1 toyMC)
   68% expected band : 2.44775 < r < 2.44775
   95% expected band : 2.44775 < r < 2.44775
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -615039410
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22672 +/- 0.00475682 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.22672 @ 95%CL (1 toyMC)
median expected limit: r < 3.22672 @ 95%CL (1 toyMC)
   68% expected band : 3.22672 < r < 3.22672
   95% expected band : 3.22672 < r < 3.22672
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 66150199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50184 +/- 0.0044268 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.50184 @ 95%CL (1 toyMC)
median expected limit: r < 1.50184 @ 95%CL (1 toyMC)
   68% expected band : 1.50184 < r < 1.50184
   95% expected band : 1.50184 < r < 1.50184
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1672898229
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.85298 +/- 0.00611453 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.85298 @ 95%CL (1 toyMC)
median expected limit: r < 3.85298 @ 95%CL (1 toyMC)
   68% expected band : 3.85298 < r < 3.85298
   95% expected band : 3.85298 < r < 3.85298
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2102406605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.63409 +/- 0.00646527 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.63409 @ 95%CL (1 toyMC)
median expected limit: r < 3.63409 @ 95%CL (1 toyMC)
   68% expected band : 3.63409 < r < 3.63409
   95% expected band : 3.63409 < r < 3.63409
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 278167099
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8963 +/- 0.00480491 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.8963 @ 95%CL (1 toyMC)
median expected limit: r < 1.8963 @ 95%CL (1 toyMC)
   68% expected band : 1.8963 < r < 1.8963
   95% expected band : 1.8963 < r < 1.8963
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1979131928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37261 +/- 0.00417103 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.37261 @ 95%CL (1 toyMC)
median expected limit: r < 1.37261 @ 95%CL (1 toyMC)
   68% expected band : 1.37261 < r < 1.37261
   95% expected band : 1.37261 < r < 1.37261
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 38632295
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59035 +/- 0.00463206 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.59035 @ 95%CL (1 toyMC)
median expected limit: r < 2.59035 @ 95%CL (1 toyMC)
   68% expected band : 2.59035 < r < 2.59035
   95% expected band : 2.59035 < r < 2.59035
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine40.MarkovChainMC.mH40.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH40.-1006290948.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH40.-1035098299.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH40.-1057402957.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH40.-1259422927.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH40.-1270979074.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH40.-1279416965.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH40.-1333340833.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH40.-1351696651.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH40.-1385943598.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH40.-1393187733.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH40.-1394300025.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH40.-1420638972.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH40.-1421641051.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH40.-1487253208.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH40.-1582689071.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH40.-1626402481.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH40.-1652184960.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH40.-1672898229.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH40.-1703829138.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH40.-1722620320.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH40.-1769673138.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH40.-1806663624.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH40.-1914462004.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH40.-193061457.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH40.-193262747.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH40.-1933138965.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH40.-1976001042.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH40.-1979131928.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH40.-1991097898.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH40.-2021341834.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH40.-2024609490.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH40.-2038169543.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH40.-2102406605.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH40.-2118908106.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH40.-2119986940.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH40.-251410922.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH40.-339951595.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH40.-382021514.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH40.-388646788.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH40.-405184617.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH40.-433323128.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH40.-508016261.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH40.-509238515.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH40.-550151293.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH40.-585966409.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH40.-615039410.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH40.-689119428.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH40.-709735197.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH40.-764204773.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH40.-7687144.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH40.-817561317.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH40.-918337300.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH40.-988744564.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH40.1023391484.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH40.1059459046.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH40.1109080310.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH40.1115541659.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH40.111937407.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH40.1138064033.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH40.1140268916.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH40.1162524430.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH40.1193196753.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH40.1219277871.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH40.1282188294.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH40.1297629398.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH40.1326026982.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH40.1345722263.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH40.1388972558.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH40.1470597713.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH40.1571686490.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH40.1579373741.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH40.1597418540.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH40.17916498.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH40.1831263256.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH40.205957750.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH40.2065915070.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH40.259808241.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH40.273933772.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH40.278167099.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH40.328250725.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH40.370597116.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH40.38632295.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH40.430282765.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH40.436383537.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH40.522114639.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH40.642226103.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH40.646797301.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH40.66150199.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH40.669246657.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH40.696094154.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH40.729895641.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH40.782905303.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH40.78714168.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH40.838226649.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH40.84579792.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH40.875454311.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH40.896826940.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH40.913540129.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH40.914820334.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH40.93413482.root
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/toys
