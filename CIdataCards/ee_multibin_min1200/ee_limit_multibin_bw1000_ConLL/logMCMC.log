 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1529305040
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309348 +/- 0.00219442 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.309348 @ 95%CL (1 toyMC)
median expected limit: r < 0.309348 @ 95%CL (1 toyMC)
   68% expected band : 0.309348 < r < 0.309348
   95% expected band : 0.309348 < r < 0.309348
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 285894683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.483496 +/- 0.002486 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.483496 @ 95%CL (1 toyMC)
median expected limit: r < 0.483496 @ 95%CL (1 toyMC)
   68% expected band : 0.483496 < r < 0.483496
   95% expected band : 0.483496 < r < 0.483496
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1056849344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.308321 +/- 0.00220237 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.308321 @ 95%CL (1 toyMC)
median expected limit: r < 0.308321 @ 95%CL (1 toyMC)
   68% expected band : 0.308321 < r < 0.308321
   95% expected band : 0.308321 < r < 0.308321
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 429577373
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206223 +/- 0.00322355 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.206223 @ 95%CL (1 toyMC)
median expected limit: r < 0.206223 @ 95%CL (1 toyMC)
   68% expected band : 0.206223 < r < 0.206223
   95% expected band : 0.206223 < r < 0.206223
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -780402322
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.17349 +/- 0.00302366 @ 95% CL (93 tries)
Done in 0.49 min (cpu), 0.49 min (real)
mean   expected limit: r < 0.17349 @ 95%CL (1 toyMC)
median expected limit: r < 0.17349 @ 95%CL (1 toyMC)
   68% expected band : 0.17349 < r < 0.17349
   95% expected band : 0.17349 < r < 0.17349
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1761058774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.433981 +/- 0.00229636 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.433981 @ 95%CL (1 toyMC)
median expected limit: r < 0.433981 @ 95%CL (1 toyMC)
   68% expected band : 0.433981 < r < 0.433981
   95% expected band : 0.433981 < r < 0.433981
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 484817911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.15338 +/- 0.0074881 @ 95% CL (79 tries)
Done in 0.90 min (cpu), 0.90 min (real)
mean   expected limit: r < 0.15338 @ 95%CL (1 toyMC)
median expected limit: r < 0.15338 @ 95%CL (1 toyMC)
   68% expected band : 0.15338 < r < 0.15338
   95% expected band : 0.15338 < r < 0.15338
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -143146160
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.289763 +/- 0.00209035 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.289763 @ 95%CL (1 toyMC)
median expected limit: r < 0.289763 @ 95%CL (1 toyMC)
   68% expected band : 0.289763 < r < 0.289763
   95% expected band : 0.289763 < r < 0.289763
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -480307165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200713 +/- 0.00316271 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.200713 @ 95%CL (1 toyMC)
median expected limit: r < 0.200713 @ 95%CL (1 toyMC)
   68% expected band : 0.200713 < r < 0.200713
   95% expected band : 0.200713 < r < 0.200713
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1951732338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.347417 +/- 0.00220625 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.347417 @ 95%CL (1 toyMC)
median expected limit: r < 0.347417 @ 95%CL (1 toyMC)
   68% expected band : 0.347417 < r < 0.347417
   95% expected band : 0.347417 < r < 0.347417
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2044936315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.178257 +/- 0.00382501 @ 95% CL (94 tries)
Done in 0.49 min (cpu), 0.50 min (real)
mean   expected limit: r < 0.178257 @ 95%CL (1 toyMC)
median expected limit: r < 0.178257 @ 95%CL (1 toyMC)
   68% expected band : 0.178257 < r < 0.178257
   95% expected band : 0.178257 < r < 0.178257
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -652179020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28555 +/- 0.00309916 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.28555 @ 95%CL (1 toyMC)
median expected limit: r < 0.28555 @ 95%CL (1 toyMC)
   68% expected band : 0.28555 < r < 0.28555
   95% expected band : 0.28555 < r < 0.28555
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1271866566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.750197 +/- 0.00255127 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.750197 @ 95%CL (1 toyMC)
median expected limit: r < 0.750197 @ 95%CL (1 toyMC)
   68% expected band : 0.750197 < r < 0.750197
   95% expected band : 0.750197 < r < 0.750197
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -957388872
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190114 +/- 0.00314864 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.190114 @ 95%CL (1 toyMC)
median expected limit: r < 0.190114 @ 95%CL (1 toyMC)
   68% expected band : 0.190114 < r < 0.190114
   95% expected band : 0.190114 < r < 0.190114
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2071272617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208753 +/- 0.00271903 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.208753 @ 95%CL (1 toyMC)
median expected limit: r < 0.208753 @ 95%CL (1 toyMC)
   68% expected band : 0.208753 < r < 0.208753
   95% expected band : 0.208753 < r < 0.208753
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 933139858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.401991 +/- 0.00240358 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.401991 @ 95%CL (1 toyMC)
median expected limit: r < 0.401991 @ 95%CL (1 toyMC)
   68% expected band : 0.401991 < r < 0.401991
   95% expected band : 0.401991 < r < 0.401991
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -894482598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.168177 +/- 0.00371541 @ 95% CL (92 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 0.168177 @ 95%CL (1 toyMC)
median expected limit: r < 0.168177 @ 95%CL (1 toyMC)
   68% expected band : 0.168177 < r < 0.168177
   95% expected band : 0.168177 < r < 0.168177
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 729774260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.371783 +/- 0.00246723 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.371783 @ 95%CL (1 toyMC)
median expected limit: r < 0.371783 @ 95%CL (1 toyMC)
   68% expected band : 0.371783 < r < 0.371783
   95% expected band : 0.371783 < r < 0.371783
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1887902904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.153764 +/- 0.00741654 @ 95% CL (57 tries)
Done in 2.73 min (cpu), 2.75 min (real)
mean   expected limit: r < 0.153764 @ 95%CL (1 toyMC)
median expected limit: r < 0.153764 @ 95%CL (1 toyMC)
   68% expected band : 0.153764 < r < 0.153764
   95% expected band : 0.153764 < r < 0.153764
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 552535949
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.546163 +/- 0.00201737 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.546163 @ 95%CL (1 toyMC)
median expected limit: r < 0.546163 @ 95%CL (1 toyMC)
   68% expected band : 0.546163 < r < 0.546163
   95% expected band : 0.546163 < r < 0.546163
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 184137707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.289747 +/- 0.00267038 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.289747 @ 95%CL (1 toyMC)
median expected limit: r < 0.289747 @ 95%CL (1 toyMC)
   68% expected band : 0.289747 < r < 0.289747
   95% expected band : 0.289747 < r < 0.289747
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1841314231
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.65116 +/- 2.15831 @ 95% CL (18 tries)
Done in 7.21 min (cpu), 7.24 min (real)
mean   expected limit: r < 5.65116 @ 95%CL (1 toyMC)
median expected limit: r < 5.65116 @ 95%CL (1 toyMC)
   68% expected band : 5.65116 < r < 5.65116
   95% expected band : 5.65116 < r < 5.65116
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 533906489
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.482008 +/- 0.00232563 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.482008 @ 95%CL (1 toyMC)
median expected limit: r < 0.482008 @ 95%CL (1 toyMC)
   68% expected band : 0.482008 < r < 0.482008
   95% expected band : 0.482008 < r < 0.482008
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 292857004
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.219816 +/- 0.00226667 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.219816 @ 95%CL (1 toyMC)
median expected limit: r < 0.219816 @ 95%CL (1 toyMC)
   68% expected band : 0.219816 < r < 0.219816
   95% expected band : 0.219816 < r < 0.219816
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1678069492
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.319936 +/- 0.00206929 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.319936 @ 95%CL (1 toyMC)
median expected limit: r < 0.319936 @ 95%CL (1 toyMC)
   68% expected band : 0.319936 < r < 0.319936
   95% expected band : 0.319936 < r < 0.319936
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1873807628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.369692 +/- 0.00235621 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.369692 @ 95%CL (1 toyMC)
median expected limit: r < 0.369692 @ 95%CL (1 toyMC)
   68% expected band : 0.369692 < r < 0.369692
   95% expected band : 0.369692 < r < 0.369692
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 883267355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.377525 +/- 0.00189587 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.377525 @ 95%CL (1 toyMC)
median expected limit: r < 0.377525 @ 95%CL (1 toyMC)
   68% expected band : 0.377525 < r < 0.377525
   95% expected band : 0.377525 < r < 0.377525
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -868052352
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.182343 +/- 0.00360598 @ 95% CL (97 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.182343 @ 95%CL (1 toyMC)
median expected limit: r < 0.182343 @ 95%CL (1 toyMC)
   68% expected band : 0.182343 < r < 0.182343
   95% expected band : 0.182343 < r < 0.182343
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -494605541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.340213 +/- 0.00274999 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.340213 @ 95%CL (1 toyMC)
median expected limit: r < 0.340213 @ 95%CL (1 toyMC)
   68% expected band : 0.340213 < r < 0.340213
   95% expected band : 0.340213 < r < 0.340213
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1245741706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.202392 +/- 0.00187141 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.202392 @ 95%CL (1 toyMC)
median expected limit: r < 0.202392 @ 95%CL (1 toyMC)
   68% expected band : 0.202392 < r < 0.202392
   95% expected band : 0.202392 < r < 0.202392
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -32570543
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.196713 +/- 0.00281502 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.196713 @ 95%CL (1 toyMC)
median expected limit: r < 0.196713 @ 95%CL (1 toyMC)
   68% expected band : 0.196713 < r < 0.196713
   95% expected band : 0.196713 < r < 0.196713
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1613856168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.177734 +/- 0.00377745 @ 95% CL (87 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.177734 @ 95%CL (1 toyMC)
median expected limit: r < 0.177734 @ 95%CL (1 toyMC)
   68% expected band : 0.177734 < r < 0.177734
   95% expected band : 0.177734 < r < 0.177734
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1049442614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.480413 +/- 0.00263436 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.480413 @ 95%CL (1 toyMC)
median expected limit: r < 0.480413 @ 95%CL (1 toyMC)
   68% expected band : 0.480413 < r < 0.480413
   95% expected band : 0.480413 < r < 0.480413
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2071986031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.287257 +/- 0.00269449 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.287257 @ 95%CL (1 toyMC)
median expected limit: r < 0.287257 @ 95%CL (1 toyMC)
   68% expected band : 0.287257 < r < 0.287257
   95% expected band : 0.287257 < r < 0.287257
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1841110641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.197211 +/- 0.00250093 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.197211 @ 95%CL (1 toyMC)
median expected limit: r < 0.197211 @ 95%CL (1 toyMC)
   68% expected band : 0.197211 < r < 0.197211
   95% expected band : 0.197211 < r < 0.197211
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1332174831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.378047 +/- 0.0021864 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.378047 @ 95%CL (1 toyMC)
median expected limit: r < 0.378047 @ 95%CL (1 toyMC)
   68% expected band : 0.378047 < r < 0.378047
   95% expected band : 0.378047 < r < 0.378047
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -246341884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.402939 +/- 0.00201363 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.402939 @ 95%CL (1 toyMC)
median expected limit: r < 0.402939 @ 95%CL (1 toyMC)
   68% expected band : 0.402939 < r < 0.402939
   95% expected band : 0.402939 < r < 0.402939
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -34951488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.324502 +/- 0.00289663 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.324502 @ 95%CL (1 toyMC)
median expected limit: r < 0.324502 @ 95%CL (1 toyMC)
   68% expected band : 0.324502 < r < 0.324502
   95% expected band : 0.324502 < r < 0.324502
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -529543385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268278 +/- 0.00149995 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.268278 @ 95%CL (1 toyMC)
median expected limit: r < 0.268278 @ 95%CL (1 toyMC)
   68% expected band : 0.268278 < r < 0.268278
   95% expected band : 0.268278 < r < 0.268278
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1631656573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.143367 +/- 0.00889876 @ 95% CL (52 tries)
Done in 3.48 min (cpu), 3.50 min (real)
mean   expected limit: r < 0.143367 @ 95%CL (1 toyMC)
median expected limit: r < 0.143367 @ 95%CL (1 toyMC)
   68% expected band : 0.143367 < r < 0.143367
   95% expected band : 0.143367 < r < 0.143367
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -96129807
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.3169 +/- 0.00236074 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.3169 @ 95%CL (1 toyMC)
median expected limit: r < 0.3169 @ 95%CL (1 toyMC)
   68% expected band : 0.3169 < r < 0.3169
   95% expected band : 0.3169 < r < 0.3169
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -340012993
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.277302 +/- 0.00297197 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.277302 @ 95%CL (1 toyMC)
median expected limit: r < 0.277302 @ 95%CL (1 toyMC)
   68% expected band : 0.277302 < r < 0.277302
   95% expected band : 0.277302 < r < 0.277302
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 130593683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.346098 +/- 0.00262774 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.346098 @ 95%CL (1 toyMC)
median expected limit: r < 0.346098 @ 95%CL (1 toyMC)
   68% expected band : 0.346098 < r < 0.346098
   95% expected band : 0.346098 < r < 0.346098
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2089340108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.177805 +/- 0.00354783 @ 95% CL (97 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 0.177805 @ 95%CL (1 toyMC)
median expected limit: r < 0.177805 @ 95%CL (1 toyMC)
   68% expected band : 0.177805 < r < 0.177805
   95% expected band : 0.177805 < r < 0.177805
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -281436867
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.196151 +/- 0.0033889 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.196151 @ 95%CL (1 toyMC)
median expected limit: r < 0.196151 @ 95%CL (1 toyMC)
   68% expected band : 0.196151 < r < 0.196151
   95% expected band : 0.196151 < r < 0.196151
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2013590059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.364971 +/- 0.00240735 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.364971 @ 95%CL (1 toyMC)
median expected limit: r < 0.364971 @ 95%CL (1 toyMC)
   68% expected band : 0.364971 < r < 0.364971
   95% expected band : 0.364971 < r < 0.364971
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 227632690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.17119 +/- 0.00691936 @ 95% CL (58 tries)
Done in 2.60 min (cpu), 2.61 min (real)
mean   expected limit: r < 0.17119 @ 95%CL (1 toyMC)
median expected limit: r < 0.17119 @ 95%CL (1 toyMC)
   68% expected band : 0.17119 < r < 0.17119
   95% expected band : 0.17119 < r < 0.17119
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2047601793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.219209 +/- 0.00280315 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.219209 @ 95%CL (1 toyMC)
median expected limit: r < 0.219209 @ 95%CL (1 toyMC)
   68% expected band : 0.219209 < r < 0.219209
   95% expected band : 0.219209 < r < 0.219209
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1846421089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300469 +/- 0.00222467 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.300469 @ 95%CL (1 toyMC)
median expected limit: r < 0.300469 @ 95%CL (1 toyMC)
   68% expected band : 0.300469 < r < 0.300469
   95% expected band : 0.300469 < r < 0.300469
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -21085735
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194758 +/- 0.00231262 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.194758 @ 95%CL (1 toyMC)
median expected limit: r < 0.194758 @ 95%CL (1 toyMC)
   68% expected band : 0.194758 < r < 0.194758
   95% expected band : 0.194758 < r < 0.194758
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2063819359
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.443404 +/- 0.00196348 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.443404 @ 95%CL (1 toyMC)
median expected limit: r < 0.443404 @ 95%CL (1 toyMC)
   68% expected band : 0.443404 < r < 0.443404
   95% expected band : 0.443404 < r < 0.443404
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1892628958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228496 +/- 0.00213968 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.228496 @ 95%CL (1 toyMC)
median expected limit: r < 0.228496 @ 95%CL (1 toyMC)
   68% expected band : 0.228496 < r < 0.228496
   95% expected band : 0.228496 < r < 0.228496
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1217623764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.476287 +/- 0.00225985 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.476287 @ 95%CL (1 toyMC)
median expected limit: r < 0.476287 @ 95%CL (1 toyMC)
   68% expected band : 0.476287 < r < 0.476287
   95% expected band : 0.476287 < r < 0.476287
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1297080716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195897 +/- 0.00222213 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.195897 @ 95%CL (1 toyMC)
median expected limit: r < 0.195897 @ 95%CL (1 toyMC)
   68% expected band : 0.195897 < r < 0.195897
   95% expected band : 0.195897 < r < 0.195897
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1454175250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.171809 +/- 0.00213399 @ 95% CL (97 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 0.171809 @ 95%CL (1 toyMC)
median expected limit: r < 0.171809 @ 95%CL (1 toyMC)
   68% expected band : 0.171809 < r < 0.171809
   95% expected band : 0.171809 < r < 0.171809
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -116309667
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.456899 +/- 0.00243177 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.456899 @ 95%CL (1 toyMC)
median expected limit: r < 0.456899 @ 95%CL (1 toyMC)
   68% expected band : 0.456899 < r < 0.456899
   95% expected band : 0.456899 < r < 0.456899
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2138285056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.321861 +/- 0.00290152 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.321861 @ 95%CL (1 toyMC)
median expected limit: r < 0.321861 @ 95%CL (1 toyMC)
   68% expected band : 0.321861 < r < 0.321861
   95% expected band : 0.321861 < r < 0.321861
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -502855758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.185839 +/- 0.00308453 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.185839 @ 95%CL (1 toyMC)
median expected limit: r < 0.185839 @ 95%CL (1 toyMC)
   68% expected band : 0.185839 < r < 0.185839
   95% expected band : 0.185839 < r < 0.185839
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 670191514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.231522 +/- 0.00326919 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.231522 @ 95%CL (1 toyMC)
median expected limit: r < 0.231522 @ 95%CL (1 toyMC)
   68% expected band : 0.231522 < r < 0.231522
   95% expected band : 0.231522 < r < 0.231522
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1364815464
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200819 +/- 0.00354244 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.200819 @ 95%CL (1 toyMC)
median expected limit: r < 0.200819 @ 95%CL (1 toyMC)
   68% expected band : 0.200819 < r < 0.200819
   95% expected band : 0.200819 < r < 0.200819
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1412301912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.479759 +/- 0.00219625 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.479759 @ 95%CL (1 toyMC)
median expected limit: r < 0.479759 @ 95%CL (1 toyMC)
   68% expected band : 0.479759 < r < 0.479759
   95% expected band : 0.479759 < r < 0.479759
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1754055081
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.461741 +/- 0.00268039 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.461741 @ 95%CL (1 toyMC)
median expected limit: r < 0.461741 @ 95%CL (1 toyMC)
   68% expected band : 0.461741 < r < 0.461741
   95% expected band : 0.461741 < r < 0.461741
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -244951372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.197654 +/- 0.00371915 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.197654 @ 95%CL (1 toyMC)
median expected limit: r < 0.197654 @ 95%CL (1 toyMC)
   68% expected band : 0.197654 < r < 0.197654
   95% expected band : 0.197654 < r < 0.197654
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1727539565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.209546 +/- 0.00297643 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.209546 @ 95%CL (1 toyMC)
median expected limit: r < 0.209546 @ 95%CL (1 toyMC)
   68% expected band : 0.209546 < r < 0.209546
   95% expected band : 0.209546 < r < 0.209546
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1234212547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.289306 +/- 0.00295156 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.289306 @ 95%CL (1 toyMC)
median expected limit: r < 0.289306 @ 95%CL (1 toyMC)
   68% expected band : 0.289306 < r < 0.289306
   95% expected band : 0.289306 < r < 0.289306
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1137551754
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216317 +/- 0.00278882 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.216317 @ 95%CL (1 toyMC)
median expected limit: r < 0.216317 @ 95%CL (1 toyMC)
   68% expected band : 0.216317 < r < 0.216317
   95% expected band : 0.216317 < r < 0.216317
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -443310783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.10786 +/- 3.03154 @ 95% CL (10 tries)
Done in 7.97 min (cpu), 8.01 min (real)
mean   expected limit: r < 6.10786 @ 95%CL (1 toyMC)
median expected limit: r < 6.10786 @ 95%CL (1 toyMC)
   68% expected band : 6.10786 < r < 6.10786
   95% expected band : 6.10786 < r < 6.10786
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 322797958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.297889 +/- 0.00218847 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.297889 @ 95%CL (1 toyMC)
median expected limit: r < 0.297889 @ 95%CL (1 toyMC)
   68% expected band : 0.297889 < r < 0.297889
   95% expected band : 0.297889 < r < 0.297889
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 758322641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.203868 +/- 0.00338022 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.203868 @ 95%CL (1 toyMC)
median expected limit: r < 0.203868 @ 95%CL (1 toyMC)
   68% expected band : 0.203868 < r < 0.203868
   95% expected band : 0.203868 < r < 0.203868
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1071513119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.360097 +/- 0.00200242 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.360097 @ 95%CL (1 toyMC)
median expected limit: r < 0.360097 @ 95%CL (1 toyMC)
   68% expected band : 0.360097 < r < 0.360097
   95% expected band : 0.360097 < r < 0.360097
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -318347505
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.72726 +/- 0.00220624 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.72726 @ 95%CL (1 toyMC)
median expected limit: r < 0.72726 @ 95%CL (1 toyMC)
   68% expected band : 0.72726 < r < 0.72726
   95% expected band : 0.72726 < r < 0.72726
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 41465080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.230762 +/- 0.0027084 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.230762 @ 95%CL (1 toyMC)
median expected limit: r < 0.230762 @ 95%CL (1 toyMC)
   68% expected band : 0.230762 < r < 0.230762
   95% expected band : 0.230762 < r < 0.230762
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -272667699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332902 +/- 0.00258445 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.332902 @ 95%CL (1 toyMC)
median expected limit: r < 0.332902 @ 95%CL (1 toyMC)
   68% expected band : 0.332902 < r < 0.332902
   95% expected band : 0.332902 < r < 0.332902
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1694472134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208696 +/- 0.00280315 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.208696 @ 95%CL (1 toyMC)
median expected limit: r < 0.208696 @ 95%CL (1 toyMC)
   68% expected band : 0.208696 < r < 0.208696
   95% expected band : 0.208696 < r < 0.208696
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1452939450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.265876 +/- 0.00245225 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.265876 @ 95%CL (1 toyMC)
median expected limit: r < 0.265876 @ 95%CL (1 toyMC)
   68% expected band : 0.265876 < r < 0.265876
   95% expected band : 0.265876 < r < 0.265876
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -829201731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.316377 +/- 0.00248855 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.316377 @ 95%CL (1 toyMC)
median expected limit: r < 0.316377 @ 95%CL (1 toyMC)
   68% expected band : 0.316377 < r < 0.316377
   95% expected band : 0.316377 < r < 0.316377
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -549039284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.265869 +/- 0.00209885 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.265869 @ 95%CL (1 toyMC)
median expected limit: r < 0.265869 @ 95%CL (1 toyMC)
   68% expected band : 0.265869 < r < 0.265869
   95% expected band : 0.265869 < r < 0.265869
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1059598070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.178543 +/- 0.00268616 @ 95% CL (99 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.178543 @ 95%CL (1 toyMC)
median expected limit: r < 0.178543 @ 95%CL (1 toyMC)
   68% expected band : 0.178543 < r < 0.178543
   95% expected band : 0.178543 < r < 0.178543
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 144388627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300402 +/- 0.0022625 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.300402 @ 95%CL (1 toyMC)
median expected limit: r < 0.300402 @ 95%CL (1 toyMC)
   68% expected band : 0.300402 < r < 0.300402
   95% expected band : 0.300402 < r < 0.300402
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1943391568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.292647 +/- 0.00260769 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.292647 @ 95%CL (1 toyMC)
median expected limit: r < 0.292647 @ 95%CL (1 toyMC)
   68% expected band : 0.292647 < r < 0.292647
   95% expected band : 0.292647 < r < 0.292647
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -830336417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.167965 +/- 0.00379506 @ 95% CL (89 tries)
Done in 0.56 min (cpu), 0.57 min (real)
mean   expected limit: r < 0.167965 @ 95%CL (1 toyMC)
median expected limit: r < 0.167965 @ 95%CL (1 toyMC)
   68% expected band : 0.167965 < r < 0.167965
   95% expected band : 0.167965 < r < 0.167965
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -104062053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235136 +/- 0.00292764 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.235136 @ 95%CL (1 toyMC)
median expected limit: r < 0.235136 @ 95%CL (1 toyMC)
   68% expected band : 0.235136 < r < 0.235136
   95% expected band : 0.235136 < r < 0.235136
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1952830734
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22929 +/- 0.00313013 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.22929 @ 95%CL (1 toyMC)
median expected limit: r < 0.22929 @ 95%CL (1 toyMC)
   68% expected band : 0.22929 < r < 0.22929
   95% expected band : 0.22929 < r < 0.22929
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1770237313
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.279453 +/- 0.00225673 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.279453 @ 95%CL (1 toyMC)
median expected limit: r < 0.279453 @ 95%CL (1 toyMC)
   68% expected band : 0.279453 < r < 0.279453
   95% expected band : 0.279453 < r < 0.279453
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1075933628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.254656 +/- 0.0029398 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.254656 @ 95%CL (1 toyMC)
median expected limit: r < 0.254656 @ 95%CL (1 toyMC)
   68% expected band : 0.254656 < r < 0.254656
   95% expected band : 0.254656 < r < 0.254656
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1541473776
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195453 +/- 0.00328285 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.195453 @ 95%CL (1 toyMC)
median expected limit: r < 0.195453 @ 95%CL (1 toyMC)
   68% expected band : 0.195453 < r < 0.195453
   95% expected band : 0.195453 < r < 0.195453
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1187749632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.95245 +/- 1.6163 @ 95% CL (39 tries)
Done in 4.98 min (cpu), 5.00 min (real)
mean   expected limit: r < 6.95245 @ 95%CL (1 toyMC)
median expected limit: r < 6.95245 @ 95%CL (1 toyMC)
   68% expected band : 6.95245 < r < 6.95245
   95% expected band : 6.95245 < r < 6.95245
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 304576167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.391948 +/- 0.00283995 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.391948 @ 95%CL (1 toyMC)
median expected limit: r < 0.391948 @ 95%CL (1 toyMC)
   68% expected band : 0.391948 < r < 0.391948
   95% expected band : 0.391948 < r < 0.391948
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -113666245
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235688 +/- 0.00297947 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.235688 @ 95%CL (1 toyMC)
median expected limit: r < 0.235688 @ 95%CL (1 toyMC)
   68% expected band : 0.235688 < r < 0.235688
   95% expected band : 0.235688 < r < 0.235688
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1157171295
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186793 +/- 0.00318385 @ 95% CL (99 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.186793 @ 95%CL (1 toyMC)
median expected limit: r < 0.186793 @ 95%CL (1 toyMC)
   68% expected band : 0.186793 < r < 0.186793
   95% expected band : 0.186793 < r < 0.186793
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1629840117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.271155 +/- 0.00241098 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.271155 @ 95%CL (1 toyMC)
median expected limit: r < 0.271155 @ 95%CL (1 toyMC)
   68% expected band : 0.271155 < r < 0.271155
   95% expected band : 0.271155 < r < 0.271155
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -92841127
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.607509 +/- 0.00224845 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.607509 @ 95%CL (1 toyMC)
median expected limit: r < 0.607509 @ 95%CL (1 toyMC)
   68% expected band : 0.607509 < r < 0.607509
   95% expected band : 0.607509 < r < 0.607509
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1666583735
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.326906 +/- 0.00250165 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.326906 @ 95%CL (1 toyMC)
median expected limit: r < 0.326906 @ 95%CL (1 toyMC)
   68% expected band : 0.326906 < r < 0.326906
   95% expected band : 0.326906 < r < 0.326906
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1452621085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.193966 +/- 0.00249796 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.193966 @ 95%CL (1 toyMC)
median expected limit: r < 0.193966 @ 95%CL (1 toyMC)
   68% expected band : 0.193966 < r < 0.193966
   95% expected band : 0.193966 < r < 0.193966
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -758110784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194433 +/- 0.00315294 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.194433 @ 95%CL (1 toyMC)
median expected limit: r < 0.194433 @ 95%CL (1 toyMC)
   68% expected band : 0.194433 < r < 0.194433
   95% expected band : 0.194433 < r < 0.194433
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 147358983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.181854 +/- 0.00305456 @ 95% CL (98 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.181854 @ 95%CL (1 toyMC)
median expected limit: r < 0.181854 @ 95%CL (1 toyMC)
   68% expected band : 0.181854 < r < 0.181854
   95% expected band : 0.181854 < r < 0.181854
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1650684800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.560825 +/- 0.00226767 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.560825 @ 95%CL (1 toyMC)
median expected limit: r < 0.560825 @ 95%CL (1 toyMC)
   68% expected band : 0.560825 < r < 0.560825
   95% expected band : 0.560825 < r < 0.560825
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1223800084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.164043 +/- 0.0056018 @ 95% CL (69 tries)
Done in 1.66 min (cpu), 1.67 min (real)
mean   expected limit: r < 0.164043 @ 95%CL (1 toyMC)
median expected limit: r < 0.164043 @ 95%CL (1 toyMC)
   68% expected band : 0.164043 < r < 0.164043
   95% expected band : 0.164043 < r < 0.164043
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -223666308
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.25214 +/- 0.00271644 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.25214 @ 95%CL (1 toyMC)
median expected limit: r < 0.25214 @ 95%CL (1 toyMC)
   68% expected band : 0.25214 < r < 0.25214
   95% expected band : 0.25214 < r < 0.25214
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 799723868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260791 +/- 0.00247154 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.260791 @ 95%CL (1 toyMC)
median expected limit: r < 0.260791 @ 95%CL (1 toyMC)
   68% expected band : 0.260791 < r < 0.260791
   95% expected band : 0.260791 < r < 0.260791
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine16.MarkovChainMC.mH16.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH16.-104062053.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH16.-1056849344.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH16.-1071513119.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH16.-1075933628.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH16.-113666245.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH16.-1157171295.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH16.-116309667.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH16.-1217623764.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH16.-1223800084.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH16.-1245741706.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH16.-1364815464.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH16.-1412301912.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH16.-143146160.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH16.-1452939450.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH16.-1541473776.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH16.-1613856168.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH16.-1629840117.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH16.-1631656573.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH16.-1754055081.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH16.-1770237313.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH16.-1841110641.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH16.-1841314231.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH16.-1846421089.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH16.-1873807628.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH16.-1887902904.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH16.-1892628958.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH16.-1951732338.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH16.-1952830734.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH16.-2044936315.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH16.-2071272617.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH16.-2089340108.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH16.-21085735.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH16.-223666308.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH16.-244951372.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH16.-246341884.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH16.-272667699.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH16.-281436867.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH16.-318347505.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH16.-32570543.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH16.-340012993.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH16.-34951488.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH16.-443310783.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH16.-480307165.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH16.-494605541.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH16.-502855758.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH16.-529543385.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH16.-549039284.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH16.-652179020.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH16.-758110784.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH16.-780402322.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH16.-829201731.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH16.-830336417.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH16.-868052352.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH16.-894482598.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH16.-92841127.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH16.-957388872.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH16.-96129807.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH16.1049442614.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH16.1059598070.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH16.1137551754.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH16.1187749632.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH16.1234212547.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH16.1271866566.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH16.1297080716.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH16.130593683.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH16.1332174831.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH16.144388627.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH16.1452621085.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH16.1454175250.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH16.147358983.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH16.1529305040.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH16.1650684800.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH16.1666583735.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH16.1678069492.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH16.1694472134.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH16.1727539565.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH16.1761058774.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH16.184137707.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH16.1943391568.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH16.2013590059.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH16.2047601793.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH16.2063819359.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH16.2071986031.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH16.2138285056.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH16.227632690.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH16.285894683.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH16.292857004.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH16.304576167.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH16.322797958.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH16.41465080.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH16.429577373.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH16.484817911.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH16.533906489.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH16.552535949.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH16.670191514.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH16.729774260.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH16.758322641.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH16.799723868.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH16.883267355.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH16.933139858.root
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 205497332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.449778 +/- 0.00296329 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.449778 @ 95%CL (1 toyMC)
median expected limit: r < 0.449778 @ 95%CL (1 toyMC)
   68% expected band : 0.449778 < r < 0.449778
   95% expected band : 0.449778 < r < 0.449778
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -90519375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.777073 +/- 0.00390936 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.777073 @ 95%CL (1 toyMC)
median expected limit: r < 0.777073 @ 95%CL (1 toyMC)
   68% expected band : 0.777073 < r < 0.777073
   95% expected band : 0.777073 < r < 0.777073
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -706983672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.480885 +/- 0.0027719 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.480885 @ 95%CL (1 toyMC)
median expected limit: r < 0.480885 @ 95%CL (1 toyMC)
   68% expected band : 0.480885 < r < 0.480885
   95% expected band : 0.480885 < r < 0.480885
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1596093114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.796353 +/- 0.00293523 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.796353 @ 95%CL (1 toyMC)
median expected limit: r < 0.796353 @ 95%CL (1 toyMC)
   68% expected band : 0.796353 < r < 0.796353
   95% expected band : 0.796353 < r < 0.796353
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1656388720
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.635 +/- 0.00327812 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.635 @ 95%CL (1 toyMC)
median expected limit: r < 0.635 @ 95%CL (1 toyMC)
   68% expected band : 0.635 < r < 0.635
   95% expected band : 0.635 < r < 0.635
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -812264626
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.605065 +/- 0.00304564 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.605065 @ 95%CL (1 toyMC)
median expected limit: r < 0.605065 @ 95%CL (1 toyMC)
   68% expected band : 0.605065 < r < 0.605065
   95% expected band : 0.605065 < r < 0.605065
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1059164432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.444751 +/- 0.00282898 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.444751 @ 95%CL (1 toyMC)
median expected limit: r < 0.444751 @ 95%CL (1 toyMC)
   68% expected band : 0.444751 < r < 0.444751
   95% expected band : 0.444751 < r < 0.444751
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -127509715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.565893 +/- 0.00254224 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.565893 @ 95%CL (1 toyMC)
median expected limit: r < 0.565893 @ 95%CL (1 toyMC)
   68% expected band : 0.565893 < r < 0.565893
   95% expected band : 0.565893 < r < 0.565893
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 15708039
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.616184 +/- 0.00286639 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.616184 @ 95%CL (1 toyMC)
median expected limit: r < 0.616184 @ 95%CL (1 toyMC)
   68% expected band : 0.616184 < r < 0.616184
   95% expected band : 0.616184 < r < 0.616184
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 230235842
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.651475 +/- 0.00303897 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.651475 @ 95%CL (1 toyMC)
median expected limit: r < 0.651475 @ 95%CL (1 toyMC)
   68% expected band : 0.651475 < r < 0.651475
   95% expected band : 0.651475 < r < 0.651475
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1004853494
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.57827 +/- 0.00298116 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.57827 @ 95%CL (1 toyMC)
median expected limit: r < 0.57827 @ 95%CL (1 toyMC)
   68% expected band : 0.57827 < r < 0.57827
   95% expected band : 0.57827 < r < 0.57827
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1563821756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.724747 +/- 0.00286199 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.724747 @ 95%CL (1 toyMC)
median expected limit: r < 0.724747 @ 95%CL (1 toyMC)
   68% expected band : 0.724747 < r < 0.724747
   95% expected band : 0.724747 < r < 0.724747
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 795188038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.658757 +/- 0.00314874 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.658757 @ 95%CL (1 toyMC)
median expected limit: r < 0.658757 @ 95%CL (1 toyMC)
   68% expected band : 0.658757 < r < 0.658757
   95% expected band : 0.658757 < r < 0.658757
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -842895312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.560431 +/- 0.00293026 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.560431 @ 95%CL (1 toyMC)
median expected limit: r < 0.560431 @ 95%CL (1 toyMC)
   68% expected band : 0.560431 < r < 0.560431
   95% expected band : 0.560431 < r < 0.560431
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1122137526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.512247 +/- 0.00306419 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.512247 @ 95%CL (1 toyMC)
median expected limit: r < 0.512247 @ 95%CL (1 toyMC)
   68% expected band : 0.512247 < r < 0.512247
   95% expected band : 0.512247 < r < 0.512247
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1108178509
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.474257 +/- 0.00321721 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.474257 @ 95%CL (1 toyMC)
median expected limit: r < 0.474257 @ 95%CL (1 toyMC)
   68% expected band : 0.474257 < r < 0.474257
   95% expected band : 0.474257 < r < 0.474257
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -860183690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.613219 +/- 0.00268742 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.613219 @ 95%CL (1 toyMC)
median expected limit: r < 0.613219 @ 95%CL (1 toyMC)
   68% expected band : 0.613219 < r < 0.613219
   95% expected band : 0.613219 < r < 0.613219
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1167224353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.738188 +/- 0.00268999 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.738188 @ 95%CL (1 toyMC)
median expected limit: r < 0.738188 @ 95%CL (1 toyMC)
   68% expected band : 0.738188 < r < 0.738188
   95% expected band : 0.738188 < r < 0.738188
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 12022384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.768529 +/- 0.00330765 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.768529 @ 95%CL (1 toyMC)
median expected limit: r < 0.768529 @ 95%CL (1 toyMC)
   68% expected band : 0.768529 < r < 0.768529
   95% expected band : 0.768529 < r < 0.768529
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1257736237
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.748847 +/- 0.00323712 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.748847 @ 95%CL (1 toyMC)
median expected limit: r < 0.748847 @ 95%CL (1 toyMC)
   68% expected band : 0.748847 < r < 0.748847
   95% expected band : 0.748847 < r < 0.748847
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1388078285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.474918 +/- 0.00249392 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.474918 @ 95%CL (1 toyMC)
median expected limit: r < 0.474918 @ 95%CL (1 toyMC)
   68% expected band : 0.474918 < r < 0.474918
   95% expected band : 0.474918 < r < 0.474918
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 623792964
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.929435 +/- 0.0022296 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.929435 @ 95%CL (1 toyMC)
median expected limit: r < 0.929435 @ 95%CL (1 toyMC)
   68% expected band : 0.929435 < r < 0.929435
   95% expected band : 0.929435 < r < 0.929435
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -601507020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.646828 +/- 0.00285448 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.646828 @ 95%CL (1 toyMC)
median expected limit: r < 0.646828 @ 95%CL (1 toyMC)
   68% expected band : 0.646828 < r < 0.646828
   95% expected band : 0.646828 < r < 0.646828
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 365194611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.953776 +/- 0.0029247 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.953776 @ 95%CL (1 toyMC)
median expected limit: r < 0.953776 @ 95%CL (1 toyMC)
   68% expected band : 0.953776 < r < 0.953776
   95% expected band : 0.953776 < r < 0.953776
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1890718652
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.777683 +/- 0.00360947 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.777683 @ 95%CL (1 toyMC)
median expected limit: r < 0.777683 @ 95%CL (1 toyMC)
   68% expected band : 0.777683 < r < 0.777683
   95% expected band : 0.777683 < r < 0.777683
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1300279483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.402426 +/- 0.00295619 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.402426 @ 95%CL (1 toyMC)
median expected limit: r < 0.402426 @ 95%CL (1 toyMC)
   68% expected band : 0.402426 < r < 0.402426
   95% expected band : 0.402426 < r < 0.402426
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 973815693
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.689499 +/- 0.0029476 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.689499 @ 95%CL (1 toyMC)
median expected limit: r < 0.689499 @ 95%CL (1 toyMC)
   68% expected band : 0.689499 < r < 0.689499
   95% expected band : 0.689499 < r < 0.689499
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -703888810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.463076 +/- 0.00306798 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.463076 @ 95%CL (1 toyMC)
median expected limit: r < 0.463076 @ 95%CL (1 toyMC)
   68% expected band : 0.463076 < r < 0.463076
   95% expected band : 0.463076 < r < 0.463076
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1087357502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.455668 +/- 0.00266053 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.455668 @ 95%CL (1 toyMC)
median expected limit: r < 0.455668 @ 95%CL (1 toyMC)
   68% expected band : 0.455668 < r < 0.455668
   95% expected band : 0.455668 < r < 0.455668
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -599658370
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.920912 +/- 0.00284326 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.920912 @ 95%CL (1 toyMC)
median expected limit: r < 0.920912 @ 95%CL (1 toyMC)
   68% expected band : 0.920912 < r < 0.920912
   95% expected band : 0.920912 < r < 0.920912
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1184932777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.67167 +/- 0.00219748 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.67167 @ 95%CL (1 toyMC)
median expected limit: r < 0.67167 @ 95%CL (1 toyMC)
   68% expected band : 0.67167 < r < 0.67167
   95% expected band : 0.67167 < r < 0.67167
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1670840541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.205 +/- 0.00317357 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.205 @ 95%CL (1 toyMC)
median expected limit: r < 1.205 @ 95%CL (1 toyMC)
   68% expected band : 1.205 < r < 1.205
   95% expected band : 1.205 < r < 1.205
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 4208126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.452783 +/- 0.00224472 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.452783 @ 95%CL (1 toyMC)
median expected limit: r < 0.452783 @ 95%CL (1 toyMC)
   68% expected band : 0.452783 < r < 0.452783
   95% expected band : 0.452783 < r < 0.452783
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2018006547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.587138 +/- 0.00307825 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.587138 @ 95%CL (1 toyMC)
median expected limit: r < 0.587138 @ 95%CL (1 toyMC)
   68% expected band : 0.587138 < r < 0.587138
   95% expected band : 0.587138 < r < 0.587138
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -56644535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59146 +/- 0.00354446 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.59146 @ 95%CL (1 toyMC)
median expected limit: r < 1.59146 @ 95%CL (1 toyMC)
   68% expected band : 1.59146 < r < 1.59146
   95% expected band : 1.59146 < r < 1.59146
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1948878223
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.586065 +/- 0.00309188 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.586065 @ 95%CL (1 toyMC)
median expected limit: r < 0.586065 @ 95%CL (1 toyMC)
   68% expected band : 0.586065 < r < 0.586065
   95% expected band : 0.586065 < r < 0.586065
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -203964666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.47334 +/- 0.00247626 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.47334 @ 95%CL (1 toyMC)
median expected limit: r < 0.47334 @ 95%CL (1 toyMC)
   68% expected band : 0.47334 < r < 0.47334
   95% expected band : 0.47334 < r < 0.47334
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1577611476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.554837 +/- 0.00270618 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.554837 @ 95%CL (1 toyMC)
median expected limit: r < 0.554837 @ 95%CL (1 toyMC)
   68% expected band : 0.554837 < r < 0.554837
   95% expected band : 0.554837 < r < 0.554837
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1592868650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08882 +/- 0.00267661 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.08882 @ 95%CL (1 toyMC)
median expected limit: r < 1.08882 @ 95%CL (1 toyMC)
   68% expected band : 1.08882 < r < 1.08882
   95% expected band : 1.08882 < r < 1.08882
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1013286184
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.56127 +/- 0.00267188 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.56127 @ 95%CL (1 toyMC)
median expected limit: r < 0.56127 @ 95%CL (1 toyMC)
   68% expected band : 0.56127 < r < 0.56127
   95% expected band : 0.56127 < r < 0.56127
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 575907073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.895377 +/- 0.00277663 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.895377 @ 95%CL (1 toyMC)
median expected limit: r < 0.895377 @ 95%CL (1 toyMC)
   68% expected band : 0.895377 < r < 0.895377
   95% expected band : 0.895377 < r < 0.895377
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1881222860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.414962 +/- 0.00305394 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.414962 @ 95%CL (1 toyMC)
median expected limit: r < 0.414962 @ 95%CL (1 toyMC)
   68% expected band : 0.414962 < r < 0.414962
   95% expected band : 0.414962 < r < 0.414962
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1637448367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.419603 +/- 0.00239413 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.419603 @ 95%CL (1 toyMC)
median expected limit: r < 0.419603 @ 95%CL (1 toyMC)
   68% expected band : 0.419603 < r < 0.419603
   95% expected band : 0.419603 < r < 0.419603
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -3442610
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.564472 +/- 0.00271561 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.564472 @ 95%CL (1 toyMC)
median expected limit: r < 0.564472 @ 95%CL (1 toyMC)
   68% expected band : 0.564472 < r < 0.564472
   95% expected band : 0.564472 < r < 0.564472
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2014668427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.742365 +/- 0.00307976 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.742365 @ 95%CL (1 toyMC)
median expected limit: r < 0.742365 @ 95%CL (1 toyMC)
   68% expected band : 0.742365 < r < 0.742365
   95% expected band : 0.742365 < r < 0.742365
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 814838250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.310141 +/- 0.00259 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.310141 @ 95%CL (1 toyMC)
median expected limit: r < 0.310141 @ 95%CL (1 toyMC)
   68% expected band : 0.310141 < r < 0.310141
   95% expected band : 0.310141 < r < 0.310141
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1829089241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.605151 +/- 0.00278604 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.605151 @ 95%CL (1 toyMC)
median expected limit: r < 0.605151 @ 95%CL (1 toyMC)
   68% expected band : 0.605151 < r < 0.605151
   95% expected band : 0.605151 < r < 0.605151
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 717034113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.417696 +/- 0.00261591 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.417696 @ 95%CL (1 toyMC)
median expected limit: r < 0.417696 @ 95%CL (1 toyMC)
   68% expected band : 0.417696 < r < 0.417696
   95% expected band : 0.417696 < r < 0.417696
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -330991246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.528683 +/- 0.00228262 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.528683 @ 95%CL (1 toyMC)
median expected limit: r < 0.528683 @ 95%CL (1 toyMC)
   68% expected band : 0.528683 < r < 0.528683
   95% expected band : 0.528683 < r < 0.528683
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1556252555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.672299 +/- 0.00320756 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.672299 @ 95%CL (1 toyMC)
median expected limit: r < 0.672299 @ 95%CL (1 toyMC)
   68% expected band : 0.672299 < r < 0.672299
   95% expected band : 0.672299 < r < 0.672299
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -289169755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.417711 +/- 0.00269972 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.417711 @ 95%CL (1 toyMC)
median expected limit: r < 0.417711 @ 95%CL (1 toyMC)
   68% expected band : 0.417711 < r < 0.417711
   95% expected band : 0.417711 < r < 0.417711
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -438017794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.521484 +/- 0.00349812 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.521484 @ 95%CL (1 toyMC)
median expected limit: r < 0.521484 @ 95%CL (1 toyMC)
   68% expected band : 0.521484 < r < 0.521484
   95% expected band : 0.521484 < r < 0.521484
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1111575408
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338367 +/- 0.00266404 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.338367 @ 95%CL (1 toyMC)
median expected limit: r < 0.338367 @ 95%CL (1 toyMC)
   68% expected band : 0.338367 < r < 0.338367
   95% expected band : 0.338367 < r < 0.338367
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 864541529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.747895 +/- 0.00295049 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.747895 @ 95%CL (1 toyMC)
median expected limit: r < 0.747895 @ 95%CL (1 toyMC)
   68% expected band : 0.747895 < r < 0.747895
   95% expected band : 0.747895 < r < 0.747895
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1713174619
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.500358 +/- 0.00271735 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.500358 @ 95%CL (1 toyMC)
median expected limit: r < 0.500358 @ 95%CL (1 toyMC)
   68% expected band : 0.500358 < r < 0.500358
   95% expected band : 0.500358 < r < 0.500358
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1489394578
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.516368 +/- 0.00322653 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.516368 @ 95%CL (1 toyMC)
median expected limit: r < 0.516368 @ 95%CL (1 toyMC)
   68% expected band : 0.516368 < r < 0.516368
   95% expected band : 0.516368 < r < 0.516368
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1786899566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.466823 +/- 0.00282277 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.466823 @ 95%CL (1 toyMC)
median expected limit: r < 0.466823 @ 95%CL (1 toyMC)
   68% expected band : 0.466823 < r < 0.466823
   95% expected band : 0.466823 < r < 0.466823
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1053009816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.505795 +/- 0.00328622 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.505795 @ 95%CL (1 toyMC)
median expected limit: r < 0.505795 @ 95%CL (1 toyMC)
   68% expected band : 0.505795 < r < 0.505795
   95% expected band : 0.505795 < r < 0.505795
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1766335974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.600397 +/- 0.00233852 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.600397 @ 95%CL (1 toyMC)
median expected limit: r < 0.600397 @ 95%CL (1 toyMC)
   68% expected band : 0.600397 < r < 0.600397
   95% expected band : 0.600397 < r < 0.600397
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -148232234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.565751 +/- 0.00297298 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.565751 @ 95%CL (1 toyMC)
median expected limit: r < 0.565751 @ 95%CL (1 toyMC)
   68% expected band : 0.565751 < r < 0.565751
   95% expected band : 0.565751 < r < 0.565751
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1582758279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.974182 +/- 0.00419667 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.974182 @ 95%CL (1 toyMC)
median expected limit: r < 0.974182 @ 95%CL (1 toyMC)
   68% expected band : 0.974182 < r < 0.974182
   95% expected band : 0.974182 < r < 0.974182
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1079336087
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07714 +/- 0.00324711 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.07714 @ 95%CL (1 toyMC)
median expected limit: r < 1.07714 @ 95%CL (1 toyMC)
   68% expected band : 1.07714 < r < 1.07714
   95% expected band : 1.07714 < r < 1.07714
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2116881853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.586424 +/- 0.00213501 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.586424 @ 95%CL (1 toyMC)
median expected limit: r < 0.586424 @ 95%CL (1 toyMC)
   68% expected band : 0.586424 < r < 0.586424
   95% expected band : 0.586424 < r < 0.586424
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1341493010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.462006 +/- 0.00290745 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.462006 @ 95%CL (1 toyMC)
median expected limit: r < 0.462006 @ 95%CL (1 toyMC)
   68% expected band : 0.462006 < r < 0.462006
   95% expected band : 0.462006 < r < 0.462006
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -961465132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.643692 +/- 0.00341214 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.643692 @ 95%CL (1 toyMC)
median expected limit: r < 0.643692 @ 95%CL (1 toyMC)
   68% expected band : 0.643692 < r < 0.643692
   95% expected band : 0.643692 < r < 0.643692
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2104914394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15838 +/- 0.00284778 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.15838 @ 95%CL (1 toyMC)
median expected limit: r < 1.15838 @ 95%CL (1 toyMC)
   68% expected band : 1.15838 < r < 1.15838
   95% expected band : 1.15838 < r < 1.15838
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1982308194
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.490642 +/- 0.00271597 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.490642 @ 95%CL (1 toyMC)
median expected limit: r < 0.490642 @ 95%CL (1 toyMC)
   68% expected band : 0.490642 < r < 0.490642
   95% expected band : 0.490642 < r < 0.490642
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1000407809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.966123 +/- 0.00340187 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.966123 @ 95%CL (1 toyMC)
median expected limit: r < 0.966123 @ 95%CL (1 toyMC)
   68% expected band : 0.966123 < r < 0.966123
   95% expected band : 0.966123 < r < 0.966123
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1315865851
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0671 +/- 0.00252314 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.0671 @ 95%CL (1 toyMC)
median expected limit: r < 1.0671 @ 95%CL (1 toyMC)
   68% expected band : 1.0671 < r < 1.0671
   95% expected band : 1.0671 < r < 1.0671
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -964761969
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.583161 +/- 0.00252954 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.583161 @ 95%CL (1 toyMC)
median expected limit: r < 0.583161 @ 95%CL (1 toyMC)
   68% expected band : 0.583161 < r < 0.583161
   95% expected band : 0.583161 < r < 0.583161
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1699747949
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.622105 +/- 0.00330728 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.622105 @ 95%CL (1 toyMC)
median expected limit: r < 0.622105 @ 95%CL (1 toyMC)
   68% expected band : 0.622105 < r < 0.622105
   95% expected band : 0.622105 < r < 0.622105
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1286926657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.567083 +/- 0.00290343 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.567083 @ 95%CL (1 toyMC)
median expected limit: r < 0.567083 @ 95%CL (1 toyMC)
   68% expected band : 0.567083 < r < 0.567083
   95% expected band : 0.567083 < r < 0.567083
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1870369311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.336734 +/- 0.00323264 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.336734 @ 95%CL (1 toyMC)
median expected limit: r < 0.336734 @ 95%CL (1 toyMC)
   68% expected band : 0.336734 < r < 0.336734
   95% expected band : 0.336734 < r < 0.336734
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1313550698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.747489 +/- 0.00295422 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.747489 @ 95%CL (1 toyMC)
median expected limit: r < 0.747489 @ 95%CL (1 toyMC)
   68% expected band : 0.747489 < r < 0.747489
   95% expected band : 0.747489 < r < 0.747489
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1217394340
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.547198 +/- 0.00293493 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.547198 @ 95%CL (1 toyMC)
median expected limit: r < 0.547198 @ 95%CL (1 toyMC)
   68% expected band : 0.547198 < r < 0.547198
   95% expected band : 0.547198 < r < 0.547198
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 762411953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.586386 +/- 0.00268968 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.586386 @ 95%CL (1 toyMC)
median expected limit: r < 0.586386 @ 95%CL (1 toyMC)
   68% expected band : 0.586386 < r < 0.586386
   95% expected band : 0.586386 < r < 0.586386
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1710029631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.936865 +/- 0.00373539 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.936865 @ 95%CL (1 toyMC)
median expected limit: r < 0.936865 @ 95%CL (1 toyMC)
   68% expected band : 0.936865 < r < 0.936865
   95% expected band : 0.936865 < r < 0.936865
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1516441198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.757485 +/- 0.00318784 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.757485 @ 95%CL (1 toyMC)
median expected limit: r < 0.757485 @ 95%CL (1 toyMC)
   68% expected band : 0.757485 < r < 0.757485
   95% expected band : 0.757485 < r < 0.757485
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 34025258
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.481116 +/- 0.00256128 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.481116 @ 95%CL (1 toyMC)
median expected limit: r < 0.481116 @ 95%CL (1 toyMC)
   68% expected band : 0.481116 < r < 0.481116
   95% expected band : 0.481116 < r < 0.481116
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -675305699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.947739 +/- 0.00329413 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.947739 @ 95%CL (1 toyMC)
median expected limit: r < 0.947739 @ 95%CL (1 toyMC)
   68% expected band : 0.947739 < r < 0.947739
   95% expected band : 0.947739 < r < 0.947739
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -566022732
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.670652 +/- 0.00307595 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.670652 @ 95%CL (1 toyMC)
median expected limit: r < 0.670652 @ 95%CL (1 toyMC)
   68% expected band : 0.670652 < r < 0.670652
   95% expected band : 0.670652 < r < 0.670652
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2037775988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3282 +/- 0.0024493 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.3282 @ 95%CL (1 toyMC)
median expected limit: r < 1.3282 @ 95%CL (1 toyMC)
   68% expected band : 1.3282 < r < 1.3282
   95% expected band : 1.3282 < r < 1.3282
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1962213561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.742872 +/- 0.00198743 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.742872 @ 95%CL (1 toyMC)
median expected limit: r < 0.742872 @ 95%CL (1 toyMC)
   68% expected band : 0.742872 < r < 0.742872
   95% expected band : 0.742872 < r < 0.742872
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1218915631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39428 +/- 0.00257873 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.39428 @ 95%CL (1 toyMC)
median expected limit: r < 0.39428 @ 95%CL (1 toyMC)
   68% expected band : 0.39428 < r < 0.39428
   95% expected band : 0.39428 < r < 0.39428
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -436110882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.415446 +/- 0.00280745 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.415446 @ 95%CL (1 toyMC)
median expected limit: r < 0.415446 @ 95%CL (1 toyMC)
   68% expected band : 0.415446 < r < 0.415446
   95% expected band : 0.415446 < r < 0.415446
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1832027079
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.904183 +/- 0.00273995 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.904183 @ 95%CL (1 toyMC)
median expected limit: r < 0.904183 @ 95%CL (1 toyMC)
   68% expected band : 0.904183 < r < 0.904183
   95% expected band : 0.904183 < r < 0.904183
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2010087589
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.766916 +/- 0.0035279 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.766916 @ 95%CL (1 toyMC)
median expected limit: r < 0.766916 @ 95%CL (1 toyMC)
   68% expected band : 0.766916 < r < 0.766916
   95% expected band : 0.766916 < r < 0.766916
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1153424495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.673526 +/- 0.00250813 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.673526 @ 95%CL (1 toyMC)
median expected limit: r < 0.673526 @ 95%CL (1 toyMC)
   68% expected band : 0.673526 < r < 0.673526
   95% expected band : 0.673526 < r < 0.673526
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2042520575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.342225 +/- 0.00218272 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.342225 @ 95%CL (1 toyMC)
median expected limit: r < 0.342225 @ 95%CL (1 toyMC)
   68% expected band : 0.342225 < r < 0.342225
   95% expected band : 0.342225 < r < 0.342225
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1565677012
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.807737 +/- 0.00307468 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.807737 @ 95%CL (1 toyMC)
median expected limit: r < 0.807737 @ 95%CL (1 toyMC)
   68% expected band : 0.807737 < r < 0.807737
   95% expected band : 0.807737 < r < 0.807737
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 506791568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.486928 +/- 0.00243752 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.486928 @ 95%CL (1 toyMC)
median expected limit: r < 0.486928 @ 95%CL (1 toyMC)
   68% expected band : 0.486928 < r < 0.486928
   95% expected band : 0.486928 < r < 0.486928
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -416941080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.475397 +/- 0.00337732 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.475397 @ 95%CL (1 toyMC)
median expected limit: r < 0.475397 @ 95%CL (1 toyMC)
   68% expected band : 0.475397 < r < 0.475397
   95% expected band : 0.475397 < r < 0.475397
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -53020769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08165 +/- 0.00340951 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.08165 @ 95%CL (1 toyMC)
median expected limit: r < 1.08165 @ 95%CL (1 toyMC)
   68% expected band : 1.08165 < r < 1.08165
   95% expected band : 1.08165 < r < 1.08165
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1506537560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.961521 +/- 0.00352576 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.961521 @ 95%CL (1 toyMC)
median expected limit: r < 0.961521 @ 95%CL (1 toyMC)
   68% expected band : 0.961521 < r < 0.961521
   95% expected band : 0.961521 < r < 0.961521
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1011001839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.777351 +/- 0.00302289 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.777351 @ 95%CL (1 toyMC)
median expected limit: r < 0.777351 @ 95%CL (1 toyMC)
   68% expected band : 0.777351 < r < 0.777351
   95% expected band : 0.777351 < r < 0.777351
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1635552798
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.427992 +/- 0.00285493 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.427992 @ 95%CL (1 toyMC)
median expected limit: r < 0.427992 @ 95%CL (1 toyMC)
   68% expected band : 0.427992 < r < 0.427992
   95% expected band : 0.427992 < r < 0.427992
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 763257646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.713448 +/- 0.00228033 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.713448 @ 95%CL (1 toyMC)
median expected limit: r < 0.713448 @ 95%CL (1 toyMC)
   68% expected band : 0.713448 < r < 0.713448
   95% expected band : 0.713448 < r < 0.713448
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -371480411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.587482 +/- 0.00254634 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.587482 @ 95%CL (1 toyMC)
median expected limit: r < 0.587482 @ 95%CL (1 toyMC)
   68% expected band : 0.587482 < r < 0.587482
   95% expected band : 0.587482 < r < 0.587482
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -98275822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18899 +/- 0.00327559 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.18899 @ 95%CL (1 toyMC)
median expected limit: r < 1.18899 @ 95%CL (1 toyMC)
   68% expected band : 1.18899 < r < 1.18899
   95% expected band : 1.18899 < r < 1.18899
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1919832588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.461757 +/- 0.00309299 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.461757 @ 95%CL (1 toyMC)
median expected limit: r < 0.461757 @ 95%CL (1 toyMC)
   68% expected band : 0.461757 < r < 0.461757
   95% expected band : 0.461757 < r < 0.461757
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine22.MarkovChainMC.mH22.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH22.-1000407809.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH22.-1013286184.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH22.-1053009816.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH22.-1059164432.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH22.-1087357502.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH22.-1122137526.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH22.-1167224353.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH22.-1217394340.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH22.-1218915631.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH22.-1257736237.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH22.-127509715.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH22.-1300279483.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH22.-1313550698.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH22.-1341493010.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH22.-1388078285.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH22.-148232234.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH22.-1489394578.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH22.-1516441198.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH22.-1563821756.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH22.-1577611476.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH22.-1635552798.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH22.-1699747949.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH22.-1710029631.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH22.-1766335974.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH22.-1832027079.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH22.-1881222860.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH22.-1890718652.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH22.-1919832588.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH22.-1982308194.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH22.-2018006547.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH22.-203964666.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH22.-2116881853.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH22.-289169755.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH22.-330991246.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH22.-3442610.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH22.-371480411.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH22.-416941080.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH22.-436110882.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH22.-438017794.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH22.-53020769.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH22.-566022732.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH22.-56644535.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH22.-599658370.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH22.-601507020.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH22.-675305699.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH22.-703888810.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH22.-706983672.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH22.-812264626.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH22.-842895312.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH22.-860183690.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH22.-90519375.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH22.-961465132.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH22.-964761969.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH22.-98275822.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH22.1004853494.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH22.1011001839.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH22.1079336087.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH22.1108178509.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH22.1111575408.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH22.1153424495.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH22.1184932777.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH22.12022384.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH22.1286926657.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH22.1315865851.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH22.1506537560.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH22.1556252555.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH22.1565677012.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH22.15708039.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH22.1582758279.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH22.1592868650.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH22.1596093114.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH22.1637448367.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH22.1656388720.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH22.1670840541.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH22.1713174619.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH22.1786899566.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH22.1829089241.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH22.1870369311.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH22.1948878223.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH22.1962213561.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH22.2010087589.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH22.2014668427.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH22.2037775988.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH22.2042520575.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH22.205497332.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH22.2104914394.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH22.230235842.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH22.34025258.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH22.365194611.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH22.4208126.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH22.506791568.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH22.575907073.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH22.623792964.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH22.717034113.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH22.762411953.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH22.763257646.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH22.795188038.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH22.814838250.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH22.864541529.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH22.973815693.root
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 581441855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.992637 +/- 0.00342763 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.992637 @ 95%CL (1 toyMC)
median expected limit: r < 0.992637 @ 95%CL (1 toyMC)
   68% expected band : 0.992637 < r < 0.992637
   95% expected band : 0.992637 < r < 0.992637
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1526955484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04807 +/- 0.00331599 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.04807 @ 95%CL (1 toyMC)
median expected limit: r < 1.04807 @ 95%CL (1 toyMC)
   68% expected band : 1.04807 < r < 1.04807
   95% expected band : 1.04807 < r < 1.04807
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 820715086
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2239 +/- 0.00285481 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.2239 @ 95%CL (1 toyMC)
median expected limit: r < 1.2239 @ 95%CL (1 toyMC)
   68% expected band : 1.2239 < r < 1.2239
   95% expected band : 1.2239 < r < 1.2239
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2119955687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.494742 +/- 0.00301587 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.494742 @ 95%CL (1 toyMC)
median expected limit: r < 0.494742 @ 95%CL (1 toyMC)
   68% expected band : 0.494742 < r < 0.494742
   95% expected band : 0.494742 < r < 0.494742
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1714955722
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.635354 +/- 0.00324233 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.635354 @ 95%CL (1 toyMC)
median expected limit: r < 0.635354 @ 95%CL (1 toyMC)
   68% expected band : 0.635354 < r < 0.635354
   95% expected band : 0.635354 < r < 0.635354
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 505816431
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.925814 +/- 0.0032786 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.925814 @ 95%CL (1 toyMC)
median expected limit: r < 0.925814 @ 95%CL (1 toyMC)
   68% expected band : 0.925814 < r < 0.925814
   95% expected band : 0.925814 < r < 0.925814
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1761932527
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.642928 +/- 0.00270629 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.642928 @ 95%CL (1 toyMC)
median expected limit: r < 0.642928 @ 95%CL (1 toyMC)
   68% expected band : 0.642928 < r < 0.642928
   95% expected band : 0.642928 < r < 0.642928
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1355324897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.766016 +/- 0.00343939 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.766016 @ 95%CL (1 toyMC)
median expected limit: r < 0.766016 @ 95%CL (1 toyMC)
   68% expected band : 0.766016 < r < 0.766016
   95% expected band : 0.766016 < r < 0.766016
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1520055332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.920424 +/- 0.00320909 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.920424 @ 95%CL (1 toyMC)
median expected limit: r < 0.920424 @ 95%CL (1 toyMC)
   68% expected band : 0.920424 < r < 0.920424
   95% expected band : 0.920424 < r < 0.920424
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 722242980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52008 +/- 0.00374553 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.52008 @ 95%CL (1 toyMC)
median expected limit: r < 1.52008 @ 95%CL (1 toyMC)
   68% expected band : 1.52008 < r < 1.52008
   95% expected band : 1.52008 < r < 1.52008
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1616890534
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.615116 +/- 0.00302435 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.615116 @ 95%CL (1 toyMC)
median expected limit: r < 0.615116 @ 95%CL (1 toyMC)
   68% expected band : 0.615116 < r < 0.615116
   95% expected band : 0.615116 < r < 0.615116
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 869031521
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.616064 +/- 0.00353186 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.616064 @ 95%CL (1 toyMC)
median expected limit: r < 0.616064 @ 95%CL (1 toyMC)
   68% expected band : 0.616064 < r < 0.616064
   95% expected band : 0.616064 < r < 0.616064
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1542548992
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14651 +/- 0.00338173 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.14651 @ 95%CL (1 toyMC)
median expected limit: r < 1.14651 @ 95%CL (1 toyMC)
   68% expected band : 1.14651 < r < 1.14651
   95% expected band : 1.14651 < r < 1.14651
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2005868312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.893641 +/- 0.00293956 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.893641 @ 95%CL (1 toyMC)
median expected limit: r < 0.893641 @ 95%CL (1 toyMC)
   68% expected band : 0.893641 < r < 0.893641
   95% expected band : 0.893641 < r < 0.893641
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 559495484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.662141 +/- 0.00262775 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.662141 @ 95%CL (1 toyMC)
median expected limit: r < 0.662141 @ 95%CL (1 toyMC)
   68% expected band : 0.662141 < r < 0.662141
   95% expected band : 0.662141 < r < 0.662141
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1180924385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80262 +/- 0.00437183 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.80262 @ 95%CL (1 toyMC)
median expected limit: r < 1.80262 @ 95%CL (1 toyMC)
   68% expected band : 1.80262 < r < 1.80262
   95% expected band : 1.80262 < r < 1.80262
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 604357648
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.681663 +/- 0.00370864 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.681663 @ 95%CL (1 toyMC)
median expected limit: r < 0.681663 @ 95%CL (1 toyMC)
   68% expected band : 0.681663 < r < 0.681663
   95% expected band : 0.681663 < r < 0.681663
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2058917470
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.498057 +/- 0.002891 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.498057 @ 95%CL (1 toyMC)
median expected limit: r < 0.498057 @ 95%CL (1 toyMC)
   68% expected band : 0.498057 < r < 0.498057
   95% expected band : 0.498057 < r < 0.498057
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -197524891
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.761307 +/- 0.00289617 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.761307 @ 95%CL (1 toyMC)
median expected limit: r < 0.761307 @ 95%CL (1 toyMC)
   68% expected band : 0.761307 < r < 0.761307
   95% expected band : 0.761307 < r < 0.761307
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 501262264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.710715 +/- 0.00309444 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.710715 @ 95%CL (1 toyMC)
median expected limit: r < 0.710715 @ 95%CL (1 toyMC)
   68% expected band : 0.710715 < r < 0.710715
   95% expected band : 0.710715 < r < 0.710715
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 716164038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.924515 +/- 0.00411675 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.924515 @ 95%CL (1 toyMC)
median expected limit: r < 0.924515 @ 95%CL (1 toyMC)
   68% expected band : 0.924515 < r < 0.924515
   95% expected band : 0.924515 < r < 0.924515
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -624871393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.839222 +/- 0.00340801 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.839222 @ 95%CL (1 toyMC)
median expected limit: r < 0.839222 @ 95%CL (1 toyMC)
   68% expected band : 0.839222 < r < 0.839222
   95% expected band : 0.839222 < r < 0.839222
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1511482889
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46518 +/- 0.00317282 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.46518 @ 95%CL (1 toyMC)
median expected limit: r < 1.46518 @ 95%CL (1 toyMC)
   68% expected band : 1.46518 < r < 1.46518
   95% expected band : 1.46518 < r < 1.46518
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 762112708
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.805695 +/- 0.00270584 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 0.805695 @ 95%CL (1 toyMC)
median expected limit: r < 0.805695 @ 95%CL (1 toyMC)
   68% expected band : 0.805695 < r < 0.805695
   95% expected band : 0.805695 < r < 0.805695
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1041476471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.741271 +/- 0.00311061 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.741271 @ 95%CL (1 toyMC)
median expected limit: r < 0.741271 @ 95%CL (1 toyMC)
   68% expected band : 0.741271 < r < 0.741271
   95% expected band : 0.741271 < r < 0.741271
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -834953210
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.714526 +/- 0.00340182 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.714526 @ 95%CL (1 toyMC)
median expected limit: r < 0.714526 @ 95%CL (1 toyMC)
   68% expected band : 0.714526 < r < 0.714526
   95% expected band : 0.714526 < r < 0.714526
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 310638648
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.114 +/- 0.00285944 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.114 @ 95%CL (1 toyMC)
median expected limit: r < 1.114 @ 95%CL (1 toyMC)
   68% expected band : 1.114 < r < 1.114
   95% expected band : 1.114 < r < 1.114
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 661884319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45226 +/- 0.00434892 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.45226 @ 95%CL (1 toyMC)
median expected limit: r < 1.45226 @ 95%CL (1 toyMC)
   68% expected band : 1.45226 < r < 1.45226
   95% expected band : 1.45226 < r < 1.45226
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2003048354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.606796 +/- 0.00233755 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.606796 @ 95%CL (1 toyMC)
median expected limit: r < 0.606796 @ 95%CL (1 toyMC)
   68% expected band : 0.606796 < r < 0.606796
   95% expected band : 0.606796 < r < 0.606796
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2018388499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.818242 +/- 0.00374022 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.818242 @ 95%CL (1 toyMC)
median expected limit: r < 0.818242 @ 95%CL (1 toyMC)
   68% expected band : 0.818242 < r < 0.818242
   95% expected band : 0.818242 < r < 0.818242
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -617786842
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24856 +/- 0.00332457 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.24856 @ 95%CL (1 toyMC)
median expected limit: r < 1.24856 @ 95%CL (1 toyMC)
   68% expected band : 1.24856 < r < 1.24856
   95% expected band : 1.24856 < r < 1.24856
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1744787640
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29567 +/- 0.00372295 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.29567 @ 95%CL (1 toyMC)
median expected limit: r < 1.29567 @ 95%CL (1 toyMC)
   68% expected band : 1.29567 < r < 1.29567
   95% expected band : 1.29567 < r < 1.29567
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1417718510
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19326 +/- 0.00369068 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.19326 @ 95%CL (1 toyMC)
median expected limit: r < 1.19326 @ 95%CL (1 toyMC)
   68% expected band : 1.19326 < r < 1.19326
   95% expected band : 1.19326 < r < 1.19326
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -110811254
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15903 +/- 0.00423059 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.15903 @ 95%CL (1 toyMC)
median expected limit: r < 1.15903 @ 95%CL (1 toyMC)
   68% expected band : 1.15903 < r < 1.15903
   95% expected band : 1.15903 < r < 1.15903
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 203188973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82622 +/- 0.00462575 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.82622 @ 95%CL (1 toyMC)
median expected limit: r < 1.82622 @ 95%CL (1 toyMC)
   68% expected band : 1.82622 < r < 1.82622
   95% expected band : 1.82622 < r < 1.82622
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1032424961
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.744024 +/- 0.00340385 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.744024 @ 95%CL (1 toyMC)
median expected limit: r < 0.744024 @ 95%CL (1 toyMC)
   68% expected band : 0.744024 < r < 0.744024
   95% expected band : 0.744024 < r < 0.744024
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -406377713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.962524 +/- 0.00334936 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.962524 @ 95%CL (1 toyMC)
median expected limit: r < 0.962524 @ 95%CL (1 toyMC)
   68% expected band : 0.962524 < r < 0.962524
   95% expected band : 0.962524 < r < 0.962524
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2031432734
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.920526 +/- 0.00341157 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.920526 @ 95%CL (1 toyMC)
median expected limit: r < 0.920526 @ 95%CL (1 toyMC)
   68% expected band : 0.920526 < r < 0.920526
   95% expected band : 0.920526 < r < 0.920526
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -694341073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.768008 +/- 0.0034782 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.768008 @ 95%CL (1 toyMC)
median expected limit: r < 0.768008 @ 95%CL (1 toyMC)
   68% expected band : 0.768008 < r < 0.768008
   95% expected band : 0.768008 < r < 0.768008
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -194265500
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.902443 +/- 0.00260241 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.902443 @ 95%CL (1 toyMC)
median expected limit: r < 0.902443 @ 95%CL (1 toyMC)
   68% expected band : 0.902443 < r < 0.902443
   95% expected band : 0.902443 < r < 0.902443
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -144947002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.521668 +/- 0.0033427 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.521668 @ 95%CL (1 toyMC)
median expected limit: r < 0.521668 @ 95%CL (1 toyMC)
   68% expected band : 0.521668 < r < 0.521668
   95% expected band : 0.521668 < r < 0.521668
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 203861580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41756 +/- 0.00330261 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.41756 @ 95%CL (1 toyMC)
median expected limit: r < 1.41756 @ 95%CL (1 toyMC)
   68% expected band : 1.41756 < r < 1.41756
   95% expected band : 1.41756 < r < 1.41756
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 957768219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.889225 +/- 0.00324192 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.889225 @ 95%CL (1 toyMC)
median expected limit: r < 0.889225 @ 95%CL (1 toyMC)
   68% expected band : 0.889225 < r < 0.889225
   95% expected band : 0.889225 < r < 0.889225
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1093501495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.778035 +/- 0.00259868 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.778035 @ 95%CL (1 toyMC)
median expected limit: r < 0.778035 @ 95%CL (1 toyMC)
   68% expected band : 0.778035 < r < 0.778035
   95% expected band : 0.778035 < r < 0.778035
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1220200575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59693 +/- 0.00479648 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 1.59693 @ 95%CL (1 toyMC)
median expected limit: r < 1.59693 @ 95%CL (1 toyMC)
   68% expected band : 1.59693 < r < 1.59693
   95% expected band : 1.59693 < r < 1.59693
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 327790764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.16708 +/- 0.00345779 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.16708 @ 95%CL (1 toyMC)
median expected limit: r < 2.16708 @ 95%CL (1 toyMC)
   68% expected band : 2.16708 < r < 2.16708
   95% expected band : 2.16708 < r < 2.16708
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 260043530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.896677 +/- 0.00379459 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 0.896677 @ 95%CL (1 toyMC)
median expected limit: r < 0.896677 @ 95%CL (1 toyMC)
   68% expected band : 0.896677 < r < 0.896677
   95% expected band : 0.896677 < r < 0.896677
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1545388451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00462 +/- 0.00310838 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.00462 @ 95%CL (1 toyMC)
median expected limit: r < 1.00462 @ 95%CL (1 toyMC)
   68% expected band : 1.00462 < r < 1.00462
   95% expected band : 1.00462 < r < 1.00462
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 721970198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38468 +/- 0.00406152 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.38468 @ 95%CL (1 toyMC)
median expected limit: r < 1.38468 @ 95%CL (1 toyMC)
   68% expected band : 1.38468 < r < 1.38468
   95% expected band : 1.38468 < r < 1.38468
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -60289408
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10686 +/- 0.00322511 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.10686 @ 95%CL (1 toyMC)
median expected limit: r < 1.10686 @ 95%CL (1 toyMC)
   68% expected band : 1.10686 < r < 1.10686
   95% expected band : 1.10686 < r < 1.10686
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2027962446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.599966 +/- 0.0028109 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.599966 @ 95%CL (1 toyMC)
median expected limit: r < 0.599966 @ 95%CL (1 toyMC)
   68% expected band : 0.599966 < r < 0.599966
   95% expected band : 0.599966 < r < 0.599966
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1181798223
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.889 +/- 0.0032415 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.889 @ 95%CL (1 toyMC)
median expected limit: r < 1.889 @ 95%CL (1 toyMC)
   68% expected band : 1.889 < r < 1.889
   95% expected band : 1.889 < r < 1.889
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1759892326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.634169 +/- 0.00330318 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.634169 @ 95%CL (1 toyMC)
median expected limit: r < 0.634169 @ 95%CL (1 toyMC)
   68% expected band : 0.634169 < r < 0.634169
   95% expected band : 0.634169 < r < 0.634169
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 331319973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06876 +/- 0.0030552 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.06876 @ 95%CL (1 toyMC)
median expected limit: r < 1.06876 @ 95%CL (1 toyMC)
   68% expected band : 1.06876 < r < 1.06876
   95% expected band : 1.06876 < r < 1.06876
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1324523621
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46575 +/- 0.00450767 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.46575 @ 95%CL (1 toyMC)
median expected limit: r < 1.46575 @ 95%CL (1 toyMC)
   68% expected band : 1.46575 < r < 1.46575
   95% expected band : 1.46575 < r < 1.46575
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 624895534
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.960474 +/- 0.00343123 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.960474 @ 95%CL (1 toyMC)
median expected limit: r < 0.960474 @ 95%CL (1 toyMC)
   68% expected band : 0.960474 < r < 0.960474
   95% expected band : 0.960474 < r < 0.960474
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1603563009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20924 +/- 0.0036291 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.20924 @ 95%CL (1 toyMC)
median expected limit: r < 1.20924 @ 95%CL (1 toyMC)
   68% expected band : 1.20924 < r < 1.20924
   95% expected band : 1.20924 < r < 1.20924
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 956662989
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29229 +/- 0.00353917 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.29229 @ 95%CL (1 toyMC)
median expected limit: r < 1.29229 @ 95%CL (1 toyMC)
   68% expected band : 1.29229 < r < 1.29229
   95% expected band : 1.29229 < r < 1.29229
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1424615973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39654 +/- 0.00414181 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 1.39654 @ 95%CL (1 toyMC)
median expected limit: r < 1.39654 @ 95%CL (1 toyMC)
   68% expected band : 1.39654 < r < 1.39654
   95% expected band : 1.39654 < r < 1.39654
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -809891199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78336 +/- 0.00365584 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.78336 @ 95%CL (1 toyMC)
median expected limit: r < 1.78336 @ 95%CL (1 toyMC)
   68% expected band : 1.78336 < r < 1.78336
   95% expected band : 1.78336 < r < 1.78336
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1987599138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.773045 +/- 0.00262278 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.773045 @ 95%CL (1 toyMC)
median expected limit: r < 0.773045 @ 95%CL (1 toyMC)
   68% expected band : 0.773045 < r < 0.773045
   95% expected band : 0.773045 < r < 0.773045
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -385714331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20738 +/- 0.00355997 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.20738 @ 95%CL (1 toyMC)
median expected limit: r < 1.20738 @ 95%CL (1 toyMC)
   68% expected band : 1.20738 < r < 1.20738
   95% expected band : 1.20738 < r < 1.20738
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1195275219
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40244 +/- 0.00367655 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.40244 @ 95%CL (1 toyMC)
median expected limit: r < 1.40244 @ 95%CL (1 toyMC)
   68% expected band : 1.40244 < r < 1.40244
   95% expected band : 1.40244 < r < 1.40244
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1378742917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.736589 +/- 0.00366091 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.736589 @ 95%CL (1 toyMC)
median expected limit: r < 0.736589 @ 95%CL (1 toyMC)
   68% expected band : 0.736589 < r < 0.736589
   95% expected band : 0.736589 < r < 0.736589
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2088410649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3411 +/- 0.00322342 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.3411 @ 95%CL (1 toyMC)
median expected limit: r < 1.3411 @ 95%CL (1 toyMC)
   68% expected band : 1.3411 < r < 1.3411
   95% expected band : 1.3411 < r < 1.3411
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -603863065
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03762 +/- 0.00384839 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.03762 @ 95%CL (1 toyMC)
median expected limit: r < 1.03762 @ 95%CL (1 toyMC)
   68% expected band : 1.03762 < r < 1.03762
   95% expected band : 1.03762 < r < 1.03762
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1766122952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.823843 +/- 0.00312365 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.823843 @ 95%CL (1 toyMC)
median expected limit: r < 0.823843 @ 95%CL (1 toyMC)
   68% expected band : 0.823843 < r < 0.823843
   95% expected band : 0.823843 < r < 0.823843
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1407869190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.98412 +/- 0.00377587 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.98412 @ 95%CL (1 toyMC)
median expected limit: r < 1.98412 @ 95%CL (1 toyMC)
   68% expected band : 1.98412 < r < 1.98412
   95% expected band : 1.98412 < r < 1.98412
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1497604754
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.953046 +/- 0.0035118 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 0.953046 @ 95%CL (1 toyMC)
median expected limit: r < 0.953046 @ 95%CL (1 toyMC)
   68% expected band : 0.953046 < r < 0.953046
   95% expected band : 0.953046 < r < 0.953046
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -289766531
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53225 +/- 0.00354771 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.53225 @ 95%CL (1 toyMC)
median expected limit: r < 1.53225 @ 95%CL (1 toyMC)
   68% expected band : 1.53225 < r < 1.53225
   95% expected band : 1.53225 < r < 1.53225
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -380675391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20195 +/- 0.00410248 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.34 min (real)
mean   expected limit: r < 1.20195 @ 95%CL (1 toyMC)
median expected limit: r < 1.20195 @ 95%CL (1 toyMC)
   68% expected band : 1.20195 < r < 1.20195
   95% expected band : 1.20195 < r < 1.20195
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -137863964
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.9659 +/- 0.00306252 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.9659 @ 95%CL (1 toyMC)
median expected limit: r < 0.9659 @ 95%CL (1 toyMC)
   68% expected band : 0.9659 < r < 0.9659
   95% expected band : 0.9659 < r < 0.9659
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2053355217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.609878 +/- 0.00291869 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.609878 @ 95%CL (1 toyMC)
median expected limit: r < 0.609878 @ 95%CL (1 toyMC)
   68% expected band : 0.609878 < r < 0.609878
   95% expected band : 0.609878 < r < 0.609878
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 46129351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.894284 +/- 0.00348003 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 0.894284 @ 95%CL (1 toyMC)
median expected limit: r < 0.894284 @ 95%CL (1 toyMC)
   68% expected band : 0.894284 < r < 0.894284
   95% expected band : 0.894284 < r < 0.894284
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1050520740
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.577353 +/- 0.00347847 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 0.577353 @ 95%CL (1 toyMC)
median expected limit: r < 0.577353 @ 95%CL (1 toyMC)
   68% expected band : 0.577353 < r < 0.577353
   95% expected band : 0.577353 < r < 0.577353
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1568919348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.860087 +/- 0.00265355 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.860087 @ 95%CL (1 toyMC)
median expected limit: r < 0.860087 @ 95%CL (1 toyMC)
   68% expected band : 0.860087 < r < 0.860087
   95% expected band : 0.860087 < r < 0.860087
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1655424279
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.788569 +/- 0.00350001 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.788569 @ 95%CL (1 toyMC)
median expected limit: r < 0.788569 @ 95%CL (1 toyMC)
   68% expected band : 0.788569 < r < 0.788569
   95% expected band : 0.788569 < r < 0.788569
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1800800804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33638 +/- 0.00279632 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.33638 @ 95%CL (1 toyMC)
median expected limit: r < 1.33638 @ 95%CL (1 toyMC)
   68% expected band : 1.33638 < r < 1.33638
   95% expected band : 1.33638 < r < 1.33638
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1448821157
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27344 +/- 0.00337674 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.27344 @ 95%CL (1 toyMC)
median expected limit: r < 1.27344 @ 95%CL (1 toyMC)
   68% expected band : 1.27344 < r < 1.27344
   95% expected band : 1.27344 < r < 1.27344
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1076187948
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31785 +/- 0.00330437 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.31785 @ 95%CL (1 toyMC)
median expected limit: r < 1.31785 @ 95%CL (1 toyMC)
   68% expected band : 1.31785 < r < 1.31785
   95% expected band : 1.31785 < r < 1.31785
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 969630391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.851464 +/- 0.00353724 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.851464 @ 95%CL (1 toyMC)
median expected limit: r < 0.851464 @ 95%CL (1 toyMC)
   68% expected band : 0.851464 < r < 0.851464
   95% expected band : 0.851464 < r < 0.851464
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1699726188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04497 +/- 0.00262266 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.04497 @ 95%CL (1 toyMC)
median expected limit: r < 1.04497 @ 95%CL (1 toyMC)
   68% expected band : 1.04497 < r < 1.04497
   95% expected band : 1.04497 < r < 1.04497
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2010434122
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.833378 +/- 0.00409533 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.833378 @ 95%CL (1 toyMC)
median expected limit: r < 0.833378 @ 95%CL (1 toyMC)
   68% expected band : 0.833378 < r < 0.833378
   95% expected band : 0.833378 < r < 0.833378
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -810426430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.686065 +/- 0.00351933 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.686065 @ 95%CL (1 toyMC)
median expected limit: r < 0.686065 @ 95%CL (1 toyMC)
   68% expected band : 0.686065 < r < 0.686065
   95% expected band : 0.686065 < r < 0.686065
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 217027210
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35197 +/- 0.00287519 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.35197 @ 95%CL (1 toyMC)
median expected limit: r < 1.35197 @ 95%CL (1 toyMC)
   68% expected band : 1.35197 < r < 1.35197
   95% expected band : 1.35197 < r < 1.35197
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -803252347
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24333 +/- 0.00374513 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.24333 @ 95%CL (1 toyMC)
median expected limit: r < 1.24333 @ 95%CL (1 toyMC)
   68% expected band : 1.24333 < r < 1.24333
   95% expected band : 1.24333 < r < 1.24333
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -110715634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91998 +/- 0.00475362 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.91998 @ 95%CL (1 toyMC)
median expected limit: r < 1.91998 @ 95%CL (1 toyMC)
   68% expected band : 1.91998 < r < 1.91998
   95% expected band : 1.91998 < r < 1.91998
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 281650891
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03509 +/- 0.00362898 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.03509 @ 95%CL (1 toyMC)
median expected limit: r < 1.03509 @ 95%CL (1 toyMC)
   68% expected band : 1.03509 < r < 1.03509
   95% expected band : 1.03509 < r < 1.03509
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 861319964
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19744 +/- 0.00347023 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.19744 @ 95%CL (1 toyMC)
median expected limit: r < 1.19744 @ 95%CL (1 toyMC)
   68% expected band : 1.19744 < r < 1.19744
   95% expected band : 1.19744 < r < 1.19744
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1360151713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11465 +/- 0.00304782 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.11465 @ 95%CL (1 toyMC)
median expected limit: r < 1.11465 @ 95%CL (1 toyMC)
   68% expected band : 1.11465 < r < 1.11465
   95% expected band : 1.11465 < r < 1.11465
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 393329112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34198 +/- 0.00312125 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.34198 @ 95%CL (1 toyMC)
median expected limit: r < 1.34198 @ 95%CL (1 toyMC)
   68% expected band : 1.34198 < r < 1.34198
   95% expected band : 1.34198 < r < 1.34198
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1046195248
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50206 +/- 0.00309296 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.50206 @ 95%CL (1 toyMC)
median expected limit: r < 1.50206 @ 95%CL (1 toyMC)
   68% expected band : 1.50206 < r < 1.50206
   95% expected band : 1.50206 < r < 1.50206
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2003146646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.547557 +/- 0.00304004 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.547557 @ 95%CL (1 toyMC)
median expected limit: r < 0.547557 @ 95%CL (1 toyMC)
   68% expected band : 0.547557 < r < 0.547557
   95% expected band : 0.547557 < r < 0.547557
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1269566100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28576 +/- 0.00265891 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.28576 @ 95%CL (1 toyMC)
median expected limit: r < 1.28576 @ 95%CL (1 toyMC)
   68% expected band : 1.28576 < r < 1.28576
   95% expected band : 1.28576 < r < 1.28576
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1749992751
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10725 +/- 0.0032838 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.10725 @ 95%CL (1 toyMC)
median expected limit: r < 1.10725 @ 95%CL (1 toyMC)
   68% expected band : 1.10725 < r < 1.10725
   95% expected band : 1.10725 < r < 1.10725
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1875251357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39742 +/- 0.00352964 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.39742 @ 95%CL (1 toyMC)
median expected limit: r < 1.39742 @ 95%CL (1 toyMC)
   68% expected band : 1.39742 < r < 1.39742
   95% expected band : 1.39742 < r < 1.39742
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1913672719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58481 +/- 0.00392293 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.58481 @ 95%CL (1 toyMC)
median expected limit: r < 1.58481 @ 95%CL (1 toyMC)
   68% expected band : 1.58481 < r < 1.58481
   95% expected band : 1.58481 < r < 1.58481
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2143714658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.732151 +/- 0.00265408 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.732151 @ 95%CL (1 toyMC)
median expected limit: r < 0.732151 @ 95%CL (1 toyMC)
   68% expected band : 0.732151 < r < 0.732151
   95% expected band : 0.732151 < r < 0.732151
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1574294500
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58491 +/- 0.00352154 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.58491 @ 95%CL (1 toyMC)
median expected limit: r < 1.58491 @ 95%CL (1 toyMC)
   68% expected band : 1.58491 < r < 1.58491
   95% expected band : 1.58491 < r < 1.58491
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2038471858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64636 +/- 0.00339171 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.64636 @ 95%CL (1 toyMC)
median expected limit: r < 1.64636 @ 95%CL (1 toyMC)
   68% expected band : 1.64636 < r < 1.64636
   95% expected band : 1.64636 < r < 1.64636
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine28.MarkovChainMC.mH28.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH28.-1032424961.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH28.-1041476471.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH28.-1046195248.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH28.-1050520740.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH28.-1076187948.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH28.-1093501495.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH28.-110715634.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH28.-110811254.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH28.-1180924385.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH28.-1181798223.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH28.-1269566100.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH28.-1355324897.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH28.-137863964.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH28.-1448821157.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH28.-144947002.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH28.-1497604754.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH28.-1511482889.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH28.-1520055332.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH28.-1542548992.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH28.-1603563009.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH28.-1761932527.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH28.-194265500.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH28.-197524891.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH28.-2003048354.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH28.-2010434122.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH28.-2027962446.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH28.-2053355217.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH28.-289766531.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH28.-380675391.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH28.-385714331.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH28.-406377713.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH28.-60289408.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH28.-603863065.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH28.-617786842.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH28.-624871393.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH28.-694341073.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH28.-803252347.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH28.-809891199.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH28.-810426430.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH28.-834953210.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH28.1195275219.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH28.1220200575.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH28.1324523621.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH28.1360151713.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH28.1378742917.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH28.1407869190.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH28.1417718510.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH28.1424615973.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH28.1526955484.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH28.1545388451.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH28.1568919348.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH28.1574294500.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH28.1616890534.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH28.1655424279.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH28.1699726188.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH28.1714955722.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH28.1744787640.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH28.1749992751.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH28.1759892326.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH28.1766122952.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH28.1800800804.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH28.1875251357.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH28.1913672719.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH28.1987599138.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH28.2003146646.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH28.2005868312.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH28.2018388499.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH28.2031432734.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH28.203188973.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH28.2038471858.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH28.203861580.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH28.2058917470.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH28.2088410649.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH28.2119955687.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH28.2143714658.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH28.217027210.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH28.260043530.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH28.281650891.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH28.310638648.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH28.327790764.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH28.331319973.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH28.393329112.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH28.46129351.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH28.501262264.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH28.505816431.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH28.559495484.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH28.581441855.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH28.604357648.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH28.624895534.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH28.661884319.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH28.716164038.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH28.721970198.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH28.722242980.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH28.762112708.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH28.820715086.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH28.861319964.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH28.869031521.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH28.956662989.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH28.957768219.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH28.969630391.root
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -647728120
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70527 +/- 0.00366512 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.70527 @ 95%CL (1 toyMC)
median expected limit: r < 1.70527 @ 95%CL (1 toyMC)
   68% expected band : 1.70527 < r < 1.70527
   95% expected band : 1.70527 < r < 1.70527
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1735921023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00091 +/- 0.0045126 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.00091 @ 95%CL (1 toyMC)
median expected limit: r < 1.00091 @ 95%CL (1 toyMC)
   68% expected band : 1.00091 < r < 1.00091
   95% expected band : 1.00091 < r < 1.00091
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -550292766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00974 +/- 0.00405992 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.00974 @ 95%CL (1 toyMC)
median expected limit: r < 2.00974 @ 95%CL (1 toyMC)
   68% expected band : 2.00974 < r < 2.00974
   95% expected band : 2.00974 < r < 2.00974
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -240159929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82514 +/- 0.00366852 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 1.82514 @ 95%CL (1 toyMC)
median expected limit: r < 1.82514 @ 95%CL (1 toyMC)
   68% expected band : 1.82514 < r < 1.82514
   95% expected band : 1.82514 < r < 1.82514
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2052827981
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33283 +/- 0.00467031 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.33283 @ 95%CL (1 toyMC)
median expected limit: r < 1.33283 @ 95%CL (1 toyMC)
   68% expected band : 1.33283 < r < 1.33283
   95% expected band : 1.33283 < r < 1.33283
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1544507312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64057 +/- 0.00409969 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.64057 @ 95%CL (1 toyMC)
median expected limit: r < 1.64057 @ 95%CL (1 toyMC)
   68% expected band : 1.64057 < r < 1.64057
   95% expected band : 1.64057 < r < 1.64057
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -517678411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09673 +/- 0.00411016 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.09673 @ 95%CL (1 toyMC)
median expected limit: r < 1.09673 @ 95%CL (1 toyMC)
   68% expected band : 1.09673 < r < 1.09673
   95% expected band : 1.09673 < r < 1.09673
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1973517939
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21718 +/- 0.00424294 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.21718 @ 95%CL (1 toyMC)
median expected limit: r < 1.21718 @ 95%CL (1 toyMC)
   68% expected band : 1.21718 < r < 1.21718
   95% expected band : 1.21718 < r < 1.21718
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -456357513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5668 +/- 0.0043829 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.5668 @ 95%CL (1 toyMC)
median expected limit: r < 1.5668 @ 95%CL (1 toyMC)
   68% expected band : 1.5668 < r < 1.5668
   95% expected band : 1.5668 < r < 1.5668
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1485491651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14683 +/- 0.00389665 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.14683 @ 95%CL (1 toyMC)
median expected limit: r < 1.14683 @ 95%CL (1 toyMC)
   68% expected band : 1.14683 < r < 1.14683
   95% expected band : 1.14683 < r < 1.14683
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 915707497
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.28244 +/- 0.0058851 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 3.28244 @ 95%CL (1 toyMC)
median expected limit: r < 3.28244 @ 95%CL (1 toyMC)
   68% expected band : 3.28244 < r < 3.28244
   95% expected band : 3.28244 < r < 3.28244
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -945980861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33867 +/- 0.00481209 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.33867 @ 95%CL (1 toyMC)
median expected limit: r < 2.33867 @ 95%CL (1 toyMC)
   68% expected band : 2.33867 < r < 2.33867
   95% expected band : 2.33867 < r < 2.33867
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1026817240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.83691 +/- 0.00417986 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.83691 @ 95%CL (1 toyMC)
median expected limit: r < 1.83691 @ 95%CL (1 toyMC)
   68% expected band : 1.83691 < r < 1.83691
   95% expected band : 1.83691 < r < 1.83691
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1972319385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27491 +/- 0.00451384 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.27491 @ 95%CL (1 toyMC)
median expected limit: r < 2.27491 @ 95%CL (1 toyMC)
   68% expected band : 2.27491 < r < 2.27491
   95% expected band : 2.27491 < r < 2.27491
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 892130616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82139 +/- 0.00416337 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 1.82139 @ 95%CL (1 toyMC)
median expected limit: r < 1.82139 @ 95%CL (1 toyMC)
   68% expected band : 1.82139 < r < 1.82139
   95% expected band : 1.82139 < r < 1.82139
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 536580092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.91426 +/- 0.00298217 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.91426 @ 95%CL (1 toyMC)
median expected limit: r < 0.91426 @ 95%CL (1 toyMC)
   68% expected band : 0.91426 < r < 0.91426
   95% expected band : 0.91426 < r < 0.91426
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1842526048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64559 +/- 0.00438556 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.64559 @ 95%CL (1 toyMC)
median expected limit: r < 1.64559 @ 95%CL (1 toyMC)
   68% expected band : 1.64559 < r < 1.64559
   95% expected band : 1.64559 < r < 1.64559
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 679226572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46431 +/- 0.00342794 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.46431 @ 95%CL (1 toyMC)
median expected limit: r < 1.46431 @ 95%CL (1 toyMC)
   68% expected band : 1.46431 < r < 1.46431
   95% expected band : 1.46431 < r < 1.46431
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -38014041
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13763 +/- 0.00411876 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 3.13763 @ 95%CL (1 toyMC)
median expected limit: r < 3.13763 @ 95%CL (1 toyMC)
   68% expected band : 3.13763 < r < 3.13763
   95% expected band : 3.13763 < r < 3.13763
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2085586620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33019 +/- 0.00469353 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.33019 @ 95%CL (1 toyMC)
median expected limit: r < 2.33019 @ 95%CL (1 toyMC)
   68% expected band : 2.33019 < r < 2.33019
   95% expected band : 2.33019 < r < 2.33019
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1772760394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07649 +/- 0.00341843 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.07649 @ 95%CL (1 toyMC)
median expected limit: r < 1.07649 @ 95%CL (1 toyMC)
   68% expected band : 1.07649 < r < 1.07649
   95% expected band : 1.07649 < r < 1.07649
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1173371909
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.03694 +/- 0.00408698 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.03694 @ 95%CL (1 toyMC)
median expected limit: r < 2.03694 @ 95%CL (1 toyMC)
   68% expected band : 2.03694 < r < 2.03694
   95% expected band : 2.03694 < r < 2.03694
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1610736783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30486 +/- 0.00410451 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.30486 @ 95%CL (1 toyMC)
median expected limit: r < 1.30486 @ 95%CL (1 toyMC)
   68% expected band : 1.30486 < r < 1.30486
   95% expected band : 1.30486 < r < 1.30486
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1574982669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10505 +/- 0.00448559 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 2.10505 @ 95%CL (1 toyMC)
median expected limit: r < 2.10505 @ 95%CL (1 toyMC)
   68% expected band : 2.10505 < r < 2.10505
   95% expected band : 2.10505 < r < 2.10505
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1356854421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11334 +/- 0.00479956 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.11334 @ 95%CL (1 toyMC)
median expected limit: r < 1.11334 @ 95%CL (1 toyMC)
   68% expected band : 1.11334 < r < 1.11334
   95% expected band : 1.11334 < r < 1.11334
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 138505723
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82668 +/- 0.00443155 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.82668 @ 95%CL (1 toyMC)
median expected limit: r < 1.82668 @ 95%CL (1 toyMC)
   68% expected band : 1.82668 < r < 1.82668
   95% expected band : 1.82668 < r < 1.82668
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -602959134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63277 +/- 0.00462633 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.63277 @ 95%CL (1 toyMC)
median expected limit: r < 1.63277 @ 95%CL (1 toyMC)
   68% expected band : 1.63277 < r < 1.63277
   95% expected band : 1.63277 < r < 1.63277
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -983338686
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43937 +/- 0.00516446 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.43937 @ 95%CL (1 toyMC)
median expected limit: r < 2.43937 @ 95%CL (1 toyMC)
   68% expected band : 2.43937 < r < 2.43937
   95% expected band : 2.43937 < r < 2.43937
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1379814315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41543 +/- 0.00422908 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.41543 @ 95%CL (1 toyMC)
median expected limit: r < 1.41543 @ 95%CL (1 toyMC)
   68% expected band : 1.41543 < r < 1.41543
   95% expected band : 1.41543 < r < 1.41543
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 101071446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60517 +/- 0.00582045 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 2.60517 @ 95%CL (1 toyMC)
median expected limit: r < 2.60517 @ 95%CL (1 toyMC)
   68% expected band : 2.60517 < r < 2.60517
   95% expected band : 2.60517 < r < 2.60517
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -703222311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.62466 +/- 0.00411714 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.62466 @ 95%CL (1 toyMC)
median expected limit: r < 1.62466 @ 95%CL (1 toyMC)
   68% expected band : 1.62466 < r < 1.62466
   95% expected band : 1.62466 < r < 1.62466
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1555210
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.957485 +/- 0.0039702 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.957485 @ 95%CL (1 toyMC)
median expected limit: r < 0.957485 @ 95%CL (1 toyMC)
   68% expected band : 0.957485 < r < 0.957485
   95% expected band : 0.957485 < r < 0.957485
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1358088637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.72596 +/- 0.00415588 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 2.72596 @ 95%CL (1 toyMC)
median expected limit: r < 2.72596 @ 95%CL (1 toyMC)
   68% expected band : 2.72596 < r < 2.72596
   95% expected band : 2.72596 < r < 2.72596
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1749973136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12971 +/- 0.0046936 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 3.12971 @ 95%CL (1 toyMC)
median expected limit: r < 3.12971 @ 95%CL (1 toyMC)
   68% expected band : 3.12971 < r < 3.12971
   95% expected band : 3.12971 < r < 3.12971
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1042229842
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.02675 +/- 0.0047082 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.02675 @ 95%CL (1 toyMC)
median expected limit: r < 2.02675 @ 95%CL (1 toyMC)
   68% expected band : 2.02675 < r < 2.02675
   95% expected band : 2.02675 < r < 2.02675
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1286768153
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66744 +/- 0.00494523 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.66744 @ 95%CL (1 toyMC)
median expected limit: r < 1.66744 @ 95%CL (1 toyMC)
   68% expected band : 1.66744 < r < 1.66744
   95% expected band : 1.66744 < r < 1.66744
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2067671627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.11527 +/- 0.00447156 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.11527 @ 95%CL (1 toyMC)
median expected limit: r < 2.11527 @ 95%CL (1 toyMC)
   68% expected band : 2.11527 < r < 2.11527
   95% expected band : 2.11527 < r < 2.11527
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1061363970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81448 +/- 0.00454877 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.81448 @ 95%CL (1 toyMC)
median expected limit: r < 1.81448 @ 95%CL (1 toyMC)
   68% expected band : 1.81448 < r < 1.81448
   95% expected band : 1.81448 < r < 1.81448
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -524310184
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.79863 +/- 0.00332805 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.79863 @ 95%CL (1 toyMC)
median expected limit: r < 0.79863 @ 95%CL (1 toyMC)
   68% expected band : 0.79863 < r < 0.79863
   95% expected band : 0.79863 < r < 0.79863
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 654265472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19241 +/- 0.00395835 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.19241 @ 95%CL (1 toyMC)
median expected limit: r < 1.19241 @ 95%CL (1 toyMC)
   68% expected band : 1.19241 < r < 1.19241
   95% expected band : 1.19241 < r < 1.19241
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1580268753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.99781 +/- 0.00371111 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.99781 @ 95%CL (1 toyMC)
median expected limit: r < 0.99781 @ 95%CL (1 toyMC)
   68% expected band : 0.99781 < r < 0.99781
   95% expected band : 0.99781 < r < 0.99781
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 251879849
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21021 +/- 0.0036081 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.21021 @ 95%CL (1 toyMC)
median expected limit: r < 1.21021 @ 95%CL (1 toyMC)
   68% expected band : 1.21021 < r < 1.21021
   95% expected band : 1.21021 < r < 1.21021
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 659060001
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24046 +/- 0.00424083 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.24046 @ 95%CL (1 toyMC)
median expected limit: r < 1.24046 @ 95%CL (1 toyMC)
   68% expected band : 1.24046 < r < 1.24046
   95% expected band : 1.24046 < r < 1.24046
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1803875891
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10691 +/- 0.00454277 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.10691 @ 95%CL (1 toyMC)
median expected limit: r < 2.10691 @ 95%CL (1 toyMC)
   68% expected band : 2.10691 < r < 2.10691
   95% expected band : 2.10691 < r < 2.10691
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1085954127
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59668 +/- 0.00428857 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.59668 @ 95%CL (1 toyMC)
median expected limit: r < 1.59668 @ 95%CL (1 toyMC)
   68% expected band : 1.59668 < r < 1.59668
   95% expected band : 1.59668 < r < 1.59668
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1627306838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49247 +/- 0.00413493 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.49247 @ 95%CL (1 toyMC)
median expected limit: r < 1.49247 @ 95%CL (1 toyMC)
   68% expected band : 1.49247 < r < 1.49247
   95% expected band : 1.49247 < r < 1.49247
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -586549389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20688 +/- 0.00379406 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 1.20688 @ 95%CL (1 toyMC)
median expected limit: r < 1.20688 @ 95%CL (1 toyMC)
   68% expected band : 1.20688 < r < 1.20688
   95% expected band : 1.20688 < r < 1.20688
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 959891636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.88715 +/- 0.00328454 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.88715 @ 95%CL (1 toyMC)
median expected limit: r < 1.88715 @ 95%CL (1 toyMC)
   68% expected band : 1.88715 < r < 1.88715
   95% expected band : 1.88715 < r < 1.88715
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1904326347
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.653 +/- 0.00602079 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 3.653 @ 95%CL (1 toyMC)
median expected limit: r < 3.653 @ 95%CL (1 toyMC)
   68% expected band : 3.653 < r < 3.653
   95% expected band : 3.653 < r < 3.653
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1597456417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.801848 +/- 0.00375629 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.801848 @ 95%CL (1 toyMC)
median expected limit: r < 0.801848 @ 95%CL (1 toyMC)
   68% expected band : 0.801848 < r < 0.801848
   95% expected band : 0.801848 < r < 0.801848
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1121524974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38579 +/- 0.00414722 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.38579 @ 95%CL (1 toyMC)
median expected limit: r < 1.38579 @ 95%CL (1 toyMC)
   68% expected band : 1.38579 < r < 1.38579
   95% expected band : 1.38579 < r < 1.38579
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -198846576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.48182 +/- 0.00522084 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 2.48182 @ 95%CL (1 toyMC)
median expected limit: r < 2.48182 @ 95%CL (1 toyMC)
   68% expected band : 2.48182 < r < 2.48182
   95% expected band : 2.48182 < r < 2.48182
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1891742709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27125 +/- 0.00355365 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.27125 @ 95%CL (1 toyMC)
median expected limit: r < 1.27125 @ 95%CL (1 toyMC)
   68% expected band : 1.27125 < r < 1.27125
   95% expected band : 1.27125 < r < 1.27125
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 345114792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68914 +/- 0.00507756 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 1.68914 @ 95%CL (1 toyMC)
median expected limit: r < 1.68914 @ 95%CL (1 toyMC)
   68% expected band : 1.68914 < r < 1.68914
   95% expected band : 1.68914 < r < 1.68914
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 754426220
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.945136 +/- 0.00408631 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.945136 @ 95%CL (1 toyMC)
median expected limit: r < 0.945136 @ 95%CL (1 toyMC)
   68% expected band : 0.945136 < r < 0.945136
   95% expected band : 0.945136 < r < 0.945136
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 154364784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.24814 +/- 0.00479191 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 2.24814 @ 95%CL (1 toyMC)
median expected limit: r < 2.24814 @ 95%CL (1 toyMC)
   68% expected band : 2.24814 < r < 2.24814
   95% expected band : 2.24814 < r < 2.24814
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -985553202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.866874 +/- 0.00300813 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.866874 @ 95%CL (1 toyMC)
median expected limit: r < 0.866874 @ 95%CL (1 toyMC)
   68% expected band : 0.866874 < r < 0.866874
   95% expected band : 0.866874 < r < 0.866874
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1978323718
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09882 +/- 0.0042909 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 2.09882 @ 95%CL (1 toyMC)
median expected limit: r < 2.09882 @ 95%CL (1 toyMC)
   68% expected band : 2.09882 < r < 2.09882
   95% expected band : 2.09882 < r < 2.09882
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 524879310
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.27073 +/- 0.00477536 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.27073 @ 95%CL (1 toyMC)
median expected limit: r < 2.27073 @ 95%CL (1 toyMC)
   68% expected band : 2.27073 < r < 2.27073
   95% expected band : 2.27073 < r < 2.27073
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1225231334
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39894 +/- 0.00401564 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.39894 @ 95%CL (1 toyMC)
median expected limit: r < 1.39894 @ 95%CL (1 toyMC)
   68% expected band : 1.39894 < r < 1.39894
   95% expected band : 1.39894 < r < 1.39894
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1485011550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.73468 +/- 0.0050773 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 3.73468 @ 95%CL (1 toyMC)
median expected limit: r < 3.73468 @ 95%CL (1 toyMC)
   68% expected band : 3.73468 < r < 3.73468
   95% expected band : 3.73468 < r < 3.73468
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1659951691
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.94896 +/- 0.00373561 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.94896 @ 95%CL (1 toyMC)
median expected limit: r < 1.94896 @ 95%CL (1 toyMC)
   68% expected band : 1.94896 < r < 1.94896
   95% expected band : 1.94896 < r < 1.94896
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1857506575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52777 +/- 0.00436301 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.52777 @ 95%CL (1 toyMC)
median expected limit: r < 1.52777 @ 95%CL (1 toyMC)
   68% expected band : 1.52777 < r < 1.52777
   95% expected band : 1.52777 < r < 1.52777
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 34448124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40692 +/- 0.0040842 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.40692 @ 95%CL (1 toyMC)
median expected limit: r < 1.40692 @ 95%CL (1 toyMC)
   68% expected band : 1.40692 < r < 1.40692
   95% expected band : 1.40692 < r < 1.40692
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1987843692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.0295 +/- 0.00467573 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.0295 @ 95%CL (1 toyMC)
median expected limit: r < 2.0295 @ 95%CL (1 toyMC)
   68% expected band : 2.0295 < r < 2.0295
   95% expected band : 2.0295 < r < 2.0295
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1461605331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74637 +/- 0.00504434 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.74637 @ 95%CL (1 toyMC)
median expected limit: r < 1.74637 @ 95%CL (1 toyMC)
   68% expected band : 1.74637 < r < 1.74637
   95% expected band : 1.74637 < r < 1.74637
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1333440628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18007 +/- 0.0036507 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.18007 @ 95%CL (1 toyMC)
median expected limit: r < 1.18007 @ 95%CL (1 toyMC)
   68% expected band : 1.18007 < r < 1.18007
   95% expected band : 1.18007 < r < 1.18007
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2014569289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74718 +/- 0.00409758 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 1.74718 @ 95%CL (1 toyMC)
median expected limit: r < 1.74718 @ 95%CL (1 toyMC)
   68% expected band : 1.74718 < r < 1.74718
   95% expected band : 1.74718 < r < 1.74718
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1457549606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63384 +/- 0.0040272 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.63384 @ 95%CL (1 toyMC)
median expected limit: r < 1.63384 @ 95%CL (1 toyMC)
   68% expected band : 1.63384 < r < 1.63384
   95% expected band : 1.63384 < r < 1.63384
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2133256558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68159 +/- 0.00418424 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.68159 @ 95%CL (1 toyMC)
median expected limit: r < 1.68159 @ 95%CL (1 toyMC)
   68% expected band : 1.68159 < r < 1.68159
   95% expected band : 1.68159 < r < 1.68159
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 834126958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21098 +/- 0.00333235 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.21098 @ 95%CL (1 toyMC)
median expected limit: r < 1.21098 @ 95%CL (1 toyMC)
   68% expected band : 1.21098 < r < 1.21098
   95% expected band : 1.21098 < r < 1.21098
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1911688611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43057 +/- 0.00394638 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.43057 @ 95%CL (1 toyMC)
median expected limit: r < 1.43057 @ 95%CL (1 toyMC)
   68% expected band : 1.43057 < r < 1.43057
   95% expected band : 1.43057 < r < 1.43057
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 111779985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81869 +/- 0.00419164 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 1.81869 @ 95%CL (1 toyMC)
median expected limit: r < 1.81869 @ 95%CL (1 toyMC)
   68% expected band : 1.81869 < r < 1.81869
   95% expected band : 1.81869 < r < 1.81869
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1502640904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62106 +/- 0.00494964 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.62106 @ 95%CL (1 toyMC)
median expected limit: r < 2.62106 @ 95%CL (1 toyMC)
   68% expected band : 2.62106 < r < 2.62106
   95% expected band : 2.62106 < r < 2.62106
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1895336103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44057 +/- 0.0039383 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.44057 @ 95%CL (1 toyMC)
median expected limit: r < 1.44057 @ 95%CL (1 toyMC)
   68% expected band : 1.44057 < r < 1.44057
   95% expected band : 1.44057 < r < 1.44057
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 890480391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50552 +/- 0.00378918 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.50552 @ 95%CL (1 toyMC)
median expected limit: r < 1.50552 @ 95%CL (1 toyMC)
   68% expected band : 1.50552 < r < 1.50552
   95% expected band : 1.50552 < r < 1.50552
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -8238214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36 +/- 0.00310624 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.36 @ 95%CL (1 toyMC)
median expected limit: r < 1.36 @ 95%CL (1 toyMC)
   68% expected band : 1.36 < r < 1.36
   95% expected band : 1.36 < r < 1.36
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1039814319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39158 +/- 0.00375151 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.39158 @ 95%CL (1 toyMC)
median expected limit: r < 1.39158 @ 95%CL (1 toyMC)
   68% expected band : 1.39158 < r < 1.39158
   95% expected band : 1.39158 < r < 1.39158
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1925508303
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69472 +/- 0.00426859 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.69472 @ 95%CL (1 toyMC)
median expected limit: r < 1.69472 @ 95%CL (1 toyMC)
   68% expected band : 1.69472 < r < 1.69472
   95% expected band : 1.69472 < r < 1.69472
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 194370405
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01893 +/- 0.00355373 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.01893 @ 95%CL (1 toyMC)
median expected limit: r < 1.01893 @ 95%CL (1 toyMC)
   68% expected band : 1.01893 < r < 1.01893
   95% expected band : 1.01893 < r < 1.01893
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -717184383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36166 +/- 0.00343355 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 1.36166 @ 95%CL (1 toyMC)
median expected limit: r < 1.36166 @ 95%CL (1 toyMC)
   68% expected band : 1.36166 < r < 1.36166
   95% expected band : 1.36166 < r < 1.36166
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1467738584
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16325 +/- 0.00579725 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 3.16325 @ 95%CL (1 toyMC)
median expected limit: r < 3.16325 @ 95%CL (1 toyMC)
   68% expected band : 3.16325 < r < 3.16325
   95% expected band : 3.16325 < r < 3.16325
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -18138073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39975 +/- 0.00492119 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.39975 @ 95%CL (1 toyMC)
median expected limit: r < 1.39975 @ 95%CL (1 toyMC)
   68% expected band : 1.39975 < r < 1.39975
   95% expected band : 1.39975 < r < 1.39975
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2143472106
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74566 +/- 0.00438117 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.74566 @ 95%CL (1 toyMC)
median expected limit: r < 1.74566 @ 95%CL (1 toyMC)
   68% expected band : 1.74566 < r < 1.74566
   95% expected band : 1.74566 < r < 1.74566
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 918146335
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34572 +/- 0.00321214 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.34572 @ 95%CL (1 toyMC)
median expected limit: r < 1.34572 @ 95%CL (1 toyMC)
   68% expected band : 1.34572 < r < 1.34572
   95% expected band : 1.34572 < r < 1.34572
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 829896099
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59865 +/- 0.00477149 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.59865 @ 95%CL (1 toyMC)
median expected limit: r < 2.59865 @ 95%CL (1 toyMC)
   68% expected band : 2.59865 < r < 2.59865
   95% expected band : 2.59865 < r < 2.59865
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1589492069
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45295 +/- 0.00362961 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.45295 @ 95%CL (1 toyMC)
median expected limit: r < 1.45295 @ 95%CL (1 toyMC)
   68% expected band : 1.45295 < r < 1.45295
   95% expected band : 1.45295 < r < 1.45295
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -953123038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29074 +/- 0.0045494 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.29074 @ 95%CL (1 toyMC)
median expected limit: r < 1.29074 @ 95%CL (1 toyMC)
   68% expected band : 1.29074 < r < 1.29074
   95% expected band : 1.29074 < r < 1.29074
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1868090005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08122 +/- 0.00388168 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.08122 @ 95%CL (1 toyMC)
median expected limit: r < 1.08122 @ 95%CL (1 toyMC)
   68% expected band : 1.08122 < r < 1.08122
   95% expected band : 1.08122 < r < 1.08122
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 830853632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58854 +/- 0.00490846 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.58854 @ 95%CL (1 toyMC)
median expected limit: r < 2.58854 @ 95%CL (1 toyMC)
   68% expected band : 2.58854 < r < 2.58854
   95% expected band : 2.58854 < r < 2.58854
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1756575488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.935405 +/- 0.00337635 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.935405 @ 95%CL (1 toyMC)
median expected limit: r < 0.935405 @ 95%CL (1 toyMC)
   68% expected band : 0.935405 < r < 0.935405
   95% expected band : 0.935405 < r < 0.935405
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -299537306
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03584 +/- 0.00393547 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.03584 @ 95%CL (1 toyMC)
median expected limit: r < 1.03584 @ 95%CL (1 toyMC)
   68% expected band : 1.03584 < r < 1.03584
   95% expected band : 1.03584 < r < 1.03584
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -573441042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21531 +/- 0.00349524 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.21531 @ 95%CL (1 toyMC)
median expected limit: r < 1.21531 @ 95%CL (1 toyMC)
   68% expected band : 1.21531 < r < 1.21531
   95% expected band : 1.21531 < r < 1.21531
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 51385938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10536 +/- 0.00522663 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.10536 @ 95%CL (1 toyMC)
median expected limit: r < 2.10536 @ 95%CL (1 toyMC)
   68% expected band : 2.10536 < r < 2.10536
   95% expected band : 2.10536 < r < 2.10536
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 817985016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70054 +/- 0.00382989 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.70054 @ 95%CL (1 toyMC)
median expected limit: r < 1.70054 @ 95%CL (1 toyMC)
   68% expected band : 1.70054 < r < 1.70054
   95% expected band : 1.70054 < r < 1.70054
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1569140952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69977 +/- 0.00369006 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.69977 @ 95%CL (1 toyMC)
median expected limit: r < 1.69977 @ 95%CL (1 toyMC)
   68% expected band : 1.69977 < r < 1.69977
   95% expected band : 1.69977 < r < 1.69977
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 205561931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33759 +/- 0.00503121 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.33759 @ 95%CL (1 toyMC)
median expected limit: r < 2.33759 @ 95%CL (1 toyMC)
   68% expected band : 2.33759 < r < 2.33759
   95% expected band : 2.33759 < r < 2.33759
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1102519726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.83225 +/- 0.00271442 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.83225 @ 95%CL (1 toyMC)
median expected limit: r < 0.83225 @ 95%CL (1 toyMC)
   68% expected band : 0.83225 < r < 0.83225
   95% expected band : 0.83225 < r < 0.83225
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1802388118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13722 +/- 0.00488528 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.13722 @ 95%CL (1 toyMC)
median expected limit: r < 2.13722 @ 95%CL (1 toyMC)
   68% expected band : 2.13722 < r < 2.13722
   95% expected band : 2.13722 < r < 2.13722
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 333605543
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71084 +/- 0.00375018 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.71084 @ 95%CL (1 toyMC)
median expected limit: r < 1.71084 @ 95%CL (1 toyMC)
   68% expected band : 1.71084 < r < 1.71084
   95% expected band : 1.71084 < r < 1.71084
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine32.MarkovChainMC.mH32.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH32.-1026817240.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH32.-1102519726.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH32.-1121524974.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH32.-1286768153.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH32.-1457549606.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH32.-1467738584.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH32.-1485491651.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH32.-1502640904.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH32.-1555210.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH32.-1574982669.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH32.-1580268753.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH32.-1772760394.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH32.-1803875891.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH32.-18138073.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH32.-1868090005.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH32.-1925508303.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH32.-198846576.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH32.-2067671627.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH32.-2085586620.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH32.-2133256558.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH32.-2143472106.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH32.-240159929.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH32.-299537306.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH32.-38014041.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH32.-456357513.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH32.-517678411.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH32.-524310184.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH32.-550292766.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH32.-573441042.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH32.-586549389.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH32.-602959134.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH32.-647728120.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH32.-703222311.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH32.-717184383.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH32.-8238214.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH32.-945980861.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH32.-953123038.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH32.-983338686.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH32.-985553202.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH32.101071446.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH32.1039814319.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH32.1042229842.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH32.1061363970.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH32.1085954127.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH32.111779985.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH32.1173371909.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH32.1225231334.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH32.1333440628.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH32.1356854421.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH32.1358088637.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH32.1379814315.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH32.138505723.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH32.1461605331.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH32.1485011550.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH32.154364784.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH32.1544507312.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH32.1569140952.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH32.1589492069.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH32.1597456417.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH32.1610736783.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH32.1627306838.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH32.1659951691.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH32.1735921023.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH32.1749973136.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH32.1756575488.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH32.1802388118.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH32.1842526048.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH32.1857506575.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH32.1891742709.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH32.1895336103.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH32.1904326347.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH32.1911688611.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH32.194370405.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH32.1972319385.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH32.1973517939.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH32.1978323718.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH32.1987843692.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH32.2014569289.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH32.2052827981.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH32.205561931.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH32.251879849.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH32.333605543.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH32.34448124.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH32.345114792.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH32.51385938.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH32.524879310.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH32.536580092.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH32.654265472.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH32.659060001.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH32.679226572.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH32.754426220.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH32.817985016.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH32.829896099.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH32.830853632.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH32.834126958.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH32.890480391.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH32.892130616.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH32.915707497.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH32.918146335.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH32.959891636.root
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 61020205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.16428 +/- 0.0045667 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.16428 @ 95%CL (1 toyMC)
median expected limit: r < 2.16428 @ 95%CL (1 toyMC)
   68% expected band : 2.16428 < r < 2.16428
   95% expected band : 2.16428 < r < 2.16428
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1471889735
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52693 +/- 0.00454874 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.52693 @ 95%CL (1 toyMC)
median expected limit: r < 1.52693 @ 95%CL (1 toyMC)
   68% expected band : 1.52693 < r < 1.52693
   95% expected band : 1.52693 < r < 1.52693
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1801044598
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.49978 +/- 0.00535971 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 4.49978 @ 95%CL (1 toyMC)
median expected limit: r < 4.49978 @ 95%CL (1 toyMC)
   68% expected band : 4.49978 < r < 4.49978
   95% expected band : 4.49978 < r < 4.49978
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -578790652
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.96458 +/- 0.00471291 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.96458 @ 95%CL (1 toyMC)
median expected limit: r < 1.96458 @ 95%CL (1 toyMC)
   68% expected band : 1.96458 < r < 1.96458
   95% expected band : 1.96458 < r < 1.96458
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -49493478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.47642 +/- 0.00561031 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 3.47642 @ 95%CL (1 toyMC)
median expected limit: r < 3.47642 @ 95%CL (1 toyMC)
   68% expected band : 3.47642 < r < 3.47642
   95% expected band : 3.47642 < r < 3.47642
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -519890576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73952 +/- 0.00508787 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.73952 @ 95%CL (1 toyMC)
median expected limit: r < 1.73952 @ 95%CL (1 toyMC)
   68% expected band : 1.73952 < r < 1.73952
   95% expected band : 1.73952 < r < 1.73952
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1197339791
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67534 +/- 0.00543839 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.67534 @ 95%CL (1 toyMC)
median expected limit: r < 1.67534 @ 95%CL (1 toyMC)
   68% expected band : 1.67534 < r < 1.67534
   95% expected band : 1.67534 < r < 1.67534
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1318843186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.326 +/- 0.00470732 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.326 @ 95%CL (1 toyMC)
median expected limit: r < 2.326 @ 95%CL (1 toyMC)
   68% expected band : 2.326 < r < 2.326
   95% expected band : 2.326 < r < 2.326
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -470347496
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.17161 +/- 0.00629543 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 3.17161 @ 95%CL (1 toyMC)
median expected limit: r < 3.17161 @ 95%CL (1 toyMC)
   68% expected band : 3.17161 < r < 3.17161
   95% expected band : 3.17161 < r < 3.17161
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1870571614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50846 +/- 0.00582512 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.50846 @ 95%CL (1 toyMC)
median expected limit: r < 2.50846 @ 95%CL (1 toyMC)
   68% expected band : 2.50846 < r < 2.50846
   95% expected band : 2.50846 < r < 2.50846
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 617377348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.15277 +/- 0.00621701 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 5.15277 @ 95%CL (1 toyMC)
median expected limit: r < 5.15277 @ 95%CL (1 toyMC)
   68% expected band : 5.15277 < r < 5.15277
   95% expected band : 5.15277 < r < 5.15277
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 627177980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2072 +/- 0.00498174 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.2072 @ 95%CL (1 toyMC)
median expected limit: r < 2.2072 @ 95%CL (1 toyMC)
   68% expected band : 2.2072 < r < 2.2072
   95% expected band : 2.2072 < r < 2.2072
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 654082136
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.53396 +/- 0.00603707 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 3.53396 @ 95%CL (1 toyMC)
median expected limit: r < 3.53396 @ 95%CL (1 toyMC)
   68% expected band : 3.53396 < r < 3.53396
   95% expected band : 3.53396 < r < 3.53396
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -165451595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77135 +/- 0.00477558 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.77135 @ 95%CL (1 toyMC)
median expected limit: r < 1.77135 @ 95%CL (1 toyMC)
   68% expected band : 1.77135 < r < 1.77135
   95% expected band : 1.77135 < r < 1.77135
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -866744631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17857 +/- 0.00540333 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.17857 @ 95%CL (1 toyMC)
median expected limit: r < 2.17857 @ 95%CL (1 toyMC)
   68% expected band : 2.17857 < r < 2.17857
   95% expected band : 2.17857 < r < 2.17857
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1675598482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.05168 +/- 0.00559324 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 4.05168 @ 95%CL (1 toyMC)
median expected limit: r < 4.05168 @ 95%CL (1 toyMC)
   68% expected band : 4.05168 < r < 4.05168
   95% expected band : 4.05168 < r < 4.05168
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -684575972
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49357 +/- 0.00605761 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.49357 @ 95%CL (1 toyMC)
median expected limit: r < 2.49357 @ 95%CL (1 toyMC)
   68% expected band : 2.49357 < r < 2.49357
   95% expected band : 2.49357 < r < 2.49357
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 925591896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.95051 +/- 0.00495426 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 3.95051 @ 95%CL (1 toyMC)
median expected limit: r < 3.95051 @ 95%CL (1 toyMC)
   68% expected band : 3.95051 < r < 3.95051
   95% expected band : 3.95051 < r < 3.95051
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1091470383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.8249 +/- 0.00512705 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.8249 @ 95%CL (1 toyMC)
median expected limit: r < 2.8249 @ 95%CL (1 toyMC)
   68% expected band : 2.8249 < r < 2.8249
   95% expected band : 2.8249 < r < 2.8249
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 78843770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.83491 +/- 0.00464166 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.83491 @ 95%CL (1 toyMC)
median expected limit: r < 2.83491 @ 95%CL (1 toyMC)
   68% expected band : 2.83491 < r < 2.83491
   95% expected band : 2.83491 < r < 2.83491
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2110502405
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5052 +/- 0.00546726 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.5052 @ 95%CL (1 toyMC)
median expected limit: r < 1.5052 @ 95%CL (1 toyMC)
   68% expected band : 1.5052 < r < 1.5052
   95% expected band : 1.5052 < r < 1.5052
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1368790757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.28529 +/- 0.0062 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 3.28529 @ 95%CL (1 toyMC)
median expected limit: r < 3.28529 @ 95%CL (1 toyMC)
   68% expected band : 3.28529 < r < 3.28529
   95% expected band : 3.28529 < r < 3.28529
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 184327283
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.77703 +/- 0.00682134 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 4.77703 @ 95%CL (1 toyMC)
median expected limit: r < 4.77703 @ 95%CL (1 toyMC)
   68% expected band : 4.77703 < r < 4.77703
   95% expected band : 4.77703 < r < 4.77703
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -408625451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59672 +/- 0.00385663 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.59672 @ 95%CL (1 toyMC)
median expected limit: r < 1.59672 @ 95%CL (1 toyMC)
   68% expected band : 1.59672 < r < 1.59672
   95% expected band : 1.59672 < r < 1.59672
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1024077924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.89884 +/- 0.00394311 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.89884 @ 95%CL (1 toyMC)
median expected limit: r < 1.89884 @ 95%CL (1 toyMC)
   68% expected band : 1.89884 < r < 1.89884
   95% expected band : 1.89884 < r < 1.89884
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -747359612
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25241 +/- 0.00513274 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 3.25241 @ 95%CL (1 toyMC)
median expected limit: r < 3.25241 @ 95%CL (1 toyMC)
   68% expected band : 3.25241 < r < 3.25241
   95% expected band : 3.25241 < r < 3.25241
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -961876389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.54365 +/- 0.00603084 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 3.54365 @ 95%CL (1 toyMC)
median expected limit: r < 3.54365 @ 95%CL (1 toyMC)
   68% expected band : 3.54365 < r < 3.54365
   95% expected band : 3.54365 < r < 3.54365
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2089190825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12745 +/- 0.00554353 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 3.12745 @ 95%CL (1 toyMC)
median expected limit: r < 3.12745 @ 95%CL (1 toyMC)
   68% expected band : 3.12745 < r < 3.12745
   95% expected band : 3.12745 < r < 3.12745
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 693354905
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.31043 +/- 0.00545141 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 2.31043 @ 95%CL (1 toyMC)
median expected limit: r < 2.31043 @ 95%CL (1 toyMC)
   68% expected band : 2.31043 < r < 2.31043
   95% expected band : 2.31043 < r < 2.31043
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1355592221
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24355 +/- 0.00652369 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 3.24355 @ 95%CL (1 toyMC)
median expected limit: r < 3.24355 @ 95%CL (1 toyMC)
   68% expected band : 3.24355 < r < 3.24355
   95% expected band : 3.24355 < r < 3.24355
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 471936748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25551 +/- 0.00571769 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 3.25551 @ 95%CL (1 toyMC)
median expected limit: r < 3.25551 @ 95%CL (1 toyMC)
   68% expected band : 3.25551 < r < 3.25551
   95% expected band : 3.25551 < r < 3.25551
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1332098686
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6195 +/- 0.00377265 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.6195 @ 95%CL (1 toyMC)
median expected limit: r < 1.6195 @ 95%CL (1 toyMC)
   68% expected band : 1.6195 < r < 1.6195
   95% expected band : 1.6195 < r < 1.6195
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1705703393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58425 +/- 0.00524324 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.58425 @ 95%CL (1 toyMC)
median expected limit: r < 1.58425 @ 95%CL (1 toyMC)
   68% expected band : 1.58425 < r < 1.58425
   95% expected band : 1.58425 < r < 1.58425
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1153700070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66235 +/- 0.00530888 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.66235 @ 95%CL (1 toyMC)
median expected limit: r < 2.66235 @ 95%CL (1 toyMC)
   68% expected band : 2.66235 < r < 2.66235
   95% expected band : 2.66235 < r < 2.66235
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1646550701
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82494 +/- 0.00366053 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.82494 @ 95%CL (1 toyMC)
median expected limit: r < 1.82494 @ 95%CL (1 toyMC)
   68% expected band : 1.82494 < r < 1.82494
   95% expected band : 1.82494 < r < 1.82494
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 306024841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.07653 +/- 0.0064998 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 4.07653 @ 95%CL (1 toyMC)
median expected limit: r < 4.07653 @ 95%CL (1 toyMC)
   68% expected band : 4.07653 < r < 4.07653
   95% expected band : 4.07653 < r < 4.07653
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1062046817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.97546 +/- 0.00452223 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 2.97546 @ 95%CL (1 toyMC)
median expected limit: r < 2.97546 @ 95%CL (1 toyMC)
   68% expected band : 2.97546 < r < 2.97546
   95% expected band : 2.97546 < r < 2.97546
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1475114507
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.12866 +/- 0.0058591 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 5.12866 @ 95%CL (1 toyMC)
median expected limit: r < 5.12866 @ 95%CL (1 toyMC)
   68% expected band : 5.12866 < r < 5.12866
   95% expected band : 5.12866 < r < 5.12866
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 536517803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.72893 +/- 0.00585418 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.72893 @ 95%CL (1 toyMC)
median expected limit: r < 2.72893 @ 95%CL (1 toyMC)
   68% expected band : 2.72893 < r < 2.72893
   95% expected band : 2.72893 < r < 2.72893
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 326417432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43221 +/- 0.00480651 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 2.43221 @ 95%CL (1 toyMC)
median expected limit: r < 2.43221 @ 95%CL (1 toyMC)
   68% expected band : 2.43221 < r < 2.43221
   95% expected band : 2.43221 < r < 2.43221
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 20235979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66603 +/- 0.00578736 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.66603 @ 95%CL (1 toyMC)
median expected limit: r < 2.66603 @ 95%CL (1 toyMC)
   68% expected band : 2.66603 < r < 2.66603
   95% expected band : 2.66603 < r < 2.66603
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1563689286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65261 +/- 0.00484823 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.65261 @ 95%CL (1 toyMC)
median expected limit: r < 1.65261 @ 95%CL (1 toyMC)
   68% expected band : 1.65261 < r < 1.65261
   95% expected band : 1.65261 < r < 1.65261
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 866146525
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.89424 +/- 0.00403247 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.89424 @ 95%CL (1 toyMC)
median expected limit: r < 2.89424 @ 95%CL (1 toyMC)
   68% expected band : 2.89424 < r < 2.89424
   95% expected band : 2.89424 < r < 2.89424
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2050063442
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.44705 +/- 0.00543835 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 2.44705 @ 95%CL (1 toyMC)
median expected limit: r < 2.44705 @ 95%CL (1 toyMC)
   68% expected band : 2.44705 < r < 2.44705
   95% expected band : 2.44705 < r < 2.44705
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -978932341
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47067 +/- 0.00649044 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.47067 @ 95%CL (1 toyMC)
median expected limit: r < 2.47067 @ 95%CL (1 toyMC)
   68% expected band : 2.47067 < r < 2.47067
   95% expected band : 2.47067 < r < 2.47067
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1404912842
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64342 +/- 0.00560435 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.64342 @ 95%CL (1 toyMC)
median expected limit: r < 2.64342 @ 95%CL (1 toyMC)
   68% expected band : 2.64342 < r < 2.64342
   95% expected band : 2.64342 < r < 2.64342
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1527498705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99228 +/- 0.00477322 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 1.99228 @ 95%CL (1 toyMC)
median expected limit: r < 1.99228 @ 95%CL (1 toyMC)
   68% expected band : 1.99228 < r < 1.99228
   95% expected band : 1.99228 < r < 1.99228
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 432507616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7772 +/- 0.00508764 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.7772 @ 95%CL (1 toyMC)
median expected limit: r < 2.7772 @ 95%CL (1 toyMC)
   68% expected band : 2.7772 < r < 2.7772
   95% expected band : 2.7772 < r < 2.7772
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 909811564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.01761 +/- 0.00440354 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.01761 @ 95%CL (1 toyMC)
median expected limit: r < 2.01761 @ 95%CL (1 toyMC)
   68% expected band : 2.01761 < r < 2.01761
   95% expected band : 2.01761 < r < 2.01761
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -774263838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.75728 +/- 0.00547336 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 3.75728 @ 95%CL (1 toyMC)
median expected limit: r < 3.75728 @ 95%CL (1 toyMC)
   68% expected band : 3.75728 < r < 3.75728
   95% expected band : 3.75728 < r < 3.75728
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1129774137
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8387 +/- 0.0050974 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.8387 @ 95%CL (1 toyMC)
median expected limit: r < 1.8387 @ 95%CL (1 toyMC)
   68% expected band : 1.8387 < r < 1.8387
   95% expected band : 1.8387 < r < 1.8387
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 12134803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91236 +/- 0.00462549 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.91236 @ 95%CL (1 toyMC)
median expected limit: r < 1.91236 @ 95%CL (1 toyMC)
   68% expected band : 1.91236 < r < 1.91236
   95% expected band : 1.91236 < r < 1.91236
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1544782652
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.65838 +/- 0.00534477 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 3.65838 @ 95%CL (1 toyMC)
median expected limit: r < 3.65838 @ 95%CL (1 toyMC)
   68% expected band : 3.65838 < r < 3.65838
   95% expected band : 3.65838 < r < 3.65838
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 693179413
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.3684 +/- 0.00721151 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 3.3684 @ 95%CL (1 toyMC)
median expected limit: r < 3.3684 @ 95%CL (1 toyMC)
   68% expected band : 3.3684 < r < 3.3684
   95% expected band : 3.3684 < r < 3.3684
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1158773633
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.61323 +/- 0.00447575 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.61323 @ 95%CL (1 toyMC)
median expected limit: r < 2.61323 @ 95%CL (1 toyMC)
   68% expected band : 2.61323 < r < 2.61323
   95% expected band : 2.61323 < r < 2.61323
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -490166426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58953 +/- 0.00478454 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.58953 @ 95%CL (1 toyMC)
median expected limit: r < 2.58953 @ 95%CL (1 toyMC)
   68% expected band : 2.58953 < r < 2.58953
   95% expected band : 2.58953 < r < 2.58953
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 78662376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12031 +/- 0.00607603 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 3.12031 @ 95%CL (1 toyMC)
median expected limit: r < 3.12031 @ 95%CL (1 toyMC)
   68% expected band : 3.12031 < r < 3.12031
   95% expected band : 3.12031 < r < 3.12031
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1042411114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.61862 +/- 0.00517269 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.61862 @ 95%CL (1 toyMC)
median expected limit: r < 2.61862 @ 95%CL (1 toyMC)
   68% expected band : 2.61862 < r < 2.61862
   95% expected band : 2.61862 < r < 2.61862
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1332134996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.38927 +/- 0.00489082 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.38927 @ 95%CL (1 toyMC)
median expected limit: r < 2.38927 @ 95%CL (1 toyMC)
   68% expected band : 2.38927 < r < 2.38927
   95% expected band : 2.38927 < r < 2.38927
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1187220160
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81904 +/- 0.00403149 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.81904 @ 95%CL (1 toyMC)
median expected limit: r < 1.81904 @ 95%CL (1 toyMC)
   68% expected band : 1.81904 < r < 1.81904
   95% expected band : 1.81904 < r < 1.81904
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1001326036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82566 +/- 0.00482222 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 1.82566 @ 95%CL (1 toyMC)
median expected limit: r < 1.82566 @ 95%CL (1 toyMC)
   68% expected band : 1.82566 < r < 1.82566
   95% expected band : 1.82566 < r < 1.82566
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 144610546
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.29246 +/- 0.00726144 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 3.29246 @ 95%CL (1 toyMC)
median expected limit: r < 3.29246 @ 95%CL (1 toyMC)
   68% expected band : 3.29246 < r < 3.29246
   95% expected band : 3.29246 < r < 3.29246
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1263400344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04597 +/- 0.00503749 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.04597 @ 95%CL (1 toyMC)
median expected limit: r < 2.04597 @ 95%CL (1 toyMC)
   68% expected band : 2.04597 < r < 2.04597
   95% expected band : 2.04597 < r < 2.04597
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1672428773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04833 +/- 0.00511796 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 3.04833 @ 95%CL (1 toyMC)
median expected limit: r < 3.04833 @ 95%CL (1 toyMC)
   68% expected band : 3.04833 < r < 3.04833
   95% expected band : 3.04833 < r < 3.04833
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 265528355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32153 +/- 0.00501016 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.32153 @ 95%CL (1 toyMC)
median expected limit: r < 2.32153 @ 95%CL (1 toyMC)
   68% expected band : 2.32153 < r < 2.32153
   95% expected band : 2.32153 < r < 2.32153
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1500887923
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23835 +/- 0.00446029 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.23835 @ 95%CL (1 toyMC)
median expected limit: r < 1.23835 @ 95%CL (1 toyMC)
   68% expected band : 1.23835 < r < 1.23835
   95% expected band : 1.23835 < r < 1.23835
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1817772885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.05089 +/- 0.00605339 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 3.05089 @ 95%CL (1 toyMC)
median expected limit: r < 3.05089 @ 95%CL (1 toyMC)
   68% expected band : 3.05089 < r < 3.05089
   95% expected band : 3.05089 < r < 3.05089
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -246229959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2086 +/- 0.00610988 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.2086 @ 95%CL (1 toyMC)
median expected limit: r < 2.2086 @ 95%CL (1 toyMC)
   68% expected band : 2.2086 < r < 2.2086
   95% expected band : 2.2086 < r < 2.2086
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 452602622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.06145 +/- 0.0081703 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 4.06145 @ 95%CL (1 toyMC)
median expected limit: r < 4.06145 @ 95%CL (1 toyMC)
   68% expected band : 4.06145 < r < 4.06145
   95% expected band : 4.06145 < r < 4.06145
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1401132353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.36733 +/- 0.00627063 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 4.36733 @ 95%CL (1 toyMC)
median expected limit: r < 4.36733 @ 95%CL (1 toyMC)
   68% expected band : 4.36733 < r < 4.36733
   95% expected band : 4.36733 < r < 4.36733
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1096844693
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60241 +/- 0.00578701 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 2.60241 @ 95%CL (1 toyMC)
median expected limit: r < 2.60241 @ 95%CL (1 toyMC)
   68% expected band : 2.60241 < r < 2.60241
   95% expected band : 2.60241 < r < 2.60241
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 332586235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.89158 +/- 0.0042415 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 1.89158 @ 95%CL (1 toyMC)
median expected limit: r < 1.89158 @ 95%CL (1 toyMC)
   68% expected band : 1.89158 < r < 1.89158
   95% expected band : 1.89158 < r < 1.89158
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1076988134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66153 +/- 0.00566908 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.66153 @ 95%CL (1 toyMC)
median expected limit: r < 2.66153 @ 95%CL (1 toyMC)
   68% expected band : 2.66153 < r < 2.66153
   95% expected band : 2.66153 < r < 2.66153
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1891064351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.38388 +/- 0.00604337 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 3.38388 @ 95%CL (1 toyMC)
median expected limit: r < 3.38388 @ 95%CL (1 toyMC)
   68% expected band : 3.38388 < r < 3.38388
   95% expected band : 3.38388 < r < 3.38388
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2068594417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.69617 +/- 0.00666638 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.69617 @ 95%CL (1 toyMC)
median expected limit: r < 2.69617 @ 95%CL (1 toyMC)
   68% expected band : 2.69617 < r < 2.69617
   95% expected band : 2.69617 < r < 2.69617
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -796899895
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2055 +/- 0.004464 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.2055 @ 95%CL (1 toyMC)
median expected limit: r < 2.2055 @ 95%CL (1 toyMC)
   68% expected band : 2.2055 < r < 2.2055
   95% expected band : 2.2055 < r < 2.2055
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -97098699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31251 +/- 0.00419209 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.31251 @ 95%CL (1 toyMC)
median expected limit: r < 1.31251 @ 95%CL (1 toyMC)
   68% expected band : 1.31251 < r < 1.31251
   95% expected band : 1.31251 < r < 1.31251
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1803880682
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.71228 +/- 0.00509154 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 3.71228 @ 95%CL (1 toyMC)
median expected limit: r < 3.71228 @ 95%CL (1 toyMC)
   68% expected band : 3.71228 < r < 3.71228
   95% expected band : 3.71228 < r < 3.71228
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1601746533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.87697 +/- 0.00459609 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 3.87697 @ 95%CL (1 toyMC)
median expected limit: r < 3.87697 @ 95%CL (1 toyMC)
   68% expected band : 3.87697 < r < 3.87697
   95% expected band : 3.87697 < r < 3.87697
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1807426792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.51215 +/- 0.00654455 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 3.51215 @ 95%CL (1 toyMC)
median expected limit: r < 3.51215 @ 95%CL (1 toyMC)
   68% expected band : 3.51215 < r < 3.51215
   95% expected band : 3.51215 < r < 3.51215
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1892759917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.51754 +/- 0.00636628 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 4.51754 @ 95%CL (1 toyMC)
median expected limit: r < 4.51754 @ 95%CL (1 toyMC)
   68% expected band : 4.51754 < r < 4.51754
   95% expected band : 4.51754 < r < 4.51754
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2145787643
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04201 +/- 0.00490818 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 3.04201 @ 95%CL (1 toyMC)
median expected limit: r < 3.04201 @ 95%CL (1 toyMC)
   68% expected band : 3.04201 < r < 3.04201
   95% expected band : 3.04201 < r < 3.04201
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1049031985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.34666 +/- 0.00629727 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 3.34666 @ 95%CL (1 toyMC)
median expected limit: r < 3.34666 @ 95%CL (1 toyMC)
   68% expected band : 3.34666 < r < 3.34666
   95% expected band : 3.34666 < r < 3.34666
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1343726733
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70663 +/- 0.00471038 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.70663 @ 95%CL (1 toyMC)
median expected limit: r < 1.70663 @ 95%CL (1 toyMC)
   68% expected band : 1.70663 < r < 1.70663
   95% expected band : 1.70663 < r < 1.70663
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1593413746
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77666 +/- 0.00610458 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.77666 @ 95%CL (1 toyMC)
median expected limit: r < 2.77666 @ 95%CL (1 toyMC)
   68% expected band : 2.77666 < r < 2.77666
   95% expected band : 2.77666 < r < 2.77666
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2079777059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.57723 +/- 0.0057321 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 3.57723 @ 95%CL (1 toyMC)
median expected limit: r < 3.57723 @ 95%CL (1 toyMC)
   68% expected band : 3.57723 < r < 3.57723
   95% expected band : 3.57723 < r < 3.57723
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1187317919
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.52965 +/- 0.00473045 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 3.52965 @ 95%CL (1 toyMC)
median expected limit: r < 3.52965 @ 95%CL (1 toyMC)
   68% expected band : 3.52965 < r < 3.52965
   95% expected band : 3.52965 < r < 3.52965
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -111324237
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.83176 +/- 0.00490434 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 2.83176 @ 95%CL (1 toyMC)
median expected limit: r < 2.83176 @ 95%CL (1 toyMC)
   68% expected band : 2.83176 < r < 2.83176
   95% expected band : 2.83176 < r < 2.83176
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 66846036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2943 +/- 0.00407203 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.2943 @ 95%CL (1 toyMC)
median expected limit: r < 1.2943 @ 95%CL (1 toyMC)
   68% expected band : 1.2943 < r < 1.2943
   95% expected band : 1.2943 < r < 1.2943
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1338439527
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8232 +/- 0.00581414 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.8232 @ 95%CL (1 toyMC)
median expected limit: r < 1.8232 @ 95%CL (1 toyMC)
   68% expected band : 1.8232 < r < 1.8232
   95% expected band : 1.8232 < r < 1.8232
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 609342728
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.85985 +/- 0.00590398 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.34 min (real)
mean   expected limit: r < 2.85985 @ 95%CL (1 toyMC)
median expected limit: r < 2.85985 @ 95%CL (1 toyMC)
   68% expected band : 2.85985 < r < 2.85985
   95% expected band : 2.85985 < r < 2.85985
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -592176759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92508 +/- 0.00552469 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 1.92508 @ 95%CL (1 toyMC)
median expected limit: r < 1.92508 @ 95%CL (1 toyMC)
   68% expected band : 1.92508 < r < 1.92508
   95% expected band : 1.92508 < r < 1.92508
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1363650520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.41732 +/- 0.00616789 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 3.41732 @ 95%CL (1 toyMC)
median expected limit: r < 3.41732 @ 95%CL (1 toyMC)
   68% expected band : 3.41732 < r < 3.41732
   95% expected band : 3.41732 < r < 3.41732
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1504305958
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.35756 +/- 0.00638638 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 3.35756 @ 95%CL (1 toyMC)
median expected limit: r < 3.35756 @ 95%CL (1 toyMC)
   68% expected band : 3.35756 < r < 3.35756
   95% expected band : 3.35756 < r < 3.35756
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1349536382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69026 +/- 0.00555463 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.69026 @ 95%CL (1 toyMC)
median expected limit: r < 1.69026 @ 95%CL (1 toyMC)
   68% expected band : 1.69026 < r < 1.69026
   95% expected band : 1.69026 < r < 1.69026
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2101518029
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.38048 +/- 0.00570668 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 4.38048 @ 95%CL (1 toyMC)
median expected limit: r < 4.38048 @ 95%CL (1 toyMC)
   68% expected band : 4.38048 < r < 4.38048
   95% expected band : 4.38048 < r < 4.38048
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1343431760
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.87775 +/- 0.00412466 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 1.87775 @ 95%CL (1 toyMC)
median expected limit: r < 1.87775 @ 95%CL (1 toyMC)
   68% expected band : 1.87775 < r < 1.87775
   95% expected band : 1.87775 < r < 1.87775
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1006640207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.44454 +/- 0.00451618 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.44454 @ 95%CL (1 toyMC)
median expected limit: r < 2.44454 @ 95%CL (1 toyMC)
   68% expected band : 2.44454 < r < 2.44454
   95% expected band : 2.44454 < r < 2.44454
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1692575734
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28352 +/- 0.00500019 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.28352 @ 95%CL (1 toyMC)
median expected limit: r < 2.28352 @ 95%CL (1 toyMC)
   68% expected band : 2.28352 < r < 2.28352
   95% expected band : 2.28352 < r < 2.28352
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1517186700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.35586 +/- 0.00600934 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 3.35586 @ 95%CL (1 toyMC)
median expected limit: r < 3.35586 @ 95%CL (1 toyMC)
   68% expected band : 3.35586 < r < 3.35586
   95% expected band : 3.35586 < r < 3.35586
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine40.MarkovChainMC.mH40.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH40.-1001326036.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH40.-1042411114.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH40.-1091470383.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH40.-111324237.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH40.-1153700070.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH40.-1158773633.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH40.-1263400344.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH40.-1318843186.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH40.-1332134996.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH40.-1343431760.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH40.-1343726733.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH40.-1349536382.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH40.-1363650520.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH40.-1401132353.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH40.-1471889735.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH40.-1475114507.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH40.-1500887923.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH40.-1527498705.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH40.-1563689286.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH40.-1593413746.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH40.-1601746533.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH40.-1646550701.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH40.-165451595.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH40.-1672428773.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH40.-1705703393.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH40.-1801044598.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH40.-1803880682.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH40.-1870571614.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH40.-2050063442.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH40.-2068594417.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH40.-2079777059.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH40.-2089190825.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH40.-2101518029.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH40.-2145787643.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH40.-246229959.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH40.-408625451.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH40.-470347496.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH40.-490166426.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH40.-49493478.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH40.-519890576.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH40.-578790652.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH40.-592176759.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH40.-684575972.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH40.-747359612.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH40.-774263838.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH40.-796899895.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH40.-866744631.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH40.-961876389.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH40.-97098699.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH40.-978932341.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH40.1006640207.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH40.1024077924.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH40.1049031985.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH40.1062046817.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH40.1076988134.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH40.1096844693.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH40.1129774137.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH40.1187220160.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH40.1187317919.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH40.1197339791.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH40.12134803.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH40.1332098686.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH40.1338439527.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH40.1355592221.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH40.1368790757.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH40.1404912842.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH40.144610546.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH40.1504305958.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH40.1517186700.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH40.1544782652.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH40.1675598482.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH40.1692575734.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH40.1807426792.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH40.1817772885.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH40.184327283.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH40.1891064351.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH40.1892759917.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH40.20235979.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH40.2110502405.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH40.265528355.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH40.306024841.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH40.326417432.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH40.332586235.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH40.432507616.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH40.452602622.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH40.471936748.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH40.536517803.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH40.609342728.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH40.61020205.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH40.617377348.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH40.627177980.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH40.654082136.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH40.66846036.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH40.693179413.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH40.693354905.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH40.78662376.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH40.78843770.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH40.866146525.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH40.909811564.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH40.925591896.root
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/toys
