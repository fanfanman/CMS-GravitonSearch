 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1655818105
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194049 +/- 0.00247354 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.194049 @ 95%CL (1 toyMC)
median expected limit: r < 0.194049 @ 95%CL (1 toyMC)
   68% expected band : 0.194049 < r < 0.194049
   95% expected band : 0.194049 < r < 0.194049
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 777176304
Generate toy 1/1
Done in 8.99 min (cpu), 9.04 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 822286950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.197789 +/- 0.00235323 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.197789 @ 95%CL (1 toyMC)
median expected limit: r < 0.197789 @ 95%CL (1 toyMC)
   68% expected band : 0.197789 < r < 0.197789
   95% expected band : 0.197789 < r < 0.197789
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -75864937
Generate toy 1/1
Done in 9.01 min (cpu), 9.05 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 10469083
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204723 +/- 0.00210003 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.204723 @ 95%CL (1 toyMC)
median expected limit: r < 0.204723 @ 95%CL (1 toyMC)
   68% expected band : 0.204723 < r < 0.204723
   95% expected band : 0.204723 < r < 0.204723
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 813235921
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.176911 +/- 0.00436587 @ 95% CL (99 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.176911 @ 95%CL (1 toyMC)
median expected limit: r < 0.176911 @ 95%CL (1 toyMC)
   68% expected band : 0.176911 < r < 0.176911
   95% expected band : 0.176911 < r < 0.176911
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1950163206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.147869 +/- 0.00459179 @ 95% CL (78 tries)
Done in 0.94 min (cpu), 0.94 min (real)
mean   expected limit: r < 0.147869 @ 95%CL (1 toyMC)
median expected limit: r < 0.147869 @ 95%CL (1 toyMC)
   68% expected band : 0.147869 < r < 0.147869
   95% expected band : 0.147869 < r < 0.147869
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -381854448
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189902 +/- 0.00222424 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.189902 @ 95%CL (1 toyMC)
median expected limit: r < 0.189902 @ 95%CL (1 toyMC)
   68% expected band : 0.189902 < r < 0.189902
   95% expected band : 0.189902 < r < 0.189902
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 753538724
Generate toy 1/1
Done in 8.97 min (cpu), 9.01 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 164898116
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.187606 +/- 0.00348779 @ 95% CL (97 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.187606 @ 95%CL (1 toyMC)
median expected limit: r < 0.187606 @ 95%CL (1 toyMC)
   68% expected band : 0.187606 < r < 0.187606
   95% expected band : 0.187606 < r < 0.187606
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1684533285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33333e+29 +/- 2.10819e+29 @ 95% CL (6 tries)
Done in 8.54 min (cpu), 8.60 min (real)
mean   expected limit: r < 3.33333e+29 @ 95%CL (1 toyMC)
median expected limit: r < 3.33333e+29 @ 95%CL (1 toyMC)
   68% expected band : 3.33333e+29 < r < 3.33333e+29
   95% expected band : 3.33333e+29 < r < 3.33333e+29
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -59619537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186676 +/- 0.00217157 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.186676 @ 95%CL (1 toyMC)
median expected limit: r < 0.186676 @ 95%CL (1 toyMC)
   68% expected band : 0.186676 < r < 0.186676
   95% expected band : 0.186676 < r < 0.186676
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1365047174
Generate toy 1/1
Done in 8.98 min (cpu), 9.03 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1751041411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.0323 +/- 4.96774 @ 95% CL (4 tries)
Done in 8.58 min (cpu), 8.63 min (real)
mean   expected limit: r < 15.0323 @ 95%CL (1 toyMC)
median expected limit: r < 15.0323 @ 95%CL (1 toyMC)
   68% expected band : 15.0323 < r < 15.0323
   95% expected band : 15.0323 < r < 15.0323
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1428012239
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.0315 +/- 4.87972 @ 95% CL (5 tries)
Done in 8.40 min (cpu), 8.45 min (real)
mean   expected limit: r < 12.0315 @ 95%CL (1 toyMC)
median expected limit: r < 12.0315 @ 95%CL (1 toyMC)
   68% expected band : 12.0315 < r < 12.0315
   95% expected band : 12.0315 < r < 12.0315
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1695945461
Generate toy 1/1
Done in 9.02 min (cpu), 9.07 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1960347596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195268 +/- 0.00370044 @ 95% CL (99 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.195268 @ 95%CL (1 toyMC)
median expected limit: r < 0.195268 @ 95%CL (1 toyMC)
   68% expected band : 0.195268 < r < 0.195268
   95% expected band : 0.195268 < r < 0.195268
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1744566205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20008 +/- 0.00240905 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.20008 @ 95%CL (1 toyMC)
median expected limit: r < 0.20008 @ 95%CL (1 toyMC)
   68% expected band : 0.20008 < r < 0.20008
   95% expected band : 0.20008 < r < 0.20008
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 720220552
Generate toy 1/1
Done in 8.95 min (cpu), 9.00 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 927202036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.157378 +/- 0.00255258 @ 95% CL (99 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.157378 @ 95%CL (1 toyMC)
median expected limit: r < 0.157378 @ 95%CL (1 toyMC)
   68% expected band : 0.157378 < r < 0.157378
   95% expected band : 0.157378 < r < 0.157378
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 111944095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.80197 +/- 2.1076 @ 95% CL (18 tries)
Done in 6.93 min (cpu), 6.97 min (real)
mean   expected limit: r < 4.80197 @ 95%CL (1 toyMC)
median expected limit: r < 4.80197 @ 95%CL (1 toyMC)
   68% expected band : 4.80197 < r < 4.80197
   95% expected band : 4.80197 < r < 4.80197
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -731090081
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.63683 +/- 1.81817 @ 95% CL (24 tries)
Done in 6.51 min (cpu), 6.55 min (real)
mean   expected limit: r < 4.63683 @ 95%CL (1 toyMC)
median expected limit: r < 4.63683 @ 95%CL (1 toyMC)
   68% expected band : 4.63683 < r < 4.63683
   95% expected band : 4.63683 < r < 4.63683
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1629943618
Generate toy 1/1
Done in 9.12 min (cpu), 9.18 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1248729180
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.162598 +/- 0.0028741 @ 95% CL (90 tries)
Done in 0.53 min (cpu), 0.54 min (real)
mean   expected limit: r < 0.162598 @ 95%CL (1 toyMC)
median expected limit: r < 0.162598 @ 95%CL (1 toyMC)
   68% expected band : 0.162598 < r < 0.162598
   95% expected band : 0.162598 < r < 0.162598
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1489501836
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248668 +/- 0.00180971 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.248668 @ 95%CL (1 toyMC)
median expected limit: r < 0.248668 @ 95%CL (1 toyMC)
   68% expected band : 0.248668 < r < 0.248668
   95% expected band : 0.248668 < r < 0.248668
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 322178717
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194305 +/- 0.00248954 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.194305 @ 95%CL (1 toyMC)
median expected limit: r < 0.194305 @ 95%CL (1 toyMC)
   68% expected band : 0.194305 < r < 0.194305
   95% expected band : 0.194305 < r < 0.194305
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1151343325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.141637 +/- 0.0101638 @ 95% CL (51 tries)
Done in 3.98 min (cpu), 4.01 min (real)
mean   expected limit: r < 0.141637 @ 95%CL (1 toyMC)
median expected limit: r < 0.141637 @ 95%CL (1 toyMC)
   68% expected band : 0.141637 < r < 0.141637
   95% expected band : 0.141637 < r < 0.141637
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -192853346
Generate toy 1/1
Done in 9.29 min (cpu), 9.36 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1588209202
Generate toy 1/1
Done in 9.21 min (cpu), 9.27 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1835565151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.223131 +/- 0.00169357 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.223131 @ 95%CL (1 toyMC)
median expected limit: r < 0.223131 @ 95%CL (1 toyMC)
   68% expected band : 0.223131 < r < 0.223131
   95% expected band : 0.223131 < r < 0.223131
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -822036409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190155 +/- 0.00277757 @ 95% CL (99 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.190155 @ 95%CL (1 toyMC)
median expected limit: r < 0.190155 @ 95%CL (1 toyMC)
   68% expected band : 0.190155 < r < 0.190155
   95% expected band : 0.190155 < r < 0.190155
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -307840942
Generate toy 1/1
Done in 9.14 min (cpu), 9.20 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -185873113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.08626 +/- 3.25447 @ 95% CL (8 tries)
Done in 8.02 min (cpu), 8.08 min (real)
mean   expected limit: r < 5.08626 @ 95%CL (1 toyMC)
median expected limit: r < 5.08626 @ 95%CL (1 toyMC)
   68% expected band : 5.08626 < r < 5.08626
   95% expected band : 5.08626 < r < 5.08626
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -818857390
Generate toy 1/1
Done in 9.23 min (cpu), 9.30 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1725418421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.146779 +/- 0.00855135 @ 95% CL (37 tries)
Done in 5.54 min (cpu), 5.58 min (real)
mean   expected limit: r < 0.146779 @ 95%CL (1 toyMC)
median expected limit: r < 0.146779 @ 95%CL (1 toyMC)
   68% expected band : 0.146779 < r < 0.146779
   95% expected band : 0.146779 < r < 0.146779
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -52919178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.24222 +/- 2.06341 @ 95% CL (24 tries)
Done in 6.86 min (cpu), 6.92 min (real)
mean   expected limit: r < 9.24222 @ 95%CL (1 toyMC)
median expected limit: r < 9.24222 @ 95%CL (1 toyMC)
   68% expected band : 9.24222 < r < 9.24222
   95% expected band : 9.24222 < r < 9.24222
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1733458707
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.163647 +/- 0.00287441 @ 95% CL (98 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.163647 @ 95%CL (1 toyMC)
median expected limit: r < 0.163647 @ 95%CL (1 toyMC)
   68% expected band : 0.163647 < r < 0.163647
   95% expected band : 0.163647 < r < 0.163647
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2086244726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.174089 +/- 0.00324013 @ 95% CL (97 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.174089 @ 95%CL (1 toyMC)
median expected limit: r < 0.174089 @ 95%CL (1 toyMC)
   68% expected band : 0.174089 < r < 0.174089
   95% expected band : 0.174089 < r < 0.174089
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -245134582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.6785 +/- 3.3215 @ 95% CL (6 tries)
Done in 8.57 min (cpu), 8.63 min (real)
mean   expected limit: r < 16.6785 @ 95%CL (1 toyMC)
median expected limit: r < 16.6785 @ 95%CL (1 toyMC)
   68% expected band : 16.6785 < r < 16.6785
   95% expected band : 16.6785 < r < 16.6785
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -592365118
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.86008 +/- 2.34881 @ 95% CL (19 tries)
Done in 7.45 min (cpu), 7.50 min (real)
mean   expected limit: r < 7.86008 @ 95%CL (1 toyMC)
median expected limit: r < 7.86008 @ 95%CL (1 toyMC)
   68% expected band : 7.86008 < r < 7.86008
   95% expected band : 7.86008 < r < 7.86008
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1624733260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190194 +/- 0.00202961 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.190194 @ 95%CL (1 toyMC)
median expected limit: r < 0.190194 @ 95%CL (1 toyMC)
   68% expected band : 0.190194 < r < 0.190194
   95% expected band : 0.190194 < r < 0.190194
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 251918616
Generate toy 1/1
Done in 9.21 min (cpu), 9.28 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1239321258
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224018 +/- 0.00202216 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.224018 @ 95%CL (1 toyMC)
median expected limit: r < 0.224018 @ 95%CL (1 toyMC)
   68% expected band : 0.224018 < r < 0.224018
   95% expected band : 0.224018 < r < 0.224018
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 541374311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237951 +/- 0.00185672 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.237951 @ 95%CL (1 toyMC)
median expected limit: r < 0.237951 @ 95%CL (1 toyMC)
   68% expected band : 0.237951 < r < 0.237951
   95% expected band : 0.237951 < r < 0.237951
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1127541442
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.158564 +/- 0.00298609 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.158564 @ 95%CL (1 toyMC)
median expected limit: r < 0.158564 @ 95%CL (1 toyMC)
   68% expected band : 0.158564 < r < 0.158564
   95% expected band : 0.158564 < r < 0.158564
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 841912516
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.209414 +/- 0.00276946 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.209414 @ 95%CL (1 toyMC)
median expected limit: r < 0.209414 @ 95%CL (1 toyMC)
   68% expected band : 0.209414 < r < 0.209414
   95% expected band : 0.209414 < r < 0.209414
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1030232047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.14546 +/- 0.00589718 @ 95% CL (53 tries)
Done in 3.18 min (cpu), 3.20 min (real)
mean   expected limit: r < 0.14546 @ 95%CL (1 toyMC)
median expected limit: r < 0.14546 @ 95%CL (1 toyMC)
   68% expected band : 0.14546 < r < 0.14546
   95% expected band : 0.14546 < r < 0.14546
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -259521774
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.160336 +/- 0.00340662 @ 95% CL (92 tries)
Done in 0.50 min (cpu), 0.51 min (real)
mean   expected limit: r < 0.160336 @ 95%CL (1 toyMC)
median expected limit: r < 0.160336 @ 95%CL (1 toyMC)
   68% expected band : 0.160336 < r < 0.160336
   95% expected band : 0.160336 < r < 0.160336
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1553205812
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270678 +/- 0.00201193 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.270678 @ 95%CL (1 toyMC)
median expected limit: r < 0.270678 @ 95%CL (1 toyMC)
   68% expected band : 0.270678 < r < 0.270678
   95% expected band : 0.270678 < r < 0.270678
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 223486889
Generate toy 1/1
Done in 9.24 min (cpu), 9.30 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2134287810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243565 +/- 0.00236311 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.243565 @ 95%CL (1 toyMC)
median expected limit: r < 0.243565 @ 95%CL (1 toyMC)
   68% expected band : 0.243565 < r < 0.243565
   95% expected band : 0.243565 < r < 0.243565
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -954429548
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.175633 +/- 0.00241045 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.175633 @ 95%CL (1 toyMC)
median expected limit: r < 0.175633 @ 95%CL (1 toyMC)
   68% expected band : 0.175633 < r < 0.175633
   95% expected band : 0.175633 < r < 0.175633
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1353183469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.74307 +/- 3.31424 @ 95% CL (9 tries)
Done in 8.11 min (cpu), 8.16 min (real)
mean   expected limit: r < 6.74307 @ 95%CL (1 toyMC)
median expected limit: r < 6.74307 @ 95%CL (1 toyMC)
   68% expected band : 6.74307 < r < 6.74307
   95% expected band : 6.74307 < r < 6.74307
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 66132430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.160424 +/- 0.00277487 @ 95% CL (92 tries)
Done in 0.50 min (cpu), 0.51 min (real)
mean   expected limit: r < 0.160424 @ 95%CL (1 toyMC)
median expected limit: r < 0.160424 @ 95%CL (1 toyMC)
   68% expected band : 0.160424 < r < 0.160424
   95% expected band : 0.160424 < r < 0.160424
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 183740804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.257007 +/- 0.001779 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.257007 @ 95%CL (1 toyMC)
median expected limit: r < 0.257007 @ 95%CL (1 toyMC)
   68% expected band : 0.257007 < r < 0.257007
   95% expected band : 0.257007 < r < 0.257007
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1157102855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.166907 +/- 0.00280278 @ 95% CL (99 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.166907 @ 95%CL (1 toyMC)
median expected limit: r < 0.166907 @ 95%CL (1 toyMC)
   68% expected band : 0.166907 < r < 0.166907
   95% expected band : 0.166907 < r < 0.166907
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -23850231
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221782 +/- 0.00212585 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.221782 @ 95%CL (1 toyMC)
median expected limit: r < 0.221782 @ 95%CL (1 toyMC)
   68% expected band : 0.221782 < r < 0.221782
   95% expected band : 0.221782 < r < 0.221782
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -727330002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232312 +/- 0.00228286 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.232312 @ 95%CL (1 toyMC)
median expected limit: r < 0.232312 @ 95%CL (1 toyMC)
   68% expected band : 0.232312 < r < 0.232312
   95% expected band : 0.232312 < r < 0.232312
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 257430123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.74973 +/- 4.19012 @ 95% CL (6 tries)
Done in 8.39 min (cpu), 8.43 min (real)
mean   expected limit: r < 6.74973 @ 95%CL (1 toyMC)
median expected limit: r < 6.74973 @ 95%CL (1 toyMC)
   68% expected band : 6.74973 < r < 6.74973
   95% expected band : 6.74973 < r < 6.74973
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 68656684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.50039 +/- 1.89035 @ 95% CL (27 tries)
Done in 6.59 min (cpu), 6.62 min (real)
mean   expected limit: r < 6.50039 @ 95%CL (1 toyMC)
median expected limit: r < 6.50039 @ 95%CL (1 toyMC)
   68% expected band : 6.50039 < r < 6.50039
   95% expected band : 6.50039 < r < 6.50039
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1619535900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.175764 +/- 0.00266491 @ 95% CL (99 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.175764 @ 95%CL (1 toyMC)
median expected limit: r < 0.175764 @ 95%CL (1 toyMC)
   68% expected band : 0.175764 < r < 0.175764
   95% expected band : 0.175764 < r < 0.175764
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1352389351
Generate toy 1/1
Done in 9.06 min (cpu), 9.11 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -109306911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.162449 +/- 0.00402105 @ 95% CL (87 tries)
Done in 0.55 min (cpu), 0.55 min (real)
mean   expected limit: r < 0.162449 @ 95%CL (1 toyMC)
median expected limit: r < 0.162449 @ 95%CL (1 toyMC)
   68% expected band : 0.162449 < r < 0.162449
   95% expected band : 0.162449 < r < 0.162449
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -913284436
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.53009 +/- 1.159 @ 95% CL (61 tries)
Done in 2.86 min (cpu), 2.88 min (real)
mean   expected limit: r < 5.53009 @ 95%CL (1 toyMC)
median expected limit: r < 5.53009 @ 95%CL (1 toyMC)
   68% expected band : 5.53009 < r < 5.53009
   95% expected band : 5.53009 < r < 5.53009
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1252755754
Generate toy 1/1
Done in 9.06 min (cpu), 9.10 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1079850837
Generate toy 1/1
Done in 9.04 min (cpu), 9.07 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1718684636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.172391 +/- 0.00274784 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.172391 @ 95%CL (1 toyMC)
median expected limit: r < 0.172391 @ 95%CL (1 toyMC)
   68% expected band : 0.172391 < r < 0.172391
   95% expected band : 0.172391 < r < 0.172391
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 861408072
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5e+29 +/- 2.5e+29 @ 95% CL (4 tries)
Done in 8.56 min (cpu), 8.60 min (real)
mean   expected limit: r < 2.5e+29 @ 95%CL (1 toyMC)
median expected limit: r < 2.5e+29 @ 95%CL (1 toyMC)
   68% expected band : 2.5e+29 < r < 2.5e+29
   95% expected band : 2.5e+29 < r < 2.5e+29
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1653174348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190412 +/- 0.00259161 @ 95% CL (99 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.190412 @ 95%CL (1 toyMC)
median expected limit: r < 0.190412 @ 95%CL (1 toyMC)
   68% expected band : 0.190412 < r < 0.190412
   95% expected band : 0.190412 < r < 0.190412
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1900853563
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.155544 +/- 0.00399662 @ 95% CL (89 tries)
Done in 0.48 min (cpu), 0.48 min (real)
mean   expected limit: r < 0.155544 @ 95%CL (1 toyMC)
median expected limit: r < 0.155544 @ 95%CL (1 toyMC)
   68% expected band : 0.155544 < r < 0.155544
   95% expected band : 0.155544 < r < 0.155544
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2135244512
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.154333 +/- 0.00412052 @ 95% CL (87 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 0.154333 @ 95%CL (1 toyMC)
median expected limit: r < 0.154333 @ 95%CL (1 toyMC)
   68% expected band : 0.154333 < r < 0.154333
   95% expected band : 0.154333 < r < 0.154333
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2120702496
Generate toy 1/1
Done in 8.90 min (cpu), 8.93 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1661917797
Generate toy 1/1
Done in 8.94 min (cpu), 8.97 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1756975347
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.169243 +/- 0.00334404 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.169243 @ 95%CL (1 toyMC)
median expected limit: r < 0.169243 @ 95%CL (1 toyMC)
   68% expected band : 0.169243 < r < 0.169243
   95% expected band : 0.169243 < r < 0.169243
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1483167444
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.18414 +/- 1.0634 @ 95% CL (68 tries)
Done in 1.72 min (cpu), 1.72 min (real)
mean   expected limit: r < 5.18414 @ 95%CL (1 toyMC)
median expected limit: r < 5.18414 @ 95%CL (1 toyMC)
   68% expected band : 5.18414 < r < 5.18414
   95% expected band : 5.18414 < r < 5.18414
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1350927128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.92779 +/- 1.88289 @ 95% CL (24 tries)
Done in 6.43 min (cpu), 6.45 min (real)
mean   expected limit: r < 5.92779 @ 95%CL (1 toyMC)
median expected limit: r < 5.92779 @ 95%CL (1 toyMC)
   68% expected band : 5.92779 < r < 5.92779
   95% expected band : 5.92779 < r < 5.92779
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1833332427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.162975 +/- 0.00556493 @ 95% CL (75 tries)
Done in 1.16 min (cpu), 1.17 min (real)
mean   expected limit: r < 0.162975 @ 95%CL (1 toyMC)
median expected limit: r < 0.162975 @ 95%CL (1 toyMC)
   68% expected band : 0.162975 < r < 0.162975
   95% expected band : 0.162975 < r < 0.162975
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2142416687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28 +/- 0.00194614 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.28 @ 95%CL (1 toyMC)
median expected limit: r < 0.28 @ 95%CL (1 toyMC)
   68% expected band : 0.28 < r < 0.28
   95% expected band : 0.28 < r < 0.28
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1877568931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.165878 +/- 0.00393659 @ 95% CL (81 tries)
Done in 1.01 min (cpu), 1.02 min (real)
mean   expected limit: r < 0.165878 @ 95%CL (1 toyMC)
median expected limit: r < 0.165878 @ 95%CL (1 toyMC)
   68% expected band : 0.165878 < r < 0.165878
   95% expected band : 0.165878 < r < 0.165878
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 695366712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45791 +/- 1.25049 @ 95% CL (40 tries)
Done in 4.55 min (cpu), 4.57 min (real)
mean   expected limit: r < 3.45791 @ 95%CL (1 toyMC)
median expected limit: r < 3.45791 @ 95%CL (1 toyMC)
   68% expected band : 3.45791 < r < 3.45791
   95% expected band : 3.45791 < r < 3.45791
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -10751533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.70707 +/- 1.81942 @ 95% CL (27 tries)
Done in 5.95 min (cpu), 5.97 min (real)
mean   expected limit: r < 5.70707 @ 95%CL (1 toyMC)
median expected limit: r < 5.70707 @ 95%CL (1 toyMC)
   68% expected band : 5.70707 < r < 5.70707
   95% expected band : 5.70707 < r < 5.70707
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1219781422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2e+29 +/- 2e+29 @ 95% CL (5 tries)
Done in 8.41 min (cpu), 8.44 min (real)
mean   expected limit: r < 2e+29 @ 95%CL (1 toyMC)
median expected limit: r < 2e+29 @ 95%CL (1 toyMC)
   68% expected band : 2e+29 < r < 2e+29
   95% expected band : 2e+29 < r < 2e+29
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1072555953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.159713 +/- 0.00403468 @ 95% CL (76 tries)
Done in 1.09 min (cpu), 1.09 min (real)
mean   expected limit: r < 0.159713 @ 95%CL (1 toyMC)
median expected limit: r < 0.159713 @ 95%CL (1 toyMC)
   68% expected band : 0.159713 < r < 0.159713
   95% expected band : 0.159713 < r < 0.159713
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -60840175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.0715 +/- 3.23683 @ 95% CL (14 tries)
Done in 7.56 min (cpu), 7.59 min (real)
mean   expected limit: r < 12.0715 @ 95%CL (1 toyMC)
median expected limit: r < 12.0715 @ 95%CL (1 toyMC)
   68% expected band : 12.0715 < r < 12.0715
   95% expected band : 12.0715 < r < 12.0715
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1515453254
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.164509 +/- 0.00303043 @ 95% CL (93 tries)
Done in 0.49 min (cpu), 0.49 min (real)
mean   expected limit: r < 0.164509 @ 95%CL (1 toyMC)
median expected limit: r < 0.164509 @ 95%CL (1 toyMC)
   68% expected band : 0.164509 < r < 0.164509
   95% expected band : 0.164509 < r < 0.164509
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1561836137
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.34955 +/- 1.43556 @ 95% CL (35 tries)
Done in 5.57 min (cpu), 5.59 min (real)
mean   expected limit: r < 4.34955 @ 95%CL (1 toyMC)
median expected limit: r < 4.34955 @ 95%CL (1 toyMC)
   68% expected band : 4.34955 < r < 4.34955
   95% expected band : 4.34955 < r < 4.34955
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1692407312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.09052 +/- 1.80573 @ 95% CL (32 tries)
Done in 5.72 min (cpu), 5.75 min (real)
mean   expected limit: r < 8.09052 @ 95%CL (1 toyMC)
median expected limit: r < 8.09052 @ 95%CL (1 toyMC)
   68% expected band : 8.09052 < r < 8.09052
   95% expected band : 8.09052 < r < 8.09052
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1731754639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.167762 @ 95% CL
Done in 8.98 min (cpu), 9.01 min (real)
mean   expected limit: r < 0.167762 @ 95%CL (1 toyMC)
median expected limit: r < 0.167762 @ 95%CL (1 toyMC)
   68% expected band : 0.167762 < r < 0.167762
   95% expected band : 0.167762 < r < 0.167762
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1401382262
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.166166 +/- 0.00366129 @ 95% CL (92 tries)
Done in 0.56 min (cpu), 0.57 min (real)
mean   expected limit: r < 0.166166 @ 95%CL (1 toyMC)
median expected limit: r < 0.166166 @ 95%CL (1 toyMC)
   68% expected band : 0.166166 < r < 0.166166
   95% expected band : 0.166166 < r < 0.166166
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -29415142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.184938 +/- 0.00170266 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.184938 @ 95%CL (1 toyMC)
median expected limit: r < 0.184938 @ 95%CL (1 toyMC)
   68% expected band : 0.184938 < r < 0.184938
   95% expected band : 0.184938 < r < 0.184938
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -446816115
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.178071 +/- 0.00251552 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.178071 @ 95%CL (1 toyMC)
median expected limit: r < 0.178071 @ 95%CL (1 toyMC)
   68% expected band : 0.178071 < r < 0.178071
   95% expected band : 0.178071 < r < 0.178071
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1826745051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.151088 +/- 0.00324515 @ 95% CL (95 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.151088 @ 95%CL (1 toyMC)
median expected limit: r < 0.151088 @ 95%CL (1 toyMC)
   68% expected band : 0.151088 < r < 0.151088
   95% expected band : 0.151088 < r < 0.151088
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 661784930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 15.0273 +/- 4.97266 @ 95% CL (4 tries)
Done in 8.60 min (cpu), 8.63 min (real)
mean   expected limit: r < 15.0273 @ 95%CL (1 toyMC)
median expected limit: r < 15.0273 @ 95%CL (1 toyMC)
   68% expected band : 15.0273 < r < 15.0273
   95% expected band : 15.0273 < r < 15.0273
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1093277655
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216669 +/- 0.00209503 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.216669 @ 95%CL (1 toyMC)
median expected limit: r < 0.216669 @ 95%CL (1 toyMC)
   68% expected band : 0.216669 < r < 0.216669
   95% expected band : 0.216669 < r < 0.216669
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1257402072
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216812 +/- 0.0022618 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.216812 @ 95%CL (1 toyMC)
median expected limit: r < 0.216812 @ 95%CL (1 toyMC)
   68% expected band : 0.216812 < r < 0.216812
   95% expected band : 0.216812 < r < 0.216812
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1247435988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.22242 +/- 0.00187254 @ 95% CL (100 tries)
Done in 0.25 min (cpu), 0.25 min (real)
mean   expected limit: r < 0.22242 @ 95%CL (1 toyMC)
median expected limit: r < 0.22242 @ 95%CL (1 toyMC)
   68% expected band : 0.22242 < r < 0.22242
   95% expected band : 0.22242 < r < 0.22242
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1944986915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.144969 +/- 0.00425901 @ 95% CL (76 tries)
Done in 1.05 min (cpu), 1.05 min (real)
mean   expected limit: r < 0.144969 @ 95%CL (1 toyMC)
median expected limit: r < 0.144969 @ 95%CL (1 toyMC)
   68% expected band : 0.144969 < r < 0.144969
   95% expected band : 0.144969 < r < 0.144969
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 708510757
Generate toy 1/1
Done in 8.98 min (cpu), 9.01 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1685971112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.149546 +/- 0.0040343 @ 95% CL (93 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.149546 @ 95%CL (1 toyMC)
median expected limit: r < 0.149546 @ 95%CL (1 toyMC)
   68% expected band : 0.149546 < r < 0.149546
   95% expected band : 0.149546 < r < 0.149546
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1824484497
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.71338 +/- 1.19263 @ 95% CL (59 tries)
Done in 2.66 min (cpu), 2.66 min (real)
mean   expected limit: r < 5.71338 @ 95%CL (1 toyMC)
median expected limit: r < 5.71338 @ 95%CL (1 toyMC)
   68% expected band : 5.71338 < r < 5.71338
   95% expected band : 5.71338 < r < 5.71338
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine16.MarkovChainMC.mH16.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH16.-1072555953.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH16.-10751533.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH16.-109306911.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH16.-1127541442.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH16.-1151343325.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH16.-1219781422.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH16.-1239321258.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH16.-1350927128.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH16.-1352389351.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH16.-1353183469.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH16.-1401382262.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH16.-1428012239.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH16.-1588209202.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH16.-1624733260.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH16.-1653174348.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH16.-1684533285.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH16.-1718684636.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH16.-1725418421.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH16.-1733458707.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH16.-1744566205.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH16.-1756975347.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH16.-1824484497.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH16.-1833332427.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH16.-1835565151.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH16.-185873113.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH16.-1900853563.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH16.-192853346.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH16.-2120702496.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH16.-2134287810.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH16.-2135244512.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH16.-23850231.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH16.-245134582.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH16.-259521774.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH16.-29415142.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH16.-307840942.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH16.-381854448.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH16.-446816115.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH16.-52919178.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH16.-592365118.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH16.-59619537.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH16.-60840175.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH16.-727330002.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH16.-731090081.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH16.-75864937.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH16.-818857390.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH16.-822036409.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH16.-913284436.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH16.-954429548.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH16.1030232047.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH16.10469083.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH16.1079850837.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH16.1093277655.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH16.111944095.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH16.1157102855.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH16.1247435988.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH16.1248729180.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH16.1252755754.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH16.1257402072.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH16.1365047174.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH16.1483167444.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH16.1489501836.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH16.1515453254.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH16.1553205812.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH16.1561836137.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH16.1619535900.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH16.1629943618.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH16.164898116.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH16.1655818105.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH16.1661917797.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH16.1685971112.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH16.1692407312.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH16.1695945461.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH16.1731754639.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH16.1751041411.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH16.1826745051.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH16.183740804.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH16.1877568931.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH16.1944986915.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH16.1950163206.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH16.1960347596.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH16.2086244726.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH16.2142416687.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH16.223486889.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH16.251918616.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH16.257430123.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH16.322178717.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH16.541374311.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH16.66132430.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH16.661784930.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH16.68656684.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH16.695366712.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH16.708510757.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH16.720220552.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH16.753538724.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH16.777176304.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH16.813235921.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH16.822286950.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH16.841912516.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH16.861408072.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH16.927202036.root
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2000716123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.249211 +/- 0.00227422 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.249211 @ 95%CL (1 toyMC)
median expected limit: r < 0.249211 @ 95%CL (1 toyMC)
   68% expected band : 0.249211 < r < 0.249211
   95% expected band : 0.249211 < r < 0.249211
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 161734809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29595 +/- 0.00273998 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.29595 @ 95%CL (1 toyMC)
median expected limit: r < 0.29595 @ 95%CL (1 toyMC)
   68% expected band : 0.29595 < r < 0.29595
   95% expected band : 0.29595 < r < 0.29595
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1731448078
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.728777 +/- 0.00194641 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.728777 @ 95%CL (1 toyMC)
median expected limit: r < 0.728777 @ 95%CL (1 toyMC)
   68% expected band : 0.728777 < r < 0.728777
   95% expected band : 0.728777 < r < 0.728777
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1251664926
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.400283 +/- 0.00240112 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.400283 @ 95%CL (1 toyMC)
median expected limit: r < 0.400283 @ 95%CL (1 toyMC)
   68% expected band : 0.400283 < r < 0.400283
   95% expected band : 0.400283 < r < 0.400283
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1000602386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.389083 +/- 0.00214384 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.389083 @ 95%CL (1 toyMC)
median expected limit: r < 0.389083 @ 95%CL (1 toyMC)
   68% expected band : 0.389083 < r < 0.389083
   95% expected band : 0.389083 < r < 0.389083
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2059236650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.3373 +/- 0.00226859 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.3373 @ 95%CL (1 toyMC)
median expected limit: r < 0.3373 @ 95%CL (1 toyMC)
   68% expected band : 0.3373 < r < 0.3373
   95% expected band : 0.3373 < r < 0.3373
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1772439546
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.45596 +/- 0.00292197 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.45596 @ 95%CL (1 toyMC)
median expected limit: r < 0.45596 @ 95%CL (1 toyMC)
   68% expected band : 0.45596 < r < 0.45596
   95% expected band : 0.45596 < r < 0.45596
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -358165840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305103 +/- 0.00293324 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.305103 @ 95%CL (1 toyMC)
median expected limit: r < 0.305103 @ 95%CL (1 toyMC)
   68% expected band : 0.305103 < r < 0.305103
   95% expected band : 0.305103 < r < 0.305103
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 203835991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.574342 +/- 0.00247773 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.574342 @ 95%CL (1 toyMC)
median expected limit: r < 0.574342 @ 95%CL (1 toyMC)
   68% expected band : 0.574342 < r < 0.574342
   95% expected band : 0.574342 < r < 0.574342
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1045990151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36931 +/- 0.00328801 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.36931 @ 95%CL (1 toyMC)
median expected limit: r < 0.36931 @ 95%CL (1 toyMC)
   68% expected band : 0.36931 < r < 0.36931
   95% expected band : 0.36931 < r < 0.36931
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -414252611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.417779 +/- 0.00198593 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.417779 @ 95%CL (1 toyMC)
median expected limit: r < 0.417779 @ 95%CL (1 toyMC)
   68% expected band : 0.417779 < r < 0.417779
   95% expected band : 0.417779 < r < 0.417779
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -512514453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.525309 +/- 0.00334377 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.525309 @ 95%CL (1 toyMC)
median expected limit: r < 0.525309 @ 95%CL (1 toyMC)
   68% expected band : 0.525309 < r < 0.525309
   95% expected band : 0.525309 < r < 0.525309
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1369386125
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.47872 +/- 0.00237431 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.47872 @ 95%CL (1 toyMC)
median expected limit: r < 0.47872 @ 95%CL (1 toyMC)
   68% expected band : 0.47872 < r < 0.47872
   95% expected band : 0.47872 < r < 0.47872
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1335504874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.32971 +/- 0.00282525 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.32971 @ 95%CL (1 toyMC)
median expected limit: r < 0.32971 @ 95%CL (1 toyMC)
   68% expected band : 0.32971 < r < 0.32971
   95% expected band : 0.32971 < r < 0.32971
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1439350449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393695 +/- 0.00301401 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.393695 @ 95%CL (1 toyMC)
median expected limit: r < 0.393695 @ 95%CL (1 toyMC)
   68% expected band : 0.393695 < r < 0.393695
   95% expected band : 0.393695 < r < 0.393695
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -819339179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242744 +/- 0.00263336 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.242744 @ 95%CL (1 toyMC)
median expected limit: r < 0.242744 @ 95%CL (1 toyMC)
   68% expected band : 0.242744 < r < 0.242744
   95% expected band : 0.242744 < r < 0.242744
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -589454868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.416107 +/- 0.00242488 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.416107 @ 95%CL (1 toyMC)
median expected limit: r < 0.416107 @ 95%CL (1 toyMC)
   68% expected band : 0.416107 < r < 0.416107
   95% expected band : 0.416107 < r < 0.416107
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 418410450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.374407 +/- 0.00221018 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.374407 @ 95%CL (1 toyMC)
median expected limit: r < 0.374407 @ 95%CL (1 toyMC)
   68% expected band : 0.374407 < r < 0.374407
   95% expected band : 0.374407 < r < 0.374407
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1452985016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.43654 +/- 0.00264318 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.43654 @ 95%CL (1 toyMC)
median expected limit: r < 0.43654 @ 95%CL (1 toyMC)
   68% expected band : 0.43654 < r < 0.43654
   95% expected band : 0.43654 < r < 0.43654
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 768315523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.638506 +/- 0.00231825 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.638506 @ 95%CL (1 toyMC)
median expected limit: r < 0.638506 @ 95%CL (1 toyMC)
   68% expected band : 0.638506 < r < 0.638506
   95% expected band : 0.638506 < r < 0.638506
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1779929348
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.525806 +/- 0.00252297 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.525806 @ 95%CL (1 toyMC)
median expected limit: r < 0.525806 @ 95%CL (1 toyMC)
   68% expected band : 0.525806 < r < 0.525806
   95% expected band : 0.525806 < r < 0.525806
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 968576415
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.555731 +/- 0.00247366 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.555731 @ 95%CL (1 toyMC)
median expected limit: r < 0.555731 @ 95%CL (1 toyMC)
   68% expected band : 0.555731 < r < 0.555731
   95% expected band : 0.555731 < r < 0.555731
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1698495070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.580626 +/- 0.00228301 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.580626 @ 95%CL (1 toyMC)
median expected limit: r < 0.580626 @ 95%CL (1 toyMC)
   68% expected band : 0.580626 < r < 0.580626
   95% expected band : 0.580626 < r < 0.580626
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1963885799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.602068 +/- 0.00319908 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.602068 @ 95%CL (1 toyMC)
median expected limit: r < 0.602068 @ 95%CL (1 toyMC)
   68% expected band : 0.602068 < r < 0.602068
   95% expected band : 0.602068 < r < 0.602068
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -41926725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.292141 +/- 0.00310281 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.292141 @ 95%CL (1 toyMC)
median expected limit: r < 0.292141 @ 95%CL (1 toyMC)
   68% expected band : 0.292141 < r < 0.292141
   95% expected band : 0.292141 < r < 0.292141
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -898066704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338691 +/- 0.00252252 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.338691 @ 95%CL (1 toyMC)
median expected limit: r < 0.338691 @ 95%CL (1 toyMC)
   68% expected band : 0.338691 < r < 0.338691
   95% expected band : 0.338691 < r < 0.338691
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -203083169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.323456 +/- 0.00224663 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.323456 @ 95%CL (1 toyMC)
median expected limit: r < 0.323456 @ 95%CL (1 toyMC)
   68% expected band : 0.323456 < r < 0.323456
   95% expected band : 0.323456 < r < 0.323456
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1206228732
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.791479 +/- 0.00303689 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.791479 @ 95%CL (1 toyMC)
median expected limit: r < 0.791479 @ 95%CL (1 toyMC)
   68% expected band : 0.791479 < r < 0.791479
   95% expected band : 0.791479 < r < 0.791479
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 779766957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.346409 +/- 0.0025344 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.346409 @ 95%CL (1 toyMC)
median expected limit: r < 0.346409 @ 95%CL (1 toyMC)
   68% expected band : 0.346409 < r < 0.346409
   95% expected band : 0.346409 < r < 0.346409
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1926867552
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.362463 +/- 0.00228266 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.362463 @ 95%CL (1 toyMC)
median expected limit: r < 0.362463 @ 95%CL (1 toyMC)
   68% expected band : 0.362463 < r < 0.362463
   95% expected band : 0.362463 < r < 0.362463
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 559377778
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.850232 +/- 0.00227589 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.850232 @ 95%CL (1 toyMC)
median expected limit: r < 0.850232 @ 95%CL (1 toyMC)
   68% expected band : 0.850232 < r < 0.850232
   95% expected band : 0.850232 < r < 0.850232
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -509339414
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.482616 +/- 0.00217022 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.482616 @ 95%CL (1 toyMC)
median expected limit: r < 0.482616 @ 95%CL (1 toyMC)
   68% expected band : 0.482616 < r < 0.482616
   95% expected band : 0.482616 < r < 0.482616
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 84736999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.414665 +/- 0.00362594 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.414665 @ 95%CL (1 toyMC)
median expected limit: r < 0.414665 @ 95%CL (1 toyMC)
   68% expected band : 0.414665 < r < 0.414665
   95% expected band : 0.414665 < r < 0.414665
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1958286699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338043 +/- 0.0024522 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.338043 @ 95%CL (1 toyMC)
median expected limit: r < 0.338043 @ 95%CL (1 toyMC)
   68% expected band : 0.338043 < r < 0.338043
   95% expected band : 0.338043 < r < 0.338043
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2124186993
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.304281 +/- 0.00254553 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.304281 @ 95%CL (1 toyMC)
median expected limit: r < 0.304281 @ 95%CL (1 toyMC)
   68% expected band : 0.304281 < r < 0.304281
   95% expected band : 0.304281 < r < 0.304281
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 644447841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.404742 +/- 0.00222087 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.404742 @ 95%CL (1 toyMC)
median expected limit: r < 0.404742 @ 95%CL (1 toyMC)
   68% expected band : 0.404742 < r < 0.404742
   95% expected band : 0.404742 < r < 0.404742
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -582289412
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236471 +/- 0.00307814 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.236471 @ 95%CL (1 toyMC)
median expected limit: r < 0.236471 @ 95%CL (1 toyMC)
   68% expected band : 0.236471 < r < 0.236471
   95% expected band : 0.236471 < r < 0.236471
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2113786639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.468013 +/- 0.0028608 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.468013 @ 95%CL (1 toyMC)
median expected limit: r < 0.468013 @ 95%CL (1 toyMC)
   68% expected band : 0.468013 < r < 0.468013
   95% expected band : 0.468013 < r < 0.468013
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 678810459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305047 +/- 0.00238863 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.305047 @ 95%CL (1 toyMC)
median expected limit: r < 0.305047 @ 95%CL (1 toyMC)
   68% expected band : 0.305047 < r < 0.305047
   95% expected band : 0.305047 < r < 0.305047
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -889500576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.878347 +/- 0.00309159 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.878347 @ 95%CL (1 toyMC)
median expected limit: r < 0.878347 @ 95%CL (1 toyMC)
   68% expected band : 0.878347 < r < 0.878347
   95% expected band : 0.878347 < r < 0.878347
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -892828665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.456513 +/- 0.00271302 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.456513 @ 95%CL (1 toyMC)
median expected limit: r < 0.456513 @ 95%CL (1 toyMC)
   68% expected band : 0.456513 < r < 0.456513
   95% expected band : 0.456513 < r < 0.456513
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2001179684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.545914 +/- 0.0023711 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.545914 @ 95%CL (1 toyMC)
median expected limit: r < 0.545914 @ 95%CL (1 toyMC)
   68% expected band : 0.545914 < r < 0.545914
   95% expected band : 0.545914 < r < 0.545914
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1043957213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286603 +/- 0.0024043 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.286603 @ 95%CL (1 toyMC)
median expected limit: r < 0.286603 @ 95%CL (1 toyMC)
   68% expected band : 0.286603 < r < 0.286603
   95% expected band : 0.286603 < r < 0.286603
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -528581163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.513808 +/- 0.00278321 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.513808 @ 95%CL (1 toyMC)
median expected limit: r < 0.513808 @ 95%CL (1 toyMC)
   68% expected band : 0.513808 < r < 0.513808
   95% expected band : 0.513808 < r < 0.513808
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1203819957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.816731 +/- 0.00247152 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.816731 @ 95%CL (1 toyMC)
median expected limit: r < 0.816731 @ 95%CL (1 toyMC)
   68% expected band : 0.816731 < r < 0.816731
   95% expected band : 0.816731 < r < 0.816731
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 877202614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.747553 +/- 0.00203092 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.747553 @ 95%CL (1 toyMC)
median expected limit: r < 0.747553 @ 95%CL (1 toyMC)
   68% expected band : 0.747553 < r < 0.747553
   95% expected band : 0.747553 < r < 0.747553
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1121920756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.315845 +/- 0.00306107 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.315845 @ 95%CL (1 toyMC)
median expected limit: r < 0.315845 @ 95%CL (1 toyMC)
   68% expected band : 0.315845 < r < 0.315845
   95% expected band : 0.315845 < r < 0.315845
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -681812782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.427656 +/- 0.00245398 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.427656 @ 95%CL (1 toyMC)
median expected limit: r < 0.427656 @ 95%CL (1 toyMC)
   68% expected band : 0.427656 < r < 0.427656
   95% expected band : 0.427656 < r < 0.427656
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -277220622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.392124 +/- 0.00256798 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.392124 @ 95%CL (1 toyMC)
median expected limit: r < 0.392124 @ 95%CL (1 toyMC)
   68% expected band : 0.392124 < r < 0.392124
   95% expected band : 0.392124 < r < 0.392124
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1632604870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.570159 +/- 0.00282417 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.570159 @ 95%CL (1 toyMC)
median expected limit: r < 0.570159 @ 95%CL (1 toyMC)
   68% expected band : 0.570159 < r < 0.570159
   95% expected band : 0.570159 < r < 0.570159
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1281976123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.353195 +/- 0.00205459 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.353195 @ 95%CL (1 toyMC)
median expected limit: r < 0.353195 @ 95%CL (1 toyMC)
   68% expected band : 0.353195 < r < 0.353195
   95% expected band : 0.353195 < r < 0.353195
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -6557630
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.500291 +/- 0.00257387 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.500291 @ 95%CL (1 toyMC)
median expected limit: r < 0.500291 @ 95%CL (1 toyMC)
   68% expected band : 0.500291 < r < 0.500291
   95% expected band : 0.500291 < r < 0.500291
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1363427407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.457763 +/- 0.00267554 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.457763 @ 95%CL (1 toyMC)
median expected limit: r < 0.457763 @ 95%CL (1 toyMC)
   68% expected band : 0.457763 < r < 0.457763
   95% expected band : 0.457763 < r < 0.457763
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -696385974
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.480011 +/- 0.00194036 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.480011 @ 95%CL (1 toyMC)
median expected limit: r < 0.480011 @ 95%CL (1 toyMC)
   68% expected band : 0.480011 < r < 0.480011
   95% expected band : 0.480011 < r < 0.480011
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1846521533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.497051 +/- 0.00252022 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.497051 @ 95%CL (1 toyMC)
median expected limit: r < 0.497051 @ 95%CL (1 toyMC)
   68% expected band : 0.497051 < r < 0.497051
   95% expected band : 0.497051 < r < 0.497051
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1871764209
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.413559 +/- 0.00218357 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.413559 @ 95%CL (1 toyMC)
median expected limit: r < 0.413559 @ 95%CL (1 toyMC)
   68% expected band : 0.413559 < r < 0.413559
   95% expected band : 0.413559 < r < 0.413559
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1135310640
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05018 +/- 0.00259719 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.05018 @ 95%CL (1 toyMC)
median expected limit: r < 1.05018 @ 95%CL (1 toyMC)
   68% expected band : 1.05018 < r < 1.05018
   95% expected band : 1.05018 < r < 1.05018
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 665692132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.367655 +/- 0.00224746 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.367655 @ 95%CL (1 toyMC)
median expected limit: r < 0.367655 @ 95%CL (1 toyMC)
   68% expected band : 0.367655 < r < 0.367655
   95% expected band : 0.367655 < r < 0.367655
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 208971316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.308541 +/- 0.00265893 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.308541 @ 95%CL (1 toyMC)
median expected limit: r < 0.308541 @ 95%CL (1 toyMC)
   68% expected band : 0.308541 < r < 0.308541
   95% expected band : 0.308541 < r < 0.308541
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1632418399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.482486 +/- 0.00288408 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.482486 @ 95%CL (1 toyMC)
median expected limit: r < 0.482486 @ 95%CL (1 toyMC)
   68% expected band : 0.482486 < r < 0.482486
   95% expected band : 0.482486 < r < 0.482486
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 779727092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.340121 +/- 0.0024576 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.340121 @ 95%CL (1 toyMC)
median expected limit: r < 0.340121 @ 95%CL (1 toyMC)
   68% expected band : 0.340121 < r < 0.340121
   95% expected band : 0.340121 < r < 0.340121
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1890765493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.34796 +/- 0.00263863 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.34796 @ 95%CL (1 toyMC)
median expected limit: r < 0.34796 @ 95%CL (1 toyMC)
   68% expected band : 0.34796 < r < 0.34796
   95% expected band : 0.34796 < r < 0.34796
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 589942644
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.515167 +/- 0.0034698 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.515167 @ 95%CL (1 toyMC)
median expected limit: r < 0.515167 @ 95%CL (1 toyMC)
   68% expected band : 0.515167 < r < 0.515167
   95% expected band : 0.515167 < r < 0.515167
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1210886218
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.391091 +/- 0.00252778 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.391091 @ 95%CL (1 toyMC)
median expected limit: r < 0.391091 @ 95%CL (1 toyMC)
   68% expected band : 0.391091 < r < 0.391091
   95% expected band : 0.391091 < r < 0.391091
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -584115153
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.612767 +/- 0.00329466 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.612767 @ 95%CL (1 toyMC)
median expected limit: r < 0.612767 @ 95%CL (1 toyMC)
   68% expected band : 0.612767 < r < 0.612767
   95% expected band : 0.612767 < r < 0.612767
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1246545769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.327744 +/- 0.00287942 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.327744 @ 95%CL (1 toyMC)
median expected limit: r < 0.327744 @ 95%CL (1 toyMC)
   68% expected band : 0.327744 < r < 0.327744
   95% expected band : 0.327744 < r < 0.327744
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2104508621
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284762 +/- 0.00287367 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.284762 @ 95%CL (1 toyMC)
median expected limit: r < 0.284762 @ 95%CL (1 toyMC)
   68% expected band : 0.284762 < r < 0.284762
   95% expected band : 0.284762 < r < 0.284762
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1568183698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.981549 +/- 0.00314656 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.981549 @ 95%CL (1 toyMC)
median expected limit: r < 0.981549 @ 95%CL (1 toyMC)
   68% expected band : 0.981549 < r < 0.981549
   95% expected band : 0.981549 < r < 0.981549
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -879954077
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.535556 +/- 0.00217009 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.535556 @ 95%CL (1 toyMC)
median expected limit: r < 0.535556 @ 95%CL (1 toyMC)
   68% expected band : 0.535556 < r < 0.535556
   95% expected band : 0.535556 < r < 0.535556
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1785125977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.435975 +/- 0.00375466 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.435975 @ 95%CL (1 toyMC)
median expected limit: r < 0.435975 @ 95%CL (1 toyMC)
   68% expected band : 0.435975 < r < 0.435975
   95% expected band : 0.435975 < r < 0.435975
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 483757394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31667 +/- 0.00294458 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.31667 @ 95%CL (1 toyMC)
median expected limit: r < 0.31667 @ 95%CL (1 toyMC)
   68% expected band : 0.31667 < r < 0.31667
   95% expected band : 0.31667 < r < 0.31667
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -342925747
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.296716 +/- 0.00269624 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.296716 @ 95%CL (1 toyMC)
median expected limit: r < 0.296716 @ 95%CL (1 toyMC)
   68% expected band : 0.296716 < r < 0.296716
   95% expected band : 0.296716 < r < 0.296716
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1238625805
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.606741 +/- 0.00314932 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.606741 @ 95%CL (1 toyMC)
median expected limit: r < 0.606741 @ 95%CL (1 toyMC)
   68% expected band : 0.606741 < r < 0.606741
   95% expected band : 0.606741 < r < 0.606741
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -400616498
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.593648 +/- 0.0032169 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.593648 @ 95%CL (1 toyMC)
median expected limit: r < 0.593648 @ 95%CL (1 toyMC)
   68% expected band : 0.593648 < r < 0.593648
   95% expected band : 0.593648 < r < 0.593648
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1784903642
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.3766 +/- 0.00270076 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.3766 @ 95%CL (1 toyMC)
median expected limit: r < 0.3766 @ 95%CL (1 toyMC)
   68% expected band : 0.3766 < r < 0.3766
   95% expected band : 0.3766 < r < 0.3766
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1295986014
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.319433 +/- 0.00211499 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.319433 @ 95%CL (1 toyMC)
median expected limit: r < 0.319433 @ 95%CL (1 toyMC)
   68% expected band : 0.319433 < r < 0.319433
   95% expected band : 0.319433 < r < 0.319433
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1468070151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.47764 +/- 0.00203946 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.47764 @ 95%CL (1 toyMC)
median expected limit: r < 0.47764 @ 95%CL (1 toyMC)
   68% expected band : 0.47764 < r < 0.47764
   95% expected band : 0.47764 < r < 0.47764
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1025290582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.437643 +/- 0.00328436 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.437643 @ 95%CL (1 toyMC)
median expected limit: r < 0.437643 @ 95%CL (1 toyMC)
   68% expected band : 0.437643 < r < 0.437643
   95% expected band : 0.437643 < r < 0.437643
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -87602267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.32671 +/- 0.00289058 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.32671 @ 95%CL (1 toyMC)
median expected limit: r < 0.32671 @ 95%CL (1 toyMC)
   68% expected band : 0.32671 < r < 0.32671
   95% expected band : 0.32671 < r < 0.32671
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -737102855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.344554 +/- 0.00217249 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.344554 @ 95%CL (1 toyMC)
median expected limit: r < 0.344554 @ 95%CL (1 toyMC)
   68% expected band : 0.344554 < r < 0.344554
   95% expected band : 0.344554 < r < 0.344554
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -406312786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.531581 +/- 0.00304333 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.531581 @ 95%CL (1 toyMC)
median expected limit: r < 0.531581 @ 95%CL (1 toyMC)
   68% expected band : 0.531581 < r < 0.531581
   95% expected band : 0.531581 < r < 0.531581
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2041761298
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.308654 +/- 0.0027448 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.308654 @ 95%CL (1 toyMC)
median expected limit: r < 0.308654 @ 95%CL (1 toyMC)
   68% expected band : 0.308654 < r < 0.308654
   95% expected band : 0.308654 < r < 0.308654
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 330570263
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.482272 +/- 0.00253444 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.482272 @ 95%CL (1 toyMC)
median expected limit: r < 0.482272 @ 95%CL (1 toyMC)
   68% expected band : 0.482272 < r < 0.482272
   95% expected band : 0.482272 < r < 0.482272
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -69665122
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.584056 +/- 0.00293066 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.584056 @ 95%CL (1 toyMC)
median expected limit: r < 0.584056 @ 95%CL (1 toyMC)
   68% expected band : 0.584056 < r < 0.584056
   95% expected band : 0.584056 < r < 0.584056
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 304536947
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.434994 +/- 0.00256171 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.434994 @ 95%CL (1 toyMC)
median expected limit: r < 0.434994 @ 95%CL (1 toyMC)
   68% expected band : 0.434994 < r < 0.434994
   95% expected band : 0.434994 < r < 0.434994
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1723445433
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.412164 +/- 0.00311693 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.412164 @ 95%CL (1 toyMC)
median expected limit: r < 0.412164 @ 95%CL (1 toyMC)
   68% expected band : 0.412164 < r < 0.412164
   95% expected band : 0.412164 < r < 0.412164
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1292145389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.301132 +/- 0.00298301 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.301132 @ 95%CL (1 toyMC)
median expected limit: r < 0.301132 @ 95%CL (1 toyMC)
   68% expected band : 0.301132 < r < 0.301132
   95% expected band : 0.301132 < r < 0.301132
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1699291983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.359217 +/- 0.00254753 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.359217 @ 95%CL (1 toyMC)
median expected limit: r < 0.359217 @ 95%CL (1 toyMC)
   68% expected band : 0.359217 < r < 0.359217
   95% expected band : 0.359217 < r < 0.359217
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1292396994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.557766 +/- 0.00238307 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.557766 @ 95%CL (1 toyMC)
median expected limit: r < 0.557766 @ 95%CL (1 toyMC)
   68% expected band : 0.557766 < r < 0.557766
   95% expected band : 0.557766 < r < 0.557766
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -170192192
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.383633 +/- 0.00233464 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.383633 @ 95%CL (1 toyMC)
median expected limit: r < 0.383633 @ 95%CL (1 toyMC)
   68% expected band : 0.383633 < r < 0.383633
   95% expected band : 0.383633 < r < 0.383633
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 43404006
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282853 +/- 0.00246718 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.282853 @ 95%CL (1 toyMC)
median expected limit: r < 0.282853 @ 95%CL (1 toyMC)
   68% expected band : 0.282853 < r < 0.282853
   95% expected band : 0.282853 < r < 0.282853
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1286364300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.517885 +/- 0.00233481 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.517885 @ 95%CL (1 toyMC)
median expected limit: r < 0.517885 @ 95%CL (1 toyMC)
   68% expected band : 0.517885 < r < 0.517885
   95% expected band : 0.517885 < r < 0.517885
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1636124167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.493541 +/- 0.00269264 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.493541 @ 95%CL (1 toyMC)
median expected limit: r < 0.493541 @ 95%CL (1 toyMC)
   68% expected band : 0.493541 < r < 0.493541
   95% expected band : 0.493541 < r < 0.493541
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 315897376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361439 +/- 0.00296049 @ 95% CL (100 tries)
Done in 0.26 min (cpu), 0.26 min (real)
mean   expected limit: r < 0.361439 @ 95%CL (1 toyMC)
median expected limit: r < 0.361439 @ 95%CL (1 toyMC)
   68% expected band : 0.361439 < r < 0.361439
   95% expected band : 0.361439 < r < 0.361439
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 726539686
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255174 +/- 0.00343909 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.255174 @ 95%CL (1 toyMC)
median expected limit: r < 0.255174 @ 95%CL (1 toyMC)
   68% expected band : 0.255174 < r < 0.255174
   95% expected band : 0.255174 < r < 0.255174
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -723192806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.302565 +/- 0.00237206 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.302565 @ 95%CL (1 toyMC)
median expected limit: r < 0.302565 @ 95%CL (1 toyMC)
   68% expected band : 0.302565 < r < 0.302565
   95% expected band : 0.302565 < r < 0.302565
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1591491755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.475327 +/- 0.00208147 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.475327 @ 95%CL (1 toyMC)
median expected limit: r < 0.475327 @ 95%CL (1 toyMC)
   68% expected band : 0.475327 < r < 0.475327
   95% expected band : 0.475327 < r < 0.475327
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1937744221
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.538919 +/- 0.0028707 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.538919 @ 95%CL (1 toyMC)
median expected limit: r < 0.538919 @ 95%CL (1 toyMC)
   68% expected band : 0.538919 < r < 0.538919
   95% expected band : 0.538919 < r < 0.538919
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 168744051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.38167 +/- 0.00260162 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.38167 @ 95%CL (1 toyMC)
median expected limit: r < 0.38167 @ 95%CL (1 toyMC)
   68% expected band : 0.38167 < r < 0.38167
   95% expected band : 0.38167 < r < 0.38167
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1268529674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.490973 +/- 0.00265259 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.490973 @ 95%CL (1 toyMC)
median expected limit: r < 0.490973 @ 95%CL (1 toyMC)
   68% expected band : 0.490973 < r < 0.490973
   95% expected band : 0.490973 < r < 0.490973
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine22.MarkovChainMC.mH22.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH22.-1000602386.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH22.-1025290582.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH22.-1121920756.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH22.-1203819957.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH22.-1246545769.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH22.-1292145389.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH22.-1295986014.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH22.-1335504874.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH22.-1363427407.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH22.-1439350449.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH22.-1452985016.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH22.-1636124167.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH22.-1698495070.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH22.-1699291983.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH22.-170192192.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH22.-1723445433.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH22.-1731448078.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH22.-1772439546.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH22.-1784903642.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH22.-1785125977.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH22.-1846521533.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH22.-1937744221.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH22.-1963885799.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH22.-2000716123.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH22.-203083169.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH22.-2041761298.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH22.-2113786639.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH22.-2124186993.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH22.-277220622.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH22.-342925747.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH22.-358165840.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH22.-400616498.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH22.-406312786.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH22.-414252611.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH22.-41926725.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH22.-509339414.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH22.-512514453.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH22.-528581163.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH22.-582289412.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH22.-584115153.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH22.-589454868.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH22.-6557630.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH22.-681812782.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH22.-696385974.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH22.-69665122.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH22.-723192806.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH22.-737102855.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH22.-819339179.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH22.-87602267.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH22.-879954077.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH22.-889500576.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH22.-892828665.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH22.-898066704.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH22.1043957213.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH22.1045990151.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH22.1135310640.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH22.1206228732.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH22.1210886218.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH22.1238625805.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH22.1251664926.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH22.1268529674.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH22.1281976123.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH22.1286364300.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH22.1292396994.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH22.1369386125.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH22.1468070151.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH22.1568183698.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH22.1591491755.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH22.161734809.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH22.1632418399.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH22.1632604870.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH22.168744051.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH22.1779929348.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH22.1871764209.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH22.1890765493.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH22.1926867552.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH22.1958286699.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH22.2001179684.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH22.203835991.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH22.2059236650.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH22.208971316.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH22.2104508621.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH22.304536947.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH22.315897376.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH22.330570263.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH22.418410450.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH22.43404006.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH22.483757394.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH22.559377778.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH22.589942644.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH22.644447841.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH22.665692132.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH22.678810459.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH22.726539686.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH22.768315523.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH22.779727092.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH22.779766957.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH22.84736999.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH22.877202614.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH22.968576415.root
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1344009964
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.75509 +/- 0.00455548 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.75509 @ 95%CL (1 toyMC)
median expected limit: r < 0.75509 @ 95%CL (1 toyMC)
   68% expected band : 0.75509 < r < 0.75509
   95% expected band : 0.75509 < r < 0.75509
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1464107165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4635 +/- 0.0037529 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.4635 @ 95%CL (1 toyMC)
median expected limit: r < 1.4635 @ 95%CL (1 toyMC)
   68% expected band : 1.4635 < r < 1.4635
   95% expected band : 1.4635 < r < 1.4635
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1049652245
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.97913 +/- 0.00389102 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.97913 @ 95%CL (1 toyMC)
median expected limit: r < 0.97913 @ 95%CL (1 toyMC)
   68% expected band : 0.97913 < r < 0.97913
   95% expected band : 0.97913 < r < 0.97913
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1766468648
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22186 +/- 0.00300351 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.22186 @ 95%CL (1 toyMC)
median expected limit: r < 1.22186 @ 95%CL (1 toyMC)
   68% expected band : 1.22186 < r < 1.22186
   95% expected band : 1.22186 < r < 1.22186
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -265031040
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.970038 +/- 0.00350881 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.970038 @ 95%CL (1 toyMC)
median expected limit: r < 0.970038 @ 95%CL (1 toyMC)
   68% expected band : 0.970038 < r < 0.970038
   95% expected band : 0.970038 < r < 0.970038
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -649649543
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22882 +/- 0.00369595 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.22882 @ 95%CL (1 toyMC)
median expected limit: r < 1.22882 @ 95%CL (1 toyMC)
   68% expected band : 1.22882 < r < 1.22882
   95% expected band : 1.22882 < r < 1.22882
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1899701577
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.885919 +/- 0.00311549 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.885919 @ 95%CL (1 toyMC)
median expected limit: r < 0.885919 @ 95%CL (1 toyMC)
   68% expected band : 0.885919 < r < 0.885919
   95% expected band : 0.885919 < r < 0.885919
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1262679794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58285 +/- 0.00373116 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.58285 @ 95%CL (1 toyMC)
median expected limit: r < 1.58285 @ 95%CL (1 toyMC)
   68% expected band : 1.58285 < r < 1.58285
   95% expected band : 1.58285 < r < 1.58285
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 279608577
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.745513 +/- 0.00256438 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.745513 @ 95%CL (1 toyMC)
median expected limit: r < 0.745513 @ 95%CL (1 toyMC)
   68% expected band : 0.745513 < r < 0.745513
   95% expected band : 0.745513 < r < 0.745513
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1694685495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25203 +/- 0.00378917 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.25203 @ 95%CL (1 toyMC)
median expected limit: r < 1.25203 @ 95%CL (1 toyMC)
   68% expected band : 1.25203 < r < 1.25203
   95% expected band : 1.25203 < r < 1.25203
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -496890888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.685098 +/- 0.00355267 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.685098 @ 95%CL (1 toyMC)
median expected limit: r < 0.685098 @ 95%CL (1 toyMC)
   68% expected band : 0.685098 < r < 0.685098
   95% expected band : 0.685098 < r < 0.685098
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1954850999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60196 +/- 0.00597723 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 2.60196 @ 95%CL (1 toyMC)
median expected limit: r < 2.60196 @ 95%CL (1 toyMC)
   68% expected band : 2.60196 < r < 2.60196
   95% expected band : 2.60196 < r < 2.60196
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 848918665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.79151 +/- 0.00311771 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.79151 @ 95%CL (1 toyMC)
median expected limit: r < 0.79151 @ 95%CL (1 toyMC)
   68% expected band : 0.79151 < r < 0.79151
   95% expected band : 0.79151 < r < 0.79151
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1681791378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.767525 +/- 0.00308858 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.767525 @ 95%CL (1 toyMC)
median expected limit: r < 0.767525 @ 95%CL (1 toyMC)
   68% expected band : 0.767525 < r < 0.767525
   95% expected band : 0.767525 < r < 0.767525
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1349289346
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.767485 +/- 0.00229375 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.767485 @ 95%CL (1 toyMC)
median expected limit: r < 0.767485 @ 95%CL (1 toyMC)
   68% expected band : 0.767485 < r < 0.767485
   95% expected band : 0.767485 < r < 0.767485
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1450708053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.918404 +/- 0.00291861 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.918404 @ 95%CL (1 toyMC)
median expected limit: r < 0.918404 @ 95%CL (1 toyMC)
   68% expected band : 0.918404 < r < 0.918404
   95% expected band : 0.918404 < r < 0.918404
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -163044763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77618 +/- 0.00365756 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.77618 @ 95%CL (1 toyMC)
median expected limit: r < 1.77618 @ 95%CL (1 toyMC)
   68% expected band : 1.77618 < r < 1.77618
   95% expected band : 1.77618 < r < 1.77618
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1582356325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.926537 +/- 0.00376703 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.926537 @ 95%CL (1 toyMC)
median expected limit: r < 0.926537 @ 95%CL (1 toyMC)
   68% expected band : 0.926537 < r < 0.926537
   95% expected band : 0.926537 < r < 0.926537
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1166754070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.600528 +/- 0.00373419 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.600528 @ 95%CL (1 toyMC)
median expected limit: r < 0.600528 @ 95%CL (1 toyMC)
   68% expected band : 0.600528 < r < 0.600528
   95% expected band : 0.600528 < r < 0.600528
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 858546272
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.738081 +/- 0.00294998 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.738081 @ 95%CL (1 toyMC)
median expected limit: r < 0.738081 @ 95%CL (1 toyMC)
   68% expected band : 0.738081 < r < 0.738081
   95% expected band : 0.738081 < r < 0.738081
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -71958229
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23463 +/- 0.0043398 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.23463 @ 95%CL (1 toyMC)
median expected limit: r < 1.23463 @ 95%CL (1 toyMC)
   68% expected band : 1.23463 < r < 1.23463
   95% expected band : 1.23463 < r < 1.23463
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1891944274
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.63343 +/- 0.0034638 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.63343 @ 95%CL (1 toyMC)
median expected limit: r < 0.63343 @ 95%CL (1 toyMC)
   68% expected band : 0.63343 < r < 0.63343
   95% expected band : 0.63343 < r < 0.63343
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1084367965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07202 +/- 0.00378756 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.07202 @ 95%CL (1 toyMC)
median expected limit: r < 1.07202 @ 95%CL (1 toyMC)
   68% expected band : 1.07202 < r < 1.07202
   95% expected band : 1.07202 < r < 1.07202
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1966392077
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01435 +/- 0.00358263 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.01435 @ 95%CL (1 toyMC)
median expected limit: r < 1.01435 @ 95%CL (1 toyMC)
   68% expected band : 1.01435 < r < 1.01435
   95% expected band : 1.01435 < r < 1.01435
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -664652443
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03753 +/- 0.00318108 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.03753 @ 95%CL (1 toyMC)
median expected limit: r < 1.03753 @ 95%CL (1 toyMC)
   68% expected band : 1.03753 < r < 1.03753
   95% expected band : 1.03753 < r < 1.03753
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1532911451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.755487 +/- 0.00267281 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.755487 @ 95%CL (1 toyMC)
median expected limit: r < 0.755487 @ 95%CL (1 toyMC)
   68% expected band : 0.755487 < r < 0.755487
   95% expected band : 0.755487 < r < 0.755487
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1652615794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.71226 +/- 0.003165 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.71226 @ 95%CL (1 toyMC)
median expected limit: r < 0.71226 @ 95%CL (1 toyMC)
   68% expected band : 0.71226 < r < 0.71226
   95% expected band : 0.71226 < r < 0.71226
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 579780416
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.76783 +/- 0.00424834 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.76783 @ 95%CL (1 toyMC)
median expected limit: r < 0.76783 @ 95%CL (1 toyMC)
   68% expected band : 0.76783 < r < 0.76783
   95% expected band : 0.76783 < r < 0.76783
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 296975178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.714555 +/- 0.00362952 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.714555 @ 95%CL (1 toyMC)
median expected limit: r < 0.714555 @ 95%CL (1 toyMC)
   68% expected band : 0.714555 < r < 0.714555
   95% expected band : 0.714555 < r < 0.714555
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1602955023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.599967 +/- 0.00293652 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.599967 @ 95%CL (1 toyMC)
median expected limit: r < 0.599967 @ 95%CL (1 toyMC)
   68% expected band : 0.599967 < r < 0.599967
   95% expected band : 0.599967 < r < 0.599967
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1997032896
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.671082 +/- 0.00357934 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.671082 @ 95%CL (1 toyMC)
median expected limit: r < 0.671082 @ 95%CL (1 toyMC)
   68% expected band : 0.671082 < r < 0.671082
   95% expected band : 0.671082 < r < 0.671082
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -48113627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53854 +/- 0.00348296 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.53854 @ 95%CL (1 toyMC)
median expected limit: r < 1.53854 @ 95%CL (1 toyMC)
   68% expected band : 1.53854 < r < 1.53854
   95% expected band : 1.53854 < r < 1.53854
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -737186378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.918571 +/- 0.00327177 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.918571 @ 95%CL (1 toyMC)
median expected limit: r < 0.918571 @ 95%CL (1 toyMC)
   68% expected band : 0.918571 < r < 0.918571
   95% expected band : 0.918571 < r < 0.918571
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -987570568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23955 +/- 0.00321206 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.23955 @ 95%CL (1 toyMC)
median expected limit: r < 1.23955 @ 95%CL (1 toyMC)
   68% expected band : 1.23955 < r < 1.23955
   95% expected band : 1.23955 < r < 1.23955
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1829461713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60685 +/- 0.00380198 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.60685 @ 95%CL (1 toyMC)
median expected limit: r < 1.60685 @ 95%CL (1 toyMC)
   68% expected band : 1.60685 < r < 1.60685
   95% expected band : 1.60685 < r < 1.60685
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1877754924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17434 +/- 0.00490125 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.17434 @ 95%CL (1 toyMC)
median expected limit: r < 1.17434 @ 95%CL (1 toyMC)
   68% expected band : 1.17434 < r < 1.17434
   95% expected band : 1.17434 < r < 1.17434
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -458668240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26222 +/- 0.00232755 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.26222 @ 95%CL (1 toyMC)
median expected limit: r < 1.26222 @ 95%CL (1 toyMC)
   68% expected band : 1.26222 < r < 1.26222
   95% expected band : 1.26222 < r < 1.26222
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1594528849
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73497 +/- 0.00383788 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.73497 @ 95%CL (1 toyMC)
median expected limit: r < 1.73497 @ 95%CL (1 toyMC)
   68% expected band : 1.73497 < r < 1.73497
   95% expected band : 1.73497 < r < 1.73497
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 253706761
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.67835 +/- 0.00302903 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.67835 @ 95%CL (1 toyMC)
median expected limit: r < 0.67835 @ 95%CL (1 toyMC)
   68% expected band : 0.67835 < r < 0.67835
   95% expected band : 0.67835 < r < 0.67835
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -362144779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.927162 +/- 0.00360801 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.927162 @ 95%CL (1 toyMC)
median expected limit: r < 0.927162 @ 95%CL (1 toyMC)
   68% expected band : 0.927162 < r < 0.927162
   95% expected band : 0.927162 < r < 0.927162
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -66854828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.619175 +/- 0.00314243 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.619175 @ 95%CL (1 toyMC)
median expected limit: r < 0.619175 @ 95%CL (1 toyMC)
   68% expected band : 0.619175 < r < 0.619175
   95% expected band : 0.619175 < r < 0.619175
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 478908397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04616 +/- 0.00522159 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 2.04616 @ 95%CL (1 toyMC)
median expected limit: r < 2.04616 @ 95%CL (1 toyMC)
   68% expected band : 2.04616 < r < 2.04616
   95% expected band : 2.04616 < r < 2.04616
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1426424556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52186 +/- 0.00340441 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.52186 @ 95%CL (1 toyMC)
median expected limit: r < 1.52186 @ 95%CL (1 toyMC)
   68% expected band : 1.52186 < r < 1.52186
   95% expected band : 1.52186 < r < 1.52186
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1824126186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.958029 +/- 0.00399261 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.958029 @ 95%CL (1 toyMC)
median expected limit: r < 0.958029 @ 95%CL (1 toyMC)
   68% expected band : 0.958029 < r < 0.958029
   95% expected band : 0.958029 < r < 0.958029
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1367806030
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.5578 +/- 0.00306341 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.5578 @ 95%CL (1 toyMC)
median expected limit: r < 0.5578 @ 95%CL (1 toyMC)
   68% expected band : 0.5578 < r < 0.5578
   95% expected band : 0.5578 < r < 0.5578
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 602180649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.716181 +/- 0.00396835 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.716181 @ 95%CL (1 toyMC)
median expected limit: r < 0.716181 @ 95%CL (1 toyMC)
   68% expected band : 0.716181 < r < 0.716181
   95% expected band : 0.716181 < r < 0.716181
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1083128792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.498776 +/- 0.00275366 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.498776 @ 95%CL (1 toyMC)
median expected limit: r < 0.498776 @ 95%CL (1 toyMC)
   68% expected band : 0.498776 < r < 0.498776
   95% expected band : 0.498776 < r < 0.498776
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 251208104
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55275 +/- 0.00329702 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.55275 @ 95%CL (1 toyMC)
median expected limit: r < 1.55275 @ 95%CL (1 toyMC)
   68% expected band : 1.55275 < r < 1.55275
   95% expected band : 1.55275 < r < 1.55275
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 818606593
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15103 +/- 0.00339842 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.15103 @ 95%CL (1 toyMC)
median expected limit: r < 1.15103 @ 95%CL (1 toyMC)
   68% expected band : 1.15103 < r < 1.15103
   95% expected band : 1.15103 < r < 1.15103
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1592827170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.810421 +/- 0.00334835 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.810421 @ 95%CL (1 toyMC)
median expected limit: r < 0.810421 @ 95%CL (1 toyMC)
   68% expected band : 0.810421 < r < 0.810421
   95% expected band : 0.810421 < r < 0.810421
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 411100623
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.661106 +/- 0.00320627 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.661106 @ 95%CL (1 toyMC)
median expected limit: r < 0.661106 @ 95%CL (1 toyMC)
   68% expected band : 0.661106 < r < 0.661106
   95% expected band : 0.661106 < r < 0.661106
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -934473610
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.815148 +/- 0.00341555 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.815148 @ 95%CL (1 toyMC)
median expected limit: r < 0.815148 @ 95%CL (1 toyMC)
   68% expected band : 0.815148 < r < 0.815148
   95% expected band : 0.815148 < r < 0.815148
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1369719195
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49864 +/- 0.00330036 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.49864 @ 95%CL (1 toyMC)
median expected limit: r < 1.49864 @ 95%CL (1 toyMC)
   68% expected band : 1.49864 < r < 1.49864
   95% expected band : 1.49864 < r < 1.49864
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1763206515
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19195 +/- 0.00414693 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.19195 @ 95%CL (1 toyMC)
median expected limit: r < 1.19195 @ 95%CL (1 toyMC)
   68% expected band : 1.19195 < r < 1.19195
   95% expected band : 1.19195 < r < 1.19195
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1721800853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.646202 +/- 0.00335907 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.646202 @ 95%CL (1 toyMC)
median expected limit: r < 0.646202 @ 95%CL (1 toyMC)
   68% expected band : 0.646202 < r < 0.646202
   95% expected band : 0.646202 < r < 0.646202
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1327168297
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15697 +/- 0.00404578 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.15697 @ 95%CL (1 toyMC)
median expected limit: r < 1.15697 @ 95%CL (1 toyMC)
   68% expected band : 1.15697 < r < 1.15697
   95% expected band : 1.15697 < r < 1.15697
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1475966451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.826324 +/- 0.00317432 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.826324 @ 95%CL (1 toyMC)
median expected limit: r < 0.826324 @ 95%CL (1 toyMC)
   68% expected band : 0.826324 < r < 0.826324
   95% expected band : 0.826324 < r < 0.826324
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1991486066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09696 +/- 0.00376746 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.09696 @ 95%CL (1 toyMC)
median expected limit: r < 1.09696 @ 95%CL (1 toyMC)
   68% expected band : 1.09696 < r < 1.09696
   95% expected band : 1.09696 < r < 1.09696
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1098514320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28848 +/- 0.00385752 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.28848 @ 95%CL (1 toyMC)
median expected limit: r < 1.28848 @ 95%CL (1 toyMC)
   68% expected band : 1.28848 < r < 1.28848
   95% expected band : 1.28848 < r < 1.28848
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1914284514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.870174 +/- 0.00360436 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.870174 @ 95%CL (1 toyMC)
median expected limit: r < 0.870174 @ 95%CL (1 toyMC)
   68% expected band : 0.870174 < r < 0.870174
   95% expected band : 0.870174 < r < 0.870174
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 444580369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.959635 +/- 0.00308365 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.959635 @ 95%CL (1 toyMC)
median expected limit: r < 0.959635 @ 95%CL (1 toyMC)
   68% expected band : 0.959635 < r < 0.959635
   95% expected band : 0.959635 < r < 0.959635
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -383019967
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.633278 +/- 0.00320306 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.633278 @ 95%CL (1 toyMC)
median expected limit: r < 0.633278 @ 95%CL (1 toyMC)
   68% expected band : 0.633278 < r < 0.633278
   95% expected band : 0.633278 < r < 0.633278
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1876945556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12136 +/- 0.0032672 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.12136 @ 95%CL (1 toyMC)
median expected limit: r < 1.12136 @ 95%CL (1 toyMC)
   68% expected band : 1.12136 < r < 1.12136
   95% expected band : 1.12136 < r < 1.12136
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1760568670
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.657159 +/- 0.00275513 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.657159 @ 95%CL (1 toyMC)
median expected limit: r < 0.657159 @ 95%CL (1 toyMC)
   68% expected band : 0.657159 < r < 0.657159
   95% expected band : 0.657159 < r < 0.657159
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1101929874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.784548 +/- 0.00253389 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.784548 @ 95%CL (1 toyMC)
median expected limit: r < 0.784548 @ 95%CL (1 toyMC)
   68% expected band : 0.784548 < r < 0.784548
   95% expected band : 0.784548 < r < 0.784548
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1057479575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.945837 +/- 0.00336825 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.945837 @ 95%CL (1 toyMC)
median expected limit: r < 0.945837 @ 95%CL (1 toyMC)
   68% expected band : 0.945837 < r < 0.945837
   95% expected band : 0.945837 < r < 0.945837
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1328506998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.981922 +/- 0.00429017 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.981922 @ 95%CL (1 toyMC)
median expected limit: r < 0.981922 @ 95%CL (1 toyMC)
   68% expected band : 0.981922 < r < 0.981922
   95% expected band : 0.981922 < r < 0.981922
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1237632272
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06999 +/- 0.00304037 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.06999 @ 95%CL (1 toyMC)
median expected limit: r < 1.06999 @ 95%CL (1 toyMC)
   68% expected band : 1.06999 < r < 1.06999
   95% expected band : 1.06999 < r < 1.06999
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1536082521
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.562058 +/- 0.00248139 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.562058 @ 95%CL (1 toyMC)
median expected limit: r < 0.562058 @ 95%CL (1 toyMC)
   68% expected band : 0.562058 < r < 0.562058
   95% expected band : 0.562058 < r < 0.562058
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1961620202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37545 +/- 0.00351986 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.37545 @ 95%CL (1 toyMC)
median expected limit: r < 1.37545 @ 95%CL (1 toyMC)
   68% expected band : 1.37545 < r < 1.37545
   95% expected band : 1.37545 < r < 1.37545
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 167156338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14559 +/- 0.00323181 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.14559 @ 95%CL (1 toyMC)
median expected limit: r < 1.14559 @ 95%CL (1 toyMC)
   68% expected band : 1.14559 < r < 1.14559
   95% expected band : 1.14559 < r < 1.14559
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 967384135
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11199 +/- 0.00369198 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.11199 @ 95%CL (1 toyMC)
median expected limit: r < 1.11199 @ 95%CL (1 toyMC)
   68% expected band : 1.11199 < r < 1.11199
   95% expected band : 1.11199 < r < 1.11199
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -369159388
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00871 +/- 0.00306112 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.00871 @ 95%CL (1 toyMC)
median expected limit: r < 1.00871 @ 95%CL (1 toyMC)
   68% expected band : 1.00871 < r < 1.00871
   95% expected band : 1.00871 < r < 1.00871
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1606782941
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11812 +/- 0.00299375 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.11812 @ 95%CL (1 toyMC)
median expected limit: r < 1.11812 @ 95%CL (1 toyMC)
   68% expected band : 1.11812 < r < 1.11812
   95% expected band : 1.11812 < r < 1.11812
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1210592719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.93545 +/- 0.00358677 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.93545 @ 95%CL (1 toyMC)
median expected limit: r < 0.93545 @ 95%CL (1 toyMC)
   68% expected band : 0.93545 < r < 0.93545
   95% expected band : 0.93545 < r < 0.93545
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2087205521
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03694 +/- 0.00372779 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.03694 @ 95%CL (1 toyMC)
median expected limit: r < 1.03694 @ 95%CL (1 toyMC)
   68% expected band : 1.03694 < r < 1.03694
   95% expected band : 1.03694 < r < 1.03694
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 869799544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18873 +/- 0.00411994 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.18873 @ 95%CL (1 toyMC)
median expected limit: r < 1.18873 @ 95%CL (1 toyMC)
   68% expected band : 1.18873 < r < 1.18873
   95% expected band : 1.18873 < r < 1.18873
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1953454261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.799281 +/- 0.00292281 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.799281 @ 95%CL (1 toyMC)
median expected limit: r < 0.799281 @ 95%CL (1 toyMC)
   68% expected band : 0.799281 < r < 0.799281
   95% expected band : 0.799281 < r < 0.799281
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1650530669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18181 +/- 0.00368901 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.18181 @ 95%CL (1 toyMC)
median expected limit: r < 1.18181 @ 95%CL (1 toyMC)
   68% expected band : 1.18181 < r < 1.18181
   95% expected band : 1.18181 < r < 1.18181
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -859828396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.836386 +/- 0.00396489 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.836386 @ 95%CL (1 toyMC)
median expected limit: r < 0.836386 @ 95%CL (1 toyMC)
   68% expected band : 0.836386 < r < 0.836386
   95% expected band : 0.836386 < r < 0.836386
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2081875128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.919132 +/- 0.00389702 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.919132 @ 95%CL (1 toyMC)
median expected limit: r < 0.919132 @ 95%CL (1 toyMC)
   68% expected band : 0.919132 < r < 0.919132
   95% expected band : 0.919132 < r < 0.919132
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -567052241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.584752 +/- 0.00319005 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.584752 @ 95%CL (1 toyMC)
median expected limit: r < 0.584752 @ 95%CL (1 toyMC)
   68% expected band : 0.584752 < r < 0.584752
   95% expected band : 0.584752 < r < 0.584752
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1910017450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06504 +/- 0.00334159 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.06504 @ 95%CL (1 toyMC)
median expected limit: r < 1.06504 @ 95%CL (1 toyMC)
   68% expected band : 1.06504 < r < 1.06504
   95% expected band : 1.06504 < r < 1.06504
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -876958566
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33935 +/- 0.00400956 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.33935 @ 95%CL (1 toyMC)
median expected limit: r < 1.33935 @ 95%CL (1 toyMC)
   68% expected band : 1.33935 < r < 1.33935
   95% expected band : 1.33935 < r < 1.33935
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1164828513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22126 +/- 0.00345541 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.22126 @ 95%CL (1 toyMC)
median expected limit: r < 1.22126 @ 95%CL (1 toyMC)
   68% expected band : 1.22126 < r < 1.22126
   95% expected band : 1.22126 < r < 1.22126
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1113646763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.4329 +/- 0.00282144 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.4329 @ 95%CL (1 toyMC)
median expected limit: r < 0.4329 @ 95%CL (1 toyMC)
   68% expected band : 0.4329 < r < 0.4329
   95% expected band : 0.4329 < r < 0.4329
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 823360560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.755137 +/- 0.00335001 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.755137 @ 95%CL (1 toyMC)
median expected limit: r < 0.755137 @ 95%CL (1 toyMC)
   68% expected band : 0.755137 < r < 0.755137
   95% expected band : 0.755137 < r < 0.755137
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -13485141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30168 +/- 0.00396603 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.30168 @ 95%CL (1 toyMC)
median expected limit: r < 1.30168 @ 95%CL (1 toyMC)
   68% expected band : 1.30168 < r < 1.30168
   95% expected band : 1.30168 < r < 1.30168
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -227702130
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.711662 +/- 0.00353026 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.711662 @ 95%CL (1 toyMC)
median expected limit: r < 0.711662 @ 95%CL (1 toyMC)
   68% expected band : 0.711662 < r < 0.711662
   95% expected band : 0.711662 < r < 0.711662
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1366744319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.946685 +/- 0.00331763 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.946685 @ 95%CL (1 toyMC)
median expected limit: r < 0.946685 @ 95%CL (1 toyMC)
   68% expected band : 0.946685 < r < 0.946685
   95% expected band : 0.946685 < r < 0.946685
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1639857746
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.833033 +/- 0.00348473 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.833033 @ 95%CL (1 toyMC)
median expected limit: r < 0.833033 @ 95%CL (1 toyMC)
   68% expected band : 0.833033 < r < 0.833033
   95% expected band : 0.833033 < r < 0.833033
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1812569474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14568 +/- 0.0040836 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.14568 @ 95%CL (1 toyMC)
median expected limit: r < 2.14568 @ 95%CL (1 toyMC)
   68% expected band : 2.14568 < r < 2.14568
   95% expected band : 2.14568 < r < 2.14568
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1849258607
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41285 +/- 0.0040826 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.41285 @ 95%CL (1 toyMC)
median expected limit: r < 1.41285 @ 95%CL (1 toyMC)
   68% expected band : 1.41285 < r < 1.41285
   95% expected band : 1.41285 < r < 1.41285
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1540567338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43693 +/- 0.0034317 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.43693 @ 95%CL (1 toyMC)
median expected limit: r < 1.43693 @ 95%CL (1 toyMC)
   68% expected band : 1.43693 < r < 1.43693
   95% expected band : 1.43693 < r < 1.43693
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1137733611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.877991 +/- 0.00259768 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.877991 @ 95%CL (1 toyMC)
median expected limit: r < 0.877991 @ 95%CL (1 toyMC)
   68% expected band : 0.877991 < r < 0.877991
   95% expected band : 0.877991 < r < 0.877991
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 470821446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18466 +/- 0.00298198 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.18466 @ 95%CL (1 toyMC)
median expected limit: r < 1.18466 @ 95%CL (1 toyMC)
   68% expected band : 1.18466 < r < 1.18466
   95% expected band : 1.18466 < r < 1.18466
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1119184343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4212 +/- 0.0038977 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.4212 @ 95%CL (1 toyMC)
median expected limit: r < 1.4212 @ 95%CL (1 toyMC)
   68% expected band : 1.4212 < r < 1.4212
   95% expected band : 1.4212 < r < 1.4212
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1330839866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.764589 +/- 0.00370548 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.764589 @ 95%CL (1 toyMC)
median expected limit: r < 0.764589 @ 95%CL (1 toyMC)
   68% expected band : 0.764589 < r < 0.764589
   95% expected band : 0.764589 < r < 0.764589
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 537177789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05519 +/- 0.00320593 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.05519 @ 95%CL (1 toyMC)
median expected limit: r < 1.05519 @ 95%CL (1 toyMC)
   68% expected band : 1.05519 < r < 1.05519
   95% expected band : 1.05519 < r < 1.05519
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1598458126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22283 +/- 0.00371951 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.22283 @ 95%CL (1 toyMC)
median expected limit: r < 1.22283 @ 95%CL (1 toyMC)
   68% expected band : 1.22283 < r < 1.22283
   95% expected band : 1.22283 < r < 1.22283
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine28.MarkovChainMC.mH28.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH28.-1083128792.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH28.-1084367965.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH28.-1098514320.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH28.-1113646763.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH28.-1137733611.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH28.-1166754070.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH28.-1210592719.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH28.-1237632272.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH28.-1327168297.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH28.-1344009964.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH28.-13485141.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH28.-1349289346.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH28.-1366744319.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH28.-1367806030.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH28.-1369719195.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH28.-1426424556.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH28.-1464107165.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH28.-1475966451.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH28.-1532911451.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH28.-1536082521.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH28.-1540567338.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH28.-1582356325.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH28.-1594528849.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH28.-1598458126.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH28.-1606782941.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH28.-163044763.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH28.-1639857746.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH28.-1652615794.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH28.-1694685495.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH28.-1766468648.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH28.-1812569474.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH28.-1824126186.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH28.-1829461713.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH28.-1849258607.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH28.-1876945556.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH28.-1877754924.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH28.-1910017450.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH28.-1953454261.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH28.-1966392077.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH28.-2087205521.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH28.-227702130.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH28.-265031040.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH28.-362144779.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH28.-369159388.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH28.-383019967.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH28.-458668240.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH28.-48113627.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH28.-496890888.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH28.-567052241.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH28.-649649543.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH28.-664652443.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH28.-66854828.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH28.-71958229.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH28.-737186378.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH28.-859828396.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH28.-876958566.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH28.-934473610.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH28.-987570568.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH28.1049652245.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH28.1057479575.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH28.1101929874.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH28.1119184343.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH28.1164828513.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH28.1262679794.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH28.1328506998.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH28.1330839866.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH28.1450708053.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH28.1592827170.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH28.1602955023.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH28.1650530669.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH28.167156338.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH28.1681791378.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH28.1721800853.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH28.1760568670.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH28.1763206515.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH28.1891944274.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH28.1899701577.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH28.1914284514.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH28.1954850999.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH28.1961620202.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH28.1991486066.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH28.1997032896.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH28.2081875128.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH28.251208104.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH28.253706761.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH28.279608577.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH28.296975178.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH28.411100623.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH28.444580369.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH28.470821446.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH28.478908397.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH28.537177789.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH28.579780416.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH28.602180649.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH28.818606593.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH28.823360560.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH28.848918665.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH28.858546272.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH28.869799544.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH28.967384135.root
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -393562212
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.62366 +/- 0.00400122 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.62366 @ 95%CL (1 toyMC)
median expected limit: r < 1.62366 @ 95%CL (1 toyMC)
   68% expected band : 1.62366 < r < 1.62366
   95% expected band : 1.62366 < r < 1.62366
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1232031411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.811192 +/- 0.00213053 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.811192 @ 95%CL (1 toyMC)
median expected limit: r < 0.811192 @ 95%CL (1 toyMC)
   68% expected band : 0.811192 < r < 0.811192
   95% expected band : 0.811192 < r < 0.811192
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1796327205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66706 +/- 0.00364547 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.66706 @ 95%CL (1 toyMC)
median expected limit: r < 1.66706 @ 95%CL (1 toyMC)
   68% expected band : 1.66706 < r < 1.66706
   95% expected band : 1.66706 < r < 1.66706
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -388763817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49306 +/- 0.00387438 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.49306 @ 95%CL (1 toyMC)
median expected limit: r < 1.49306 @ 95%CL (1 toyMC)
   68% expected band : 1.49306 < r < 1.49306
   95% expected band : 1.49306 < r < 1.49306
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1743319987
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08412 +/- 0.00333173 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.08412 @ 95%CL (1 toyMC)
median expected limit: r < 1.08412 @ 95%CL (1 toyMC)
   68% expected band : 1.08412 < r < 1.08412
   95% expected band : 1.08412 < r < 1.08412
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -390507445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28019 +/- 0.00405383 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.28019 @ 95%CL (1 toyMC)
median expected limit: r < 1.28019 @ 95%CL (1 toyMC)
   68% expected band : 1.28019 < r < 1.28019
   95% expected band : 1.28019 < r < 1.28019
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1407137605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1471 +/- 0.00371813 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.1471 @ 95%CL (1 toyMC)
median expected limit: r < 1.1471 @ 95%CL (1 toyMC)
   68% expected band : 1.1471 < r < 1.1471
   95% expected band : 1.1471 < r < 1.1471
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1924945494
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21768 +/- 0.00376884 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.21768 @ 95%CL (1 toyMC)
median expected limit: r < 1.21768 @ 95%CL (1 toyMC)
   68% expected band : 1.21768 < r < 1.21768
   95% expected band : 1.21768 < r < 1.21768
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2074896969
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85933 +/- 0.00371105 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.85933 @ 95%CL (1 toyMC)
median expected limit: r < 1.85933 @ 95%CL (1 toyMC)
   68% expected band : 1.85933 < r < 1.85933
   95% expected band : 1.85933 < r < 1.85933
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1559311545
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.841244 +/- 0.002596 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.841244 @ 95%CL (1 toyMC)
median expected limit: r < 0.841244 @ 95%CL (1 toyMC)
   68% expected band : 0.841244 < r < 0.841244
   95% expected band : 0.841244 < r < 0.841244
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -361085815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74713 +/- 0.00417601 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.74713 @ 95%CL (1 toyMC)
median expected limit: r < 1.74713 @ 95%CL (1 toyMC)
   68% expected band : 1.74713 < r < 1.74713
   95% expected band : 1.74713 < r < 1.74713
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 661359018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.969904 +/- 0.00386397 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.969904 @ 95%CL (1 toyMC)
median expected limit: r < 0.969904 @ 95%CL (1 toyMC)
   68% expected band : 0.969904 < r < 0.969904
   95% expected band : 0.969904 < r < 0.969904
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 193052564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.966313 +/- 0.00333259 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.966313 @ 95%CL (1 toyMC)
median expected limit: r < 0.966313 @ 95%CL (1 toyMC)
   68% expected band : 0.966313 < r < 0.966313
   95% expected band : 0.966313 < r < 0.966313
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1893772976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.81972 +/- 0.00304845 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.81972 @ 95%CL (1 toyMC)
median expected limit: r < 0.81972 @ 95%CL (1 toyMC)
   68% expected band : 0.81972 < r < 0.81972
   95% expected band : 0.81972 < r < 0.81972
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1121681323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.02339 +/- 0.00446422 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 2.02339 @ 95%CL (1 toyMC)
median expected limit: r < 2.02339 @ 95%CL (1 toyMC)
   68% expected band : 2.02339 < r < 2.02339
   95% expected band : 2.02339 < r < 2.02339
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2052352750
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34924 +/- 0.00432964 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.34924 @ 95%CL (1 toyMC)
median expected limit: r < 1.34924 @ 95%CL (1 toyMC)
   68% expected band : 1.34924 < r < 1.34924
   95% expected band : 1.34924 < r < 1.34924
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -750619853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68225 +/- 0.00334753 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.68225 @ 95%CL (1 toyMC)
median expected limit: r < 1.68225 @ 95%CL (1 toyMC)
   68% expected band : 1.68225 < r < 1.68225
   95% expected band : 1.68225 < r < 1.68225
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1293636026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.990114 +/- 0.00327778 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.990114 @ 95%CL (1 toyMC)
median expected limit: r < 0.990114 @ 95%CL (1 toyMC)
   68% expected band : 0.990114 < r < 0.990114
   95% expected band : 0.990114 < r < 0.990114
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -413925711
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22644 +/- 0.00389547 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.22644 @ 95%CL (1 toyMC)
median expected limit: r < 1.22644 @ 95%CL (1 toyMC)
   68% expected band : 1.22644 < r < 1.22644
   95% expected band : 1.22644 < r < 1.22644
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1619394270
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12314 +/- 0.00292594 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.12314 @ 95%CL (1 toyMC)
median expected limit: r < 1.12314 @ 95%CL (1 toyMC)
   68% expected band : 1.12314 < r < 1.12314
   95% expected band : 1.12314 < r < 1.12314
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -104204325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38221 +/- 0.00369389 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.38221 @ 95%CL (1 toyMC)
median expected limit: r < 1.38221 @ 95%CL (1 toyMC)
   68% expected band : 1.38221 < r < 1.38221
   95% expected band : 1.38221 < r < 1.38221
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1369437319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32179 +/- 0.00332476 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.32179 @ 95%CL (1 toyMC)
median expected limit: r < 1.32179 @ 95%CL (1 toyMC)
   68% expected band : 1.32179 < r < 1.32179
   95% expected band : 1.32179 < r < 1.32179
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1250394538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54379 +/- 0.00413192 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.54379 @ 95%CL (1 toyMC)
median expected limit: r < 2.54379 @ 95%CL (1 toyMC)
   68% expected band : 2.54379 < r < 2.54379
   95% expected band : 2.54379 < r < 2.54379
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1340292984
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.951095 +/- 0.00319844 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.951095 @ 95%CL (1 toyMC)
median expected limit: r < 0.951095 @ 95%CL (1 toyMC)
   68% expected band : 0.951095 < r < 0.951095
   95% expected band : 0.951095 < r < 0.951095
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1459124126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28608 +/- 0.00431801 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.28608 @ 95%CL (1 toyMC)
median expected limit: r < 1.28608 @ 95%CL (1 toyMC)
   68% expected band : 1.28608 < r < 1.28608
   95% expected band : 1.28608 < r < 1.28608
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -67838333
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06967 +/- 0.00305376 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.06967 @ 95%CL (1 toyMC)
median expected limit: r < 1.06967 @ 95%CL (1 toyMC)
   68% expected band : 1.06967 < r < 1.06967
   95% expected band : 1.06967 < r < 1.06967
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1258863479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03585 +/- 0.00407413 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.03585 @ 95%CL (1 toyMC)
median expected limit: r < 1.03585 @ 95%CL (1 toyMC)
   68% expected band : 1.03585 < r < 1.03585
   95% expected band : 1.03585 < r < 1.03585
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1133637142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.47415 +/- 0.00467863 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 1.47415 @ 95%CL (1 toyMC)
median expected limit: r < 1.47415 @ 95%CL (1 toyMC)
   68% expected band : 1.47415 < r < 1.47415
   95% expected band : 1.47415 < r < 1.47415
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 811283943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35235 +/- 0.00386247 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.35235 @ 95%CL (1 toyMC)
median expected limit: r < 1.35235 @ 95%CL (1 toyMC)
   68% expected band : 1.35235 < r < 1.35235
   95% expected band : 1.35235 < r < 1.35235
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 675773042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71328 +/- 0.00347583 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.71328 @ 95%CL (1 toyMC)
median expected limit: r < 1.71328 @ 95%CL (1 toyMC)
   68% expected band : 1.71328 < r < 1.71328
   95% expected band : 1.71328 < r < 1.71328
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1684808222
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.927145 +/- 0.00371692 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.927145 @ 95%CL (1 toyMC)
median expected limit: r < 0.927145 @ 95%CL (1 toyMC)
   68% expected band : 0.927145 < r < 0.927145
   95% expected band : 0.927145 < r < 0.927145
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1208543346
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17098 +/- 0.00472076 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.17098 @ 95%CL (1 toyMC)
median expected limit: r < 2.17098 @ 95%CL (1 toyMC)
   68% expected band : 2.17098 < r < 2.17098
   95% expected band : 2.17098 < r < 2.17098
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1111020404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66429 +/- 0.0036785 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.66429 @ 95%CL (1 toyMC)
median expected limit: r < 1.66429 @ 95%CL (1 toyMC)
   68% expected band : 1.66429 < r < 1.66429
   95% expected band : 1.66429 < r < 1.66429
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 521882154
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.758568 +/- 0.00360955 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.758568 @ 95%CL (1 toyMC)
median expected limit: r < 0.758568 @ 95%CL (1 toyMC)
   68% expected band : 0.758568 < r < 0.758568
   95% expected band : 0.758568 < r < 0.758568
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -490094274
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25341 +/- 0.00405267 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.25341 @ 95%CL (1 toyMC)
median expected limit: r < 1.25341 @ 95%CL (1 toyMC)
   68% expected band : 1.25341 < r < 1.25341
   95% expected band : 1.25341 < r < 1.25341
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -219331168
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.98605 +/- 0.00369472 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.98605 @ 95%CL (1 toyMC)
median expected limit: r < 0.98605 @ 95%CL (1 toyMC)
   68% expected band : 0.98605 < r < 0.98605
   95% expected band : 0.98605 < r < 0.98605
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 93802098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10113 +/- 0.00410613 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 2.10113 @ 95%CL (1 toyMC)
median expected limit: r < 2.10113 @ 95%CL (1 toyMC)
   68% expected band : 2.10113 < r < 2.10113
   95% expected band : 2.10113 < r < 2.10113
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -56786936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22473 +/- 0.00321026 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.22473 @ 95%CL (1 toyMC)
median expected limit: r < 1.22473 @ 95%CL (1 toyMC)
   68% expected band : 1.22473 < r < 1.22473
   95% expected band : 1.22473 < r < 1.22473
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1355591591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.866016 +/- 0.0032823 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.866016 @ 95%CL (1 toyMC)
median expected limit: r < 0.866016 @ 95%CL (1 toyMC)
   68% expected band : 0.866016 < r < 0.866016
   95% expected band : 0.866016 < r < 0.866016
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -387395332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0495 +/- 0.00345324 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.0495 @ 95%CL (1 toyMC)
median expected limit: r < 1.0495 @ 95%CL (1 toyMC)
   68% expected band : 1.0495 < r < 1.0495
   95% expected band : 1.0495 < r < 1.0495
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1899630608
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39648 +/- 0.00451526 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.39648 @ 95%CL (1 toyMC)
median expected limit: r < 2.39648 @ 95%CL (1 toyMC)
   68% expected band : 2.39648 < r < 2.39648
   95% expected band : 2.39648 < r < 2.39648
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 613894799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.867361 +/- 0.00345483 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.867361 @ 95%CL (1 toyMC)
median expected limit: r < 0.867361 @ 95%CL (1 toyMC)
   68% expected band : 0.867361 < r < 0.867361
   95% expected band : 0.867361 < r < 0.867361
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1992685019
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48245 +/- 0.0041078 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.48245 @ 95%CL (1 toyMC)
median expected limit: r < 1.48245 @ 95%CL (1 toyMC)
   68% expected band : 1.48245 < r < 1.48245
   95% expected band : 1.48245 < r < 1.48245
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2137993968
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.835884 +/- 0.00344756 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.835884 @ 95%CL (1 toyMC)
median expected limit: r < 0.835884 @ 95%CL (1 toyMC)
   68% expected band : 0.835884 < r < 0.835884
   95% expected band : 0.835884 < r < 0.835884
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 924013100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47759 +/- 0.00443257 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.47759 @ 95%CL (1 toyMC)
median expected limit: r < 2.47759 @ 95%CL (1 toyMC)
   68% expected band : 2.47759 < r < 2.47759
   95% expected band : 2.47759 < r < 2.47759
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1607699640
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.34795 +/- 0.00502329 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.34795 @ 95%CL (1 toyMC)
median expected limit: r < 2.34795 @ 95%CL (1 toyMC)
   68% expected band : 2.34795 < r < 2.34795
   95% expected band : 2.34795 < r < 2.34795
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1458615073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.584096 +/- 0.00238527 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.584096 @ 95%CL (1 toyMC)
median expected limit: r < 0.584096 @ 95%CL (1 toyMC)
   68% expected band : 0.584096 < r < 0.584096
   95% expected band : 0.584096 < r < 0.584096
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1492419208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.905706 +/- 0.00373125 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.905706 @ 95%CL (1 toyMC)
median expected limit: r < 0.905706 @ 95%CL (1 toyMC)
   68% expected band : 0.905706 < r < 0.905706
   95% expected band : 0.905706 < r < 0.905706
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -970957049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.963461 +/- 0.00251187 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.963461 @ 95%CL (1 toyMC)
median expected limit: r < 0.963461 @ 95%CL (1 toyMC)
   68% expected band : 0.963461 < r < 0.963461
   95% expected band : 0.963461 < r < 0.963461
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1888403114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39112 +/- 0.00387883 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.39112 @ 95%CL (1 toyMC)
median expected limit: r < 1.39112 @ 95%CL (1 toyMC)
   68% expected band : 1.39112 < r < 1.39112
   95% expected band : 1.39112 < r < 1.39112
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1653995117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.960027 +/- 0.00322963 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.960027 @ 95%CL (1 toyMC)
median expected limit: r < 0.960027 @ 95%CL (1 toyMC)
   68% expected band : 0.960027 < r < 0.960027
   95% expected band : 0.960027 < r < 0.960027
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -741464211
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.870411 +/- 0.00456644 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.870411 @ 95%CL (1 toyMC)
median expected limit: r < 0.870411 @ 95%CL (1 toyMC)
   68% expected band : 0.870411 < r < 0.870411
   95% expected band : 0.870411 < r < 0.870411
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1191948345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39659 +/- 0.0032224 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.39659 @ 95%CL (1 toyMC)
median expected limit: r < 1.39659 @ 95%CL (1 toyMC)
   68% expected band : 1.39659 < r < 1.39659
   95% expected band : 1.39659 < r < 1.39659
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1144770017
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01148 +/- 0.00290593 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.01148 @ 95%CL (1 toyMC)
median expected limit: r < 1.01148 @ 95%CL (1 toyMC)
   68% expected band : 1.01148 < r < 1.01148
   95% expected band : 1.01148 < r < 1.01148
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 637942753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12844 +/- 0.00480445 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 2.12844 @ 95%CL (1 toyMC)
median expected limit: r < 2.12844 @ 95%CL (1 toyMC)
   68% expected band : 2.12844 < r < 2.12844
   95% expected band : 2.12844 < r < 2.12844
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -700455006
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.05198 +/- 0.00412642 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.05198 @ 95%CL (1 toyMC)
median expected limit: r < 2.05198 @ 95%CL (1 toyMC)
   68% expected band : 2.05198 < r < 2.05198
   95% expected band : 2.05198 < r < 2.05198
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1043216122
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28178 +/- 0.00480865 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.28178 @ 95%CL (1 toyMC)
median expected limit: r < 1.28178 @ 95%CL (1 toyMC)
   68% expected band : 1.28178 < r < 1.28178
   95% expected band : 1.28178 < r < 1.28178
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 755028233
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53478 +/- 0.00431346 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.53478 @ 95%CL (1 toyMC)
median expected limit: r < 1.53478 @ 95%CL (1 toyMC)
   68% expected band : 1.53478 < r < 1.53478
   95% expected band : 1.53478 < r < 1.53478
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1908836817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3556 +/- 0.00304548 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.3556 @ 95%CL (1 toyMC)
median expected limit: r < 1.3556 @ 95%CL (1 toyMC)
   68% expected band : 1.3556 < r < 1.3556
   95% expected band : 1.3556 < r < 1.3556
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1745842149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.87641 +/- 0.00345191 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.87641 @ 95%CL (1 toyMC)
median expected limit: r < 0.87641 @ 95%CL (1 toyMC)
   68% expected band : 0.87641 < r < 0.87641
   95% expected band : 0.87641 < r < 0.87641
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 828832613
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0232 +/- 0.00356642 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.0232 @ 95%CL (1 toyMC)
median expected limit: r < 1.0232 @ 95%CL (1 toyMC)
   68% expected band : 1.0232 < r < 1.0232
   95% expected band : 1.0232 < r < 1.0232
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -135932257
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.565724 +/- 0.00334115 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.565724 @ 95%CL (1 toyMC)
median expected limit: r < 0.565724 @ 95%CL (1 toyMC)
   68% expected band : 0.565724 < r < 0.565724
   95% expected band : 0.565724 < r < 0.565724
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1598076838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.92822 +/- 0.00329905 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.92822 @ 95%CL (1 toyMC)
median expected limit: r < 0.92822 @ 95%CL (1 toyMC)
   68% expected band : 0.92822 < r < 0.92822
   95% expected band : 0.92822 < r < 0.92822
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1997802236
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01883 +/- 0.00348675 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.01883 @ 95%CL (1 toyMC)
median expected limit: r < 1.01883 @ 95%CL (1 toyMC)
   68% expected band : 1.01883 < r < 1.01883
   95% expected band : 1.01883 < r < 1.01883
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1346356720
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.25536 +/- 0.00435939 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.25536 @ 95%CL (1 toyMC)
median expected limit: r < 2.25536 @ 95%CL (1 toyMC)
   68% expected band : 2.25536 < r < 2.25536
   95% expected band : 2.25536 < r < 2.25536
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 626836710
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27882 +/- 0.004764 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.27882 @ 95%CL (1 toyMC)
median expected limit: r < 1.27882 @ 95%CL (1 toyMC)
   68% expected band : 1.27882 < r < 1.27882
   95% expected band : 1.27882 < r < 1.27882
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 510881425
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0743 +/- 0.00402865 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.0743 @ 95%CL (1 toyMC)
median expected limit: r < 1.0743 @ 95%CL (1 toyMC)
   68% expected band : 1.0743 < r < 1.0743
   95% expected band : 1.0743 < r < 1.0743
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -485887720
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.870839 +/- 0.00299499 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.870839 @ 95%CL (1 toyMC)
median expected limit: r < 0.870839 @ 95%CL (1 toyMC)
   68% expected band : 0.870839 < r < 0.870839
   95% expected band : 0.870839 < r < 0.870839
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 855381622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77092 +/- 0.00451909 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.77092 @ 95%CL (1 toyMC)
median expected limit: r < 1.77092 @ 95%CL (1 toyMC)
   68% expected band : 1.77092 < r < 1.77092
   95% expected band : 1.77092 < r < 1.77092
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1169637937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.95377 +/- 0.00436976 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.95377 @ 95%CL (1 toyMC)
median expected limit: r < 1.95377 @ 95%CL (1 toyMC)
   68% expected band : 1.95377 < r < 1.95377
   95% expected band : 1.95377 < r < 1.95377
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1128011288
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52915 +/- 0.00518081 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.52915 @ 95%CL (1 toyMC)
median expected limit: r < 2.52915 @ 95%CL (1 toyMC)
   68% expected band : 2.52915 < r < 2.52915
   95% expected band : 2.52915 < r < 2.52915
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -386989586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14272 +/- 0.00348225 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.14272 @ 95%CL (1 toyMC)
median expected limit: r < 1.14272 @ 95%CL (1 toyMC)
   68% expected band : 1.14272 < r < 1.14272
   95% expected band : 1.14272 < r < 1.14272
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1906653014
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.936123 +/- 0.00364065 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.936123 @ 95%CL (1 toyMC)
median expected limit: r < 0.936123 @ 95%CL (1 toyMC)
   68% expected band : 0.936123 < r < 0.936123
   95% expected band : 0.936123 < r < 0.936123
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 151263406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28821 +/- 0.00388991 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.28821 @ 95%CL (1 toyMC)
median expected limit: r < 1.28821 @ 95%CL (1 toyMC)
   68% expected band : 1.28821 < r < 1.28821
   95% expected band : 1.28821 < r < 1.28821
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1337356806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15853 +/- 0.00311145 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.15853 @ 95%CL (1 toyMC)
median expected limit: r < 1.15853 @ 95%CL (1 toyMC)
   68% expected band : 1.15853 < r < 1.15853
   95% expected band : 1.15853 < r < 1.15853
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1461522042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19819 +/- 0.00388132 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.19819 @ 95%CL (1 toyMC)
median expected limit: r < 1.19819 @ 95%CL (1 toyMC)
   68% expected band : 1.19819 < r < 1.19819
   95% expected band : 1.19819 < r < 1.19819
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -458381687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45833 +/- 0.00395358 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.45833 @ 95%CL (1 toyMC)
median expected limit: r < 1.45833 @ 95%CL (1 toyMC)
   68% expected band : 1.45833 < r < 1.45833
   95% expected band : 1.45833 < r < 1.45833
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1827453867
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03618 +/- 0.00376635 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.03618 @ 95%CL (1 toyMC)
median expected limit: r < 1.03618 @ 95%CL (1 toyMC)
   68% expected band : 1.03618 < r < 1.03618
   95% expected band : 1.03618 < r < 1.03618
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 63393541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72679 +/- 0.00343151 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.72679 @ 95%CL (1 toyMC)
median expected limit: r < 1.72679 @ 95%CL (1 toyMC)
   68% expected band : 1.72679 < r < 1.72679
   95% expected band : 1.72679 < r < 1.72679
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -855187621
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31064 +/- 0.00361773 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.31064 @ 95%CL (1 toyMC)
median expected limit: r < 1.31064 @ 95%CL (1 toyMC)
   68% expected band : 1.31064 < r < 1.31064
   95% expected band : 1.31064 < r < 1.31064
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1545745636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66346 +/- 0.0033023 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.66346 @ 95%CL (1 toyMC)
median expected limit: r < 1.66346 @ 95%CL (1 toyMC)
   68% expected band : 1.66346 < r < 1.66346
   95% expected band : 1.66346 < r < 1.66346
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -279834898
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36701 +/- 0.0041882 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.36701 @ 95%CL (1 toyMC)
median expected limit: r < 1.36701 @ 95%CL (1 toyMC)
   68% expected band : 1.36701 < r < 1.36701
   95% expected band : 1.36701 < r < 1.36701
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -410135876
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36194 +/- 0.00451839 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.36194 @ 95%CL (1 toyMC)
median expected limit: r < 1.36194 @ 95%CL (1 toyMC)
   68% expected band : 1.36194 < r < 1.36194
   95% expected band : 1.36194 < r < 1.36194
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -576864479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.943051 +/- 0.0033368 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 0.943051 @ 95%CL (1 toyMC)
median expected limit: r < 0.943051 @ 95%CL (1 toyMC)
   68% expected band : 0.943051 < r < 0.943051
   95% expected band : 0.943051 < r < 0.943051
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1701044865
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66401 +/- 0.00460772 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.66401 @ 95%CL (1 toyMC)
median expected limit: r < 1.66401 @ 95%CL (1 toyMC)
   68% expected band : 1.66401 < r < 1.66401
   95% expected band : 1.66401 < r < 1.66401
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -89843702
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61296 +/- 0.00471357 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.61296 @ 95%CL (1 toyMC)
median expected limit: r < 1.61296 @ 95%CL (1 toyMC)
   68% expected band : 1.61296 < r < 1.61296
   95% expected band : 1.61296 < r < 1.61296
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1699012037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74438 +/- 0.0043247 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.74438 @ 95%CL (1 toyMC)
median expected limit: r < 1.74438 @ 95%CL (1 toyMC)
   68% expected band : 1.74438 < r < 1.74438
   95% expected band : 1.74438 < r < 1.74438
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -866657765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44942 +/- 0.00415575 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.44942 @ 95%CL (1 toyMC)
median expected limit: r < 1.44942 @ 95%CL (1 toyMC)
   68% expected band : 1.44942 < r < 1.44942
   95% expected band : 1.44942 < r < 1.44942
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 425801748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.869952 +/- 0.00398376 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.869952 @ 95%CL (1 toyMC)
median expected limit: r < 0.869952 @ 95%CL (1 toyMC)
   68% expected band : 0.869952 < r < 0.869952
   95% expected band : 0.869952 < r < 0.869952
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 892001853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24293 +/- 0.00406411 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.24293 @ 95%CL (1 toyMC)
median expected limit: r < 1.24293 @ 95%CL (1 toyMC)
   68% expected band : 1.24293 < r < 1.24293
   95% expected band : 1.24293 < r < 1.24293
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1898683324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.847126 +/- 0.00284441 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.847126 @ 95%CL (1 toyMC)
median expected limit: r < 0.847126 @ 95%CL (1 toyMC)
   68% expected band : 0.847126 < r < 0.847126
   95% expected band : 0.847126 < r < 0.847126
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 758584963
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13821 +/- 0.0035168 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 1.13821 @ 95%CL (1 toyMC)
median expected limit: r < 1.13821 @ 95%CL (1 toyMC)
   68% expected band : 1.13821 < r < 1.13821
   95% expected band : 1.13821 < r < 1.13821
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -635318606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74911 +/- 0.00459957 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.74911 @ 95%CL (1 toyMC)
median expected limit: r < 1.74911 @ 95%CL (1 toyMC)
   68% expected band : 1.74911 < r < 1.74911
   95% expected band : 1.74911 < r < 1.74911
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -475288512
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.881227 +/- 0.0030302 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.27 min (real)
mean   expected limit: r < 0.881227 @ 95%CL (1 toyMC)
median expected limit: r < 0.881227 @ 95%CL (1 toyMC)
   68% expected band : 0.881227 < r < 0.881227
   95% expected band : 0.881227 < r < 0.881227
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1871008470
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.942274 +/- 0.00324188 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 0.942274 @ 95%CL (1 toyMC)
median expected limit: r < 0.942274 @ 95%CL (1 toyMC)
   68% expected band : 0.942274 < r < 0.942274
   95% expected band : 0.942274 < r < 0.942274
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 112411666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33076 +/- 0.00351249 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.33076 @ 95%CL (1 toyMC)
median expected limit: r < 1.33076 @ 95%CL (1 toyMC)
   68% expected band : 1.33076 < r < 1.33076
   95% expected band : 1.33076 < r < 1.33076
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1812082805
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.11924 +/- 0.0045016 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 2.11924 @ 95%CL (1 toyMC)
median expected limit: r < 2.11924 @ 95%CL (1 toyMC)
   68% expected band : 2.11924 < r < 2.11924
   95% expected band : 2.11924 < r < 2.11924
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1451983604
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.702076 +/- 0.00313678 @ 95% CL (100 tries)
Done in 0.27 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.702076 @ 95%CL (1 toyMC)
median expected limit: r < 0.702076 @ 95%CL (1 toyMC)
   68% expected band : 0.702076 < r < 0.702076
   95% expected band : 0.702076 < r < 0.702076
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 566814289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.03813 +/- 0.00491074 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 2.03813 @ 95%CL (1 toyMC)
median expected limit: r < 2.03813 @ 95%CL (1 toyMC)
   68% expected band : 2.03813 < r < 2.03813
   95% expected band : 2.03813 < r < 2.03813
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1821758184
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.954037 +/- 0.00318489 @ 95% CL (100 tries)
Done in 0.28 min (cpu), 0.28 min (real)
mean   expected limit: r < 0.954037 @ 95%CL (1 toyMC)
median expected limit: r < 0.954037 @ 95%CL (1 toyMC)
   68% expected band : 0.954037 < r < 0.954037
   95% expected band : 0.954037 < r < 0.954037
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine32.MarkovChainMC.mH32.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH32.-104204325.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH32.-1111020404.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH32.-1121681323.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH32.-1133637142.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH32.-1169637937.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH32.-1232031411.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH32.-1250394538.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH32.-1258863479.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH32.-1293636026.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH32.-1337356806.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH32.-1340292984.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH32.-1346356720.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH32.-135932257.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH32.-1407137605.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH32.-1451983604.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH32.-1459124126.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH32.-1461522042.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH32.-1492419208.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH32.-1559311545.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH32.-1653995117.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH32.-1684808222.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH32.-1745842149.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH32.-1796327205.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH32.-1812082805.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH32.-1821758184.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH32.-1827453867.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH32.-1871008470.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH32.-1898683324.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH32.-1906653014.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH32.-1908836817.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH32.-1924945494.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH32.-1997802236.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH32.-2052352750.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH32.-219331168.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH32.-279834898.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH32.-361085815.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH32.-386989586.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH32.-387395332.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH32.-388763817.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH32.-390507445.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH32.-393562212.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH32.-410135876.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH32.-413925711.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH32.-458381687.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH32.-475288512.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH32.-485887720.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH32.-490094274.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH32.-56786936.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH32.-576864479.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH32.-635318606.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH32.-67838333.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH32.-700455006.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH32.-741464211.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH32.-750619853.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH32.-855187621.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH32.-866657765.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH32.-89843702.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH32.-970957049.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH32.1043216122.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH32.112411666.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH32.1128011288.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH32.1144770017.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH32.1191948345.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH32.1208543346.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH32.1355591591.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH32.1369437319.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH32.1458615073.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH32.151263406.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH32.1545745636.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH32.1598076838.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH32.1607699640.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH32.1619394270.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH32.1699012037.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH32.1701044865.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH32.1743319987.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH32.1888403114.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH32.1893772976.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH32.1899630608.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH32.193052564.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH32.1992685019.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH32.2074896969.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH32.2137993968.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH32.425801748.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH32.510881425.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH32.521882154.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH32.566814289.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH32.613894799.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH32.626836710.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH32.63393541.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH32.637942753.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH32.661359018.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH32.675773042.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH32.755028233.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH32.758584963.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH32.811283943.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH32.828832613.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH32.855381622.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH32.892001853.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH32.924013100.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH32.93802098.root
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1722336568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.67245 +/- 0.00518952 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 3.67245 @ 95%CL (1 toyMC)
median expected limit: r < 3.67245 @ 95%CL (1 toyMC)
   68% expected band : 3.67245 < r < 3.67245
   95% expected band : 3.67245 < r < 3.67245
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -716763255
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.92462 +/- 0.0061866 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.92462 @ 95%CL (1 toyMC)
median expected limit: r < 2.92462 @ 95%CL (1 toyMC)
   68% expected band : 2.92462 < r < 2.92462
   95% expected band : 2.92462 < r < 2.92462
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1096782377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88999 +/- 0.00527306 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.88999 @ 95%CL (1 toyMC)
median expected limit: r < 2.88999 @ 95%CL (1 toyMC)
   68% expected band : 2.88999 < r < 2.88999
   95% expected band : 2.88999 < r < 2.88999
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -14554383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59439 +/- 0.00526734 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.59439 @ 95%CL (1 toyMC)
median expected limit: r < 2.59439 @ 95%CL (1 toyMC)
   68% expected band : 2.59439 < r < 2.59439
   95% expected band : 2.59439 < r < 2.59439
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 903014811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4276 +/- 0.00460051 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.4276 @ 95%CL (1 toyMC)
median expected limit: r < 1.4276 @ 95%CL (1 toyMC)
   68% expected band : 1.4276 < r < 1.4276
   95% expected band : 1.4276 < r < 1.4276
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2035802689
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71047 +/- 0.00407931 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.71047 @ 95%CL (1 toyMC)
median expected limit: r < 1.71047 @ 95%CL (1 toyMC)
   68% expected band : 1.71047 < r < 1.71047
   95% expected band : 1.71047 < r < 1.71047
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1649836196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5193 +/- 0.00571085 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.5193 @ 95%CL (1 toyMC)
median expected limit: r < 1.5193 @ 95%CL (1 toyMC)
   68% expected band : 1.5193 < r < 1.5193
   95% expected band : 1.5193 < r < 1.5193
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1623955449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52532 +/- 0.00590767 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.52532 @ 95%CL (1 toyMC)
median expected limit: r < 2.52532 @ 95%CL (1 toyMC)
   68% expected band : 2.52532 < r < 2.52532
   95% expected band : 2.52532 < r < 2.52532
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2041518561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.50753 +/- 0.00496183 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 3.50753 @ 95%CL (1 toyMC)
median expected limit: r < 3.50753 @ 95%CL (1 toyMC)
   68% expected band : 3.50753 < r < 3.50753
   95% expected band : 3.50753 < r < 3.50753
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 542107841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.85104 +/- 0.00520625 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 3.85104 @ 95%CL (1 toyMC)
median expected limit: r < 3.85104 @ 95%CL (1 toyMC)
   68% expected band : 3.85104 < r < 3.85104
   95% expected band : 3.85104 < r < 3.85104
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 267768261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.26064 +/- 0.00466854 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.26064 @ 95%CL (1 toyMC)
median expected limit: r < 2.26064 @ 95%CL (1 toyMC)
   68% expected band : 2.26064 < r < 2.26064
   95% expected band : 2.26064 < r < 2.26064
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1880928230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43246 +/- 0.00501496 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.43246 @ 95%CL (1 toyMC)
median expected limit: r < 1.43246 @ 95%CL (1 toyMC)
   68% expected band : 1.43246 < r < 1.43246
   95% expected band : 1.43246 < r < 1.43246
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1161631978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22085 +/- 0.00466796 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.22085 @ 95%CL (1 toyMC)
median expected limit: r < 1.22085 @ 95%CL (1 toyMC)
   68% expected band : 1.22085 < r < 1.22085
   95% expected band : 1.22085 < r < 1.22085
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1968813474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.01902 +/- 0.00340627 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.01902 @ 95%CL (1 toyMC)
median expected limit: r < 2.01902 @ 95%CL (1 toyMC)
   68% expected band : 2.01902 < r < 2.01902
   95% expected band : 2.01902 < r < 2.01902
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1231522092
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.13826 +/- 0.00436899 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 4.13826 @ 95%CL (1 toyMC)
median expected limit: r < 4.13826 @ 95%CL (1 toyMC)
   68% expected band : 4.13826 < r < 4.13826
   95% expected band : 4.13826 < r < 4.13826
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 82731767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.69509 +/- 0.00500602 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.69509 @ 95%CL (1 toyMC)
median expected limit: r < 2.69509 @ 95%CL (1 toyMC)
   68% expected band : 2.69509 < r < 2.69509
   95% expected band : 2.69509 < r < 2.69509
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -911715595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.55931 +/- 0.00554668 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 4.55931 @ 95%CL (1 toyMC)
median expected limit: r < 4.55931 @ 95%CL (1 toyMC)
   68% expected band : 4.55931 < r < 4.55931
   95% expected band : 4.55931 < r < 4.55931
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2030389838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80413 +/- 0.00460078 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.80413 @ 95%CL (1 toyMC)
median expected limit: r < 1.80413 @ 95%CL (1 toyMC)
   68% expected band : 1.80413 < r < 1.80413
   95% expected band : 1.80413 < r < 1.80413
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 32575399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09513 +/- 0.00615389 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 2.09513 @ 95%CL (1 toyMC)
median expected limit: r < 2.09513 @ 95%CL (1 toyMC)
   68% expected band : 2.09513 < r < 2.09513
   95% expected band : 2.09513 < r < 2.09513
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -859379170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99287 +/- 0.00510179 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.99287 @ 95%CL (1 toyMC)
median expected limit: r < 1.99287 @ 95%CL (1 toyMC)
   68% expected band : 1.99287 < r < 1.99287
   95% expected band : 1.99287 < r < 1.99287
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -899447005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.00183 +/- 0.00543253 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 3.00183 @ 95%CL (1 toyMC)
median expected limit: r < 3.00183 @ 95%CL (1 toyMC)
   68% expected band : 3.00183 < r < 3.00183
   95% expected band : 3.00183 < r < 3.00183
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1583069858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.97135 +/- 0.00658449 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 4.97135 @ 95%CL (1 toyMC)
median expected limit: r < 4.97135 @ 95%CL (1 toyMC)
   68% expected band : 4.97135 < r < 4.97135
   95% expected band : 4.97135 < r < 4.97135
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1295425777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81819 +/- 0.00493002 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.81819 @ 95%CL (1 toyMC)
median expected limit: r < 1.81819 @ 95%CL (1 toyMC)
   68% expected band : 1.81819 < r < 1.81819
   95% expected band : 1.81819 < r < 1.81819
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 628246011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80335 +/- 0.00485376 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.80335 @ 95%CL (1 toyMC)
median expected limit: r < 1.80335 @ 95%CL (1 toyMC)
   68% expected band : 1.80335 < r < 1.80335
   95% expected band : 1.80335 < r < 1.80335
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -214362079
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6368 +/- 0.00463298 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.6368 @ 95%CL (1 toyMC)
median expected limit: r < 1.6368 @ 95%CL (1 toyMC)
   68% expected band : 1.6368 < r < 1.6368
   95% expected band : 1.6368 < r < 1.6368
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2095484372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.81662 +/- 0.00518881 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.81662 @ 95%CL (1 toyMC)
median expected limit: r < 2.81662 @ 95%CL (1 toyMC)
   68% expected band : 2.81662 < r < 2.81662
   95% expected band : 2.81662 < r < 2.81662
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1546711702
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99938 +/- 0.00345511 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.99938 @ 95%CL (1 toyMC)
median expected limit: r < 1.99938 @ 95%CL (1 toyMC)
   68% expected band : 1.99938 < r < 1.99938
   95% expected band : 1.99938 < r < 1.99938
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 412807573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.70609 +/- 0.00492028 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.70609 @ 95%CL (1 toyMC)
median expected limit: r < 2.70609 @ 95%CL (1 toyMC)
   68% expected band : 2.70609 < r < 2.70609
   95% expected band : 2.70609 < r < 2.70609
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 371602872
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.33887 +/- 0.00488684 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.33887 @ 95%CL (1 toyMC)
median expected limit: r < 2.33887 @ 95%CL (1 toyMC)
   68% expected band : 2.33887 < r < 2.33887
   95% expected band : 2.33887 < r < 2.33887
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -316968891
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.0294 +/- 0.00436135 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.0294 @ 95%CL (1 toyMC)
median expected limit: r < 2.0294 @ 95%CL (1 toyMC)
   68% expected band : 2.0294 < r < 2.0294
   95% expected band : 2.0294 < r < 2.0294
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 655999572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6194 +/- 0.00478676 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.6194 @ 95%CL (1 toyMC)
median expected limit: r < 1.6194 @ 95%CL (1 toyMC)
   68% expected band : 1.6194 < r < 1.6194
   95% expected band : 1.6194 < r < 1.6194
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -354527614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.15853 +/- 0.00637711 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 4.15853 @ 95%CL (1 toyMC)
median expected limit: r < 4.15853 @ 95%CL (1 toyMC)
   68% expected band : 4.15853 < r < 4.15853
   95% expected band : 4.15853 < r < 4.15853
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 567309966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.51066 +/- 0.00718617 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 3.51066 @ 95%CL (1 toyMC)
median expected limit: r < 3.51066 @ 95%CL (1 toyMC)
   68% expected band : 3.51066 < r < 3.51066
   95% expected band : 3.51066 < r < 3.51066
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1325313766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49984 +/- 0.0050571 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.49984 @ 95%CL (1 toyMC)
median expected limit: r < 2.49984 @ 95%CL (1 toyMC)
   68% expected band : 2.49984 < r < 2.49984
   95% expected band : 2.49984 < r < 2.49984
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -281983645
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32479 +/- 0.00497028 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.32479 @ 95%CL (1 toyMC)
median expected limit: r < 2.32479 @ 95%CL (1 toyMC)
   68% expected band : 2.32479 < r < 2.32479
   95% expected band : 2.32479 < r < 2.32479
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 193073174
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.87799 +/- 0.00507358 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 3.87799 @ 95%CL (1 toyMC)
median expected limit: r < 3.87799 @ 95%CL (1 toyMC)
   68% expected band : 3.87799 < r < 3.87799
   95% expected band : 3.87799 < r < 3.87799
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1291062426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.921 +/- 0.00662533 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.921 @ 95%CL (1 toyMC)
median expected limit: r < 2.921 @ 95%CL (1 toyMC)
   68% expected band : 2.921 < r < 2.921
   95% expected band : 2.921 < r < 2.921
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -408980992
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40974 +/- 0.00540286 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.40974 @ 95%CL (1 toyMC)
median expected limit: r < 2.40974 @ 95%CL (1 toyMC)
   68% expected band : 2.40974 < r < 2.40974
   95% expected band : 2.40974 < r < 2.40974
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1202760933
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.18528 +/- 0.00386289 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.18528 @ 95%CL (1 toyMC)
median expected limit: r < 2.18528 @ 95%CL (1 toyMC)
   68% expected band : 2.18528 < r < 2.18528
   95% expected band : 2.18528 < r < 2.18528
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2035403733
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52094 +/- 0.00547133 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.52094 @ 95%CL (1 toyMC)
median expected limit: r < 2.52094 @ 95%CL (1 toyMC)
   68% expected band : 2.52094 < r < 2.52094
   95% expected band : 2.52094 < r < 2.52094
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -49926721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.45318 +/- 0.00594806 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 3.45318 @ 95%CL (1 toyMC)
median expected limit: r < 3.45318 @ 95%CL (1 toyMC)
   68% expected band : 3.45318 < r < 3.45318
   95% expected band : 3.45318 < r < 3.45318
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 148471066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.89011 +/- 0.00621116 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 4.89011 @ 95%CL (1 toyMC)
median expected limit: r < 4.89011 @ 95%CL (1 toyMC)
   68% expected band : 4.89011 < r < 4.89011
   95% expected band : 4.89011 < r < 4.89011
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1706881506
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25691 +/- 0.0053194 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 3.25691 @ 95%CL (1 toyMC)
median expected limit: r < 3.25691 @ 95%CL (1 toyMC)
   68% expected band : 3.25691 < r < 3.25691
   95% expected band : 3.25691 < r < 3.25691
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 315930328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50767 +/- 0.00524895 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.50767 @ 95%CL (1 toyMC)
median expected limit: r < 2.50767 @ 95%CL (1 toyMC)
   68% expected band : 2.50767 < r < 2.50767
   95% expected band : 2.50767 < r < 2.50767
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 730435175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13961 +/- 0.00697551 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 3.13961 @ 95%CL (1 toyMC)
median expected limit: r < 3.13961 @ 95%CL (1 toyMC)
   68% expected band : 3.13961 < r < 3.13961
   95% expected band : 3.13961 < r < 3.13961
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1916985752
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40652 +/- 0.00664413 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.40652 @ 95%CL (1 toyMC)
median expected limit: r < 2.40652 @ 95%CL (1 toyMC)
   68% expected band : 2.40652 < r < 2.40652
   95% expected band : 2.40652 < r < 2.40652
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -530965783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.95821 +/- 0.00614191 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 3.95821 @ 95%CL (1 toyMC)
median expected limit: r < 3.95821 @ 95%CL (1 toyMC)
   68% expected band : 3.95821 < r < 3.95821
   95% expected band : 3.95821 < r < 3.95821
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 967207999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.11871 +/- 0.00511778 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 3.11871 @ 95%CL (1 toyMC)
median expected limit: r < 3.11871 @ 95%CL (1 toyMC)
   68% expected band : 3.11871 < r < 3.11871
   95% expected band : 3.11871 < r < 3.11871
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1658441756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46313 +/- 0.00452071 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.46313 @ 95%CL (1 toyMC)
median expected limit: r < 1.46313 @ 95%CL (1 toyMC)
   68% expected band : 1.46313 < r < 1.46313
   95% expected band : 1.46313 < r < 1.46313
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2096279755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.07845 +/- 0.00714564 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 4.07845 @ 95%CL (1 toyMC)
median expected limit: r < 4.07845 @ 95%CL (1 toyMC)
   68% expected band : 4.07845 < r < 4.07845
   95% expected band : 4.07845 < r < 4.07845
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -181946284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92465 +/- 0.00539399 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.92465 @ 95%CL (1 toyMC)
median expected limit: r < 1.92465 @ 95%CL (1 toyMC)
   68% expected band : 1.92465 < r < 1.92465
   95% expected band : 1.92465 < r < 1.92465
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2066748405
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.01632 +/- 0.00673169 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 3.01632 @ 95%CL (1 toyMC)
median expected limit: r < 3.01632 @ 95%CL (1 toyMC)
   68% expected band : 3.01632 < r < 3.01632
   95% expected band : 3.01632 < r < 3.01632
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1662909270
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.46407 +/- 0.0058336 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 3.46407 @ 95%CL (1 toyMC)
median expected limit: r < 3.46407 @ 95%CL (1 toyMC)
   68% expected band : 3.46407 < r < 3.46407
   95% expected band : 3.46407 < r < 3.46407
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1913566165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.70456 +/- 0.00543199 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.70456 @ 95%CL (1 toyMC)
median expected limit: r < 2.70456 @ 95%CL (1 toyMC)
   68% expected band : 2.70456 < r < 2.70456
   95% expected band : 2.70456 < r < 2.70456
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -128040591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.98484 +/- 0.0067245 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 3.98484 @ 95%CL (1 toyMC)
median expected limit: r < 3.98484 @ 95%CL (1 toyMC)
   68% expected band : 3.98484 < r < 3.98484
   95% expected band : 3.98484 < r < 3.98484
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 278002800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42155 +/- 0.00508347 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.42155 @ 95%CL (1 toyMC)
median expected limit: r < 2.42155 @ 95%CL (1 toyMC)
   68% expected band : 2.42155 < r < 2.42155
   95% expected band : 2.42155 < r < 2.42155
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2040783131
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.18061 +/- 0.00514801 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 3.18061 @ 95%CL (1 toyMC)
median expected limit: r < 3.18061 @ 95%CL (1 toyMC)
   68% expected band : 3.18061 < r < 3.18061
   95% expected band : 3.18061 < r < 3.18061
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1027226038
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.23572 +/- 0.00665053 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 5.23572 @ 95%CL (1 toyMC)
median expected limit: r < 5.23572 @ 95%CL (1 toyMC)
   68% expected band : 5.23572 < r < 5.23572
   95% expected band : 5.23572 < r < 5.23572
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -461967459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66904 +/- 0.00435328 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.66904 @ 95%CL (1 toyMC)
median expected limit: r < 1.66904 @ 95%CL (1 toyMC)
   68% expected band : 1.66904 < r < 1.66904
   95% expected band : 1.66904 < r < 1.66904
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1841303786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.20981 +/- 0.00571255 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.20981 @ 95%CL (1 toyMC)
median expected limit: r < 2.20981 @ 95%CL (1 toyMC)
   68% expected band : 2.20981 < r < 2.20981
   95% expected band : 2.20981 < r < 2.20981
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 381255104
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13127 +/- 0.00491975 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 3.13127 @ 95%CL (1 toyMC)
median expected limit: r < 3.13127 @ 95%CL (1 toyMC)
   68% expected band : 3.13127 < r < 3.13127
   95% expected band : 3.13127 < r < 3.13127
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -234305498
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.41102 +/- 0.00449218 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.41102 @ 95%CL (1 toyMC)
median expected limit: r < 2.41102 @ 95%CL (1 toyMC)
   68% expected band : 2.41102 < r < 2.41102
   95% expected band : 2.41102 < r < 2.41102
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -292314853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67362 +/- 0.00368636 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.67362 @ 95%CL (1 toyMC)
median expected limit: r < 2.67362 @ 95%CL (1 toyMC)
   68% expected band : 2.67362 < r < 2.67362
   95% expected band : 2.67362 < r < 2.67362
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1979052708
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17812 +/- 0.00473747 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.17812 @ 95%CL (1 toyMC)
median expected limit: r < 2.17812 @ 95%CL (1 toyMC)
   68% expected band : 2.17812 < r < 2.17812
   95% expected band : 2.17812 < r < 2.17812
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1865310119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49498 +/- 0.0046398 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.49498 @ 95%CL (1 toyMC)
median expected limit: r < 1.49498 @ 95%CL (1 toyMC)
   68% expected band : 1.49498 < r < 1.49498
   95% expected band : 1.49498 < r < 1.49498
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 437033697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.14231 +/- 0.00576584 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.34 min (real)
mean   expected limit: r < 3.14231 @ 95%CL (1 toyMC)
median expected limit: r < 3.14231 @ 95%CL (1 toyMC)
   68% expected band : 3.14231 < r < 3.14231
   95% expected band : 3.14231 < r < 3.14231
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1024388829
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.05768 +/- 0.00545357 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 4.05768 @ 95%CL (1 toyMC)
median expected limit: r < 4.05768 @ 95%CL (1 toyMC)
   68% expected band : 4.05768 < r < 4.05768
   95% expected band : 4.05768 < r < 4.05768
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2010088701
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25524 +/- 0.00636885 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 3.25524 @ 95%CL (1 toyMC)
median expected limit: r < 3.25524 @ 95%CL (1 toyMC)
   68% expected band : 3.25524 < r < 3.25524
   95% expected band : 3.25524 < r < 3.25524
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1703860861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.34018 +/- 0.00480945 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.34018 @ 95%CL (1 toyMC)
median expected limit: r < 2.34018 @ 95%CL (1 toyMC)
   68% expected band : 2.34018 < r < 2.34018
   95% expected band : 2.34018 < r < 2.34018
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1244300286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32822 +/- 0.00429985 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.32822 @ 95%CL (1 toyMC)
median expected limit: r < 2.32822 @ 95%CL (1 toyMC)
   68% expected band : 2.32822 < r < 2.32822
   95% expected band : 2.32822 < r < 2.32822
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -950968087
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81673 +/- 0.00488901 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.81673 @ 95%CL (1 toyMC)
median expected limit: r < 1.81673 @ 95%CL (1 toyMC)
   68% expected band : 1.81673 < r < 1.81673
   95% expected band : 1.81673 < r < 1.81673
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 461207859
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53556 +/- 0.00437427 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.53556 @ 95%CL (1 toyMC)
median expected limit: r < 1.53556 @ 95%CL (1 toyMC)
   68% expected band : 1.53556 < r < 1.53556
   95% expected band : 1.53556 < r < 1.53556
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1702325945
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.25468 +/- 0.00616039 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 4.25468 @ 95%CL (1 toyMC)
median expected limit: r < 4.25468 @ 95%CL (1 toyMC)
   68% expected band : 4.25468 < r < 4.25468
   95% expected band : 4.25468 < r < 4.25468
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2062160409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8662 +/- 0.00572387 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.8662 @ 95%CL (1 toyMC)
median expected limit: r < 1.8662 @ 95%CL (1 toyMC)
   68% expected band : 1.8662 < r < 1.8662
   95% expected band : 1.8662 < r < 1.8662
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2011021594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.32034 +/- 0.00571103 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 4.32034 @ 95%CL (1 toyMC)
median expected limit: r < 4.32034 @ 95%CL (1 toyMC)
   68% expected band : 4.32034 < r < 4.32034
   95% expected band : 4.32034 < r < 4.32034
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1015901044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45492 +/- 0.00485042 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.45492 @ 95%CL (1 toyMC)
median expected limit: r < 1.45492 @ 95%CL (1 toyMC)
   68% expected band : 1.45492 < r < 1.45492
   95% expected band : 1.45492 < r < 1.45492
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 134989792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45915 +/- 0.00455545 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.45915 @ 95%CL (1 toyMC)
median expected limit: r < 1.45915 @ 95%CL (1 toyMC)
   68% expected band : 1.45915 < r < 1.45915
   95% expected band : 1.45915 < r < 1.45915
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1263431720
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.98691 +/- 0.00509155 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.98691 @ 95%CL (1 toyMC)
median expected limit: r < 1.98691 @ 95%CL (1 toyMC)
   68% expected band : 1.98691 < r < 1.98691
   95% expected band : 1.98691 < r < 1.98691
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1363835645
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59822 +/- 0.00510052 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.59822 @ 95%CL (1 toyMC)
median expected limit: r < 2.59822 @ 95%CL (1 toyMC)
   68% expected band : 2.59822 < r < 2.59822
   95% expected band : 2.59822 < r < 2.59822
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1197739996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99693 +/- 0.00553492 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.99693 @ 95%CL (1 toyMC)
median expected limit: r < 1.99693 @ 95%CL (1 toyMC)
   68% expected band : 1.99693 < r < 1.99693
   95% expected band : 1.99693 < r < 1.99693
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 492931950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.05613 +/- 0.00447339 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.05613 @ 95%CL (1 toyMC)
median expected limit: r < 2.05613 @ 95%CL (1 toyMC)
   68% expected band : 2.05613 < r < 2.05613
   95% expected band : 2.05613 < r < 2.05613
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1667728751
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.22865 +/- 0.0043576 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 3.22865 @ 95%CL (1 toyMC)
median expected limit: r < 3.22865 @ 95%CL (1 toyMC)
   68% expected band : 3.22865 < r < 3.22865
   95% expected band : 3.22865 < r < 3.22865
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1873960916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53853 +/- 0.00568793 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.53853 @ 95%CL (1 toyMC)
median expected limit: r < 1.53853 @ 95%CL (1 toyMC)
   68% expected band : 1.53853 < r < 1.53853
   95% expected band : 1.53853 < r < 1.53853
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 568531548
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60519 +/- 0.00532255 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.60519 @ 95%CL (1 toyMC)
median expected limit: r < 2.60519 @ 95%CL (1 toyMC)
   68% expected band : 2.60519 < r < 2.60519
   95% expected band : 2.60519 < r < 2.60519
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1958158852
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68167 +/- 0.00515607 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.68167 @ 95%CL (1 toyMC)
median expected limit: r < 1.68167 @ 95%CL (1 toyMC)
   68% expected band : 1.68167 < r < 1.68167
   95% expected band : 1.68167 < r < 1.68167
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 675029329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79809 +/- 0.00559832 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 2.79809 @ 95%CL (1 toyMC)
median expected limit: r < 2.79809 @ 95%CL (1 toyMC)
   68% expected band : 2.79809 < r < 2.79809
   95% expected band : 2.79809 < r < 2.79809
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2114732046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44068 +/- 0.00459517 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.44068 @ 95%CL (1 toyMC)
median expected limit: r < 1.44068 @ 95%CL (1 toyMC)
   68% expected band : 1.44068 < r < 1.44068
   95% expected band : 1.44068 < r < 1.44068
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1519009562
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40449 +/- 0.00419318 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.40449 @ 95%CL (1 toyMC)
median expected limit: r < 1.40449 @ 95%CL (1 toyMC)
   68% expected band : 1.40449 < r < 1.40449
   95% expected band : 1.40449 < r < 1.40449
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -395300507
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.76829 +/- 0.00641663 @ 95% CL (100 tries)
Done in 0.33 min (cpu), 0.33 min (real)
mean   expected limit: r < 3.76829 @ 95%CL (1 toyMC)
median expected limit: r < 3.76829 @ 95%CL (1 toyMC)
   68% expected band : 3.76829 < r < 3.76829
   95% expected band : 3.76829 < r < 3.76829
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -206420015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65356 +/- 0.00586513 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.65356 @ 95%CL (1 toyMC)
median expected limit: r < 1.65356 @ 95%CL (1 toyMC)
   68% expected band : 1.65356 < r < 1.65356
   95% expected band : 1.65356 < r < 1.65356
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2017541816
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88487 +/- 0.00490243 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.88487 @ 95%CL (1 toyMC)
median expected limit: r < 2.88487 @ 95%CL (1 toyMC)
   68% expected band : 2.88487 < r < 2.88487
   95% expected band : 2.88487 < r < 2.88487
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1769480523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.85568 +/- 0.00470143 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.85568 @ 95%CL (1 toyMC)
median expected limit: r < 2.85568 @ 95%CL (1 toyMC)
   68% expected band : 2.85568 < r < 2.85568
   95% expected band : 2.85568 < r < 2.85568
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 259508872
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79875 +/- 0.00457496 @ 95% CL (100 tries)
Done in 0.32 min (cpu), 0.32 min (real)
mean   expected limit: r < 2.79875 @ 95%CL (1 toyMC)
median expected limit: r < 2.79875 @ 95%CL (1 toyMC)
   68% expected band : 2.79875 < r < 2.79875
   95% expected band : 2.79875 < r < 2.79875
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2020979823
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.95105 +/- 0.00436019 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.95105 @ 95%CL (1 toyMC)
median expected limit: r < 1.95105 @ 95%CL (1 toyMC)
   68% expected band : 1.95105 < r < 1.95105
   95% expected band : 1.95105 < r < 1.95105
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1146631271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.51784 +/- 0.00494085 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.51784 @ 95%CL (1 toyMC)
median expected limit: r < 2.51784 @ 95%CL (1 toyMC)
   68% expected band : 2.51784 < r < 2.51784
   95% expected band : 2.51784 < r < 2.51784
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1654451282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8079 +/- 0.00419468 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 1.8079 @ 95%CL (1 toyMC)
median expected limit: r < 1.8079 @ 95%CL (1 toyMC)
   68% expected band : 1.8079 < r < 1.8079
   95% expected band : 1.8079 < r < 1.8079
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1178538331
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92408 +/- 0.00440975 @ 95% CL (100 tries)
Done in 0.30 min (cpu), 0.30 min (real)
mean   expected limit: r < 1.92408 @ 95%CL (1 toyMC)
median expected limit: r < 1.92408 @ 95%CL (1 toyMC)
   68% expected band : 1.92408 < r < 1.92408
   95% expected band : 1.92408 < r < 1.92408
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1884908946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60541 +/- 0.0049143 @ 95% CL (100 tries)
Done in 0.31 min (cpu), 0.31 min (real)
mean   expected limit: r < 2.60541 @ 95%CL (1 toyMC)
median expected limit: r < 2.60541 @ 95%CL (1 toyMC)
   68% expected band : 2.60541 < r < 2.60541
   95% expected band : 2.60541 < r < 2.60541
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1670718834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68619 +/- 0.0038238 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.68619 @ 95%CL (1 toyMC)
median expected limit: r < 1.68619 @ 95%CL (1 toyMC)
   68% expected band : 1.68619 < r < 1.68619
   95% expected band : 1.68619 < r < 1.68619
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -989007495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72868 +/- 0.00378743 @ 95% CL (100 tries)
Done in 0.29 min (cpu), 0.29 min (real)
mean   expected limit: r < 1.72868 @ 95%CL (1 toyMC)
median expected limit: r < 1.72868 @ 95%CL (1 toyMC)
   68% expected band : 1.72868 < r < 1.72868
   95% expected band : 1.72868 < r < 1.72868
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine40.MarkovChainMC.mH40.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH40.-1015901044.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH40.-1024388829.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH40.-1096782377.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH40.-1161631978.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH40.-1178538331.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH40.-1197739996.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH40.-1231522092.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH40.-1263431720.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH40.-128040591.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH40.-1291062426.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH40.-1325313766.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH40.-1363835645.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH40.-14554383.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH40.-1546711702.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH40.-1623955449.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH40.-1662909270.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH40.-1670718834.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH40.-1702325945.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH40.-1706881506.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH40.-1769480523.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH40.-181946284.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH40.-1884908946.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH40.-1913566165.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH40.-1958158852.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH40.-1979052708.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH40.-2010088701.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH40.-2011021594.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH40.-2017541816.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH40.-2020979823.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH40.-2035403733.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH40.-2041518561.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH40.-2062160409.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH40.-206420015.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH40.-2096279755.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH40.-214362079.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH40.-234305498.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH40.-281983645.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH40.-292314853.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH40.-316968891.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH40.-354527614.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH40.-395300507.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH40.-408980992.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH40.-461967459.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH40.-49926721.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH40.-530965783.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH40.-716763255.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH40.-859379170.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH40.-899447005.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH40.-911715595.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH40.-950968087.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH40.-989007495.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH40.1027226038.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH40.1146631271.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH40.1202760933.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH40.1244300286.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH40.1295425777.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH40.134989792.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH40.148471066.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH40.1519009562.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH40.1583069858.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH40.1649836196.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH40.1654451282.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH40.1658441756.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH40.1667728751.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH40.1703860861.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH40.1722336568.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH40.1841303786.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH40.1865310119.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH40.1873960916.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH40.1880928230.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH40.1916985752.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH40.193073174.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH40.1968813474.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH40.2030389838.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH40.2035802689.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH40.2040783131.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH40.2066748405.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH40.2095484372.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH40.2114732046.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH40.259508872.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH40.267768261.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH40.278002800.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH40.315930328.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH40.32575399.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH40.371602872.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH40.381255104.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH40.412807573.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH40.437033697.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH40.461207859.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH40.492931950.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH40.542107841.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH40.567309966.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH40.568531548.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH40.628246011.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH40.655999572.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH40.675029329.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH40.730435175.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH40.82731767.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH40.903014811.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH40.967207999.root
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/toys
