 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1268126059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.178189 +/- 0.00244373 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.178189 @ 95%CL (1 toyMC)
median expected limit: r < 0.178189 @ 95%CL (1 toyMC)
   68% expected band : 0.178189 < r < 0.178189
   95% expected band : 0.178189 < r < 0.178189
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1728094074
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0539 +/- 9.94609 @ 95% CL (2 tries)
Done in 15.02 min (cpu), 15.10 min (real)
mean   expected limit: r < 10.0539 @ 95%CL (1 toyMC)
median expected limit: r < 10.0539 @ 95%CL (1 toyMC)
   68% expected band : 10.0539 < r < 10.0539
   95% expected band : 10.0539 < r < 10.0539
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -714843812
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.144716 +/- 0.00358398 @ 95% CL (62 tries)
Done in 5.17 min (cpu), 5.20 min (real)
mean   expected limit: r < 0.144716 @ 95%CL (1 toyMC)
median expected limit: r < 0.144716 @ 95%CL (1 toyMC)
   68% expected band : 0.144716 < r < 0.144716
   95% expected band : 0.144716 < r < 0.144716
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1536577626
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.149547 +/- 0.00694599 @ 95% CL (52 tries)
Done in 6.88 min (cpu), 6.92 min (real)
mean   expected limit: r < 0.149547 @ 95%CL (1 toyMC)
median expected limit: r < 0.149547 @ 95%CL (1 toyMC)
   68% expected band : 0.149547 < r < 0.149547
   95% expected band : 0.149547 < r < 0.149547
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1311144375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.17297 +/- 0.00193167 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.17297 @ 95%CL (1 toyMC)
median expected limit: r < 0.17297 @ 95%CL (1 toyMC)
   68% expected band : 0.17297 < r < 0.17297
   95% expected band : 0.17297 < r < 0.17297
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1047822050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.177968 +/- 0.00221842 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.177968 @ 95%CL (1 toyMC)
median expected limit: r < 0.177968 @ 95%CL (1 toyMC)
   68% expected band : 0.177968 < r < 0.177968
   95% expected band : 0.177968 < r < 0.177968
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1685125584
Generate toy 1/1
Done in 13.94 min (cpu), 14.03 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2008617582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.0443 +/- 9.95572 @ 95% CL (2 tries)
Done in 14.92 min (cpu), 15.01 min (real)
mean   expected limit: r < 10.0443 @ 95%CL (1 toyMC)
median expected limit: r < 10.0443 @ 95%CL (1 toyMC)
   68% expected band : 10.0443 < r < 10.0443
   95% expected band : 10.0443 < r < 10.0443
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -20017891
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.22222e+29 +/- 1.46986e+29 @ 95% CL (9 tries)
Done in 14.12 min (cpu), 14.22 min (real)
mean   expected limit: r < 2.22222e+29 @ 95%CL (1 toyMC)
median expected limit: r < 2.22222e+29 @ 95%CL (1 toyMC)
   68% expected band : 2.22222e+29 < r < 2.22222e+29
   95% expected band : 2.22222e+29 < r < 2.22222e+29
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 865251380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.156325 +/- 0.00267113 @ 95% CL (98 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 0.156325 @ 95%CL (1 toyMC)
median expected limit: r < 0.156325 @ 95%CL (1 toyMC)
   68% expected band : 0.156325 < r < 0.156325
   95% expected band : 0.156325 < r < 0.156325
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -398698403
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236215 +/- 0.00158263 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.236215 @ 95%CL (1 toyMC)
median expected limit: r < 0.236215 @ 95%CL (1 toyMC)
   68% expected band : 0.236215 < r < 0.236215
   95% expected band : 0.236215 < r < 0.236215
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 636132463
Generate toy 1/1
Done in 15.59 min (cpu), 15.69 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -997087952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.169949 +/- 0.00245557 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.169949 @ 95%CL (1 toyMC)
median expected limit: r < 0.169949 @ 95%CL (1 toyMC)
   68% expected band : 0.169949 < r < 0.169949
   95% expected band : 0.169949 < r < 0.169949
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2055967824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.165187 +/- 0.00239639 @ 95% CL (96 tries)
Done in 0.52 min (cpu), 0.52 min (real)
mean   expected limit: r < 0.165187 @ 95%CL (1 toyMC)
median expected limit: r < 0.165187 @ 95%CL (1 toyMC)
   68% expected band : 0.165187 < r < 0.165187
   95% expected band : 0.165187 < r < 0.165187
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1414754182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208985 +/- 0.00253376 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.208985 @ 95%CL (1 toyMC)
median expected limit: r < 0.208985 @ 95%CL (1 toyMC)
   68% expected band : 0.208985 < r < 0.208985
   95% expected band : 0.208985 < r < 0.208985
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1259470294
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66667e+29 +/- 1.66667e+29 @ 95% CL (6 tries)
Done in 14.32 min (cpu), 14.41 min (real)
mean   expected limit: r < 1.66667e+29 @ 95%CL (1 toyMC)
median expected limit: r < 1.66667e+29 @ 95%CL (1 toyMC)
   68% expected band : 1.66667e+29 < r < 1.66667e+29
   95% expected band : 1.66667e+29 < r < 1.66667e+29
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2014778925
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.179578 +/- 0.00179852 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.179578 @ 95%CL (1 toyMC)
median expected limit: r < 0.179578 @ 95%CL (1 toyMC)
   68% expected band : 0.179578 < r < 0.179578
   95% expected band : 0.179578 < r < 0.179578
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 188266637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312168 +/- 0.00192513 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.312168 @ 95%CL (1 toyMC)
median expected limit: r < 0.312168 @ 95%CL (1 toyMC)
   68% expected band : 0.312168 < r < 0.312168
   95% expected band : 0.312168 < r < 0.312168
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1303427546
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.121335 +/- 0.00873402 @ 95% CL (29 tries)
Done in 10.72 min (cpu), 10.80 min (real)
mean   expected limit: r < 0.121335 @ 95%CL (1 toyMC)
median expected limit: r < 0.121335 @ 95%CL (1 toyMC)
   68% expected band : 0.121335 < r < 0.121335
   95% expected band : 0.121335 < r < 0.121335
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1342992569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.10393 +/- 1.54467 @ 95% CL (34 tries)
Done in 10.40 min (cpu), 10.48 min (real)
mean   expected limit: r < 5.10393 @ 95%CL (1 toyMC)
median expected limit: r < 5.10393 @ 95%CL (1 toyMC)
   68% expected band : 5.10393 < r < 5.10393
   95% expected band : 5.10393 < r < 5.10393
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -731449859
Generate toy 1/1
Done in 15.61 min (cpu), 15.71 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1866014300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.146627 +/- 0.00636995 @ 95% CL (67 tries)
Done in 4.13 min (cpu), 4.16 min (real)
mean   expected limit: r < 0.146627 @ 95%CL (1 toyMC)
median expected limit: r < 0.146627 @ 95%CL (1 toyMC)
   68% expected band : 0.146627 < r < 0.146627
   95% expected band : 0.146627 < r < 0.146627
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1442497573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.1556 +/- 3.49606 @ 95% CL (9 tries)
Done in 14.72 min (cpu), 14.82 min (real)
mean   expected limit: r < 11.1556 @ 95%CL (1 toyMC)
median expected limit: r < 11.1556 @ 95%CL (1 toyMC)
   68% expected band : 11.1556 < r < 11.1556
   95% expected band : 11.1556 < r < 11.1556
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -740678835
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.0629747 @ 95% CL
Done in 15.48 min (cpu), 15.57 min (real)
mean   expected limit: r < 0.0629747 @ 95%CL (1 toyMC)
median expected limit: r < 0.0629747 @ 95%CL (1 toyMC)
   68% expected band : 0.0629747 < r < 0.0629747
   95% expected band : 0.0629747 < r < 0.0629747
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 430000904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.156147 +/- 0.00280222 @ 95% CL (98 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.156147 @ 95%CL (1 toyMC)
median expected limit: r < 0.156147 @ 95%CL (1 toyMC)
   68% expected band : 0.156147 < r < 0.156147
   95% expected band : 0.156147 < r < 0.156147
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1353476729
Generate toy 1/1
Done in 15.40 min (cpu), 15.48 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -637767503
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.164144 +/- 0.00273856 @ 95% CL (96 tries)
Done in 0.53 min (cpu), 0.54 min (real)
mean   expected limit: r < 0.164144 @ 95%CL (1 toyMC)
median expected limit: r < 0.164144 @ 95%CL (1 toyMC)
   68% expected band : 0.164144 < r < 0.164144
   95% expected band : 0.164144 < r < 0.164144
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1405306842
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.3664 +/- 6.6336 @ 95% CL (3 tries)
Done in 14.67 min (cpu), 14.74 min (real)
mean   expected limit: r < 13.3664 @ 95%CL (1 toyMC)
median expected limit: r < 13.3664 @ 95%CL (1 toyMC)
   68% expected band : 13.3664 < r < 13.3664
   95% expected band : 13.3664 < r < 13.3664
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 872987302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.181666 +/- 0.00248449 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.181666 @ 95%CL (1 toyMC)
median expected limit: r < 0.181666 @ 95%CL (1 toyMC)
   68% expected band : 0.181666 < r < 0.181666
   95% expected band : 0.181666 < r < 0.181666
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -650904382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.75155 +/- 3.31214 @ 95% CL (9 tries)
Done in 13.67 min (cpu), 13.73 min (real)
mean   expected limit: r < 6.75155 @ 95%CL (1 toyMC)
median expected limit: r < 6.75155 @ 95%CL (1 toyMC)
   68% expected band : 6.75155 < r < 6.75155
   95% expected band : 6.75155 < r < 6.75155
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1529459743
Generate toy 1/1
Done in 15.28 min (cpu), 15.34 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 319826624
Generate toy 1/1
Done in 15.30 min (cpu), 15.35 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1800969322
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200798 +/- 0.00213745 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.200798 @ 95%CL (1 toyMC)
median expected limit: r < 0.200798 @ 95%CL (1 toyMC)
   68% expected band : 0.200798 < r < 0.200798
   95% expected band : 0.200798 < r < 0.200798
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 223134265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 20 @ 95% CL
Done in 15.27 min (cpu), 15.32 min (real)
mean   expected limit: r < 20 @ 95%CL (1 toyMC)
median expected limit: r < 20 @ 95%CL (1 toyMC)
   68% expected band : 20 < r < 20
   95% expected band : 20 < r < 20
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 290238539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20152 +/- 0.00203834 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.20152 @ 95%CL (1 toyMC)
median expected limit: r < 0.20152 @ 95%CL (1 toyMC)
   68% expected band : 0.20152 < r < 0.20152
   95% expected band : 0.20152 < r < 0.20152
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1761213600
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.135203 +/- 0.00533679 @ 95% CL (53 tries)
Done in 6.94 min (cpu), 6.97 min (real)
mean   expected limit: r < 0.135203 @ 95%CL (1 toyMC)
median expected limit: r < 0.135203 @ 95%CL (1 toyMC)
   68% expected band : 0.135203 < r < 0.135203
   95% expected band : 0.135203 < r < 0.135203
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -797647169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 20 @ 95% CL
Done in 15.15 min (cpu), 15.21 min (real)
mean   expected limit: r < 20 @ 95%CL (1 toyMC)
median expected limit: r < 20 @ 95%CL (1 toyMC)
   68% expected band : 20 < r < 20
   95% expected band : 20 < r < 20
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1585903433
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.175995 +/- 0.00321503 @ 95% CL (99 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.175995 @ 95%CL (1 toyMC)
median expected limit: r < 0.175995 @ 95%CL (1 toyMC)
   68% expected band : 0.175995 < r < 0.175995
   95% expected band : 0.175995 < r < 0.175995
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 156533759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.164002 +/- 0.00388936 @ 95% CL (99 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.164002 @ 95%CL (1 toyMC)
median expected limit: r < 0.164002 @ 95%CL (1 toyMC)
   68% expected band : 0.164002 < r < 0.164002
   95% expected band : 0.164002 < r < 0.164002
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1337903135
Generate toy 1/1
Done in 15.26 min (cpu), 15.31 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 994938829
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.35927 +/- 3.02174 @ 95% CL (12 tries)
Done in 13.43 min (cpu), 13.48 min (real)
mean   expected limit: r < 7.35927 @ 95%CL (1 toyMC)
median expected limit: r < 7.35927 @ 95%CL (1 toyMC)
   68% expected band : 7.35927 < r < 7.35927
   95% expected band : 7.35927 < r < 7.35927
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -440059358
Generate toy 1/1
Done in 15.16 min (cpu), 15.21 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1297535538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.183281 +/- 0.00195504 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.183281 @ 95%CL (1 toyMC)
median expected limit: r < 0.183281 @ 95%CL (1 toyMC)
   68% expected band : 0.183281 < r < 0.183281
   95% expected band : 0.183281 < r < 0.183281
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1484160368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.205828 +/- 0.00280164 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.205828 @ 95%CL (1 toyMC)
median expected limit: r < 0.205828 @ 95%CL (1 toyMC)
   68% expected band : 0.205828 < r < 0.205828
   95% expected band : 0.205828 < r < 0.205828
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1591356196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.142566 +/- 0.00436475 @ 95% CL (64 tries)
Done in 4.85 min (cpu), 4.86 min (real)
mean   expected limit: r < 0.142566 @ 95%CL (1 toyMC)
median expected limit: r < 0.142566 @ 95%CL (1 toyMC)
   68% expected band : 0.142566 < r < 0.142566
   95% expected band : 0.142566 < r < 0.142566
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 670242142
Generate toy 1/1
Done in 15.27 min (cpu), 15.33 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1767237183
Generate toy 1/1
Done in 15.26 min (cpu), 15.32 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -19662355
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.147959 +/- 0.00293936 @ 95% CL (96 tries)
Done in 0.55 min (cpu), 0.55 min (real)
mean   expected limit: r < 0.147959 @ 95%CL (1 toyMC)
median expected limit: r < 0.147959 @ 95%CL (1 toyMC)
   68% expected band : 0.147959 < r < 0.147959
   95% expected band : 0.147959 < r < 0.147959
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 92187843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228187 +/- 0.00194822 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.228187 @ 95%CL (1 toyMC)
median expected limit: r < 0.228187 @ 95%CL (1 toyMC)
   68% expected band : 0.228187 < r < 0.228187
   95% expected band : 0.228187 < r < 0.228187
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -257960860
Generate toy 1/1
Done in 15.28 min (cpu), 15.34 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 558263714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237335 +/- 0.00189919 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.237335 @ 95%CL (1 toyMC)
median expected limit: r < 0.237335 @ 95%CL (1 toyMC)
   68% expected band : 0.237335 < r < 0.237335
   95% expected band : 0.237335 < r < 0.237335
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -243226831
Generate toy 1/1
Done in 15.32 min (cpu), 15.38 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 459269295
Generate toy 1/1
Done in 15.28 min (cpu), 15.33 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 385731571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 20 @ 95% CL
Done in 15.09 min (cpu), 15.14 min (real)
mean   expected limit: r < 20 @ 95%CL (1 toyMC)
median expected limit: r < 20 @ 95%CL (1 toyMC)
   68% expected band : 20 < r < 20
   95% expected band : 20 < r < 20
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -696990640
Generate toy 1/1
Done in 15.25 min (cpu), 15.29 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -679208190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.10248 +/- 4.96586 @ 95% CL (4 tries)
Done in 14.51 min (cpu), 14.56 min (real)
mean   expected limit: r < 5.10248 @ 95%CL (1 toyMC)
median expected limit: r < 5.10248 @ 95%CL (1 toyMC)
   68% expected band : 5.10248 < r < 5.10248
   95% expected band : 5.10248 < r < 5.10248
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1246240623
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11111e+29 +/- 1.11111e+29 @ 95% CL (9 tries)
Done in 13.52 min (cpu), 13.57 min (real)
mean   expected limit: r < 1.11111e+29 @ 95%CL (1 toyMC)
median expected limit: r < 1.11111e+29 @ 95%CL (1 toyMC)
   68% expected band : 1.11111e+29 < r < 1.11111e+29
   95% expected band : 1.11111e+29 < r < 1.11111e+29
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1437448903
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.137754 +/- 0.005696 @ 95% CL (57 tries)
Done in 5.86 min (cpu), 5.88 min (real)
mean   expected limit: r < 0.137754 @ 95%CL (1 toyMC)
median expected limit: r < 0.137754 @ 95%CL (1 toyMC)
   68% expected band : 0.137754 < r < 0.137754
   95% expected band : 0.137754 < r < 0.137754
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2020975915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.141281 +/- 0.00620081 @ 95% CL (48 tries)
Done in 6.76 min (cpu), 6.78 min (real)
mean   expected limit: r < 0.141281 @ 95%CL (1 toyMC)
median expected limit: r < 0.141281 @ 95%CL (1 toyMC)
   68% expected band : 0.141281 < r < 0.141281
   95% expected band : 0.141281 < r < 0.141281
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1090496902
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212367 +/- 0.00313753 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.212367 @ 95%CL (1 toyMC)
median expected limit: r < 0.212367 @ 95%CL (1 toyMC)
   68% expected band : 0.212367 < r < 0.212367
   95% expected band : 0.212367 < r < 0.212367
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -590373098
Generate toy 1/1
Done in 15.13 min (cpu), 15.16 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 781517799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.192021 +/- 0.00304626 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.192021 @ 95%CL (1 toyMC)
median expected limit: r < 0.192021 @ 95%CL (1 toyMC)
   68% expected band : 0.192021 < r < 0.192021
   95% expected band : 0.192021 < r < 0.192021
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 792974117
Generate toy 1/1
Done in 15.23 min (cpu), 15.27 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -745190509
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200705 +/- 0.0021137 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.200705 @ 95%CL (1 toyMC)
median expected limit: r < 0.200705 @ 95%CL (1 toyMC)
   68% expected band : 0.200705 < r < 0.200705
   95% expected band : 0.200705 < r < 0.200705
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1462935551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.70666 +/- 1.81948 @ 95% CL (27 tries)
Done in 11.26 min (cpu), 11.28 min (real)
mean   expected limit: r < 5.70666 @ 95%CL (1 toyMC)
median expected limit: r < 5.70666 @ 95%CL (1 toyMC)
   68% expected band : 5.70666 < r < 5.70666
   95% expected band : 5.70666 < r < 5.70666
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -930690568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.144668 +/- 0.0069226 @ 95% CL (56 tries)
Done in 5.93 min (cpu), 5.94 min (real)
mean   expected limit: r < 0.144668 @ 95%CL (1 toyMC)
median expected limit: r < 0.144668 @ 95%CL (1 toyMC)
   68% expected band : 0.144668 < r < 0.144668
   95% expected band : 0.144668 < r < 0.144668
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1348591562
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.150481 +/- 0.00260979 @ 95% CL (97 tries)
Done in 0.54 min (cpu), 0.54 min (real)
mean   expected limit: r < 0.150481 @ 95%CL (1 toyMC)
median expected limit: r < 0.150481 @ 95%CL (1 toyMC)
   68% expected band : 0.150481 < r < 0.150481
   95% expected band : 0.150481 < r < 0.150481
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1047680795
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.145063 +/- 0.00442608 @ 95% CL (66 tries)
Done in 4.75 min (cpu), 4.76 min (real)
mean   expected limit: r < 0.145063 @ 95%CL (1 toyMC)
median expected limit: r < 0.145063 @ 95%CL (1 toyMC)
   68% expected band : 0.145063 < r < 0.145063
   95% expected band : 0.145063 < r < 0.145063
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 751011004
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 10.07 +/- 9.93001 @ 95% CL (2 tries)
Done in 12.32 min (cpu), 12.36 min (real)
mean   expected limit: r < 10.07 @ 95%CL (1 toyMC)
median expected limit: r < 10.07 @ 95%CL (1 toyMC)
   68% expected band : 10.07 < r < 10.07
   95% expected band : 10.07 < r < 10.07
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2107626078
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.173182 +/- 0.00234631 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.173182 @ 95%CL (1 toyMC)
median expected limit: r < 0.173182 @ 95%CL (1 toyMC)
   68% expected band : 0.173182 < r < 0.173182
   95% expected band : 0.173182 < r < 0.173182
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -285238925
Generate toy 1/1
Done in 15.24 min (cpu), 15.27 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 394700089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.222087 +/- 0.00215683 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.222087 @ 95%CL (1 toyMC)
median expected limit: r < 0.222087 @ 95%CL (1 toyMC)
   68% expected band : 0.222087 < r < 0.222087
   95% expected band : 0.222087 < r < 0.222087
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1298412351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 8.07697 +/- 2.2334 @ 95% CL (22 tries)
Done in 12.53 min (cpu), 12.56 min (real)
mean   expected limit: r < 8.07697 @ 95%CL (1 toyMC)
median expected limit: r < 8.07697 @ 95%CL (1 toyMC)
   68% expected band : 8.07697 < r < 8.07697
   95% expected band : 8.07697 < r < 8.07697
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1856407963
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.146791 +/- 0.00308598 @ 95% CL (85 tries)
Done in 1.23 min (cpu), 1.23 min (real)
mean   expected limit: r < 0.146791 @ 95%CL (1 toyMC)
median expected limit: r < 0.146791 @ 95%CL (1 toyMC)
   68% expected band : 0.146791 < r < 0.146791
   95% expected band : 0.146791 < r < 0.146791
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1987405062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1e+30 @ 95% CL
Done in 15.09 min (cpu), 15.13 min (real)
mean   expected limit: r < 1e+30 @ 95%CL (1 toyMC)
median expected limit: r < 1e+30 @ 95%CL (1 toyMC)
   68% expected band : 1e+30 < r < 1e+30
   95% expected band : 1e+30 < r < 1e+30
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 653118762
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.127197 +/- 0.00531357 @ 95% CL (18 tries)
Done in 12.09 min (cpu), 12.12 min (real)
mean   expected limit: r < 0.127197 @ 95%CL (1 toyMC)
median expected limit: r < 0.127197 @ 95%CL (1 toyMC)
   68% expected band : 0.127197 < r < 0.127197
   95% expected band : 0.127197 < r < 0.127197
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -742477586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.155707 +/- 0.00375396 @ 95% CL (94 tries)
Done in 0.63 min (cpu), 0.63 min (real)
mean   expected limit: r < 0.155707 @ 95%CL (1 toyMC)
median expected limit: r < 0.155707 @ 95%CL (1 toyMC)
   68% expected band : 0.155707 < r < 0.155707
   95% expected band : 0.155707 < r < 0.155707
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1892115614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.77403 +/- 3.30652 @ 95% CL (9 tries)
Done in 14.09 min (cpu), 14.14 min (real)
mean   expected limit: r < 6.77403 @ 95%CL (1 toyMC)
median expected limit: r < 6.77403 @ 95%CL (1 toyMC)
   68% expected band : 6.77403 < r < 6.77403
   95% expected band : 6.77403 < r < 6.77403
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1250214405
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.167026 +/- 0.00285085 @ 95% CL (99 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.167026 @ 95%CL (1 toyMC)
median expected limit: r < 0.167026 @ 95%CL (1 toyMC)
   68% expected band : 0.167026 < r < 0.167026
   95% expected band : 0.167026 < r < 0.167026
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -422267782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.19847 +/- 0.0028232 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.19847 @ 95%CL (1 toyMC)
median expected limit: r < 0.19847 @ 95%CL (1 toyMC)
   68% expected band : 0.19847 < r < 0.19847
   95% expected band : 0.19847 < r < 0.19847
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1901763114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204709 +/- 0.0025612 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.204709 @ 95%CL (1 toyMC)
median expected limit: r < 0.204709 @ 95%CL (1 toyMC)
   68% expected band : 0.204709 < r < 0.204709
   95% expected band : 0.204709 < r < 0.204709
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 348316358
Generate toy 1/1
Done in 15.15 min (cpu), 15.21 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1643900572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.176296 +/- 0.00229366 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.176296 @ 95%CL (1 toyMC)
median expected limit: r < 0.176296 @ 95%CL (1 toyMC)
   68% expected band : 0.176296 < r < 0.176296
   95% expected band : 0.176296 < r < 0.176296
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -929146886
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.119461 +/- 0.00752669 @ 95% CL (38 tries)
Done in 8.40 min (cpu), 8.43 min (real)
mean   expected limit: r < 0.119461 @ 95%CL (1 toyMC)
median expected limit: r < 0.119461 @ 95%CL (1 toyMC)
   68% expected band : 0.119461 < r < 0.119461
   95% expected band : 0.119461 < r < 0.119461
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1945730751
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236486 +/- 0.00170851 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.236486 @ 95%CL (1 toyMC)
median expected limit: r < 0.236486 @ 95%CL (1 toyMC)
   68% expected band : 0.236486 < r < 0.236486
   95% expected band : 0.236486 < r < 0.236486
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -546876261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33333e+29 +/- 2.10819e+29 @ 95% CL (6 tries)
Done in 14.19 min (cpu), 14.24 min (real)
mean   expected limit: r < 3.33333e+29 @ 95%CL (1 toyMC)
median expected limit: r < 3.33333e+29 @ 95%CL (1 toyMC)
   68% expected band : 3.33333e+29 < r < 3.33333e+29
   95% expected band : 3.33333e+29 < r < 3.33333e+29
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 457643323
Generate toy 1/1
Done in 15.13 min (cpu), 15.18 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 885744055
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 13.388 +/- 4.18179 @ 95% CL (6 tries)
Done in 14.21 min (cpu), 14.26 min (real)
mean   expected limit: r < 13.388 @ 95%CL (1 toyMC)
median expected limit: r < 13.388 @ 95%CL (1 toyMC)
   68% expected band : 13.388 < r < 13.388
   95% expected band : 13.388 < r < 13.388
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1271852885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.81456 +/- 2.10587 @ 95% CL (18 tries)
Done in 12.10 min (cpu), 12.14 min (real)
mean   expected limit: r < 4.81456 @ 95%CL (1 toyMC)
median expected limit: r < 4.81456 @ 95%CL (1 toyMC)
   68% expected band : 4.81456 < r < 4.81456
   95% expected band : 4.81456 < r < 4.81456
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -439028944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.212306 +/- 0.00187121 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.212306 @ 95%CL (1 toyMC)
median expected limit: r < 0.212306 @ 95%CL (1 toyMC)
   68% expected band : 0.212306 < r < 0.212306
   95% expected band : 0.212306 < r < 0.212306
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1104126658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190882 +/- 0.00250554 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.190882 @ 95%CL (1 toyMC)
median expected limit: r < 0.190882 @ 95%CL (1 toyMC)
   68% expected band : 0.190882 < r < 0.190882
   95% expected band : 0.190882 < r < 0.190882
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -587107399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.155393 +/- 0.00281474 @ 95% CL (97 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.155393 @ 95%CL (1 toyMC)
median expected limit: r < 0.155393 @ 95%CL (1 toyMC)
   68% expected band : 0.155393 < r < 0.155393
   95% expected band : 0.155393 < r < 0.155393
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 49097274
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.169108 +/- 0.00240659 @ 95% CL (99 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.169108 @ 95%CL (1 toyMC)
median expected limit: r < 0.169108 @ 95%CL (1 toyMC)
   68% expected band : 0.169108 < r < 0.169108
   95% expected band : 0.169108 < r < 0.169108
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1896481544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.168732 +/- 0.00290758 @ 95% CL (99 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.168732 @ 95%CL (1 toyMC)
median expected limit: r < 0.168732 @ 95%CL (1 toyMC)
   68% expected band : 0.168732 < r < 0.168732
   95% expected band : 0.168732 < r < 0.168732
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1348563804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.14769 +/- 0.00661243 @ 95% CL (59 tries)
Done in 5.08 min (cpu), 5.09 min (real)
mean   expected limit: r < 0.14769 @ 95%CL (1 toyMC)
median expected limit: r < 0.14769 @ 95%CL (1 toyMC)
   68% expected band : 0.14769 < r < 0.14769
   95% expected band : 0.14769 < r < 0.14769
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1093694752
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.157536 +/- 0.00451996 @ 95% CL (84 tries)
Done in 2.07 min (cpu), 2.07 min (real)
mean   expected limit: r < 0.157536 @ 95%CL (1 toyMC)
median expected limit: r < 0.157536 @ 95%CL (1 toyMC)
   68% expected band : 0.157536 < r < 0.157536
   95% expected band : 0.157536 < r < 0.157536
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -545130915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.155281 +/- 0.00324658 @ 95% CL (87 tries)
Done in 1.09 min (cpu), 1.09 min (real)
mean   expected limit: r < 0.155281 @ 95%CL (1 toyMC)
median expected limit: r < 0.155281 @ 95%CL (1 toyMC)
   68% expected band : 0.155281 < r < 0.155281
   95% expected band : 0.155281 < r < 0.155281
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -135407484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.153069 +/- 0.0034781 @ 95% CL (91 tries)
Done in 0.65 min (cpu), 0.65 min (real)
mean   expected limit: r < 0.153069 @ 95%CL (1 toyMC)
median expected limit: r < 0.153069 @ 95%CL (1 toyMC)
   68% expected band : 0.153069 < r < 0.153069
   95% expected band : 0.153069 < r < 0.153069
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1065170297
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208955 +/- 0.00249589 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.208955 @ 95%CL (1 toyMC)
median expected limit: r < 0.208955 @ 95%CL (1 toyMC)
   68% expected band : 0.208955 < r < 0.208955
   95% expected band : 0.208955 < r < 0.208955
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1661055334
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.12924 +/- 0.00565899 @ 95% CL (54 tries)
Done in 5.98 min (cpu), 5.99 min (real)
mean   expected limit: r < 0.12924 @ 95%CL (1 toyMC)
median expected limit: r < 0.12924 @ 95%CL (1 toyMC)
   68% expected band : 0.12924 < r < 0.12924
   95% expected band : 0.12924 < r < 0.12924
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine16.MarkovChainMC.mH16.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH16.-1047680795.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH16.-1047822050.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH16.-1090496902.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH16.-1093694752.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH16.-1104126658.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH16.-1297535538.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH16.-1298412351.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH16.-1337903135.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH16.-1342992569.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH16.-1348563804.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH16.-1348591562.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH16.-1353476729.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH16.-135407484.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH16.-1405306842.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH16.-1442497573.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH16.-1462935551.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH16.-1536577626.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH16.-1585903433.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH16.-1643900572.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH16.-1661055334.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH16.-1767237183.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH16.-1896481544.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH16.-1945730751.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH16.-19662355.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH16.-1987405062.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH16.-20017891.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH16.-2008617582.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH16.-2014778925.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH16.-243226831.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH16.-257960860.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH16.-285238925.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH16.-398698403.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH16.-422267782.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH16.-439028944.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH16.-440059358.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH16.-545130915.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH16.-546876261.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH16.-587107399.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH16.-590373098.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH16.-637767503.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH16.-650904382.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH16.-679208190.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH16.-696990640.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH16.-714843812.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH16.-731449859.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH16.-740678835.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH16.-742477586.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH16.-745190509.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH16.-797647169.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH16.-929146886.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH16.-930690568.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH16.-997087952.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH16.1065170297.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH16.1246240623.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH16.1250214405.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH16.1259470294.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH16.1268126059.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH16.1271852885.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH16.1303427546.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH16.1311144375.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH16.1414754182.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH16.1437448903.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH16.1484160368.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH16.1529459743.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH16.156533759.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH16.1591356196.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH16.1685125584.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH16.1728094074.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH16.1761213600.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH16.1800969322.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH16.1856407963.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH16.1866014300.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH16.188266637.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH16.1892115614.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH16.1901763114.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH16.2020975915.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH16.2055967824.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH16.2107626078.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH16.223134265.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH16.290238539.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH16.319826624.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH16.348316358.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH16.385731571.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH16.394700089.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH16.430000904.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH16.457643323.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH16.459269295.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH16.49097274.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH16.558263714.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH16.636132463.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH16.653118762.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH16.670242142.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH16.751011004.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH16.781517799.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH16.792974117.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH16.865251380.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH16.872987302.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH16.885744055.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH16.92187843.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH16.994938829.root
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1333297936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.228441 +/- 0.00259604 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.228441 @ 95%CL (1 toyMC)
median expected limit: r < 0.228441 @ 95%CL (1 toyMC)
   68% expected band : 0.228441 < r < 0.228441
   95% expected band : 0.228441 < r < 0.228441
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1606368954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.853528 +/- 0.00237934 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.853528 @ 95%CL (1 toyMC)
median expected limit: r < 0.853528 @ 95%CL (1 toyMC)
   68% expected band : 0.853528 < r < 0.853528
   95% expected band : 0.853528 < r < 0.853528
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1936710302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.342547 +/- 0.00228585 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.342547 @ 95%CL (1 toyMC)
median expected limit: r < 0.342547 @ 95%CL (1 toyMC)
   68% expected band : 0.342547 < r < 0.342547
   95% expected band : 0.342547 < r < 0.342547
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1404761165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282978 +/- 0.00248431 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.282978 @ 95%CL (1 toyMC)
median expected limit: r < 0.282978 @ 95%CL (1 toyMC)
   68% expected band : 0.282978 < r < 0.282978
   95% expected band : 0.282978 < r < 0.282978
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -544540576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361319 +/- 0.0026906 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.361319 @ 95%CL (1 toyMC)
median expected limit: r < 0.361319 @ 95%CL (1 toyMC)
   68% expected band : 0.361319 < r < 0.361319
   95% expected band : 0.361319 < r < 0.361319
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 318549499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.497222 +/- 0.00260892 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.497222 @ 95%CL (1 toyMC)
median expected limit: r < 0.497222 @ 95%CL (1 toyMC)
   68% expected band : 0.497222 < r < 0.497222
   95% expected band : 0.497222 < r < 0.497222
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -663158633
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.233788 +/- 0.00258051 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.233788 @ 95%CL (1 toyMC)
median expected limit: r < 0.233788 @ 95%CL (1 toyMC)
   68% expected band : 0.233788 < r < 0.233788
   95% expected band : 0.233788 < r < 0.233788
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1994634567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.35871 +/- 0.0024421 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.35871 @ 95%CL (1 toyMC)
median expected limit: r < 0.35871 @ 95%CL (1 toyMC)
   68% expected band : 0.35871 < r < 0.35871
   95% expected band : 0.35871 < r < 0.35871
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2099548838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251325 +/- 0.00235009 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.251325 @ 95%CL (1 toyMC)
median expected limit: r < 0.251325 @ 95%CL (1 toyMC)
   68% expected band : 0.251325 < r < 0.251325
   95% expected band : 0.251325 < r < 0.251325
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -168227140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270203 +/- 0.00265395 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.270203 @ 95%CL (1 toyMC)
median expected limit: r < 0.270203 @ 95%CL (1 toyMC)
   68% expected band : 0.270203 < r < 0.270203
   95% expected band : 0.270203 < r < 0.270203
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2057078270
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36242 +/- 0.00242846 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.36242 @ 95%CL (1 toyMC)
median expected limit: r < 0.36242 @ 95%CL (1 toyMC)
   68% expected band : 0.36242 < r < 0.36242
   95% expected band : 0.36242 < r < 0.36242
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1880873745
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.282288 +/- 0.00283409 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.282288 @ 95%CL (1 toyMC)
median expected limit: r < 0.282288 @ 95%CL (1 toyMC)
   68% expected band : 0.282288 < r < 0.282288
   95% expected band : 0.282288 < r < 0.282288
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1568872147
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.181713 +/- 0.00291352 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.181713 @ 95%CL (1 toyMC)
median expected limit: r < 0.181713 @ 95%CL (1 toyMC)
   68% expected band : 0.181713 < r < 0.181713
   95% expected band : 0.181713 < r < 0.181713
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 679733581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.651561 +/- 0.00211814 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.651561 @ 95%CL (1 toyMC)
median expected limit: r < 0.651561 @ 95%CL (1 toyMC)
   68% expected band : 0.651561 < r < 0.651561
   95% expected band : 0.651561 < r < 0.651561
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1651617462
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.454825 +/- 0.00276539 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.454825 @ 95%CL (1 toyMC)
median expected limit: r < 0.454825 @ 95%CL (1 toyMC)
   68% expected band : 0.454825 < r < 0.454825
   95% expected band : 0.454825 < r < 0.454825
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -429753244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.368261 +/- 0.00258982 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.368261 @ 95%CL (1 toyMC)
median expected limit: r < 0.368261 @ 95%CL (1 toyMC)
   68% expected band : 0.368261 < r < 0.368261
   95% expected band : 0.368261 < r < 0.368261
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1363642926
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.606636 +/- 0.00217348 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.606636 @ 95%CL (1 toyMC)
median expected limit: r < 0.606636 @ 95%CL (1 toyMC)
   68% expected band : 0.606636 < r < 0.606636
   95% expected band : 0.606636 < r < 0.606636
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -561206140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.350264 +/- 0.0022251 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.350264 @ 95%CL (1 toyMC)
median expected limit: r < 0.350264 @ 95%CL (1 toyMC)
   68% expected band : 0.350264 < r < 0.350264
   95% expected band : 0.350264 < r < 0.350264
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1314104921
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.42633 +/- 0.00247047 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.42633 @ 95%CL (1 toyMC)
median expected limit: r < 0.42633 @ 95%CL (1 toyMC)
   68% expected band : 0.42633 < r < 0.42633
   95% expected band : 0.42633 < r < 0.42633
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 108852264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.859525 +/- 0.00242226 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.859525 @ 95%CL (1 toyMC)
median expected limit: r < 0.859525 @ 95%CL (1 toyMC)
   68% expected band : 0.859525 < r < 0.859525
   95% expected band : 0.859525 < r < 0.859525
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -717160703
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210574 +/- 0.00296387 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.210574 @ 95%CL (1 toyMC)
median expected limit: r < 0.210574 @ 95%CL (1 toyMC)
   68% expected band : 0.210574 < r < 0.210574
   95% expected band : 0.210574 < r < 0.210574
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1242172432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.410403 +/- 0.00257392 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.410403 @ 95%CL (1 toyMC)
median expected limit: r < 0.410403 @ 95%CL (1 toyMC)
   68% expected band : 0.410403 < r < 0.410403
   95% expected band : 0.410403 < r < 0.410403
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1750935653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.335549 +/- 0.00266803 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.335549 @ 95%CL (1 toyMC)
median expected limit: r < 0.335549 @ 95%CL (1 toyMC)
   68% expected band : 0.335549 < r < 0.335549
   95% expected band : 0.335549 < r < 0.335549
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1218851116
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.486148 +/- 0.0023244 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.486148 @ 95%CL (1 toyMC)
median expected limit: r < 0.486148 @ 95%CL (1 toyMC)
   68% expected band : 0.486148 < r < 0.486148
   95% expected band : 0.486148 < r < 0.486148
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 238147756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.269159 +/- 0.0028088 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.269159 @ 95%CL (1 toyMC)
median expected limit: r < 0.269159 @ 95%CL (1 toyMC)
   68% expected band : 0.269159 < r < 0.269159
   95% expected band : 0.269159 < r < 0.269159
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1848628768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.67057 +/- 0.00283317 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.67057 @ 95%CL (1 toyMC)
median expected limit: r < 0.67057 @ 95%CL (1 toyMC)
   68% expected band : 0.67057 < r < 0.67057
   95% expected band : 0.67057 < r < 0.67057
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 833591020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.411868 +/- 0.00296183 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.411868 @ 95%CL (1 toyMC)
median expected limit: r < 0.411868 @ 95%CL (1 toyMC)
   68% expected band : 0.411868 < r < 0.411868
   95% expected band : 0.411868 < r < 0.411868
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1878171813
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.390629 +/- 0.00305008 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.390629 @ 95%CL (1 toyMC)
median expected limit: r < 0.390629 @ 95%CL (1 toyMC)
   68% expected band : 0.390629 < r < 0.390629
   95% expected band : 0.390629 < r < 0.390629
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 537069151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.360833 +/- 0.00266664 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.360833 @ 95%CL (1 toyMC)
median expected limit: r < 0.360833 @ 95%CL (1 toyMC)
   68% expected band : 0.360833 < r < 0.360833
   95% expected band : 0.360833 < r < 0.360833
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 3167544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.30021 +/- 0.00274378 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.30021 @ 95%CL (1 toyMC)
median expected limit: r < 0.30021 @ 95%CL (1 toyMC)
   68% expected band : 0.30021 < r < 0.30021
   95% expected band : 0.30021 < r < 0.30021
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1768455948
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.42217 +/- 0.0026309 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.42217 @ 95%CL (1 toyMC)
median expected limit: r < 0.42217 @ 95%CL (1 toyMC)
   68% expected band : 0.42217 < r < 0.42217
   95% expected band : 0.42217 < r < 0.42217
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 361597315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29633 +/- 0.00254708 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.29633 @ 95%CL (1 toyMC)
median expected limit: r < 0.29633 @ 95%CL (1 toyMC)
   68% expected band : 0.29633 < r < 0.29633
   95% expected band : 0.29633 < r < 0.29633
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 511846280
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.609556 +/- 0.00305215 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.609556 @ 95%CL (1 toyMC)
median expected limit: r < 0.609556 @ 95%CL (1 toyMC)
   68% expected band : 0.609556 < r < 0.609556
   95% expected band : 0.609556 < r < 0.609556
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -204482521
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.340869 +/- 0.00204181 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.340869 @ 95%CL (1 toyMC)
median expected limit: r < 0.340869 @ 95%CL (1 toyMC)
   68% expected band : 0.340869 < r < 0.340869
   95% expected band : 0.340869 < r < 0.340869
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1881810923
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.517989 +/- 0.00232772 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.517989 @ 95%CL (1 toyMC)
median expected limit: r < 0.517989 @ 95%CL (1 toyMC)
   68% expected band : 0.517989 < r < 0.517989
   95% expected band : 0.517989 < r < 0.517989
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2142744520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.582243 +/- 0.00339138 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.582243 @ 95%CL (1 toyMC)
median expected limit: r < 0.582243 @ 95%CL (1 toyMC)
   68% expected band : 0.582243 < r < 0.582243
   95% expected band : 0.582243 < r < 0.582243
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 361647847
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.219167 +/- 0.00244873 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.219167 @ 95%CL (1 toyMC)
median expected limit: r < 0.219167 @ 95%CL (1 toyMC)
   68% expected band : 0.219167 < r < 0.219167
   95% expected band : 0.219167 < r < 0.219167
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 651198839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288299 +/- 0.00211196 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.288299 @ 95%CL (1 toyMC)
median expected limit: r < 0.288299 @ 95%CL (1 toyMC)
   68% expected band : 0.288299 < r < 0.288299
   95% expected band : 0.288299 < r < 0.288299
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -440277045
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.323009 +/- 0.00275681 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.323009 @ 95%CL (1 toyMC)
median expected limit: r < 0.323009 @ 95%CL (1 toyMC)
   68% expected band : 0.323009 < r < 0.323009
   95% expected band : 0.323009 < r < 0.323009
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -482132200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.353897 +/- 0.00250833 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.353897 @ 95%CL (1 toyMC)
median expected limit: r < 0.353897 @ 95%CL (1 toyMC)
   68% expected band : 0.353897 < r < 0.353897
   95% expected band : 0.353897 < r < 0.353897
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1075801177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.331671 +/- 0.00270506 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.331671 @ 95%CL (1 toyMC)
median expected limit: r < 0.331671 @ 95%CL (1 toyMC)
   68% expected band : 0.331671 < r < 0.331671
   95% expected band : 0.331671 < r < 0.331671
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -994582826
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.511537 +/- 0.00200084 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.511537 @ 95%CL (1 toyMC)
median expected limit: r < 0.511537 @ 95%CL (1 toyMC)
   68% expected band : 0.511537 < r < 0.511537
   95% expected band : 0.511537 < r < 0.511537
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -682507077
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.661994 +/- 0.00190665 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.661994 @ 95%CL (1 toyMC)
median expected limit: r < 0.661994 @ 95%CL (1 toyMC)
   68% expected band : 0.661994 < r < 0.661994
   95% expected band : 0.661994 < r < 0.661994
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1985615859
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.431806 +/- 0.00262782 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.431806 @ 95%CL (1 toyMC)
median expected limit: r < 0.431806 @ 95%CL (1 toyMC)
   68% expected band : 0.431806 < r < 0.431806
   95% expected band : 0.431806 < r < 0.431806
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 621407437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.371789 +/- 0.00260683 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.371789 @ 95%CL (1 toyMC)
median expected limit: r < 0.371789 @ 95%CL (1 toyMC)
   68% expected band : 0.371789 < r < 0.371789
   95% expected band : 0.371789 < r < 0.371789
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 616040848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.41842 +/- 0.00245127 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.41842 @ 95%CL (1 toyMC)
median expected limit: r < 0.41842 @ 95%CL (1 toyMC)
   68% expected band : 0.41842 < r < 0.41842
   95% expected band : 0.41842 < r < 0.41842
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1766110806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.508425 +/- 0.00318969 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.508425 @ 95%CL (1 toyMC)
median expected limit: r < 0.508425 @ 95%CL (1 toyMC)
   68% expected band : 0.508425 < r < 0.508425
   95% expected band : 0.508425 < r < 0.508425
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1727946349
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.651783 +/- 0.00295081 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.651783 @ 95%CL (1 toyMC)
median expected limit: r < 0.651783 @ 95%CL (1 toyMC)
   68% expected band : 0.651783 < r < 0.651783
   95% expected band : 0.651783 < r < 0.651783
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2047538661
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.397842 +/- 0.00341942 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.397842 @ 95%CL (1 toyMC)
median expected limit: r < 0.397842 @ 95%CL (1 toyMC)
   68% expected band : 0.397842 < r < 0.397842
   95% expected band : 0.397842 < r < 0.397842
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 226438026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.453231 +/- 0.0024562 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.453231 @ 95%CL (1 toyMC)
median expected limit: r < 0.453231 @ 95%CL (1 toyMC)
   68% expected band : 0.453231 < r < 0.453231
   95% expected band : 0.453231 < r < 0.453231
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -222260623
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.360563 +/- 0.00224063 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.360563 @ 95%CL (1 toyMC)
median expected limit: r < 0.360563 @ 95%CL (1 toyMC)
   68% expected band : 0.360563 < r < 0.360563
   95% expected band : 0.360563 < r < 0.360563
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1034640458
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.431525 +/- 0.00279668 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.431525 @ 95%CL (1 toyMC)
median expected limit: r < 0.431525 @ 95%CL (1 toyMC)
   68% expected band : 0.431525 < r < 0.431525
   95% expected band : 0.431525 < r < 0.431525
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1056928647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.552394 +/- 0.00199777 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.552394 @ 95%CL (1 toyMC)
median expected limit: r < 0.552394 @ 95%CL (1 toyMC)
   68% expected band : 0.552394 < r < 0.552394
   95% expected band : 0.552394 < r < 0.552394
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -915793185
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.215838 +/- 0.003103 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.215838 @ 95%CL (1 toyMC)
median expected limit: r < 0.215838 @ 95%CL (1 toyMC)
   68% expected band : 0.215838 < r < 0.215838
   95% expected band : 0.215838 < r < 0.215838
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 252871289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288385 +/- 0.00230192 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.288385 @ 95%CL (1 toyMC)
median expected limit: r < 0.288385 @ 95%CL (1 toyMC)
   68% expected band : 0.288385 < r < 0.288385
   95% expected band : 0.288385 < r < 0.288385
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1715075797
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.809044 +/- 0.00253841 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.809044 @ 95%CL (1 toyMC)
median expected limit: r < 0.809044 @ 95%CL (1 toyMC)
   68% expected band : 0.809044 < r < 0.809044
   95% expected band : 0.809044 < r < 0.809044
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -308824261
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217513 +/- 0.00269234 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.217513 @ 95%CL (1 toyMC)
median expected limit: r < 0.217513 @ 95%CL (1 toyMC)
   68% expected band : 0.217513 < r < 0.217513
   95% expected band : 0.217513 < r < 0.217513
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 223638884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.488651 +/- 0.00222532 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.488651 @ 95%CL (1 toyMC)
median expected limit: r < 0.488651 @ 95%CL (1 toyMC)
   68% expected band : 0.488651 < r < 0.488651
   95% expected band : 0.488651 < r < 0.488651
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1655654770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.593402 +/- 0.00262165 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.593402 @ 95%CL (1 toyMC)
median expected limit: r < 0.593402 @ 95%CL (1 toyMC)
   68% expected band : 0.593402 < r < 0.593402
   95% expected band : 0.593402 < r < 0.593402
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1346838318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.218425 +/- 0.00270917 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.218425 @ 95%CL (1 toyMC)
median expected limit: r < 0.218425 @ 95%CL (1 toyMC)
   68% expected band : 0.218425 < r < 0.218425
   95% expected band : 0.218425 < r < 0.218425
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1977871857
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.554939 +/- 0.00244424 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.554939 @ 95%CL (1 toyMC)
median expected limit: r < 0.554939 @ 95%CL (1 toyMC)
   68% expected band : 0.554939 < r < 0.554939
   95% expected band : 0.554939 < r < 0.554939
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 339703954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.353555 +/- 0.00252596 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.353555 @ 95%CL (1 toyMC)
median expected limit: r < 0.353555 @ 95%CL (1 toyMC)
   68% expected band : 0.353555 < r < 0.353555
   95% expected band : 0.353555 < r < 0.353555
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1958163137
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.475277 +/- 0.00224316 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.475277 @ 95%CL (1 toyMC)
median expected limit: r < 0.475277 @ 95%CL (1 toyMC)
   68% expected band : 0.475277 < r < 0.475277
   95% expected band : 0.475277 < r < 0.475277
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1885219529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.413269 +/- 0.00266256 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.413269 @ 95%CL (1 toyMC)
median expected limit: r < 0.413269 @ 95%CL (1 toyMC)
   68% expected band : 0.413269 < r < 0.413269
   95% expected band : 0.413269 < r < 0.413269
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 316849581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.421003 +/- 0.00258208 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.421003 @ 95%CL (1 toyMC)
median expected limit: r < 0.421003 @ 95%CL (1 toyMC)
   68% expected band : 0.421003 < r < 0.421003
   95% expected band : 0.421003 < r < 0.421003
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -765464362
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.512971 +/- 0.0023666 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.512971 @ 95%CL (1 toyMC)
median expected limit: r < 0.512971 @ 95%CL (1 toyMC)
   68% expected band : 0.512971 < r < 0.512971
   95% expected band : 0.512971 < r < 0.512971
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -677450467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.316134 +/- 0.00266458 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.316134 @ 95%CL (1 toyMC)
median expected limit: r < 0.316134 @ 95%CL (1 toyMC)
   68% expected band : 0.316134 < r < 0.316134
   95% expected band : 0.316134 < r < 0.316134
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 279376499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.673223 +/- 0.00250741 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.673223 @ 95%CL (1 toyMC)
median expected limit: r < 0.673223 @ 95%CL (1 toyMC)
   68% expected band : 0.673223 < r < 0.673223
   95% expected band : 0.673223 < r < 0.673223
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2096055231
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.412334 +/- 0.00279558 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.412334 @ 95%CL (1 toyMC)
median expected limit: r < 0.412334 @ 95%CL (1 toyMC)
   68% expected band : 0.412334 < r < 0.412334
   95% expected band : 0.412334 < r < 0.412334
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1673614395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.64804 +/- 0.00229265 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.64804 @ 95%CL (1 toyMC)
median expected limit: r < 0.64804 @ 95%CL (1 toyMC)
   68% expected band : 0.64804 < r < 0.64804
   95% expected band : 0.64804 < r < 0.64804
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1680281320
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.222879 +/- 0.00238941 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.222879 @ 95%CL (1 toyMC)
median expected limit: r < 0.222879 @ 95%CL (1 toyMC)
   68% expected band : 0.222879 < r < 0.222879
   95% expected band : 0.222879 < r < 0.222879
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1524538138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313533 +/- 0.00265532 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.313533 @ 95%CL (1 toyMC)
median expected limit: r < 0.313533 @ 95%CL (1 toyMC)
   68% expected band : 0.313533 < r < 0.313533
   95% expected band : 0.313533 < r < 0.313533
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1217370321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.565836 +/- 0.00291411 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.565836 @ 95%CL (1 toyMC)
median expected limit: r < 0.565836 @ 95%CL (1 toyMC)
   68% expected band : 0.565836 < r < 0.565836
   95% expected band : 0.565836 < r < 0.565836
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1154313825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.503121 +/- 0.00208925 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.503121 @ 95%CL (1 toyMC)
median expected limit: r < 0.503121 @ 95%CL (1 toyMC)
   68% expected band : 0.503121 < r < 0.503121
   95% expected band : 0.503121 < r < 0.503121
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -104067635
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.265203 +/- 0.00291064 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.265203 @ 95%CL (1 toyMC)
median expected limit: r < 0.265203 @ 95%CL (1 toyMC)
   68% expected band : 0.265203 < r < 0.265203
   95% expected band : 0.265203 < r < 0.265203
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1706868934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.256105 +/- 0.00299239 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.256105 @ 95%CL (1 toyMC)
median expected limit: r < 0.256105 @ 95%CL (1 toyMC)
   68% expected band : 0.256105 < r < 0.256105
   95% expected band : 0.256105 < r < 0.256105
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 710426025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268421 +/- 0.00223726 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.268421 @ 95%CL (1 toyMC)
median expected limit: r < 0.268421 @ 95%CL (1 toyMC)
   68% expected band : 0.268421 < r < 0.268421
   95% expected band : 0.268421 < r < 0.268421
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1225538256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.346029 +/- 0.00292664 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.346029 @ 95%CL (1 toyMC)
median expected limit: r < 0.346029 @ 95%CL (1 toyMC)
   68% expected band : 0.346029 < r < 0.346029
   95% expected band : 0.346029 < r < 0.346029
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1573450442
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.524886 +/- 0.00285622 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.524886 @ 95%CL (1 toyMC)
median expected limit: r < 0.524886 @ 95%CL (1 toyMC)
   68% expected band : 0.524886 < r < 0.524886
   95% expected band : 0.524886 < r < 0.524886
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1455883753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.23933 +/- 0.00288678 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.23933 @ 95%CL (1 toyMC)
median expected limit: r < 0.23933 @ 95%CL (1 toyMC)
   68% expected band : 0.23933 < r < 0.23933
   95% expected band : 0.23933 < r < 0.23933
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 971224832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.320993 +/- 0.00262035 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.320993 @ 95%CL (1 toyMC)
median expected limit: r < 0.320993 @ 95%CL (1 toyMC)
   68% expected band : 0.320993 < r < 0.320993
   95% expected band : 0.320993 < r < 0.320993
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 609973772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.268566 +/- 0.00255062 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.268566 @ 95%CL (1 toyMC)
median expected limit: r < 0.268566 @ 95%CL (1 toyMC)
   68% expected band : 0.268566 < r < 0.268566
   95% expected band : 0.268566 < r < 0.268566
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2029810880
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.33739 +/- 0.00284487 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.33739 @ 95%CL (1 toyMC)
median expected limit: r < 0.33739 @ 95%CL (1 toyMC)
   68% expected band : 0.33739 < r < 0.33739
   95% expected band : 0.33739 < r < 0.33739
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1609561343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.407224 +/- 0.00247276 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.407224 @ 95%CL (1 toyMC)
median expected limit: r < 0.407224 @ 95%CL (1 toyMC)
   68% expected band : 0.407224 < r < 0.407224
   95% expected band : 0.407224 < r < 0.407224
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1563800156
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.242462 +/- 0.00257514 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.242462 @ 95%CL (1 toyMC)
median expected limit: r < 0.242462 @ 95%CL (1 toyMC)
   68% expected band : 0.242462 < r < 0.242462
   95% expected band : 0.242462 < r < 0.242462
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1583908639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.296812 +/- 0.00207158 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.296812 @ 95%CL (1 toyMC)
median expected limit: r < 0.296812 @ 95%CL (1 toyMC)
   68% expected band : 0.296812 < r < 0.296812
   95% expected band : 0.296812 < r < 0.296812
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2123423650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.503438 +/- 0.00214006 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.503438 @ 95%CL (1 toyMC)
median expected limit: r < 0.503438 @ 95%CL (1 toyMC)
   68% expected band : 0.503438 < r < 0.503438
   95% expected band : 0.503438 < r < 0.503438
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 918394785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.547794 +/- 0.00207729 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.547794 @ 95%CL (1 toyMC)
median expected limit: r < 0.547794 @ 95%CL (1 toyMC)
   68% expected band : 0.547794 < r < 0.547794
   95% expected band : 0.547794 < r < 0.547794
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1911734981
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.322227 +/- 0.00224367 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.322227 @ 95%CL (1 toyMC)
median expected limit: r < 0.322227 @ 95%CL (1 toyMC)
   68% expected band : 0.322227 < r < 0.322227
   95% expected band : 0.322227 < r < 0.322227
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 430223810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.391771 +/- 0.00212881 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.391771 @ 95%CL (1 toyMC)
median expected limit: r < 0.391771 @ 95%CL (1 toyMC)
   68% expected band : 0.391771 < r < 0.391771
   95% expected band : 0.391771 < r < 0.391771
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -725287010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.260818 +/- 0.00246749 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.260818 @ 95%CL (1 toyMC)
median expected limit: r < 0.260818 @ 95%CL (1 toyMC)
   68% expected band : 0.260818 < r < 0.260818
   95% expected band : 0.260818 < r < 0.260818
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -994662079
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.762415 +/- 0.00221363 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.762415 @ 95%CL (1 toyMC)
median expected limit: r < 0.762415 @ 95%CL (1 toyMC)
   68% expected band : 0.762415 < r < 0.762415
   95% expected band : 0.762415 < r < 0.762415
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2030420756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.691722 +/- 0.0032751 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.691722 @ 95%CL (1 toyMC)
median expected limit: r < 0.691722 @ 95%CL (1 toyMC)
   68% expected band : 0.691722 < r < 0.691722
   95% expected band : 0.691722 < r < 0.691722
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1540843296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.28933 +/- 0.00307807 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.28933 @ 95%CL (1 toyMC)
median expected limit: r < 0.28933 @ 95%CL (1 toyMC)
   68% expected band : 0.28933 < r < 0.28933
   95% expected band : 0.28933 < r < 0.28933
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1494686490
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.410369 +/- 0.00279158 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.410369 @ 95%CL (1 toyMC)
median expected limit: r < 0.410369 @ 95%CL (1 toyMC)
   68% expected band : 0.410369 < r < 0.410369
   95% expected band : 0.410369 < r < 0.410369
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1045849272
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.316987 +/- 0.00295213 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.316987 @ 95%CL (1 toyMC)
median expected limit: r < 0.316987 @ 95%CL (1 toyMC)
   68% expected band : 0.316987 < r < 0.316987
   95% expected band : 0.316987 < r < 0.316987
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1282759744
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.352904 +/- 0.00259171 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.352904 @ 95%CL (1 toyMC)
median expected limit: r < 0.352904 @ 95%CL (1 toyMC)
   68% expected band : 0.352904 < r < 0.352904
   95% expected band : 0.352904 < r < 0.352904
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 881033435
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.441546 +/- 0.0027622 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.441546 @ 95%CL (1 toyMC)
median expected limit: r < 0.441546 @ 95%CL (1 toyMC)
   68% expected band : 0.441546 < r < 0.441546
   95% expected band : 0.441546 < r < 0.441546
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2027073142
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281114 +/- 0.00307037 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.281114 @ 95%CL (1 toyMC)
median expected limit: r < 0.281114 @ 95%CL (1 toyMC)
   68% expected band : 0.281114 < r < 0.281114
   95% expected band : 0.281114 < r < 0.281114
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 565404608
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.376542 +/- 0.00270745 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.376542 @ 95%CL (1 toyMC)
median expected limit: r < 0.376542 @ 95%CL (1 toyMC)
   68% expected band : 0.376542 < r < 0.376542
   95% expected band : 0.376542 < r < 0.376542
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine22.MarkovChainMC.mH22.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH22.-104067635.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH22.-1154313825.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH22.-1225538256.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH22.-1333297936.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH22.-1346838318.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH22.-1455883753.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH22.-1494686490.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH22.-1563800156.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH22.-1568872147.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH22.-1573450442.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH22.-1583908639.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH22.-1655654770.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH22.-1680281320.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH22.-168227140.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH22.-1706868934.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH22.-1727946349.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH22.-1766110806.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH22.-1768455948.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH22.-1878171813.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH22.-1881810923.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH22.-1911734981.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH22.-1936710302.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH22.-1977871857.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH22.-2027073142.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH22.-204482521.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH22.-2047538661.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH22.-2057078270.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH22.-2096055231.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH22.-2099548838.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH22.-2123423650.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH22.-2142744520.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH22.-222260623.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH22.-308824261.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH22.-429753244.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH22.-440277045.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH22.-482132200.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH22.-544540576.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH22.-561206140.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH22.-663158633.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH22.-677450467.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH22.-682507077.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH22.-717160703.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH22.-725287010.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH22.-765464362.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH22.-915793185.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH22.-994582826.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH22.-994662079.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH22.1034640458.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH22.1045849272.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH22.1056928647.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH22.1075801177.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH22.108852264.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH22.1217370321.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH22.1218851116.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH22.1242172432.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH22.1282759744.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH22.1314104921.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH22.1363642926.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH22.1404761165.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH22.1524538138.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH22.1540843296.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH22.1606368954.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH22.1609561343.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH22.1651617462.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH22.1673614395.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH22.1715075797.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH22.1750935653.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH22.1848628768.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH22.1880873745.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH22.1885219529.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH22.1958163137.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH22.1985615859.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH22.1994634567.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH22.2029810880.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH22.2030420756.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH22.223638884.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH22.226438026.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH22.238147756.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH22.252871289.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH22.279376499.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH22.3167544.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH22.316849581.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH22.318549499.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH22.339703954.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH22.361597315.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH22.361647847.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH22.430223810.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH22.511846280.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH22.537069151.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH22.565404608.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH22.609973772.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH22.616040848.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH22.621407437.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH22.651198839.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH22.679733581.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH22.710426025.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH22.833591020.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH22.881033435.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH22.918394785.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH22.971224832.root
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1495129637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.543093 +/- 0.00354746 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.543093 @ 95%CL (1 toyMC)
median expected limit: r < 0.543093 @ 95%CL (1 toyMC)
   68% expected band : 0.543093 < r < 0.543093
   95% expected band : 0.543093 < r < 0.543093
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2024741550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.748204 +/- 0.003955 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.748204 @ 95%CL (1 toyMC)
median expected limit: r < 0.748204 @ 95%CL (1 toyMC)
   68% expected band : 0.748204 < r < 0.748204
   95% expected band : 0.748204 < r < 0.748204
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1651685982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.618524 +/- 0.00309487 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.618524 @ 95%CL (1 toyMC)
median expected limit: r < 0.618524 @ 95%CL (1 toyMC)
   68% expected band : 0.618524 < r < 0.618524
   95% expected band : 0.618524 < r < 0.618524
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 933826192
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.593565 +/- 0.00330393 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.593565 @ 95%CL (1 toyMC)
median expected limit: r < 0.593565 @ 95%CL (1 toyMC)
   68% expected band : 0.593565 < r < 0.593565
   95% expected band : 0.593565 < r < 0.593565
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1127083649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.722643 +/- 0.00333423 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.722643 @ 95%CL (1 toyMC)
median expected limit: r < 0.722643 @ 95%CL (1 toyMC)
   68% expected band : 0.722643 < r < 0.722643
   95% expected band : 0.722643 < r < 0.722643
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1379032882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.803366 +/- 0.00280013 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.803366 @ 95%CL (1 toyMC)
median expected limit: r < 0.803366 @ 95%CL (1 toyMC)
   68% expected band : 0.803366 < r < 0.803366
   95% expected band : 0.803366 < r < 0.803366
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -593249917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.789135 +/- 0.00297656 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.789135 @ 95%CL (1 toyMC)
median expected limit: r < 0.789135 @ 95%CL (1 toyMC)
   68% expected band : 0.789135 < r < 0.789135
   95% expected band : 0.789135 < r < 0.789135
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2115843973
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6283 +/- 0.00359206 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.6283 @ 95%CL (1 toyMC)
median expected limit: r < 1.6283 @ 95%CL (1 toyMC)
   68% expected band : 1.6283 < r < 1.6283
   95% expected band : 1.6283 < r < 1.6283
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1856115940
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.851589 +/- 0.00358042 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.851589 @ 95%CL (1 toyMC)
median expected limit: r < 0.851589 @ 95%CL (1 toyMC)
   68% expected band : 0.851589 < r < 0.851589
   95% expected band : 0.851589 < r < 0.851589
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1509531251
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.617043 +/- 0.00311913 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.617043 @ 95%CL (1 toyMC)
median expected limit: r < 0.617043 @ 95%CL (1 toyMC)
   68% expected band : 0.617043 < r < 0.617043
   95% expected band : 0.617043 < r < 0.617043
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 560052529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.859384 +/- 0.00270905 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.859384 @ 95%CL (1 toyMC)
median expected limit: r < 0.859384 @ 95%CL (1 toyMC)
   68% expected band : 0.859384 < r < 0.859384
   95% expected band : 0.859384 < r < 0.859384
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -754642388
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.481939 +/- 0.00289771 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.481939 @ 95%CL (1 toyMC)
median expected limit: r < 0.481939 @ 95%CL (1 toyMC)
   68% expected band : 0.481939 < r < 0.481939
   95% expected band : 0.481939 < r < 0.481939
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2109522693
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.863894 +/- 0.00389699 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.863894 @ 95%CL (1 toyMC)
median expected limit: r < 0.863894 @ 95%CL (1 toyMC)
   68% expected band : 0.863894 < r < 0.863894
   95% expected band : 0.863894 < r < 0.863894
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1528640315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.680601 +/- 0.00339128 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.680601 @ 95%CL (1 toyMC)
median expected limit: r < 0.680601 @ 95%CL (1 toyMC)
   68% expected band : 0.680601 < r < 0.680601
   95% expected band : 0.680601 < r < 0.680601
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -905349250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.441175 +/- 0.00258095 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.441175 @ 95%CL (1 toyMC)
median expected limit: r < 0.441175 @ 95%CL (1 toyMC)
   68% expected band : 0.441175 < r < 0.441175
   95% expected band : 0.441175 < r < 0.441175
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1530429730
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26743 +/- 0.003457 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.26743 @ 95%CL (1 toyMC)
median expected limit: r < 1.26743 @ 95%CL (1 toyMC)
   68% expected band : 1.26743 < r < 1.26743
   95% expected band : 1.26743 < r < 1.26743
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -707532244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35427 +/- 0.00369906 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.35427 @ 95%CL (1 toyMC)
median expected limit: r < 1.35427 @ 95%CL (1 toyMC)
   68% expected band : 1.35427 < r < 1.35427
   95% expected band : 1.35427 < r < 1.35427
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1523153879
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.657016 +/- 0.00301576 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.657016 @ 95%CL (1 toyMC)
median expected limit: r < 0.657016 @ 95%CL (1 toyMC)
   68% expected band : 0.657016 < r < 0.657016
   95% expected band : 0.657016 < r < 0.657016
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1832801533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32524 +/- 0.00410086 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.32524 @ 95%CL (1 toyMC)
median expected limit: r < 1.32524 @ 95%CL (1 toyMC)
   68% expected band : 1.32524 < r < 1.32524
   95% expected band : 1.32524 < r < 1.32524
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -412434179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48706 +/- 0.0044599 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.48706 @ 95%CL (1 toyMC)
median expected limit: r < 1.48706 @ 95%CL (1 toyMC)
   68% expected band : 1.48706 < r < 1.48706
   95% expected band : 1.48706 < r < 1.48706
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 37757599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.549566 +/- 0.00283635 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.549566 @ 95%CL (1 toyMC)
median expected limit: r < 0.549566 @ 95%CL (1 toyMC)
   68% expected band : 0.549566 < r < 0.549566
   95% expected band : 0.549566 < r < 0.549566
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -721205664
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.989828 +/- 0.00340611 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.989828 @ 95%CL (1 toyMC)
median expected limit: r < 0.989828 @ 95%CL (1 toyMC)
   68% expected band : 0.989828 < r < 0.989828
   95% expected band : 0.989828 < r < 0.989828
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -159881068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06857 +/- 0.00342136 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.06857 @ 95%CL (1 toyMC)
median expected limit: r < 1.06857 @ 95%CL (1 toyMC)
   68% expected band : 1.06857 < r < 1.06857
   95% expected band : 1.06857 < r < 1.06857
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1977288085
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.47662 +/- 0.00353787 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.47662 @ 95%CL (1 toyMC)
median expected limit: r < 1.47662 @ 95%CL (1 toyMC)
   68% expected band : 1.47662 < r < 1.47662
   95% expected band : 1.47662 < r < 1.47662
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1936376465
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.891988 +/- 0.0035429 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.891988 @ 95%CL (1 toyMC)
median expected limit: r < 0.891988 @ 95%CL (1 toyMC)
   68% expected band : 0.891988 < r < 0.891988
   95% expected band : 0.891988 < r < 0.891988
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1401337001
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.737744 +/- 0.0032957 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.737744 @ 95%CL (1 toyMC)
median expected limit: r < 0.737744 @ 95%CL (1 toyMC)
   68% expected band : 0.737744 < r < 0.737744
   95% expected band : 0.737744 < r < 0.737744
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -556070783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.945142 +/- 0.00353184 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.945142 @ 95%CL (1 toyMC)
median expected limit: r < 0.945142 @ 95%CL (1 toyMC)
   68% expected band : 0.945142 < r < 0.945142
   95% expected band : 0.945142 < r < 0.945142
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1350357994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.9972 +/- 0.00298565 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.9972 @ 95%CL (1 toyMC)
median expected limit: r < 0.9972 @ 95%CL (1 toyMC)
   68% expected band : 0.9972 < r < 0.9972
   95% expected band : 0.9972 < r < 0.9972
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1321314464
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.933067 +/- 0.00310932 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 0.933067 @ 95%CL (1 toyMC)
median expected limit: r < 0.933067 @ 95%CL (1 toyMC)
   68% expected band : 0.933067 < r < 0.933067
   95% expected band : 0.933067 < r < 0.933067
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 783972530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.785106 +/- 0.00346387 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.785106 @ 95%CL (1 toyMC)
median expected limit: r < 0.785106 @ 95%CL (1 toyMC)
   68% expected band : 0.785106 < r < 0.785106
   95% expected band : 0.785106 < r < 0.785106
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -876340917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03686 +/- 0.00252545 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.03686 @ 95%CL (1 toyMC)
median expected limit: r < 1.03686 @ 95%CL (1 toyMC)
   68% expected band : 1.03686 < r < 1.03686
   95% expected band : 1.03686 < r < 1.03686
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1111586459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42569 +/- 0.00379178 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.42569 @ 95%CL (1 toyMC)
median expected limit: r < 1.42569 @ 95%CL (1 toyMC)
   68% expected band : 1.42569 < r < 1.42569
   95% expected band : 1.42569 < r < 1.42569
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2075748314
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.468853 +/- 0.00272981 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.468853 @ 95%CL (1 toyMC)
median expected limit: r < 0.468853 @ 95%CL (1 toyMC)
   68% expected band : 0.468853 < r < 0.468853
   95% expected band : 0.468853 < r < 0.468853
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 742709253
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49242 +/- 0.00358424 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.49242 @ 95%CL (1 toyMC)
median expected limit: r < 1.49242 @ 95%CL (1 toyMC)
   68% expected band : 1.49242 < r < 1.49242
   95% expected band : 1.49242 < r < 1.49242
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -22262100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.700822 +/- 0.00334841 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.700822 @ 95%CL (1 toyMC)
median expected limit: r < 0.700822 @ 95%CL (1 toyMC)
   68% expected band : 0.700822 < r < 0.700822
   95% expected band : 0.700822 < r < 0.700822
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 221210649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.5802 +/- 0.00217401 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.5802 @ 95%CL (1 toyMC)
median expected limit: r < 0.5802 @ 95%CL (1 toyMC)
   68% expected band : 0.5802 < r < 0.5802
   95% expected band : 0.5802 < r < 0.5802
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -277254767
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.917299 +/- 0.00311907 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.917299 @ 95%CL (1 toyMC)
median expected limit: r < 0.917299 @ 95%CL (1 toyMC)
   68% expected band : 0.917299 < r < 0.917299
   95% expected band : 0.917299 < r < 0.917299
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -676825506
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.551665 +/- 0.00306829 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.551665 @ 95%CL (1 toyMC)
median expected limit: r < 0.551665 @ 95%CL (1 toyMC)
   68% expected band : 0.551665 < r < 0.551665
   95% expected band : 0.551665 < r < 0.551665
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1126511806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.69739 +/- 0.00331992 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.69739 @ 95%CL (1 toyMC)
median expected limit: r < 0.69739 @ 95%CL (1 toyMC)
   68% expected band : 0.69739 < r < 0.69739
   95% expected band : 0.69739 < r < 0.69739
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1200627700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.889281 +/- 0.00295315 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.889281 @ 95%CL (1 toyMC)
median expected limit: r < 0.889281 @ 95%CL (1 toyMC)
   68% expected band : 0.889281 < r < 0.889281
   95% expected band : 0.889281 < r < 0.889281
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 208851350
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.765327 +/- 0.00328073 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.765327 @ 95%CL (1 toyMC)
median expected limit: r < 0.765327 @ 95%CL (1 toyMC)
   68% expected band : 0.765327 < r < 0.765327
   95% expected band : 0.765327 < r < 0.765327
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 779032329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.787854 +/- 0.0031462 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.787854 @ 95%CL (1 toyMC)
median expected limit: r < 0.787854 @ 95%CL (1 toyMC)
   68% expected band : 0.787854 < r < 0.787854
   95% expected band : 0.787854 < r < 0.787854
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 793863496
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.392038 +/- 0.0025824 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.392038 @ 95%CL (1 toyMC)
median expected limit: r < 0.392038 @ 95%CL (1 toyMC)
   68% expected band : 0.392038 < r < 0.392038
   95% expected band : 0.392038 < r < 0.392038
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 801327861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11092 +/- 0.00463735 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.11092 @ 95%CL (1 toyMC)
median expected limit: r < 1.11092 @ 95%CL (1 toyMC)
   68% expected band : 1.11092 < r < 1.11092
   95% expected band : 1.11092 < r < 1.11092
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 65019756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.497195 +/- 0.00273488 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.497195 @ 95%CL (1 toyMC)
median expected limit: r < 0.497195 @ 95%CL (1 toyMC)
   68% expected band : 0.497195 < r < 0.497195
   95% expected band : 0.497195 < r < 0.497195
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -486981809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.835528 +/- 0.00279135 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.835528 @ 95%CL (1 toyMC)
median expected limit: r < 0.835528 @ 95%CL (1 toyMC)
   68% expected band : 0.835528 < r < 0.835528
   95% expected band : 0.835528 < r < 0.835528
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1316798608
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.655227 +/- 0.00266556 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.655227 @ 95%CL (1 toyMC)
median expected limit: r < 0.655227 @ 95%CL (1 toyMC)
   68% expected band : 0.655227 < r < 0.655227
   95% expected band : 0.655227 < r < 0.655227
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1668156769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16581 +/- 0.00317926 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.16581 @ 95%CL (1 toyMC)
median expected limit: r < 1.16581 @ 95%CL (1 toyMC)
   68% expected band : 1.16581 < r < 1.16581
   95% expected band : 1.16581 < r < 1.16581
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1422648651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.47446 +/- 0.00283896 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.47446 @ 95%CL (1 toyMC)
median expected limit: r < 1.47446 @ 95%CL (1 toyMC)
   68% expected band : 1.47446 < r < 1.47446
   95% expected band : 1.47446 < r < 1.47446
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1297296957
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.74141 +/- 0.00362256 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.74141 @ 95%CL (1 toyMC)
median expected limit: r < 0.74141 @ 95%CL (1 toyMC)
   68% expected band : 0.74141 < r < 0.74141
   95% expected band : 0.74141 < r < 0.74141
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 520267662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13865 +/- 0.00313529 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.13865 @ 95%CL (1 toyMC)
median expected limit: r < 1.13865 @ 95%CL (1 toyMC)
   68% expected band : 1.13865 < r < 1.13865
   95% expected band : 1.13865 < r < 1.13865
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -391532631
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.724716 +/- 0.00257418 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.724716 @ 95%CL (1 toyMC)
median expected limit: r < 0.724716 @ 95%CL (1 toyMC)
   68% expected band : 0.724716 < r < 0.724716
   95% expected band : 0.724716 < r < 0.724716
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1750300071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.753815 +/- 0.00311089 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.753815 @ 95%CL (1 toyMC)
median expected limit: r < 0.753815 @ 95%CL (1 toyMC)
   68% expected band : 0.753815 < r < 0.753815
   95% expected band : 0.753815 < r < 0.753815
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1585113872
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58297 +/- 0.00360499 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.58297 @ 95%CL (1 toyMC)
median expected limit: r < 1.58297 @ 95%CL (1 toyMC)
   68% expected band : 1.58297 < r < 1.58297
   95% expected band : 1.58297 < r < 1.58297
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 773615539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.765616 +/- 0.00313424 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.765616 @ 95%CL (1 toyMC)
median expected limit: r < 0.765616 @ 95%CL (1 toyMC)
   68% expected band : 0.765616 < r < 0.765616
   95% expected band : 0.765616 < r < 0.765616
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2046280169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.867017 +/- 0.00394111 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.867017 @ 95%CL (1 toyMC)
median expected limit: r < 0.867017 @ 95%CL (1 toyMC)
   68% expected band : 0.867017 < r < 0.867017
   95% expected band : 0.867017 < r < 0.867017
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1303718759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.688748 +/- 0.0030368 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.688748 @ 95%CL (1 toyMC)
median expected limit: r < 0.688748 @ 95%CL (1 toyMC)
   68% expected band : 0.688748 < r < 0.688748
   95% expected band : 0.688748 < r < 0.688748
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1627756039
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.632157 +/- 0.00244295 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.632157 @ 95%CL (1 toyMC)
median expected limit: r < 0.632157 @ 95%CL (1 toyMC)
   68% expected band : 0.632157 < r < 0.632157
   95% expected band : 0.632157 < r < 0.632157
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1852734018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.906512 +/- 0.00408543 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.906512 @ 95%CL (1 toyMC)
median expected limit: r < 0.906512 @ 95%CL (1 toyMC)
   68% expected band : 0.906512 < r < 0.906512
   95% expected band : 0.906512 < r < 0.906512
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 939749916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05575 +/- 0.00352018 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.05575 @ 95%CL (1 toyMC)
median expected limit: r < 1.05575 @ 95%CL (1 toyMC)
   68% expected band : 1.05575 < r < 1.05575
   95% expected band : 1.05575 < r < 1.05575
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1326914480
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.810943 +/- 0.00261683 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.810943 @ 95%CL (1 toyMC)
median expected limit: r < 0.810943 @ 95%CL (1 toyMC)
   68% expected band : 0.810943 < r < 0.810943
   95% expected band : 0.810943 < r < 0.810943
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1302877370
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.651587 +/- 0.00286894 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.651587 @ 95%CL (1 toyMC)
median expected limit: r < 0.651587 @ 95%CL (1 toyMC)
   68% expected band : 0.651587 < r < 0.651587
   95% expected band : 0.651587 < r < 0.651587
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -209780267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15301 +/- 0.00321149 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.15301 @ 95%CL (1 toyMC)
median expected limit: r < 1.15301 @ 95%CL (1 toyMC)
   68% expected band : 1.15301 < r < 1.15301
   95% expected band : 1.15301 < r < 1.15301
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 567967728
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.541526 +/- 0.00288629 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.541526 @ 95%CL (1 toyMC)
median expected limit: r < 0.541526 @ 95%CL (1 toyMC)
   68% expected band : 0.541526 < r < 0.541526
   95% expected band : 0.541526 < r < 0.541526
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -406939942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.686873 +/- 0.00289055 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.686873 @ 95%CL (1 toyMC)
median expected limit: r < 0.686873 @ 95%CL (1 toyMC)
   68% expected band : 0.686873 < r < 0.686873
   95% expected band : 0.686873 < r < 0.686873
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1251528551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00703 +/- 0.00296901 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.00703 @ 95%CL (1 toyMC)
median expected limit: r < 1.00703 @ 95%CL (1 toyMC)
   68% expected band : 1.00703 < r < 1.00703
   95% expected band : 1.00703 < r < 1.00703
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2136622726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31283 +/- 0.00455165 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.31283 @ 95%CL (1 toyMC)
median expected limit: r < 1.31283 @ 95%CL (1 toyMC)
   68% expected band : 1.31283 < r < 1.31283
   95% expected band : 1.31283 < r < 1.31283
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1763739583
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0457 +/- 0.00243624 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.0457 @ 95%CL (1 toyMC)
median expected limit: r < 1.0457 @ 95%CL (1 toyMC)
   68% expected band : 1.0457 < r < 1.0457
   95% expected band : 1.0457 < r < 1.0457
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -306092883
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.558288 +/- 0.00339576 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.558288 @ 95%CL (1 toyMC)
median expected limit: r < 0.558288 @ 95%CL (1 toyMC)
   68% expected band : 0.558288 < r < 0.558288
   95% expected band : 0.558288 < r < 0.558288
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1202798960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4217 +/- 0.00325274 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.4217 @ 95%CL (1 toyMC)
median expected limit: r < 1.4217 @ 95%CL (1 toyMC)
   68% expected band : 1.4217 < r < 1.4217
   95% expected band : 1.4217 < r < 1.4217
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1229996785
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.898122 +/- 0.00337554 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.898122 @ 95%CL (1 toyMC)
median expected limit: r < 0.898122 @ 95%CL (1 toyMC)
   68% expected band : 0.898122 < r < 0.898122
   95% expected band : 0.898122 < r < 0.898122
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1834975832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.934873 +/- 0.00351173 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.934873 @ 95%CL (1 toyMC)
median expected limit: r < 0.934873 @ 95%CL (1 toyMC)
   68% expected band : 0.934873 < r < 0.934873
   95% expected band : 0.934873 < r < 0.934873
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 486099705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.778505 +/- 0.00378193 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.778505 @ 95%CL (1 toyMC)
median expected limit: r < 0.778505 @ 95%CL (1 toyMC)
   68% expected band : 0.778505 < r < 0.778505
   95% expected band : 0.778505 < r < 0.778505
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1752910632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28398 +/- 0.0032139 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.28398 @ 95%CL (1 toyMC)
median expected limit: r < 1.28398 @ 95%CL (1 toyMC)
   68% expected band : 1.28398 < r < 1.28398
   95% expected band : 1.28398 < r < 1.28398
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -669410441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33961 +/- 0.00334334 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.33961 @ 95%CL (1 toyMC)
median expected limit: r < 1.33961 @ 95%CL (1 toyMC)
   68% expected band : 1.33961 < r < 1.33961
   95% expected band : 1.33961 < r < 1.33961
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -853877815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.769419 +/- 0.00299317 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.769419 @ 95%CL (1 toyMC)
median expected limit: r < 0.769419 @ 95%CL (1 toyMC)
   68% expected band : 0.769419 < r < 0.769419
   95% expected band : 0.769419 < r < 0.769419
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1360218654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57881 +/- 0.00295812 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.57881 @ 95%CL (1 toyMC)
median expected limit: r < 1.57881 @ 95%CL (1 toyMC)
   68% expected band : 1.57881 < r < 1.57881
   95% expected band : 1.57881 < r < 1.57881
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1381087147
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09745 +/- 0.00367226 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.09745 @ 95%CL (1 toyMC)
median expected limit: r < 1.09745 @ 95%CL (1 toyMC)
   68% expected band : 1.09745 < r < 1.09745
   95% expected band : 1.09745 < r < 1.09745
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1693060494
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.894207 +/- 0.00311693 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.894207 @ 95%CL (1 toyMC)
median expected limit: r < 0.894207 @ 95%CL (1 toyMC)
   68% expected band : 0.894207 < r < 0.894207
   95% expected band : 0.894207 < r < 0.894207
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 983554825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1283 +/- 0.00311485 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.1283 @ 95%CL (1 toyMC)
median expected limit: r < 1.1283 @ 95%CL (1 toyMC)
   68% expected band : 1.1283 < r < 1.1283
   95% expected band : 1.1283 < r < 1.1283
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1084976992
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.573991 +/- 0.00280413 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.573991 @ 95%CL (1 toyMC)
median expected limit: r < 0.573991 @ 95%CL (1 toyMC)
   68% expected band : 0.573991 < r < 0.573991
   95% expected band : 0.573991 < r < 0.573991
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1527968971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.454234 +/- 0.00290238 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.454234 @ 95%CL (1 toyMC)
median expected limit: r < 0.454234 @ 95%CL (1 toyMC)
   68% expected band : 0.454234 < r < 0.454234
   95% expected band : 0.454234 < r < 0.454234
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1367255970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01401 +/- 0.00338914 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.01401 @ 95%CL (1 toyMC)
median expected limit: r < 1.01401 @ 95%CL (1 toyMC)
   68% expected band : 1.01401 < r < 1.01401
   95% expected band : 1.01401 < r < 1.01401
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2029078046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.896935 +/- 0.0029076 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.896935 @ 95%CL (1 toyMC)
median expected limit: r < 0.896935 @ 95%CL (1 toyMC)
   68% expected band : 0.896935 < r < 0.896935
   95% expected band : 0.896935 < r < 0.896935
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1208152160
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.631606 +/- 0.00293582 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.631606 @ 95%CL (1 toyMC)
median expected limit: r < 0.631606 @ 95%CL (1 toyMC)
   68% expected band : 0.631606 < r < 0.631606
   95% expected band : 0.631606 < r < 0.631606
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -625263502
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77749 +/- 0.00394251 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.77749 @ 95%CL (1 toyMC)
median expected limit: r < 1.77749 @ 95%CL (1 toyMC)
   68% expected band : 1.77749 < r < 1.77749
   95% expected band : 1.77749 < r < 1.77749
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -813772196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37577 +/- 0.0041321 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.37577 @ 95%CL (1 toyMC)
median expected limit: r < 1.37577 @ 95%CL (1 toyMC)
   68% expected band : 1.37577 < r < 1.37577
   95% expected band : 1.37577 < r < 1.37577
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 838450321
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15983 +/- 0.00321322 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.15983 @ 95%CL (1 toyMC)
median expected limit: r < 1.15983 @ 95%CL (1 toyMC)
   68% expected band : 1.15983 < r < 1.15983
   95% expected band : 1.15983 < r < 1.15983
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1885859607
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.713945 +/- 0.00348346 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.713945 @ 95%CL (1 toyMC)
median expected limit: r < 0.713945 @ 95%CL (1 toyMC)
   68% expected band : 0.713945 < r < 0.713945
   95% expected band : 0.713945 < r < 0.713945
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -804322023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.903683 +/- 0.00341215 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.903683 @ 95%CL (1 toyMC)
median expected limit: r < 0.903683 @ 95%CL (1 toyMC)
   68% expected band : 0.903683 < r < 0.903683
   95% expected band : 0.903683 < r < 0.903683
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 364055625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.673443 +/- 0.00351896 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.673443 @ 95%CL (1 toyMC)
median expected limit: r < 0.673443 @ 95%CL (1 toyMC)
   68% expected band : 0.673443 < r < 0.673443
   95% expected band : 0.673443 < r < 0.673443
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 274656027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05489 +/- 0.00338904 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.05489 @ 95%CL (1 toyMC)
median expected limit: r < 1.05489 @ 95%CL (1 toyMC)
   68% expected band : 1.05489 < r < 1.05489
   95% expected band : 1.05489 < r < 1.05489
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -854925496
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.758507 +/- 0.0027904 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.758507 @ 95%CL (1 toyMC)
median expected limit: r < 0.758507 @ 95%CL (1 toyMC)
   68% expected band : 0.758507 < r < 0.758507
   95% expected band : 0.758507 < r < 0.758507
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 943517590
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.803647 +/- 0.00295248 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.803647 @ 95%CL (1 toyMC)
median expected limit: r < 0.803647 @ 95%CL (1 toyMC)
   68% expected band : 0.803647 < r < 0.803647
   95% expected band : 0.803647 < r < 0.803647
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1335870706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.523052 +/- 0.00339282 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.523052 @ 95%CL (1 toyMC)
median expected limit: r < 0.523052 @ 95%CL (1 toyMC)
   68% expected band : 0.523052 < r < 0.523052
   95% expected band : 0.523052 < r < 0.523052
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 828565819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.53701 +/- 0.00318265 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.53701 @ 95%CL (1 toyMC)
median expected limit: r < 0.53701 @ 95%CL (1 toyMC)
   68% expected band : 0.53701 < r < 0.53701
   95% expected band : 0.53701 < r < 0.53701
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1989467426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41426 +/- 0.00278439 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.41426 @ 95%CL (1 toyMC)
median expected limit: r < 1.41426 @ 95%CL (1 toyMC)
   68% expected band : 1.41426 < r < 1.41426
   95% expected band : 1.41426 < r < 1.41426
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 31251666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.83667 +/- 0.00399895 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.83667 @ 95%CL (1 toyMC)
median expected limit: r < 1.83667 @ 95%CL (1 toyMC)
   68% expected band : 1.83667 < r < 1.83667
   95% expected band : 1.83667 < r < 1.83667
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 335892559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.687331 +/- 0.00398445 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.687331 @ 95%CL (1 toyMC)
median expected limit: r < 0.687331 @ 95%CL (1 toyMC)
   68% expected band : 0.687331 < r < 0.687331
   95% expected band : 0.687331 < r < 0.687331
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1791126077
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.93363 +/- 0.00398393 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.93363 @ 95%CL (1 toyMC)
median expected limit: r < 1.93363 @ 95%CL (1 toyMC)
   68% expected band : 1.93363 < r < 1.93363
   95% expected band : 1.93363 < r < 1.93363
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine28.MarkovChainMC.mH28.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH28.-1127083649.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH28.-1202798960.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH28.-1208152160.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH28.-1297296957.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH28.-1321314464.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH28.-1326914480.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH28.-1335870706.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH28.-1360218654.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH28.-1367255970.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH28.-1379032882.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH28.-1381087147.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH28.-1422648651.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH28.-1495129637.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH28.-1523153879.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH28.-1527968971.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH28.-1528640315.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH28.-159881068.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH28.-1668156769.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH28.-1693060494.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH28.-1750300071.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH28.-1834975832.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH28.-1856115940.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH28.-1936376465.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH28.-1989467426.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH28.-2029078046.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH28.-2046280169.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH28.-2075748314.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH28.-209780267.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH28.-22262100.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH28.-277254767.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH28.-306092883.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH28.-391532631.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH28.-406939942.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH28.-412434179.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH28.-486981809.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH28.-556070783.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH28.-593249917.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH28.-625263502.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH28.-669410441.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH28.-676825506.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH28.-707532244.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH28.-721205664.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH28.-754642388.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH28.-804322023.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH28.-813772196.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH28.-853877815.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH28.-854925496.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH28.-876340917.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH28.-905349250.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH28.1084976992.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH28.1111586459.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH28.1126511806.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH28.1200627700.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH28.1229996785.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH28.1251528551.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH28.1302877370.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH28.1303718759.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH28.1316798608.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH28.1350357994.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH28.1401337001.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH28.1509531251.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH28.1530429730.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH28.1585113872.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH28.1627756039.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH28.1651685982.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH28.1752910632.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH28.1763739583.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH28.1791126077.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH28.1832801533.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH28.1852734018.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH28.1885859607.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH28.1977288085.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH28.2024741550.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH28.208851350.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH28.2109522693.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH28.2115843973.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH28.2136622726.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH28.221210649.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH28.274656027.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH28.31251666.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH28.335892559.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH28.364055625.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH28.37757599.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH28.486099705.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH28.520267662.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH28.560052529.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH28.567967728.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH28.65019756.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH28.742709253.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH28.773615539.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH28.779032329.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH28.783972530.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH28.793863496.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH28.801327861.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH28.828565819.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH28.838450321.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH28.933826192.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH28.939749916.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH28.943517590.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH28.983554825.root
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1118101821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59573 +/- 0.00411441 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.59573 @ 95%CL (1 toyMC)
median expected limit: r < 1.59573 @ 95%CL (1 toyMC)
   68% expected band : 1.59573 < r < 1.59573
   95% expected band : 1.59573 < r < 1.59573
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1747667757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26141 +/- 0.00343283 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.26141 @ 95%CL (1 toyMC)
median expected limit: r < 1.26141 @ 95%CL (1 toyMC)
   68% expected band : 1.26141 < r < 1.26141
   95% expected band : 1.26141 < r < 1.26141
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 310856332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24388 +/- 0.00366679 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.24388 @ 95%CL (1 toyMC)
median expected limit: r < 1.24388 @ 95%CL (1 toyMC)
   68% expected band : 1.24388 < r < 1.24388
   95% expected band : 1.24388 < r < 1.24388
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1344353519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.879339 +/- 0.00342694 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.879339 @ 95%CL (1 toyMC)
median expected limit: r < 0.879339 @ 95%CL (1 toyMC)
   68% expected band : 0.879339 < r < 0.879339
   95% expected band : 0.879339 < r < 0.879339
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1191721326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24571 +/- 0.00344751 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.24571 @ 95%CL (1 toyMC)
median expected limit: r < 1.24571 @ 95%CL (1 toyMC)
   68% expected band : 1.24571 < r < 1.24571
   95% expected band : 1.24571 < r < 1.24571
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 469304533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99212 +/- 0.00504001 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.99212 @ 95%CL (1 toyMC)
median expected limit: r < 2.99212 @ 95%CL (1 toyMC)
   68% expected band : 2.99212 < r < 2.99212
   95% expected band : 2.99212 < r < 2.99212
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 380654523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.693833 +/- 0.00353776 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.693833 @ 95%CL (1 toyMC)
median expected limit: r < 0.693833 @ 95%CL (1 toyMC)
   68% expected band : 0.693833 < r < 0.693833
   95% expected band : 0.693833 < r < 0.693833
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -711229190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.735422 +/- 0.00366418 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.735422 @ 95%CL (1 toyMC)
median expected limit: r < 0.735422 @ 95%CL (1 toyMC)
   68% expected band : 0.735422 < r < 0.735422
   95% expected band : 0.735422 < r < 0.735422
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1325135108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.714001 +/- 0.00372784 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.714001 @ 95%CL (1 toyMC)
median expected limit: r < 0.714001 @ 95%CL (1 toyMC)
   68% expected band : 0.714001 < r < 0.714001
   95% expected band : 0.714001 < r < 0.714001
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1460042284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10126 +/- 0.00253465 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.10126 @ 95%CL (1 toyMC)
median expected limit: r < 1.10126 @ 95%CL (1 toyMC)
   68% expected band : 1.10126 < r < 1.10126
   95% expected band : 1.10126 < r < 1.10126
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1250479380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.96533 +/- 0.00390912 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.96533 @ 95%CL (1 toyMC)
median expected limit: r < 1.96533 @ 95%CL (1 toyMC)
   68% expected band : 1.96533 < r < 1.96533
   95% expected band : 1.96533 < r < 1.96533
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1182728438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.66919 +/- 0.00311968 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.66919 @ 95%CL (1 toyMC)
median expected limit: r < 0.66919 @ 95%CL (1 toyMC)
   68% expected band : 0.66919 < r < 0.66919
   95% expected band : 0.66919 < r < 0.66919
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2020130728
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.902905 +/- 0.00333933 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.902905 @ 95%CL (1 toyMC)
median expected limit: r < 0.902905 @ 95%CL (1 toyMC)
   68% expected band : 0.902905 < r < 0.902905
   95% expected band : 0.902905 < r < 0.902905
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2128814536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28131 +/- 0.00447666 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.28131 @ 95%CL (1 toyMC)
median expected limit: r < 1.28131 @ 95%CL (1 toyMC)
   68% expected band : 1.28131 < r < 1.28131
   95% expected band : 1.28131 < r < 1.28131
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -546001202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.821721 +/- 0.00356512 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.821721 @ 95%CL (1 toyMC)
median expected limit: r < 0.821721 @ 95%CL (1 toyMC)
   68% expected band : 0.821721 < r < 0.821721
   95% expected band : 0.821721 < r < 0.821721
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -546742834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.670647 +/- 0.003124 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.670647 @ 95%CL (1 toyMC)
median expected limit: r < 0.670647 @ 95%CL (1 toyMC)
   68% expected band : 0.670647 < r < 0.670647
   95% expected band : 0.670647 < r < 0.670647
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1176184055
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.811837 +/- 0.00291857 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.811837 @ 95%CL (1 toyMC)
median expected limit: r < 0.811837 @ 95%CL (1 toyMC)
   68% expected band : 0.811837 < r < 0.811837
   95% expected band : 0.811837 < r < 0.811837
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -393837297
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80487 +/- 0.00445408 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.80487 @ 95%CL (1 toyMC)
median expected limit: r < 1.80487 @ 95%CL (1 toyMC)
   68% expected band : 1.80487 < r < 1.80487
   95% expected band : 1.80487 < r < 1.80487
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 277181064
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.997564 +/- 0.00326458 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.997564 @ 95%CL (1 toyMC)
median expected limit: r < 0.997564 @ 95%CL (1 toyMC)
   68% expected band : 0.997564 < r < 0.997564
   95% expected band : 0.997564 < r < 0.997564
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 715651161
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.945239 +/- 0.00342709 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.945239 @ 95%CL (1 toyMC)
median expected limit: r < 0.945239 @ 95%CL (1 toyMC)
   68% expected band : 0.945239 < r < 0.945239
   95% expected band : 0.945239 < r < 0.945239
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1816834357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64792 +/- 0.00434518 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.64792 @ 95%CL (1 toyMC)
median expected limit: r < 1.64792 @ 95%CL (1 toyMC)
   68% expected band : 1.64792 < r < 1.64792
   95% expected band : 1.64792 < r < 1.64792
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1042526377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.714661 +/- 0.00348324 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.714661 @ 95%CL (1 toyMC)
median expected limit: r < 0.714661 @ 95%CL (1 toyMC)
   68% expected band : 0.714661 < r < 0.714661
   95% expected band : 0.714661 < r < 0.714661
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2087564140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.613978 +/- 0.00299492 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.613978 @ 95%CL (1 toyMC)
median expected limit: r < 0.613978 @ 95%CL (1 toyMC)
   68% expected band : 0.613978 < r < 0.613978
   95% expected band : 0.613978 < r < 0.613978
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 8652561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.816799 +/- 0.00373465 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.816799 @ 95%CL (1 toyMC)
median expected limit: r < 0.816799 @ 95%CL (1 toyMC)
   68% expected band : 0.816799 < r < 0.816799
   95% expected band : 0.816799 < r < 0.816799
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 193802599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78145 +/- 0.00324565 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.78145 @ 95%CL (1 toyMC)
median expected limit: r < 1.78145 @ 95%CL (1 toyMC)
   68% expected band : 1.78145 < r < 1.78145
   95% expected band : 1.78145 < r < 1.78145
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -120535353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05728 +/- 0.00393111 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.05728 @ 95%CL (1 toyMC)
median expected limit: r < 1.05728 @ 95%CL (1 toyMC)
   68% expected band : 1.05728 < r < 1.05728
   95% expected band : 1.05728 < r < 1.05728
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1822377365
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.829294 +/- 0.00302309 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.829294 @ 95%CL (1 toyMC)
median expected limit: r < 0.829294 @ 95%CL (1 toyMC)
   68% expected band : 0.829294 < r < 0.829294
   95% expected band : 0.829294 < r < 0.829294
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 690817147
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.7054 +/- 0.00325093 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.7054 @ 95%CL (1 toyMC)
median expected limit: r < 0.7054 @ 95%CL (1 toyMC)
   68% expected band : 0.7054 < r < 0.7054
   95% expected band : 0.7054 < r < 0.7054
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 746252215
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.868703 +/- 0.00342649 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.868703 @ 95%CL (1 toyMC)
median expected limit: r < 0.868703 @ 95%CL (1 toyMC)
   68% expected band : 0.868703 < r < 0.868703
   95% expected band : 0.868703 < r < 0.868703
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -772812384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.976419 +/- 0.00308663 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.976419 @ 95%CL (1 toyMC)
median expected limit: r < 0.976419 @ 95%CL (1 toyMC)
   68% expected band : 0.976419 < r < 0.976419
   95% expected band : 0.976419 < r < 0.976419
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1725881409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.98738 +/- 0.003538 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.98738 @ 95%CL (1 toyMC)
median expected limit: r < 0.98738 @ 95%CL (1 toyMC)
   68% expected band : 0.98738 < r < 0.98738
   95% expected band : 0.98738 < r < 0.98738
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 40592687
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14529 +/- 0.00275808 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.14529 @ 95%CL (1 toyMC)
median expected limit: r < 1.14529 @ 95%CL (1 toyMC)
   68% expected band : 1.14529 < r < 1.14529
   95% expected band : 1.14529 < r < 1.14529
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1981988627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07966 +/- 0.0040251 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.07966 @ 95%CL (1 toyMC)
median expected limit: r < 1.07966 @ 95%CL (1 toyMC)
   68% expected band : 1.07966 < r < 1.07966
   95% expected band : 1.07966 < r < 1.07966
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1624604307
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.08588 +/- 0.00374037 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.08588 @ 95%CL (1 toyMC)
median expected limit: r < 2.08588 @ 95%CL (1 toyMC)
   68% expected band : 2.08588 < r < 2.08588
   95% expected band : 2.08588 < r < 2.08588
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 878886030
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32561 +/- 0.0036866 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.32561 @ 95%CL (1 toyMC)
median expected limit: r < 1.32561 @ 95%CL (1 toyMC)
   68% expected band : 1.32561 < r < 1.32561
   95% expected band : 1.32561 < r < 1.32561
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -195960672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.731354 +/- 0.00308017 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.731354 @ 95%CL (1 toyMC)
median expected limit: r < 0.731354 @ 95%CL (1 toyMC)
   68% expected band : 0.731354 < r < 0.731354
   95% expected band : 0.731354 < r < 0.731354
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1042302556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10539 +/- 0.0034771 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.10539 @ 95%CL (1 toyMC)
median expected limit: r < 1.10539 @ 95%CL (1 toyMC)
   68% expected band : 1.10539 < r < 1.10539
   95% expected band : 1.10539 < r < 1.10539
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -60734225
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.76978 +/- 0.00285614 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.76978 @ 95%CL (1 toyMC)
median expected limit: r < 0.76978 @ 95%CL (1 toyMC)
   68% expected band : 0.76978 < r < 0.76978
   95% expected band : 0.76978 < r < 0.76978
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1385344768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.760895 +/- 0.00361246 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.760895 @ 95%CL (1 toyMC)
median expected limit: r < 0.760895 @ 95%CL (1 toyMC)
   68% expected band : 0.760895 < r < 0.760895
   95% expected band : 0.760895 < r < 0.760895
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -591892978
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.546682 +/- 0.00261428 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.546682 @ 95%CL (1 toyMC)
median expected limit: r < 0.546682 @ 95%CL (1 toyMC)
   68% expected band : 0.546682 < r < 0.546682
   95% expected band : 0.546682 < r < 0.546682
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -632165438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33382 +/- 0.00332422 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.33382 @ 95%CL (1 toyMC)
median expected limit: r < 1.33382 @ 95%CL (1 toyMC)
   68% expected band : 1.33382 < r < 1.33382
   95% expected band : 1.33382 < r < 1.33382
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -777289070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30539 +/- 0.00322578 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.30539 @ 95%CL (1 toyMC)
median expected limit: r < 1.30539 @ 95%CL (1 toyMC)
   68% expected band : 1.30539 < r < 1.30539
   95% expected band : 1.30539 < r < 1.30539
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 934720153
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42842 +/- 0.00341366 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.42842 @ 95%CL (1 toyMC)
median expected limit: r < 2.42842 @ 95%CL (1 toyMC)
   68% expected band : 2.42842 < r < 2.42842
   95% expected band : 2.42842 < r < 2.42842
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 298418410
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04604 +/- 0.00361416 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.04604 @ 95%CL (1 toyMC)
median expected limit: r < 1.04604 @ 95%CL (1 toyMC)
   68% expected band : 1.04604 < r < 1.04604
   95% expected band : 1.04604 < r < 1.04604
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1921673045
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91383 +/- 0.00489638 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.91383 @ 95%CL (1 toyMC)
median expected limit: r < 2.91383 @ 95%CL (1 toyMC)
   68% expected band : 2.91383 < r < 2.91383
   95% expected band : 2.91383 < r < 2.91383
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1179639852
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05245 +/- 0.00329896 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.05245 @ 95%CL (1 toyMC)
median expected limit: r < 1.05245 @ 95%CL (1 toyMC)
   68% expected band : 1.05245 < r < 1.05245
   95% expected band : 1.05245 < r < 1.05245
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -423667587
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13782 +/- 0.003904 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.13782 @ 95%CL (1 toyMC)
median expected limit: r < 1.13782 @ 95%CL (1 toyMC)
   68% expected band : 1.13782 < r < 1.13782
   95% expected band : 1.13782 < r < 1.13782
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1604625647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21059 +/- 0.00351514 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.21059 @ 95%CL (1 toyMC)
median expected limit: r < 1.21059 @ 95%CL (1 toyMC)
   68% expected band : 1.21059 < r < 1.21059
   95% expected band : 1.21059 < r < 1.21059
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 909532002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80409 +/- 0.00444261 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.80409 @ 95%CL (1 toyMC)
median expected limit: r < 1.80409 @ 95%CL (1 toyMC)
   68% expected band : 1.80409 < r < 1.80409
   95% expected band : 1.80409 < r < 1.80409
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 690989441
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18451 +/- 0.00347019 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.18451 @ 95%CL (1 toyMC)
median expected limit: r < 1.18451 @ 95%CL (1 toyMC)
   68% expected band : 1.18451 < r < 1.18451
   95% expected band : 1.18451 < r < 1.18451
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1456262526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6874 +/- 0.00492048 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.6874 @ 95%CL (1 toyMC)
median expected limit: r < 1.6874 @ 95%CL (1 toyMC)
   68% expected band : 1.6874 < r < 1.6874
   95% expected band : 1.6874 < r < 1.6874
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 773089314
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04344 +/- 0.0041871 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.04344 @ 95%CL (1 toyMC)
median expected limit: r < 1.04344 @ 95%CL (1 toyMC)
   68% expected band : 1.04344 < r < 1.04344
   95% expected band : 1.04344 < r < 1.04344
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1100173983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03706 +/- 0.00333621 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.03706 @ 95%CL (1 toyMC)
median expected limit: r < 1.03706 @ 95%CL (1 toyMC)
   68% expected band : 1.03706 < r < 1.03706
   95% expected band : 1.03706 < r < 1.03706
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 527248199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76412 +/- 0.00402014 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.76412 @ 95%CL (1 toyMC)
median expected limit: r < 1.76412 @ 95%CL (1 toyMC)
   68% expected band : 1.76412 < r < 1.76412
   95% expected band : 1.76412 < r < 1.76412
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -268100217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2237 +/- 0.00433011 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.2237 @ 95%CL (1 toyMC)
median expected limit: r < 1.2237 @ 95%CL (1 toyMC)
   68% expected band : 1.2237 < r < 1.2237
   95% expected band : 1.2237 < r < 1.2237
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1419349831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26209 +/- 0.00353713 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.26209 @ 95%CL (1 toyMC)
median expected limit: r < 1.26209 @ 95%CL (1 toyMC)
   68% expected band : 1.26209 < r < 1.26209
   95% expected band : 1.26209 < r < 1.26209
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1502942690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44809 +/- 0.00305937 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.44809 @ 95%CL (1 toyMC)
median expected limit: r < 1.44809 @ 95%CL (1 toyMC)
   68% expected band : 1.44809 < r < 1.44809
   95% expected band : 1.44809 < r < 1.44809
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1383259704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.88896 +/- 0.00320828 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.88896 @ 95%CL (1 toyMC)
median expected limit: r < 0.88896 @ 95%CL (1 toyMC)
   68% expected band : 0.88896 < r < 0.88896
   95% expected band : 0.88896 < r < 0.88896
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1958419606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.967372 +/- 0.00344041 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.967372 @ 95%CL (1 toyMC)
median expected limit: r < 0.967372 @ 95%CL (1 toyMC)
   68% expected band : 0.967372 < r < 0.967372
   95% expected band : 0.967372 < r < 0.967372
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 895280862
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17726 +/- 0.00356137 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.17726 @ 95%CL (1 toyMC)
median expected limit: r < 1.17726 @ 95%CL (1 toyMC)
   68% expected band : 1.17726 < r < 1.17726
   95% expected band : 1.17726 < r < 1.17726
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1843119318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52162 +/- 0.00379867 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.52162 @ 95%CL (1 toyMC)
median expected limit: r < 1.52162 @ 95%CL (1 toyMC)
   68% expected band : 1.52162 < r < 1.52162
   95% expected band : 1.52162 < r < 1.52162
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1199128700
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.780127 +/- 0.00331358 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.780127 @ 95%CL (1 toyMC)
median expected limit: r < 0.780127 @ 95%CL (1 toyMC)
   68% expected band : 0.780127 < r < 0.780127
   95% expected band : 0.780127 < r < 0.780127
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -189354333
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.616371 +/- 0.00354509 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.616371 @ 95%CL (1 toyMC)
median expected limit: r < 0.616371 @ 95%CL (1 toyMC)
   68% expected band : 0.616371 < r < 0.616371
   95% expected band : 0.616371 < r < 0.616371
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2078990510
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32529 +/- 0.00377256 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.32529 @ 95%CL (1 toyMC)
median expected limit: r < 2.32529 @ 95%CL (1 toyMC)
   68% expected band : 2.32529 < r < 2.32529
   95% expected band : 2.32529 < r < 2.32529
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -9590739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.845569 +/- 0.00307762 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.845569 @ 95%CL (1 toyMC)
median expected limit: r < 0.845569 @ 95%CL (1 toyMC)
   68% expected band : 0.845569 < r < 0.845569
   95% expected band : 0.845569 < r < 0.845569
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1170225066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35627 +/- 0.00410254 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.35627 @ 95%CL (1 toyMC)
median expected limit: r < 1.35627 @ 95%CL (1 toyMC)
   68% expected band : 1.35627 < r < 1.35627
   95% expected band : 1.35627 < r < 1.35627
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -461207109
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.958233 +/- 0.00434424 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.958233 @ 95%CL (1 toyMC)
median expected limit: r < 0.958233 @ 95%CL (1 toyMC)
   68% expected band : 0.958233 < r < 0.958233
   95% expected band : 0.958233 < r < 0.958233
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2051453243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24058 +/- 0.00373149 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.24058 @ 95%CL (1 toyMC)
median expected limit: r < 1.24058 @ 95%CL (1 toyMC)
   68% expected band : 1.24058 < r < 1.24058
   95% expected band : 1.24058 < r < 1.24058
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1357488556
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.11173 +/- 0.00423452 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.11173 @ 95%CL (1 toyMC)
median expected limit: r < 2.11173 @ 95%CL (1 toyMC)
   68% expected band : 2.11173 < r < 2.11173
   95% expected band : 2.11173 < r < 2.11173
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 184261975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35604 +/- 0.00367813 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.35604 @ 95%CL (1 toyMC)
median expected limit: r < 1.35604 @ 95%CL (1 toyMC)
   68% expected band : 1.35604 < r < 1.35604
   95% expected band : 1.35604 < r < 1.35604
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 115090159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05061 +/- 0.00302659 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.05061 @ 95%CL (1 toyMC)
median expected limit: r < 1.05061 @ 95%CL (1 toyMC)
   68% expected band : 1.05061 < r < 1.05061
   95% expected band : 1.05061 < r < 1.05061
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 14292016
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.651457 +/- 0.00336908 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.651457 @ 95%CL (1 toyMC)
median expected limit: r < 0.651457 @ 95%CL (1 toyMC)
   68% expected band : 0.651457 < r < 0.651457
   95% expected band : 0.651457 < r < 0.651457
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1384156379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67945 +/- 0.00392526 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.67945 @ 95%CL (1 toyMC)
median expected limit: r < 1.67945 @ 95%CL (1 toyMC)
   68% expected band : 1.67945 < r < 1.67945
   95% expected band : 1.67945 < r < 1.67945
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1592843671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.89235 +/- 0.00376846 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.89235 @ 95%CL (1 toyMC)
median expected limit: r < 1.89235 @ 95%CL (1 toyMC)
   68% expected band : 1.89235 < r < 1.89235
   95% expected band : 1.89235 < r < 1.89235
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2026863433
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.989998 +/- 0.00368687 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.989998 @ 95%CL (1 toyMC)
median expected limit: r < 0.989998 @ 95%CL (1 toyMC)
   68% expected band : 0.989998 < r < 0.989998
   95% expected band : 0.989998 < r < 0.989998
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -185937878
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.645336 +/- 0.00304119 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.645336 @ 95%CL (1 toyMC)
median expected limit: r < 0.645336 @ 95%CL (1 toyMC)
   68% expected band : 0.645336 < r < 0.645336
   95% expected band : 0.645336 < r < 0.645336
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 341811407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39896 +/- 0.00347065 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.39896 @ 95%CL (1 toyMC)
median expected limit: r < 1.39896 @ 95%CL (1 toyMC)
   68% expected band : 1.39896 < r < 1.39896
   95% expected band : 1.39896 < r < 1.39896
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1414370951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41248 +/- 0.00319103 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.41248 @ 95%CL (1 toyMC)
median expected limit: r < 1.41248 @ 95%CL (1 toyMC)
   68% expected band : 1.41248 < r < 1.41248
   95% expected band : 1.41248 < r < 1.41248
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -659603082
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07993 +/- 0.00401622 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.07993 @ 95%CL (1 toyMC)
median expected limit: r < 1.07993 @ 95%CL (1 toyMC)
   68% expected band : 1.07993 < r < 1.07993
   95% expected band : 1.07993 < r < 1.07993
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1922626831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.987886 +/- 0.00343733 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.987886 @ 95%CL (1 toyMC)
median expected limit: r < 0.987886 @ 95%CL (1 toyMC)
   68% expected band : 0.987886 < r < 0.987886
   95% expected band : 0.987886 < r < 0.987886
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1955470056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.128 +/- 0.00367349 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.128 @ 95%CL (1 toyMC)
median expected limit: r < 1.128 @ 95%CL (1 toyMC)
   68% expected band : 1.128 < r < 1.128
   95% expected band : 1.128 < r < 1.128
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1906740805
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.741273 +/- 0.00332281 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.741273 @ 95%CL (1 toyMC)
median expected limit: r < 0.741273 @ 95%CL (1 toyMC)
   68% expected band : 0.741273 < r < 0.741273
   95% expected band : 0.741273 < r < 0.741273
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2117834354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84914 +/- 0.0041015 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.84914 @ 95%CL (1 toyMC)
median expected limit: r < 1.84914 @ 95%CL (1 toyMC)
   68% expected band : 1.84914 < r < 1.84914
   95% expected band : 1.84914 < r < 1.84914
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1740376776
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.97448 +/- 0.00424607 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.97448 @ 95%CL (1 toyMC)
median expected limit: r < 1.97448 @ 95%CL (1 toyMC)
   68% expected band : 1.97448 < r < 1.97448
   95% expected band : 1.97448 < r < 1.97448
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1638316865
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33359 +/- 0.00365211 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.33359 @ 95%CL (1 toyMC)
median expected limit: r < 1.33359 @ 95%CL (1 toyMC)
   68% expected band : 1.33359 < r < 1.33359
   95% expected band : 1.33359 < r < 1.33359
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 903115298
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00231 +/- 0.00307056 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.00231 @ 95%CL (1 toyMC)
median expected limit: r < 1.00231 @ 95%CL (1 toyMC)
   68% expected band : 1.00231 < r < 1.00231
   95% expected band : 1.00231 < r < 1.00231
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -6986275
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.475058 +/- 0.00333312 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.475058 @ 95%CL (1 toyMC)
median expected limit: r < 0.475058 @ 95%CL (1 toyMC)
   68% expected band : 0.475058 < r < 0.475058
   95% expected band : 0.475058 < r < 0.475058
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1250941967
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.915778 +/- 0.00393497 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.915778 @ 95%CL (1 toyMC)
median expected limit: r < 0.915778 @ 95%CL (1 toyMC)
   68% expected band : 0.915778 < r < 0.915778
   95% expected band : 0.915778 < r < 0.915778
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -673480794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.670747 +/- 0.00337243 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.670747 @ 95%CL (1 toyMC)
median expected limit: r < 0.670747 @ 95%CL (1 toyMC)
   68% expected band : 0.670747 < r < 0.670747
   95% expected band : 0.670747 < r < 0.670747
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1959272401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48336 +/- 0.00435163 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.48336 @ 95%CL (1 toyMC)
median expected limit: r < 1.48336 @ 95%CL (1 toyMC)
   68% expected band : 1.48336 < r < 1.48336
   95% expected band : 1.48336 < r < 1.48336
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1340416580
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61109 +/- 0.00374397 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.61109 @ 95%CL (1 toyMC)
median expected limit: r < 1.61109 @ 95%CL (1 toyMC)
   68% expected band : 1.61109 < r < 1.61109
   95% expected band : 1.61109 < r < 1.61109
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1021939634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.750281 +/- 0.00338802 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.750281 @ 95%CL (1 toyMC)
median expected limit: r < 0.750281 @ 95%CL (1 toyMC)
   68% expected band : 0.750281 < r < 0.750281
   95% expected band : 0.750281 < r < 0.750281
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2048735743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.995393 +/- 0.00354678 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.995393 @ 95%CL (1 toyMC)
median expected limit: r < 0.995393 @ 95%CL (1 toyMC)
   68% expected band : 0.995393 < r < 0.995393
   95% expected band : 0.995393 < r < 0.995393
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 652660645
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.830716 +/- 0.00313968 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.830716 @ 95%CL (1 toyMC)
median expected limit: r < 0.830716 @ 95%CL (1 toyMC)
   68% expected band : 0.830716 < r < 0.830716
   95% expected band : 0.830716 < r < 0.830716
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 743153162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08288 +/- 0.003687 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.08288 @ 95%CL (1 toyMC)
median expected limit: r < 1.08288 @ 95%CL (1 toyMC)
   68% expected band : 1.08288 < r < 1.08288
   95% expected band : 1.08288 < r < 1.08288
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1936611329
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.89739 +/- 0.00392037 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.89739 @ 95%CL (1 toyMC)
median expected limit: r < 1.89739 @ 95%CL (1 toyMC)
   68% expected band : 1.89739 < r < 1.89739
   95% expected band : 1.89739 < r < 1.89739
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 636617651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.861075 +/- 0.00306047 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.861075 @ 95%CL (1 toyMC)
median expected limit: r < 0.861075 @ 95%CL (1 toyMC)
   68% expected band : 0.861075 < r < 0.861075
   95% expected band : 0.861075 < r < 0.861075
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1603271217
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.747745 +/- 0.0026767 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.747745 @ 95%CL (1 toyMC)
median expected limit: r < 0.747745 @ 95%CL (1 toyMC)
   68% expected band : 0.747745 < r < 0.747745
   95% expected band : 0.747745 < r < 0.747745
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -42926773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55417 +/- 0.00384637 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.55417 @ 95%CL (1 toyMC)
median expected limit: r < 1.55417 @ 95%CL (1 toyMC)
   68% expected band : 1.55417 < r < 1.55417
   95% expected band : 1.55417 < r < 1.55417
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 488589500
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21538 +/- 0.00436415 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.21538 @ 95%CL (1 toyMC)
median expected limit: r < 1.21538 @ 95%CL (1 toyMC)
   68% expected band : 1.21538 < r < 1.21538
   95% expected band : 1.21538 < r < 1.21538
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine32.MarkovChainMC.mH32.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH32.-1118101821.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH32.-1170225066.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH32.-1176184055.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH32.-1179639852.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH32.-1199128700.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH32.-120535353.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH32.-1250479380.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH32.-1250941967.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH32.-1325135108.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH32.-1385344768.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH32.-1419349831.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH32.-1502942690.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH32.-1592843671.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH32.-1604625647.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH32.-1638316865.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH32.-1725881409.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH32.-1740376776.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH32.-1747667757.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH32.-1822377365.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH32.-185937878.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH32.-189354333.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH32.-1921673045.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH32.-1922626831.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH32.-1936611329.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH32.-1955470056.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH32.-1958419606.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH32.-1959272401.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH32.-195960672.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH32.-1981988627.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH32.-2020130728.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH32.-2026863433.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH32.-2051453243.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH32.-2078990510.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH32.-2128814536.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH32.-268100217.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH32.-393837297.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH32.-423667587.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH32.-42926773.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH32.-461207109.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH32.-546001202.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH32.-546742834.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH32.-591892978.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH32.-60734225.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH32.-632165438.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH32.-659603082.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH32.-673480794.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH32.-6986275.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH32.-711229190.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH32.-772812384.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH32.-777289070.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH32.-9590739.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH32.1021939634.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH32.1042302556.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH32.1042526377.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH32.1100173983.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH32.115090159.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH32.1182728438.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH32.1191721326.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH32.1340416580.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH32.1344353519.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH32.1357488556.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH32.1383259704.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH32.1384156379.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH32.1414370951.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH32.14292016.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH32.1456262526.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH32.1460042284.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH32.1603271217.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH32.1624604307.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH32.1816834357.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH32.184261975.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH32.1843119318.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH32.1906740805.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH32.193802599.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH32.2048735743.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH32.2087564140.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH32.2117834354.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH32.277181064.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH32.298418410.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH32.310856332.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH32.341811407.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH32.380654523.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH32.40592687.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH32.469304533.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH32.488589500.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH32.527248199.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH32.636617651.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH32.652660645.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH32.690817147.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH32.690989441.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH32.715651161.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH32.743153162.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH32.746252215.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH32.773089314.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH32.8652561.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH32.878886030.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH32.895280862.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH32.903115298.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH32.909532002.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH32.934720153.root
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1294295367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07677 +/- 0.0050186 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.07677 @ 95%CL (1 toyMC)
median expected limit: r < 2.07677 @ 95%CL (1 toyMC)
   68% expected band : 2.07677 < r < 2.07677
   95% expected band : 2.07677 < r < 2.07677
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1257473536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.34075 +/- 0.00474884 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 4.34075 @ 95%CL (1 toyMC)
median expected limit: r < 4.34075 @ 95%CL (1 toyMC)
   68% expected band : 4.34075 < r < 4.34075
   95% expected band : 4.34075 < r < 4.34075
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -814806835
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.17797 +/- 0.00508923 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.17797 @ 95%CL (1 toyMC)
median expected limit: r < 3.17797 @ 95%CL (1 toyMC)
   68% expected band : 3.17797 < r < 3.17797
   95% expected band : 3.17797 < r < 3.17797
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1567693850
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.60616 +/- 0.00527831 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.60616 @ 95%CL (1 toyMC)
median expected limit: r < 3.60616 @ 95%CL (1 toyMC)
   68% expected band : 3.60616 < r < 3.60616
   95% expected band : 3.60616 < r < 3.60616
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1810585003
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72765 +/- 0.00443757 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.72765 @ 95%CL (1 toyMC)
median expected limit: r < 1.72765 @ 95%CL (1 toyMC)
   68% expected band : 1.72765 < r < 1.72765
   95% expected band : 1.72765 < r < 1.72765
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1915123840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.056 +/- 0.00599048 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 4.056 @ 95%CL (1 toyMC)
median expected limit: r < 4.056 @ 95%CL (1 toyMC)
   68% expected band : 4.056 < r < 4.056
   95% expected band : 4.056 < r < 4.056
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -215639916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.94021 +/- 0.00461876 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 2.94021 @ 95%CL (1 toyMC)
median expected limit: r < 2.94021 @ 95%CL (1 toyMC)
   68% expected band : 2.94021 < r < 2.94021
   95% expected band : 2.94021 < r < 2.94021
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1351801538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43143 +/- 0.0049945 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.43143 @ 95%CL (1 toyMC)
median expected limit: r < 2.43143 @ 95%CL (1 toyMC)
   68% expected band : 2.43143 < r < 2.43143
   95% expected band : 2.43143 < r < 2.43143
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -108658916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.48686 +/- 0.00505469 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.48686 @ 95%CL (1 toyMC)
median expected limit: r < 2.48686 @ 95%CL (1 toyMC)
   68% expected band : 2.48686 < r < 2.48686
   95% expected band : 2.48686 < r < 2.48686
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 261688538
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73941 +/- 0.00540766 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.73941 @ 95%CL (1 toyMC)
median expected limit: r < 1.73941 @ 95%CL (1 toyMC)
   68% expected band : 1.73941 < r < 1.73941
   95% expected band : 1.73941 < r < 1.73941
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1717386484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.87153 +/- 0.00423969 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.87153 @ 95%CL (1 toyMC)
median expected limit: r < 2.87153 @ 95%CL (1 toyMC)
   68% expected band : 2.87153 < r < 2.87153
   95% expected band : 2.87153 < r < 2.87153
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 421312432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.31114 +/- 0.004893 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.31114 @ 95%CL (1 toyMC)
median expected limit: r < 2.31114 @ 95%CL (1 toyMC)
   68% expected band : 2.31114 < r < 2.31114
   95% expected band : 2.31114 < r < 2.31114
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1846670509
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.67077 +/- 0.00550383 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.67077 @ 95%CL (1 toyMC)
median expected limit: r < 3.67077 @ 95%CL (1 toyMC)
   68% expected band : 3.67077 < r < 3.67077
   95% expected band : 3.67077 < r < 3.67077
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1984784316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.64951 +/- 0.00559389 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.64951 @ 95%CL (1 toyMC)
median expected limit: r < 3.64951 @ 95%CL (1 toyMC)
   68% expected band : 3.64951 < r < 3.64951
   95% expected band : 3.64951 < r < 3.64951
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1152467690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.9052 +/- 0.0055163 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.9052 @ 95%CL (1 toyMC)
median expected limit: r < 2.9052 @ 95%CL (1 toyMC)
   68% expected band : 2.9052 < r < 2.9052
   95% expected band : 2.9052 < r < 2.9052
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 439037031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05114 +/- 0.00334169 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.05114 @ 95%CL (1 toyMC)
median expected limit: r < 1.05114 @ 95%CL (1 toyMC)
   68% expected band : 1.05114 < r < 1.05114
   95% expected band : 1.05114 < r < 1.05114
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 48471666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.26627 +/- 0.00477892 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.26627 @ 95%CL (1 toyMC)
median expected limit: r < 2.26627 @ 95%CL (1 toyMC)
   68% expected band : 2.26627 < r < 2.26627
   95% expected band : 2.26627 < r < 2.26627
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2048057149
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52461 +/- 0.00624425 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.52461 @ 95%CL (1 toyMC)
median expected limit: r < 2.52461 @ 95%CL (1 toyMC)
   68% expected band : 2.52461 < r < 2.52461
   95% expected band : 2.52461 < r < 2.52461
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 542029429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.05749 +/- 0.00298542 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.05749 @ 95%CL (1 toyMC)
median expected limit: r < 2.05749 @ 95%CL (1 toyMC)
   68% expected band : 2.05749 < r < 2.05749
   95% expected band : 2.05749 < r < 2.05749
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1093546356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80465 +/- 0.00475691 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.80465 @ 95%CL (1 toyMC)
median expected limit: r < 1.80465 @ 95%CL (1 toyMC)
   68% expected band : 1.80465 < r < 1.80465
   95% expected band : 1.80465 < r < 1.80465
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 440103756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13008 +/- 0.00543458 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.13008 @ 95%CL (1 toyMC)
median expected limit: r < 2.13008 @ 95%CL (1 toyMC)
   68% expected band : 2.13008 < r < 2.13008
   95% expected band : 2.13008 < r < 2.13008
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -639438024
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.02377 +/- 0.00619056 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.02377 @ 95%CL (1 toyMC)
median expected limit: r < 3.02377 @ 95%CL (1 toyMC)
   68% expected band : 3.02377 < r < 3.02377
   95% expected band : 3.02377 < r < 3.02377
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1547961515
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67881 +/- 0.0049862 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.67881 @ 95%CL (1 toyMC)
median expected limit: r < 1.67881 @ 95%CL (1 toyMC)
   68% expected band : 1.67881 < r < 1.67881
   95% expected band : 1.67881 < r < 1.67881
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -56797010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.68092 +/- 0.00475959 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.68092 @ 95%CL (1 toyMC)
median expected limit: r < 1.68092 @ 95%CL (1 toyMC)
   68% expected band : 1.68092 < r < 1.68092
   95% expected band : 1.68092 < r < 1.68092
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2027262117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.29905 +/- 0.0046258 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.29905 @ 95%CL (1 toyMC)
median expected limit: r < 3.29905 @ 95%CL (1 toyMC)
   68% expected band : 3.29905 < r < 3.29905
   95% expected band : 3.29905 < r < 3.29905
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 157736942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70964 +/- 0.00411454 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.70964 @ 95%CL (1 toyMC)
median expected limit: r < 1.70964 @ 95%CL (1 toyMC)
   68% expected band : 1.70964 < r < 1.70964
   95% expected band : 1.70964 < r < 1.70964
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1386635685
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.81916 +/- 0.0068088 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.47 min (real)
mean   expected limit: r < 5.81916 @ 95%CL (1 toyMC)
median expected limit: r < 5.81916 @ 95%CL (1 toyMC)
   68% expected band : 5.81916 < r < 5.81916
   95% expected band : 5.81916 < r < 5.81916
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 939376579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.37368 +/- 0.00511168 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.47 min (real)
mean   expected limit: r < 3.37368 @ 95%CL (1 toyMC)
median expected limit: r < 3.37368 @ 95%CL (1 toyMC)
   68% expected band : 3.37368 < r < 3.37368
   95% expected band : 3.37368 < r < 3.37368
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1475132532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.96095 +/- 0.00757396 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.47 min (real)
mean   expected limit: r < 3.96095 @ 95%CL (1 toyMC)
median expected limit: r < 3.96095 @ 95%CL (1 toyMC)
   68% expected band : 3.96095 < r < 3.96095
   95% expected band : 3.96095 < r < 3.96095
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1878224935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8008 +/- 0.00457337 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.8008 @ 95%CL (1 toyMC)
median expected limit: r < 1.8008 @ 95%CL (1 toyMC)
   68% expected band : 1.8008 < r < 1.8008
   95% expected band : 1.8008 < r < 1.8008
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 248527775
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.62444 +/- 0.00660686 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.62444 @ 95%CL (1 toyMC)
median expected limit: r < 3.62444 @ 95%CL (1 toyMC)
   68% expected band : 3.62444 < r < 3.62444
   95% expected band : 3.62444 < r < 3.62444
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2095813412
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77972 +/- 0.00508889 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.77972 @ 95%CL (1 toyMC)
median expected limit: r < 2.77972 @ 95%CL (1 toyMC)
   68% expected band : 2.77972 < r < 2.77972
   95% expected band : 2.77972 < r < 2.77972
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -261880058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.86729 +/- 0.00425047 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.86729 @ 95%CL (1 toyMC)
median expected limit: r < 1.86729 @ 95%CL (1 toyMC)
   68% expected band : 1.86729 < r < 1.86729
   95% expected band : 1.86729 < r < 1.86729
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 773962587
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98388 +/- 0.0050515 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.98388 @ 95%CL (1 toyMC)
median expected limit: r < 2.98388 @ 95%CL (1 toyMC)
   68% expected band : 2.98388 < r < 2.98388
   95% expected band : 2.98388 < r < 2.98388
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1848109984
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.41773 +/- 0.00477541 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.41773 @ 95%CL (1 toyMC)
median expected limit: r < 2.41773 @ 95%CL (1 toyMC)
   68% expected band : 2.41773 < r < 2.41773
   95% expected band : 2.41773 < r < 2.41773
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1438151285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88585 +/- 0.00480113 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.88585 @ 95%CL (1 toyMC)
median expected limit: r < 2.88585 @ 95%CL (1 toyMC)
   68% expected band : 2.88585 < r < 2.88585
   95% expected band : 2.88585 < r < 2.88585
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 267926987
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.75242 +/- 0.00439874 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.75242 @ 95%CL (1 toyMC)
median expected limit: r < 1.75242 @ 95%CL (1 toyMC)
   68% expected band : 1.75242 < r < 1.75242
   95% expected band : 1.75242 < r < 1.75242
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 631605736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46857 +/- 0.0046584 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.46857 @ 95%CL (1 toyMC)
median expected limit: r < 2.46857 @ 95%CL (1 toyMC)
   68% expected band : 2.46857 < r < 2.46857
   95% expected band : 2.46857 < r < 2.46857
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1866788771
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.47725 +/- 0.00513262 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.47725 @ 95%CL (1 toyMC)
median expected limit: r < 1.47725 @ 95%CL (1 toyMC)
   68% expected band : 1.47725 < r < 1.47725
   95% expected band : 1.47725 < r < 1.47725
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1791316831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65221 +/- 0.00418036 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.65221 @ 95%CL (1 toyMC)
median expected limit: r < 1.65221 @ 95%CL (1 toyMC)
   68% expected band : 1.65221 < r < 1.65221
   95% expected band : 1.65221 < r < 1.65221
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -442231529
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4553 +/- 0.00473768 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.4553 @ 95%CL (1 toyMC)
median expected limit: r < 1.4553 @ 95%CL (1 toyMC)
   68% expected band : 1.4553 < r < 1.4553
   95% expected band : 1.4553 < r < 1.4553
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1494937162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.65315 +/- 0.00501289 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.65315 @ 95%CL (1 toyMC)
median expected limit: r < 2.65315 @ 95%CL (1 toyMC)
   68% expected band : 2.65315 < r < 2.65315
   95% expected band : 2.65315 < r < 2.65315
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1467160286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85333 +/- 0.00503944 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.85333 @ 95%CL (1 toyMC)
median expected limit: r < 1.85333 @ 95%CL (1 toyMC)
   68% expected band : 1.85333 < r < 1.85333
   95% expected band : 1.85333 < r < 1.85333
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1312479721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46822 +/- 0.00524009 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.46822 @ 95%CL (1 toyMC)
median expected limit: r < 2.46822 @ 95%CL (1 toyMC)
   68% expected band : 2.46822 < r < 2.46822
   95% expected band : 2.46822 < r < 2.46822
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 909289169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.80874 +/- 0.00576733 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 3.80874 @ 95%CL (1 toyMC)
median expected limit: r < 3.80874 @ 95%CL (1 toyMC)
   68% expected band : 3.80874 < r < 3.80874
   95% expected band : 3.80874 < r < 3.80874
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 303487062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.61797 +/- 0.00503075 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.61797 @ 95%CL (1 toyMC)
median expected limit: r < 2.61797 @ 95%CL (1 toyMC)
   68% expected band : 2.61797 < r < 2.61797
   95% expected band : 2.61797 < r < 2.61797
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1074702072
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91672 +/- 0.00676362 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.91672 @ 95%CL (1 toyMC)
median expected limit: r < 3.91672 @ 95%CL (1 toyMC)
   68% expected band : 3.91672 < r < 3.91672
   95% expected band : 3.91672 < r < 3.91672
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -338151833
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.1318 +/- 0.00599294 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.1318 @ 95%CL (1 toyMC)
median expected limit: r < 2.1318 @ 95%CL (1 toyMC)
   68% expected band : 2.1318 < r < 2.1318
   95% expected band : 2.1318 < r < 2.1318
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2113948482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.41982 +/- 0.0041631 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.41982 @ 95%CL (1 toyMC)
median expected limit: r < 3.41982 @ 95%CL (1 toyMC)
   68% expected band : 3.41982 < r < 3.41982
   95% expected band : 3.41982 < r < 3.41982
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -289298777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.25503 +/- 0.00476836 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.25503 @ 95%CL (1 toyMC)
median expected limit: r < 2.25503 @ 95%CL (1 toyMC)
   68% expected band : 2.25503 < r < 2.25503
   95% expected band : 2.25503 < r < 2.25503
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1740560931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2197 +/- 0.00497324 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.2197 @ 95%CL (1 toyMC)
median expected limit: r < 3.2197 @ 95%CL (1 toyMC)
   68% expected band : 3.2197 < r < 3.2197
   95% expected band : 3.2197 < r < 3.2197
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1572882380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39496 +/- 0.00516635 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.39496 @ 95%CL (1 toyMC)
median expected limit: r < 2.39496 @ 95%CL (1 toyMC)
   68% expected band : 2.39496 < r < 2.39496
   95% expected band : 2.39496 < r < 2.39496
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2028981201
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59218 +/- 0.0045224 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.59218 @ 95%CL (1 toyMC)
median expected limit: r < 1.59218 @ 95%CL (1 toyMC)
   68% expected band : 1.59218 < r < 1.59218
   95% expected band : 1.59218 < r < 1.59218
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1735334539
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13186 +/- 0.00428074 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.13186 @ 95%CL (1 toyMC)
median expected limit: r < 2.13186 @ 95%CL (1 toyMC)
   68% expected band : 2.13186 < r < 2.13186
   95% expected band : 2.13186 < r < 2.13186
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2106866396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.48117 +/- 0.00524241 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 4.48117 @ 95%CL (1 toyMC)
median expected limit: r < 4.48117 @ 95%CL (1 toyMC)
   68% expected band : 4.48117 < r < 4.48117
   95% expected band : 4.48117 < r < 4.48117
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -660149859
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63287 +/- 0.00460093 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.63287 @ 95%CL (1 toyMC)
median expected limit: r < 1.63287 @ 95%CL (1 toyMC)
   68% expected band : 1.63287 < r < 1.63287
   95% expected band : 1.63287 < r < 1.63287
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -787599787
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36535 +/- 0.00426 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.36535 @ 95%CL (1 toyMC)
median expected limit: r < 1.36535 @ 95%CL (1 toyMC)
   68% expected band : 1.36535 < r < 1.36535
   95% expected band : 1.36535 < r < 1.36535
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -821353832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.9552 +/- 0.00611937 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.9552 @ 95%CL (1 toyMC)
median expected limit: r < 3.9552 @ 95%CL (1 toyMC)
   68% expected band : 3.9552 < r < 3.9552
   95% expected band : 3.9552 < r < 3.9552
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 638955390
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.94364 +/- 0.00510594 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.94364 @ 95%CL (1 toyMC)
median expected limit: r < 3.94364 @ 95%CL (1 toyMC)
   68% expected band : 3.94364 < r < 3.94364
   95% expected band : 3.94364 < r < 3.94364
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 96112011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.7898 +/- 0.00415834 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.7898 @ 95%CL (1 toyMC)
median expected limit: r < 1.7898 @ 95%CL (1 toyMC)
   68% expected band : 1.7898 < r < 1.7898
   95% expected band : 1.7898 < r < 1.7898
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1507896510
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.08672 +/- 0.00567104 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.08672 @ 95%CL (1 toyMC)
median expected limit: r < 3.08672 @ 95%CL (1 toyMC)
   68% expected band : 3.08672 < r < 3.08672
   95% expected band : 3.08672 < r < 3.08672
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1531277743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.22684 +/- 0.00604113 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 4.22684 @ 95%CL (1 toyMC)
median expected limit: r < 4.22684 @ 95%CL (1 toyMC)
   68% expected band : 4.22684 < r < 4.22684
   95% expected band : 4.22684 < r < 4.22684
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -600925182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.76806 +/- 0.00789289 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.47 min (real)
mean   expected limit: r < 4.76806 @ 95%CL (1 toyMC)
median expected limit: r < 4.76806 @ 95%CL (1 toyMC)
   68% expected band : 4.76806 < r < 4.76806
   95% expected band : 4.76806 < r < 4.76806
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1471106102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.48384 +/- 0.00472723 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.48384 @ 95%CL (1 toyMC)
median expected limit: r < 2.48384 @ 95%CL (1 toyMC)
   68% expected band : 2.48384 < r < 2.48384
   95% expected band : 2.48384 < r < 2.48384
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2116018305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.02905 +/- 0.00472047 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.02905 @ 95%CL (1 toyMC)
median expected limit: r < 2.02905 @ 95%CL (1 toyMC)
   68% expected band : 2.02905 < r < 2.02905
   95% expected band : 2.02905 < r < 2.02905
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1372256026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.88605 +/- 0.0040962 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.88605 @ 95%CL (1 toyMC)
median expected limit: r < 1.88605 @ 95%CL (1 toyMC)
   68% expected band : 1.88605 < r < 1.88605
   95% expected band : 1.88605 < r < 1.88605
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1715076831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07152 +/- 0.00504159 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.07152 @ 95%CL (1 toyMC)
median expected limit: r < 2.07152 @ 95%CL (1 toyMC)
   68% expected band : 2.07152 < r < 2.07152
   95% expected band : 2.07152 < r < 2.07152
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1952231595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77316 +/- 0.00513224 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.77316 @ 95%CL (1 toyMC)
median expected limit: r < 2.77316 @ 95%CL (1 toyMC)
   68% expected band : 2.77316 < r < 2.77316
   95% expected band : 2.77316 < r < 2.77316
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -466813213
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78882 +/- 0.00520745 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.78882 @ 95%CL (1 toyMC)
median expected limit: r < 1.78882 @ 95%CL (1 toyMC)
   68% expected band : 1.78882 < r < 1.78882
   95% expected band : 1.78882 < r < 1.78882
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1238134229
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.3041 +/- 0.00656016 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 5.3041 @ 95%CL (1 toyMC)
median expected limit: r < 5.3041 @ 95%CL (1 toyMC)
   68% expected band : 5.3041 < r < 5.3041
   95% expected band : 5.3041 < r < 5.3041
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1985653428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.08175 +/- 0.00443617 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.08175 @ 95%CL (1 toyMC)
median expected limit: r < 2.08175 @ 95%CL (1 toyMC)
   68% expected band : 2.08175 < r < 2.08175
   95% expected band : 2.08175 < r < 2.08175
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 671450120
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67937 +/- 0.00611415 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.67937 @ 95%CL (1 toyMC)
median expected limit: r < 2.67937 @ 95%CL (1 toyMC)
   68% expected band : 2.67937 < r < 2.67937
   95% expected band : 2.67937 < r < 2.67937
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -10991926
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.19238 +/- 0.00533812 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.19238 @ 95%CL (1 toyMC)
median expected limit: r < 2.19238 @ 95%CL (1 toyMC)
   68% expected band : 2.19238 < r < 2.19238
   95% expected band : 2.19238 < r < 2.19238
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 135946172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2381 +/- 0.00447703 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.2381 @ 95%CL (1 toyMC)
median expected limit: r < 2.2381 @ 95%CL (1 toyMC)
   68% expected band : 2.2381 < r < 2.2381
   95% expected band : 2.2381 < r < 2.2381
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1778133278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17722 +/- 0.00446191 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.17722 @ 95%CL (1 toyMC)
median expected limit: r < 1.17722 @ 95%CL (1 toyMC)
   68% expected band : 1.17722 < r < 1.17722
   95% expected band : 1.17722 < r < 1.17722
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1674512396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92428 +/- 0.00453449 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 1.92428 @ 95%CL (1 toyMC)
median expected limit: r < 1.92428 @ 95%CL (1 toyMC)
   68% expected band : 1.92428 < r < 1.92428
   95% expected band : 1.92428 < r < 1.92428
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1738052457
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74177 +/- 0.00572149 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.74177 @ 95%CL (1 toyMC)
median expected limit: r < 1.74177 @ 95%CL (1 toyMC)
   68% expected band : 1.74177 < r < 1.74177
   95% expected band : 1.74177 < r < 1.74177
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1876485662
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.40221 +/- 0.00367514 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.40221 @ 95%CL (1 toyMC)
median expected limit: r < 2.40221 @ 95%CL (1 toyMC)
   68% expected band : 2.40221 < r < 2.40221
   95% expected band : 2.40221 < r < 2.40221
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 278978841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45183 +/- 0.00526463 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.45183 @ 95%CL (1 toyMC)
median expected limit: r < 1.45183 @ 95%CL (1 toyMC)
   68% expected band : 1.45183 < r < 1.45183
   95% expected band : 1.45183 < r < 1.45183
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -117942361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4466 +/- 0.00568782 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.4466 @ 95%CL (1 toyMC)
median expected limit: r < 2.4466 @ 95%CL (1 toyMC)
   68% expected band : 2.4466 < r < 2.4466
   95% expected band : 2.4466 < r < 2.4466
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1719620809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23527 +/- 0.00522337 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.23527 @ 95%CL (1 toyMC)
median expected limit: r < 3.23527 @ 95%CL (1 toyMC)
   68% expected band : 3.23527 < r < 3.23527
   95% expected band : 3.23527 < r < 3.23527
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -423154106
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39659 +/- 0.00489357 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.39659 @ 95%CL (1 toyMC)
median expected limit: r < 2.39659 @ 95%CL (1 toyMC)
   68% expected band : 2.39659 < r < 2.39659
   95% expected band : 2.39659 < r < 2.39659
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 75920822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93892 +/- 0.00677963 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.93892 @ 95%CL (1 toyMC)
median expected limit: r < 2.93892 @ 95%CL (1 toyMC)
   68% expected band : 2.93892 < r < 2.93892
   95% expected band : 2.93892 < r < 2.93892
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 117465023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.29228 +/- 0.00479416 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.29228 @ 95%CL (1 toyMC)
median expected limit: r < 3.29228 @ 95%CL (1 toyMC)
   68% expected band : 3.29228 < r < 3.29228
   95% expected band : 3.29228 < r < 3.29228
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1994142478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.52476 +/- 0.00561973 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.52476 @ 95%CL (1 toyMC)
median expected limit: r < 2.52476 @ 95%CL (1 toyMC)
   68% expected band : 2.52476 < r < 2.52476
   95% expected band : 2.52476 < r < 2.52476
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1586120026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.41475 +/- 0.00632528 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.41475 @ 95%CL (1 toyMC)
median expected limit: r < 2.41475 @ 95%CL (1 toyMC)
   68% expected band : 2.41475 < r < 2.41475
   95% expected band : 2.41475 < r < 2.41475
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 390181904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.08394 +/- 0.00491596 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 4.08394 @ 95%CL (1 toyMC)
median expected limit: r < 4.08394 @ 95%CL (1 toyMC)
   68% expected band : 4.08394 < r < 4.08394
   95% expected band : 4.08394 < r < 4.08394
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2144616206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43079 +/- 0.00512161 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.43079 @ 95%CL (1 toyMC)
median expected limit: r < 2.43079 @ 95%CL (1 toyMC)
   68% expected band : 2.43079 < r < 2.43079
   95% expected band : 2.43079 < r < 2.43079
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1508610430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70594 +/- 0.00567133 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.70594 @ 95%CL (1 toyMC)
median expected limit: r < 1.70594 @ 95%CL (1 toyMC)
   68% expected band : 1.70594 < r < 1.70594
   95% expected band : 1.70594 < r < 1.70594
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1026673220
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81875 +/- 0.00445695 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.81875 @ 95%CL (1 toyMC)
median expected limit: r < 1.81875 @ 95%CL (1 toyMC)
   68% expected band : 1.81875 < r < 1.81875
   95% expected band : 1.81875 < r < 1.81875
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1697933723
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.87948 +/- 0.00427175 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.87948 @ 95%CL (1 toyMC)
median expected limit: r < 1.87948 @ 95%CL (1 toyMC)
   68% expected band : 1.87948 < r < 1.87948
   95% expected band : 1.87948 < r < 1.87948
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -996260434
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.2211 +/- 0.00539265 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 4.2211 @ 95%CL (1 toyMC)
median expected limit: r < 4.2211 @ 95%CL (1 toyMC)
   68% expected band : 4.2211 < r < 4.2211
   95% expected band : 4.2211 < r < 4.2211
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -845877572
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39842 +/- 0.00536492 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.39842 @ 95%CL (1 toyMC)
median expected limit: r < 2.39842 @ 95%CL (1 toyMC)
   68% expected band : 2.39842 < r < 2.39842
   95% expected band : 2.39842 < r < 2.39842
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1719217112
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.43975 +/- 0.00404574 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.43975 @ 95%CL (1 toyMC)
median expected limit: r < 2.43975 @ 95%CL (1 toyMC)
   68% expected band : 2.43975 < r < 2.43975
   95% expected band : 2.43975 < r < 2.43975
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2099655844
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.85792 +/- 0.00638656 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.85792 @ 95%CL (1 toyMC)
median expected limit: r < 3.85792 @ 95%CL (1 toyMC)
   68% expected band : 3.85792 < r < 3.85792
   95% expected band : 3.85792 < r < 3.85792
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 339537477
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59002 +/- 0.00553812 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.59002 @ 95%CL (1 toyMC)
median expected limit: r < 2.59002 @ 95%CL (1 toyMC)
   68% expected band : 2.59002 < r < 2.59002
   95% expected band : 2.59002 < r < 2.59002
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 160554596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.239 +/- 0.00474988 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.239 @ 95%CL (1 toyMC)
median expected limit: r < 2.239 @ 95%CL (1 toyMC)
   68% expected band : 2.239 < r < 2.239
   95% expected band : 2.239 < r < 2.239
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1792195435
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.47641 +/- 0.0067233 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 4.47641 @ 95%CL (1 toyMC)
median expected limit: r < 4.47641 @ 95%CL (1 toyMC)
   68% expected band : 4.47641 < r < 4.47641
   95% expected band : 4.47641 < r < 4.47641
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -630017782
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50779 +/- 0.00387685 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.50779 @ 95%CL (1 toyMC)
median expected limit: r < 2.50779 @ 95%CL (1 toyMC)
   68% expected band : 2.50779 < r < 2.50779
   95% expected band : 2.50779 < r < 2.50779
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1828674395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.11104 +/- 0.00473718 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.11104 @ 95%CL (1 toyMC)
median expected limit: r < 2.11104 @ 95%CL (1 toyMC)
   68% expected band : 2.11104 < r < 2.11104
   95% expected band : 2.11104 < r < 2.11104
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine40.MarkovChainMC.mH40.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH40.-1026673220.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH40.-1074702072.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH40.-108658916.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH40.-10991926.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH40.-117942361.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH40.-1238134229.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH40.-1257473536.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH40.-1294295367.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH40.-1351801538.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH40.-1438151285.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH40.-1475132532.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH40.-1507896510.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH40.-1531277743.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH40.-1567693850.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH40.-1572882380.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH40.-1586120026.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH40.-1674512396.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH40.-1715076831.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH40.-1719217112.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH40.-1719620809.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH40.-1735334539.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH40.-1791316831.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH40.-1848109984.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH40.-1876485662.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH40.-1878224935.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH40.-1984784316.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH40.-1994142478.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH40.-2027262117.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH40.-2048057149.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH40.-2095813412.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH40.-2116018305.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH40.-215639916.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH40.-261880058.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH40.-289298777.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH40.-338151833.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH40.-423154106.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH40.-442231529.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH40.-466813213.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH40.-56797010.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH40.-600925182.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH40.-630017782.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH40.-639438024.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH40.-660149859.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH40.-787599787.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH40.-814806835.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH40.-821353832.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH40.-845877572.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH40.-996260434.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH40.1093546356.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH40.1152467690.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH40.117465023.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH40.1312479721.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH40.135946172.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH40.1372256026.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH40.1386635685.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH40.1467160286.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH40.1471106102.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH40.1494937162.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH40.1508610430.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH40.1547961515.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH40.157736942.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH40.160554596.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH40.1697933723.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH40.1717386484.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH40.1738052457.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH40.1740560931.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH40.1778133278.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH40.1792195435.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH40.1810585003.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH40.1828674395.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH40.1846670509.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH40.1866788771.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH40.1915123840.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH40.1952231595.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH40.1985653428.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH40.2028981201.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH40.2099655844.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH40.2106866396.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH40.2113948482.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH40.2144616206.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH40.248527775.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH40.261688538.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH40.267926987.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH40.278978841.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH40.303487062.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH40.339537477.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH40.390181904.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH40.421312432.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH40.439037031.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH40.440103756.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH40.48471666.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH40.542029429.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH40.631605736.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH40.638955390.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH40.671450120.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH40.75920822.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH40.773962587.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH40.909289169.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH40.939376579.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH40.96112011.root
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/toys
