 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1172094403
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.344587 +/- 0.0023707 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.344587 @ 95%CL (1 toyMC)
median expected limit: r < 0.344587 @ 95%CL (1 toyMC)
   68% expected band : 0.344587 < r < 0.344587
   95% expected band : 0.344587 < r < 0.344587
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -715461960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.670346 +/- 0.00219679 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.670346 @ 95%CL (1 toyMC)
median expected limit: r < 0.670346 @ 95%CL (1 toyMC)
   68% expected band : 0.670346 < r < 0.670346
   95% expected band : 0.670346 < r < 0.670346
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 147158494
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.234343 +/- 0.00262745 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.234343 @ 95%CL (1 toyMC)
median expected limit: r < 0.234343 @ 95%CL (1 toyMC)
   68% expected band : 0.234343 < r < 0.234343
   95% expected band : 0.234343 < r < 0.234343
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1564308901
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.359763 +/- 0.00231621 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.359763 @ 95%CL (1 toyMC)
median expected limit: r < 0.359763 @ 95%CL (1 toyMC)
   68% expected band : 0.359763 < r < 0.359763
   95% expected band : 0.359763 < r < 0.359763
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1602177158
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.615108 +/- 0.00241343 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.615108 @ 95%CL (1 toyMC)
median expected limit: r < 0.615108 @ 95%CL (1 toyMC)
   68% expected band : 0.615108 < r < 0.615108
   95% expected band : 0.615108 < r < 0.615108
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1742759257
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.221691 +/- 0.00218004 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.221691 @ 95%CL (1 toyMC)
median expected limit: r < 0.221691 @ 95%CL (1 toyMC)
   68% expected band : 0.221691 < r < 0.221691
   95% expected band : 0.221691 < r < 0.221691
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1278547194
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186155 +/- 0.00219499 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.186155 @ 95%CL (1 toyMC)
median expected limit: r < 0.186155 @ 95%CL (1 toyMC)
   68% expected band : 0.186155 < r < 0.186155
   95% expected band : 0.186155 < r < 0.186155
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1710076620
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213364 +/- 0.00264823 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.213364 @ 95%CL (1 toyMC)
median expected limit: r < 0.213364 @ 95%CL (1 toyMC)
   68% expected band : 0.213364 < r < 0.213364
   95% expected band : 0.213364 < r < 0.213364
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1015051230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.24731 +/- 0.00240013 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.24731 @ 95%CL (1 toyMC)
median expected limit: r < 0.24731 @ 95%CL (1 toyMC)
   68% expected band : 0.24731 < r < 0.24731
   95% expected band : 0.24731 < r < 0.24731
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1503696883
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.174062 +/- 0.00334781 @ 95% CL (96 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.174062 @ 95%CL (1 toyMC)
median expected limit: r < 0.174062 @ 95%CL (1 toyMC)
   68% expected band : 0.174062 < r < 0.174062
   95% expected band : 0.174062 < r < 0.174062
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 399534199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.152579 +/- 0.00577752 @ 95% CL (66 tries)
Done in 3.24 min (cpu), 3.25 min (real)
mean   expected limit: r < 0.152579 @ 95%CL (1 toyMC)
median expected limit: r < 0.152579 @ 95%CL (1 toyMC)
   68% expected band : 0.152579 < r < 0.152579
   95% expected band : 0.152579 < r < 0.152579
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1113060199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.319183 +/- 0.00267108 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.319183 @ 95%CL (1 toyMC)
median expected limit: r < 0.319183 @ 95%CL (1 toyMC)
   68% expected band : 0.319183 < r < 0.319183
   95% expected band : 0.319183 < r < 0.319183
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1105821467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.20958 +/- 0.00282175 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.20958 @ 95%CL (1 toyMC)
median expected limit: r < 0.20958 @ 95%CL (1 toyMC)
   68% expected band : 0.20958 < r < 0.20958
   95% expected band : 0.20958 < r < 0.20958
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 987938696
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.274466 +/- 0.00250856 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.274466 @ 95%CL (1 toyMC)
median expected limit: r < 0.274466 @ 95%CL (1 toyMC)
   68% expected band : 0.274466 < r < 0.274466
   95% expected band : 0.274466 < r < 0.274466
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1902340725
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.246522 +/- 0.00306876 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.246522 @ 95%CL (1 toyMC)
median expected limit: r < 0.246522 @ 95%CL (1 toyMC)
   68% expected band : 0.246522 < r < 0.246522
   95% expected band : 0.246522 < r < 0.246522
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1318895241
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243086 +/- 0.00254586 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.243086 @ 95%CL (1 toyMC)
median expected limit: r < 0.243086 @ 95%CL (1 toyMC)
   68% expected band : 0.243086 < r < 0.243086
   95% expected band : 0.243086 < r < 0.243086
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1195297667
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26552 +/- 0.00241184 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.26552 @ 95%CL (1 toyMC)
median expected limit: r < 0.26552 @ 95%CL (1 toyMC)
   68% expected band : 0.26552 < r < 0.26552
   95% expected band : 0.26552 < r < 0.26552
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1288990379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.438116 +/- 0.00248031 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.438116 @ 95%CL (1 toyMC)
median expected limit: r < 0.438116 @ 95%CL (1 toyMC)
   68% expected band : 0.438116 < r < 0.438116
   95% expected band : 0.438116 < r < 0.438116
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 877087777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195082 +/- 0.00284545 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.195082 @ 95%CL (1 toyMC)
median expected limit: r < 0.195082 @ 95%CL (1 toyMC)
   68% expected band : 0.195082 < r < 0.195082
   95% expected band : 0.195082 < r < 0.195082
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1695527588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.154784 +/- 0.00400745 @ 95% CL (96 tries)
Done in 0.49 min (cpu), 0.50 min (real)
mean   expected limit: r < 0.154784 @ 95%CL (1 toyMC)
median expected limit: r < 0.154784 @ 95%CL (1 toyMC)
   68% expected band : 0.154784 < r < 0.154784
   95% expected band : 0.154784 < r < 0.154784
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -522175399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.435747 +/- 0.00170708 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.435747 @ 95%CL (1 toyMC)
median expected limit: r < 0.435747 @ 95%CL (1 toyMC)
   68% expected band : 0.435747 < r < 0.435747
   95% expected band : 0.435747 < r < 0.435747
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1044445420
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.3445 +/- 2.20698 @ 95% CL (9 tries)
Done in 12.00 min (cpu), 12.06 min (real)
mean   expected limit: r < 2.3445 @ 95%CL (1 toyMC)
median expected limit: r < 2.3445 @ 95%CL (1 toyMC)
   68% expected band : 2.3445 < r < 2.3445
   95% expected band : 2.3445 < r < 2.3445
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -949238822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236373 +/- 0.00265929 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.236373 @ 95%CL (1 toyMC)
median expected limit: r < 0.236373 @ 95%CL (1 toyMC)
   68% expected band : 0.236373 < r < 0.236373
   95% expected band : 0.236373 < r < 0.236373
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 627655911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.2763 +/- 0.00307883 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.2763 @ 95%CL (1 toyMC)
median expected limit: r < 0.2763 @ 95%CL (1 toyMC)
   68% expected band : 0.2763 < r < 0.2763
   95% expected band : 0.2763 < r < 0.2763
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 940054165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.205274 +/- 0.00279913 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.205274 @ 95%CL (1 toyMC)
median expected limit: r < 0.205274 @ 95%CL (1 toyMC)
   68% expected band : 0.205274 < r < 0.205274
   95% expected band : 0.205274 < r < 0.205274
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 689885971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.222431 +/- 0.00295255 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.222431 @ 95%CL (1 toyMC)
median expected limit: r < 0.222431 @ 95%CL (1 toyMC)
   68% expected band : 0.222431 < r < 0.222431
   95% expected band : 0.222431 < r < 0.222431
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1757752493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.478998 +/- 0.00234202 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.478998 @ 95%CL (1 toyMC)
median expected limit: r < 0.478998 @ 95%CL (1 toyMC)
   68% expected band : 0.478998 < r < 0.478998
   95% expected band : 0.478998 < r < 0.478998
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 157614671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.317795 +/- 0.00306247 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.317795 @ 95%CL (1 toyMC)
median expected limit: r < 0.317795 @ 95%CL (1 toyMC)
   68% expected band : 0.317795 < r < 0.317795
   95% expected band : 0.317795 < r < 0.317795
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1585517772
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.310866 +/- 0.00212911 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.310866 @ 95%CL (1 toyMC)
median expected limit: r < 0.310866 @ 95%CL (1 toyMC)
   68% expected band : 0.310866 < r < 0.310866
   95% expected band : 0.310866 < r < 0.310866
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1360064523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.16898 +/- 0.00289153 @ 95% CL (97 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.16898 @ 95%CL (1 toyMC)
median expected limit: r < 0.16898 @ 95%CL (1 toyMC)
   68% expected band : 0.16898 < r < 0.16898
   95% expected band : 0.16898 < r < 0.16898
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1494471519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.261785 +/- 0.00284316 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.261785 @ 95%CL (1 toyMC)
median expected limit: r < 0.261785 @ 95%CL (1 toyMC)
   68% expected band : 0.261785 < r < 0.261785
   95% expected band : 0.261785 < r < 0.261785
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 662330975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338996 +/- 0.00237127 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.338996 @ 95%CL (1 toyMC)
median expected limit: r < 0.338996 @ 95%CL (1 toyMC)
   68% expected band : 0.338996 < r < 0.338996
   95% expected band : 0.338996 < r < 0.338996
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1327348845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235689 +/- 0.00255883 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.235689 @ 95%CL (1 toyMC)
median expected limit: r < 0.235689 @ 95%CL (1 toyMC)
   68% expected band : 0.235689 < r < 0.235689
   95% expected band : 0.235689 < r < 0.235689
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -444613799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.271187 +/- 0.00286695 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.271187 @ 95%CL (1 toyMC)
median expected limit: r < 0.271187 @ 95%CL (1 toyMC)
   68% expected band : 0.271187 < r < 0.271187
   95% expected band : 0.271187 < r < 0.271187
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1085980595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.311117 +/- 0.00260383 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.311117 @ 95%CL (1 toyMC)
median expected limit: r < 0.311117 @ 95%CL (1 toyMC)
   68% expected band : 0.311117 < r < 0.311117
   95% expected band : 0.311117 < r < 0.311117
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1430921942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312918 +/- 0.00221248 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.312918 @ 95%CL (1 toyMC)
median expected limit: r < 0.312918 @ 95%CL (1 toyMC)
   68% expected band : 0.312918 < r < 0.312918
   95% expected band : 0.312918 < r < 0.312918
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 866654302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247077 +/- 0.0021477 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.247077 @ 95%CL (1 toyMC)
median expected limit: r < 0.247077 @ 95%CL (1 toyMC)
   68% expected band : 0.247077 < r < 0.247077
   95% expected band : 0.247077 < r < 0.247077
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 417077431
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.124162 +/- 0.0131333 @ 95% CL (18 tries)
Done in 10.91 min (cpu), 10.97 min (real)
mean   expected limit: r < 0.124162 @ 95%CL (1 toyMC)
median expected limit: r < 0.124162 @ 95%CL (1 toyMC)
   68% expected band : 0.124162 < r < 0.124162
   95% expected band : 0.124162 < r < 0.124162
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -168122129
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.172752 +/- 0.00588732 @ 95% CL (85 tries)
Done in 1.33 min (cpu), 1.34 min (real)
mean   expected limit: r < 0.172752 @ 95%CL (1 toyMC)
median expected limit: r < 0.172752 @ 95%CL (1 toyMC)
   68% expected band : 0.172752 < r < 0.172752
   95% expected band : 0.172752 < r < 0.172752
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1835623414
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.552491 +/- 0.00194148 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.552491 @ 95%CL (1 toyMC)
median expected limit: r < 0.552491 @ 95%CL (1 toyMC)
   68% expected band : 0.552491 < r < 0.552491
   95% expected band : 0.552491 < r < 0.552491
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1170107716
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.2981 +/- 0.00251434 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.2981 @ 95%CL (1 toyMC)
median expected limit: r < 0.2981 @ 95%CL (1 toyMC)
   68% expected band : 0.2981 < r < 0.2981
   95% expected band : 0.2981 < r < 0.2981
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -555014696
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.154147 +/- 0.00490022 @ 95% CL (81 tries)
Done in 1.24 min (cpu), 1.25 min (real)
mean   expected limit: r < 0.154147 @ 95%CL (1 toyMC)
median expected limit: r < 0.154147 @ 95%CL (1 toyMC)
   68% expected band : 0.154147 < r < 0.154147
   95% expected band : 0.154147 < r < 0.154147
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 261327933
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.238434 +/- 0.00246461 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.238434 @ 95%CL (1 toyMC)
median expected limit: r < 0.238434 @ 95%CL (1 toyMC)
   68% expected band : 0.238434 < r < 0.238434
   95% expected band : 0.238434 < r < 0.238434
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -990015137
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.3563 +/- 2.37512 @ 95% CL (16 tries)
Done in 10.55 min (cpu), 10.60 min (real)
mean   expected limit: r < 6.3563 @ 95%CL (1 toyMC)
median expected limit: r < 6.3563 @ 95%CL (1 toyMC)
   68% expected band : 6.3563 < r < 6.3563
   95% expected band : 6.3563 < r < 6.3563
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -551982629
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.392645 +/- 0.00245616 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.392645 @ 95%CL (1 toyMC)
median expected limit: r < 0.392645 @ 95%CL (1 toyMC)
   68% expected band : 0.392645 < r < 0.392645
   95% expected band : 0.392645 < r < 0.392645
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -392747140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.224135 +/- 0.0026118 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.224135 @ 95%CL (1 toyMC)
median expected limit: r < 0.224135 @ 95%CL (1 toyMC)
   68% expected band : 0.224135 < r < 0.224135
   95% expected band : 0.224135 < r < 0.224135
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1009665740
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.216122 +/- 0.00251652 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.216122 @ 95%CL (1 toyMC)
median expected limit: r < 0.216122 @ 95%CL (1 toyMC)
   68% expected band : 0.216122 < r < 0.216122
   95% expected band : 0.216122 < r < 0.216122
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -739438765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243285 +/- 0.00264653 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.243285 @ 95%CL (1 toyMC)
median expected limit: r < 0.243285 @ 95%CL (1 toyMC)
   68% expected band : 0.243285 < r < 0.243285
   95% expected band : 0.243285 < r < 0.243285
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1877516815
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.605847 +/- 0.00243001 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.605847 @ 95%CL (1 toyMC)
median expected limit: r < 0.605847 @ 95%CL (1 toyMC)
   68% expected band : 0.605847 < r < 0.605847
   95% expected band : 0.605847 < r < 0.605847
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -476584971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.240209 +/- 0.00233917 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.240209 @ 95%CL (1 toyMC)
median expected limit: r < 0.240209 @ 95%CL (1 toyMC)
   68% expected band : 0.240209 < r < 0.240209
   95% expected band : 0.240209 < r < 0.240209
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1792237777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195974 +/- 0.00256204 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.195974 @ 95%CL (1 toyMC)
median expected limit: r < 0.195974 @ 95%CL (1 toyMC)
   68% expected band : 0.195974 < r < 0.195974
   95% expected band : 0.195974 < r < 0.195974
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1068165594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194435 +/- 0.00362229 @ 95% CL (97 tries)
Done in 0.50 min (cpu), 0.51 min (real)
mean   expected limit: r < 0.194435 @ 95%CL (1 toyMC)
median expected limit: r < 0.194435 @ 95%CL (1 toyMC)
   68% expected band : 0.194435 < r < 0.194435
   95% expected band : 0.194435 < r < 0.194435
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -895232791
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.305476 +/- 0.00259513 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.305476 @ 95%CL (1 toyMC)
median expected limit: r < 0.305476 @ 95%CL (1 toyMC)
   68% expected band : 0.305476 < r < 0.305476
   95% expected band : 0.305476 < r < 0.305476
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1952017887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.222267 +/- 0.00261065 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.222267 @ 95%CL (1 toyMC)
median expected limit: r < 0.222267 @ 95%CL (1 toyMC)
   68% expected band : 0.222267 < r < 0.222267
   95% expected band : 0.222267 < r < 0.222267
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 759397590
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.179137 +/- 0.00320579 @ 95% CL (94 tries)
Done in 0.65 min (cpu), 0.66 min (real)
mean   expected limit: r < 0.179137 @ 95%CL (1 toyMC)
median expected limit: r < 0.179137 @ 95%CL (1 toyMC)
   68% expected band : 0.179137 < r < 0.179137
   95% expected band : 0.179137 < r < 0.179137
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1971315916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.227467 +/- 0.0030133 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.227467 @ 95%CL (1 toyMC)
median expected limit: r < 0.227467 @ 95%CL (1 toyMC)
   68% expected band : 0.227467 < r < 0.227467
   95% expected band : 0.227467 < r < 0.227467
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -976518658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.300527 +/- 0.00199621 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.300527 @ 95%CL (1 toyMC)
median expected limit: r < 0.300527 @ 95%CL (1 toyMC)
   68% expected band : 0.300527 < r < 0.300527
   95% expected band : 0.300527 < r < 0.300527
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1601303242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.196046 +/- 0.00269318 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.196046 @ 95%CL (1 toyMC)
median expected limit: r < 0.196046 @ 95%CL (1 toyMC)
   68% expected band : 0.196046 < r < 0.196046
   95% expected band : 0.196046 < r < 0.196046
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1950059691
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.359585 +/- 0.00158636 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.359585 @ 95%CL (1 toyMC)
median expected limit: r < 0.359585 @ 95%CL (1 toyMC)
   68% expected band : 0.359585 < r < 0.359585
   95% expected band : 0.359585 < r < 0.359585
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1128004105
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.345289 +/- 0.00246535 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.345289 @ 95%CL (1 toyMC)
median expected limit: r < 0.345289 @ 95%CL (1 toyMC)
   68% expected band : 0.345289 < r < 0.345289
   95% expected band : 0.345289 < r < 0.345289
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1495001401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.289963 +/- 0.00211772 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.289963 @ 95%CL (1 toyMC)
median expected limit: r < 0.289963 @ 95%CL (1 toyMC)
   68% expected band : 0.289963 < r < 0.289963
   95% expected band : 0.289963 < r < 0.289963
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -974161334
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.338341 +/- 0.00233732 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.338341 @ 95%CL (1 toyMC)
median expected limit: r < 0.338341 @ 95%CL (1 toyMC)
   68% expected band : 0.338341 < r < 0.338341
   95% expected band : 0.338341 < r < 0.338341
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1298754429
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.372076 +/- 0.00189812 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.372076 @ 95%CL (1 toyMC)
median expected limit: r < 0.372076 @ 95%CL (1 toyMC)
   68% expected band : 0.372076 < r < 0.372076
   95% expected band : 0.372076 < r < 0.372076
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -295716698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.328828 +/- 0.0023747 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.328828 @ 95%CL (1 toyMC)
median expected limit: r < 0.328828 @ 95%CL (1 toyMC)
   68% expected band : 0.328828 < r < 0.328828
   95% expected band : 0.328828 < r < 0.328828
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1228140034
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.7199 +/- 2.95396 @ 95% CL (18 tries)
Done in 10.75 min (cpu), 10.80 min (real)
mean   expected limit: r < 11.7199 @ 95%CL (1 toyMC)
median expected limit: r < 11.7199 @ 95%CL (1 toyMC)
   68% expected band : 11.7199 < r < 11.7199
   95% expected band : 11.7199 < r < 11.7199
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 388726162
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.69944 +/- 1.8204 @ 95% CL (26 tries)
Done in 10.08 min (cpu), 10.13 min (real)
mean   expected limit: r < 5.69944 @ 95%CL (1 toyMC)
median expected limit: r < 5.69944 @ 95%CL (1 toyMC)
   68% expected band : 5.69944 < r < 5.69944
   95% expected band : 5.69944 < r < 5.69944
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -59832385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.168843 +/- 0.00806006 @ 95% CL (51 tries)
Done in 5.76 min (cpu), 5.80 min (real)
mean   expected limit: r < 0.168843 @ 95%CL (1 toyMC)
median expected limit: r < 0.168843 @ 95%CL (1 toyMC)
   68% expected band : 0.168843 < r < 0.168843
   95% expected band : 0.168843 < r < 0.168843
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1176026942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248578 +/- 0.00218633 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.248578 @ 95%CL (1 toyMC)
median expected limit: r < 0.248578 @ 95%CL (1 toyMC)
   68% expected band : 0.248578 < r < 0.248578
   95% expected band : 0.248578 < r < 0.248578
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -707298302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.322132 +/- 0.00200538 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.322132 @ 95%CL (1 toyMC)
median expected limit: r < 0.322132 @ 95%CL (1 toyMC)
   68% expected band : 0.322132 < r < 0.322132
   95% expected band : 0.322132 < r < 0.322132
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1051266378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.17138 +/- 0.00251 @ 95% CL (99 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.17138 @ 95%CL (1 toyMC)
median expected limit: r < 0.17138 @ 95%CL (1 toyMC)
   68% expected band : 0.17138 < r < 0.17138
   95% expected band : 0.17138 < r < 0.17138
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 878230075
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.217597 +/- 0.00226786 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.217597 @ 95%CL (1 toyMC)
median expected limit: r < 0.217597 @ 95%CL (1 toyMC)
   68% expected band : 0.217597 < r < 0.217597
   95% expected band : 0.217597 < r < 0.217597
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1993261950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294644 +/- 0.00239308 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.294644 @ 95%CL (1 toyMC)
median expected limit: r < 0.294644 @ 95%CL (1 toyMC)
   68% expected band : 0.294644 < r < 0.294644
   95% expected band : 0.294644 < r < 0.294644
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -129588510
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.31564 +/- 0.00245238 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.31564 @ 95%CL (1 toyMC)
median expected limit: r < 0.31564 @ 95%CL (1 toyMC)
   68% expected band : 0.31564 < r < 0.31564
   95% expected band : 0.31564 < r < 0.31564
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1601981779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.248249 +/- 0.00208558 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.248249 @ 95%CL (1 toyMC)
median expected limit: r < 0.248249 @ 95%CL (1 toyMC)
   68% expected band : 0.248249 < r < 0.248249
   95% expected band : 0.248249 < r < 0.248249
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1492329491
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236267 +/- 0.00294484 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.236267 @ 95%CL (1 toyMC)
median expected limit: r < 0.236267 @ 95%CL (1 toyMC)
   68% expected band : 0.236267 < r < 0.236267
   95% expected band : 0.236267 < r < 0.236267
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 700058628
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.359206 +/- 0.00238889 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.359206 @ 95%CL (1 toyMC)
median expected limit: r < 0.359206 @ 95%CL (1 toyMC)
   68% expected band : 0.359206 < r < 0.359206
   95% expected band : 0.359206 < r < 0.359206
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1517904721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.168119 +/- 0.00731586 @ 95% CL (73 tries)
Done in 2.74 min (cpu), 2.75 min (real)
mean   expected limit: r < 0.168119 @ 95%CL (1 toyMC)
median expected limit: r < 0.168119 @ 95%CL (1 toyMC)
   68% expected band : 0.168119 < r < 0.168119
   95% expected band : 0.168119 < r < 0.168119
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 681830987
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329004 +/- 0.00199464 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.329004 @ 95%CL (1 toyMC)
median expected limit: r < 0.329004 @ 95%CL (1 toyMC)
   68% expected band : 0.329004 < r < 0.329004
   95% expected band : 0.329004 < r < 0.329004
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -165147283
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.193213 +/- 0.00328807 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.193213 @ 95%CL (1 toyMC)
median expected limit: r < 0.193213 @ 95%CL (1 toyMC)
   68% expected band : 0.193213 < r < 0.193213
   95% expected band : 0.193213 < r < 0.193213
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -100360828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.156823 +/- 0.00411411 @ 95% CL (88 tries)
Done in 0.67 min (cpu), 0.67 min (real)
mean   expected limit: r < 0.156823 @ 95%CL (1 toyMC)
median expected limit: r < 0.156823 @ 95%CL (1 toyMC)
   68% expected band : 0.156823 < r < 0.156823
   95% expected band : 0.156823 < r < 0.156823
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -148698436
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.207235 +/- 0.00297691 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.207235 @ 95%CL (1 toyMC)
median expected limit: r < 0.207235 @ 95%CL (1 toyMC)
   68% expected band : 0.207235 < r < 0.207235
   95% expected band : 0.207235 < r < 0.207235
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1175591126
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.298757 +/- 0.00240997 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.298757 @ 95%CL (1 toyMC)
median expected limit: r < 0.298757 @ 95%CL (1 toyMC)
   68% expected band : 0.298757 < r < 0.298757
   95% expected band : 0.298757 < r < 0.298757
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -765168559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.250102 +/- 0.00278681 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.250102 @ 95%CL (1 toyMC)
median expected limit: r < 0.250102 @ 95%CL (1 toyMC)
   68% expected band : 0.250102 < r < 0.250102
   95% expected band : 0.250102 < r < 0.250102
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -361907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.313597 +/- 0.00216448 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.313597 @ 95%CL (1 toyMC)
median expected limit: r < 0.313597 @ 95%CL (1 toyMC)
   68% expected band : 0.313597 < r < 0.313597
   95% expected band : 0.313597 < r < 0.313597
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 234478188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.177564 +/- 0.00344186 @ 95% CL (97 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.177564 @ 95%CL (1 toyMC)
median expected limit: r < 0.177564 @ 95%CL (1 toyMC)
   68% expected band : 0.177564 < r < 0.177564
   95% expected band : 0.177564 < r < 0.177564
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1943542558
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.426639 +/- 0.00230621 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.426639 @ 95%CL (1 toyMC)
median expected limit: r < 0.426639 @ 95%CL (1 toyMC)
   68% expected band : 0.426639 < r < 0.426639
   95% expected band : 0.426639 < r < 0.426639
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -916959178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.426108 +/- 0.00267353 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.426108 @ 95%CL (1 toyMC)
median expected limit: r < 0.426108 @ 95%CL (1 toyMC)
   68% expected band : 0.426108 < r < 0.426108
   95% expected band : 0.426108 < r < 0.426108
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -610606315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.198155 +/- 0.00260812 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.198155 @ 95%CL (1 toyMC)
median expected limit: r < 0.198155 @ 95%CL (1 toyMC)
   68% expected band : 0.198155 < r < 0.198155
   95% expected band : 0.198155 < r < 0.198155
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1223765048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.355817 +/- 0.00186832 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.355817 @ 95%CL (1 toyMC)
median expected limit: r < 0.355817 @ 95%CL (1 toyMC)
   68% expected band : 0.355817 < r < 0.355817
   95% expected band : 0.355817 < r < 0.355817
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -21989387
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.165475 +/- 0.00378151 @ 95% CL (84 tries)
Done in 1.25 min (cpu), 1.26 min (real)
mean   expected limit: r < 0.165475 @ 95%CL (1 toyMC)
median expected limit: r < 0.165475 @ 95%CL (1 toyMC)
   68% expected band : 0.165475 < r < 0.165475
   95% expected band : 0.165475 < r < 0.165475
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -405107246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.311304 +/- 0.00287122 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.311304 @ 95%CL (1 toyMC)
median expected limit: r < 0.311304 @ 95%CL (1 toyMC)
   68% expected band : 0.311304 < r < 0.311304
   95% expected band : 0.311304 < r < 0.311304
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1662019245
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.29611 +/- 1.1503 @ 95% CL (61 tries)
Done in 4.77 min (cpu), 4.80 min (real)
mean   expected limit: r < 5.29611 @ 95%CL (1 toyMC)
median expected limit: r < 5.29611 @ 95%CL (1 toyMC)
   68% expected band : 5.29611 < r < 5.29611
   95% expected band : 5.29611 < r < 5.29611
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 783138932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.306705 +/- 0.00227276 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.306705 @ 95%CL (1 toyMC)
median expected limit: r < 0.306705 @ 95%CL (1 toyMC)
   68% expected band : 0.306705 < r < 0.306705
   95% expected band : 0.306705 < r < 0.306705
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1711884813
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232804 +/- 0.00219175 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.232804 @ 95%CL (1 toyMC)
median expected limit: r < 0.232804 @ 95%CL (1 toyMC)
   68% expected band : 0.232804 < r < 0.232804
   95% expected band : 0.232804 < r < 0.232804
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 851888281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.38742 +/- 0.00195802 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.38742 @ 95%CL (1 toyMC)
median expected limit: r < 0.38742 @ 95%CL (1 toyMC)
   68% expected band : 0.38742 < r < 0.38742
   95% expected band : 0.38742 < r < 0.38742
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1105451778
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.337363 +/- 0.00219035 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.337363 @ 95%CL (1 toyMC)
median expected limit: r < 0.337363 @ 95%CL (1 toyMC)
   68% expected band : 0.337363 < r < 0.337363
   95% expected band : 0.337363 < r < 0.337363
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -406928425
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.27006 +/- 0.00218627 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.27006 @ 95%CL (1 toyMC)
median expected limit: r < 0.27006 @ 95%CL (1 toyMC)
   68% expected band : 0.27006 < r < 0.27006
   95% expected band : 0.27006 < r < 0.27006
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -594688554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.299233 +/- 0.00221014 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.299233 @ 95%CL (1 toyMC)
median expected limit: r < 0.299233 @ 95%CL (1 toyMC)
   68% expected band : 0.299233 < r < 0.299233
   95% expected band : 0.299233 < r < 0.299233
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1757388095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208067 +/- 0.00292497 @ 95% CL (100 tries)
Done in 0.34 min (cpu), 0.34 min (real)
mean   expected limit: r < 0.208067 @ 95%CL (1 toyMC)
median expected limit: r < 0.208067 @ 95%CL (1 toyMC)
   68% expected band : 0.208067 < r < 0.208067
   95% expected band : 0.208067 < r < 0.208067
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -399084332
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.319605 +/- 0.00205021 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.319605 @ 95%CL (1 toyMC)
median expected limit: r < 0.319605 @ 95%CL (1 toyMC)
   68% expected band : 0.319605 < r < 0.319605
   95% expected band : 0.319605 < r < 0.319605
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine16.MarkovChainMC.mH16.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH16.-100360828.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH16.-1009665740.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH16.-1044445420.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH16.-1051266378.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH16.-1128004105.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH16.-1175591126.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH16.-1176026942.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH16.-1195297667.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH16.-129588510.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH16.-1298754429.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH16.-1318895241.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH16.-1327348845.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH16.-1430921942.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH16.-148698436.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH16.-1492329491.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH16.-1494471519.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH16.-1503696883.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH16.-1517904721.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH16.-1601981779.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH16.-165147283.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH16.-168122129.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH16.-1710076620.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH16.-1742759257.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH16.-1792237777.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH16.-1877516815.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH16.-1943542558.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH16.-1950059691.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH16.-1971315916.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH16.-1993261950.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH16.-21989387.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH16.-295716698.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH16.-361907.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH16.-392747140.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH16.-399084332.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH16.-405107246.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH16.-406928425.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH16.-444613799.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH16.-476584971.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH16.-522175399.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH16.-551982629.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH16.-555014696.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH16.-594688554.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH16.-59832385.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH16.-610606315.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH16.-707298302.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH16.-715461960.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH16.-739438765.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH16.-765168559.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH16.-895232791.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH16.-916959178.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH16.-949238822.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH16.-974161334.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH16.-976518658.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH16.-990015137.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH16.1015051230.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH16.1068165594.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH16.1085980595.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH16.1105451778.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH16.1105821467.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH16.1113060199.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH16.1170107716.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH16.1172094403.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH16.1223765048.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH16.1228140034.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH16.1278547194.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH16.1288990379.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH16.1360064523.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH16.147158494.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH16.1495001401.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH16.1564308901.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH16.157614671.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH16.1585517772.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH16.1601303242.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH16.1602177158.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH16.1662019245.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH16.1695527588.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH16.1711884813.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH16.1757388095.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH16.1757752493.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH16.1835623414.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH16.1902340725.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH16.1952017887.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH16.234478188.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH16.261327933.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH16.388726162.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH16.399534199.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH16.417077431.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH16.627655911.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH16.662330975.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH16.681830987.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH16.689885971.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH16.700058628.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH16.759397590.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH16.783138932.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH16.851888281.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH16.866654302.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH16.877087777.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH16.878230075.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH16.940054165.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH16.987938696.root
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1728687009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.653733 +/- 0.00224161 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.653733 @ 95%CL (1 toyMC)
median expected limit: r < 0.653733 @ 95%CL (1 toyMC)
   68% expected band : 0.653733 < r < 0.653733
   95% expected band : 0.653733 < r < 0.653733
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 165781912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.42337 +/- 0.00260385 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.42337 @ 95%CL (1 toyMC)
median expected limit: r < 0.42337 @ 95%CL (1 toyMC)
   68% expected band : 0.42337 < r < 0.42337
   95% expected band : 0.42337 < r < 0.42337
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2063024224
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.463181 +/- 0.00241283 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.463181 @ 95%CL (1 toyMC)
median expected limit: r < 0.463181 @ 95%CL (1 toyMC)
   68% expected band : 0.463181 < r < 0.463181
   95% expected band : 0.463181 < r < 0.463181
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -684512806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.861559 +/- 0.00325035 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.861559 @ 95%CL (1 toyMC)
median expected limit: r < 0.861559 @ 95%CL (1 toyMC)
   68% expected band : 0.861559 < r < 0.861559
   95% expected band : 0.861559 < r < 0.861559
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -340543756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.501329 +/- 0.00245456 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.501329 @ 95%CL (1 toyMC)
median expected limit: r < 0.501329 @ 95%CL (1 toyMC)
   68% expected band : 0.501329 < r < 0.501329
   95% expected band : 0.501329 < r < 0.501329
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 356415209
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.361866 +/- 0.00250637 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.361866 @ 95%CL (1 toyMC)
median expected limit: r < 0.361866 @ 95%CL (1 toyMC)
   68% expected band : 0.361866 < r < 0.361866
   95% expected band : 0.361866 < r < 0.361866
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 870420411
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.961743 +/- 0.00270782 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.961743 @ 95%CL (1 toyMC)
median expected limit: r < 0.961743 @ 95%CL (1 toyMC)
   68% expected band : 0.961743 < r < 0.961743
   95% expected band : 0.961743 < r < 0.961743
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1171342581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.610715 +/- 0.00269281 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.610715 @ 95%CL (1 toyMC)
median expected limit: r < 0.610715 @ 95%CL (1 toyMC)
   68% expected band : 0.610715 < r < 0.610715
   95% expected band : 0.610715 < r < 0.610715
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 853534496
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.444505 +/- 0.00258515 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.444505 @ 95%CL (1 toyMC)
median expected limit: r < 0.444505 @ 95%CL (1 toyMC)
   68% expected band : 0.444505 < r < 0.444505
   95% expected band : 0.444505 < r < 0.444505
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1703579237
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.717656 +/- 0.00248726 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.717656 @ 95%CL (1 toyMC)
median expected limit: r < 0.717656 @ 95%CL (1 toyMC)
   68% expected band : 0.717656 < r < 0.717656
   95% expected band : 0.717656 < r < 0.717656
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2050285099
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.656661 +/- 0.00283966 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.656661 @ 95%CL (1 toyMC)
median expected limit: r < 0.656661 @ 95%CL (1 toyMC)
   68% expected band : 0.656661 < r < 0.656661
   95% expected band : 0.656661 < r < 0.656661
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 371267599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07343 +/- 0.00341228 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.07343 @ 95%CL (1 toyMC)
median expected limit: r < 1.07343 @ 95%CL (1 toyMC)
   68% expected band : 1.07343 < r < 1.07343
   95% expected band : 1.07343 < r < 1.07343
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1525029185
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03132 +/- 0.00334258 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.03132 @ 95%CL (1 toyMC)
median expected limit: r < 1.03132 @ 95%CL (1 toyMC)
   68% expected band : 1.03132 < r < 1.03132
   95% expected band : 1.03132 < r < 1.03132
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1156630013
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.523989 +/- 0.00318004 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.523989 @ 95%CL (1 toyMC)
median expected limit: r < 0.523989 @ 95%CL (1 toyMC)
   68% expected band : 0.523989 < r < 0.523989
   95% expected band : 0.523989 < r < 0.523989
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -808212546
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270043 +/- 0.00297939 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.270043 @ 95%CL (1 toyMC)
median expected limit: r < 0.270043 @ 95%CL (1 toyMC)
   68% expected band : 0.270043 < r < 0.270043
   95% expected band : 0.270043 < r < 0.270043
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1091362025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.525975 +/- 0.00293343 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.525975 @ 95%CL (1 toyMC)
median expected limit: r < 0.525975 @ 95%CL (1 toyMC)
   68% expected band : 0.525975 < r < 0.525975
   95% expected band : 0.525975 < r < 0.525975
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1282837951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.71642 +/- 0.00331942 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.71642 @ 95%CL (1 toyMC)
median expected limit: r < 0.71642 @ 95%CL (1 toyMC)
   68% expected band : 0.71642 < r < 0.71642
   95% expected band : 0.71642 < r < 0.71642
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 741001464
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.644168 +/- 0.00328504 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.644168 @ 95%CL (1 toyMC)
median expected limit: r < 0.644168 @ 95%CL (1 toyMC)
   68% expected band : 0.644168 < r < 0.644168
   95% expected band : 0.644168 < r < 0.644168
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 898026216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.467508 +/- 0.00268087 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.467508 @ 95%CL (1 toyMC)
median expected limit: r < 0.467508 @ 95%CL (1 toyMC)
   68% expected band : 0.467508 < r < 0.467508
   95% expected band : 0.467508 < r < 0.467508
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1530959141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04974 +/- 0.00314006 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.04974 @ 95%CL (1 toyMC)
median expected limit: r < 1.04974 @ 95%CL (1 toyMC)
   68% expected band : 1.04974 < r < 1.04974
   95% expected band : 1.04974 < r < 1.04974
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1507607478
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.815846 +/- 0.00279897 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.815846 @ 95%CL (1 toyMC)
median expected limit: r < 0.815846 @ 95%CL (1 toyMC)
   68% expected band : 0.815846 < r < 0.815846
   95% expected band : 0.815846 < r < 0.815846
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -314320510
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.730414 +/- 0.00309215 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.730414 @ 95%CL (1 toyMC)
median expected limit: r < 0.730414 @ 95%CL (1 toyMC)
   68% expected band : 0.730414 < r < 0.730414
   95% expected band : 0.730414 < r < 0.730414
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -505058794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.555276 +/- 0.00241345 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.555276 @ 95%CL (1 toyMC)
median expected limit: r < 0.555276 @ 95%CL (1 toyMC)
   68% expected band : 0.555276 < r < 0.555276
   95% expected band : 0.555276 < r < 0.555276
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2102901368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22773 +/- 0.00371558 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.22773 @ 95%CL (1 toyMC)
median expected limit: r < 1.22773 @ 95%CL (1 toyMC)
   68% expected band : 1.22773 < r < 1.22773
   95% expected band : 1.22773 < r < 1.22773
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2076693866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13944 +/- 0.00351771 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.13944 @ 95%CL (1 toyMC)
median expected limit: r < 1.13944 @ 95%CL (1 toyMC)
   68% expected band : 1.13944 < r < 1.13944
   95% expected band : 1.13944 < r < 1.13944
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -588750676
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.584448 +/- 0.00340162 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.584448 @ 95%CL (1 toyMC)
median expected limit: r < 0.584448 @ 95%CL (1 toyMC)
   68% expected band : 0.584448 < r < 0.584448
   95% expected band : 0.584448 < r < 0.584448
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1878707171
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.312889 +/- 0.00225329 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.312889 @ 95%CL (1 toyMC)
median expected limit: r < 0.312889 @ 95%CL (1 toyMC)
   68% expected band : 0.312889 < r < 0.312889
   95% expected band : 0.312889 < r < 0.312889
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1812699995
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09834 +/- 0.00331657 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.09834 @ 95%CL (1 toyMC)
median expected limit: r < 1.09834 @ 95%CL (1 toyMC)
   68% expected band : 1.09834 < r < 1.09834
   95% expected band : 1.09834 < r < 1.09834
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -569176061
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.645073 +/- 0.00230379 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.645073 @ 95%CL (1 toyMC)
median expected limit: r < 0.645073 @ 95%CL (1 toyMC)
   68% expected band : 0.645073 < r < 0.645073
   95% expected band : 0.645073 < r < 0.645073
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -164440579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.822191 +/- 0.0028823 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.822191 @ 95%CL (1 toyMC)
median expected limit: r < 0.822191 @ 95%CL (1 toyMC)
   68% expected band : 0.822191 < r < 0.822191
   95% expected band : 0.822191 < r < 0.822191
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 592753108
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.628809 +/- 0.00270094 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.628809 @ 95%CL (1 toyMC)
median expected limit: r < 0.628809 @ 95%CL (1 toyMC)
   68% expected band : 0.628809 < r < 0.628809
   95% expected band : 0.628809 < r < 0.628809
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1930142686
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.58248 +/- 0.00268497 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.58248 @ 95%CL (1 toyMC)
median expected limit: r < 0.58248 @ 95%CL (1 toyMC)
   68% expected band : 0.58248 < r < 0.58248
   95% expected band : 0.58248 < r < 0.58248
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 230644528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.48328 +/- 0.00257427 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.48328 @ 95%CL (1 toyMC)
median expected limit: r < 0.48328 @ 95%CL (1 toyMC)
   68% expected band : 0.48328 < r < 0.48328
   95% expected band : 0.48328 < r < 0.48328
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1623374173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.563571 +/- 0.00302016 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.563571 @ 95%CL (1 toyMC)
median expected limit: r < 0.563571 @ 95%CL (1 toyMC)
   68% expected band : 0.563571 < r < 0.563571
   95% expected band : 0.563571 < r < 0.563571
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1604945723
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.414576 +/- 0.00248502 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.414576 @ 95%CL (1 toyMC)
median expected limit: r < 0.414576 @ 95%CL (1 toyMC)
   68% expected band : 0.414576 < r < 0.414576
   95% expected band : 0.414576 < r < 0.414576
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 472321544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.458637 +/- 0.00317907 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.458637 @ 95%CL (1 toyMC)
median expected limit: r < 0.458637 @ 95%CL (1 toyMC)
   68% expected band : 0.458637 < r < 0.458637
   95% expected band : 0.458637 < r < 0.458637
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 551466025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.509914 +/- 0.00249332 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.509914 @ 95%CL (1 toyMC)
median expected limit: r < 0.509914 @ 95%CL (1 toyMC)
   68% expected band : 0.509914 < r < 0.509914
   95% expected band : 0.509914 < r < 0.509914
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 88545374
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39 +/- 0.00265357 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.39 @ 95%CL (1 toyMC)
median expected limit: r < 0.39 @ 95%CL (1 toyMC)
   68% expected band : 0.39 < r < 0.39
   95% expected band : 0.39 < r < 0.39
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1450006992
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.546725 +/- 0.00276647 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.546725 @ 95%CL (1 toyMC)
median expected limit: r < 0.546725 @ 95%CL (1 toyMC)
   68% expected band : 0.546725 < r < 0.546725
   95% expected band : 0.546725 < r < 0.546725
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -366918407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.425998 +/- 0.00218677 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.425998 @ 95%CL (1 toyMC)
median expected limit: r < 0.425998 @ 95%CL (1 toyMC)
   68% expected band : 0.425998 < r < 0.425998
   95% expected band : 0.425998 < r < 0.425998
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2007954561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.860867 +/- 0.00305949 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.860867 @ 95%CL (1 toyMC)
median expected limit: r < 0.860867 @ 95%CL (1 toyMC)
   68% expected band : 0.860867 < r < 0.860867
   95% expected band : 0.860867 < r < 0.860867
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1850230911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.402964 +/- 0.00284769 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.402964 @ 95%CL (1 toyMC)
median expected limit: r < 0.402964 @ 95%CL (1 toyMC)
   68% expected band : 0.402964 < r < 0.402964
   95% expected band : 0.402964 < r < 0.402964
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1468829006
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.789103 +/- 0.00306005 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.789103 @ 95%CL (1 toyMC)
median expected limit: r < 0.789103 @ 95%CL (1 toyMC)
   68% expected band : 0.789103 < r < 0.789103
   95% expected band : 0.789103 < r < 0.789103
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1687875522
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.386379 +/- 0.00273045 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.386379 @ 95%CL (1 toyMC)
median expected limit: r < 0.386379 @ 95%CL (1 toyMC)
   68% expected band : 0.386379 < r < 0.386379
   95% expected band : 0.386379 < r < 0.386379
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2010505803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.870161 +/- 0.00294278 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.870161 @ 95%CL (1 toyMC)
median expected limit: r < 0.870161 @ 95%CL (1 toyMC)
   68% expected band : 0.870161 < r < 0.870161
   95% expected band : 0.870161 < r < 0.870161
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1428909187
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.331283 +/- 0.00262683 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.331283 @ 95%CL (1 toyMC)
median expected limit: r < 0.331283 @ 95%CL (1 toyMC)
   68% expected band : 0.331283 < r < 0.331283
   95% expected band : 0.331283 < r < 0.331283
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1352334825
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329775 +/- 0.0026455 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.329775 @ 95%CL (1 toyMC)
median expected limit: r < 0.329775 @ 95%CL (1 toyMC)
   68% expected band : 0.329775 < r < 0.329775
   95% expected band : 0.329775 < r < 0.329775
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 926628744
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.824848 +/- 0.00336967 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.824848 @ 95%CL (1 toyMC)
median expected limit: r < 0.824848 @ 95%CL (1 toyMC)
   68% expected band : 0.824848 < r < 0.824848
   95% expected band : 0.824848 < r < 0.824848
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -284507393
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06438 +/- 0.0033283 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.06438 @ 95%CL (1 toyMC)
median expected limit: r < 1.06438 @ 95%CL (1 toyMC)
   68% expected band : 1.06438 < r < 1.06438
   95% expected band : 1.06438 < r < 1.06438
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2138499674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.526245 +/- 0.00313498 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.526245 @ 95%CL (1 toyMC)
median expected limit: r < 0.526245 @ 95%CL (1 toyMC)
   68% expected band : 0.526245 < r < 0.526245
   95% expected band : 0.526245 < r < 0.526245
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -546991072
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08747 +/- 0.00312293 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.08747 @ 95%CL (1 toyMC)
median expected limit: r < 1.08747 @ 95%CL (1 toyMC)
   68% expected band : 1.08747 < r < 1.08747
   95% expected band : 1.08747 < r < 1.08747
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1454808987
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.712277 +/- 0.00325074 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.712277 @ 95%CL (1 toyMC)
median expected limit: r < 0.712277 @ 95%CL (1 toyMC)
   68% expected band : 0.712277 < r < 0.712277
   95% expected band : 0.712277 < r < 0.712277
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1982076419
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.518216 +/- 0.00244257 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.518216 @ 95%CL (1 toyMC)
median expected limit: r < 0.518216 @ 95%CL (1 toyMC)
   68% expected band : 0.518216 < r < 0.518216
   95% expected band : 0.518216 < r < 0.518216
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -211375999
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.57343 +/- 0.00272479 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.57343 @ 95%CL (1 toyMC)
median expected limit: r < 0.57343 @ 95%CL (1 toyMC)
   68% expected band : 0.57343 < r < 0.57343
   95% expected band : 0.57343 < r < 0.57343
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1227786665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.64124 +/- 0.00263059 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.64124 @ 95%CL (1 toyMC)
median expected limit: r < 0.64124 @ 95%CL (1 toyMC)
   68% expected band : 0.64124 < r < 0.64124
   95% expected band : 0.64124 < r < 0.64124
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -244234503
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.723261 +/- 0.00308974 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.723261 @ 95%CL (1 toyMC)
median expected limit: r < 0.723261 @ 95%CL (1 toyMC)
   68% expected band : 0.723261 < r < 0.723261
   95% expected band : 0.723261 < r < 0.723261
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1300241991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.912099 +/- 0.00310643 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.912099 @ 95%CL (1 toyMC)
median expected limit: r < 0.912099 @ 95%CL (1 toyMC)
   68% expected band : 0.912099 < r < 0.912099
   95% expected band : 0.912099 < r < 0.912099
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 567782910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284585 +/- 0.00288024 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.284585 @ 95%CL (1 toyMC)
median expected limit: r < 0.284585 @ 95%CL (1 toyMC)
   68% expected band : 0.284585 < r < 0.284585
   95% expected band : 0.284585 < r < 0.284585
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -209107117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.367513 +/- 0.00271358 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.367513 @ 95%CL (1 toyMC)
median expected limit: r < 0.367513 @ 95%CL (1 toyMC)
   68% expected band : 0.367513 < r < 0.367513
   95% expected band : 0.367513 < r < 0.367513
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -248472528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.69484 +/- 0.00253032 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.69484 @ 95%CL (1 toyMC)
median expected limit: r < 0.69484 @ 95%CL (1 toyMC)
   68% expected band : 0.69484 < r < 0.69484
   95% expected band : 0.69484 < r < 0.69484
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1202876561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.35818 +/- 0.00242041 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.35818 @ 95%CL (1 toyMC)
median expected limit: r < 0.35818 @ 95%CL (1 toyMC)
   68% expected band : 0.35818 < r < 0.35818
   95% expected band : 0.35818 < r < 0.35818
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -708396374
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.293109 +/- 0.00314197 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.293109 @ 95%CL (1 toyMC)
median expected limit: r < 0.293109 @ 95%CL (1 toyMC)
   68% expected band : 0.293109 < r < 0.293109
   95% expected band : 0.293109 < r < 0.293109
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 295258956
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.714689 +/- 0.00210431 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.714689 @ 95%CL (1 toyMC)
median expected limit: r < 0.714689 @ 95%CL (1 toyMC)
   68% expected band : 0.714689 < r < 0.714689
   95% expected band : 0.714689 < r < 0.714689
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 849898834
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.399425 +/- 0.00275639 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.399425 @ 95%CL (1 toyMC)
median expected limit: r < 0.399425 @ 95%CL (1 toyMC)
   68% expected band : 0.399425 < r < 0.399425
   95% expected band : 0.399425 < r < 0.399425
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2130696951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10293 +/- 0.0034257 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.10293 @ 95%CL (1 toyMC)
median expected limit: r < 1.10293 @ 95%CL (1 toyMC)
   68% expected band : 1.10293 < r < 1.10293
   95% expected band : 1.10293 < r < 1.10293
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1959546138
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.555999 +/- 0.0028241 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.555999 @ 95%CL (1 toyMC)
median expected limit: r < 0.555999 @ 95%CL (1 toyMC)
   68% expected band : 0.555999 < r < 0.555999
   95% expected band : 0.555999 < r < 0.555999
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 989818505
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.428651 +/- 0.00271934 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.428651 @ 95%CL (1 toyMC)
median expected limit: r < 0.428651 @ 95%CL (1 toyMC)
   68% expected band : 0.428651 < r < 0.428651
   95% expected band : 0.428651 < r < 0.428651
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1434925236
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.829328 +/- 0.0031202 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.829328 @ 95%CL (1 toyMC)
median expected limit: r < 0.829328 @ 95%CL (1 toyMC)
   68% expected band : 0.829328 < r < 0.829328
   95% expected band : 0.829328 < r < 0.829328
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 593262928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23085 +/- 0.00371375 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.23085 @ 95%CL (1 toyMC)
median expected limit: r < 1.23085 @ 95%CL (1 toyMC)
   68% expected band : 1.23085 < r < 1.23085
   95% expected band : 1.23085 < r < 1.23085
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -597704959
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.375873 +/- 0.00292912 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.375873 @ 95%CL (1 toyMC)
median expected limit: r < 0.375873 @ 95%CL (1 toyMC)
   68% expected band : 0.375873 < r < 0.375873
   95% expected band : 0.375873 < r < 0.375873
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1934594533
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.520796 +/- 0.0026163 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.520796 @ 95%CL (1 toyMC)
median expected limit: r < 0.520796 @ 95%CL (1 toyMC)
   68% expected band : 0.520796 < r < 0.520796
   95% expected band : 0.520796 < r < 0.520796
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1736173690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.742127 +/- 0.00279487 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.742127 @ 95%CL (1 toyMC)
median expected limit: r < 0.742127 @ 95%CL (1 toyMC)
   68% expected band : 0.742127 < r < 0.742127
   95% expected band : 0.742127 < r < 0.742127
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2097855476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.478759 +/- 0.002639 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.478759 @ 95%CL (1 toyMC)
median expected limit: r < 0.478759 @ 95%CL (1 toyMC)
   68% expected band : 0.478759 < r < 0.478759
   95% expected band : 0.478759 < r < 0.478759
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 743103799
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.427443 +/- 0.00328562 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.427443 @ 95%CL (1 toyMC)
median expected limit: r < 0.427443 @ 95%CL (1 toyMC)
   68% expected band : 0.427443 < r < 0.427443
   95% expected band : 0.427443 < r < 0.427443
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1923428757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.78122 +/- 0.00287233 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.78122 @ 95%CL (1 toyMC)
median expected limit: r < 0.78122 @ 95%CL (1 toyMC)
   68% expected band : 0.78122 < r < 0.78122
   95% expected band : 0.78122 < r < 0.78122
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1272846647
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.716203 +/- 0.00246392 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.716203 @ 95%CL (1 toyMC)
median expected limit: r < 0.716203 @ 95%CL (1 toyMC)
   68% expected band : 0.716203 < r < 0.716203
   95% expected band : 0.716203 < r < 0.716203
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1202338245
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.518974 +/- 0.00243366 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.518974 @ 95%CL (1 toyMC)
median expected limit: r < 0.518974 @ 95%CL (1 toyMC)
   68% expected band : 0.518974 < r < 0.518974
   95% expected band : 0.518974 < r < 0.518974
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1685528757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.677207 +/- 0.00337904 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.677207 @ 95%CL (1 toyMC)
median expected limit: r < 0.677207 @ 95%CL (1 toyMC)
   68% expected band : 0.677207 < r < 0.677207
   95% expected band : 0.677207 < r < 0.677207
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -681756611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29005 +/- 0.00360016 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.29005 @ 95%CL (1 toyMC)
median expected limit: r < 1.29005 @ 95%CL (1 toyMC)
   68% expected band : 1.29005 < r < 1.29005
   95% expected band : 1.29005 < r < 1.29005
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 166201853
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.805052 +/- 0.00272533 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.805052 @ 95%CL (1 toyMC)
median expected limit: r < 0.805052 @ 95%CL (1 toyMC)
   68% expected band : 0.805052 < r < 0.805052
   95% expected band : 0.805052 < r < 0.805052
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 790679695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.615645 +/- 0.00333845 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.615645 @ 95%CL (1 toyMC)
median expected limit: r < 0.615645 @ 95%CL (1 toyMC)
   68% expected band : 0.615645 < r < 0.615645
   95% expected band : 0.615645 < r < 0.615645
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1640147885
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15048 +/- 0.00356304 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.15048 @ 95%CL (1 toyMC)
median expected limit: r < 1.15048 @ 95%CL (1 toyMC)
   68% expected band : 1.15048 < r < 1.15048
   95% expected band : 1.15048 < r < 1.15048
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -360816159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.939633 +/- 0.00322659 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.939633 @ 95%CL (1 toyMC)
median expected limit: r < 0.939633 @ 95%CL (1 toyMC)
   68% expected band : 0.939633 < r < 0.939633
   95% expected band : 0.939633 < r < 0.939633
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1151041560
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.597975 +/- 0.00324158 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.597975 @ 95%CL (1 toyMC)
median expected limit: r < 0.597975 @ 95%CL (1 toyMC)
   68% expected band : 0.597975 < r < 0.597975
   95% expected band : 0.597975 < r < 0.597975
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1817490158
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.730252 +/- 0.00345562 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 0.730252 @ 95%CL (1 toyMC)
median expected limit: r < 0.730252 @ 95%CL (1 toyMC)
   68% expected band : 0.730252 < r < 0.730252
   95% expected band : 0.730252 < r < 0.730252
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 75531819
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.509739 +/- 0.00259844 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.509739 @ 95%CL (1 toyMC)
median expected limit: r < 0.509739 @ 95%CL (1 toyMC)
   68% expected band : 0.509739 < r < 0.509739
   95% expected band : 0.509739 < r < 0.509739
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 898223263
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.565482 +/- 0.00273726 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.565482 @ 95%CL (1 toyMC)
median expected limit: r < 0.565482 @ 95%CL (1 toyMC)
   68% expected band : 0.565482 < r < 0.565482
   95% expected band : 0.565482 < r < 0.565482
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1817170489
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.48551 +/- 0.00317503 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.48551 @ 95%CL (1 toyMC)
median expected limit: r < 0.48551 @ 95%CL (1 toyMC)
   68% expected band : 0.48551 < r < 0.48551
   95% expected band : 0.48551 < r < 0.48551
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 665288164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.793183 +/- 0.00318773 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.793183 @ 95%CL (1 toyMC)
median expected limit: r < 0.793183 @ 95%CL (1 toyMC)
   68% expected band : 0.793183 < r < 0.793183
   95% expected band : 0.793183 < r < 0.793183
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 679968472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.68292 +/- 0.00304003 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.68292 @ 95%CL (1 toyMC)
median expected limit: r < 0.68292 @ 95%CL (1 toyMC)
   68% expected band : 0.68292 < r < 0.68292
   95% expected band : 0.68292 < r < 0.68292
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1566572174
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26769 +/- 0.00328494 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.26769 @ 95%CL (1 toyMC)
median expected limit: r < 1.26769 @ 95%CL (1 toyMC)
   68% expected band : 1.26769 < r < 1.26769
   95% expected band : 1.26769 < r < 1.26769
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -899128326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.561564 +/- 0.00252337 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.561564 @ 95%CL (1 toyMC)
median expected limit: r < 0.561564 @ 95%CL (1 toyMC)
   68% expected band : 0.561564 < r < 0.561564
   95% expected band : 0.561564 < r < 0.561564
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1395134171
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.350286 +/- 0.00246553 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.350286 @ 95%CL (1 toyMC)
median expected limit: r < 0.350286 @ 95%CL (1 toyMC)
   68% expected band : 0.350286 < r < 0.350286
   95% expected band : 0.350286 < r < 0.350286
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -384023027
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.437626 +/- 0.00306374 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.437626 @ 95%CL (1 toyMC)
median expected limit: r < 0.437626 @ 95%CL (1 toyMC)
   68% expected band : 0.437626 < r < 0.437626
   95% expected band : 0.437626 < r < 0.437626
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1204123508
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.437171 +/- 0.00245057 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.437171 @ 95%CL (1 toyMC)
median expected limit: r < 0.437171 @ 95%CL (1 toyMC)
   68% expected band : 0.437171 < r < 0.437171
   95% expected band : 0.437171 < r < 0.437171
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 361768899
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.932695 +/- 0.00270389 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.932695 @ 95%CL (1 toyMC)
median expected limit: r < 0.932695 @ 95%CL (1 toyMC)
   68% expected band : 0.932695 < r < 0.932695
   95% expected band : 0.932695 < r < 0.932695
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1469838831
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.81669 +/- 0.00320892 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.81669 @ 95%CL (1 toyMC)
median expected limit: r < 0.81669 @ 95%CL (1 toyMC)
   68% expected band : 0.81669 < r < 0.81669
   95% expected band : 0.81669 < r < 0.81669
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 627580318
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.375114 +/- 0.0029365 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.375114 @ 95%CL (1 toyMC)
median expected limit: r < 0.375114 @ 95%CL (1 toyMC)
   68% expected band : 0.375114 < r < 0.375114
   95% expected band : 0.375114 < r < 0.375114
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1710178617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.561549 +/- 0.00314601 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.561549 @ 95%CL (1 toyMC)
median expected limit: r < 0.561549 @ 95%CL (1 toyMC)
   68% expected band : 0.561549 < r < 0.561549
   95% expected band : 0.561549 < r < 0.561549
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1556980020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.56197 +/- 0.00223439 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.56197 @ 95%CL (1 toyMC)
median expected limit: r < 0.56197 @ 95%CL (1 toyMC)
   68% expected band : 0.56197 < r < 0.56197
   95% expected band : 0.56197 < r < 0.56197
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine22.MarkovChainMC.mH22.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH22.-1156630013.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH22.-1171342581.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH22.-1227786665.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH22.-1282837951.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH22.-1352334825.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH22.-1428909187.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH22.-1454808987.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH22.-1525029185.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH22.-1530959141.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH22.-1556980020.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH22.-1566572174.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH22.-1604945723.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH22.-1623374173.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH22.-164440579.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH22.-1685528757.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH22.-1687875522.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH22.-1703579237.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH22.-1710178617.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH22.-1817490158.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH22.-1850230911.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH22.-1923428757.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH22.-1930142686.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH22.-1934594533.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH22.-1959546138.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH22.-1982076419.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH22.-2010505803.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH22.-2076693866.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH22.-209107117.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH22.-2097855476.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH22.-2102901368.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH22.-211375999.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH22.-2130696951.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH22.-244234503.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH22.-248472528.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH22.-284507393.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH22.-314320510.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH22.-340543756.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH22.-360816159.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH22.-366918407.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH22.-384023027.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH22.-505058794.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH22.-546991072.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH22.-569176061.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH22.-588750676.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH22.-597704959.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH22.-681756611.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH22.-684512806.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH22.-708396374.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH22.-808212546.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH22.-899128326.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH22.1091362025.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH22.1151041560.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH22.1202338245.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH22.1202876561.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH22.1204123508.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH22.1272846647.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH22.1300241991.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH22.1395134171.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH22.1434925236.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH22.1450006992.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH22.1468829006.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH22.1469838831.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH22.1507607478.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH22.1640147885.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH22.165781912.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH22.166201853.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH22.1728687009.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH22.1736173690.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH22.1812699995.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH22.1817170489.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH22.1878707171.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH22.2007954561.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH22.2050285099.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH22.2063024224.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH22.2138499674.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH22.230644528.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH22.295258956.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH22.356415209.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH22.361768899.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH22.371267599.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH22.472321544.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH22.551466025.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH22.567782910.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH22.592753108.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH22.593262928.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH22.627580318.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH22.665288164.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH22.679968472.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH22.741001464.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH22.743103799.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH22.75531819.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH22.790679695.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH22.849898834.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH22.853534496.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH22.870420411.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH22.88545374.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH22.898026216.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH22.898223263.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH22.926628744.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH22.989818505.root
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1072613379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3737 +/- 0.00318967 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.3737 @ 95%CL (1 toyMC)
median expected limit: r < 1.3737 @ 95%CL (1 toyMC)
   68% expected band : 1.3737 < r < 1.3737
   95% expected band : 1.3737 < r < 1.3737
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1604405829
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77476 +/- 0.00340549 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.77476 @ 95%CL (1 toyMC)
median expected limit: r < 1.77476 @ 95%CL (1 toyMC)
   68% expected band : 1.77476 < r < 1.77476
   95% expected band : 1.77476 < r < 1.77476
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 391934553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02158 +/- 0.00357058 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.02158 @ 95%CL (1 toyMC)
median expected limit: r < 1.02158 @ 95%CL (1 toyMC)
   68% expected band : 1.02158 < r < 1.02158
   95% expected band : 1.02158 < r < 1.02158
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1345938384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.857253 +/- 0.00333841 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.857253 @ 95%CL (1 toyMC)
median expected limit: r < 0.857253 @ 95%CL (1 toyMC)
   68% expected band : 0.857253 < r < 0.857253
   95% expected band : 0.857253 < r < 0.857253
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1152529481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.910433 +/- 0.00359196 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.910433 @ 95%CL (1 toyMC)
median expected limit: r < 0.910433 @ 95%CL (1 toyMC)
   68% expected band : 0.910433 < r < 0.910433
   95% expected band : 0.910433 < r < 0.910433
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1232458975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.94534 +/- 0.00365801 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 1.94534 @ 95%CL (1 toyMC)
median expected limit: r < 1.94534 @ 95%CL (1 toyMC)
   68% expected band : 1.94534 < r < 1.94534
   95% expected band : 1.94534 < r < 1.94534
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1460818188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04203 +/- 0.00239511 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.04203 @ 95%CL (1 toyMC)
median expected limit: r < 1.04203 @ 95%CL (1 toyMC)
   68% expected band : 1.04203 < r < 1.04203
   95% expected band : 1.04203 < r < 1.04203
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1274716547
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39649 +/- 0.00234754 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.39649 @ 95%CL (1 toyMC)
median expected limit: r < 1.39649 @ 95%CL (1 toyMC)
   68% expected band : 1.39649 < r < 1.39649
   95% expected band : 1.39649 < r < 1.39649
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2060781727
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38922 +/- 0.00406125 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.38922 @ 95%CL (1 toyMC)
median expected limit: r < 1.38922 @ 95%CL (1 toyMC)
   68% expected band : 1.38922 < r < 1.38922
   95% expected band : 1.38922 < r < 1.38922
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 890716712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44692 +/- 0.00332754 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.44692 @ 95%CL (1 toyMC)
median expected limit: r < 1.44692 @ 95%CL (1 toyMC)
   68% expected band : 1.44692 < r < 1.44692
   95% expected band : 1.44692 < r < 1.44692
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2137429446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09915 +/- 0.00342179 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.09915 @ 95%CL (1 toyMC)
median expected limit: r < 1.09915 @ 95%CL (1 toyMC)
   68% expected band : 1.09915 < r < 1.09915
   95% expected band : 1.09915 < r < 1.09915
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 880907886
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54406 +/- 0.00345925 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 1.54406 @ 95%CL (1 toyMC)
median expected limit: r < 1.54406 @ 95%CL (1 toyMC)
   68% expected band : 1.54406 < r < 1.54406
   95% expected band : 1.54406 < r < 1.54406
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -640695396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1769 +/- 0.00298774 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.1769 @ 95%CL (1 toyMC)
median expected limit: r < 1.1769 @ 95%CL (1 toyMC)
   68% expected band : 1.1769 < r < 1.1769
   95% expected band : 1.1769 < r < 1.1769
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1515210532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.79701 +/- 0.00281856 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.79701 @ 95%CL (1 toyMC)
median expected limit: r < 0.79701 @ 95%CL (1 toyMC)
   68% expected band : 0.79701 < r < 0.79701
   95% expected band : 0.79701 < r < 0.79701
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 310223330
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18872 +/- 0.00306057 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.18872 @ 95%CL (1 toyMC)
median expected limit: r < 1.18872 @ 95%CL (1 toyMC)
   68% expected band : 1.18872 < r < 1.18872
   95% expected band : 1.18872 < r < 1.18872
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1851524078
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.912168 +/- 0.00317189 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.912168 @ 95%CL (1 toyMC)
median expected limit: r < 0.912168 @ 95%CL (1 toyMC)
   68% expected band : 0.912168 < r < 0.912168
   95% expected band : 0.912168 < r < 0.912168
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1619951690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.47312 +/- 0.00371868 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.47312 @ 95%CL (1 toyMC)
median expected limit: r < 1.47312 @ 95%CL (1 toyMC)
   68% expected band : 1.47312 < r < 1.47312
   95% expected band : 1.47312 < r < 1.47312
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1341094935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33896 +/- 0.00335496 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.33896 @ 95%CL (1 toyMC)
median expected limit: r < 1.33896 @ 95%CL (1 toyMC)
   68% expected band : 1.33896 < r < 1.33896
   95% expected band : 1.33896 < r < 1.33896
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 325746079
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44793 +/- 0.00322566 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.44793 @ 95%CL (1 toyMC)
median expected limit: r < 1.44793 @ 95%CL (1 toyMC)
   68% expected band : 1.44793 < r < 1.44793
   95% expected band : 1.44793 < r < 1.44793
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1088474076
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.822693 +/- 0.00374244 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.822693 @ 95%CL (1 toyMC)
median expected limit: r < 0.822693 @ 95%CL (1 toyMC)
   68% expected band : 0.822693 < r < 0.822693
   95% expected band : 0.822693 < r < 0.822693
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -442970199
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.782317 +/- 0.00337079 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.782317 @ 95%CL (1 toyMC)
median expected limit: r < 0.782317 @ 95%CL (1 toyMC)
   68% expected band : 0.782317 < r < 0.782317
   95% expected band : 0.782317 < r < 0.782317
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1825543788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00042 +/- 0.00348682 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.00042 @ 95%CL (1 toyMC)
median expected limit: r < 1.00042 @ 95%CL (1 toyMC)
   68% expected band : 1.00042 < r < 1.00042
   95% expected band : 1.00042 < r < 1.00042
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 170685588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22812 +/- 0.00199007 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.22812 @ 95%CL (1 toyMC)
median expected limit: r < 1.22812 @ 95%CL (1 toyMC)
   68% expected band : 1.22812 < r < 1.22812
   95% expected band : 1.22812 < r < 1.22812
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1895287521
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24306 +/- 0.00325511 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.24306 @ 95%CL (1 toyMC)
median expected limit: r < 1.24306 @ 95%CL (1 toyMC)
   68% expected band : 1.24306 < r < 1.24306
   95% expected band : 1.24306 < r < 1.24306
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1648447196
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.93079 +/- 0.00341809 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.93079 @ 95%CL (1 toyMC)
median expected limit: r < 0.93079 @ 95%CL (1 toyMC)
   68% expected band : 0.93079 < r < 0.93079
   95% expected band : 0.93079 < r < 0.93079
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -269096437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45536 +/- 0.00341699 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.45536 @ 95%CL (1 toyMC)
median expected limit: r < 1.45536 @ 95%CL (1 toyMC)
   68% expected band : 1.45536 < r < 1.45536
   95% expected band : 1.45536 < r < 1.45536
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1703059474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13068 +/- 0.00460761 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.13068 @ 95%CL (1 toyMC)
median expected limit: r < 1.13068 @ 95%CL (1 toyMC)
   68% expected band : 1.13068 < r < 1.13068
   95% expected band : 1.13068 < r < 1.13068
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1148054931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.735225 +/- 0.00383161 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.735225 @ 95%CL (1 toyMC)
median expected limit: r < 0.735225 @ 95%CL (1 toyMC)
   68% expected band : 0.735225 < r < 0.735225
   95% expected band : 0.735225 < r < 0.735225
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 12287578
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.613657 +/- 0.00292104 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.613657 @ 95%CL (1 toyMC)
median expected limit: r < 0.613657 @ 95%CL (1 toyMC)
   68% expected band : 0.613657 < r < 0.613657
   95% expected band : 0.613657 < r < 0.613657
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1312164449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.995863 +/- 0.00353863 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.995863 @ 95%CL (1 toyMC)
median expected limit: r < 0.995863 @ 95%CL (1 toyMC)
   68% expected band : 0.995863 < r < 0.995863
   95% expected band : 0.995863 < r < 0.995863
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1783897931
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14388 +/- 0.00306681 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.14388 @ 95%CL (1 toyMC)
median expected limit: r < 1.14388 @ 95%CL (1 toyMC)
   68% expected band : 1.14388 < r < 1.14388
   95% expected band : 1.14388 < r < 1.14388
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1960296298
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.702309 +/- 0.0036557 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.702309 @ 95%CL (1 toyMC)
median expected limit: r < 0.702309 @ 95%CL (1 toyMC)
   68% expected band : 0.702309 < r < 0.702309
   95% expected band : 0.702309 < r < 0.702309
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1707946586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10764 +/- 0.00312853 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.10764 @ 95%CL (1 toyMC)
median expected limit: r < 1.10764 @ 95%CL (1 toyMC)
   68% expected band : 1.10764 < r < 1.10764
   95% expected band : 1.10764 < r < 1.10764
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -79961190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08703 +/- 0.00390685 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.08703 @ 95%CL (1 toyMC)
median expected limit: r < 1.08703 @ 95%CL (1 toyMC)
   68% expected band : 1.08703 < r < 1.08703
   95% expected band : 1.08703 < r < 1.08703
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1331952744
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59629 +/- 0.00328008 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.59629 @ 95%CL (1 toyMC)
median expected limit: r < 1.59629 @ 95%CL (1 toyMC)
   68% expected band : 1.59629 < r < 1.59629
   95% expected band : 1.59629 < r < 1.59629
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 928278302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.780493 +/- 0.00333389 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.780493 @ 95%CL (1 toyMC)
median expected limit: r < 0.780493 @ 95%CL (1 toyMC)
   68% expected band : 0.780493 < r < 0.780493
   95% expected band : 0.780493 < r < 0.780493
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 843504079
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.8472 +/- 0.00299367 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.8472 @ 95%CL (1 toyMC)
median expected limit: r < 0.8472 @ 95%CL (1 toyMC)
   68% expected band : 0.8472 < r < 0.8472
   95% expected band : 0.8472 < r < 0.8472
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -679441838
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19019 +/- 0.0036025 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.19019 @ 95%CL (1 toyMC)
median expected limit: r < 1.19019 @ 95%CL (1 toyMC)
   68% expected band : 1.19019 < r < 1.19019
   95% expected band : 1.19019 < r < 1.19019
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1006680812
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23001 +/- 0.00305694 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.23001 @ 95%CL (1 toyMC)
median expected limit: r < 1.23001 @ 95%CL (1 toyMC)
   68% expected band : 1.23001 < r < 1.23001
   95% expected band : 1.23001 < r < 1.23001
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1154565481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.752049 +/- 0.00284247 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.752049 @ 95%CL (1 toyMC)
median expected limit: r < 0.752049 @ 95%CL (1 toyMC)
   68% expected band : 0.752049 < r < 0.752049
   95% expected band : 0.752049 < r < 0.752049
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 79738719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00366 +/- 0.00360748 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.00366 @ 95%CL (1 toyMC)
median expected limit: r < 1.00366 @ 95%CL (1 toyMC)
   68% expected band : 1.00366 < r < 1.00366
   95% expected band : 1.00366 < r < 1.00366
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 848256431
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05939 +/- 0.00289359 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.05939 @ 95%CL (1 toyMC)
median expected limit: r < 1.05939 @ 95%CL (1 toyMC)
   68% expected band : 1.05939 < r < 1.05939
   95% expected band : 1.05939 < r < 1.05939
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2071462976
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.905031 +/- 0.00363462 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.905031 @ 95%CL (1 toyMC)
median expected limit: r < 0.905031 @ 95%CL (1 toyMC)
   68% expected band : 0.905031 < r < 0.905031
   95% expected band : 0.905031 < r < 0.905031
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -415950927
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19724 +/- 0.00394413 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.19724 @ 95%CL (1 toyMC)
median expected limit: r < 1.19724 @ 95%CL (1 toyMC)
   68% expected band : 1.19724 < r < 1.19724
   95% expected band : 1.19724 < r < 1.19724
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 642776486
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.750459 +/- 0.00281206 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.750459 @ 95%CL (1 toyMC)
median expected limit: r < 0.750459 @ 95%CL (1 toyMC)
   68% expected band : 0.750459 < r < 0.750459
   95% expected band : 0.750459 < r < 0.750459
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -814008903
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04385 +/- 0.00367533 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.04385 @ 95%CL (1 toyMC)
median expected limit: r < 1.04385 @ 95%CL (1 toyMC)
   68% expected band : 1.04385 < r < 1.04385
   95% expected band : 1.04385 < r < 1.04385
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1003573379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.888715 +/- 0.00337678 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.888715 @ 95%CL (1 toyMC)
median expected limit: r < 0.888715 @ 95%CL (1 toyMC)
   68% expected band : 0.888715 < r < 0.888715
   95% expected band : 0.888715 < r < 0.888715
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1094361343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22016 +/- 0.00396218 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.22016 @ 95%CL (1 toyMC)
median expected limit: r < 1.22016 @ 95%CL (1 toyMC)
   68% expected band : 1.22016 < r < 1.22016
   95% expected band : 1.22016 < r < 1.22016
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1452991731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00557 +/- 0.00239395 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.00557 @ 95%CL (1 toyMC)
median expected limit: r < 1.00557 @ 95%CL (1 toyMC)
   68% expected band : 1.00557 < r < 1.00557
   95% expected band : 1.00557 < r < 1.00557
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2069979010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.961024 +/- 0.00310888 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.961024 @ 95%CL (1 toyMC)
median expected limit: r < 0.961024 @ 95%CL (1 toyMC)
   68% expected band : 0.961024 < r < 0.961024
   95% expected band : 0.961024 < r < 0.961024
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1783047916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32378 +/- 0.00315875 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.32378 @ 95%CL (1 toyMC)
median expected limit: r < 1.32378 @ 95%CL (1 toyMC)
   68% expected band : 1.32378 < r < 1.32378
   95% expected band : 1.32378 < r < 1.32378
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -219190968
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31174 +/- 0.00319794 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.31174 @ 95%CL (1 toyMC)
median expected limit: r < 1.31174 @ 95%CL (1 toyMC)
   68% expected band : 1.31174 < r < 1.31174
   95% expected band : 1.31174 < r < 1.31174
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -889884835
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.20084 +/- 0.00397024 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.20084 @ 95%CL (1 toyMC)
median expected limit: r < 2.20084 @ 95%CL (1 toyMC)
   68% expected band : 2.20084 < r < 2.20084
   95% expected band : 2.20084 < r < 2.20084
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1818919970
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.808975 +/- 0.00343776 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.808975 @ 95%CL (1 toyMC)
median expected limit: r < 0.808975 @ 95%CL (1 toyMC)
   68% expected band : 0.808975 < r < 0.808975
   95% expected band : 0.808975 < r < 0.808975
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 840949540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14115 +/- 0.0039485 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.14115 @ 95%CL (1 toyMC)
median expected limit: r < 1.14115 @ 95%CL (1 toyMC)
   68% expected band : 1.14115 < r < 1.14115
   95% expected band : 1.14115 < r < 1.14115
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1469250875
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.682604 +/- 0.00324709 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.682604 @ 95%CL (1 toyMC)
median expected limit: r < 0.682604 @ 95%CL (1 toyMC)
   68% expected band : 0.682604 < r < 0.682604
   95% expected band : 0.682604 < r < 0.682604
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 980148044
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44708 +/- 0.00306591 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.44708 @ 95%CL (1 toyMC)
median expected limit: r < 1.44708 @ 95%CL (1 toyMC)
   68% expected band : 1.44708 < r < 1.44708
   95% expected band : 1.44708 < r < 1.44708
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -667005536
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.974273 +/- 0.00381362 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.974273 @ 95%CL (1 toyMC)
median expected limit: r < 0.974273 @ 95%CL (1 toyMC)
   68% expected band : 0.974273 < r < 0.974273
   95% expected band : 0.974273 < r < 0.974273
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 601294684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.870985 +/- 0.00307077 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.870985 @ 95%CL (1 toyMC)
median expected limit: r < 0.870985 @ 95%CL (1 toyMC)
   68% expected band : 0.870985 < r < 0.870985
   95% expected band : 0.870985 < r < 0.870985
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -332180242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.813668 +/- 0.00305531 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.813668 @ 95%CL (1 toyMC)
median expected limit: r < 0.813668 @ 95%CL (1 toyMC)
   68% expected band : 0.813668 < r < 0.813668
   95% expected band : 0.813668 < r < 0.813668
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 960451881
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18536 +/- 0.00425471 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.18536 @ 95%CL (1 toyMC)
median expected limit: r < 1.18536 @ 95%CL (1 toyMC)
   68% expected band : 1.18536 < r < 1.18536
   95% expected band : 1.18536 < r < 1.18536
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 795120014
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11675 +/- 0.00324374 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.11675 @ 95%CL (1 toyMC)
median expected limit: r < 1.11675 @ 95%CL (1 toyMC)
   68% expected band : 1.11675 < r < 1.11675
   95% expected band : 1.11675 < r < 1.11675
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1789122685
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.951446 +/- 0.00256634 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.951446 @ 95%CL (1 toyMC)
median expected limit: r < 0.951446 @ 95%CL (1 toyMC)
   68% expected band : 0.951446 < r < 0.951446
   95% expected band : 0.951446 < r < 0.951446
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -111863230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.702107 +/- 0.00301613 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.702107 @ 95%CL (1 toyMC)
median expected limit: r < 0.702107 @ 95%CL (1 toyMC)
   68% expected band : 0.702107 < r < 0.702107
   95% expected band : 0.702107 < r < 0.702107
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1112018171
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.960964 +/- 0.00317794 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.960964 @ 95%CL (1 toyMC)
median expected limit: r < 0.960964 @ 95%CL (1 toyMC)
   68% expected band : 0.960964 < r < 0.960964
   95% expected band : 0.960964 < r < 0.960964
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -483757639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.982632 +/- 0.0033821 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.982632 @ 95%CL (1 toyMC)
median expected limit: r < 0.982632 @ 95%CL (1 toyMC)
   68% expected band : 0.982632 < r < 0.982632
   95% expected band : 0.982632 < r < 0.982632
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 165065932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03853 +/- 0.00387384 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.03853 @ 95%CL (1 toyMC)
median expected limit: r < 1.03853 @ 95%CL (1 toyMC)
   68% expected band : 1.03853 < r < 1.03853
   95% expected band : 1.03853 < r < 1.03853
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 765854145
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.663734 +/- 0.00274879 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.663734 @ 95%CL (1 toyMC)
median expected limit: r < 0.663734 @ 95%CL (1 toyMC)
   68% expected band : 0.663734 < r < 0.663734
   95% expected band : 0.663734 < r < 0.663734
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -534548421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28381 +/- 0.00323926 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.28381 @ 95%CL (1 toyMC)
median expected limit: r < 1.28381 @ 95%CL (1 toyMC)
   68% expected band : 1.28381 < r < 1.28381
   95% expected band : 1.28381 < r < 1.28381
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1366406325
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07395 +/- 0.00292332 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.07395 @ 95%CL (1 toyMC)
median expected limit: r < 1.07395 @ 95%CL (1 toyMC)
   68% expected band : 1.07395 < r < 1.07395
   95% expected band : 1.07395 < r < 1.07395
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -674323758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.704282 +/- 0.00260183 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.704282 @ 95%CL (1 toyMC)
median expected limit: r < 0.704282 @ 95%CL (1 toyMC)
   68% expected band : 0.704282 < r < 0.704282
   95% expected band : 0.704282 < r < 0.704282
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2147170736
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28378 +/- 0.0034442 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.28378 @ 95%CL (1 toyMC)
median expected limit: r < 1.28378 @ 95%CL (1 toyMC)
   68% expected band : 1.28378 < r < 1.28378
   95% expected band : 1.28378 < r < 1.28378
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1548101937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.741932 +/- 0.00306156 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.741932 @ 95%CL (1 toyMC)
median expected limit: r < 0.741932 @ 95%CL (1 toyMC)
   68% expected band : 0.741932 < r < 0.741932
   95% expected band : 0.741932 < r < 0.741932
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 605852654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.480141 +/- 0.00304452 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.480141 @ 95%CL (1 toyMC)
median expected limit: r < 0.480141 @ 95%CL (1 toyMC)
   68% expected band : 0.480141 < r < 0.480141
   95% expected band : 0.480141 < r < 0.480141
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -151500910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57101 +/- 0.00342842 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.57101 @ 95%CL (1 toyMC)
median expected limit: r < 1.57101 @ 95%CL (1 toyMC)
   68% expected band : 1.57101 < r < 1.57101
   95% expected band : 1.57101 < r < 1.57101
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -945870573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.810852 +/- 0.00291555 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.810852 @ 95%CL (1 toyMC)
median expected limit: r < 0.810852 @ 95%CL (1 toyMC)
   68% expected band : 0.810852 < r < 0.810852
   95% expected band : 0.810852 < r < 0.810852
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1160339924
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5338 +/- 0.00340494 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.5338 @ 95%CL (1 toyMC)
median expected limit: r < 1.5338 @ 95%CL (1 toyMC)
   68% expected band : 1.5338 < r < 1.5338
   95% expected band : 1.5338 < r < 1.5338
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1794620571
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72933 +/- 0.00300257 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.72933 @ 95%CL (1 toyMC)
median expected limit: r < 1.72933 @ 95%CL (1 toyMC)
   68% expected band : 1.72933 < r < 1.72933
   95% expected band : 1.72933 < r < 1.72933
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 90449514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61633 +/- 0.00441172 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.61633 @ 95%CL (1 toyMC)
median expected limit: r < 1.61633 @ 95%CL (1 toyMC)
   68% expected band : 1.61633 < r < 1.61633
   95% expected band : 1.61633 < r < 1.61633
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1207236639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00112 +/- 0.00280324 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.00112 @ 95%CL (1 toyMC)
median expected limit: r < 1.00112 @ 95%CL (1 toyMC)
   68% expected band : 1.00112 < r < 1.00112
   95% expected band : 1.00112 < r < 1.00112
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -674708316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.882931 +/- 0.00353536 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.882931 @ 95%CL (1 toyMC)
median expected limit: r < 0.882931 @ 95%CL (1 toyMC)
   68% expected band : 0.882931 < r < 0.882931
   95% expected band : 0.882931 < r < 0.882931
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1881692854
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.671189 +/- 0.00317895 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.671189 @ 95%CL (1 toyMC)
median expected limit: r < 0.671189 @ 95%CL (1 toyMC)
   68% expected band : 0.671189 < r < 0.671189
   95% expected band : 0.671189 < r < 0.671189
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1845421805
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48935 +/- 0.00411463 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.48935 @ 95%CL (1 toyMC)
median expected limit: r < 1.48935 @ 95%CL (1 toyMC)
   68% expected band : 1.48935 < r < 1.48935
   95% expected band : 1.48935 < r < 1.48935
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1866756743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.846516 +/- 0.00324637 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.846516 @ 95%CL (1 toyMC)
median expected limit: r < 0.846516 @ 95%CL (1 toyMC)
   68% expected band : 0.846516 < r < 0.846516
   95% expected band : 0.846516 < r < 0.846516
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1950826818
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05697 +/- 0.00340199 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.05697 @ 95%CL (1 toyMC)
median expected limit: r < 1.05697 @ 95%CL (1 toyMC)
   68% expected band : 1.05697 < r < 1.05697
   95% expected band : 1.05697 < r < 1.05697
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 440118123
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52053 +/- 0.00332446 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.52053 @ 95%CL (1 toyMC)
median expected limit: r < 1.52053 @ 95%CL (1 toyMC)
   68% expected band : 1.52053 < r < 1.52053
   95% expected band : 1.52053 < r < 1.52053
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1441392897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.767465 +/- 0.00313953 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.767465 @ 95%CL (1 toyMC)
median expected limit: r < 0.767465 @ 95%CL (1 toyMC)
   68% expected band : 0.767465 < r < 0.767465
   95% expected band : 0.767465 < r < 0.767465
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1411229602
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85165 +/- 0.00322395 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.85165 @ 95%CL (1 toyMC)
median expected limit: r < 1.85165 @ 95%CL (1 toyMC)
   68% expected band : 1.85165 < r < 1.85165
   95% expected band : 1.85165 < r < 1.85165
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -149140871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.530601 +/- 0.00244675 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.530601 @ 95%CL (1 toyMC)
median expected limit: r < 0.530601 @ 95%CL (1 toyMC)
   68% expected band : 0.530601 < r < 0.530601
   95% expected band : 0.530601 < r < 0.530601
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 455529766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.892355 +/- 0.00290147 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.892355 @ 95%CL (1 toyMC)
median expected limit: r < 0.892355 @ 95%CL (1 toyMC)
   68% expected band : 0.892355 < r < 0.892355
   95% expected band : 0.892355 < r < 0.892355
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2100848567
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.641848 +/- 0.00332505 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.641848 @ 95%CL (1 toyMC)
median expected limit: r < 0.641848 @ 95%CL (1 toyMC)
   68% expected band : 0.641848 < r < 0.641848
   95% expected band : 0.641848 < r < 0.641848
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1317677627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00232 +/- 0.00390887 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.00232 @ 95%CL (1 toyMC)
median expected limit: r < 1.00232 @ 95%CL (1 toyMC)
   68% expected band : 1.00232 < r < 1.00232
   95% expected band : 1.00232 < r < 1.00232
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 822767951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.903681 +/- 0.00318512 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.903681 @ 95%CL (1 toyMC)
median expected limit: r < 0.903681 @ 95%CL (1 toyMC)
   68% expected band : 0.903681 < r < 0.903681
   95% expected band : 0.903681 < r < 0.903681
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1280165513
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18474 +/- 0.00334185 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.18474 @ 95%CL (1 toyMC)
median expected limit: r < 1.18474 @ 95%CL (1 toyMC)
   68% expected band : 1.18474 < r < 1.18474
   95% expected band : 1.18474 < r < 1.18474
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1493423891
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14199 +/- 0.00407071 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.14199 @ 95%CL (1 toyMC)
median expected limit: r < 1.14199 @ 95%CL (1 toyMC)
   68% expected band : 1.14199 < r < 1.14199
   95% expected band : 1.14199 < r < 1.14199
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1132962193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.862062 +/- 0.00341525 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.862062 @ 95%CL (1 toyMC)
median expected limit: r < 0.862062 @ 95%CL (1 toyMC)
   68% expected band : 0.862062 < r < 0.862062
   95% expected band : 0.862062 < r < 0.862062
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1959249849
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.749224 +/- 0.00340865 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.749224 @ 95%CL (1 toyMC)
median expected limit: r < 0.749224 @ 95%CL (1 toyMC)
   68% expected band : 0.749224 < r < 0.749224
   95% expected band : 0.749224 < r < 0.749224
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -53185668
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.608449 +/- 0.002972 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.608449 @ 95%CL (1 toyMC)
median expected limit: r < 0.608449 @ 95%CL (1 toyMC)
   68% expected band : 0.608449 < r < 0.608449
   95% expected band : 0.608449 < r < 0.608449
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1484079382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.707924 +/- 0.00337457 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.707924 @ 95%CL (1 toyMC)
median expected limit: r < 0.707924 @ 95%CL (1 toyMC)
   68% expected band : 0.707924 < r < 0.707924
   95% expected band : 0.707924 < r < 0.707924
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1224686541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.723542 +/- 0.00354585 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.723542 @ 95%CL (1 toyMC)
median expected limit: r < 0.723542 @ 95%CL (1 toyMC)
   68% expected band : 0.723542 < r < 0.723542
   95% expected band : 0.723542 < r < 0.723542
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine28.MarkovChainMC.mH28.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH28.-1072613379.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH28.-1088474076.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH28.-1094361343.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH28.-111863230.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH28.-1132962193.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH28.-1148054931.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH28.-1152529481.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH28.-1160339924.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH28.-1224686541.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH28.-1232458975.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH28.-1280165513.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH28.-1312164449.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH28.-1331952744.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH28.-1341094935.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH28.-1469250875.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH28.-1484079382.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH28.-149140871.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH28.-151500910.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH28.-1548101937.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH28.-1707946586.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH28.-1789122685.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH28.-1794620571.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH28.-1818919970.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH28.-1825543788.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH28.-1845421805.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH28.-1866756743.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH28.-1950826818.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH28.-219190968.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH28.-269096437.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH28.-332180242.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH28.-415950927.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH28.-442970199.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH28.-483757639.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH28.-53185668.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH28.-534548421.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH28.-640695396.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH28.-667005536.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH28.-674323758.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH28.-674708316.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH28.-679441838.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH28.-79961190.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH28.-814008903.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH28.-889884835.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH28.-945870573.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH28.1003573379.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH28.1006680812.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH28.1112018171.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH28.1154565481.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH28.1207236639.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH28.12287578.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH28.1274716547.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH28.1317677627.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH28.1345938384.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH28.1366406325.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH28.1411229602.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH28.1441392897.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH28.1452991731.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH28.1460818188.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH28.1493423891.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH28.1515210532.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH28.1604405829.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH28.1619951690.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH28.1648447196.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH28.165065932.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH28.1703059474.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH28.170685588.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH28.1783047916.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH28.1783897931.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH28.1851524078.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH28.1881692854.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH28.1895287521.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH28.1959249849.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH28.1960296298.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH28.2060781727.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH28.2069979010.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH28.2071462976.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH28.2100848567.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH28.2137429446.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH28.2147170736.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH28.310223330.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH28.325746079.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH28.391934553.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH28.440118123.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH28.455529766.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH28.601294684.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH28.605852654.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH28.642776486.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH28.765854145.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH28.795120014.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH28.79738719.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH28.822767951.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH28.840949540.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH28.843504079.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH28.848256431.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH28.880907886.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH28.890716712.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH28.90449514.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH28.928278302.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH28.960451881.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH28.980148044.root
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1571157481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.868557 +/- 0.00396308 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.868557 @ 95%CL (1 toyMC)
median expected limit: r < 0.868557 @ 95%CL (1 toyMC)
   68% expected band : 0.868557 < r < 0.868557
   95% expected band : 0.868557 < r < 0.868557
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1523279450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72661 +/- 0.00458671 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.72661 @ 95%CL (1 toyMC)
median expected limit: r < 1.72661 @ 95%CL (1 toyMC)
   68% expected band : 1.72661 < r < 1.72661
   95% expected band : 1.72661 < r < 1.72661
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1324409875
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51244 +/- 0.00453396 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.51244 @ 95%CL (1 toyMC)
median expected limit: r < 1.51244 @ 95%CL (1 toyMC)
   68% expected band : 1.51244 < r < 1.51244
   95% expected band : 1.51244 < r < 1.51244
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -575236394
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07286 +/- 0.00533152 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.07286 @ 95%CL (1 toyMC)
median expected limit: r < 2.07286 @ 95%CL (1 toyMC)
   68% expected band : 2.07286 < r < 2.07286
   95% expected band : 2.07286 < r < 2.07286
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 800892058
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.78023 +/- 0.00343087 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.78023 @ 95%CL (1 toyMC)
median expected limit: r < 0.78023 @ 95%CL (1 toyMC)
   68% expected band : 0.78023 < r < 0.78023
   95% expected band : 0.78023 < r < 0.78023
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 773141678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04429 +/- 0.00390862 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.04429 @ 95%CL (1 toyMC)
median expected limit: r < 1.04429 @ 95%CL (1 toyMC)
   68% expected band : 1.04429 < r < 1.04429
   95% expected band : 1.04429 < r < 1.04429
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 103114167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57751 +/- 0.00404382 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.57751 @ 95%CL (1 toyMC)
median expected limit: r < 1.57751 @ 95%CL (1 toyMC)
   68% expected band : 1.57751 < r < 1.57751
   95% expected band : 1.57751 < r < 1.57751
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 797188803
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20924 +/- 0.00464414 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.20924 @ 95%CL (1 toyMC)
median expected limit: r < 1.20924 @ 95%CL (1 toyMC)
   68% expected band : 1.20924 < r < 1.20924
   95% expected band : 1.20924 < r < 1.20924
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1475796417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28645 +/- 0.00328962 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.28645 @ 95%CL (1 toyMC)
median expected limit: r < 1.28645 @ 95%CL (1 toyMC)
   68% expected band : 1.28645 < r < 1.28645
   95% expected band : 1.28645 < r < 1.28645
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1930131293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80358 +/- 0.00527039 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.80358 @ 95%CL (1 toyMC)
median expected limit: r < 1.80358 @ 95%CL (1 toyMC)
   68% expected band : 1.80358 < r < 1.80358
   95% expected band : 1.80358 < r < 1.80358
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -341350562
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13402 +/- 0.00326169 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.13402 @ 95%CL (1 toyMC)
median expected limit: r < 1.13402 @ 95%CL (1 toyMC)
   68% expected band : 1.13402 < r < 1.13402
   95% expected band : 1.13402 < r < 1.13402
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 825987528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82354 +/- 0.00392956 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.82354 @ 95%CL (1 toyMC)
median expected limit: r < 1.82354 @ 95%CL (1 toyMC)
   68% expected band : 1.82354 < r < 1.82354
   95% expected band : 1.82354 < r < 1.82354
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1079199382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11634 +/- 0.00356665 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.11634 @ 95%CL (1 toyMC)
median expected limit: r < 1.11634 @ 95%CL (1 toyMC)
   68% expected band : 1.11634 < r < 1.11634
   95% expected band : 1.11634 < r < 1.11634
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1578257550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14383 +/- 0.00587907 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.14383 @ 95%CL (1 toyMC)
median expected limit: r < 2.14383 @ 95%CL (1 toyMC)
   68% expected band : 2.14383 < r < 2.14383
   95% expected band : 2.14383 < r < 2.14383
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -844297188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73846 +/- 0.00456238 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.73846 @ 95%CL (1 toyMC)
median expected limit: r < 1.73846 @ 95%CL (1 toyMC)
   68% expected band : 1.73846 < r < 1.73846
   95% expected band : 1.73846 < r < 1.73846
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1230345843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1186 +/- 0.00416393 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.1186 @ 95%CL (1 toyMC)
median expected limit: r < 1.1186 @ 95%CL (1 toyMC)
   68% expected band : 1.1186 < r < 1.1186
   95% expected band : 1.1186 < r < 1.1186
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1550540989
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.41759 +/- 0.00558439 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.41759 @ 95%CL (1 toyMC)
median expected limit: r < 2.41759 @ 95%CL (1 toyMC)
   68% expected band : 2.41759 < r < 2.41759
   95% expected band : 2.41759 < r < 2.41759
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1563736965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99847 +/- 0.00453224 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.99847 @ 95%CL (1 toyMC)
median expected limit: r < 1.99847 @ 95%CL (1 toyMC)
   68% expected band : 1.99847 < r < 1.99847
   95% expected band : 1.99847 < r < 1.99847
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1514781524
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03472 +/- 0.00327664 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.03472 @ 95%CL (1 toyMC)
median expected limit: r < 1.03472 @ 95%CL (1 toyMC)
   68% expected band : 1.03472 < r < 1.03472
   95% expected band : 1.03472 < r < 1.03472
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -896567995
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46591 +/- 0.00502915 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.46591 @ 95%CL (1 toyMC)
median expected limit: r < 1.46591 @ 95%CL (1 toyMC)
   68% expected band : 1.46591 < r < 1.46591
   95% expected band : 1.46591 < r < 1.46591
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 518986286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64766 +/- 0.00467446 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.64766 @ 95%CL (1 toyMC)
median expected limit: r < 1.64766 @ 95%CL (1 toyMC)
   68% expected band : 1.64766 < r < 1.64766
   95% expected band : 1.64766 < r < 1.64766
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 820567761
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30403 +/- 0.00329604 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.30403 @ 95%CL (1 toyMC)
median expected limit: r < 1.30403 @ 95%CL (1 toyMC)
   68% expected band : 1.30403 < r < 1.30403
   95% expected band : 1.30403 < r < 1.30403
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1900103312
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07353 +/- 0.0029318 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.07353 @ 95%CL (1 toyMC)
median expected limit: r < 1.07353 @ 95%CL (1 toyMC)
   68% expected band : 1.07353 < r < 1.07353
   95% expected band : 1.07353 < r < 1.07353
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 728038238
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.34439 +/- 0.00446535 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.34439 @ 95%CL (1 toyMC)
median expected limit: r < 2.34439 @ 95%CL (1 toyMC)
   68% expected band : 2.34439 < r < 2.34439
   95% expected band : 2.34439 < r < 2.34439
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -270680595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5004 +/- 0.00393654 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.5004 @ 95%CL (1 toyMC)
median expected limit: r < 2.5004 @ 95%CL (1 toyMC)
   68% expected band : 2.5004 < r < 2.5004
   95% expected band : 2.5004 < r < 2.5004
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1852729622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53099 +/- 0.00446968 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.53099 @ 95%CL (1 toyMC)
median expected limit: r < 2.53099 @ 95%CL (1 toyMC)
   68% expected band : 2.53099 < r < 2.53099
   95% expected band : 2.53099 < r < 2.53099
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1383069878
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85909 +/- 0.00531512 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.85909 @ 95%CL (1 toyMC)
median expected limit: r < 1.85909 @ 95%CL (1 toyMC)
   68% expected band : 1.85909 < r < 1.85909
   95% expected band : 1.85909 < r < 1.85909
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2122017205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98477 +/- 0.00337343 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.98477 @ 95%CL (1 toyMC)
median expected limit: r < 2.98477 @ 95%CL (1 toyMC)
   68% expected band : 2.98477 < r < 2.98477
   95% expected band : 2.98477 < r < 2.98477
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 616047096
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69326 +/- 0.00408383 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.69326 @ 95%CL (1 toyMC)
median expected limit: r < 1.69326 @ 95%CL (1 toyMC)
   68% expected band : 1.69326 < r < 1.69326
   95% expected band : 1.69326 < r < 1.69326
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -63456381
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.16807 +/- 0.00396629 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.16807 @ 95%CL (1 toyMC)
median expected limit: r < 2.16807 @ 95%CL (1 toyMC)
   68% expected band : 2.16807 < r < 2.16807
   95% expected band : 2.16807 < r < 2.16807
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1241737915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81822 +/- 0.00462644 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.81822 @ 95%CL (1 toyMC)
median expected limit: r < 1.81822 @ 95%CL (1 toyMC)
   68% expected band : 1.81822 < r < 1.81822
   95% expected band : 1.81822 < r < 1.81822
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1742898278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07666 +/- 0.00498286 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 2.07666 @ 95%CL (1 toyMC)
median expected limit: r < 2.07666 @ 95%CL (1 toyMC)
   68% expected band : 2.07666 < r < 2.07666
   95% expected band : 2.07666 < r < 2.07666
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1783264692
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.920647 +/- 0.00372057 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.920647 @ 95%CL (1 toyMC)
median expected limit: r < 0.920647 @ 95%CL (1 toyMC)
   68% expected band : 0.920647 < r < 0.920647
   95% expected band : 0.920647 < r < 0.920647
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2121382794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65392 +/- 0.00402992 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.65392 @ 95%CL (1 toyMC)
median expected limit: r < 1.65392 @ 95%CL (1 toyMC)
   68% expected band : 1.65392 < r < 1.65392
   95% expected band : 1.65392 < r < 1.65392
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1700908887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08022 +/- 0.0040176 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.08022 @ 95%CL (1 toyMC)
median expected limit: r < 1.08022 @ 95%CL (1 toyMC)
   68% expected band : 1.08022 < r < 1.08022
   95% expected band : 1.08022 < r < 1.08022
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1734181907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.916692 +/- 0.00403051 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.916692 @ 95%CL (1 toyMC)
median expected limit: r < 0.916692 @ 95%CL (1 toyMC)
   68% expected band : 0.916692 < r < 0.916692
   95% expected band : 0.916692 < r < 0.916692
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2073372928
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43513 +/- 0.00362418 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.43513 @ 95%CL (1 toyMC)
median expected limit: r < 1.43513 @ 95%CL (1 toyMC)
   68% expected band : 1.43513 < r < 1.43513
   95% expected band : 1.43513 < r < 1.43513
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1040153837
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67388 +/- 0.0041487 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.67388 @ 95%CL (1 toyMC)
median expected limit: r < 1.67388 @ 95%CL (1 toyMC)
   68% expected band : 1.67388 < r < 1.67388
   95% expected band : 1.67388 < r < 1.67388
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1254254084
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.57456 +/- 0.00350815 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.57456 @ 95%CL (1 toyMC)
median expected limit: r < 2.57456 @ 95%CL (1 toyMC)
   68% expected band : 2.57456 < r < 2.57456
   95% expected band : 2.57456 < r < 2.57456
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1331641498
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26167 +/- 0.00422698 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.26167 @ 95%CL (1 toyMC)
median expected limit: r < 1.26167 @ 95%CL (1 toyMC)
   68% expected band : 1.26167 < r < 1.26167
   95% expected band : 1.26167 < r < 1.26167
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1768510694
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.950634 +/- 0.00344648 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.950634 @ 95%CL (1 toyMC)
median expected limit: r < 0.950634 @ 95%CL (1 toyMC)
   68% expected band : 0.950634 < r < 0.950634
   95% expected band : 0.950634 < r < 0.950634
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -349567548
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8456 +/- 0.00518543 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.8456 @ 95%CL (1 toyMC)
median expected limit: r < 1.8456 @ 95%CL (1 toyMC)
   68% expected band : 1.8456 < r < 1.8456
   95% expected band : 1.8456 < r < 1.8456
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1183070389
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14362 +/- 0.004669 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.14362 @ 95%CL (1 toyMC)
median expected limit: r < 2.14362 @ 95%CL (1 toyMC)
   68% expected band : 2.14362 < r < 2.14362
   95% expected band : 2.14362 < r < 2.14362
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1450498800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01205 +/- 0.00397123 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.01205 @ 95%CL (1 toyMC)
median expected limit: r < 1.01205 @ 95%CL (1 toyMC)
   68% expected band : 1.01205 < r < 1.01205
   95% expected band : 1.01205 < r < 1.01205
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1654294090
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72775 +/- 0.00383945 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.72775 @ 95%CL (1 toyMC)
median expected limit: r < 1.72775 @ 95%CL (1 toyMC)
   68% expected band : 1.72775 < r < 1.72775
   95% expected band : 1.72775 < r < 1.72775
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1457840004
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.798633 +/- 0.00314524 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.798633 @ 95%CL (1 toyMC)
median expected limit: r < 0.798633 @ 95%CL (1 toyMC)
   68% expected band : 0.798633 < r < 0.798633
   95% expected band : 0.798633 < r < 0.798633
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 467133561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01474 +/- 0.00461791 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.01474 @ 95%CL (1 toyMC)
median expected limit: r < 1.01474 @ 95%CL (1 toyMC)
   68% expected band : 1.01474 < r < 1.01474
   95% expected band : 1.01474 < r < 1.01474
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1828927037
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52176 +/- 0.00460377 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.52176 @ 95%CL (1 toyMC)
median expected limit: r < 1.52176 @ 95%CL (1 toyMC)
   68% expected band : 1.52176 < r < 1.52176
   95% expected band : 1.52176 < r < 1.52176
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -660353025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.06146 +/- 0.00493509 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.06146 @ 95%CL (1 toyMC)
median expected limit: r < 2.06146 @ 95%CL (1 toyMC)
   68% expected band : 2.06146 < r < 2.06146
   95% expected band : 2.06146 < r < 2.06146
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1288534214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59712 +/- 0.00426738 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.46 min (real)
mean   expected limit: r < 1.59712 @ 95%CL (1 toyMC)
median expected limit: r < 1.59712 @ 95%CL (1 toyMC)
   68% expected band : 1.59712 < r < 1.59712
   95% expected band : 1.59712 < r < 1.59712
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -279213028
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33995 +/- 0.00325297 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.33995 @ 95%CL (1 toyMC)
median expected limit: r < 1.33995 @ 95%CL (1 toyMC)
   68% expected band : 1.33995 < r < 1.33995
   95% expected band : 1.33995 < r < 1.33995
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1216235449
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.97033 +/- 0.0049613 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.97033 @ 95%CL (1 toyMC)
median expected limit: r < 2.97033 @ 95%CL (1 toyMC)
   68% expected band : 2.97033 < r < 2.97033
   95% expected band : 2.97033 < r < 2.97033
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2083856994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.91768 +/- 0.00520436 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.91768 @ 95%CL (1 toyMC)
median expected limit: r < 1.91768 @ 95%CL (1 toyMC)
   68% expected band : 1.91768 < r < 1.91768
   95% expected band : 1.91768 < r < 1.91768
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -217479381
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.31367 +/- 0.00433312 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.31367 @ 95%CL (1 toyMC)
median expected limit: r < 2.31367 @ 95%CL (1 toyMC)
   68% expected band : 2.31367 < r < 2.31367
   95% expected band : 2.31367 < r < 2.31367
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1120617206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4049 +/- 0.00446224 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.4049 @ 95%CL (1 toyMC)
median expected limit: r < 2.4049 @ 95%CL (1 toyMC)
   68% expected band : 2.4049 < r < 2.4049
   95% expected band : 2.4049 < r < 2.4049
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -127161259
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69233 +/- 0.00448784 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 1.69233 @ 95%CL (1 toyMC)
median expected limit: r < 1.69233 @ 95%CL (1 toyMC)
   68% expected band : 1.69233 < r < 1.69233
   95% expected band : 1.69233 < r < 1.69233
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1425325391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2057 +/- 0.00412672 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.2057 @ 95%CL (1 toyMC)
median expected limit: r < 2.2057 @ 95%CL (1 toyMC)
   68% expected band : 2.2057 < r < 2.2057
   95% expected band : 2.2057 < r < 2.2057
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1382227059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05132 +/- 0.00349418 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.05132 @ 95%CL (1 toyMC)
median expected limit: r < 1.05132 @ 95%CL (1 toyMC)
   68% expected band : 1.05132 < r < 1.05132
   95% expected band : 1.05132 < r < 1.05132
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1646777821
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44008 +/- 0.00484918 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.44008 @ 95%CL (1 toyMC)
median expected limit: r < 1.44008 @ 95%CL (1 toyMC)
   68% expected band : 1.44008 < r < 1.44008
   95% expected band : 1.44008 < r < 1.44008
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1149973915
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.79496 +/- 0.00416327 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.79496 @ 95%CL (1 toyMC)
median expected limit: r < 1.79496 @ 95%CL (1 toyMC)
   68% expected band : 1.79496 < r < 1.79496
   95% expected band : 1.79496 < r < 1.79496
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -244298066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02802 +/- 0.00342088 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.02802 @ 95%CL (1 toyMC)
median expected limit: r < 1.02802 @ 95%CL (1 toyMC)
   68% expected band : 1.02802 < r < 1.02802
   95% expected band : 1.02802 < r < 1.02802
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1934616068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.83825 +/- 0.00518015 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.83825 @ 95%CL (1 toyMC)
median expected limit: r < 1.83825 @ 95%CL (1 toyMC)
   68% expected band : 1.83825 < r < 1.83825
   95% expected band : 1.83825 < r < 1.83825
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -685364026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00234 +/- 0.00463161 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.00234 @ 95%CL (1 toyMC)
median expected limit: r < 2.00234 @ 95%CL (1 toyMC)
   68% expected band : 2.00234 < r < 2.00234
   95% expected band : 2.00234 < r < 2.00234
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1201828205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76977 +/- 0.00441072 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.76977 @ 95%CL (1 toyMC)
median expected limit: r < 1.76977 @ 95%CL (1 toyMC)
   68% expected band : 1.76977 < r < 1.76977
   95% expected band : 1.76977 < r < 1.76977
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -861849268
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22042 +/- 0.00331281 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.22042 @ 95%CL (1 toyMC)
median expected limit: r < 1.22042 @ 95%CL (1 toyMC)
   68% expected band : 1.22042 < r < 1.22042
   95% expected band : 1.22042 < r < 1.22042
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 917008643
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09831 +/- 0.0039739 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.09831 @ 95%CL (1 toyMC)
median expected limit: r < 1.09831 @ 95%CL (1 toyMC)
   68% expected band : 1.09831 < r < 1.09831
   95% expected band : 1.09831 < r < 1.09831
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2082395132
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42705 +/- 0.0034578 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.42705 @ 95%CL (1 toyMC)
median expected limit: r < 1.42705 @ 95%CL (1 toyMC)
   68% expected band : 1.42705 < r < 1.42705
   95% expected band : 1.42705 < r < 1.42705
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 263945531
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58929 +/- 0.00527725 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.58929 @ 95%CL (1 toyMC)
median expected limit: r < 2.58929 @ 95%CL (1 toyMC)
   68% expected band : 2.58929 < r < 2.58929
   95% expected band : 2.58929 < r < 2.58929
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 831757264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54487 +/- 0.00371 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.54487 @ 95%CL (1 toyMC)
median expected limit: r < 1.54487 @ 95%CL (1 toyMC)
   68% expected band : 1.54487 < r < 1.54487
   95% expected band : 1.54487 < r < 1.54487
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1163189964
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.75568 +/- 0.00367291 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.75568 @ 95%CL (1 toyMC)
median expected limit: r < 1.75568 @ 95%CL (1 toyMC)
   68% expected band : 1.75568 < r < 1.75568
   95% expected band : 1.75568 < r < 1.75568
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1006693898
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46977 +/- 0.00458412 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.46977 @ 95%CL (1 toyMC)
median expected limit: r < 1.46977 @ 95%CL (1 toyMC)
   68% expected band : 1.46977 < r < 1.46977
   95% expected band : 1.46977 < r < 1.46977
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 691159403
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76255 +/- 0.0040069 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.76255 @ 95%CL (1 toyMC)
median expected limit: r < 1.76255 @ 95%CL (1 toyMC)
   68% expected band : 1.76255 < r < 1.76255
   95% expected band : 1.76255 < r < 1.76255
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1884502875
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.93869 +/- 0.0038881 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.93869 @ 95%CL (1 toyMC)
median expected limit: r < 1.93869 @ 95%CL (1 toyMC)
   68% expected band : 1.93869 < r < 1.93869
   95% expected band : 1.93869 < r < 1.93869
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 149385195
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34476 +/- 0.00484574 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.34476 @ 95%CL (1 toyMC)
median expected limit: r < 1.34476 @ 95%CL (1 toyMC)
   68% expected band : 1.34476 < r < 1.34476
   95% expected band : 1.34476 < r < 1.34476
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1140560068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11041 +/- 0.00434511 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.11041 @ 95%CL (1 toyMC)
median expected limit: r < 1.11041 @ 95%CL (1 toyMC)
   68% expected band : 1.11041 < r < 1.11041
   95% expected band : 1.11041 < r < 1.11041
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -969403169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07776 +/- 0.00382406 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.07776 @ 95%CL (1 toyMC)
median expected limit: r < 1.07776 @ 95%CL (1 toyMC)
   68% expected band : 1.07776 < r < 1.07776
   95% expected band : 1.07776 < r < 1.07776
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2010874581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.31839 +/- 0.00532445 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.31839 @ 95%CL (1 toyMC)
median expected limit: r < 2.31839 @ 95%CL (1 toyMC)
   68% expected band : 2.31839 < r < 2.31839
   95% expected band : 2.31839 < r < 2.31839
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1712321582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.05862 +/- 0.00442658 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.05862 @ 95%CL (1 toyMC)
median expected limit: r < 2.05862 @ 95%CL (1 toyMC)
   68% expected band : 2.05862 < r < 2.05862
   95% expected band : 2.05862 < r < 2.05862
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1629369562
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53937 +/- 0.00455214 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.53937 @ 95%CL (1 toyMC)
median expected limit: r < 1.53937 @ 95%CL (1 toyMC)
   68% expected band : 1.53937 < r < 1.53937
   95% expected band : 1.53937 < r < 1.53937
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 51730888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00177 +/- 0.00566976 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.00177 @ 95%CL (1 toyMC)
median expected limit: r < 2.00177 @ 95%CL (1 toyMC)
   68% expected band : 2.00177 < r < 2.00177
   95% expected band : 2.00177 < r < 2.00177
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -817672254
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55467 +/- 0.00407476 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.55467 @ 95%CL (1 toyMC)
median expected limit: r < 1.55467 @ 95%CL (1 toyMC)
   68% expected band : 1.55467 < r < 1.55467
   95% expected band : 1.55467 < r < 1.55467
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -354369131
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37904 +/- 0.00458682 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.37904 @ 95%CL (1 toyMC)
median expected limit: r < 1.37904 @ 95%CL (1 toyMC)
   68% expected band : 1.37904 < r < 1.37904
   95% expected band : 1.37904 < r < 1.37904
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1598339765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31353 +/- 0.00454166 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.31353 @ 95%CL (1 toyMC)
median expected limit: r < 1.31353 @ 95%CL (1 toyMC)
   68% expected band : 1.31353 < r < 1.31353
   95% expected band : 1.31353 < r < 1.31353
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 10630062
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.998252 +/- 0.00333901 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.998252 @ 95%CL (1 toyMC)
median expected limit: r < 0.998252 @ 95%CL (1 toyMC)
   68% expected band : 0.998252 < r < 0.998252
   95% expected band : 0.998252 < r < 0.998252
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 819450950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10547 +/- 0.00397726 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.10547 @ 95%CL (1 toyMC)
median expected limit: r < 1.10547 @ 95%CL (1 toyMC)
   68% expected band : 1.10547 < r < 1.10547
   95% expected band : 1.10547 < r < 1.10547
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1795443709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.18314 +/- 0.00542791 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 4.18314 @ 95%CL (1 toyMC)
median expected limit: r < 4.18314 @ 95%CL (1 toyMC)
   68% expected band : 4.18314 < r < 4.18314
   95% expected band : 4.18314 < r < 4.18314
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 631733986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16038 +/- 0.00384296 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.16038 @ 95%CL (1 toyMC)
median expected limit: r < 1.16038 @ 95%CL (1 toyMC)
   68% expected band : 1.16038 < r < 1.16038
   95% expected band : 1.16038 < r < 1.16038
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -395503900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.50215 +/- 0.00672562 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.50215 @ 95%CL (1 toyMC)
median expected limit: r < 3.50215 @ 95%CL (1 toyMC)
   68% expected band : 3.50215 < r < 3.50215
   95% expected band : 3.50215 < r < 3.50215
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 553880276
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.965607 +/- 0.00353994 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.965607 @ 95%CL (1 toyMC)
median expected limit: r < 0.965607 @ 95%CL (1 toyMC)
   68% expected band : 0.965607 < r < 0.965607
   95% expected band : 0.965607 < r < 0.965607
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -688655020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.7134 +/- 0.0035927 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.7134 @ 95%CL (1 toyMC)
median expected limit: r < 1.7134 @ 95%CL (1 toyMC)
   68% expected band : 1.7134 < r < 1.7134
   95% expected band : 1.7134 < r < 1.7134
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 463226659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.873639 +/- 0.00319414 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.873639 @ 95%CL (1 toyMC)
median expected limit: r < 0.873639 @ 95%CL (1 toyMC)
   68% expected band : 0.873639 < r < 0.873639
   95% expected band : 0.873639 < r < 0.873639
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1719523715
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54678 +/- 0.00388432 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.54678 @ 95%CL (1 toyMC)
median expected limit: r < 1.54678 @ 95%CL (1 toyMC)
   68% expected band : 1.54678 < r < 1.54678
   95% expected band : 1.54678 < r < 1.54678
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -119670697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19129 +/- 0.00535236 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.19129 @ 95%CL (1 toyMC)
median expected limit: r < 1.19129 @ 95%CL (1 toyMC)
   68% expected band : 1.19129 < r < 1.19129
   95% expected band : 1.19129 < r < 1.19129
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1382247315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.96449 +/- 0.00455201 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.96449 @ 95%CL (1 toyMC)
median expected limit: r < 2.96449 @ 95%CL (1 toyMC)
   68% expected band : 2.96449 < r < 2.96449
   95% expected band : 2.96449 < r < 2.96449
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 215907300
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35762 +/- 0.00453968 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.35762 @ 95%CL (1 toyMC)
median expected limit: r < 1.35762 @ 95%CL (1 toyMC)
   68% expected band : 1.35762 < r < 1.35762
   95% expected band : 1.35762 < r < 1.35762
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1550481858
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4351 +/- 0.00426248 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.4351 @ 95%CL (1 toyMC)
median expected limit: r < 3.4351 @ 95%CL (1 toyMC)
   68% expected band : 3.4351 < r < 3.4351
   95% expected band : 3.4351 < r < 3.4351
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 997051514
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48768 +/- 0.00357185 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.48768 @ 95%CL (1 toyMC)
median expected limit: r < 1.48768 @ 95%CL (1 toyMC)
   68% expected band : 1.48768 < r < 1.48768
   95% expected band : 1.48768 < r < 1.48768
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1183334493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92607 +/- 0.0038976 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.92607 @ 95%CL (1 toyMC)
median expected limit: r < 1.92607 @ 95%CL (1 toyMC)
   68% expected band : 1.92607 < r < 1.92607
   95% expected band : 1.92607 < r < 1.92607
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -309815911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07028 +/- 0.00264962 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.07028 @ 95%CL (1 toyMC)
median expected limit: r < 1.07028 @ 95%CL (1 toyMC)
   68% expected band : 1.07028 < r < 1.07028
   95% expected band : 1.07028 < r < 1.07028
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1607775706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11667 +/- 0.0043395 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.11667 @ 95%CL (1 toyMC)
median expected limit: r < 1.11667 @ 95%CL (1 toyMC)
   68% expected band : 1.11667 < r < 1.11667
   95% expected band : 1.11667 < r < 1.11667
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine32.MarkovChainMC.mH32.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH32.-1006693898.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH32.-1079199382.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH32.-1120617206.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH32.-1149973915.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH32.-1183070389.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH32.-119670697.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH32.-1201828205.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH32.-1216235449.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH32.-1230345843.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH32.-127161259.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH32.-1288534214.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH32.-1324409875.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH32.-1382227059.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH32.-1382247315.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH32.-1383069878.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH32.-1425325391.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH32.-1457840004.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH32.-1475796417.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH32.-1523279450.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH32.-1550481858.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH32.-1550540989.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH32.-1563736965.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH32.-1571157481.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH32.-1578257550.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH32.-1598339765.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH32.-1607775706.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH32.-1629369562.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH32.-1646777821.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH32.-1654294090.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH32.-1700908887.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH32.-1734181907.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH32.-1742898278.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH32.-1852729622.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH32.-1930131293.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH32.-1934616068.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH32.-2010874581.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH32.-2073372928.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH32.-2082395132.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH32.-2083856994.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH32.-2121382794.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH32.-2122017205.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH32.-217479381.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH32.-244298066.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH32.-270680595.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH32.-279213028.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH32.-309815911.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH32.-341350562.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH32.-349567548.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH32.-354369131.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH32.-395503900.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH32.-575236394.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH32.-63456381.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH32.-660353025.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH32.-685364026.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH32.-688655020.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH32.-817672254.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH32.-844297188.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH32.-861849268.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH32.-896567995.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH32.-969403169.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH32.103114167.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH32.1040153837.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH32.10630062.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH32.1140560068.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH32.1163189964.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH32.1183334493.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH32.1241737915.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH32.1254254084.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH32.1331641498.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH32.1450498800.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH32.149385195.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH32.1514781524.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH32.1712321582.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH32.1719523715.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH32.1768510694.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH32.1783264692.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH32.1795443709.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH32.1828927037.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH32.1884502875.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH32.1900103312.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH32.215907300.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH32.263945531.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH32.463226659.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH32.467133561.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH32.51730888.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH32.518986286.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH32.553880276.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH32.616047096.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH32.631733986.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH32.691159403.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH32.728038238.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH32.773141678.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH32.797188803.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH32.800892058.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH32.819450950.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH32.820567761.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH32.825987528.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH32.831757264.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH32.917008643.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH32.997051514.root
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1905893793
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.83892 +/- 0.00533084 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.83892 @ 95%CL (1 toyMC)
median expected limit: r < 1.83892 @ 95%CL (1 toyMC)
   68% expected band : 1.83892 < r < 1.83892
   95% expected band : 1.83892 < r < 1.83892
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 151825141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.69128 +/- 0.0077587 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 4.69128 @ 95%CL (1 toyMC)
median expected limit: r < 4.69128 @ 95%CL (1 toyMC)
   68% expected band : 4.69128 < r < 4.69128
   95% expected band : 4.69128 < r < 4.69128
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1254146311
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.07283 +/- 0.0061485 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.07283 @ 95%CL (1 toyMC)
median expected limit: r < 4.07283 @ 95%CL (1 toyMC)
   68% expected band : 4.07283 < r < 4.07283
   95% expected band : 4.07283 < r < 4.07283
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -865583421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.504 +/- 0.00768766 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.504 @ 95%CL (1 toyMC)
median expected limit: r < 3.504 @ 95%CL (1 toyMC)
   68% expected band : 3.504 < r < 3.504
   95% expected band : 3.504 < r < 3.504
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 781189550
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.80622 +/- 0.00379046 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.80622 @ 95%CL (1 toyMC)
median expected limit: r < 2.80622 @ 95%CL (1 toyMC)
   68% expected band : 2.80622 < r < 2.80622
   95% expected band : 2.80622 < r < 2.80622
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -298633283
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.47687 +/- 0.00512218 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.47687 @ 95%CL (1 toyMC)
median expected limit: r < 2.47687 @ 95%CL (1 toyMC)
   68% expected band : 2.47687 < r < 2.47687
   95% expected band : 2.47687 < r < 2.47687
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -342071151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76689 +/- 0.00446665 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.76689 @ 95%CL (1 toyMC)
median expected limit: r < 2.76689 @ 95%CL (1 toyMC)
   68% expected band : 2.76689 < r < 2.76689
   95% expected band : 2.76689 < r < 2.76689
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -537705769
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.26935 +/- 0.00475515 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.26935 @ 95%CL (1 toyMC)
median expected limit: r < 2.26935 @ 95%CL (1 toyMC)
   68% expected band : 2.26935 < r < 2.26935
   95% expected band : 2.26935 < r < 2.26935
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1478300200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77724 +/- 0.0050246 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.77724 @ 95%CL (1 toyMC)
median expected limit: r < 1.77724 @ 95%CL (1 toyMC)
   68% expected band : 1.77724 < r < 1.77724
   95% expected band : 1.77724 < r < 1.77724
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 716323166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.75183 +/- 0.00463615 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 3.75183 @ 95%CL (1 toyMC)
median expected limit: r < 3.75183 @ 95%CL (1 toyMC)
   68% expected band : 3.75183 < r < 3.75183
   95% expected band : 3.75183 < r < 3.75183
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -790485563
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.45233 +/- 0.00546683 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.45233 @ 95%CL (1 toyMC)
median expected limit: r < 2.45233 @ 95%CL (1 toyMC)
   68% expected band : 2.45233 < r < 2.45233
   95% expected band : 2.45233 < r < 2.45233
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1036354048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.55437 +/- 0.00650532 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.55437 @ 95%CL (1 toyMC)
median expected limit: r < 3.55437 @ 95%CL (1 toyMC)
   68% expected band : 3.55437 < r < 3.55437
   95% expected band : 3.55437 < r < 3.55437
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1314262788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14899 +/- 0.00541999 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.14899 @ 95%CL (1 toyMC)
median expected limit: r < 2.14899 @ 95%CL (1 toyMC)
   68% expected band : 2.14899 < r < 2.14899
   95% expected band : 2.14899 < r < 2.14899
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 808410679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.13905 +/- 0.00540976 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 3.13905 @ 95%CL (1 toyMC)
median expected limit: r < 3.13905 @ 95%CL (1 toyMC)
   68% expected band : 3.13905 < r < 3.13905
   95% expected band : 3.13905 < r < 3.13905
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1217110043
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.79686 +/- 0.00501335 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 3.79686 @ 95%CL (1 toyMC)
median expected limit: r < 3.79686 @ 95%CL (1 toyMC)
   68% expected band : 3.79686 < r < 3.79686
   95% expected band : 3.79686 < r < 3.79686
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1692177426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.87056 +/- 0.00441385 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.87056 @ 95%CL (1 toyMC)
median expected limit: r < 1.87056 @ 95%CL (1 toyMC)
   68% expected band : 1.87056 < r < 1.87056
   95% expected band : 1.87056 < r < 1.87056
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -829309518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4604 +/- 0.00538077 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.4604 @ 95%CL (1 toyMC)
median expected limit: r < 3.4604 @ 95%CL (1 toyMC)
   68% expected band : 3.4604 < r < 3.4604
   95% expected band : 3.4604 < r < 3.4604
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1715531960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78239 +/- 0.00372118 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.78239 @ 95%CL (1 toyMC)
median expected limit: r < 1.78239 @ 95%CL (1 toyMC)
   68% expected band : 1.78239 < r < 1.78239
   95% expected band : 1.78239 < r < 1.78239
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -885037134
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.56001 +/- 0.00548603 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 5.56001 @ 95%CL (1 toyMC)
median expected limit: r < 5.56001 @ 95%CL (1 toyMC)
   68% expected band : 5.56001 < r < 5.56001
   95% expected band : 5.56001 < r < 5.56001
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -94800195
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04727 +/- 0.00469087 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.04727 @ 95%CL (1 toyMC)
median expected limit: r < 2.04727 @ 95%CL (1 toyMC)
   68% expected band : 2.04727 < r < 2.04727
   95% expected band : 2.04727 < r < 2.04727
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1188284985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10235 +/- 0.00520116 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.10235 @ 95%CL (1 toyMC)
median expected limit: r < 2.10235 @ 95%CL (1 toyMC)
   68% expected band : 2.10235 < r < 2.10235
   95% expected band : 2.10235 < r < 2.10235
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1491571557
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.03445 +/- 0.00763359 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 5.03445 @ 95%CL (1 toyMC)
median expected limit: r < 5.03445 @ 95%CL (1 toyMC)
   68% expected band : 5.03445 < r < 5.03445
   95% expected band : 5.03445 < r < 5.03445
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1439708423
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.72044 +/- 0.00670057 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 5.72044 @ 95%CL (1 toyMC)
median expected limit: r < 5.72044 @ 95%CL (1 toyMC)
   68% expected band : 5.72044 < r < 5.72044
   95% expected band : 5.72044 < r < 5.72044
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1324123499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35142 +/- 0.00433752 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.35142 @ 95%CL (1 toyMC)
median expected limit: r < 1.35142 @ 95%CL (1 toyMC)
   68% expected band : 1.35142 < r < 1.35142
   95% expected band : 1.35142 < r < 1.35142
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 679882327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56499 +/- 0.00446576 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.56499 @ 95%CL (1 toyMC)
median expected limit: r < 1.56499 @ 95%CL (1 toyMC)
   68% expected band : 1.56499 < r < 1.56499
   95% expected band : 1.56499 < r < 1.56499
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1326502559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14549 +/- 0.00521949 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.14549 @ 95%CL (1 toyMC)
median expected limit: r < 2.14549 @ 95%CL (1 toyMC)
   68% expected band : 2.14549 < r < 2.14549
   95% expected band : 2.14549 < r < 2.14549
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1972460868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.33645 +/- 0.0067139 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 4.33645 @ 95%CL (1 toyMC)
median expected limit: r < 4.33645 @ 95%CL (1 toyMC)
   68% expected band : 4.33645 < r < 4.33645
   95% expected band : 4.33645 < r < 4.33645
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 655202194
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.25705 +/- 0.00448776 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.25705 @ 95%CL (1 toyMC)
median expected limit: r < 2.25705 @ 95%CL (1 toyMC)
   68% expected band : 2.25705 < r < 2.25705
   95% expected band : 2.25705 < r < 2.25705
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1257627673
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.30733 +/- 0.00542064 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.30733 @ 95%CL (1 toyMC)
median expected limit: r < 2.30733 @ 95%CL (1 toyMC)
   68% expected band : 2.30733 < r < 2.30733
   95% expected band : 2.30733 < r < 2.30733
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -406199371
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.94342 +/- 0.0048022 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.94342 @ 95%CL (1 toyMC)
median expected limit: r < 2.94342 @ 95%CL (1 toyMC)
   68% expected band : 2.94342 < r < 2.94342
   95% expected band : 2.94342 < r < 2.94342
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 795759009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.88839 +/- 0.00380199 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.88839 @ 95%CL (1 toyMC)
median expected limit: r < 1.88839 @ 95%CL (1 toyMC)
   68% expected band : 1.88839 < r < 1.88839
   95% expected band : 1.88839 < r < 1.88839
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1664930358
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27196 +/- 0.00470386 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 3.27196 @ 95%CL (1 toyMC)
median expected limit: r < 3.27196 @ 95%CL (1 toyMC)
   68% expected band : 3.27196 < r < 3.27196
   95% expected band : 3.27196 < r < 3.27196
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 789697357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.82635 +/- 0.00592308 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.82635 @ 95%CL (1 toyMC)
median expected limit: r < 2.82635 @ 95%CL (1 toyMC)
   68% expected band : 2.82635 < r < 2.82635
   95% expected band : 2.82635 < r < 2.82635
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1974860578
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.03092 +/- 0.00521858 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.03092 @ 95%CL (1 toyMC)
median expected limit: r < 2.03092 @ 95%CL (1 toyMC)
   68% expected band : 2.03092 < r < 2.03092
   95% expected band : 2.03092 < r < 2.03092
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1296638625
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.19137 +/- 0.00593407 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.19137 @ 95%CL (1 toyMC)
median expected limit: r < 3.19137 @ 95%CL (1 toyMC)
   68% expected band : 3.19137 < r < 3.19137
   95% expected band : 3.19137 < r < 3.19137
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1400574586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.47906 +/- 0.00813581 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 5.47906 @ 95%CL (1 toyMC)
median expected limit: r < 5.47906 @ 95%CL (1 toyMC)
   68% expected band : 5.47906 < r < 5.47906
   95% expected band : 5.47906 < r < 5.47906
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 89523397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46365 +/- 0.00524319 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.46365 @ 95%CL (1 toyMC)
median expected limit: r < 2.46365 @ 95%CL (1 toyMC)
   68% expected band : 2.46365 < r < 2.46365
   95% expected band : 2.46365 < r < 2.46365
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 847486519
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.72882 +/- 0.00559153 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 3.72882 @ 95%CL (1 toyMC)
median expected limit: r < 3.72882 @ 95%CL (1 toyMC)
   68% expected band : 3.72882 < r < 3.72882
   95% expected band : 3.72882 < r < 3.72882
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 616522690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.94496 +/- 0.00573725 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.94496 @ 95%CL (1 toyMC)
median expected limit: r < 2.94496 @ 95%CL (1 toyMC)
   68% expected band : 2.94496 < r < 2.94496
   95% expected band : 2.94496 < r < 2.94496
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2011107876
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.38596 +/- 0.00560459 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 3.38596 @ 95%CL (1 toyMC)
median expected limit: r < 3.38596 @ 95%CL (1 toyMC)
   68% expected band : 3.38596 < r < 3.38596
   95% expected band : 3.38596 < r < 3.38596
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 535104435
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.25909 +/- 0.00526793 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.25909 @ 95%CL (1 toyMC)
median expected limit: r < 4.25909 @ 95%CL (1 toyMC)
   68% expected band : 4.25909 < r < 4.25909
   95% expected band : 4.25909 < r < 4.25909
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1642307468
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.99128 +/- 0.00651015 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.99128 @ 95%CL (1 toyMC)
median expected limit: r < 4.99128 @ 95%CL (1 toyMC)
   68% expected band : 4.99128 < r < 4.99128
   95% expected band : 4.99128 < r < 4.99128
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1148386444
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80533 +/- 0.00518047 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.80533 @ 95%CL (1 toyMC)
median expected limit: r < 1.80533 @ 95%CL (1 toyMC)
   68% expected band : 1.80533 < r < 1.80533
   95% expected band : 1.80533 < r < 1.80533
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -297494317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09798 +/- 0.00514024 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.09798 @ 95%CL (1 toyMC)
median expected limit: r < 2.09798 @ 95%CL (1 toyMC)
   68% expected band : 2.09798 < r < 2.09798
   95% expected band : 2.09798 < r < 2.09798
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1214016208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32608 +/- 0.0050529 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.32608 @ 95%CL (1 toyMC)
median expected limit: r < 2.32608 @ 95%CL (1 toyMC)
   68% expected band : 2.32608 < r < 2.32608
   95% expected band : 2.32608 < r < 2.32608
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -300388267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09386 +/- 0.005763 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.09386 @ 95%CL (1 toyMC)
median expected limit: r < 2.09386 @ 95%CL (1 toyMC)
   68% expected band : 2.09386 < r < 2.09386
   95% expected band : 2.09386 < r < 2.09386
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2095690986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.41844 +/- 0.00464979 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 3.41844 @ 95%CL (1 toyMC)
median expected limit: r < 3.41844 @ 95%CL (1 toyMC)
   68% expected band : 3.41844 < r < 3.41844
   95% expected band : 3.41844 < r < 3.41844
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1608158576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.40112 +/- 0.005225 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.40112 @ 95%CL (1 toyMC)
median expected limit: r < 3.40112 @ 95%CL (1 toyMC)
   68% expected band : 3.40112 < r < 3.40112
   95% expected band : 3.40112 < r < 3.40112
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1071603906
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14889 +/- 0.00497581 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.14889 @ 95%CL (1 toyMC)
median expected limit: r < 2.14889 @ 95%CL (1 toyMC)
   68% expected band : 2.14889 < r < 2.14889
   95% expected band : 2.14889 < r < 2.14889
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 247607248
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.09332 +/- 0.00437499 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.09332 @ 95%CL (1 toyMC)
median expected limit: r < 2.09332 @ 95%CL (1 toyMC)
   68% expected band : 2.09332 < r < 2.09332
   95% expected band : 2.09332 < r < 2.09332
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -426915824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.41819 +/- 0.00387041 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.41819 @ 95%CL (1 toyMC)
median expected limit: r < 2.41819 @ 95%CL (1 toyMC)
   68% expected band : 2.41819 < r < 2.41819
   95% expected band : 2.41819 < r < 2.41819
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 396701287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.39194 +/- 0.00554569 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.39194 @ 95%CL (1 toyMC)
median expected limit: r < 2.39194 @ 95%CL (1 toyMC)
   68% expected band : 2.39194 < r < 2.39194
   95% expected band : 2.39194 < r < 2.39194
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -470835366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.90392 +/- 0.00487846 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.90392 @ 95%CL (1 toyMC)
median expected limit: r < 1.90392 @ 95%CL (1 toyMC)
   68% expected band : 1.90392 < r < 1.90392
   95% expected band : 1.90392 < r < 1.90392
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 576793528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12858 +/- 0.00644894 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.12858 @ 95%CL (1 toyMC)
median expected limit: r < 3.12858 @ 95%CL (1 toyMC)
   68% expected band : 3.12858 < r < 3.12858
   95% expected band : 3.12858 < r < 3.12858
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1778434166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69196 +/- 0.00421109 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.69196 @ 95%CL (1 toyMC)
median expected limit: r < 1.69196 @ 95%CL (1 toyMC)
   68% expected band : 1.69196 < r < 1.69196
   95% expected band : 1.69196 < r < 1.69196
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1038825159
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.72815 +/- 0.00486966 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.72815 @ 95%CL (1 toyMC)
median expected limit: r < 2.72815 @ 95%CL (1 toyMC)
   68% expected band : 2.72815 < r < 2.72815
   95% expected band : 2.72815 < r < 2.72815
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2057886440
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76722 +/- 0.00549795 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.76722 @ 95%CL (1 toyMC)
median expected limit: r < 2.76722 @ 95%CL (1 toyMC)
   68% expected band : 2.76722 < r < 2.76722
   95% expected band : 2.76722 < r < 2.76722
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 79478754
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90111 +/- 0.00601537 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.90111 @ 95%CL (1 toyMC)
median expected limit: r < 2.90111 @ 95%CL (1 toyMC)
   68% expected band : 2.90111 < r < 2.90111
   95% expected band : 2.90111 < r < 2.90111
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1421614990
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59318 +/- 0.00540726 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.59318 @ 95%CL (1 toyMC)
median expected limit: r < 2.59318 @ 95%CL (1 toyMC)
   68% expected band : 2.59318 < r < 2.59318
   95% expected band : 2.59318 < r < 2.59318
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -411051234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39452 +/- 0.00479557 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.39452 @ 95%CL (1 toyMC)
median expected limit: r < 1.39452 @ 95%CL (1 toyMC)
   68% expected band : 1.39452 < r < 1.39452
   95% expected band : 1.39452 < r < 1.39452
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 994491520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.98957 +/- 0.00551966 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 4.98957 @ 95%CL (1 toyMC)
median expected limit: r < 4.98957 @ 95%CL (1 toyMC)
   68% expected band : 4.98957 < r < 4.98957
   95% expected band : 4.98957 < r < 4.98957
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -214430163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.62932 +/- 0.00454026 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.62932 @ 95%CL (1 toyMC)
median expected limit: r < 1.62932 @ 95%CL (1 toyMC)
   68% expected band : 1.62932 < r < 1.62932
   95% expected band : 1.62932 < r < 1.62932
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1020899453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.685 +/- 0.00575633 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.685 @ 95%CL (1 toyMC)
median expected limit: r < 2.685 @ 95%CL (1 toyMC)
   68% expected band : 2.685 < r < 2.685
   95% expected band : 2.685 < r < 2.685
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1245772226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.01909 +/- 0.00584686 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 3.01909 @ 95%CL (1 toyMC)
median expected limit: r < 3.01909 @ 95%CL (1 toyMC)
   68% expected band : 3.01909 < r < 3.01909
   95% expected band : 3.01909 < r < 3.01909
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -157496244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.9568 +/- 0.00564956 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.9568 @ 95%CL (1 toyMC)
median expected limit: r < 1.9568 @ 95%CL (1 toyMC)
   68% expected band : 1.9568 < r < 1.9568
   95% expected band : 1.9568 < r < 1.9568
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1837543859
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.98689 +/- 0.0049647 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.98689 @ 95%CL (1 toyMC)
median expected limit: r < 1.98689 @ 95%CL (1 toyMC)
   68% expected band : 1.98689 < r < 1.98689
   95% expected band : 1.98689 < r < 1.98689
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1439880601
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39634 +/- 0.00413727 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.39634 @ 95%CL (1 toyMC)
median expected limit: r < 1.39634 @ 95%CL (1 toyMC)
   68% expected band : 1.39634 < r < 1.39634
   95% expected band : 1.39634 < r < 1.39634
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1705622724
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60715 +/- 0.0037816 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.60715 @ 95%CL (1 toyMC)
median expected limit: r < 1.60715 @ 95%CL (1 toyMC)
   68% expected band : 1.60715 < r < 1.60715
   95% expected band : 1.60715 < r < 1.60715
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1254310531
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.80489 +/- 0.00418733 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.80489 @ 95%CL (1 toyMC)
median expected limit: r < 1.80489 @ 95%CL (1 toyMC)
   68% expected band : 1.80489 < r < 1.80489
   95% expected band : 1.80489 < r < 1.80489
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 579681775
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.907 +/- 0.00511362 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.907 @ 95%CL (1 toyMC)
median expected limit: r < 1.907 @ 95%CL (1 toyMC)
   68% expected band : 1.907 < r < 1.907
   95% expected band : 1.907 < r < 1.907
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -87465731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14352 +/- 0.00485139 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.14352 @ 95%CL (1 toyMC)
median expected limit: r < 2.14352 @ 95%CL (1 toyMC)
   68% expected band : 2.14352 < r < 2.14352
   95% expected band : 2.14352 < r < 2.14352
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1079082622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51636 +/- 0.00314051 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.51636 @ 95%CL (1 toyMC)
median expected limit: r < 1.51636 @ 95%CL (1 toyMC)
   68% expected band : 1.51636 < r < 1.51636
   95% expected band : 1.51636 < r < 1.51636
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2071415057
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.03788 +/- 0.0066762 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 4.03788 @ 95%CL (1 toyMC)
median expected limit: r < 4.03788 @ 95%CL (1 toyMC)
   68% expected band : 4.03788 < r < 4.03788
   95% expected band : 4.03788 < r < 4.03788
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1255867392
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.51996 +/- 0.00635529 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.51996 @ 95%CL (1 toyMC)
median expected limit: r < 3.51996 @ 95%CL (1 toyMC)
   68% expected band : 3.51996 < r < 3.51996
   95% expected band : 3.51996 < r < 3.51996
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1704664544
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.15591 +/- 0.00456458 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.15591 @ 95%CL (1 toyMC)
median expected limit: r < 2.15591 @ 95%CL (1 toyMC)
   68% expected band : 2.15591 < r < 2.15591
   95% expected band : 2.15591 < r < 2.15591
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 350661551
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.28004 +/- 0.00581634 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 2.28004 @ 95%CL (1 toyMC)
median expected limit: r < 2.28004 @ 95%CL (1 toyMC)
   68% expected band : 2.28004 < r < 2.28004
   95% expected band : 2.28004 < r < 2.28004
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1801579561
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.25738 +/- 0.00497944 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.25738 @ 95%CL (1 toyMC)
median expected limit: r < 3.25738 @ 95%CL (1 toyMC)
   68% expected band : 3.25738 < r < 3.25738
   95% expected band : 3.25738 < r < 3.25738
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2082238644
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63967 +/- 0.00487583 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.63967 @ 95%CL (1 toyMC)
median expected limit: r < 1.63967 @ 95%CL (1 toyMC)
   68% expected band : 1.63967 < r < 1.63967
   95% expected band : 1.63967 < r < 1.63967
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 698307026
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.23609 +/- 0.00540022 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.23609 @ 95%CL (1 toyMC)
median expected limit: r < 3.23609 @ 95%CL (1 toyMC)
   68% expected band : 3.23609 < r < 3.23609
   95% expected band : 3.23609 < r < 3.23609
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -574027873
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5256 +/- 0.00542088 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.5256 @ 95%CL (1 toyMC)
median expected limit: r < 2.5256 @ 95%CL (1 toyMC)
   68% expected band : 2.5256 < r < 2.5256
   95% expected band : 2.5256 < r < 2.5256
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -333130066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.9929 +/- 0.00540799 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.9929 @ 95%CL (1 toyMC)
median expected limit: r < 2.9929 @ 95%CL (1 toyMC)
   68% expected band : 2.9929 < r < 2.9929
   95% expected band : 2.9929 < r < 2.9929
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -538884898
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88447 +/- 0.00599647 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.88447 @ 95%CL (1 toyMC)
median expected limit: r < 2.88447 @ 95%CL (1 toyMC)
   68% expected band : 2.88447 < r < 2.88447
   95% expected band : 2.88447 < r < 2.88447
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1686540706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.27139 +/- 0.00374066 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.27139 @ 95%CL (1 toyMC)
median expected limit: r < 3.27139 @ 95%CL (1 toyMC)
   68% expected band : 3.27139 < r < 3.27139
   95% expected band : 3.27139 < r < 3.27139
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1673869459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.90867 +/- 0.00484544 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.90867 @ 95%CL (1 toyMC)
median expected limit: r < 1.90867 @ 95%CL (1 toyMC)
   68% expected band : 1.90867 < r < 1.90867
   95% expected band : 1.90867 < r < 1.90867
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1302468894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.38496 +/- 0.00457194 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.38496 @ 95%CL (1 toyMC)
median expected limit: r < 2.38496 @ 95%CL (1 toyMC)
   68% expected band : 2.38496 < r < 2.38496
   95% expected band : 2.38496 < r < 2.38496
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1503701030
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.74208 +/- 0.00468458 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.74208 @ 95%CL (1 toyMC)
median expected limit: r < 2.74208 @ 95%CL (1 toyMC)
   68% expected band : 2.74208 < r < 2.74208
   95% expected band : 2.74208 < r < 2.74208
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 68502898
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46372 +/- 0.00412046 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.46372 @ 95%CL (1 toyMC)
median expected limit: r < 1.46372 @ 95%CL (1 toyMC)
   68% expected band : 1.46372 < r < 1.46372
   95% expected band : 1.46372 < r < 1.46372
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 701166666
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77419 +/- 0.00516826 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 2.77419 @ 95%CL (1 toyMC)
median expected limit: r < 2.77419 @ 95%CL (1 toyMC)
   68% expected band : 2.77419 < r < 2.77419
   95% expected band : 2.77419 < r < 2.77419
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -526587029
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.10419 +/- 0.00529805 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 2.10419 @ 95%CL (1 toyMC)
median expected limit: r < 2.10419 @ 95%CL (1 toyMC)
   68% expected band : 2.10419 < r < 2.10419
   95% expected band : 2.10419 < r < 2.10419
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -998677127
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.78047 +/- 0.00475165 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.78047 @ 95%CL (1 toyMC)
median expected limit: r < 2.78047 @ 95%CL (1 toyMC)
   68% expected band : 2.78047 < r < 2.78047
   95% expected band : 2.78047 < r < 2.78047
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1644162100
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.9504 +/- 0.00523548 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.9504 @ 95%CL (1 toyMC)
median expected limit: r < 1.9504 @ 95%CL (1 toyMC)
   68% expected band : 1.9504 < r < 1.9504
   95% expected band : 1.9504 < r < 1.9504
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 748480445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.7224 +/- 0.00647628 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 4.7224 @ 95%CL (1 toyMC)
median expected limit: r < 4.7224 @ 95%CL (1 toyMC)
   68% expected band : 4.7224 < r < 4.7224
   95% expected band : 4.7224 < r < 4.7224
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 586745748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.4646 +/- 0.0044647 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 1.4646 @ 95%CL (1 toyMC)
median expected limit: r < 1.4646 @ 95%CL (1 toyMC)
   68% expected band : 1.4646 < r < 1.4646
   95% expected band : 1.4646 < r < 1.4646
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1518725866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.65857 +/- 0.00547199 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.65857 @ 95%CL (1 toyMC)
median expected limit: r < 1.65857 @ 95%CL (1 toyMC)
   68% expected band : 1.65857 < r < 1.65857
   95% expected band : 1.65857 < r < 1.65857
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -150141076
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63759 +/- 0.00517148 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.63759 @ 95%CL (1 toyMC)
median expected limit: r < 2.63759 @ 95%CL (1 toyMC)
   68% expected band : 2.63759 < r < 2.63759
   95% expected band : 2.63759 < r < 2.63759
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1742191367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39158 +/- 0.00438669 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 1.39158 @ 95%CL (1 toyMC)
median expected limit: r < 1.39158 @ 95%CL (1 toyMC)
   68% expected band : 1.39158 < r < 1.39158
   95% expected band : 1.39158 < r < 1.39158
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1087469482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76318 +/- 0.00409856 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.76318 @ 95%CL (1 toyMC)
median expected limit: r < 2.76318 @ 95%CL (1 toyMC)
   68% expected band : 2.76318 < r < 2.76318
   95% expected band : 2.76318 < r < 2.76318
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1556932025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.92283 +/- 0.00536162 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 3.92283 @ 95%CL (1 toyMC)
median expected limit: r < 3.92283 @ 95%CL (1 toyMC)
   68% expected band : 3.92283 < r < 3.92283
   95% expected band : 3.92283 < r < 3.92283
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1506725306
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.56873 +/- 0.00597683 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 3.56873 @ 95%CL (1 toyMC)
median expected limit: r < 3.56873 @ 95%CL (1 toyMC)
   68% expected band : 3.56873 < r < 3.56873
   95% expected band : 3.56873 < r < 3.56873
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1566393235
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.45512 +/- 0.00616488 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.45512 @ 95%CL (1 toyMC)
median expected limit: r < 2.45512 @ 95%CL (1 toyMC)
   68% expected band : 2.45512 < r < 2.45512
   95% expected band : 2.45512 < r < 2.45512
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine40.MarkovChainMC.mH40.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH40.-1036354048.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH40.-1079082622.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH40.-1148386444.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH40.-1217110043.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH40.-1245772226.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH40.-1257627673.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH40.-1302468894.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH40.-1324123499.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH40.-1400574586.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH40.-1421614990.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH40.-1439708423.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH40.-1478300200.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH40.-150141076.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH40.-1503701030.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH40.-1506725306.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH40.-1556932025.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH40.-1566393235.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH40.-157496244.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH40.-1642307468.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH40.-1644162100.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH40.-1686540706.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH40.-1778434166.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH40.-1837543859.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH40.-1905893793.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH40.-1972460868.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH40.-2082238644.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH40.-214430163.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH40.-297494317.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH40.-298633283.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH40.-300388267.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH40.-333130066.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH40.-342071151.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH40.-406199371.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH40.-411051234.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH40.-426915824.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH40.-470835366.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH40.-526587029.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH40.-537705769.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH40.-538884898.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH40.-574027873.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH40.-790485563.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH40.-829309518.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH40.-865583421.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH40.-87465731.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH40.-885037134.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH40.-94800195.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH40.-998677127.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH40.1020899453.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH40.1038825159.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH40.1071603906.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH40.1087469482.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH40.1188284985.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH40.1214016208.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH40.1254146311.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH40.1254310531.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH40.1255867392.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH40.1296638625.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH40.1314262788.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH40.1326502559.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH40.1439880601.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH40.1491571557.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH40.151825141.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH40.1518725866.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH40.1608158576.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH40.1664930358.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH40.1673869459.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH40.1692177426.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH40.1704664544.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH40.1705622724.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH40.1715531960.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH40.1742191367.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH40.1801579561.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH40.1974860578.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH40.2011107876.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH40.2057886440.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH40.2071415057.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH40.2095690986.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH40.247607248.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH40.350661551.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH40.396701287.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH40.535104435.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH40.576793528.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH40.579681775.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH40.586745748.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH40.616522690.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH40.655202194.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH40.679882327.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH40.68502898.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH40.698307026.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH40.701166666.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH40.716323166.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH40.748480445.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH40.781189550.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH40.789697357.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH40.79478754.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH40.795759009.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH40.808410679.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH40.847486519.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH40.89523397.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH40.994491520.root
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/toys
