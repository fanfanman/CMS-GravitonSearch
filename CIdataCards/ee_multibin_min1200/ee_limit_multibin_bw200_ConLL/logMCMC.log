 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 74560495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.23154 +/- 1.40685 @ 95% CL (41 tries)
Done in 21.58 min (cpu), 21.71 min (real)
mean   expected limit: r < 5.23154 @ 95%CL (1 toyMC)
median expected limit: r < 5.23154 @ 95%CL (1 toyMC)
   68% expected band : 5.23154 < r < 5.23154
   95% expected band : 5.23154 < r < 5.23154
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 721001619
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.176644 +/- 0.00313418 @ 95% CL (99 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.176644 @ 95%CL (1 toyMC)
median expected limit: r < 0.176644 @ 95%CL (1 toyMC)
   68% expected band : 0.176644 < r < 0.176644
   95% expected band : 0.176644 < r < 0.176644
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -130525646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.319205 +/- 0.00177517 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.78 min (real)
mean   expected limit: r < 0.319205 @ 95%CL (1 toyMC)
median expected limit: r < 0.319205 @ 95%CL (1 toyMC)
   68% expected band : 0.319205 < r < 0.319205
   95% expected band : 0.319205 < r < 0.319205
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1829099869
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186312 +/- 0.00252158 @ 95% CL (99 tries)
Done in 0.96 min (cpu), 0.97 min (real)
mean   expected limit: r < 0.186312 @ 95%CL (1 toyMC)
median expected limit: r < 0.186312 @ 95%CL (1 toyMC)
   68% expected band : 0.186312 < r < 0.186312
   95% expected band : 0.186312 < r < 0.186312
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -620236812
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.275043 +/- 0.00219129 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 0.275043 @ 95%CL (1 toyMC)
median expected limit: r < 0.275043 @ 95%CL (1 toyMC)
   68% expected band : 0.275043 < r < 0.275043
   95% expected band : 0.275043 < r < 0.275043
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1464259053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.18883 +/- 0.00231784 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 0.18883 @ 95%CL (1 toyMC)
median expected limit: r < 0.18883 @ 95%CL (1 toyMC)
   68% expected band : 0.18883 < r < 0.18883
   95% expected band : 0.18883 < r < 0.18883
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1684275271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.225269 +/- 0.00232428 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.225269 @ 95%CL (1 toyMC)
median expected limit: r < 0.225269 @ 95%CL (1 toyMC)
   68% expected band : 0.225269 < r < 0.225269
   95% expected band : 0.225269 < r < 0.225269
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1133997155
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.44327 +/- 0.00224069 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.78 min (real)
mean   expected limit: r < 0.44327 @ 95%CL (1 toyMC)
median expected limit: r < 0.44327 @ 95%CL (1 toyMC)
   68% expected band : 0.44327 < r < 0.44327
   95% expected band : 0.44327 < r < 0.44327
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1732189523
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.298938 +/- 0.0026194 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.298938 @ 95%CL (1 toyMC)
median expected limit: r < 0.298938 @ 95%CL (1 toyMC)
   68% expected band : 0.298938 < r < 0.298938
   95% expected band : 0.298938 < r < 0.298938
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 776999832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208071 +/- 0.00298881 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.208071 @ 95%CL (1 toyMC)
median expected limit: r < 0.208071 @ 95%CL (1 toyMC)
   68% expected band : 0.208071 < r < 0.208071
   95% expected band : 0.208071 < r < 0.208071
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1668460201
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309367 +/- 0.00274704 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.309367 @ 95%CL (1 toyMC)
median expected limit: r < 0.309367 @ 95%CL (1 toyMC)
   68% expected band : 0.309367 < r < 0.309367
   95% expected band : 0.309367 < r < 0.309367
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1757800828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.318413 +/- 0.00244347 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.318413 @ 95%CL (1 toyMC)
median expected limit: r < 0.318413 @ 95%CL (1 toyMC)
   68% expected band : 0.318413 < r < 0.318413
   95% expected band : 0.318413 < r < 0.318413
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1452881324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.197231 +/- 0.00233637 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.197231 @ 95%CL (1 toyMC)
median expected limit: r < 0.197231 @ 95%CL (1 toyMC)
   68% expected band : 0.197231 < r < 0.197231
   95% expected band : 0.197231 < r < 0.197231
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 862997811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.191559 +/- 0.00284652 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 0.191559 @ 95%CL (1 toyMC)
median expected limit: r < 0.191559 @ 95%CL (1 toyMC)
   68% expected band : 0.191559 < r < 0.191559
   95% expected band : 0.191559 < r < 0.191559
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1294896706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.256844 +/- 0.00227113 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.256844 @ 95%CL (1 toyMC)
median expected limit: r < 0.256844 @ 95%CL (1 toyMC)
   68% expected band : 0.256844 < r < 0.256844
   95% expected band : 0.256844 < r < 0.256844
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 505904181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.286478 +/- 0.00183024 @ 95% CL (100 tries)
Done in 0.88 min (cpu), 0.88 min (real)
mean   expected limit: r < 0.286478 @ 95%CL (1 toyMC)
median expected limit: r < 0.286478 @ 95%CL (1 toyMC)
   68% expected band : 0.286478 < r < 0.286478
   95% expected band : 0.286478 < r < 0.286478
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1653803278
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236391 +/- 0.00229418 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.236391 @ 95%CL (1 toyMC)
median expected limit: r < 0.236391 @ 95%CL (1 toyMC)
   68% expected band : 0.236391 < r < 0.236391
   95% expected band : 0.236391 < r < 0.236391
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1037698383
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.161734 +/- 0.00371433 @ 95% CL (97 tries)
Done in 1.03 min (cpu), 1.04 min (real)
mean   expected limit: r < 0.161734 @ 95%CL (1 toyMC)
median expected limit: r < 0.161734 @ 95%CL (1 toyMC)
   68% expected band : 0.161734 < r < 0.161734
   95% expected band : 0.161734 < r < 0.161734
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -693645555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.239953 +/- 0.00242388 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.239953 @ 95%CL (1 toyMC)
median expected limit: r < 0.239953 @ 95%CL (1 toyMC)
   68% expected band : 0.239953 < r < 0.239953
   95% expected band : 0.239953 < r < 0.239953
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1959364781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.73194 +/- 1.35663 @ 95% CL (43 tries)
Done in 20.32 min (cpu), 20.44 min (real)
mean   expected limit: r < 4.73194 @ 95%CL (1 toyMC)
median expected limit: r < 4.73194 @ 95%CL (1 toyMC)
   68% expected band : 4.73194 < r < 4.73194
   95% expected band : 4.73194 < r < 4.73194
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1421008510
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.136002 +/- 0.0087456 @ 95% CL (47 tries)
Done in 19.28 min (cpu), 19.42 min (real)
mean   expected limit: r < 0.136002 @ 95%CL (1 toyMC)
median expected limit: r < 0.136002 @ 95%CL (1 toyMC)
   68% expected band : 0.136002 < r < 0.136002
   95% expected band : 0.136002 < r < 0.136002
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2059920829
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208378 +/- 0.00250831 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 0.208378 @ 95%CL (1 toyMC)
median expected limit: r < 0.208378 @ 95%CL (1 toyMC)
   68% expected band : 0.208378 < r < 0.208378
   95% expected band : 0.208378 < r < 0.208378
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1819108648
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236779 +/- 0.00238703 @ 95% CL (100 tries)
Done in 0.77 min (cpu), 0.77 min (real)
mean   expected limit: r < 0.236779 @ 95%CL (1 toyMC)
median expected limit: r < 0.236779 @ 95%CL (1 toyMC)
   68% expected band : 0.236779 < r < 0.236779
   95% expected band : 0.236779 < r < 0.236779
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1182528756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.266166 +/- 0.00231032 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.266166 @ 95%CL (1 toyMC)
median expected limit: r < 0.266166 @ 95%CL (1 toyMC)
   68% expected band : 0.266166 < r < 0.266166
   95% expected band : 0.266166 < r < 0.266166
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2111019721
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.157082 +/- 0.00342959 @ 95% CL (98 tries)
Done in 0.86 min (cpu), 0.87 min (real)
mean   expected limit: r < 0.157082 @ 95%CL (1 toyMC)
median expected limit: r < 0.157082 @ 95%CL (1 toyMC)
   68% expected band : 0.157082 < r < 0.157082
   95% expected band : 0.157082 < r < 0.157082
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 391962116
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.167649 +/- 0.00307859 @ 95% CL (96 tries)
Done in 1.31 min (cpu), 1.32 min (real)
mean   expected limit: r < 0.167649 @ 95%CL (1 toyMC)
median expected limit: r < 0.167649 @ 95%CL (1 toyMC)
   68% expected band : 0.167649 < r < 0.167649
   95% expected band : 0.167649 < r < 0.167649
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2026736401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.471356 +/- 0.0024102 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.471356 @ 95%CL (1 toyMC)
median expected limit: r < 0.471356 @ 95%CL (1 toyMC)
   68% expected band : 0.471356 < r < 0.471356
   95% expected band : 0.471356 < r < 0.471356
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1705099371
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.190304 +/- 0.00245117 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.190304 @ 95%CL (1 toyMC)
median expected limit: r < 0.190304 @ 95%CL (1 toyMC)
   68% expected band : 0.190304 < r < 0.190304
   95% expected band : 0.190304 < r < 0.190304
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -392638363
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 12.7085 +/- 2.25023 @ 95% CL (32 tries)
Done in 24.29 min (cpu), 24.45 min (real)
mean   expected limit: r < 12.7085 @ 95%CL (1 toyMC)
median expected limit: r < 12.7085 @ 95%CL (1 toyMC)
   68% expected band : 12.7085 < r < 12.7085
   95% expected band : 12.7085 < r < 12.7085
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 571617361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.307353 +/- 0.00243141 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 0.307353 @ 95%CL (1 toyMC)
median expected limit: r < 0.307353 @ 95%CL (1 toyMC)
   68% expected band : 0.307353 < r < 0.307353
   95% expected band : 0.307353 < r < 0.307353
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -703502674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206709 +/- 0.00229555 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 0.206709 @ 95%CL (1 toyMC)
median expected limit: r < 0.206709 @ 95%CL (1 toyMC)
   68% expected band : 0.206709 < r < 0.206709
   95% expected band : 0.206709 < r < 0.206709
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 719724073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.149815 +/- 0.00465944 @ 95% CL (79 tries)
Done in 5.87 min (cpu), 5.91 min (real)
mean   expected limit: r < 0.149815 @ 95%CL (1 toyMC)
median expected limit: r < 0.149815 @ 95%CL (1 toyMC)
   68% expected band : 0.149815 < r < 0.149815
   95% expected band : 0.149815 < r < 0.149815
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 466180703
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26294 +/- 0.00239295 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.77 min (real)
mean   expected limit: r < 0.26294 @ 95%CL (1 toyMC)
median expected limit: r < 0.26294 @ 95%CL (1 toyMC)
   68% expected band : 0.26294 < r < 0.26294
   95% expected band : 0.26294 < r < 0.26294
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1359542678
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.159241 +/- 0.00358591 @ 95% CL (95 tries)
Done in 1.78 min (cpu), 1.79 min (real)
mean   expected limit: r < 0.159241 @ 95%CL (1 toyMC)
median expected limit: r < 0.159241 @ 95%CL (1 toyMC)
   68% expected band : 0.159241 < r < 0.159241
   95% expected band : 0.159241 < r < 0.159241
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2128188488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.284353 +/- 0.002377 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.284353 @ 95%CL (1 toyMC)
median expected limit: r < 0.284353 @ 95%CL (1 toyMC)
   68% expected band : 0.284353 < r < 0.284353
   95% expected band : 0.284353 < r < 0.284353
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 695986511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.29628 +/- 0.00187122 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.29628 @ 95%CL (1 toyMC)
median expected limit: r < 0.29628 @ 95%CL (1 toyMC)
   68% expected band : 0.29628 < r < 0.29628
   95% expected band : 0.29628 < r < 0.29628
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2045426545
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.167614 +/- 0.00352266 @ 95% CL (95 tries)
Done in 1.57 min (cpu), 1.58 min (real)
mean   expected limit: r < 0.167614 @ 95%CL (1 toyMC)
median expected limit: r < 0.167614 @ 95%CL (1 toyMC)
   68% expected band : 0.167614 < r < 0.167614
   95% expected band : 0.167614 < r < 0.167614
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2114228221
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.273336 +/- 0.00227612 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.273336 @ 95%CL (1 toyMC)
median expected limit: r < 0.273336 @ 95%CL (1 toyMC)
   68% expected band : 0.273336 < r < 0.273336
   95% expected band : 0.273336 < r < 0.273336
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1348864808
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.13626 +/- 1.27015 @ 95% CL (43 tries)
Done in 19.42 min (cpu), 19.52 min (real)
mean   expected limit: r < 4.13626 @ 95%CL (1 toyMC)
median expected limit: r < 4.13626 @ 95%CL (1 toyMC)
   68% expected band : 4.13626 < r < 4.13626
   95% expected band : 4.13626 < r < 4.13626
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2126251286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.258801 +/- 0.00251502 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.258801 @ 95%CL (1 toyMC)
median expected limit: r < 0.258801 @ 95%CL (1 toyMC)
   68% expected band : 0.258801 < r < 0.258801
   95% expected band : 0.258801 < r < 0.258801
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -597721294
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.168125 +/- 0.0034055 @ 95% CL (94 tries)
Done in 2.73 min (cpu), 2.74 min (real)
mean   expected limit: r < 0.168125 @ 95%CL (1 toyMC)
median expected limit: r < 0.168125 @ 95%CL (1 toyMC)
   68% expected band : 0.168125 < r < 0.168125
   95% expected band : 0.168125 < r < 0.168125
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1044045790
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.208622 +/- 0.00258353 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.208622 @ 95%CL (1 toyMC)
median expected limit: r < 0.208622 @ 95%CL (1 toyMC)
   68% expected band : 0.208622 < r < 0.208622
   95% expected band : 0.208622 < r < 0.208622
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1721316651
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.451642 +/- 0.0020058 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.451642 @ 95%CL (1 toyMC)
median expected limit: r < 0.451642 @ 95%CL (1 toyMC)
   68% expected band : 0.451642 < r < 0.451642
   95% expected band : 0.451642 < r < 0.451642
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1716058042
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272802 +/- 0.00222778 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.272802 @ 95%CL (1 toyMC)
median expected limit: r < 0.272802 @ 95%CL (1 toyMC)
   68% expected band : 0.272802 < r < 0.272802
   95% expected band : 0.272802 < r < 0.272802
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 812682071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.565581 +/- 0.00262385 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.565581 @ 95%CL (1 toyMC)
median expected limit: r < 0.565581 @ 95%CL (1 toyMC)
   68% expected band : 0.565581 < r < 0.565581
   95% expected band : 0.565581 < r < 0.565581
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1197347882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.177578 +/- 0.00286385 @ 95% CL (99 tries)
Done in 0.87 min (cpu), 0.88 min (real)
mean   expected limit: r < 0.177578 @ 95%CL (1 toyMC)
median expected limit: r < 0.177578 @ 95%CL (1 toyMC)
   68% expected band : 0.177578 < r < 0.177578
   95% expected band : 0.177578 < r < 0.177578
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1401116231
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.172391 +/- 0.00353903 @ 95% CL (96 tries)
Done in 1.61 min (cpu), 1.61 min (real)
mean   expected limit: r < 0.172391 @ 95%CL (1 toyMC)
median expected limit: r < 0.172391 @ 95%CL (1 toyMC)
   68% expected band : 0.172391 < r < 0.172391
   95% expected band : 0.172391 < r < 0.172391
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1200459369
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.236015 +/- 0.00280552 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.77 min (real)
mean   expected limit: r < 0.236015 @ 95%CL (1 toyMC)
median expected limit: r < 0.236015 @ 95%CL (1 toyMC)
   68% expected band : 0.236015 < r < 0.236015
   95% expected band : 0.236015 < r < 0.236015
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 191234401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.309665 +/- 0.00198262 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.309665 @ 95%CL (1 toyMC)
median expected limit: r < 0.309665 @ 95%CL (1 toyMC)
   68% expected band : 0.309665 < r < 0.309665
   95% expected band : 0.309665 < r < 0.309665
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1173398697
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.226079 +/- 0.00192956 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.77 min (real)
mean   expected limit: r < 0.226079 @ 95%CL (1 toyMC)
median expected limit: r < 0.226079 @ 95%CL (1 toyMC)
   68% expected band : 0.226079 < r < 0.226079
   95% expected band : 0.226079 < r < 0.226079
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -631606633
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.19352 +/- 0.00358755 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.19352 @ 95%CL (1 toyMC)
median expected limit: r < 0.19352 @ 95%CL (1 toyMC)
   68% expected band : 0.19352 < r < 0.19352
   95% expected band : 0.19352 < r < 0.19352
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -273218271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206064 +/- 0.00237271 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.206064 @ 95%CL (1 toyMC)
median expected limit: r < 0.206064 @ 95%CL (1 toyMC)
   68% expected band : 0.206064 < r < 0.206064
   95% expected band : 0.206064 < r < 0.206064
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 658172015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.311849 +/- 0.00253337 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.311849 @ 95%CL (1 toyMC)
median expected limit: r < 0.311849 @ 95%CL (1 toyMC)
   68% expected band : 0.311849 < r < 0.311849
   95% expected band : 0.311849 < r < 0.311849
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1988389849
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.75795 +/- 2.50252 @ 95% CL (18 tries)
Done in 27.16 min (cpu), 27.27 min (real)
mean   expected limit: r < 6.75795 @ 95%CL (1 toyMC)
median expected limit: r < 6.75795 @ 95%CL (1 toyMC)
   68% expected band : 6.75795 < r < 6.75795
   95% expected band : 6.75795 < r < 6.75795
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1382042119
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.293316 +/- 0.00204203 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.293316 @ 95%CL (1 toyMC)
median expected limit: r < 0.293316 @ 95%CL (1 toyMC)
   68% expected band : 0.293316 < r < 0.293316
   95% expected band : 0.293316 < r < 0.293316
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1678010327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.210799 +/- 0.00229103 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.210799 @ 95%CL (1 toyMC)
median expected limit: r < 0.210799 @ 95%CL (1 toyMC)
   68% expected band : 0.210799 < r < 0.210799
   95% expected band : 0.210799 < r < 0.210799
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1600205307
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.18266 +/- 0.00324298 @ 95% CL (97 tries)
Done in 1.35 min (cpu), 1.36 min (real)
mean   expected limit: r < 0.18266 @ 95%CL (1 toyMC)
median expected limit: r < 0.18266 @ 95%CL (1 toyMC)
   68% expected band : 0.18266 < r < 0.18266
   95% expected band : 0.18266 < r < 0.18266
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1152511966
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.355789 +/- 0.00235898 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.355789 @ 95%CL (1 toyMC)
median expected limit: r < 0.355789 @ 95%CL (1 toyMC)
   68% expected band : 0.355789 < r < 0.355789
   95% expected band : 0.355789 < r < 0.355789
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1182586849
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.178525 +/- 0.00388455 @ 95% CL (97 tries)
Done in 1.23 min (cpu), 1.24 min (real)
mean   expected limit: r < 0.178525 @ 95%CL (1 toyMC)
median expected limit: r < 0.178525 @ 95%CL (1 toyMC)
   68% expected band : 0.178525 < r < 0.178525
   95% expected band : 0.178525 < r < 0.178525
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -581395176
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.205822 +/- 0.0026989 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.205822 @ 95%CL (1 toyMC)
median expected limit: r < 0.205822 @ 95%CL (1 toyMC)
   68% expected band : 0.205822 < r < 0.205822
   95% expected band : 0.205822 < r < 0.205822
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1531324757
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.144182 +/- 0.00628714 @ 95% CL (75 tries)
Done in 7.65 min (cpu), 7.67 min (real)
mean   expected limit: r < 0.144182 @ 95%CL (1 toyMC)
median expected limit: r < 0.144182 @ 95%CL (1 toyMC)
   68% expected band : 0.144182 < r < 0.144182
   95% expected band : 0.144182 < r < 0.144182
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -981749877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.297824 +/- 0.00264808 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.297824 @ 95%CL (1 toyMC)
median expected limit: r < 0.297824 @ 95%CL (1 toyMC)
   68% expected band : 0.297824 < r < 0.297824
   95% expected band : 0.297824 < r < 0.297824
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 162716474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.237234 +/- 0.00196939 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.237234 @ 95%CL (1 toyMC)
median expected limit: r < 0.237234 @ 95%CL (1 toyMC)
   68% expected band : 0.237234 < r < 0.237234
   95% expected band : 0.237234 < r < 0.237234
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2111827987
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.213187 +/- 0.00258513 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.213187 @ 95%CL (1 toyMC)
median expected limit: r < 0.213187 @ 95%CL (1 toyMC)
   68% expected band : 0.213187 < r < 0.213187
   95% expected band : 0.213187 < r < 0.213187
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1141792024
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.464702 +/- 0.00211031 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.464702 @ 95%CL (1 toyMC)
median expected limit: r < 0.464702 @ 95%CL (1 toyMC)
   68% expected band : 0.464702 < r < 0.464702
   95% expected band : 0.464702 < r < 0.464702
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1490513499
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.197201 +/- 0.00261399 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.197201 @ 95%CL (1 toyMC)
median expected limit: r < 0.197201 @ 95%CL (1 toyMC)
   68% expected band : 0.197201 < r < 0.197201
   95% expected band : 0.197201 < r < 0.197201
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1336037577
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.189136 +/- 0.00390294 @ 95% CL (97 tries)
Done in 1.18 min (cpu), 1.18 min (real)
mean   expected limit: r < 0.189136 @ 95%CL (1 toyMC)
median expected limit: r < 0.189136 @ 95%CL (1 toyMC)
   68% expected band : 0.189136 < r < 0.189136
   95% expected band : 0.189136 < r < 0.189136
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 678950955
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.140887 +/- 0.00617037 @ 95% CL (60 tries)
Done in 14.11 min (cpu), 14.15 min (real)
mean   expected limit: r < 0.140887 @ 95%CL (1 toyMC)
median expected limit: r < 0.140887 @ 95%CL (1 toyMC)
   68% expected band : 0.140887 < r < 0.140887
   95% expected band : 0.140887 < r < 0.140887
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 806955683
Generate toy 1/1
Done in 32.20 min (cpu), 32.31 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1677367507
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.85361 +/- 1.3872 @ 95% CL (40 tries)
Done in 19.17 min (cpu), 19.24 min (real)
mean   expected limit: r < 4.85361 @ 95%CL (1 toyMC)
median expected limit: r < 4.85361 @ 95%CL (1 toyMC)
   68% expected band : 4.85361 < r < 4.85361
   95% expected band : 4.85361 < r < 4.85361
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 50483285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.201392 +/- 0.00237015 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.201392 @ 95%CL (1 toyMC)
median expected limit: r < 0.201392 @ 95%CL (1 toyMC)
   68% expected band : 0.201392 < r < 0.201392
   95% expected band : 0.201392 < r < 0.201392
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1642275705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.182664 +/- 0.00260246 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.182664 @ 95%CL (1 toyMC)
median expected limit: r < 0.182664 @ 95%CL (1 toyMC)
   68% expected band : 0.182664 < r < 0.182664
   95% expected band : 0.182664 < r < 0.182664
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1813079408
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.347379 +/- 0.00175912 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.347379 @ 95%CL (1 toyMC)
median expected limit: r < 0.347379 @ 95%CL (1 toyMC)
   68% expected band : 0.347379 < r < 0.347379
   95% expected band : 0.347379 < r < 0.347379
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -980578712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.214994 +/- 0.00282348 @ 95% CL (100 tries)
Done in 0.71 min (cpu), 0.71 min (real)
mean   expected limit: r < 0.214994 @ 95%CL (1 toyMC)
median expected limit: r < 0.214994 @ 95%CL (1 toyMC)
   68% expected band : 0.214994 < r < 0.214994
   95% expected band : 0.214994 < r < 0.214994
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -491821932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.310344 +/- 0.00232826 @ 95% CL (100 tries)
Done in 0.76 min (cpu), 0.76 min (real)
mean   expected limit: r < 0.310344 @ 95%CL (1 toyMC)
median expected limit: r < 0.310344 @ 95%CL (1 toyMC)
   68% expected band : 0.310344 < r < 0.310344
   95% expected band : 0.310344 < r < 0.310344
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -141230323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.149194 +/- 0.0060823 @ 95% CL (76 tries)
Done in 9.56 min (cpu), 9.59 min (real)
mean   expected limit: r < 0.149194 @ 95%CL (1 toyMC)
median expected limit: r < 0.149194 @ 95%CL (1 toyMC)
   68% expected band : 0.149194 < r < 0.149194
   95% expected band : 0.149194 < r < 0.149194
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1466470397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.93957 +/- 1.22557 @ 95% CL (57 tries)
Done in 15.83 min (cpu), 15.88 min (real)
mean   expected limit: r < 5.93957 @ 95%CL (1 toyMC)
median expected limit: r < 5.93957 @ 95%CL (1 toyMC)
   68% expected band : 5.93957 < r < 5.93957
   95% expected band : 5.93957 < r < 5.93957
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2122923053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247368 +/- 0.00231734 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.247368 @ 95%CL (1 toyMC)
median expected limit: r < 0.247368 @ 95%CL (1 toyMC)
   68% expected band : 0.247368 < r < 0.247368
   95% expected band : 0.247368 < r < 0.247368
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -503560200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.275973 +/- 0.00213501 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.275973 @ 95%CL (1 toyMC)
median expected limit: r < 0.275973 @ 95%CL (1 toyMC)
   68% expected band : 0.275973 < r < 0.275973
   95% expected band : 0.275973 < r < 0.275973
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -8362143
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.243651 +/- 0.00200731 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.243651 @ 95%CL (1 toyMC)
median expected limit: r < 0.243651 @ 95%CL (1 toyMC)
   68% expected band : 0.243651 < r < 0.243651
   95% expected band : 0.243651 < r < 0.243651
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -752154659
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255848 +/- 0.00225649 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.255848 @ 95%CL (1 toyMC)
median expected limit: r < 0.255848 @ 95%CL (1 toyMC)
   68% expected band : 0.255848 < r < 0.255848
   95% expected band : 0.255848 < r < 0.255848
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -965960214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.279755 +/- 0.00356099 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.279755 @ 95%CL (1 toyMC)
median expected limit: r < 0.279755 @ 95%CL (1 toyMC)
   68% expected band : 0.279755 < r < 0.279755
   95% expected band : 0.279755 < r < 0.279755
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1170898367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.386605 +/- 0.00253689 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.386605 @ 95%CL (1 toyMC)
median expected limit: r < 0.386605 @ 95%CL (1 toyMC)
   68% expected band : 0.386605 < r < 0.386605
   95% expected band : 0.386605 < r < 0.386605
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -514599977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.203537 +/- 0.0025226 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.203537 @ 95%CL (1 toyMC)
median expected limit: r < 0.203537 @ 95%CL (1 toyMC)
   68% expected band : 0.203537 < r < 0.203537
   95% expected band : 0.203537 < r < 0.203537
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2117580582
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.290945 +/- 0.00217817 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.290945 @ 95%CL (1 toyMC)
median expected limit: r < 0.290945 @ 95%CL (1 toyMC)
   68% expected band : 0.290945 < r < 0.290945
   95% expected band : 0.290945 < r < 0.290945
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 605349401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.161477 +/- 0.00473743 @ 95% CL (70 tries)
Done in 12.32 min (cpu), 12.37 min (real)
mean   expected limit: r < 0.161477 @ 95%CL (1 toyMC)
median expected limit: r < 0.161477 @ 95%CL (1 toyMC)
   68% expected band : 0.161477 < r < 0.161477
   95% expected band : 0.161477 < r < 0.161477
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1053357982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.177811 +/- 0.00269725 @ 95% CL (100 tries)
Done in 0.74 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.177811 @ 95%CL (1 toyMC)
median expected limit: r < 0.177811 @ 95%CL (1 toyMC)
   68% expected band : 0.177811 < r < 0.177811
   95% expected band : 0.177811 < r < 0.177811
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 144941989
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.203717 +/- 0.00202126 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.203717 @ 95%CL (1 toyMC)
median expected limit: r < 0.203717 @ 95%CL (1 toyMC)
   68% expected band : 0.203717 < r < 0.203717
   95% expected band : 0.203717 < r < 0.203717
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -13317009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.161992 +/- 0.00377171 @ 95% CL (86 tries)
Done in 3.41 min (cpu), 3.42 min (real)
mean   expected limit: r < 0.161992 @ 95%CL (1 toyMC)
median expected limit: r < 0.161992 @ 95%CL (1 toyMC)
   68% expected band : 0.161992 < r < 0.161992
   95% expected band : 0.161992 < r < 0.161992
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1804261506
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.341013 +/- 0.00225744 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.341013 @ 95%CL (1 toyMC)
median expected limit: r < 0.341013 @ 95%CL (1 toyMC)
   68% expected band : 0.341013 < r < 0.341013
   95% expected band : 0.341013 < r < 0.341013
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1892231445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.294383 +/- 0.0019304 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.294383 @ 95%CL (1 toyMC)
median expected limit: r < 0.294383 @ 95%CL (1 toyMC)
   68% expected band : 0.294383 < r < 0.294383
   95% expected band : 0.294383 < r < 0.294383
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1137525375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 11.4821 +/- 4.01537 @ 95% CL (7 tries)
Done in 30.40 min (cpu), 30.52 min (real)
mean   expected limit: r < 11.4821 @ 95%CL (1 toyMC)
median expected limit: r < 11.4821 @ 95%CL (1 toyMC)
   68% expected band : 11.4821 < r < 11.4821
   95% expected band : 11.4821 < r < 11.4821
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 478536553
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.225626 +/- 0.00265439 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.225626 @ 95%CL (1 toyMC)
median expected limit: r < 0.225626 @ 95%CL (1 toyMC)
   68% expected band : 0.225626 < r < 0.225626
   95% expected band : 0.225626 < r < 0.225626
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 391982358
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.272122 +/- 0.00223518 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.73 min (real)
mean   expected limit: r < 0.272122 @ 95%CL (1 toyMC)
median expected limit: r < 0.272122 @ 95%CL (1 toyMC)
   68% expected band : 0.272122 < r < 0.272122
   95% expected band : 0.272122 < r < 0.272122
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1171940170
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.168618 +/- 0.00453979 @ 95% CL (91 tries)
Done in 3.09 min (cpu), 3.11 min (real)
mean   expected limit: r < 0.168618 @ 95%CL (1 toyMC)
median expected limit: r < 0.168618 @ 95%CL (1 toyMC)
   68% expected band : 0.168618 < r < 0.168618
   95% expected band : 0.168618 < r < 0.168618
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1638265473
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.199176 +/- 0.00309019 @ 95% CL (100 tries)
Done in 0.72 min (cpu), 0.72 min (real)
mean   expected limit: r < 0.199176 @ 95%CL (1 toyMC)
median expected limit: r < 0.199176 @ 95%CL (1 toyMC)
   68% expected band : 0.199176 < r < 0.199176
   95% expected band : 0.199176 < r < 0.199176
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2117916882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.177879 +/- 0.00387563 @ 95% CL (97 tries)
Done in 1.11 min (cpu), 1.12 min (real)
mean   expected limit: r < 0.177879 @ 95%CL (1 toyMC)
median expected limit: r < 0.177879 @ 95%CL (1 toyMC)
   68% expected band : 0.177879 < r < 0.177879
   95% expected band : 0.177879 < r < 0.177879
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1723192140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.148102 +/- 0.00657466 @ 95% CL (62 tries)
Done in 15.42 min (cpu), 15.47 min (real)
mean   expected limit: r < 0.148102 @ 95%CL (1 toyMC)
median expected limit: r < 0.148102 @ 95%CL (1 toyMC)
   68% expected band : 0.148102 < r < 0.148102
   95% expected band : 0.148102 < r < 0.148102
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1803756902
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.200466 +/- 0.0026937 @ 95% CL (100 tries)
Done in 0.73 min (cpu), 0.74 min (real)
mean   expected limit: r < 0.200466 @ 95%CL (1 toyMC)
median expected limit: r < 0.200466 @ 95%CL (1 toyMC)
   68% expected band : 0.200466 < r < 0.200466
   95% expected band : 0.200466 < r < 0.200466
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 415697340
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.323229 +/- 0.0018321 @ 95% CL (100 tries)
Done in 0.75 min (cpu), 0.75 min (real)
mean   expected limit: r < 0.323229 @ 95%CL (1 toyMC)
median expected limit: r < 0.323229 @ 95%CL (1 toyMC)
   68% expected band : 0.323229 < r < 0.323229
   95% expected band : 0.323229 < r < 0.323229
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine16.MarkovChainMC.mH16.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH16.-1037698383.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH16.-1182528756.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH16.-1182586849.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH16.-1197347882.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH16.-1200459369.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH16.-1294896706.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH16.-130525646.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH16.-13317009.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH16.-1336037577.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH16.-1348864808.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH16.-1382042119.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH16.-1401116231.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH16.-141230323.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH16.-1452881324.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH16.-1466470397.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH16.-1490513499.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH16.-1638265473.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH16.-1653803278.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH16.-1677367507.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH16.-1678010327.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH16.-1684275271.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH16.-1705099371.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH16.-1721316651.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH16.-1723192140.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH16.-1732189523.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH16.-1757800828.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH16.-1804261506.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH16.-1813079408.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH16.-1892231445.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH16.-1988389849.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH16.-2026736401.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH16.-2045426545.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH16.-2059920829.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH16.-2111019721.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH16.-2117580582.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH16.-2126251286.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH16.-273218271.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH16.-392638363.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH16.-491821932.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH16.-503560200.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH16.-514599977.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH16.-581395176.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH16.-597721294.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH16.-620236812.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH16.-631606633.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH16.-693645555.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH16.-703502674.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH16.-752154659.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH16.-8362143.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH16.-965960214.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH16.-980578712.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH16.-981749877.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH16.1044045790.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH16.1053357982.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH16.1133997155.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH16.1137525375.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH16.1141792024.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH16.1152511966.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH16.1170898367.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH16.1171940170.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH16.1173398697.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH16.1359542678.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH16.1421008510.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH16.144941989.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH16.1464259053.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH16.1531324757.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH16.1600205307.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH16.162716474.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH16.1642275705.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH16.1668460201.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH16.1716058042.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH16.1803756902.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH16.1819108648.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH16.1829099869.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH16.191234401.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH16.1959364781.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH16.2111827987.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH16.2114228221.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH16.2117916882.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH16.2122923053.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH16.2128188488.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH16.391962116.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH16.391982358.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH16.415697340.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH16.466180703.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH16.478536553.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH16.50483285.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH16.505904181.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH16.571617361.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH16.605349401.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH16.658172015.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH16.678950955.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH16.695986511.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH16.719724073.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH16.721001619.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH16.74560495.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH16.776999832.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH16.806955683.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH16.812682071.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH16.862997811.root
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1447939158
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.414237 +/- 0.00265779 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.414237 @ 95%CL (1 toyMC)
median expected limit: r < 0.414237 @ 95%CL (1 toyMC)
   68% expected band : 0.414237 < r < 0.414237
   95% expected band : 0.414237 < r < 0.414237
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1235438117
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.905118 +/- 0.0026523 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.905118 @ 95%CL (1 toyMC)
median expected limit: r < 0.905118 @ 95%CL (1 toyMC)
   68% expected band : 0.905118 < r < 0.905118
   95% expected band : 0.905118 < r < 0.905118
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -823803917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.341696 +/- 0.0022622 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.341696 @ 95%CL (1 toyMC)
median expected limit: r < 0.341696 @ 95%CL (1 toyMC)
   68% expected band : 0.341696 < r < 0.341696
   95% expected band : 0.341696 < r < 0.341696
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1458945977
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.449812 +/- 0.00264243 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.449812 @ 95%CL (1 toyMC)
median expected limit: r < 0.449812 @ 95%CL (1 toyMC)
   68% expected band : 0.449812 < r < 0.449812
   95% expected band : 0.449812 < r < 0.449812
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 58506960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.735309 +/- 0.00338818 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.735309 @ 95%CL (1 toyMC)
median expected limit: r < 0.735309 @ 95%CL (1 toyMC)
   68% expected band : 0.735309 < r < 0.735309
   95% expected band : 0.735309 < r < 0.735309
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 692340890
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.540388 +/- 0.00246547 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.540388 @ 95%CL (1 toyMC)
median expected limit: r < 0.540388 @ 95%CL (1 toyMC)
   68% expected band : 0.540388 < r < 0.540388
   95% expected band : 0.540388 < r < 0.540388
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1202529811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.457874 +/- 0.00313208 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 0.457874 @ 95%CL (1 toyMC)
median expected limit: r < 0.457874 @ 95%CL (1 toyMC)
   68% expected band : 0.457874 < r < 0.457874
   95% expected band : 0.457874 < r < 0.457874
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1358754198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.418214 +/- 0.00299933 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.418214 @ 95%CL (1 toyMC)
median expected limit: r < 0.418214 @ 95%CL (1 toyMC)
   68% expected band : 0.418214 < r < 0.418214
   95% expected band : 0.418214 < r < 0.418214
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -422869071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.948565 +/- 0.00290808 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.948565 @ 95%CL (1 toyMC)
median expected limit: r < 0.948565 @ 95%CL (1 toyMC)
   68% expected band : 0.948565 < r < 0.948565
   95% expected band : 0.948565 < r < 0.948565
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2147371421
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.413956 +/- 0.00193105 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 0.413956 @ 95%CL (1 toyMC)
median expected limit: r < 0.413956 @ 95%CL (1 toyMC)
   68% expected band : 0.413956 < r < 0.413956
   95% expected band : 0.413956 < r < 0.413956
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1971228946
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.565341 +/- 0.00231618 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.565341 @ 95%CL (1 toyMC)
median expected limit: r < 0.565341 @ 95%CL (1 toyMC)
   68% expected band : 0.565341 < r < 0.565341
   95% expected band : 0.565341 < r < 0.565341
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1107207586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.351839 +/- 0.0029295 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 0.351839 @ 95%CL (1 toyMC)
median expected limit: r < 0.351839 @ 95%CL (1 toyMC)
   68% expected band : 0.351839 < r < 0.351839
   95% expected band : 0.351839 < r < 0.351839
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 969584097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.49971 +/- 0.00260802 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.49971 @ 95%CL (1 toyMC)
median expected limit: r < 0.49971 @ 95%CL (1 toyMC)
   68% expected band : 0.49971 < r < 0.49971
   95% expected band : 0.49971 < r < 0.49971
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -804299151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.809667 +/- 0.00230896 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.809667 @ 95%CL (1 toyMC)
median expected limit: r < 0.809667 @ 95%CL (1 toyMC)
   68% expected band : 0.809667 < r < 0.809667
   95% expected band : 0.809667 < r < 0.809667
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1479490036
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388465 +/- 0.00257146 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.388465 @ 95%CL (1 toyMC)
median expected limit: r < 0.388465 @ 95%CL (1 toyMC)
   68% expected band : 0.388465 < r < 0.388465
   95% expected band : 0.388465 < r < 0.388465
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -321442882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.460675 +/- 0.00245306 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.460675 @ 95%CL (1 toyMC)
median expected limit: r < 0.460675 @ 95%CL (1 toyMC)
   68% expected band : 0.460675 < r < 0.460675
   95% expected band : 0.460675 < r < 0.460675
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1883164668
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.433174 +/- 0.00259166 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.433174 @ 95%CL (1 toyMC)
median expected limit: r < 0.433174 @ 95%CL (1 toyMC)
   68% expected band : 0.433174 < r < 0.433174
   95% expected band : 0.433174 < r < 0.433174
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1227172106
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.38629 +/- 0.00190355 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 0.38629 @ 95%CL (1 toyMC)
median expected limit: r < 0.38629 @ 95%CL (1 toyMC)
   68% expected band : 0.38629 < r < 0.38629
   95% expected band : 0.38629 < r < 0.38629
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -726361887
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.383927 +/- 0.00288585 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.383927 @ 95%CL (1 toyMC)
median expected limit: r < 0.383927 @ 95%CL (1 toyMC)
   68% expected band : 0.383927 < r < 0.383927
   95% expected band : 0.383927 < r < 0.383927
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1599506979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08951 +/- 0.00363987 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.08951 @ 95%CL (1 toyMC)
median expected limit: r < 1.08951 @ 95%CL (1 toyMC)
   68% expected band : 1.08951 < r < 1.08951
   95% expected band : 1.08951 < r < 1.08951
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1835268382
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04642 +/- 0.00255618 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.04642 @ 95%CL (1 toyMC)
median expected limit: r < 1.04642 @ 95%CL (1 toyMC)
   68% expected band : 1.04642 < r < 1.04642
   95% expected band : 1.04642 < r < 1.04642
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2018934284
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.585704 +/- 0.00274946 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.585704 @ 95%CL (1 toyMC)
median expected limit: r < 0.585704 @ 95%CL (1 toyMC)
   68% expected band : 0.585704 < r < 0.585704
   95% expected band : 0.585704 < r < 0.585704
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1267048070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.679192 +/- 0.00329347 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.679192 @ 95%CL (1 toyMC)
median expected limit: r < 0.679192 @ 95%CL (1 toyMC)
   68% expected band : 0.679192 < r < 0.679192
   95% expected band : 0.679192 < r < 0.679192
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -952473944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.556852 +/- 0.00251546 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.556852 @ 95%CL (1 toyMC)
median expected limit: r < 0.556852 @ 95%CL (1 toyMC)
   68% expected band : 0.556852 < r < 0.556852
   95% expected band : 0.556852 < r < 0.556852
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1929737208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.638776 +/- 0.00280741 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.638776 @ 95%CL (1 toyMC)
median expected limit: r < 0.638776 @ 95%CL (1 toyMC)
   68% expected band : 0.638776 < r < 0.638776
   95% expected band : 0.638776 < r < 0.638776
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1084061004
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.475942 +/- 0.00276648 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.475942 @ 95%CL (1 toyMC)
median expected limit: r < 0.475942 @ 95%CL (1 toyMC)
   68% expected band : 0.475942 < r < 0.475942
   95% expected band : 0.475942 < r < 0.475942
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1761851386
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24543 +/- 0.00252224 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.24543 @ 95%CL (1 toyMC)
median expected limit: r < 1.24543 @ 95%CL (1 toyMC)
   68% expected band : 1.24543 < r < 1.24543
   95% expected band : 1.24543 < r < 1.24543
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1956620897
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.692149 +/- 0.00246665 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.692149 @ 95%CL (1 toyMC)
median expected limit: r < 0.692149 @ 95%CL (1 toyMC)
   68% expected band : 0.692149 < r < 0.692149
   95% expected band : 0.692149 < r < 0.692149
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -838435006
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.598571 +/- 0.00235746 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.598571 @ 95%CL (1 toyMC)
median expected limit: r < 0.598571 @ 95%CL (1 toyMC)
   68% expected band : 0.598571 < r < 0.598571
   95% expected band : 0.598571 < r < 0.598571
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 474308146
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.675562 +/- 0.00226585 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.675562 @ 95%CL (1 toyMC)
median expected limit: r < 0.675562 @ 95%CL (1 toyMC)
   68% expected band : 0.675562 < r < 0.675562
   95% expected band : 0.675562 < r < 0.675562
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 733874186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09837 +/- 0.00278068 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.09837 @ 95%CL (1 toyMC)
median expected limit: r < 1.09837 @ 95%CL (1 toyMC)
   68% expected band : 1.09837 < r < 1.09837
   95% expected band : 1.09837 < r < 1.09837
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2135149368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.476649 +/- 0.00245477 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.476649 @ 95%CL (1 toyMC)
median expected limit: r < 0.476649 @ 95%CL (1 toyMC)
   68% expected band : 0.476649 < r < 0.476649
   95% expected band : 0.476649 < r < 0.476649
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2137454324
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.407835 +/- 0.00249482 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.407835 @ 95%CL (1 toyMC)
median expected limit: r < 0.407835 @ 95%CL (1 toyMC)
   68% expected band : 0.407835 < r < 0.407835
   95% expected band : 0.407835 < r < 0.407835
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 885773882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.380695 +/- 0.00223263 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.380695 @ 95%CL (1 toyMC)
median expected limit: r < 0.380695 @ 95%CL (1 toyMC)
   68% expected band : 0.380695 < r < 0.380695
   95% expected band : 0.380695 < r < 0.380695
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1208557869
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.748851 +/- 0.00293503 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.748851 @ 95%CL (1 toyMC)
median expected limit: r < 0.748851 @ 95%CL (1 toyMC)
   68% expected band : 0.748851 < r < 0.748851
   95% expected band : 0.748851 < r < 0.748851
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2056130459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.393513 +/- 0.00226836 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.393513 @ 95%CL (1 toyMC)
median expected limit: r < 0.393513 @ 95%CL (1 toyMC)
   68% expected band : 0.393513 < r < 0.393513
   95% expected band : 0.393513 < r < 0.393513
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1234380366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.593597 +/- 0.00247396 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.593597 @ 95%CL (1 toyMC)
median expected limit: r < 0.593597 @ 95%CL (1 toyMC)
   68% expected band : 0.593597 < r < 0.593597
   95% expected band : 0.593597 < r < 0.593597
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1201452722
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.697233 +/- 0.00299549 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.697233 @ 95%CL (1 toyMC)
median expected limit: r < 0.697233 @ 95%CL (1 toyMC)
   68% expected band : 0.697233 < r < 0.697233
   95% expected band : 0.697233 < r < 0.697233
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -701025681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.87636 +/- 0.00373612 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 0.87636 @ 95%CL (1 toyMC)
median expected limit: r < 0.87636 @ 95%CL (1 toyMC)
   68% expected band : 0.87636 < r < 0.87636
   95% expected band : 0.87636 < r < 0.87636
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 869736632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.914357 +/- 0.00344492 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.914357 @ 95%CL (1 toyMC)
median expected limit: r < 0.914357 @ 95%CL (1 toyMC)
   68% expected band : 0.914357 < r < 0.914357
   95% expected band : 0.914357 < r < 0.914357
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1629789535
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.465958 +/- 0.00315765 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.465958 @ 95%CL (1 toyMC)
median expected limit: r < 0.465958 @ 95%CL (1 toyMC)
   68% expected band : 0.465958 < r < 0.465958
   95% expected band : 0.465958 < r < 0.465958
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -814109728
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.39092 +/- 0.00270877 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.39092 @ 95%CL (1 toyMC)
median expected limit: r < 0.39092 @ 95%CL (1 toyMC)
   68% expected band : 0.39092 < r < 0.39092
   95% expected band : 0.39092 < r < 0.39092
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -785789564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.43748 +/- 0.00246475 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.43748 @ 95%CL (1 toyMC)
median expected limit: r < 0.43748 @ 95%CL (1 toyMC)
   68% expected band : 0.43748 < r < 0.43748
   95% expected band : 0.43748 < r < 0.43748
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1128592616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23863 +/- 0.00329117 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.23863 @ 95%CL (1 toyMC)
median expected limit: r < 1.23863 @ 95%CL (1 toyMC)
   68% expected band : 1.23863 < r < 1.23863
   95% expected band : 1.23863 < r < 1.23863
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1139185216
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.391961 +/- 0.00283679 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.391961 @ 95%CL (1 toyMC)
median expected limit: r < 0.391961 @ 95%CL (1 toyMC)
   68% expected band : 0.391961 < r < 0.391961
   95% expected band : 0.391961 < r < 0.391961
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1384571378
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.322904 +/- 0.00277717 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.322904 @ 95%CL (1 toyMC)
median expected limit: r < 0.322904 @ 95%CL (1 toyMC)
   68% expected band : 0.322904 < r < 0.322904
   95% expected band : 0.322904 < r < 0.322904
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -747618307
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.397004 +/- 0.00234369 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.397004 @ 95%CL (1 toyMC)
median expected limit: r < 0.397004 @ 95%CL (1 toyMC)
   68% expected band : 0.397004 < r < 0.397004
   95% expected band : 0.397004 < r < 0.397004
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -120110139
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.605008 +/- 0.00300037 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.605008 @ 95%CL (1 toyMC)
median expected limit: r < 0.605008 @ 95%CL (1 toyMC)
   68% expected band : 0.605008 < r < 0.605008
   95% expected band : 0.605008 < r < 0.605008
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1820731371
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.358158 +/- 0.00274843 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.358158 @ 95%CL (1 toyMC)
median expected limit: r < 0.358158 @ 95%CL (1 toyMC)
   68% expected band : 0.358158 < r < 0.358158
   95% expected band : 0.358158 < r < 0.358158
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1241008128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.543298 +/- 0.00270687 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.543298 @ 95%CL (1 toyMC)
median expected limit: r < 0.543298 @ 95%CL (1 toyMC)
   68% expected band : 0.543298 < r < 0.543298
   95% expected band : 0.543298 < r < 0.543298
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1207172416
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270348 +/- 0.00272287 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.270348 @ 95%CL (1 toyMC)
median expected limit: r < 0.270348 @ 95%CL (1 toyMC)
   68% expected band : 0.270348 < r < 0.270348
   95% expected band : 0.270348 < r < 0.270348
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1690955471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.451669 +/- 0.00243442 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.451669 @ 95%CL (1 toyMC)
median expected limit: r < 0.451669 @ 95%CL (1 toyMC)
   68% expected band : 0.451669 < r < 0.451669
   95% expected band : 0.451669 < r < 0.451669
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1179756920
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04808 +/- 0.00296208 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.04808 @ 95%CL (1 toyMC)
median expected limit: r < 1.04808 @ 95%CL (1 toyMC)
   68% expected band : 1.04808 < r < 1.04808
   95% expected band : 1.04808 < r < 1.04808
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -410028622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.48199 +/- 0.00224174 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.48199 @ 95%CL (1 toyMC)
median expected limit: r < 0.48199 @ 95%CL (1 toyMC)
   68% expected band : 0.48199 < r < 0.48199
   95% expected band : 0.48199 < r < 0.48199
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1649185303
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.409328 +/- 0.00251089 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.409328 @ 95%CL (1 toyMC)
median expected limit: r < 0.409328 @ 95%CL (1 toyMC)
   68% expected band : 0.409328 < r < 0.409328
   95% expected band : 0.409328 < r < 0.409328
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1947701969
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.437594 +/- 0.00240354 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.437594 @ 95%CL (1 toyMC)
median expected limit: r < 0.437594 @ 95%CL (1 toyMC)
   68% expected band : 0.437594 < r < 0.437594
   95% expected band : 0.437594 < r < 0.437594
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1402191193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.801887 +/- 0.0033502 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.801887 @ 95%CL (1 toyMC)
median expected limit: r < 0.801887 @ 95%CL (1 toyMC)
   68% expected band : 0.801887 < r < 0.801887
   95% expected band : 0.801887 < r < 0.801887
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1535615193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.5286 +/- 0.00281232 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.5286 @ 95%CL (1 toyMC)
median expected limit: r < 0.5286 @ 95%CL (1 toyMC)
   68% expected band : 0.5286 < r < 0.5286
   95% expected band : 0.5286 < r < 0.5286
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -232776469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.643586 +/- 0.00323709 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.643586 @ 95%CL (1 toyMC)
median expected limit: r < 0.643586 @ 95%CL (1 toyMC)
   68% expected band : 0.643586 < r < 0.643586
   95% expected band : 0.643586 < r < 0.643586
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 157129248
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.646787 +/- 0.0027612 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.646787 @ 95%CL (1 toyMC)
median expected limit: r < 0.646787 @ 95%CL (1 toyMC)
   68% expected band : 0.646787 < r < 0.646787
   95% expected band : 0.646787 < r < 0.646787
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1766224140
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.636933 +/- 0.00258734 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.636933 @ 95%CL (1 toyMC)
median expected limit: r < 0.636933 @ 95%CL (1 toyMC)
   68% expected band : 0.636933 < r < 0.636933
   95% expected band : 0.636933 < r < 0.636933
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1788844835
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.376019 +/- 0.00250086 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.376019 @ 95%CL (1 toyMC)
median expected limit: r < 0.376019 @ 95%CL (1 toyMC)
   68% expected band : 0.376019 < r < 0.376019
   95% expected band : 0.376019 < r < 0.376019
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1628064861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.441038 +/- 0.00291018 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 0.441038 @ 95%CL (1 toyMC)
median expected limit: r < 0.441038 @ 95%CL (1 toyMC)
   68% expected band : 0.441038 < r < 0.441038
   95% expected band : 0.441038 < r < 0.441038
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1327250682
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.711035 +/- 0.00251145 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 0.711035 @ 95%CL (1 toyMC)
median expected limit: r < 0.711035 @ 95%CL (1 toyMC)
   68% expected band : 0.711035 < r < 0.711035
   95% expected band : 0.711035 < r < 0.711035
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1294052104
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.458467 +/- 0.00296429 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.458467 @ 95%CL (1 toyMC)
median expected limit: r < 0.458467 @ 95%CL (1 toyMC)
   68% expected band : 0.458467 < r < 0.458467
   95% expected band : 0.458467 < r < 0.458467
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -784727250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.698793 +/- 0.00288471 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.698793 @ 95%CL (1 toyMC)
median expected limit: r < 0.698793 @ 95%CL (1 toyMC)
   68% expected band : 0.698793 < r < 0.698793
   95% expected band : 0.698793 < r < 0.698793
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1371477103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.646916 +/- 0.00355012 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.646916 @ 95%CL (1 toyMC)
median expected limit: r < 0.646916 @ 95%CL (1 toyMC)
   68% expected band : 0.646916 < r < 0.646916
   95% expected band : 0.646916 < r < 0.646916
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 764983244
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329973 +/- 0.00253268 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 0.329973 @ 95%CL (1 toyMC)
median expected limit: r < 0.329973 @ 95%CL (1 toyMC)
   68% expected band : 0.329973 < r < 0.329973
   95% expected band : 0.329973 < r < 0.329973
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1362012017
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.52552 +/- 0.00311099 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.52552 @ 95%CL (1 toyMC)
median expected limit: r < 0.52552 @ 95%CL (1 toyMC)
   68% expected band : 0.52552 < r < 0.52552
   95% expected band : 0.52552 < r < 0.52552
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1521658166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.648042 +/- 0.00271201 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.648042 @ 95%CL (1 toyMC)
median expected limit: r < 0.648042 @ 95%CL (1 toyMC)
   68% expected band : 0.648042 < r < 0.648042
   95% expected band : 0.648042 < r < 0.648042
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1552007289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.473916 +/- 0.00310649 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.473916 @ 95%CL (1 toyMC)
median expected limit: r < 0.473916 @ 95%CL (1 toyMC)
   68% expected band : 0.473916 < r < 0.473916
   95% expected band : 0.473916 < r < 0.473916
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -574355773
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.700234 +/- 0.00243196 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.700234 @ 95%CL (1 toyMC)
median expected limit: r < 0.700234 @ 95%CL (1 toyMC)
   68% expected band : 0.700234 < r < 0.700234
   95% expected band : 0.700234 < r < 0.700234
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1094756011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.578771 +/- 0.00281985 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.578771 @ 95%CL (1 toyMC)
median expected limit: r < 0.578771 @ 95%CL (1 toyMC)
   68% expected band : 0.578771 < r < 0.578771
   95% expected band : 0.578771 < r < 0.578771
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 523213166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.645825 +/- 0.00253038 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.645825 @ 95%CL (1 toyMC)
median expected limit: r < 0.645825 @ 95%CL (1 toyMC)
   68% expected band : 0.645825 < r < 0.645825
   95% expected band : 0.645825 < r < 0.645825
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -35525833
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.502471 +/- 0.00239945 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.502471 @ 95%CL (1 toyMC)
median expected limit: r < 0.502471 @ 95%CL (1 toyMC)
   68% expected band : 0.502471 < r < 0.502471
   95% expected band : 0.502471 < r < 0.502471
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -631881865
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.427402 +/- 0.00277855 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.427402 @ 95%CL (1 toyMC)
median expected limit: r < 0.427402 @ 95%CL (1 toyMC)
   68% expected band : 0.427402 < r < 0.427402
   95% expected band : 0.427402 < r < 0.427402
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 213259877
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330592 +/- 0.00280294 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.330592 @ 95%CL (1 toyMC)
median expected limit: r < 0.330592 @ 95%CL (1 toyMC)
   68% expected band : 0.330592 < r < 0.330592
   95% expected band : 0.330592 < r < 0.330592
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -327853814
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.91678 +/- 0.00255181 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.91678 @ 95%CL (1 toyMC)
median expected limit: r < 0.91678 @ 95%CL (1 toyMC)
   68% expected band : 0.91678 < r < 0.91678
   95% expected band : 0.91678 < r < 0.91678
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 427255247
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.395626 +/- 0.00316998 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.395626 @ 95%CL (1 toyMC)
median expected limit: r < 0.395626 @ 95%CL (1 toyMC)
   68% expected band : 0.395626 < r < 0.395626
   95% expected band : 0.395626 < r < 0.395626
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 580845066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.38102 +/- 0.00236899 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.38102 @ 95%CL (1 toyMC)
median expected limit: r < 0.38102 @ 95%CL (1 toyMC)
   68% expected band : 0.38102 < r < 0.38102
   95% expected band : 0.38102 < r < 0.38102
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1853961732
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.498565 +/- 0.00264627 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.498565 @ 95%CL (1 toyMC)
median expected limit: r < 0.498565 @ 95%CL (1 toyMC)
   68% expected band : 0.498565 < r < 0.498565
   95% expected band : 0.498565 < r < 0.498565
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1801194608
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.58849 +/- 0.00238801 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.58849 @ 95%CL (1 toyMC)
median expected limit: r < 0.58849 @ 95%CL (1 toyMC)
   68% expected band : 0.58849 < r < 0.58849
   95% expected band : 0.58849 < r < 0.58849
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -349682683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.464545 +/- 0.00294959 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.78 min (real)
mean   expected limit: r < 0.464545 @ 95%CL (1 toyMC)
median expected limit: r < 0.464545 @ 95%CL (1 toyMC)
   68% expected band : 0.464545 < r < 0.464545
   95% expected band : 0.464545 < r < 0.464545
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1051044455
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.386932 +/- 0.00268723 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.386932 @ 95%CL (1 toyMC)
median expected limit: r < 0.386932 @ 95%CL (1 toyMC)
   68% expected band : 0.386932 < r < 0.386932
   95% expected band : 0.386932 < r < 0.386932
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -254305731
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.489273 +/- 0.00268055 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.489273 @ 95%CL (1 toyMC)
median expected limit: r < 0.489273 @ 95%CL (1 toyMC)
   68% expected band : 0.489273 < r < 0.489273
   95% expected band : 0.489273 < r < 0.489273
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2099857783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.453115 +/- 0.00276849 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.453115 @ 95%CL (1 toyMC)
median expected limit: r < 0.453115 @ 95%CL (1 toyMC)
   68% expected band : 0.453115 < r < 0.453115
   95% expected band : 0.453115 < r < 0.453115
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1164582742
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.564512 +/- 0.00238144 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.564512 @ 95%CL (1 toyMC)
median expected limit: r < 0.564512 @ 95%CL (1 toyMC)
   68% expected band : 0.564512 < r < 0.564512
   95% expected band : 0.564512 < r < 0.564512
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1518477013
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.463207 +/- 0.00204946 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.463207 @ 95%CL (1 toyMC)
median expected limit: r < 0.463207 @ 95%CL (1 toyMC)
   68% expected band : 0.463207 < r < 0.463207
   95% expected band : 0.463207 < r < 0.463207
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1953077786
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.588019 +/- 0.00278695 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.588019 @ 95%CL (1 toyMC)
median expected limit: r < 0.588019 @ 95%CL (1 toyMC)
   68% expected band : 0.588019 < r < 0.588019
   95% expected band : 0.588019 < r < 0.588019
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1019782141
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.52831 +/- 0.00266504 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.52831 @ 95%CL (1 toyMC)
median expected limit: r < 0.52831 @ 95%CL (1 toyMC)
   68% expected band : 0.52831 < r < 0.52831
   95% expected band : 0.52831 < r < 0.52831
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2004017282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.488538 +/- 0.00261916 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.488538 @ 95%CL (1 toyMC)
median expected limit: r < 0.488538 @ 95%CL (1 toyMC)
   68% expected band : 0.488538 < r < 0.488538
   95% expected band : 0.488538 < r < 0.488538
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -43206097
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.915283 +/- 0.0027336 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.85 min (real)
mean   expected limit: r < 0.915283 @ 95%CL (1 toyMC)
median expected limit: r < 0.915283 @ 95%CL (1 toyMC)
   68% expected band : 0.915283 < r < 0.915283
   95% expected band : 0.915283 < r < 0.915283
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -117699634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.514286 +/- 0.00300441 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.514286 @ 95%CL (1 toyMC)
median expected limit: r < 0.514286 @ 95%CL (1 toyMC)
   68% expected band : 0.514286 < r < 0.514286
   95% expected band : 0.514286 < r < 0.514286
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -78636193
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.908145 +/- 0.0029155 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.908145 @ 95%CL (1 toyMC)
median expected limit: r < 0.908145 @ 95%CL (1 toyMC)
   68% expected band : 0.908145 < r < 0.908145
   95% expected band : 0.908145 < r < 0.908145
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2144308616
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.730238 +/- 0.00359082 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.730238 @ 95%CL (1 toyMC)
median expected limit: r < 0.730238 @ 95%CL (1 toyMC)
   68% expected band : 0.730238 < r < 0.730238
   95% expected band : 0.730238 < r < 0.730238
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 668538683
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.465744 +/- 0.00267207 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.465744 @ 95%CL (1 toyMC)
median expected limit: r < 0.465744 @ 95%CL (1 toyMC)
   68% expected band : 0.465744 < r < 0.465744
   95% expected band : 0.465744 < r < 0.465744
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1488088657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.626979 +/- 0.00292361 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.626979 @ 95%CL (1 toyMC)
median expected limit: r < 0.626979 @ 95%CL (1 toyMC)
   68% expected band : 0.626979 < r < 0.626979
   95% expected band : 0.626979 < r < 0.626979
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1650131053
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.660093 +/- 0.00304655 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.660093 @ 95%CL (1 toyMC)
median expected limit: r < 0.660093 @ 95%CL (1 toyMC)
   68% expected band : 0.660093 < r < 0.660093
   95% expected band : 0.660093 < r < 0.660093
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 424559531
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.342404 +/- 0.00327903 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.342404 @ 95%CL (1 toyMC)
median expected limit: r < 0.342404 @ 95%CL (1 toyMC)
   68% expected band : 0.342404 < r < 0.342404
   95% expected band : 0.342404 < r < 0.342404
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1019035236
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.388922 +/- 0.0028762 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.388922 @ 95%CL (1 toyMC)
median expected limit: r < 0.388922 @ 95%CL (1 toyMC)
   68% expected band : 0.388922 < r < 0.388922
   95% expected band : 0.388922 < r < 0.388922
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine22.MarkovChainMC.mH22.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH22.-1019035236.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH22.-1084061004.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH22.-1094756011.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH22.-1139185216.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH22.-1164582742.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH22.-117699634.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH22.-1179756920.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH22.-120110139.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH22.-1202529811.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH22.-1207172416.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH22.-1208557869.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH22.-1227172106.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH22.-1358754198.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH22.-1402191193.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH22.-1447939158.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH22.-1458945977.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH22.-1488088657.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH22.-1518477013.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH22.-1535615193.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH22.-1599506979.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH22.-1649185303.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH22.-1690955471.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH22.-1761851386.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH22.-1766224140.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH22.-1801194608.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH22.-1820731371.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH22.-1929737208.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH22.-1947701969.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH22.-1956620897.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH22.-1971228946.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH22.-2004017282.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH22.-2056130459.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH22.-2099857783.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH22.-2135149368.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH22.-232776469.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH22.-254305731.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH22.-321442882.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH22.-327853814.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH22.-349682683.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH22.-35525833.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH22.-410028622.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH22.-422869071.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH22.-43206097.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH22.-574355773.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH22.-631881865.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH22.-701025681.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH22.-726361887.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH22.-747618307.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH22.-784727250.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH22.-785789564.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH22.-78636193.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH22.-804299151.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH22.-814109728.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH22.-823803917.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH22.-838435006.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH22.-952473944.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH22.1019782141.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH22.1051044455.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH22.1107207586.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH22.1128592616.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH22.1201452722.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH22.1234380366.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH22.1235438117.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH22.1241008128.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH22.1267048070.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH22.1294052104.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH22.1327250682.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH22.1362012017.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH22.1371477103.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH22.1384571378.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH22.1479490036.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH22.1521658166.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH22.1552007289.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH22.157129248.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH22.1628064861.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH22.1629789535.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH22.1650131053.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH22.1788844835.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH22.1835268382.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH22.1853961732.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH22.1883164668.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH22.1953077786.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH22.2018934284.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH22.213259877.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH22.2137454324.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH22.2144308616.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH22.2147371421.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH22.424559531.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH22.427255247.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH22.474308146.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH22.523213166.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH22.580845066.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH22.58506960.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH22.668538683.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH22.692340890.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH22.733874186.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH22.764983244.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH22.869736632.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH22.885773882.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH22.969584097.root
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 31770177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.931344 +/- 0.00341576 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 0.931344 @ 95%CL (1 toyMC)
median expected limit: r < 0.931344 @ 95%CL (1 toyMC)
   68% expected band : 0.931344 < r < 0.931344
   95% expected band : 0.931344 < r < 0.931344
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1917218759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.600035 +/- 0.00306715 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.600035 @ 95%CL (1 toyMC)
median expected limit: r < 0.600035 @ 95%CL (1 toyMC)
   68% expected band : 0.600035 < r < 0.600035
   95% expected band : 0.600035 < r < 0.600035
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 940060073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11475 +/- 0.00326609 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.11475 @ 95%CL (1 toyMC)
median expected limit: r < 1.11475 @ 95%CL (1 toyMC)
   68% expected band : 1.11475 < r < 1.11475
   95% expected band : 1.11475 < r < 1.11475
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -141579541
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05948 +/- 0.00295919 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.05948 @ 95%CL (1 toyMC)
median expected limit: r < 1.05948 @ 95%CL (1 toyMC)
   68% expected band : 1.05948 < r < 1.05948
   95% expected band : 1.05948 < r < 1.05948
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1691600326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.754039 +/- 0.00288005 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.754039 @ 95%CL (1 toyMC)
median expected limit: r < 0.754039 @ 95%CL (1 toyMC)
   68% expected band : 0.754039 < r < 0.754039
   95% expected band : 0.754039 < r < 0.754039
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1973819884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23271 +/- 0.00384494 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.23271 @ 95%CL (1 toyMC)
median expected limit: r < 1.23271 @ 95%CL (1 toyMC)
   68% expected band : 1.23271 < r < 1.23271
   95% expected band : 1.23271 < r < 1.23271
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -749536917
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0237 +/- 0.00298859 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.0237 @ 95%CL (1 toyMC)
median expected limit: r < 1.0237 @ 95%CL (1 toyMC)
   68% expected band : 1.0237 < r < 1.0237
   95% expected band : 1.0237 < r < 1.0237
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -560715930
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.80999 +/- 0.00334416 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.80999 @ 95%CL (1 toyMC)
median expected limit: r < 0.80999 @ 95%CL (1 toyMC)
   68% expected band : 0.80999 < r < 0.80999
   95% expected band : 0.80999 < r < 0.80999
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -255621375
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.737225 +/- 0.00347073 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.737225 @ 95%CL (1 toyMC)
median expected limit: r < 0.737225 @ 95%CL (1 toyMC)
   68% expected band : 0.737225 < r < 0.737225
   95% expected band : 0.737225 < r < 0.737225
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -649225195
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.993696 +/- 0.00373324 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 0.993696 @ 95%CL (1 toyMC)
median expected limit: r < 0.993696 @ 95%CL (1 toyMC)
   68% expected band : 0.993696 < r < 0.993696
   95% expected band : 0.993696 < r < 0.993696
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -470461256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.991814 +/- 0.00310733 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.991814 @ 95%CL (1 toyMC)
median expected limit: r < 0.991814 @ 95%CL (1 toyMC)
   68% expected band : 0.991814 < r < 0.991814
   95% expected band : 0.991814 < r < 0.991814
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1544385146
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01896 +/- 0.00384104 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 1.01896 @ 95%CL (1 toyMC)
median expected limit: r < 1.01896 @ 95%CL (1 toyMC)
   68% expected band : 1.01896 < r < 1.01896
   95% expected band : 1.01896 < r < 1.01896
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1894470829
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.557512 +/- 0.00361058 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.557512 @ 95%CL (1 toyMC)
median expected limit: r < 0.557512 @ 95%CL (1 toyMC)
   68% expected band : 0.557512 < r < 0.557512
   95% expected band : 0.557512 < r < 0.557512
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1662023634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.535375 +/- 0.00267281 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.535375 @ 95%CL (1 toyMC)
median expected limit: r < 0.535375 @ 95%CL (1 toyMC)
   68% expected band : 0.535375 < r < 0.535375
   95% expected band : 0.535375 < r < 0.535375
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -307185013
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49511 +/- 0.00380334 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.49511 @ 95%CL (1 toyMC)
median expected limit: r < 1.49511 @ 95%CL (1 toyMC)
   68% expected band : 1.49511 < r < 1.49511
   95% expected band : 1.49511 < r < 1.49511
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1169455327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.28307 +/- 0.0033876 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.28307 @ 95%CL (1 toyMC)
median expected limit: r < 1.28307 @ 95%CL (1 toyMC)
   68% expected band : 1.28307 < r < 1.28307
   95% expected band : 1.28307 < r < 1.28307
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 199186151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.755554 +/- 0.00277612 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.755554 @ 95%CL (1 toyMC)
median expected limit: r < 0.755554 @ 95%CL (1 toyMC)
   68% expected band : 0.755554 < r < 0.755554
   95% expected band : 0.755554 < r < 0.755554
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -497078505
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.12086 +/- 0.00432972 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.12086 @ 95%CL (1 toyMC)
median expected limit: r < 1.12086 @ 95%CL (1 toyMC)
   68% expected band : 1.12086 < r < 1.12086
   95% expected band : 1.12086 < r < 1.12086
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -55433951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.952337 +/- 0.00363201 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.952337 @ 95%CL (1 toyMC)
median expected limit: r < 0.952337 @ 95%CL (1 toyMC)
   68% expected band : 0.952337 < r < 0.952337
   95% expected band : 0.952337 < r < 0.952337
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1247625608
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.652413 +/- 0.00345462 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.652413 @ 95%CL (1 toyMC)
median expected limit: r < 0.652413 @ 95%CL (1 toyMC)
   68% expected band : 0.652413 < r < 0.652413
   95% expected band : 0.652413 < r < 0.652413
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1324293790
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45291 +/- 0.0035612 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.45291 @ 95%CL (1 toyMC)
median expected limit: r < 1.45291 @ 95%CL (1 toyMC)
   68% expected band : 1.45291 < r < 1.45291
   95% expected band : 1.45291 < r < 1.45291
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2028761220
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43262 +/- 0.00269651 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.43262 @ 95%CL (1 toyMC)
median expected limit: r < 1.43262 @ 95%CL (1 toyMC)
   68% expected band : 1.43262 < r < 1.43262
   95% expected band : 1.43262 < r < 1.43262
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2118008689
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.896495 +/- 0.00321435 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.896495 @ 95%CL (1 toyMC)
median expected limit: r < 0.896495 @ 95%CL (1 toyMC)
   68% expected band : 0.896495 < r < 0.896495
   95% expected band : 0.896495 < r < 0.896495
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1375205431
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.689973 +/- 0.00292097 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.689973 @ 95%CL (1 toyMC)
median expected limit: r < 0.689973 @ 95%CL (1 toyMC)
   68% expected band : 0.689973 < r < 0.689973
   95% expected band : 0.689973 < r < 0.689973
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1500168579
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.803549 +/- 0.00334395 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.803549 @ 95%CL (1 toyMC)
median expected limit: r < 0.803549 @ 95%CL (1 toyMC)
   68% expected band : 0.803549 < r < 0.803549
   95% expected band : 0.803549 < r < 0.803549
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 868624462
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.819499 +/- 0.00323629 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.819499 @ 95%CL (1 toyMC)
median expected limit: r < 0.819499 @ 95%CL (1 toyMC)
   68% expected band : 0.819499 < r < 0.819499
   95% expected band : 0.819499 < r < 0.819499
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 658557417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01654 +/- 0.00327994 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.01654 @ 95%CL (1 toyMC)
median expected limit: r < 1.01654 @ 95%CL (1 toyMC)
   68% expected band : 1.01654 < r < 1.01654
   95% expected band : 1.01654 < r < 1.01654
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1256189829
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.843438 +/- 0.00257515 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.843438 @ 95%CL (1 toyMC)
median expected limit: r < 0.843438 @ 95%CL (1 toyMC)
   68% expected band : 0.843438 < r < 0.843438
   95% expected band : 0.843438 < r < 0.843438
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1604631376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.553492 +/- 0.00281908 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.553492 @ 95%CL (1 toyMC)
median expected limit: r < 0.553492 @ 95%CL (1 toyMC)
   68% expected band : 0.553492 < r < 0.553492
   95% expected band : 0.553492 < r < 0.553492
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -740954282
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.79646 +/- 0.0028378 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 0.79646 @ 95%CL (1 toyMC)
median expected limit: r < 0.79646 @ 95%CL (1 toyMC)
   68% expected band : 0.79646 < r < 0.79646
   95% expected band : 0.79646 < r < 0.79646
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 956917657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.84264 +/- 0.00310338 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.84264 @ 95%CL (1 toyMC)
median expected limit: r < 0.84264 @ 95%CL (1 toyMC)
   68% expected band : 0.84264 < r < 0.84264
   95% expected band : 0.84264 < r < 0.84264
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2098507015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.566158 +/- 0.00256934 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.566158 @ 95%CL (1 toyMC)
median expected limit: r < 0.566158 @ 95%CL (1 toyMC)
   68% expected band : 0.566158 < r < 0.566158
   95% expected band : 0.566158 < r < 0.566158
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1364257390
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.444874 +/- 0.00290753 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.444874 @ 95%CL (1 toyMC)
median expected limit: r < 0.444874 @ 95%CL (1 toyMC)
   68% expected band : 0.444874 < r < 0.444874
   95% expected band : 0.444874 < r < 0.444874
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1169296066
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0036 +/- 0.0047799 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 1.0036 @ 95%CL (1 toyMC)
median expected limit: r < 1.0036 @ 95%CL (1 toyMC)
   68% expected band : 1.0036 < r < 1.0036
   95% expected band : 1.0036 < r < 1.0036
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 605514268
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.910915 +/- 0.0033417 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.910915 @ 95%CL (1 toyMC)
median expected limit: r < 0.910915 @ 95%CL (1 toyMC)
   68% expected band : 0.910915 < r < 0.910915
   95% expected band : 0.910915 < r < 0.910915
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2059899467
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02782 +/- 0.00366802 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.02782 @ 95%CL (1 toyMC)
median expected limit: r < 1.02782 @ 95%CL (1 toyMC)
   68% expected band : 1.02782 < r < 1.02782
   95% expected band : 1.02782 < r < 1.02782
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 88217298
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.856768 +/- 0.00299209 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.856768 @ 95%CL (1 toyMC)
median expected limit: r < 0.856768 @ 95%CL (1 toyMC)
   68% expected band : 0.856768 < r < 0.856768
   95% expected band : 0.856768 < r < 0.856768
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1687292912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.95143 +/- 0.00340632 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.95143 @ 95%CL (1 toyMC)
median expected limit: r < 0.95143 @ 95%CL (1 toyMC)
   68% expected band : 0.95143 < r < 0.95143
   95% expected band : 0.95143 < r < 0.95143
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1014979089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08669 +/- 0.00368739 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.08669 @ 95%CL (1 toyMC)
median expected limit: r < 1.08669 @ 95%CL (1 toyMC)
   68% expected band : 1.08669 < r < 1.08669
   95% expected band : 1.08669 < r < 1.08669
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 479363527
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.578677 +/- 0.0032788 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.578677 @ 95%CL (1 toyMC)
median expected limit: r < 0.578677 @ 95%CL (1 toyMC)
   68% expected band : 0.578677 < r < 0.578677
   95% expected band : 0.578677 < r < 0.578677
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1756856824
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.72251 +/- 0.00261195 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.72251 @ 95%CL (1 toyMC)
median expected limit: r < 0.72251 @ 95%CL (1 toyMC)
   68% expected band : 0.72251 < r < 0.72251
   95% expected band : 0.72251 < r < 0.72251
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1515950163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.668526 +/- 0.00263358 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.668526 @ 95%CL (1 toyMC)
median expected limit: r < 0.668526 @ 95%CL (1 toyMC)
   68% expected band : 0.668526 < r < 0.668526
   95% expected band : 0.668526 < r < 0.668526
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 222159981
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.808752 +/- 0.00301003 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.808752 @ 95%CL (1 toyMC)
median expected limit: r < 0.808752 @ 95%CL (1 toyMC)
   68% expected band : 0.808752 < r < 0.808752
   95% expected band : 0.808752 < r < 0.808752
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1005113765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.800574 +/- 0.002821 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.800574 @ 95%CL (1 toyMC)
median expected limit: r < 0.800574 @ 95%CL (1 toyMC)
   68% expected band : 0.800574 < r < 0.800574
   95% expected band : 0.800574 < r < 0.800574
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -412697712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.823324 +/- 0.00265548 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.823324 @ 95%CL (1 toyMC)
median expected limit: r < 0.823324 @ 95%CL (1 toyMC)
   68% expected band : 0.823324 < r < 0.823324
   95% expected band : 0.823324 < r < 0.823324
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 885355832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.698186 +/- 0.00301045 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.698186 @ 95%CL (1 toyMC)
median expected limit: r < 0.698186 @ 95%CL (1 toyMC)
   68% expected band : 0.698186 < r < 0.698186
   95% expected band : 0.698186 < r < 0.698186
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1566447702
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.911452 +/- 0.00300124 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.911452 @ 95%CL (1 toyMC)
median expected limit: r < 0.911452 @ 95%CL (1 toyMC)
   68% expected band : 0.911452 < r < 0.911452
   95% expected band : 0.911452 < r < 0.911452
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2066025937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.916382 +/- 0.00317422 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.916382 @ 95%CL (1 toyMC)
median expected limit: r < 0.916382 @ 95%CL (1 toyMC)
   68% expected band : 0.916382 < r < 0.916382
   95% expected band : 0.916382 < r < 0.916382
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -533634586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34989 +/- 0.00362238 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 1.34989 @ 95%CL (1 toyMC)
median expected limit: r < 1.34989 @ 95%CL (1 toyMC)
   68% expected band : 1.34989 < r < 1.34989
   95% expected band : 1.34989 < r < 1.34989
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 288085706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.769549 +/- 0.00303778 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.769549 @ 95%CL (1 toyMC)
median expected limit: r < 0.769549 @ 95%CL (1 toyMC)
   68% expected band : 0.769549 < r < 0.769549
   95% expected band : 0.769549 < r < 0.769549
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1476168015
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70705 +/- 0.00394735 @ 95% CL (100 tries)
Done in 0.91 min (cpu), 0.91 min (real)
mean   expected limit: r < 1.70705 @ 95%CL (1 toyMC)
median expected limit: r < 1.70705 @ 95%CL (1 toyMC)
   68% expected band : 1.70705 < r < 1.70705
   95% expected band : 1.70705 < r < 1.70705
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1236525034
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84801 +/- 0.00267783 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.84801 @ 95%CL (1 toyMC)
median expected limit: r < 1.84801 @ 95%CL (1 toyMC)
   68% expected band : 1.84801 < r < 1.84801
   95% expected band : 1.84801 < r < 1.84801
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 433976952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.826217 +/- 0.00262268 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.826217 @ 95%CL (1 toyMC)
median expected limit: r < 0.826217 @ 95%CL (1 toyMC)
   68% expected band : 0.826217 < r < 0.826217
   95% expected band : 0.826217 < r < 0.826217
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 230865693
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06145 +/- 0.00307685 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.06145 @ 95%CL (1 toyMC)
median expected limit: r < 1.06145 @ 95%CL (1 toyMC)
   68% expected band : 1.06145 < r < 1.06145
   95% expected band : 1.06145 < r < 1.06145
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1914306997
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.938241 +/- 0.00342907 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.938241 @ 95%CL (1 toyMC)
median expected limit: r < 0.938241 @ 95%CL (1 toyMC)
   68% expected band : 0.938241 < r < 0.938241
   95% expected band : 0.938241 < r < 0.938241
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 931643263
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.867821 +/- 0.00374979 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.867821 @ 95%CL (1 toyMC)
median expected limit: r < 0.867821 @ 95%CL (1 toyMC)
   68% expected band : 0.867821 < r < 0.867821
   95% expected band : 0.867821 < r < 0.867821
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1819342364
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0942 +/- 0.00268974 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.0942 @ 95%CL (1 toyMC)
median expected limit: r < 1.0942 @ 95%CL (1 toyMC)
   68% expected band : 1.0942 < r < 1.0942
   95% expected band : 1.0942 < r < 1.0942
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1074067483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.90974 +/- 0.0031115 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.90974 @ 95%CL (1 toyMC)
median expected limit: r < 0.90974 @ 95%CL (1 toyMC)
   68% expected band : 0.90974 < r < 0.90974
   95% expected band : 0.90974 < r < 0.90974
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 953888829
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02515 +/- 0.00402741 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.02515 @ 95%CL (1 toyMC)
median expected limit: r < 1.02515 @ 95%CL (1 toyMC)
   68% expected band : 1.02515 < r < 1.02515
   95% expected band : 1.02515 < r < 1.02515
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1433331846
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01792 +/- 0.00271772 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.01792 @ 95%CL (1 toyMC)
median expected limit: r < 1.01792 @ 95%CL (1 toyMC)
   68% expected band : 1.01792 < r < 1.01792
   95% expected band : 1.01792 < r < 1.01792
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1738859910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54553 +/- 0.00278097 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.84 min (real)
mean   expected limit: r < 1.54553 @ 95%CL (1 toyMC)
median expected limit: r < 1.54553 @ 95%CL (1 toyMC)
   68% expected band : 1.54553 < r < 1.54553
   95% expected band : 1.54553 < r < 1.54553
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 148440654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.951104 +/- 0.00403219 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.951104 @ 95%CL (1 toyMC)
median expected limit: r < 0.951104 @ 95%CL (1 toyMC)
   68% expected band : 0.951104 < r < 0.951104
   95% expected band : 0.951104 < r < 0.951104
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1502314296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27014 +/- 0.0031511 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.27014 @ 95%CL (1 toyMC)
median expected limit: r < 1.27014 @ 95%CL (1 toyMC)
   68% expected band : 1.27014 < r < 1.27014
   95% expected band : 1.27014 < r < 1.27014
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1950417232
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.930673 +/- 0.0034705 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.930673 @ 95%CL (1 toyMC)
median expected limit: r < 0.930673 @ 95%CL (1 toyMC)
   68% expected band : 0.930673 < r < 0.930673
   95% expected band : 0.930673 < r < 0.930673
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1980494743
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.582545 +/- 0.00333306 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.582545 @ 95%CL (1 toyMC)
median expected limit: r < 0.582545 @ 95%CL (1 toyMC)
   68% expected band : 0.582545 < r < 0.582545
   95% expected band : 0.582545 < r < 0.582545
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1608596792
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0561 +/- 0.00320735 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.0561 @ 95%CL (1 toyMC)
median expected limit: r < 1.0561 @ 95%CL (1 toyMC)
   68% expected band : 1.0561 < r < 1.0561
   95% expected band : 1.0561 < r < 1.0561
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1790440315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.754543 +/- 0.00372977 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.754543 @ 95%CL (1 toyMC)
median expected limit: r < 0.754543 @ 95%CL (1 toyMC)
   68% expected band : 0.754543 < r < 0.754543
   95% expected band : 0.754543 < r < 0.754543
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2086967764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57299 +/- 0.00306822 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.57299 @ 95%CL (1 toyMC)
median expected limit: r < 1.57299 @ 95%CL (1 toyMC)
   68% expected band : 1.57299 < r < 1.57299
   95% expected band : 1.57299 < r < 1.57299
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1046035559
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00252 +/- 0.00305759 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.00252 @ 95%CL (1 toyMC)
median expected limit: r < 1.00252 @ 95%CL (1 toyMC)
   68% expected band : 1.00252 < r < 1.00252
   95% expected band : 1.00252 < r < 1.00252
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 235726967
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3858 +/- 0.0033059 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.3858 @ 95%CL (1 toyMC)
median expected limit: r < 1.3858 @ 95%CL (1 toyMC)
   68% expected band : 1.3858 < r < 1.3858
   95% expected band : 1.3858 < r < 1.3858
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1399578031
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.555409 +/- 0.00297048 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.555409 @ 95%CL (1 toyMC)
median expected limit: r < 0.555409 @ 95%CL (1 toyMC)
   68% expected band : 0.555409 < r < 0.555409
   95% expected band : 0.555409 < r < 0.555409
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1284042581
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63261 +/- 0.00392831 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 1.63261 @ 95%CL (1 toyMC)
median expected limit: r < 1.63261 @ 95%CL (1 toyMC)
   68% expected band : 1.63261 < r < 1.63261
   95% expected band : 1.63261 < r < 1.63261
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1396428019
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.968508 +/- 0.00345334 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.968508 @ 95%CL (1 toyMC)
median expected limit: r < 0.968508 @ 95%CL (1 toyMC)
   68% expected band : 0.968508 < r < 0.968508
   95% expected band : 0.968508 < r < 0.968508
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1922104472
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.24628 +/- 0.00416993 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 2.24628 @ 95%CL (1 toyMC)
median expected limit: r < 2.24628 @ 95%CL (1 toyMC)
   68% expected band : 2.24628 < r < 2.24628
   95% expected band : 2.24628 < r < 2.24628
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1564080869
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.980105 +/- 0.00304854 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.980105 @ 95%CL (1 toyMC)
median expected limit: r < 0.980105 @ 95%CL (1 toyMC)
   68% expected band : 0.980105 < r < 0.980105
   95% expected band : 0.980105 < r < 0.980105
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2017014516
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.753301 +/- 0.00280927 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.753301 @ 95%CL (1 toyMC)
median expected limit: r < 0.753301 @ 95%CL (1 toyMC)
   68% expected band : 0.753301 < r < 0.753301
   95% expected band : 0.753301 < r < 0.753301
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -614829863
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.690112 +/- 0.00271459 @ 95% CL (100 tries)
Done in 0.78 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.690112 @ 95%CL (1 toyMC)
median expected limit: r < 0.690112 @ 95%CL (1 toyMC)
   68% expected band : 0.690112 < r < 0.690112
   95% expected band : 0.690112 < r < 0.690112
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2068989944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.932355 +/- 0.00316171 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.932355 @ 95%CL (1 toyMC)
median expected limit: r < 0.932355 @ 95%CL (1 toyMC)
   68% expected band : 0.932355 < r < 0.932355
   95% expected band : 0.932355 < r < 0.932355
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 574567195
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.798707 +/- 0.0034329 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.798707 @ 95%CL (1 toyMC)
median expected limit: r < 0.798707 @ 95%CL (1 toyMC)
   68% expected band : 0.798707 < r < 0.798707
   95% expected band : 0.798707 < r < 0.798707
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2012320164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.69766 +/- 0.00478856 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.69766 @ 95%CL (1 toyMC)
median expected limit: r < 1.69766 @ 95%CL (1 toyMC)
   68% expected band : 1.69766 < r < 1.69766
   95% expected band : 1.69766 < r < 1.69766
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 47455872
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.73197 +/- 0.00397053 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.73197 @ 95%CL (1 toyMC)
median expected limit: r < 1.73197 @ 95%CL (1 toyMC)
   68% expected band : 1.73197 < r < 1.73197
   95% expected band : 1.73197 < r < 1.73197
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -216237445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.922971 +/- 0.00350712 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.922971 @ 95%CL (1 toyMC)
median expected limit: r < 0.922971 @ 95%CL (1 toyMC)
   68% expected band : 0.922971 < r < 0.922971
   95% expected band : 0.922971 < r < 0.922971
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -77754057
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.694187 +/- 0.00306695 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.694187 @ 95%CL (1 toyMC)
median expected limit: r < 0.694187 @ 95%CL (1 toyMC)
   68% expected band : 0.694187 < r < 0.694187
   95% expected band : 0.694187 < r < 0.694187
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1851648706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.67385 +/- 0.00293874 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.67385 @ 95%CL (1 toyMC)
median expected limit: r < 0.67385 @ 95%CL (1 toyMC)
   68% expected band : 0.67385 < r < 0.67385
   95% expected band : 0.67385 < r < 0.67385
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1230369399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.602537 +/- 0.00291029 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.602537 @ 95%CL (1 toyMC)
median expected limit: r < 0.602537 @ 95%CL (1 toyMC)
   68% expected band : 0.602537 < r < 0.602537
   95% expected band : 0.602537 < r < 0.602537
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1908467996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00702 +/- 0.0035426 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.00702 @ 95%CL (1 toyMC)
median expected limit: r < 1.00702 @ 95%CL (1 toyMC)
   68% expected band : 1.00702 < r < 1.00702
   95% expected band : 1.00702 < r < 1.00702
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1444475922
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.752721 +/- 0.00317609 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.752721 @ 95%CL (1 toyMC)
median expected limit: r < 0.752721 @ 95%CL (1 toyMC)
   68% expected band : 0.752721 < r < 0.752721
   95% expected band : 0.752721 < r < 0.752721
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1771881177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.882281 +/- 0.00307888 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.882281 @ 95%CL (1 toyMC)
median expected limit: r < 0.882281 @ 95%CL (1 toyMC)
   68% expected band : 0.882281 < r < 0.882281
   95% expected band : 0.882281 < r < 0.882281
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1131789442
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.40111 +/- 0.00292691 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.40111 @ 95%CL (1 toyMC)
median expected limit: r < 1.40111 @ 95%CL (1 toyMC)
   68% expected band : 1.40111 < r < 1.40111
   95% expected band : 1.40111 < r < 1.40111
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1798391965
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.70092 +/- 0.00327773 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.70092 @ 95%CL (1 toyMC)
median expected limit: r < 0.70092 @ 95%CL (1 toyMC)
   68% expected band : 0.70092 < r < 0.70092
   95% expected band : 0.70092 < r < 0.70092
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1462860622
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.708213 +/- 0.00345491 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.708213 @ 95%CL (1 toyMC)
median expected limit: r < 0.708213 @ 95%CL (1 toyMC)
   68% expected band : 0.708213 < r < 0.708213
   95% expected band : 0.708213 < r < 0.708213
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1551118207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1788 +/- 0.00308657 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.1788 @ 95%CL (1 toyMC)
median expected limit: r < 1.1788 @ 95%CL (1 toyMC)
   68% expected band : 1.1788 < r < 1.1788
   95% expected band : 1.1788 < r < 1.1788
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1997222809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.890378 +/- 0.003144 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.890378 @ 95%CL (1 toyMC)
median expected limit: r < 0.890378 @ 95%CL (1 toyMC)
   68% expected band : 0.890378 < r < 0.890378
   95% expected band : 0.890378 < r < 0.890378
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 216015527
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01559 +/- 0.00288498 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.01559 @ 95%CL (1 toyMC)
median expected limit: r < 1.01559 @ 95%CL (1 toyMC)
   68% expected band : 1.01559 < r < 1.01559
   95% expected band : 1.01559 < r < 1.01559
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 457109098
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04897 +/- 0.00385914 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.04897 @ 95%CL (1 toyMC)
median expected limit: r < 1.04897 @ 95%CL (1 toyMC)
   68% expected band : 1.04897 < r < 1.04897
   95% expected band : 1.04897 < r < 1.04897
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 358938778
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.916293 +/- 0.00307489 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.916293 @ 95%CL (1 toyMC)
median expected limit: r < 0.916293 @ 95%CL (1 toyMC)
   68% expected band : 0.916293 < r < 0.916293
   95% expected band : 0.916293 < r < 0.916293
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 755133315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.605812 +/- 0.00292929 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.605812 @ 95%CL (1 toyMC)
median expected limit: r < 0.605812 @ 95%CL (1 toyMC)
   68% expected band : 0.605812 < r < 0.605812
   95% expected band : 0.605812 < r < 0.605812
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1535730461
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.8245 +/- 0.00294091 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.8245 @ 95%CL (1 toyMC)
median expected limit: r < 0.8245 @ 95%CL (1 toyMC)
   68% expected band : 0.8245 < r < 0.8245
   95% expected band : 0.8245 < r < 0.8245
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1487666537
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.881313 +/- 0.00349476 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.881313 @ 95%CL (1 toyMC)
median expected limit: r < 0.881313 @ 95%CL (1 toyMC)
   68% expected band : 0.881313 < r < 0.881313
   95% expected band : 0.881313 < r < 0.881313
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1981022234
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05367 +/- 0.00365665 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.05367 @ 95%CL (1 toyMC)
median expected limit: r < 1.05367 @ 95%CL (1 toyMC)
   68% expected band : 1.05367 < r < 1.05367
   95% expected band : 1.05367 < r < 1.05367
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine28.MarkovChainMC.mH28.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH28.-1005113765.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH28.-1014979089.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH28.-1131789442.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH28.-1169296066.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH28.-1230369399.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH28.-1236525034.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH28.-1284042581.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH28.-1375205431.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH28.-1396428019.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH28.-141579541.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH28.-1433331846.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH28.-1444475922.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH28.-1487666537.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH28.-1502314296.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH28.-1535730461.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH28.-1551118207.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH28.-1604631376.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH28.-1687292912.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH28.-1691600326.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH28.-1756856824.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH28.-1771881177.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH28.-1798391965.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH28.-1908467996.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH28.-1917218759.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH28.-1950417232.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH28.-1973819884.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH28.-1980494743.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH28.-1981022234.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH28.-1997222809.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH28.-2012320164.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH28.-2066025937.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH28.-2068989944.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH28.-2086967764.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH28.-216237445.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH28.-255621375.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH28.-307185013.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH28.-412697712.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH28.-470461256.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH28.-497078505.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH28.-533634586.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH28.-55433951.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH28.-560715930.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH28.-614829863.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH28.-649225195.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH28.-740954282.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH28.-749536917.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH28.-77754057.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH28.1046035559.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH28.1074067483.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH28.1169455327.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH28.1247625608.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH28.1256189829.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH28.1324293790.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH28.1364257390.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH28.1399578031.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH28.1462860622.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH28.1476168015.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH28.148440654.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH28.1500168579.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH28.1515950163.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH28.1544385146.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH28.1564080869.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH28.1566447702.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH28.1608596792.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH28.1662023634.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH28.1738859910.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH28.1790440315.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH28.1819342364.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH28.1851648706.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH28.1894470829.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH28.1914306997.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH28.1922104472.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH28.199186151.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH28.2017014516.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH28.2028761220.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH28.2059899467.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH28.2098507015.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH28.2118008689.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH28.216015527.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH28.222159981.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH28.230865693.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH28.235726967.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH28.288085706.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH28.31770177.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH28.358938778.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH28.433976952.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH28.457109098.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH28.47455872.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH28.479363527.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH28.574567195.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH28.605514268.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH28.658557417.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH28.755133315.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH28.868624462.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH28.88217298.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH28.885355832.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH28.931643263.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH28.940060073.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH28.953888829.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH28.956917657.root
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 361232935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.7156 +/- 0.00422621 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.7156 @ 95%CL (1 toyMC)
median expected limit: r < 1.7156 @ 95%CL (1 toyMC)
   68% expected band : 1.7156 < r < 1.7156
   95% expected band : 1.7156 < r < 1.7156
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1477305925
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.27911 +/- 0.00450744 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.27911 @ 95%CL (1 toyMC)
median expected limit: r < 1.27911 @ 95%CL (1 toyMC)
   68% expected band : 1.27911 < r < 1.27911
   95% expected band : 1.27911 < r < 1.27911
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2076948840
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.976559 +/- 0.00421651 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.976559 @ 95%CL (1 toyMC)
median expected limit: r < 0.976559 @ 95%CL (1 toyMC)
   68% expected band : 0.976559 < r < 0.976559
   95% expected band : 0.976559 < r < 0.976559
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1969182266
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25765 +/- 0.00376349 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.25765 @ 95%CL (1 toyMC)
median expected limit: r < 1.25765 @ 95%CL (1 toyMC)
   68% expected band : 1.25765 < r < 1.25765
   95% expected band : 1.25765 < r < 1.25765
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 715753470
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4832 +/- 0.00407032 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.4832 @ 95%CL (1 toyMC)
median expected limit: r < 2.4832 @ 95%CL (1 toyMC)
   68% expected band : 2.4832 < r < 2.4832
   95% expected band : 2.4832 < r < 2.4832
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1200338314
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42172 +/- 0.00348025 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.42172 @ 95%CL (1 toyMC)
median expected limit: r < 1.42172 @ 95%CL (1 toyMC)
   68% expected band : 1.42172 < r < 1.42172
   95% expected band : 1.42172 < r < 1.42172
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -323256690
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.14189 +/- 0.0047722 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.14189 @ 95%CL (1 toyMC)
median expected limit: r < 2.14189 @ 95%CL (1 toyMC)
   68% expected band : 2.14189 < r < 2.14189
   95% expected band : 2.14189 < r < 2.14189
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1907998367
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.49541 +/- 0.00498118 @ 95% CL (100 tries)
Done in 0.87 min (cpu), 0.88 min (real)
mean   expected limit: r < 3.49541 @ 95%CL (1 toyMC)
median expected limit: r < 3.49541 @ 95%CL (1 toyMC)
   68% expected band : 3.49541 < r < 3.49541
   95% expected band : 3.49541 < r < 3.49541
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 298108639
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54044 +/- 0.00381028 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.54044 @ 95%CL (1 toyMC)
median expected limit: r < 1.54044 @ 95%CL (1 toyMC)
   68% expected band : 1.54044 < r < 1.54044
   95% expected band : 1.54044 < r < 1.54044
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -605083823
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26391 +/- 0.00358869 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.26391 @ 95%CL (1 toyMC)
median expected limit: r < 1.26391 @ 95%CL (1 toyMC)
   68% expected band : 1.26391 < r < 1.26391
   95% expected band : 1.26391 < r < 1.26391
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 966156709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.11068 +/- 0.00407116 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.11068 @ 95%CL (1 toyMC)
median expected limit: r < 1.11068 @ 95%CL (1 toyMC)
   68% expected band : 1.11068 < r < 1.11068
   95% expected band : 1.11068 < r < 1.11068
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1114198540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42386 +/- 0.00334503 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.42386 @ 95%CL (1 toyMC)
median expected limit: r < 1.42386 @ 95%CL (1 toyMC)
   68% expected band : 1.42386 < r < 1.42386
   95% expected band : 1.42386 < r < 1.42386
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2071379202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30801 +/- 0.00424619 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.30801 @ 95%CL (1 toyMC)
median expected limit: r < 1.30801 @ 95%CL (1 toyMC)
   68% expected band : 1.30801 < r < 1.30801
   95% expected band : 1.30801 < r < 1.30801
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1081110921
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81471 +/- 0.00432868 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.86 min (real)
mean   expected limit: r < 1.81471 @ 95%CL (1 toyMC)
median expected limit: r < 1.81471 @ 95%CL (1 toyMC)
   68% expected band : 1.81471 < r < 1.81471
   95% expected band : 1.81471 < r < 1.81471
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 969604665
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.79041 +/- 0.00405007 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.79041 @ 95%CL (1 toyMC)
median expected limit: r < 1.79041 @ 95%CL (1 toyMC)
   68% expected band : 1.79041 < r < 1.79041
   95% expected band : 1.79041 < r < 1.79041
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1608213250
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.98123 +/- 0.00439491 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.98123 @ 95%CL (1 toyMC)
median expected limit: r < 1.98123 @ 95%CL (1 toyMC)
   68% expected band : 1.98123 < r < 1.98123
   95% expected band : 1.98123 < r < 1.98123
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1580484609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.90254 +/- 0.00424659 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 1.90254 @ 95%CL (1 toyMC)
median expected limit: r < 1.90254 @ 95%CL (1 toyMC)
   68% expected band : 1.90254 < r < 1.90254
   95% expected band : 1.90254 < r < 1.90254
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -166944762
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.72344 +/- 0.0042386 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 1.72344 @ 95%CL (1 toyMC)
median expected limit: r < 1.72344 @ 95%CL (1 toyMC)
   68% expected band : 1.72344 < r < 1.72344
   95% expected band : 1.72344 < r < 1.72344
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -737315204
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.996274 +/- 0.00402191 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.996274 @ 95%CL (1 toyMC)
median expected limit: r < 0.996274 @ 95%CL (1 toyMC)
   68% expected band : 0.996274 < r < 0.996274
   95% expected band : 0.996274 < r < 0.996274
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 780125912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44789 +/- 0.00426539 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.44789 @ 95%CL (1 toyMC)
median expected limit: r < 1.44789 @ 95%CL (1 toyMC)
   68% expected band : 1.44789 < r < 1.44789
   95% expected band : 1.44789 < r < 1.44789
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1708728046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.858651 +/- 0.00389115 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 0.858651 @ 95%CL (1 toyMC)
median expected limit: r < 0.858651 @ 95%CL (1 toyMC)
   68% expected band : 0.858651 < r < 0.858651
   95% expected band : 0.858651 < r < 0.858651
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2112663488
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.80498 +/- 0.0031861 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.80498 @ 95%CL (1 toyMC)
median expected limit: r < 0.80498 @ 95%CL (1 toyMC)
   68% expected band : 0.80498 < r < 0.80498
   95% expected band : 0.80498 < r < 0.80498
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 177842739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24367 +/- 0.00386712 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.24367 @ 95%CL (1 toyMC)
median expected limit: r < 1.24367 @ 95%CL (1 toyMC)
   68% expected band : 1.24367 < r < 1.24367
   95% expected band : 1.24367 < r < 1.24367
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1428866025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.06177 +/- 0.00444978 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 2.06177 @ 95%CL (1 toyMC)
median expected limit: r < 2.06177 @ 95%CL (1 toyMC)
   68% expected band : 2.06177 < r < 2.06177
   95% expected band : 2.06177 < r < 2.06177
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 737639124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70968 +/- 0.00437838 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.70968 @ 95%CL (1 toyMC)
median expected limit: r < 1.70968 @ 95%CL (1 toyMC)
   68% expected band : 1.70968 < r < 1.70968
   95% expected band : 1.70968 < r < 1.70968
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 435535653
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08984 +/- 0.00334451 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.08984 @ 95%CL (1 toyMC)
median expected limit: r < 1.08984 @ 95%CL (1 toyMC)
   68% expected band : 1.08984 < r < 1.08984
   95% expected band : 1.08984 < r < 1.08984
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2102272055
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05665 +/- 0.00334343 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.05665 @ 95%CL (1 toyMC)
median expected limit: r < 1.05665 @ 95%CL (1 toyMC)
   68% expected band : 1.05665 < r < 1.05665
   95% expected band : 1.05665 < r < 1.05665
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 452634809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.24461 +/- 0.00447131 @ 95% CL (100 tries)
Done in 0.86 min (cpu), 0.86 min (real)
mean   expected limit: r < 3.24461 @ 95%CL (1 toyMC)
median expected limit: r < 3.24461 @ 95%CL (1 toyMC)
   68% expected band : 3.24461 < r < 3.24461
   95% expected band : 3.24461 < r < 3.24461
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2078565985
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17197 +/- 0.00399896 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.17197 @ 95%CL (1 toyMC)
median expected limit: r < 2.17197 @ 95%CL (1 toyMC)
   68% expected band : 2.17197 < r < 2.17197
   95% expected band : 2.17197 < r < 2.17197
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1380512305
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46871 +/- 0.00399854 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.46871 @ 95%CL (1 toyMC)
median expected limit: r < 1.46871 @ 95%CL (1 toyMC)
   68% expected band : 1.46871 < r < 1.46871
   95% expected band : 1.46871 < r < 1.46871
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1852026439
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39358 +/- 0.00395825 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.39358 @ 95%CL (1 toyMC)
median expected limit: r < 1.39358 @ 95%CL (1 toyMC)
   68% expected band : 1.39358 < r < 1.39358
   95% expected band : 1.39358 < r < 1.39358
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 87517892
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.853252 +/- 0.00337377 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.853252 @ 95%CL (1 toyMC)
median expected limit: r < 0.853252 @ 95%CL (1 toyMC)
   68% expected band : 0.853252 < r < 0.853252
   95% expected band : 0.853252 < r < 0.853252
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1631124364
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.4935 +/- 0.00353995 @ 95% CL (100 tries)
Done in 0.89 min (cpu), 0.89 min (real)
mean   expected limit: r < 2.4935 @ 95%CL (1 toyMC)
median expected limit: r < 2.4935 @ 95%CL (1 toyMC)
   68% expected band : 2.4935 < r < 2.4935
   95% expected band : 2.4935 < r < 2.4935
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1118209586
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.14657 +/- 0.00417929 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.14657 @ 95%CL (1 toyMC)
median expected limit: r < 1.14657 @ 95%CL (1 toyMC)
   68% expected band : 1.14657 < r < 1.14657
   95% expected band : 1.14657 < r < 1.14657
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2054879428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44485 +/- 0.00314093 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 1.44485 @ 95%CL (1 toyMC)
median expected limit: r < 1.44485 @ 95%CL (1 toyMC)
   68% expected band : 1.44485 < r < 1.44485
   95% expected band : 1.44485 < r < 1.44485
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -402227634
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.61687 +/- 0.00454316 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.61687 @ 95%CL (1 toyMC)
median expected limit: r < 2.61687 @ 95%CL (1 toyMC)
   68% expected band : 2.61687 < r < 2.61687
   95% expected band : 2.61687 < r < 2.61687
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1463720323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.71865 +/- 0.00415515 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.84 min (real)
mean   expected limit: r < 1.71865 @ 95%CL (1 toyMC)
median expected limit: r < 1.71865 @ 95%CL (1 toyMC)
   68% expected band : 1.71865 < r < 1.71865
   95% expected band : 1.71865 < r < 1.71865
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -980199328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21246 +/- 0.00346895 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.21246 @ 95%CL (1 toyMC)
median expected limit: r < 1.21246 @ 95%CL (1 toyMC)
   68% expected band : 1.21246 < r < 1.21246
   95% expected band : 1.21246 < r < 1.21246
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1655364002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.82582 +/- 0.00397696 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.85 min (real)
mean   expected limit: r < 1.82582 @ 95%CL (1 toyMC)
median expected limit: r < 1.82582 @ 95%CL (1 toyMC)
   68% expected band : 1.82582 < r < 1.82582
   95% expected band : 1.82582 < r < 1.82582
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1642957047
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25954 +/- 0.00426956 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.25954 @ 95%CL (1 toyMC)
median expected limit: r < 1.25954 @ 95%CL (1 toyMC)
   68% expected band : 1.25954 < r < 1.25954
   95% expected band : 1.25954 < r < 1.25954
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1326475406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34314 +/- 0.00339177 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.34314 @ 95%CL (1 toyMC)
median expected limit: r < 1.34314 @ 95%CL (1 toyMC)
   68% expected band : 1.34314 < r < 1.34314
   95% expected band : 1.34314 < r < 1.34314
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1071347051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.34197 +/- 0.00447289 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.34197 @ 95%CL (1 toyMC)
median expected limit: r < 1.34197 @ 95%CL (1 toyMC)
   68% expected band : 1.34197 < r < 1.34197
   95% expected band : 1.34197 < r < 1.34197
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1268173601
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.686349 +/- 0.00231026 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.686349 @ 95%CL (1 toyMC)
median expected limit: r < 0.686349 @ 95%CL (1 toyMC)
   68% expected band : 0.686349 < r < 0.686349
   95% expected band : 0.686349 < r < 0.686349
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -89791200
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.60531 +/- 0.00423515 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.60531 @ 95%CL (1 toyMC)
median expected limit: r < 1.60531 @ 95%CL (1 toyMC)
   68% expected band : 1.60531 < r < 1.60531
   95% expected band : 1.60531 < r < 1.60531
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 159618847
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04512 +/- 0.00504655 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 2.04512 @ 95%CL (1 toyMC)
median expected limit: r < 2.04512 @ 95%CL (1 toyMC)
   68% expected band : 2.04512 < r < 2.04512
   95% expected band : 2.04512 < r < 2.04512
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 151690839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17553 +/- 0.00383437 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.17553 @ 95%CL (1 toyMC)
median expected limit: r < 1.17553 @ 95%CL (1 toyMC)
   68% expected band : 1.17553 < r < 1.17553
   95% expected band : 1.17553 < r < 1.17553
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1626974493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58603 +/- 0.00451248 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.58603 @ 95%CL (1 toyMC)
median expected limit: r < 1.58603 @ 95%CL (1 toyMC)
   68% expected band : 1.58603 < r < 1.58603
   95% expected band : 1.58603 < r < 1.58603
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1448716205
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22073 +/- 0.00401371 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.22073 @ 95%CL (1 toyMC)
median expected limit: r < 1.22073 @ 95%CL (1 toyMC)
   68% expected band : 1.22073 < r < 1.22073
   95% expected band : 1.22073 < r < 1.22073
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -647578349
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50067 +/- 0.00413666 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 1.50067 @ 95%CL (1 toyMC)
median expected limit: r < 1.50067 @ 95%CL (1 toyMC)
   68% expected band : 1.50067 < r < 1.50067
   95% expected band : 1.50067 < r < 1.50067
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -658906368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10714 +/- 0.00415865 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.10714 @ 95%CL (1 toyMC)
median expected limit: r < 1.10714 @ 95%CL (1 toyMC)
   68% expected band : 1.10714 < r < 1.10714
   95% expected band : 1.10714 < r < 1.10714
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 27348479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.55212 +/- 0.00494638 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.55212 @ 95%CL (1 toyMC)
median expected limit: r < 1.55212 @ 95%CL (1 toyMC)
   68% expected band : 1.55212 < r < 1.55212
   95% expected band : 1.55212 < r < 1.55212
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 267885133
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12376 +/- 0.00376917 @ 95% CL (100 tries)
Done in 0.88 min (cpu), 0.88 min (real)
mean   expected limit: r < 2.12376 @ 95%CL (1 toyMC)
median expected limit: r < 2.12376 @ 95%CL (1 toyMC)
   68% expected band : 2.12376 < r < 2.12376
   95% expected band : 2.12376 < r < 2.12376
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 862478077
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03034 +/- 0.00429762 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.03034 @ 95%CL (1 toyMC)
median expected limit: r < 1.03034 @ 95%CL (1 toyMC)
   68% expected band : 1.03034 < r < 1.03034
   95% expected band : 1.03034 < r < 1.03034
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -277254493
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.51925 +/- 0.00341912 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.51925 @ 95%CL (1 toyMC)
median expected limit: r < 1.51925 @ 95%CL (1 toyMC)
   68% expected band : 1.51925 < r < 1.51925
   95% expected band : 1.51925 < r < 1.51925
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 655709257
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.61385 +/- 0.00403225 @ 95% CL (100 tries)
Done in 0.86 min (cpu), 0.87 min (real)
mean   expected limit: r < 2.61385 @ 95%CL (1 toyMC)
median expected limit: r < 2.61385 @ 95%CL (1 toyMC)
   68% expected band : 2.61385 < r < 2.61385
   95% expected band : 2.61385 < r < 2.61385
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 529679090
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45217 +/- 0.00461653 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.45217 @ 95%CL (1 toyMC)
median expected limit: r < 1.45217 @ 95%CL (1 toyMC)
   68% expected band : 1.45217 < r < 1.45217
   95% expected band : 1.45217 < r < 1.45217
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1797464900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.33461 +/- 0.00497955 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.33461 @ 95%CL (1 toyMC)
median expected limit: r < 1.33461 @ 95%CL (1 toyMC)
   68% expected band : 1.33461 < r < 1.33461
   95% expected band : 1.33461 < r < 1.33461
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 498645588
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.91333 +/- 0.00543626 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 3.91333 @ 95%CL (1 toyMC)
median expected limit: r < 3.91333 @ 95%CL (1 toyMC)
   68% expected band : 3.91333 < r < 3.91333
   95% expected band : 3.91333 < r < 3.91333
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -345794498
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.30128 +/- 0.00424754 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.30128 @ 95%CL (1 toyMC)
median expected limit: r < 1.30128 @ 95%CL (1 toyMC)
   68% expected band : 1.30128 < r < 1.30128
   95% expected band : 1.30128 < r < 1.30128
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -699672377
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2384 +/- 0.0035967 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.2384 @ 95%CL (1 toyMC)
median expected limit: r < 1.2384 @ 95%CL (1 toyMC)
   68% expected band : 1.2384 < r < 1.2384
   95% expected band : 1.2384 < r < 1.2384
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 769738763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2633 +/- 0.00468181 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.2633 @ 95%CL (1 toyMC)
median expected limit: r < 1.2633 @ 95%CL (1 toyMC)
   68% expected band : 1.2633 < r < 1.2633
   95% expected band : 1.2633 < r < 1.2633
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 736961969
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26843 +/- 0.00457117 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.26843 @ 95%CL (1 toyMC)
median expected limit: r < 1.26843 @ 95%CL (1 toyMC)
   68% expected band : 1.26843 < r < 1.26843
   95% expected band : 1.26843 < r < 1.26843
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 907530322
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.3242 +/- 0.00352045 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.3242 @ 95%CL (1 toyMC)
median expected limit: r < 1.3242 @ 95%CL (1 toyMC)
   68% expected band : 1.3242 < r < 1.3242
   95% expected band : 1.3242 < r < 1.3242
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1439302388
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.16811 +/- 0.00381987 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.16811 @ 95%CL (1 toyMC)
median expected limit: r < 1.16811 @ 95%CL (1 toyMC)
   68% expected band : 1.16811 < r < 1.16811
   95% expected band : 1.16811 < r < 1.16811
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -655305243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.918974 +/- 0.00321404 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 0.918974 @ 95%CL (1 toyMC)
median expected limit: r < 0.918974 @ 95%CL (1 toyMC)
   68% expected band : 0.918974 < r < 0.918974
   95% expected band : 0.918974 < r < 0.918974
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2127664239
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18462 +/- 0.00378428 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.18462 @ 95%CL (1 toyMC)
median expected limit: r < 1.18462 @ 95%CL (1 toyMC)
   68% expected band : 1.18462 < r < 1.18462
   95% expected band : 1.18462 < r < 1.18462
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1666343511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52048 +/- 0.00415449 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.52048 @ 95%CL (1 toyMC)
median expected limit: r < 1.52048 @ 95%CL (1 toyMC)
   68% expected band : 1.52048 < r < 1.52048
   95% expected band : 1.52048 < r < 1.52048
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2055418952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04659 +/- 0.00360874 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.04659 @ 95%CL (1 toyMC)
median expected limit: r < 1.04659 @ 95%CL (1 toyMC)
   68% expected band : 1.04659 < r < 1.04659
   95% expected band : 1.04659 < r < 1.04659
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2026772271
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15703 +/- 0.00466572 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.15703 @ 95%CL (1 toyMC)
median expected limit: r < 1.15703 @ 95%CL (1 toyMC)
   68% expected band : 1.15703 < r < 1.15703
   95% expected band : 1.15703 < r < 1.15703
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 807792988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09629 +/- 0.00417243 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.09629 @ 95%CL (1 toyMC)
median expected limit: r < 1.09629 @ 95%CL (1 toyMC)
   68% expected band : 1.09629 < r < 1.09629
   95% expected band : 1.09629 < r < 1.09629
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 324812175
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.73711 +/- 0.00482896 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.73711 @ 95%CL (1 toyMC)
median expected limit: r < 2.73711 @ 95%CL (1 toyMC)
   68% expected band : 2.73711 < r < 2.73711
   95% expected band : 2.73711 < r < 2.73711
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 509764540
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.7226 +/- 0.00430453 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.7226 @ 95%CL (1 toyMC)
median expected limit: r < 1.7226 @ 95%CL (1 toyMC)
   68% expected band : 1.7226 < r < 1.7226
   95% expected band : 1.7226 < r < 1.7226
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2009892936
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37361 +/- 0.00469814 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.37361 @ 95%CL (1 toyMC)
median expected limit: r < 1.37361 @ 95%CL (1 toyMC)
   68% expected band : 1.37361 < r < 1.37361
   95% expected band : 1.37361 < r < 1.37361
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1780093458
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03346 +/- 0.00480311 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.03346 @ 95%CL (1 toyMC)
median expected limit: r < 1.03346 @ 95%CL (1 toyMC)
   68% expected band : 1.03346 < r < 1.03346
   95% expected band : 1.03346 < r < 1.03346
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -843027286
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.69418 +/- 0.00473622 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.69418 @ 95%CL (1 toyMC)
median expected limit: r < 2.69418 @ 95%CL (1 toyMC)
   68% expected band : 2.69418 < r < 2.69418
   95% expected band : 2.69418 < r < 2.69418
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 274432613
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.779024 +/- 0.00244985 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.80 min (real)
mean   expected limit: r < 0.779024 @ 95%CL (1 toyMC)
median expected limit: r < 0.779024 @ 95%CL (1 toyMC)
   68% expected band : 0.779024 < r < 0.779024
   95% expected band : 0.779024 < r < 0.779024
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -426743474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84212 +/- 0.0039551 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.84212 @ 95%CL (1 toyMC)
median expected limit: r < 1.84212 @ 95%CL (1 toyMC)
   68% expected band : 1.84212 < r < 1.84212
   95% expected band : 1.84212 < r < 1.84212
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -556491518
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53772 +/- 0.00487424 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.53772 @ 95%CL (1 toyMC)
median expected limit: r < 2.53772 @ 95%CL (1 toyMC)
   68% expected band : 2.53772 < r < 2.53772
   95% expected band : 2.53772 < r < 2.53772
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 931091975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02289 +/- 0.00375511 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.02289 @ 95%CL (1 toyMC)
median expected limit: r < 1.02289 @ 95%CL (1 toyMC)
   68% expected band : 1.02289 < r < 1.02289
   95% expected band : 1.02289 < r < 1.02289
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 156542684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.85241 +/- 0.00383044 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.85241 @ 95%CL (1 toyMC)
median expected limit: r < 1.85241 @ 95%CL (1 toyMC)
   68% expected band : 1.85241 < r < 1.85241
   95% expected band : 1.85241 < r < 1.85241
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1396838198
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09982 +/- 0.00401153 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.09982 @ 95%CL (1 toyMC)
median expected limit: r < 1.09982 @ 95%CL (1 toyMC)
   68% expected band : 1.09982 < r < 1.09982
   95% expected band : 1.09982 < r < 1.09982
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1014949944
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45316 +/- 0.00333425 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.45316 @ 95%CL (1 toyMC)
median expected limit: r < 1.45316 @ 95%CL (1 toyMC)
   68% expected band : 1.45316 < r < 1.45316
   95% expected band : 1.45316 < r < 1.45316
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 402797387
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38576 +/- 0.00518347 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.38576 @ 95%CL (1 toyMC)
median expected limit: r < 1.38576 @ 95%CL (1 toyMC)
   68% expected band : 1.38576 < r < 1.38576
   95% expected band : 1.38576 < r < 1.38576
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1546656545
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.0183 +/- 0.00455095 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.0183 @ 95%CL (1 toyMC)
median expected limit: r < 2.0183 @ 95%CL (1 toyMC)
   68% expected band : 2.0183 < r < 2.0183
   95% expected band : 2.0183 < r < 2.0183
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -74510777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.17935 +/- 0.00387001 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.17935 @ 95%CL (1 toyMC)
median expected limit: r < 1.17935 @ 95%CL (1 toyMC)
   68% expected band : 1.17935 < r < 1.17935
   95% expected band : 1.17935 < r < 1.17935
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2105317163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23347 +/- 0.00441415 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.23347 @ 95%CL (1 toyMC)
median expected limit: r < 1.23347 @ 95%CL (1 toyMC)
   68% expected band : 1.23347 < r < 1.23347
   95% expected band : 1.23347 < r < 1.23347
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1244363148
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03455 +/- 0.0040127 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.03455 @ 95%CL (1 toyMC)
median expected limit: r < 1.03455 @ 95%CL (1 toyMC)
   68% expected band : 1.03455 < r < 1.03455
   95% expected band : 1.03455 < r < 1.03455
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 112246025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36042 +/- 0.00487767 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.36042 @ 95%CL (1 toyMC)
median expected limit: r < 1.36042 @ 95%CL (1 toyMC)
   68% expected band : 1.36042 < r < 1.36042
   95% expected band : 1.36042 < r < 1.36042
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1573955139
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.996042 +/- 0.00389714 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.996042 @ 95%CL (1 toyMC)
median expected limit: r < 0.996042 @ 95%CL (1 toyMC)
   68% expected band : 0.996042 < r < 0.996042
   95% expected band : 0.996042 < r < 0.996042
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1736107882
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.83878 +/- 0.00469041 @ 95% CL (100 tries)
Done in 0.87 min (cpu), 0.87 min (real)
mean   expected limit: r < 2.83878 @ 95%CL (1 toyMC)
median expected limit: r < 2.83878 @ 95%CL (1 toyMC)
   68% expected band : 2.83878 < r < 2.83878
   95% expected band : 2.83878 < r < 2.83878
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -693007252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21617 +/- 0.00383887 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.21617 @ 95%CL (1 toyMC)
median expected limit: r < 1.21617 @ 95%CL (1 toyMC)
   68% expected band : 1.21617 < r < 1.21617
   95% expected band : 1.21617 < r < 1.21617
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1557496755
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45533 +/- 0.0036049 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.45533 @ 95%CL (1 toyMC)
median expected limit: r < 1.45533 @ 95%CL (1 toyMC)
   68% expected band : 1.45533 < r < 1.45533
   95% expected band : 1.45533 < r < 1.45533
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -758685430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77555 +/- 0.0036202 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.77555 @ 95%CL (1 toyMC)
median expected limit: r < 1.77555 @ 95%CL (1 toyMC)
   68% expected band : 1.77555 < r < 1.77555
   95% expected band : 1.77555 < r < 1.77555
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -984093949
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49147 +/- 0.00460675 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 2.49147 @ 95%CL (1 toyMC)
median expected limit: r < 2.49147 @ 95%CL (1 toyMC)
   68% expected band : 2.49147 < r < 2.49147
   95% expected band : 2.49147 < r < 2.49147
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -415934207
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.90367 +/- 0.00525517 @ 95% CL (100 tries)
Done in 0.86 min (cpu), 0.86 min (real)
mean   expected limit: r < 3.90367 @ 95%CL (1 toyMC)
median expected limit: r < 3.90367 @ 95%CL (1 toyMC)
   68% expected band : 3.90367 < r < 3.90367
   95% expected band : 3.90367 < r < 3.90367
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 573767732
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01464 +/- 0.00314768 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.01464 @ 95%CL (1 toyMC)
median expected limit: r < 1.01464 @ 95%CL (1 toyMC)
   68% expected band : 1.01464 < r < 1.01464
   95% expected band : 1.01464 < r < 1.01464
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 251618164
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31641 +/- 0.00385379 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.31641 @ 95%CL (1 toyMC)
median expected limit: r < 1.31641 @ 95%CL (1 toyMC)
   68% expected band : 1.31641 < r < 1.31641
   95% expected band : 1.31641 < r < 1.31641
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 496893710
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.661047 +/- 0.00196255 @ 95% CL (100 tries)
Done in 0.79 min (cpu), 0.79 min (real)
mean   expected limit: r < 0.661047 @ 95%CL (1 toyMC)
median expected limit: r < 0.661047 @ 95%CL (1 toyMC)
   68% expected band : 0.661047 < r < 0.661047
   95% expected band : 0.661047 < r < 0.661047
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 206554856
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.62379 +/- 0.00423747 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.62379 @ 95%CL (1 toyMC)
median expected limit: r < 1.62379 @ 95%CL (1 toyMC)
   68% expected band : 1.62379 < r < 1.62379
   95% expected band : 1.62379 < r < 1.62379
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1364055809
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20597 +/- 0.00422372 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.20597 @ 95%CL (1 toyMC)
median expected limit: r < 1.20597 @ 95%CL (1 toyMC)
   68% expected band : 1.20597 < r < 1.20597
   95% expected band : 1.20597 < r < 1.20597
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine32.MarkovChainMC.mH32.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH32.-1081110921.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH32.-1118209586.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH32.-1244363148.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH32.-1380512305.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH32.-1396838198.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH32.-1428866025.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH32.-1477305925.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH32.-1557496755.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH32.-1573955139.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH32.-1608213250.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH32.-1642957047.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH32.-1655364002.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH32.-1666343511.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH32.-166944762.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH32.-1708728046.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH32.-1736107882.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH32.-1797464900.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH32.-2071379202.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH32.-2078565985.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH32.-2102272055.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH32.-2112663488.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH32.-277254493.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH32.-323256690.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH32.-345794498.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH32.-402227634.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH32.-415934207.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH32.-426743474.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH32.-556491518.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH32.-605083823.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH32.-647578349.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH32.-655305243.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH32.-658906368.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH32.-693007252.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH32.-699672377.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH32.-737315204.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH32.-74510777.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH32.-758685430.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH32.-843027286.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH32.-89791200.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH32.-980199328.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH32.-984093949.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH32.1014949944.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH32.1071347051.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH32.1114198540.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH32.112246025.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH32.1200338314.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH32.1268173601.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH32.1326475406.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH32.1364055809.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH32.1439302388.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH32.1448716205.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH32.1463720323.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH32.151690839.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH32.1546656545.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH32.156542684.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH32.1580484609.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH32.159618847.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH32.1626974493.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH32.1631124364.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH32.177842739.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH32.1780093458.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH32.1852026439.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH32.1907998367.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH32.1969182266.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH32.2009892936.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH32.2026772271.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH32.2054879428.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH32.2055418952.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH32.206554856.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH32.2076948840.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH32.2105317163.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH32.2127664239.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH32.251618164.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH32.267885133.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH32.27348479.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH32.274432613.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH32.298108639.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH32.324812175.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH32.361232935.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH32.402797387.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH32.435535653.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH32.452634809.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH32.496893710.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH32.498645588.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH32.509764540.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH32.529679090.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH32.573767732.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH32.655709257.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH32.715753470.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH32.736961969.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH32.737639124.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH32.769738763.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH32.780125912.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH32.807792988.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH32.862478077.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH32.87517892.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH32.907530322.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH32.931091975.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH32.966156709.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH32.969604665.root
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 678808423
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.69383 +/- 0.00657493 @ 95% CL (100 tries)
Done in 0.88 min (cpu), 0.88 min (real)
mean   expected limit: r < 4.69383 @ 95%CL (1 toyMC)
median expected limit: r < 4.69383 @ 95%CL (1 toyMC)
   68% expected band : 4.69383 < r < 4.69383
   95% expected band : 4.69383 < r < 4.69383
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1945657379
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10522 +/- 0.00518901 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 3.10522 @ 95%CL (1 toyMC)
median expected limit: r < 3.10522 @ 95%CL (1 toyMC)
   68% expected band : 3.10522 < r < 3.10522
   95% expected band : 3.10522 < r < 3.10522
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1668483993
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07013 +/- 0.0036701 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.07013 @ 95%CL (1 toyMC)
median expected limit: r < 1.07013 @ 95%CL (1 toyMC)
   68% expected band : 1.07013 < r < 1.07013
   95% expected band : 1.07013 < r < 1.07013
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1553613395
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.02267 +/- 0.0056278 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 2.02267 @ 95%CL (1 toyMC)
median expected limit: r < 2.02267 @ 95%CL (1 toyMC)
   68% expected band : 2.02267 < r < 2.02267
   95% expected band : 2.02267 < r < 2.02267
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1404738167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76559 +/- 0.00479369 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.76559 @ 95%CL (1 toyMC)
median expected limit: r < 1.76559 @ 95%CL (1 toyMC)
   68% expected band : 1.76559 < r < 1.76559
   95% expected band : 1.76559 < r < 1.76559
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1899239636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.20168 +/- 0.00513261 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 2.20168 @ 95%CL (1 toyMC)
median expected limit: r < 2.20168 @ 95%CL (1 toyMC)
   68% expected band : 2.20168 < r < 2.20168
   95% expected band : 2.20168 < r < 2.20168
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1618164950
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42483 +/- 0.00484631 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.42483 @ 95%CL (1 toyMC)
median expected limit: r < 2.42483 @ 95%CL (1 toyMC)
   68% expected band : 2.42483 < r < 2.42483
   95% expected band : 2.42483 < r < 2.42483
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -454439430
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25026 +/- 0.0043541 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.25026 @ 95%CL (1 toyMC)
median expected limit: r < 1.25026 @ 95%CL (1 toyMC)
   68% expected band : 1.25026 < r < 1.25026
   95% expected band : 1.25026 < r < 1.25026
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1069007564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.56558 +/- 0.00351774 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.56558 @ 95%CL (1 toyMC)
median expected limit: r < 1.56558 @ 95%CL (1 toyMC)
   68% expected band : 1.56558 < r < 1.56558
   95% expected band : 1.56558 < r < 1.56558
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1664826904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.67366 +/- 0.00361872 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.67366 @ 95%CL (1 toyMC)
median expected limit: r < 1.67366 @ 95%CL (1 toyMC)
   68% expected band : 1.67366 < r < 1.67366
   95% expected band : 1.67366 < r < 1.67366
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 728116943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.90872 +/- 0.00652308 @ 95% CL (100 tries)
Done in 0.88 min (cpu), 0.88 min (real)
mean   expected limit: r < 4.90872 @ 95%CL (1 toyMC)
median expected limit: r < 4.90872 @ 95%CL (1 toyMC)
   68% expected band : 4.90872 < r < 4.90872
   95% expected band : 4.90872 < r < 4.90872
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 537960073
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.293 +/- 0.00530572 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.293 @ 95%CL (1 toyMC)
median expected limit: r < 2.293 @ 95%CL (1 toyMC)
   68% expected band : 2.293 < r < 2.293
   95% expected band : 2.293 < r < 2.293
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1854045144
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.89747 +/- 0.00393776 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.89747 @ 95%CL (1 toyMC)
median expected limit: r < 1.89747 @ 95%CL (1 toyMC)
   68% expected band : 1.89747 < r < 1.89747
   95% expected band : 1.89747 < r < 1.89747
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1451585900
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99811 +/- 0.00487328 @ 95% CL (100 tries)
Done in 0.86 min (cpu), 0.86 min (real)
mean   expected limit: r < 2.99811 @ 95%CL (1 toyMC)
median expected limit: r < 2.99811 @ 95%CL (1 toyMC)
   68% expected band : 2.99811 < r < 2.99811
   95% expected band : 2.99811 < r < 2.99811
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1862840705
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7929 +/- 0.00477209 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.86 min (real)
mean   expected limit: r < 2.7929 @ 95%CL (1 toyMC)
median expected limit: r < 2.7929 @ 95%CL (1 toyMC)
   68% expected band : 2.7929 < r < 2.7929
   95% expected band : 2.7929 < r < 2.7929
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1307330186
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.78801 +/- 0.0049017 @ 95% CL (100 tries)
Done in 0.87 min (cpu), 0.88 min (real)
mean   expected limit: r < 3.78801 @ 95%CL (1 toyMC)
median expected limit: r < 3.78801 @ 95%CL (1 toyMC)
   68% expected band : 3.78801 < r < 3.78801
   95% expected band : 3.78801 < r < 3.78801
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1836394345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.4342 +/- 0.00583457 @ 95% CL (100 tries)
Done in 0.87 min (cpu), 0.87 min (real)
mean   expected limit: r < 3.4342 @ 95%CL (1 toyMC)
median expected limit: r < 3.4342 @ 95%CL (1 toyMC)
   68% expected band : 3.4342 < r < 3.4342
   95% expected band : 3.4342 < r < 3.4342
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 610975435
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.41024 +/- 0.00421992 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.41024 @ 95%CL (1 toyMC)
median expected limit: r < 2.41024 @ 95%CL (1 toyMC)
   68% expected band : 2.41024 < r < 2.41024
   95% expected band : 2.41024 < r < 2.41024
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1781627758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.60016 +/- 0.00645535 @ 95% CL (100 tries)
Done in 0.89 min (cpu), 0.89 min (real)
mean   expected limit: r < 5.60016 @ 95%CL (1 toyMC)
median expected limit: r < 5.60016 @ 95%CL (1 toyMC)
   68% expected band : 5.60016 < r < 5.60016
   95% expected band : 5.60016 < r < 5.60016
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -24023891
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59085 +/- 0.00411116 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.59085 @ 95%CL (1 toyMC)
median expected limit: r < 1.59085 @ 95%CL (1 toyMC)
   68% expected band : 1.59085 < r < 1.59085
   95% expected band : 1.59085 < r < 1.59085
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -107147611
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.51266 +/- 0.00548207 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.51266 @ 95%CL (1 toyMC)
median expected limit: r < 2.51266 @ 95%CL (1 toyMC)
   68% expected band : 2.51266 < r < 2.51266
   95% expected band : 2.51266 < r < 2.51266
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -785044932
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1127 +/- 0.00560548 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 3.1127 @ 95%CL (1 toyMC)
median expected limit: r < 3.1127 @ 95%CL (1 toyMC)
   68% expected band : 3.1127 < r < 3.1127
   95% expected band : 3.1127 < r < 3.1127
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -808397961
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.26966 +/- 0.00636558 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 2.26966 @ 95%CL (1 toyMC)
median expected limit: r < 2.26966 @ 95%CL (1 toyMC)
   68% expected band : 2.26966 < r < 2.26966
   95% expected band : 2.26966 < r < 2.26966
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 787695178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04233 +/- 0.00507585 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 2.04233 @ 95%CL (1 toyMC)
median expected limit: r < 2.04233 @ 95%CL (1 toyMC)
   68% expected band : 2.04233 < r < 2.04233
   95% expected band : 2.04233 < r < 2.04233
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 819407511
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60615 +/- 0.00614706 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.60615 @ 95%CL (1 toyMC)
median expected limit: r < 2.60615 @ 95%CL (1 toyMC)
   68% expected band : 2.60615 < r < 2.60615
   95% expected band : 2.60615 < r < 2.60615
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -109464450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99229 +/- 0.00417068 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.86 min (real)
mean   expected limit: r < 2.99229 @ 95%CL (1 toyMC)
median expected limit: r < 2.99229 @ 95%CL (1 toyMC)
   68% expected band : 2.99229 < r < 2.99229
   95% expected band : 2.99229 < r < 2.99229
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1370365033
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12228 +/- 0.00486911 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 3.12228 @ 95%CL (1 toyMC)
median expected limit: r < 3.12228 @ 95%CL (1 toyMC)
   68% expected band : 3.12228 < r < 3.12228
   95% expected band : 3.12228 < r < 3.12228
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2120800471
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.56627 +/- 0.00613356 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.86 min (real)
mean   expected limit: r < 2.56627 @ 95%CL (1 toyMC)
median expected limit: r < 2.56627 @ 95%CL (1 toyMC)
   68% expected band : 2.56627 < r < 2.56627
   95% expected band : 2.56627 < r < 2.56627
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -317156710
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.94284 +/- 0.00475636 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.94284 @ 95%CL (1 toyMC)
median expected limit: r < 2.94284 @ 95%CL (1 toyMC)
   68% expected band : 2.94284 < r < 2.94284
   95% expected band : 2.94284 < r < 2.94284
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 151599530
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.44477 +/- 0.00659035 @ 95% CL (100 tries)
Done in 0.87 min (cpu), 0.87 min (real)
mean   expected limit: r < 3.44477 @ 95%CL (1 toyMC)
median expected limit: r < 3.44477 @ 95%CL (1 toyMC)
   68% expected band : 3.44477 < r < 3.44477
   95% expected band : 3.44477 < r < 3.44477
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2092188240
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31319 +/- 0.00444236 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.31319 @ 95%CL (1 toyMC)
median expected limit: r < 1.31319 @ 95%CL (1 toyMC)
   68% expected band : 1.31319 < r < 1.31319
   95% expected band : 1.31319 < r < 1.31319
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 880204443
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.83574 +/- 0.00597621 @ 95% CL (100 tries)
Done in 0.86 min (cpu), 0.87 min (real)
mean   expected limit: r < 3.83574 @ 95%CL (1 toyMC)
median expected limit: r < 3.83574 @ 95%CL (1 toyMC)
   68% expected band : 3.83574 < r < 3.83574
   95% expected band : 3.83574 < r < 3.83574
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -711786485
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76511 +/- 0.00451958 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.76511 @ 95%CL (1 toyMC)
median expected limit: r < 1.76511 @ 95%CL (1 toyMC)
   68% expected band : 1.76511 < r < 1.76511
   95% expected band : 1.76511 < r < 1.76511
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1216549368
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60094 +/- 0.0054348 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.60094 @ 95%CL (1 toyMC)
median expected limit: r < 2.60094 @ 95%CL (1 toyMC)
   68% expected band : 2.60094 < r < 2.60094
   95% expected band : 2.60094 < r < 2.60094
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -847432412
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31989 +/- 0.00394443 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.31989 @ 95%CL (1 toyMC)
median expected limit: r < 1.31989 @ 95%CL (1 toyMC)
   68% expected band : 1.31989 < r < 1.31989
   95% expected band : 1.31989 < r < 1.31989
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -478556242
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.68589 +/- 0.00620507 @ 95% CL (100 tries)
Done in 0.88 min (cpu), 0.89 min (real)
mean   expected limit: r < 3.68589 @ 95%CL (1 toyMC)
median expected limit: r < 3.68589 @ 95%CL (1 toyMC)
   68% expected band : 3.68589 < r < 3.68589
   95% expected band : 3.68589 < r < 3.68589
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -386180884
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.58561 +/- 0.00525613 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.58561 @ 95%CL (1 toyMC)
median expected limit: r < 2.58561 @ 95%CL (1 toyMC)
   68% expected band : 2.58561 < r < 2.58561
   95% expected band : 2.58561 < r < 2.58561
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1476291866
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64015 +/- 0.00458992 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.64015 @ 95%CL (1 toyMC)
median expected limit: r < 1.64015 @ 95%CL (1 toyMC)
   68% expected band : 1.64015 < r < 1.64015
   95% expected band : 1.64015 < r < 1.64015
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -442630397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63907 +/- 0.00573993 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 2.63907 @ 95%CL (1 toyMC)
median expected limit: r < 2.63907 @ 95%CL (1 toyMC)
   68% expected band : 2.63907 < r < 2.63907
   95% expected band : 2.63907 < r < 2.63907
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1627396265
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.77351 +/- 0.00594356 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.77351 @ 95%CL (1 toyMC)
median expected limit: r < 2.77351 @ 95%CL (1 toyMC)
   68% expected band : 2.77351 < r < 2.77351
   95% expected band : 2.77351 < r < 2.77351
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1841003434
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.88301 +/- 0.00674594 @ 95% CL (100 tries)
Done in 0.86 min (cpu), 0.86 min (real)
mean   expected limit: r < 3.88301 @ 95%CL (1 toyMC)
median expected limit: r < 3.88301 @ 95%CL (1 toyMC)
   68% expected band : 3.88301 < r < 3.88301
   95% expected band : 3.88301 < r < 3.88301
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1375427456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5528 +/- 0.00346605 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.5528 @ 95%CL (1 toyMC)
median expected limit: r < 1.5528 @ 95%CL (1 toyMC)
   68% expected band : 1.5528 < r < 1.5528
   95% expected band : 1.5528 < r < 1.5528
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -7824795
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66315 +/- 0.0064064 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.66315 @ 95%CL (1 toyMC)
median expected limit: r < 2.66315 @ 95%CL (1 toyMC)
   68% expected band : 2.66315 < r < 2.66315
   95% expected band : 2.66315 < r < 2.66315
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -568784704
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.35587 +/- 0.00549561 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 2.35587 @ 95%CL (1 toyMC)
median expected limit: r < 2.35587 @ 95%CL (1 toyMC)
   68% expected band : 2.35587 < r < 2.35587
   95% expected band : 2.35587 < r < 2.35587
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1063322660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.18905 +/- 0.00481288 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 3.18905 @ 95%CL (1 toyMC)
median expected limit: r < 3.18905 @ 95%CL (1 toyMC)
   68% expected band : 3.18905 < r < 3.18905
   95% expected band : 3.18905 < r < 3.18905
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1013861680
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.85406 +/- 0.00711463 @ 95% CL (100 tries)
Done in 0.88 min (cpu), 0.88 min (real)
mean   expected limit: r < 4.85406 @ 95%CL (1 toyMC)
median expected limit: r < 4.85406 @ 95%CL (1 toyMC)
   68% expected band : 4.85406 < r < 4.85406
   95% expected band : 4.85406 < r < 4.85406
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1383613211
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63764 +/- 0.00539042 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.63764 @ 95%CL (1 toyMC)
median expected limit: r < 1.63764 @ 95%CL (1 toyMC)
   68% expected band : 1.63764 < r < 1.63764
   95% expected band : 1.63764 < r < 1.63764
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 467324070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.11364 +/- 0.0046717 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 2.11364 @ 95%CL (1 toyMC)
median expected limit: r < 2.11364 @ 95%CL (1 toyMC)
   68% expected band : 2.11364 < r < 2.11364
   95% expected band : 2.11364 < r < 2.11364
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1436301370
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.02908 +/- 0.00764237 @ 95% CL (100 tries)
Done in 0.89 min (cpu), 0.89 min (real)
mean   expected limit: r < 6.02908 @ 95%CL (1 toyMC)
median expected limit: r < 6.02908 @ 95%CL (1 toyMC)
   68% expected band : 6.02908 < r < 6.02908
   95% expected band : 6.02908 < r < 6.02908
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1477046155
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58038 +/- 0.00480103 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.58038 @ 95%CL (1 toyMC)
median expected limit: r < 1.58038 @ 95%CL (1 toyMC)
   68% expected band : 1.58038 < r < 1.58038
   95% expected band : 1.58038 < r < 1.58038
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1890849322
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57166 +/- 0.00385736 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.57166 @ 95%CL (1 toyMC)
median expected limit: r < 1.57166 @ 95%CL (1 toyMC)
   68% expected band : 1.57166 < r < 1.57166
   95% expected band : 1.57166 < r < 1.57166
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 447238289
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.11366 +/- 0.0045668 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.11366 @ 95%CL (1 toyMC)
median expected limit: r < 2.11366 @ 95%CL (1 toyMC)
   68% expected band : 2.11366 < r < 2.11366
   95% expected band : 2.11366 < r < 2.11366
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -592469672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.707 +/- 0.00401525 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.707 @ 95%CL (1 toyMC)
median expected limit: r < 1.707 @ 95%CL (1 toyMC)
   68% expected band : 1.707 < r < 1.707
   95% expected band : 1.707 < r < 1.707
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1482968907
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49144 +/- 0.00611781 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.49144 @ 95%CL (1 toyMC)
median expected limit: r < 2.49144 @ 95%CL (1 toyMC)
   68% expected band : 2.49144 < r < 2.49144
   95% expected band : 2.49144 < r < 2.49144
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -317596226
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.86642 +/- 0.00638657 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.86642 @ 95%CL (1 toyMC)
median expected limit: r < 2.86642 @ 95%CL (1 toyMC)
   68% expected band : 2.86642 < r < 2.86642
   95% expected band : 2.86642 < r < 2.86642
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1620593784
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54666 +/- 0.00467724 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 1.54666 @ 95%CL (1 toyMC)
median expected limit: r < 1.54666 @ 95%CL (1 toyMC)
   68% expected band : 1.54666 < r < 1.54666
   95% expected band : 1.54666 < r < 1.54666
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2083553007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2832 +/- 0.00560853 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.2832 @ 95%CL (1 toyMC)
median expected limit: r < 1.2832 @ 95%CL (1 toyMC)
   68% expected band : 1.2832 < r < 1.2832
   95% expected band : 1.2832 < r < 1.2832
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 948752612
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.04255 +/- 0.00524302 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 3.04255 @ 95%CL (1 toyMC)
median expected limit: r < 3.04255 @ 95%CL (1 toyMC)
   68% expected band : 3.04255 < r < 3.04255
   95% expected band : 3.04255 < r < 3.04255
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1365408671
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.01945 +/- 0.00383775 @ 95% CL (100 tries)
Done in 0.86 min (cpu), 0.86 min (real)
mean   expected limit: r < 3.01945 @ 95%CL (1 toyMC)
median expected limit: r < 3.01945 @ 95%CL (1 toyMC)
   68% expected band : 3.01945 < r < 3.01945
   95% expected band : 3.01945 < r < 3.01945
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -782973833
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.51699 +/- 0.00511714 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.51699 @ 95%CL (1 toyMC)
median expected limit: r < 2.51699 @ 95%CL (1 toyMC)
   68% expected band : 2.51699 < r < 2.51699
   95% expected band : 2.51699 < r < 2.51699
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1298822908
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32972 +/- 0.00587974 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.86 min (real)
mean   expected limit: r < 2.32972 @ 95%CL (1 toyMC)
median expected limit: r < 2.32972 @ 95%CL (1 toyMC)
   68% expected band : 2.32972 < r < 2.32972
   95% expected band : 2.32972 < r < 2.32972
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1263824075
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.96374 +/- 0.00474109 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.96374 @ 95%CL (1 toyMC)
median expected limit: r < 1.96374 @ 95%CL (1 toyMC)
   68% expected band : 1.96374 < r < 1.96374
   95% expected band : 1.96374 < r < 1.96374
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -296675576
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.537 +/- 0.00524261 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.86 min (real)
mean   expected limit: r < 3.537 @ 95%CL (1 toyMC)
median expected limit: r < 3.537 @ 95%CL (1 toyMC)
   68% expected band : 3.537 < r < 3.537
   95% expected band : 3.537 < r < 3.537
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -374538080
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.29393 +/- 0.00472427 @ 95% CL (100 tries)
Done in 0.87 min (cpu), 0.87 min (real)
mean   expected limit: r < 3.29393 @ 95%CL (1 toyMC)
median expected limit: r < 3.29393 @ 95%CL (1 toyMC)
   68% expected band : 3.29393 < r < 3.29393
   95% expected band : 3.29393 < r < 3.29393
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -409290208
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54467 +/- 0.00495224 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 1.54467 @ 95%CL (1 toyMC)
median expected limit: r < 1.54467 @ 95%CL (1 toyMC)
   68% expected band : 1.54467 < r < 1.54467
   95% expected band : 1.54467 < r < 1.54467
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2118968574
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.99271 +/- 0.00524955 @ 95% CL (100 tries)
Done in 0.86 min (cpu), 0.86 min (real)
mean   expected limit: r < 2.99271 @ 95%CL (1 toyMC)
median expected limit: r < 2.99271 @ 95%CL (1 toyMC)
   68% expected band : 2.99271 < r < 2.99271
   95% expected band : 2.99271 < r < 2.99271
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -271434450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.50254 +/- 0.00410587 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.50254 @ 95%CL (1 toyMC)
median expected limit: r < 2.50254 @ 95%CL (1 toyMC)
   68% expected band : 2.50254 < r < 2.50254
   95% expected band : 2.50254 < r < 2.50254
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1493997056
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.97313 +/- 0.0061092 @ 95% CL (100 tries)
Done in 0.87 min (cpu), 0.88 min (real)
mean   expected limit: r < 3.97313 @ 95%CL (1 toyMC)
median expected limit: r < 3.97313 @ 95%CL (1 toyMC)
   68% expected band : 3.97313 < r < 3.97313
   95% expected band : 3.97313 < r < 3.97313
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 21528190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.18944 +/- 0.00498208 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.18944 @ 95%CL (1 toyMC)
median expected limit: r < 2.18944 @ 95%CL (1 toyMC)
   68% expected band : 2.18944 < r < 2.18944
   95% expected band : 2.18944 < r < 2.18944
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1278997712
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.5231 +/- 0.00521457 @ 95% CL (100 tries)
Done in 0.89 min (cpu), 0.89 min (real)
mean   expected limit: r < 3.5231 @ 95%CL (1 toyMC)
median expected limit: r < 3.5231 @ 95%CL (1 toyMC)
   68% expected band : 3.5231 < r < 3.5231
   95% expected band : 3.5231 < r < 3.5231
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 96628952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.74074 +/- 0.00549369 @ 95% CL (100 tries)
Done in 0.88 min (cpu), 0.88 min (real)
mean   expected limit: r < 3.74074 @ 95%CL (1 toyMC)
median expected limit: r < 3.74074 @ 95%CL (1 toyMC)
   68% expected band : 3.74074 < r < 3.74074
   95% expected band : 3.74074 < r < 3.74074
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1580057070
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13858 +/- 0.00388402 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.13858 @ 95%CL (1 toyMC)
median expected limit: r < 2.13858 @ 95%CL (1 toyMC)
   68% expected band : 2.13858 < r < 2.13858
   95% expected band : 2.13858 < r < 2.13858
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1915732904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19577 +/- 0.00368204 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.19577 @ 95%CL (1 toyMC)
median expected limit: r < 1.19577 @ 95%CL (1 toyMC)
   68% expected band : 1.19577 < r < 1.19577
   95% expected band : 1.19577 < r < 1.19577
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1462278599
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54138 +/- 0.00427305 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.85 min (real)
mean   expected limit: r < 1.54138 @ 95%CL (1 toyMC)
median expected limit: r < 1.54138 @ 95%CL (1 toyMC)
   68% expected band : 1.54138 < r < 1.54138
   95% expected band : 1.54138 < r < 1.54138
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -540568997
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.85783 +/- 0.00526112 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.85783 @ 95%CL (1 toyMC)
median expected limit: r < 2.85783 @ 95%CL (1 toyMC)
   68% expected band : 2.85783 < r < 2.85783
   95% expected band : 2.85783 < r < 2.85783
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1934511176
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.77988 +/- 0.00469146 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.77988 @ 95%CL (1 toyMC)
median expected limit: r < 1.77988 @ 95%CL (1 toyMC)
   68% expected band : 1.77988 < r < 1.77988
   95% expected band : 1.77988 < r < 1.77988
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -858715252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.07174 +/- 0.00572866 @ 95% CL (100 tries)
Done in 0.86 min (cpu), 0.86 min (real)
mean   expected limit: r < 3.07174 @ 95%CL (1 toyMC)
median expected limit: r < 3.07174 @ 95%CL (1 toyMC)
   68% expected band : 3.07174 < r < 3.07174
   95% expected band : 3.07174 < r < 3.07174
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1623495285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.79989 +/- 0.00633305 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.79989 @ 95%CL (1 toyMC)
median expected limit: r < 2.79989 @ 95%CL (1 toyMC)
   68% expected band : 2.79989 < r < 2.79989
   95% expected band : 2.79989 < r < 2.79989
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 515655962
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12772 +/- 0.00495713 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.12772 @ 95%CL (1 toyMC)
median expected limit: r < 2.12772 @ 95%CL (1 toyMC)
   68% expected band : 2.12772 < r < 2.12772
   95% expected band : 2.12772 < r < 2.12772
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -45708405
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.29113 +/- 0.00427249 @ 95% CL (100 tries)
Done in 0.84 min (cpu), 0.84 min (real)
mean   expected limit: r < 2.29113 @ 95%CL (1 toyMC)
median expected limit: r < 2.29113 @ 95%CL (1 toyMC)
   68% expected band : 2.29113 < r < 2.29113
   95% expected band : 2.29113 < r < 2.29113
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 864034252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53084 +/- 0.00427571 @ 95% CL (100 tries)
Done in 0.86 min (cpu), 0.86 min (real)
mean   expected limit: r < 2.53084 @ 95%CL (1 toyMC)
median expected limit: r < 2.53084 @ 95%CL (1 toyMC)
   68% expected band : 2.53084 < r < 2.53084
   95% expected band : 2.53084 < r < 2.53084
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1481917953
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.24004 +/- 0.00593076 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.82 min (real)
mean   expected limit: r < 2.24004 @ 95%CL (1 toyMC)
median expected limit: r < 2.24004 @ 95%CL (1 toyMC)
   68% expected band : 2.24004 < r < 2.24004
   95% expected band : 2.24004 < r < 2.24004
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1760553828
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.546 +/- 0.00387751 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.546 @ 95%CL (1 toyMC)
median expected limit: r < 1.546 @ 95%CL (1 toyMC)
   68% expected band : 1.546 < r < 1.546
   95% expected band : 1.546 < r < 1.546
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -269916303
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92558 +/- 0.00548066 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.92558 @ 95%CL (1 toyMC)
median expected limit: r < 1.92558 @ 95%CL (1 toyMC)
   68% expected band : 1.92558 < r < 1.92558
   95% expected band : 1.92558 < r < 1.92558
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1221463049
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33953 +/- 0.00713695 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 3.33953 @ 95%CL (1 toyMC)
median expected limit: r < 3.33953 @ 95%CL (1 toyMC)
   68% expected band : 3.33953 < r < 3.33953
   95% expected band : 3.33953 < r < 3.33953
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1436015243
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39155 +/- 0.00428161 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.82 min (real)
mean   expected limit: r < 1.39155 @ 95%CL (1 toyMC)
median expected limit: r < 1.39155 @ 95%CL (1 toyMC)
   68% expected band : 1.39155 < r < 1.39155
   95% expected band : 1.39155 < r < 1.39155
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1511187975
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.00905 +/- 0.00560834 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.86 min (real)
mean   expected limit: r < 3.00905 @ 95%CL (1 toyMC)
median expected limit: r < 3.00905 @ 95%CL (1 toyMC)
   68% expected band : 3.00905 < r < 3.00905
   95% expected band : 3.00905 < r < 3.00905
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -923685173
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92123 +/- 0.0054375 @ 95% CL (100 tries)
Done in 0.82 min (cpu), 0.83 min (real)
mean   expected limit: r < 1.92123 @ 95%CL (1 toyMC)
median expected limit: r < 1.92123 @ 95%CL (1 toyMC)
   68% expected band : 1.92123 < r < 1.92123
   95% expected band : 1.92123 < r < 1.92123
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -802256089
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.2062 +/- 0.00613841 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 2.2062 @ 95%CL (1 toyMC)
median expected limit: r < 2.2062 @ 95%CL (1 toyMC)
   68% expected band : 2.2062 < r < 2.2062
   95% expected band : 2.2062 < r < 2.2062
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1061699182
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.12713 +/- 0.00441671 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.86 min (real)
mean   expected limit: r < 3.12713 @ 95%CL (1 toyMC)
median expected limit: r < 3.12713 @ 95%CL (1 toyMC)
   68% expected band : 3.12713 < r < 3.12713
   95% expected band : 3.12713 < r < 3.12713
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1257078674
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63633 +/- 0.00549712 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.63633 @ 95%CL (1 toyMC)
median expected limit: r < 2.63633 @ 95%CL (1 toyMC)
   68% expected band : 2.63633 < r < 2.63633
   95% expected band : 2.63633 < r < 2.63633
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1004436432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.86551 +/- 0.00570695 @ 95% CL (100 tries)
Done in 0.89 min (cpu), 0.90 min (real)
mean   expected limit: r < 5.86551 @ 95%CL (1 toyMC)
median expected limit: r < 5.86551 @ 95%CL (1 toyMC)
   68% expected band : 5.86551 < r < 5.86551
   95% expected band : 5.86551 < r < 5.86551
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -159942178
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6649 +/- 0.004587 @ 95% CL (100 tries)
Done in 0.81 min (cpu), 0.81 min (real)
mean   expected limit: r < 1.6649 @ 95%CL (1 toyMC)
median expected limit: r < 1.6649 @ 95%CL (1 toyMC)
   68% expected band : 1.6649 < r < 1.6649
   95% expected band : 1.6649 < r < 1.6649
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2044988459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.22348 +/- 0.00475226 @ 95% CL (100 tries)
Done in 0.83 min (cpu), 0.83 min (real)
mean   expected limit: r < 2.22348 @ 95%CL (1 toyMC)
median expected limit: r < 2.22348 @ 95%CL (1 toyMC)
   68% expected band : 2.22348 < r < 2.22348
   95% expected band : 2.22348 < r < 2.22348
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 941936475
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05893 +/- 0.00402463 @ 95% CL (100 tries)
Done in 0.80 min (cpu), 0.80 min (real)
mean   expected limit: r < 1.05893 @ 95%CL (1 toyMC)
median expected limit: r < 1.05893 @ 95%CL (1 toyMC)
   68% expected band : 1.05893 < r < 1.05893
   95% expected band : 1.05893 < r < 1.05893
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -811471603
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.02316 +/- 0.00474753 @ 95% CL (100 tries)
Done in 0.86 min (cpu), 0.86 min (real)
mean   expected limit: r < 2.02316 @ 95%CL (1 toyMC)
median expected limit: r < 2.02316 @ 95%CL (1 toyMC)
   68% expected band : 2.02316 < r < 2.02316
   95% expected band : 2.02316 < r < 2.02316
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 259305048
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90203 +/- 0.00469962 @ 95% CL (100 tries)
Done in 0.85 min (cpu), 0.85 min (real)
mean   expected limit: r < 2.90203 @ 95%CL (1 toyMC)
median expected limit: r < 2.90203 @ 95%CL (1 toyMC)
   68% expected band : 2.90203 < r < 2.90203
   95% expected band : 2.90203 < r < 2.90203
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -317541744
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.07854 +/- 0.00657996 @ 95% CL (100 tries)
Done in 0.94 min (cpu), 0.95 min (real)
mean   expected limit: r < 2.07854 @ 95%CL (1 toyMC)
median expected limit: r < 2.07854 @ 95%CL (1 toyMC)
   68% expected band : 2.07854 < r < 2.07854
   95% expected band : 2.07854 < r < 2.07854
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 814729166
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.84451 +/- 0.00519513 @ 95% CL (100 tries)
Done in 0.87 min (cpu), 0.88 min (real)
mean   expected limit: r < 4.84451 @ 95%CL (1 toyMC)
median expected limit: r < 4.84451 @ 95%CL (1 toyMC)
   68% expected band : 4.84451 < r < 4.84451
   95% expected band : 4.84451 < r < 4.84451
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1169051
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.29257 +/- 0.0058519 @ 95% CL (100 tries)
Done in 0.88 min (cpu), 0.88 min (real)
mean   expected limit: r < 4.29257 @ 95%CL (1 toyMC)
median expected limit: r < 4.29257 @ 95%CL (1 toyMC)
   68% expected band : 4.29257 < r < 4.29257
   95% expected band : 4.29257 < r < 4.29257
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine40.MarkovChainMC.mH40.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH40.-1013861680.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH40.-1061699182.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH40.-1063322660.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH40.-1069007564.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH40.-107147611.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH40.-109464450.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH40.-1216549368.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH40.-1221463049.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH40.-1257078674.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH40.-1278997712.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH40.-1298822908.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH40.-1365408671.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH40.-1404738167.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH40.-1436015243.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH40.-1436301370.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH40.-1462278599.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH40.-1511187975.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH40.-159942178.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH40.-1618164950.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH40.-1627396265.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH40.-1664826904.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH40.-1668483993.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH40.-1836394345.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH40.-1841003434.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH40.-1854045144.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH40.-1890849322.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH40.-1899239636.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH40.-1915732904.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH40.-1945657379.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH40.-2044988459.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH40.-2083553007.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH40.-2092188240.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH40.-2118968574.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH40.-2120800471.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH40.-24023891.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH40.-269916303.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH40.-271434450.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH40.-296675576.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH40.-317156710.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH40.-317541744.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH40.-317596226.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH40.-374538080.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH40.-386180884.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH40.-409290208.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH40.-442630397.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH40.-454439430.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH40.-45708405.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH40.-478556242.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH40.-540568997.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH40.-568784704.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH40.-592469672.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH40.-711786485.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH40.-7824795.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH40.-782973833.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH40.-785044932.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH40.-802256089.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH40.-808397961.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH40.-811471603.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH40.-847432412.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH40.-858715252.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH40.-923685173.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH40.1004436432.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH40.1169051.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH40.1263824075.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH40.1307330186.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH40.1370365033.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH40.1375427456.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH40.1383613211.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH40.1451585900.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH40.1476291866.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH40.1477046155.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH40.1481917953.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH40.1482968907.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH40.1493997056.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH40.151599530.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH40.1553613395.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH40.1580057070.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH40.1620593784.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH40.1623495285.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH40.1760553828.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH40.1781627758.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH40.1862840705.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH40.1934511176.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH40.21528190.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH40.259305048.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH40.447238289.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH40.467324070.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH40.515655962.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH40.537960073.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH40.610975435.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH40.678808423.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH40.728116943.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH40.787695178.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH40.814729166.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH40.819407511.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH40.864034252.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH40.880204443.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH40.941936475.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH40.948752612.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH40.96628952.root
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/toys
