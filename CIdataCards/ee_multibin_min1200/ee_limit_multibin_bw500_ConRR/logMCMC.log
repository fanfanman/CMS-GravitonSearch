 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 63658150
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.161585 +/- 0.00322628 @ 95% CL (97 tries)
Done in 0.52 min (cpu), 0.52 min (real)
mean   expected limit: r < 0.161585 @ 95%CL (1 toyMC)
median expected limit: r < 0.161585 @ 95%CL (1 toyMC)
   68% expected band : 0.161585 < r < 0.161585
   95% expected band : 0.161585 < r < 0.161585
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -47094888
Generate toy 1/1
Done in 15.35 min (cpu), 15.43 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1082803146
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.141685 +/- 0.0261825 @ 95% CL (3 tries)
Done in 14.90 min (cpu), 14.99 min (real)
mean   expected limit: r < 0.141685 @ 95%CL (1 toyMC)
median expected limit: r < 0.141685 @ 95%CL (1 toyMC)
   68% expected band : 0.141685 < r < 0.141685
   95% expected band : 0.141685 < r < 0.141685
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 486927857
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.235468 +/- 0.0022762 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.235468 @ 95%CL (1 toyMC)
median expected limit: r < 0.235468 @ 95%CL (1 toyMC)
   68% expected band : 0.235468 < r < 0.235468
   95% expected band : 0.235468 < r < 0.235468
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -122105453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 20 +/- 0 @ 95% CL (2 tries)
Done in 13.97 min (cpu), 14.05 min (real)
mean   expected limit: r < 20 @ 95%CL (1 toyMC)
median expected limit: r < 20 @ 95%CL (1 toyMC)
   68% expected band : 20 < r < 20
   95% expected band : 20 < r < 20
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1627342025
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.250773 +/- 0.00224795 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.250773 @ 95%CL (1 toyMC)
median expected limit: r < 0.250773 @ 95%CL (1 toyMC)
   68% expected band : 0.250773 < r < 0.250773
   95% expected band : 0.250773 < r < 0.250773
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 461527759
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.18027 +/- 0.00290392 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.18027 @ 95%CL (1 toyMC)
median expected limit: r < 0.18027 @ 95%CL (1 toyMC)
   68% expected band : 0.18027 < r < 0.18027
   95% expected band : 0.18027 < r < 0.18027
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2097282376
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.17586 +/- 0.00252665 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.17586 @ 95%CL (1 toyMC)
median expected limit: r < 0.17586 @ 95%CL (1 toyMC)
   68% expected band : 0.17586 < r < 0.17586
   95% expected band : 0.17586 < r < 0.17586
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1196762569
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.155714 +/- 0.00378546 @ 95% CL (86 tries)
Done in 1.19 min (cpu), 1.20 min (real)
mean   expected limit: r < 0.155714 @ 95%CL (1 toyMC)
median expected limit: r < 0.155714 @ 95%CL (1 toyMC)
   68% expected band : 0.155714 < r < 0.155714
   95% expected band : 0.155714 < r < 0.155714
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -63701029
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.133629 +/- 0.0055366 @ 95% CL (56 tries)
Done in 6.21 min (cpu), 6.25 min (real)
mean   expected limit: r < 0.133629 @ 95%CL (1 toyMC)
median expected limit: r < 0.133629 @ 95%CL (1 toyMC)
   68% expected band : 0.133629 < r < 0.133629
   95% expected band : 0.133629 < r < 0.133629
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1656630595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.141231 +/- 0.00671095 @ 95% CL (50 tries)
Done in 7.98 min (cpu), 8.04 min (real)
mean   expected limit: r < 0.141231 @ 95%CL (1 toyMC)
median expected limit: r < 0.141231 @ 95%CL (1 toyMC)
   68% expected band : 0.141231 < r < 0.141231
   95% expected band : 0.141231 < r < 0.141231
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 637126447
Generate toy 1/1
Done in 15.60 min (cpu), 15.71 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -170980742
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 9.6235 +/- 2.11811 @ 95% CL (23 tries)
Done in 11.81 min (cpu), 11.89 min (real)
mean   expected limit: r < 9.6235 @ 95%CL (1 toyMC)
median expected limit: r < 9.6235 @ 95%CL (1 toyMC)
   68% expected band : 9.6235 < r < 9.6235
   95% expected band : 9.6235 < r < 9.6235
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -993544785
Generate toy 1/1
Done in 15.59 min (cpu), 15.68 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1584524633
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.232477 +/- 0.0018267 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.232477 @ 95%CL (1 toyMC)
median expected limit: r < 0.232477 @ 95%CL (1 toyMC)
   68% expected band : 0.232477 < r < 0.232477
   95% expected band : 0.232477 < r < 0.232477
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 305157919
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.288176 +/- 0.00195624 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.288176 @ 95%CL (1 toyMC)
median expected limit: r < 0.288176 @ 95%CL (1 toyMC)
   68% expected band : 0.288176 < r < 0.288176
   95% expected band : 0.288176 < r < 0.288176
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2054754869
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281234 +/- 0.00189119 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.281234 @ 95%CL (1 toyMC)
median expected limit: r < 0.281234 @ 95%CL (1 toyMC)
   68% expected band : 0.281234 < r < 0.281234
   95% expected band : 0.281234 < r < 0.281234
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1574028861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.167446 +/- 0.00359137 @ 95% CL (98 tries)
Done in 0.46 min (cpu), 0.47 min (real)
mean   expected limit: r < 0.167446 @ 95%CL (1 toyMC)
median expected limit: r < 0.167446 @ 95%CL (1 toyMC)
   68% expected band : 0.167446 < r < 0.167446
   95% expected band : 0.167446 < r < 0.167446
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 22044206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.17442 +/- 0.00267038 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.17442 @ 95%CL (1 toyMC)
median expected limit: r < 0.17442 @ 95%CL (1 toyMC)
   68% expected band : 0.17442 < r < 0.17442
   95% expected band : 0.17442 < r < 0.17442
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2060083810
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.303723 +/- 0.00184574 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.303723 @ 95%CL (1 toyMC)
median expected limit: r < 0.303723 @ 95%CL (1 toyMC)
   68% expected band : 0.303723 < r < 0.303723
   95% expected band : 0.303723 < r < 0.303723
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -242764095
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.10483 +/- 1.45662 @ 95% CL (41 tries)
Done in 9.23 min (cpu), 9.30 min (real)
mean   expected limit: r < 6.10483 @ 95%CL (1 toyMC)
median expected limit: r < 6.10483 @ 95%CL (1 toyMC)
   68% expected band : 6.10483 < r < 6.10483
   95% expected band : 6.10483 < r < 6.10483
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1199586606
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.111362 @ 95% CL
Done in 15.45 min (cpu), 15.56 min (real)
mean   expected limit: r < 0.111362 @ 95%CL (1 toyMC)
median expected limit: r < 0.111362 @ 95%CL (1 toyMC)
   68% expected band : 0.111362 < r < 0.111362
   95% expected band : 0.111362 < r < 0.111362
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -189332427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.35497 +/- 2.20565 @ 95% CL (9 tries)
Done in 13.81 min (cpu), 13.90 min (real)
mean   expected limit: r < 2.35497 @ 95%CL (1 toyMC)
median expected limit: r < 2.35497 @ 95%CL (1 toyMC)
   68% expected band : 2.35497 < r < 2.35497
   95% expected band : 2.35497 < r < 2.35497
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -836619884
Generate toy 1/1
Done in 15.59 min (cpu), 15.69 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 197795560
Generate toy 1/1
Done in 15.54 min (cpu), 15.64 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 106509758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 16.692 +/- 3.30803 @ 95% CL (6 tries)
Done in 14.84 min (cpu), 14.92 min (real)
mean   expected limit: r < 16.692 @ 95%CL (1 toyMC)
median expected limit: r < 16.692 @ 95%CL (1 toyMC)
   68% expected band : 16.692 < r < 16.692
   95% expected band : 16.692 < r < 16.692
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1410867338
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66667e+29 +/- 1.66667e+29 @ 95% CL (6 tries)
Done in 14.59 min (cpu), 14.65 min (real)
mean   expected limit: r < 1.66667e+29 @ 95%CL (1 toyMC)
median expected limit: r < 1.66667e+29 @ 95%CL (1 toyMC)
   68% expected band : 1.66667e+29 < r < 1.66667e+29
   95% expected band : 1.66667e+29 < r < 1.66667e+29
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1035742744
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.138531 +/- 0.00380736 @ 95% CL (87 tries)
Done in 1.32 min (cpu), 1.32 min (real)
mean   expected limit: r < 0.138531 @ 95%CL (1 toyMC)
median expected limit: r < 0.138531 @ 95%CL (1 toyMC)
   68% expected band : 0.138531 < r < 0.138531
   95% expected band : 0.138531 < r < 0.138531
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1113944026
Generate toy 1/1
Done in 15.31 min (cpu), 15.37 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1395248218
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42857e+29 +/- 1.42857e+29 @ 95% CL (7 tries)
Done in 13.97 min (cpu), 14.03 min (real)
mean   expected limit: r < 1.42857e+29 @ 95%CL (1 toyMC)
median expected limit: r < 1.42857e+29 @ 95%CL (1 toyMC)
   68% expected band : 1.42857e+29 < r < 1.42857e+29
   95% expected band : 1.42857e+29 < r < 1.42857e+29
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1357347096
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.19779 +/- 1.54755 @ 95% CL (37 tries)
Done in 9.89 min (cpu), 9.93 min (real)
mean   expected limit: r < 6.19779 @ 95%CL (1 toyMC)
median expected limit: r < 6.19779 @ 95%CL (1 toyMC)
   68% expected band : 6.19779 < r < 6.19779
   95% expected band : 6.19779 < r < 6.19779
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 150373836
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.195862 +/- 0.00198744 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.195862 @ 95%CL (1 toyMC)
median expected limit: r < 0.195862 @ 95%CL (1 toyMC)
   68% expected band : 0.195862 < r < 0.195862
   95% expected band : 0.195862 < r < 0.195862
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -32956646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.143339 +/- 0.00706458 @ 95% CL (57 tries)
Done in 4.88 min (cpu), 4.89 min (real)
mean   expected limit: r < 0.143339 @ 95%CL (1 toyMC)
median expected limit: r < 0.143339 @ 95%CL (1 toyMC)
   68% expected band : 0.143339 < r < 0.143339
   95% expected band : 0.143339 < r < 0.143339
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1147255267
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.176044 +/- 0.00250134 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.176044 @ 95%CL (1 toyMC)
median expected limit: r < 0.176044 @ 95%CL (1 toyMC)
   68% expected band : 0.176044 < r < 0.176044
   95% expected band : 0.176044 < r < 0.176044
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 598505421
Generate toy 1/1
Done in 15.24 min (cpu), 15.29 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1989840804
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.21561 +/- 0.00176096 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.21561 @ 95%CL (1 toyMC)
median expected limit: r < 0.21561 @ 95%CL (1 toyMC)
   68% expected band : 0.21561 < r < 0.21561
   95% expected band : 0.21561 < r < 0.21561
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -685262269
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.161618 +/- 0.00285727 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.161618 @ 95%CL (1 toyMC)
median expected limit: r < 0.161618 @ 95%CL (1 toyMC)
   68% expected band : 0.161618 < r < 0.161618
   95% expected band : 0.161618 < r < 0.161618
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 309128874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.26346 +/- 1.51898 @ 95% CL (32 tries)
Done in 9.94 min (cpu), 9.98 min (real)
mean   expected limit: r < 4.26346 @ 95%CL (1 toyMC)
median expected limit: r < 4.26346 @ 95%CL (1 toyMC)
   68% expected band : 4.26346 < r < 4.26346
   95% expected band : 4.26346 < r < 4.26346
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1491341277
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.132324 +/- 0.00968225 @ 95% CL (22 tries)
Done in 12.02 min (cpu), 12.07 min (real)
mean   expected limit: r < 0.132324 @ 95%CL (1 toyMC)
median expected limit: r < 0.132324 @ 95%CL (1 toyMC)
   68% expected band : 0.132324 < r < 0.132324
   95% expected band : 0.132324 < r < 0.132324
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 955332073
Generate toy 1/1
Done in 15.28 min (cpu), 15.34 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1098860679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.13414 +/- 0.00571449 @ 95% CL (59 tries)
Done in 5.66 min (cpu), 5.68 min (real)
mean   expected limit: r < 0.13414 @ 95%CL (1 toyMC)
median expected limit: r < 0.13414 @ 95%CL (1 toyMC)
   68% expected band : 0.13414 < r < 0.13414
   95% expected band : 0.13414 < r < 0.13414
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 71779615
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.132737 +/- 0.00589951 @ 95% CL (65 tries)
Done in 5.16 min (cpu), 5.18 min (real)
mean   expected limit: r < 0.132737 @ 95%CL (1 toyMC)
median expected limit: r < 0.132737 @ 95%CL (1 toyMC)
   68% expected band : 0.132737 < r < 0.132737
   95% expected band : 0.132737 < r < 0.132737
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 636681473
Generate toy 1/1
Done in 15.13 min (cpu), 15.17 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1602437094
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.280512 +/- 0.00287225 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.280512 @ 95%CL (1 toyMC)
median expected limit: r < 0.280512 @ 95%CL (1 toyMC)
   68% expected band : 0.280512 < r < 0.280512
   95% expected band : 0.280512 < r < 0.280512
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -15764012
Generate toy 1/1
Done in 15.23 min (cpu), 15.28 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -248255440
Generate toy 1/1
Done in 15.29 min (cpu), 15.35 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -243859613
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.192121 +/- 0.0023551 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.192121 @ 95%CL (1 toyMC)
median expected limit: r < 0.192121 @ 95%CL (1 toyMC)
   68% expected band : 0.192121 < r < 0.192121
   95% expected band : 0.192121 < r < 0.192121
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -81248846
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281404 +/- 0.00194898 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.281404 @ 95%CL (1 toyMC)
median expected limit: r < 0.281404 @ 95%CL (1 toyMC)
   68% expected band : 0.281404 < r < 0.281404
   95% expected band : 0.281404 < r < 0.281404
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 902954605
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.182871 +/- 0.00302877 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.182871 @ 95%CL (1 toyMC)
median expected limit: r < 0.182871 @ 95%CL (1 toyMC)
   68% expected band : 0.182871 < r < 0.182871
   95% expected band : 0.182871 < r < 0.182871
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1732522609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.188099 +/- 0.00228025 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.188099 @ 95%CL (1 toyMC)
median expected limit: r < 0.188099 @ 95%CL (1 toyMC)
   68% expected band : 0.188099 < r < 0.188099
   95% expected band : 0.188099 < r < 0.188099
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1917544780
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.154221 +/- 0.00593181 @ 95% CL (54 tries)
Done in 6.52 min (cpu), 6.55 min (real)
mean   expected limit: r < 0.154221 @ 95%CL (1 toyMC)
median expected limit: r < 0.154221 @ 95%CL (1 toyMC)
   68% expected band : 0.154221 < r < 0.154221
   95% expected band : 0.154221 < r < 0.154221
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 857490071
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.146849 +/- 0.00384228 @ 95% CL (90 tries)
Done in 0.83 min (cpu), 0.84 min (real)
mean   expected limit: r < 0.146849 @ 95%CL (1 toyMC)
median expected limit: r < 0.146849 @ 95%CL (1 toyMC)
   68% expected band : 0.146849 < r < 0.146849
   95% expected band : 0.146849 < r < 0.146849
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -13385515
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.58392 +/- 2.00539 @ 95% CL (25 tries)
Done in 11.51 min (cpu), 11.56 min (real)
mean   expected limit: r < 7.58392 @ 95%CL (1 toyMC)
median expected limit: r < 7.58392 @ 95%CL (1 toyMC)
   68% expected band : 7.58392 < r < 7.58392
   95% expected band : 7.58392 < r < 7.58392
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2003147630
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.158365 +/- 0.00550936 @ 95% CL (58 tries)
Done in 6.57 min (cpu), 6.59 min (real)
mean   expected limit: r < 0.158365 @ 95%CL (1 toyMC)
median expected limit: r < 0.158365 @ 95%CL (1 toyMC)
   68% expected band : 0.158365 < r < 0.158365
   95% expected band : 0.158365 < r < 0.158365
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 454867641
Generate toy 1/1
Done in 14.10 min (cpu), 14.16 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1540784868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.831 +/- 1.00086 @ 95% CL (74 tries)
Done in 3.01 min (cpu), 3.02 min (real)
mean   expected limit: r < 4.831 @ 95%CL (1 toyMC)
median expected limit: r < 4.831 @ 95%CL (1 toyMC)
   68% expected band : 4.831 < r < 4.831
   95% expected band : 4.831 < r < 4.831
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -890174101
Generate toy 1/1
Done in 15.11 min (cpu), 15.15 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1306843296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1e+30 @ 95% CL
Done in 15.24 min (cpu), 15.29 min (real)
mean   expected limit: r < 1e+30 @ 95%CL (1 toyMC)
median expected limit: r < 1e+30 @ 95%CL (1 toyMC)
   68% expected band : 1e+30 < r < 1e+30
   95% expected band : 1e+30 < r < 1e+30
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1403381540
Generate toy 1/1
Done in 15.24 min (cpu), 15.29 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 294980263
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.264279 +/- 0.00219932 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.264279 @ 95%CL (1 toyMC)
median expected limit: r < 0.264279 @ 95%CL (1 toyMC)
   68% expected band : 0.264279 < r < 0.264279
   95% expected band : 0.264279 < r < 0.264279
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -618087843
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.167685 +/- 0.00295936 @ 95% CL (99 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.167685 @ 95%CL (1 toyMC)
median expected limit: r < 0.167685 @ 95%CL (1 toyMC)
   68% expected band : 0.167685 < r < 0.167685
   95% expected band : 0.167685 < r < 0.167685
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2083464594
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206342 +/- 0.00266529 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.206342 @ 95%CL (1 toyMC)
median expected limit: r < 0.206342 @ 95%CL (1 toyMC)
   68% expected band : 0.206342 < r < 0.206342
   95% expected band : 0.206342 < r < 0.206342
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -885174091
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.206852 +/- 0.00277119 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.206852 @ 95%CL (1 toyMC)
median expected limit: r < 0.206852 @ 95%CL (1 toyMC)
   68% expected band : 0.206852 < r < 0.206852
   95% expected band : 0.206852 < r < 0.206852
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1984943846
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.229372 +/- 0.00183011 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.229372 @ 95%CL (1 toyMC)
median expected limit: r < 0.229372 @ 95%CL (1 toyMC)
   68% expected band : 0.229372 < r < 0.229372
   95% expected band : 0.229372 < r < 0.229372
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1048875492
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.76133 +/- 2.8225 @ 95% CL (13 tries)
Done in 13.43 min (cpu), 13.47 min (real)
mean   expected limit: r < 6.76133 @ 95%CL (1 toyMC)
median expected limit: r < 6.76133 @ 95%CL (1 toyMC)
   68% expected band : 6.76133 < r < 6.76133
   95% expected band : 6.76133 < r < 6.76133
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1531585781
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.161687 +/- 0.00300638 @ 95% CL (98 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.161687 @ 95%CL (1 toyMC)
median expected limit: r < 0.161687 @ 95%CL (1 toyMC)
   68% expected band : 0.161687 < r < 0.161687
   95% expected band : 0.161687 < r < 0.161687
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 715094267
Generate toy 1/1
Done in 15.17 min (cpu), 15.22 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1068521109
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.165939 +/- 0.00311415 @ 95% CL (94 tries)
Done in 0.53 min (cpu), 0.53 min (real)
mean   expected limit: r < 0.165939 @ 95%CL (1 toyMC)
median expected limit: r < 0.165939 @ 95%CL (1 toyMC)
   68% expected band : 0.165939 < r < 0.165939
   95% expected band : 0.165939 < r < 0.165939
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 940256714
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.26012 +/- 0.00202288 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.26012 @ 95%CL (1 toyMC)
median expected limit: r < 0.26012 @ 95%CL (1 toyMC)
   68% expected band : 0.26012 < r < 0.26012
   95% expected band : 0.26012 < r < 0.26012
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1011201943
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.255762 +/- 0.0020775 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.255762 @ 95%CL (1 toyMC)
median expected limit: r < 0.255762 @ 95%CL (1 toyMC)
   68% expected band : 0.255762 < r < 0.255762
   95% expected band : 0.255762 < r < 0.255762
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 285691750
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186973 +/- 0.00207122 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.186973 @ 95%CL (1 toyMC)
median expected limit: r < 0.186973 @ 95%CL (1 toyMC)
   68% expected band : 0.186973 < r < 0.186973
   95% expected band : 0.186973 < r < 0.186973
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1878030861
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.145017 +/- 0.00740182 @ 95% CL (47 tries)
Done in 7.95 min (cpu), 7.97 min (real)
mean   expected limit: r < 0.145017 @ 95%CL (1 toyMC)
median expected limit: r < 0.145017 @ 95%CL (1 toyMC)
   68% expected band : 0.145017 < r < 0.145017
   95% expected band : 0.145017 < r < 0.145017
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2071625763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.88116 +/- 1.35666 @ 95% CL (45 tries)
Done in 8.19 min (cpu), 8.21 min (real)
mean   expected limit: r < 5.88116 @ 95%CL (1 toyMC)
median expected limit: r < 5.88116 @ 95%CL (1 toyMC)
   68% expected band : 5.88116 < r < 5.88116
   95% expected band : 5.88116 < r < 5.88116
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -97379777
Generate toy 1/1
Done in 15.23 min (cpu), 15.27 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1527683990
Generate toy 1/1
Done in 14.57 min (cpu), 14.61 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 76373547
Generate toy 1/1
Done in 15.14 min (cpu), 15.18 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1630717127
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.144428 +/- 0.00572908 @ 95% CL (68 tries)
Done in 4.17 min (cpu), 4.19 min (real)
mean   expected limit: r < 0.144428 @ 95%CL (1 toyMC)
median expected limit: r < 0.144428 @ 95%CL (1 toyMC)
   68% expected band : 0.144428 < r < 0.144428
   95% expected band : 0.144428 < r < 0.144428
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1329996575
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.133193 +/- 0.0121989 @ 95% CL (21 tries)
Done in 11.65 min (cpu), 11.68 min (real)
mean   expected limit: r < 0.133193 @ 95%CL (1 toyMC)
median expected limit: r < 0.133193 @ 95%CL (1 toyMC)
   68% expected band : 0.133193 < r < 0.133193
   95% expected band : 0.133193 < r < 0.133193
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 347481984
Generate toy 1/1
Done in 15.15 min (cpu), 15.19 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 526012381
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.186407 +/- 0.00198359 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.186407 @ 95%CL (1 toyMC)
median expected limit: r < 0.186407 @ 95%CL (1 toyMC)
   68% expected band : 0.186407 < r < 0.186407
   95% expected band : 0.186407 < r < 0.186407
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 595774660
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.178305 +/- 0.00251379 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.178305 @ 95%CL (1 toyMC)
median expected limit: r < 0.178305 @ 95%CL (1 toyMC)
   68% expected band : 0.178305 < r < 0.178305
   95% expected band : 0.178305 < r < 0.178305
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1826708925
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.11393 +/- 1.25365 @ 95% CL (48 tries)
Done in 7.10 min (cpu), 7.12 min (real)
mean   expected limit: r < 5.11393 @ 95%CL (1 toyMC)
median expected limit: r < 5.11393 @ 95%CL (1 toyMC)
   68% expected band : 5.11393 < r < 5.11393
   95% expected band : 5.11393 < r < 5.11393
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1178877478
Generate toy 1/1
Done in 14.96 min (cpu), 15.00 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -638774372
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.128156 +/- 0.013175 @ 95% CL (14 tries)
Done in 13.11 min (cpu), 13.15 min (real)
mean   expected limit: r < 0.128156 @ 95%CL (1 toyMC)
median expected limit: r < 0.128156 @ 95%CL (1 toyMC)
   68% expected band : 0.128156 < r < 0.128156
   95% expected band : 0.128156 < r < 0.128156
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1775333448
Generate toy 1/1
Done in 15.30 min (cpu), 15.35 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 592722756
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.172258 +/- 0.00189057 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.172258 @ 95%CL (1 toyMC)
median expected limit: r < 0.172258 @ 95%CL (1 toyMC)
   68% expected band : 0.172258 < r < 0.172258
   95% expected band : 0.172258 < r < 0.172258
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2041930910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.10101 +/- 1.47623 @ 95% CL (32 tries)
Done in 9.95 min (cpu), 9.98 min (real)
mean   expected limit: r < 4.10101 @ 95%CL (1 toyMC)
median expected limit: r < 4.10101 @ 95%CL (1 toyMC)
   68% expected band : 4.10101 < r < 4.10101
   95% expected band : 4.10101 < r < 4.10101
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 792842996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.194674 +/- 0.00208411 @ 95% CL (100 tries)
Done in 0.37 min (cpu), 0.37 min (real)
mean   expected limit: r < 0.194674 @ 95%CL (1 toyMC)
median expected limit: r < 0.194674 @ 95%CL (1 toyMC)
   68% expected band : 0.194674 < r < 0.194674
   95% expected band : 0.194674 < r < 0.194674
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1134324407
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.42857e+29 +/- 1.42857e+29 @ 95% CL (7 tries)
Done in 11.31 min (cpu), 11.36 min (real)
mean   expected limit: r < 1.42857e+29 @ 95%CL (1 toyMC)
median expected limit: r < 1.42857e+29 @ 95%CL (1 toyMC)
   68% expected band : 1.42857e+29 < r < 1.42857e+29
   95% expected band : 1.42857e+29 < r < 1.42857e+29
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -663022856
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.17038 +/- 2.07161 @ 95% CL (15 tries)
Done in 12.73 min (cpu), 12.78 min (real)
mean   expected limit: r < 3.17038 @ 95%CL (1 toyMC)
median expected limit: r < 3.17038 @ 95%CL (1 toyMC)
   68% expected band : 3.17038 < r < 3.17038
   95% expected band : 3.17038 < r < 3.17038
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1202992770
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.16318 +/- 0.00330592 @ 95% CL (99 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.16318 @ 95%CL (1 toyMC)
median expected limit: r < 0.16318 @ 95%CL (1 toyMC)
   68% expected band : 0.16318 < r < 0.16318
   95% expected band : 0.16318 < r < 0.16318
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 504163673
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.270383 +/- 0.00216805 @ 95% CL (100 tries)
Done in 0.36 min (cpu), 0.36 min (real)
mean   expected limit: r < 0.270383 @ 95%CL (1 toyMC)
median expected limit: r < 0.270383 @ 95%CL (1 toyMC)
   68% expected band : 0.270383 < r < 0.270383
   95% expected band : 0.270383 < r < 0.270383
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1907467052
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.204758 +/- 0.00241668 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.204758 @ 95%CL (1 toyMC)
median expected limit: r < 0.204758 @ 95%CL (1 toyMC)
   68% expected band : 0.204758 < r < 0.204758
   95% expected band : 0.204758 < r < 0.204758
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 675115336
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.153947 +/- 0.00280532 @ 95% CL (87 tries)
Done in 1.18 min (cpu), 1.18 min (real)
mean   expected limit: r < 0.153947 @ 95%CL (1 toyMC)
median expected limit: r < 0.153947 @ 95%CL (1 toyMC)
   68% expected band : 0.153947 < r < 0.153947
   95% expected band : 0.153947 < r < 0.153947
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1111769239
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.160477 +/- 0.00323636 @ 95% CL (99 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 0.160477 @ 95%CL (1 toyMC)
median expected limit: r < 0.160477 @ 95%CL (1 toyMC)
   68% expected band : 0.160477 < r < 0.160477
   95% expected band : 0.160477 < r < 0.160477
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -264421908
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.296591 +/- 0.00188774 @ 95% CL (100 tries)
Done in 0.35 min (cpu), 0.35 min (real)
mean   expected limit: r < 0.296591 @ 95%CL (1 toyMC)
median expected limit: r < 0.296591 @ 95%CL (1 toyMC)
   68% expected band : 0.296591 < r < 0.296591
   95% expected band : 0.296591 < r < 0.296591
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -195374297
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.153778 +/- 0.0146378 @ 95% CL (2 tries)
Done in 14.79 min (cpu), 14.84 min (real)
mean   expected limit: r < 0.153778 @ 95%CL (1 toyMC)
median expected limit: r < 0.153778 @ 95%CL (1 toyMC)
   68% expected band : 0.153778 < r < 0.153778
   95% expected band : 0.153778 < r < 0.153778
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1204880965
Generate toy 1/1
Done in 15.16 min (cpu), 15.21 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2095729187
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 7.7615 +/- 2.79306 @ 95% CL (14 tries)
Done in 13.58 min (cpu), 13.62 min (real)
mean   expected limit: r < 7.7615 @ 95%CL (1 toyMC)
median expected limit: r < 7.7615 @ 95%CL (1 toyMC)
   68% expected band : 7.7615 < r < 7.7615
   95% expected band : 7.7615 < r < 7.7615
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1071234272
Generate toy 1/1
Done in 15.21 min (cpu), 15.25 min (real)
mean   expected limit: r < -nan @ 95%CL (0 toyMC)
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine16.MarkovChainMC.mH16.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH16.-1035742744.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH16.-1068521109.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH16.-1071234272.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH16.-1134324407.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH16.-1196762569.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH16.-1204880965.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH16.-122105453.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH16.-1329996575.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH16.-13385515.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH16.-1395248218.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH16.-1410867338.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH16.-1540784868.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH16.-1574028861.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH16.-15764012.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH16.-1584524633.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH16.-1627342025.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH16.-1656630595.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH16.-170980742.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH16.-1826708925.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH16.-189332427.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH16.-195374297.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH16.-1984943846.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH16.-1989840804.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH16.-2003147630.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH16.-2054754869.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH16.-2071625763.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH16.-2083464594.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH16.-2095729187.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH16.-2097282376.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH16.-242764095.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH16.-243859613.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH16.-248255440.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH16.-264421908.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH16.-32956646.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH16.-47094888.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH16.-618087843.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH16.-63701029.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH16.-638774372.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH16.-663022856.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH16.-685262269.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH16.-81248846.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH16.-836619884.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH16.-885174091.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH16.-890174101.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH16.-97379777.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH16.-993544785.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH16.1011201943.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH16.1048875492.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH16.106509758.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH16.1082803146.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH16.1098860679.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH16.1111769239.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH16.1113944026.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH16.1147255267.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH16.1178877478.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH16.1199586606.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH16.1202992770.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH16.1306843296.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH16.1357347096.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH16.1403381540.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH16.1491341277.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH16.150373836.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH16.1527683990.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH16.1531585781.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH16.1602437094.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH16.1630717127.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH16.1732522609.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH16.1775333448.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH16.1878030861.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH16.1907467052.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH16.1917544780.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH16.197795560.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH16.2041930910.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH16.2060083810.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH16.22044206.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH16.285691750.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH16.294980263.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH16.305157919.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH16.309128874.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH16.347481984.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH16.454867641.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH16.461527759.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH16.486927857.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH16.504163673.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH16.526012381.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH16.592722756.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH16.595774660.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH16.598505421.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH16.63658150.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH16.636681473.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH16.637126447.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH16.675115336.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH16.715094267.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH16.71779615.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH16.76373547.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH16.792842996.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH16.857490071.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH16.902954605.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH16.940256714.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH16.955332073.root
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/
hadd Target path: higgsCombine16.MarkovChainMC.mH16.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1520577401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.532175 +/- 0.00238705 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.532175 @ 95%CL (1 toyMC)
median expected limit: r < 0.532175 @ 95%CL (1 toyMC)
   68% expected band : 0.532175 < r < 0.532175
   95% expected band : 0.532175 < r < 0.532175
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 136563800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.615559 +/- 0.0026787 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.615559 @ 95%CL (1 toyMC)
median expected limit: r < 0.615559 @ 95%CL (1 toyMC)
   68% expected band : 0.615559 < r < 0.615559
   95% expected band : 0.615559 < r < 0.615559
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -61823886
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.346813 +/- 0.00330097 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.346813 @ 95%CL (1 toyMC)
median expected limit: r < 0.346813 @ 95%CL (1 toyMC)
   68% expected band : 0.346813 < r < 0.346813
   95% expected band : 0.346813 < r < 0.346813
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 181566169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.401921 +/- 0.00226783 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.401921 @ 95%CL (1 toyMC)
median expected limit: r < 0.401921 @ 95%CL (1 toyMC)
   68% expected band : 0.401921 < r < 0.401921
   95% expected band : 0.401921 < r < 0.401921
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 525636229
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.318919 +/- 0.00251344 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.318919 @ 95%CL (1 toyMC)
median expected limit: r < 0.318919 @ 95%CL (1 toyMC)
   68% expected band : 0.318919 < r < 0.318919
   95% expected band : 0.318919 < r < 0.318919
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1165080146
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.348196 +/- 0.0027322 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.348196 @ 95%CL (1 toyMC)
median expected limit: r < 0.348196 @ 95%CL (1 toyMC)
   68% expected band : 0.348196 < r < 0.348196
   95% expected band : 0.348196 < r < 0.348196
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -8455618
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.539434 +/- 0.00304093 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.539434 @ 95%CL (1 toyMC)
median expected limit: r < 0.539434 @ 95%CL (1 toyMC)
   68% expected band : 0.539434 < r < 0.539434
   95% expected band : 0.539434 < r < 0.539434
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1805930328
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.329675 +/- 0.00256027 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.329675 @ 95%CL (1 toyMC)
median expected limit: r < 0.329675 @ 95%CL (1 toyMC)
   68% expected band : 0.329675 < r < 0.329675
   95% expected band : 0.329675 < r < 0.329675
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1878504979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.448447 +/- 0.00207842 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.448447 @ 95%CL (1 toyMC)
median expected limit: r < 0.448447 @ 95%CL (1 toyMC)
   68% expected band : 0.448447 < r < 0.448447
   95% expected band : 0.448447 < r < 0.448447
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2001530994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.328069 +/- 0.00242749 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.328069 @ 95%CL (1 toyMC)
median expected limit: r < 0.328069 @ 95%CL (1 toyMC)
   68% expected band : 0.328069 < r < 0.328069
   95% expected band : 0.328069 < r < 0.328069
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1730989298
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.310069 +/- 0.00282595 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.310069 @ 95%CL (1 toyMC)
median expected limit: r < 0.310069 @ 95%CL (1 toyMC)
   68% expected band : 0.310069 < r < 0.310069
   95% expected band : 0.310069 < r < 0.310069
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -162780729
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.36283 +/- 0.00268809 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.36283 @ 95%CL (1 toyMC)
median expected limit: r < 0.36283 @ 95%CL (1 toyMC)
   68% expected band : 0.36283 < r < 0.36283
   95% expected band : 0.36283 < r < 0.36283
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1608085106
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.897332 +/- 0.00210691 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.897332 @ 95%CL (1 toyMC)
median expected limit: r < 0.897332 @ 95%CL (1 toyMC)
   68% expected band : 0.897332 < r < 0.897332
   95% expected band : 0.897332 < r < 0.897332
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1733354323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.408443 +/- 0.00274584 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.408443 @ 95%CL (1 toyMC)
median expected limit: r < 0.408443 @ 95%CL (1 toyMC)
   68% expected band : 0.408443 < r < 0.408443
   95% expected band : 0.408443 < r < 0.408443
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -371864432
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.446771 +/- 0.00276391 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.446771 @ 95%CL (1 toyMC)
median expected limit: r < 0.446771 @ 95%CL (1 toyMC)
   68% expected band : 0.446771 < r < 0.446771
   95% expected band : 0.446771 < r < 0.446771
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1592379554
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.674096 +/- 0.00200333 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.674096 @ 95%CL (1 toyMC)
median expected limit: r < 0.674096 @ 95%CL (1 toyMC)
   68% expected band : 0.674096 < r < 0.674096
   95% expected band : 0.674096 < r < 0.674096
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1749605832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.368932 +/- 0.00264516 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.368932 @ 95%CL (1 toyMC)
median expected limit: r < 0.368932 @ 95%CL (1 toyMC)
   68% expected band : 0.368932 < r < 0.368932
   95% expected band : 0.368932 < r < 0.368932
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 182597373
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.323875 +/- 0.00227354 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.323875 @ 95%CL (1 toyMC)
median expected limit: r < 0.323875 @ 95%CL (1 toyMC)
   68% expected band : 0.323875 < r < 0.323875
   95% expected band : 0.323875 < r < 0.323875
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 160812903
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.454948 +/- 0.00245751 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.454948 @ 95%CL (1 toyMC)
median expected limit: r < 0.454948 @ 95%CL (1 toyMC)
   68% expected band : 0.454948 < r < 0.454948
   95% expected band : 0.454948 < r < 0.454948
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -195817636
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.439314 +/- 0.00213359 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.439314 @ 95%CL (1 toyMC)
median expected limit: r < 0.439314 @ 95%CL (1 toyMC)
   68% expected band : 0.439314 < r < 0.439314
   95% expected band : 0.439314 < r < 0.439314
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1122067668
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.247528 +/- 0.00222826 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.247528 @ 95%CL (1 toyMC)
median expected limit: r < 0.247528 @ 95%CL (1 toyMC)
   68% expected band : 0.247528 < r < 0.247528
   95% expected band : 0.247528 < r < 0.247528
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1345992960
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.667741 +/- 0.00310501 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.667741 @ 95%CL (1 toyMC)
median expected limit: r < 0.667741 @ 95%CL (1 toyMC)
   68% expected band : 0.667741 < r < 0.667741
   95% expected band : 0.667741 < r < 0.667741
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1532744791
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.441872 +/- 0.0027348 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.441872 @ 95%CL (1 toyMC)
median expected limit: r < 0.441872 @ 95%CL (1 toyMC)
   68% expected band : 0.441872 < r < 0.441872
   95% expected band : 0.441872 < r < 0.441872
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2055857783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.643289 +/- 0.00252115 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.643289 @ 95%CL (1 toyMC)
median expected limit: r < 0.643289 @ 95%CL (1 toyMC)
   68% expected band : 0.643289 < r < 0.643289
   95% expected band : 0.643289 < r < 0.643289
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1039976935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.543534 +/- 0.00271019 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.543534 @ 95%CL (1 toyMC)
median expected limit: r < 0.543534 @ 95%CL (1 toyMC)
   68% expected band : 0.543534 < r < 0.543534
   95% expected band : 0.543534 < r < 0.543534
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1894202841
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.651288 +/- 0.00302608 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.651288 @ 95%CL (1 toyMC)
median expected limit: r < 0.651288 @ 95%CL (1 toyMC)
   68% expected band : 0.651288 < r < 0.651288
   95% expected band : 0.651288 < r < 0.651288
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1496587630
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.442849 +/- 0.00235775 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.442849 @ 95%CL (1 toyMC)
median expected limit: r < 0.442849 @ 95%CL (1 toyMC)
   68% expected band : 0.442849 < r < 0.442849
   95% expected band : 0.442849 < r < 0.442849
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1901550794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.589697 +/- 0.0022125 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.589697 @ 95%CL (1 toyMC)
median expected limit: r < 0.589697 @ 95%CL (1 toyMC)
   68% expected band : 0.589697 < r < 0.589697
   95% expected band : 0.589697 < r < 0.589697
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1541612926
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.322023 +/- 0.00264441 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.322023 @ 95%CL (1 toyMC)
median expected limit: r < 0.322023 @ 95%CL (1 toyMC)
   68% expected band : 0.322023 < r < 0.322023
   95% expected band : 0.322023 < r < 0.322023
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 626023
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.427985 +/- 0.00287861 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.427985 @ 95%CL (1 toyMC)
median expected limit: r < 0.427985 @ 95%CL (1 toyMC)
   68% expected band : 0.427985 < r < 0.427985
   95% expected band : 0.427985 < r < 0.427985
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1980921739
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325406 +/- 0.00199593 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.325406 @ 95%CL (1 toyMC)
median expected limit: r < 0.325406 @ 95%CL (1 toyMC)
   68% expected band : 0.325406 < r < 0.325406
   95% expected band : 0.325406 < r < 0.325406
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 705419296
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.488962 +/- 0.00295353 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.488962 @ 95%CL (1 toyMC)
median expected limit: r < 0.488962 @ 95%CL (1 toyMC)
   68% expected band : 0.488962 < r < 0.488962
   95% expected band : 0.488962 < r < 0.488962
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -638046461
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.533028 +/- 0.00207124 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.533028 @ 95%CL (1 toyMC)
median expected limit: r < 0.533028 @ 95%CL (1 toyMC)
   68% expected band : 0.533028 < r < 0.533028
   95% expected band : 0.533028 < r < 0.533028
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1427748315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.437261 +/- 0.00230919 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.437261 @ 95%CL (1 toyMC)
median expected limit: r < 0.437261 @ 95%CL (1 toyMC)
   68% expected band : 0.437261 < r < 0.437261
   95% expected band : 0.437261 < r < 0.437261
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -11450789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.350964 +/- 0.00284133 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.350964 @ 95%CL (1 toyMC)
median expected limit: r < 0.350964 @ 95%CL (1 toyMC)
   68% expected band : 0.350964 < r < 0.350964
   95% expected band : 0.350964 < r < 0.350964
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1203200938
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.281938 +/- 0.00208945 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.281938 @ 95%CL (1 toyMC)
median expected limit: r < 0.281938 @ 95%CL (1 toyMC)
   68% expected band : 0.281938 < r < 0.281938
   95% expected band : 0.281938 < r < 0.281938
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 812380256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.459714 +/- 0.00274999 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.459714 @ 95%CL (1 toyMC)
median expected limit: r < 0.459714 @ 95%CL (1 toyMC)
   68% expected band : 0.459714 < r < 0.459714
   95% expected band : 0.459714 < r < 0.459714
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1975038929
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.417699 +/- 0.00350823 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.417699 @ 95%CL (1 toyMC)
median expected limit: r < 0.417699 @ 95%CL (1 toyMC)
   68% expected band : 0.417699 < r < 0.417699
   95% expected band : 0.417699 < r < 0.417699
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1350880646
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.516571 +/- 0.00301305 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.516571 @ 95%CL (1 toyMC)
median expected limit: r < 0.516571 @ 95%CL (1 toyMC)
   68% expected band : 0.516571 < r < 0.516571
   95% expected band : 0.516571 < r < 0.516571
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1461591593
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.482839 +/- 0.00287303 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.482839 @ 95%CL (1 toyMC)
median expected limit: r < 0.482839 @ 95%CL (1 toyMC)
   68% expected band : 0.482839 < r < 0.482839
   95% expected band : 0.482839 < r < 0.482839
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1649199292
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.574965 +/- 0.00287395 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.574965 @ 95%CL (1 toyMC)
median expected limit: r < 0.574965 @ 95%CL (1 toyMC)
   68% expected band : 0.574965 < r < 0.574965
   95% expected band : 0.574965 < r < 0.574965
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -787912481
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.346476 +/- 0.00273116 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.346476 @ 95%CL (1 toyMC)
median expected limit: r < 0.346476 @ 95%CL (1 toyMC)
   68% expected band : 0.346476 < r < 0.346476
   95% expected band : 0.346476 < r < 0.346476
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 4509128
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330396 +/- 0.00244675 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.330396 @ 95%CL (1 toyMC)
median expected limit: r < 0.330396 @ 95%CL (1 toyMC)
   68% expected band : 0.330396 < r < 0.330396
   95% expected band : 0.330396 < r < 0.330396
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -868961673
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.865877 +/- 0.0030123 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.865877 @ 95%CL (1 toyMC)
median expected limit: r < 0.865877 @ 95%CL (1 toyMC)
   68% expected band : 0.865877 < r < 0.865877
   95% expected band : 0.865877 < r < 0.865877
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1423804181
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.977891 +/- 0.0028262 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.977891 @ 95%CL (1 toyMC)
median expected limit: r < 0.977891 @ 95%CL (1 toyMC)
   68% expected band : 0.977891 < r < 0.977891
   95% expected band : 0.977891 < r < 0.977891
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1655878446
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.585276 +/- 0.00316836 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.585276 @ 95%CL (1 toyMC)
median expected limit: r < 0.585276 @ 95%CL (1 toyMC)
   68% expected band : 0.585276 < r < 0.585276
   95% expected band : 0.585276 < r < 0.585276
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1903121009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.315143 +/- 0.00303032 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.315143 @ 95%CL (1 toyMC)
median expected limit: r < 0.315143 @ 95%CL (1 toyMC)
   68% expected band : 0.315143 < r < 0.315143
   95% expected band : 0.315143 < r < 0.315143
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 679050445
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.430132 +/- 0.00284312 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.430132 @ 95%CL (1 toyMC)
median expected limit: r < 0.430132 @ 95%CL (1 toyMC)
   68% expected band : 0.430132 < r < 0.430132
   95% expected band : 0.430132 < r < 0.430132
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -169729018
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.632076 +/- 0.00248162 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.632076 @ 95%CL (1 toyMC)
median expected limit: r < 0.632076 @ 95%CL (1 toyMC)
   68% expected band : 0.632076 < r < 0.632076
   95% expected band : 0.632076 < r < 0.632076
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2068749050
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.325046 +/- 0.00233335 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.325046 @ 95%CL (1 toyMC)
median expected limit: r < 0.325046 @ 95%CL (1 toyMC)
   68% expected band : 0.325046 < r < 0.325046
   95% expected band : 0.325046 < r < 0.325046
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1867955482
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0924 +/- 0.00293631 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.0924 @ 95%CL (1 toyMC)
median expected limit: r < 1.0924 @ 95%CL (1 toyMC)
   68% expected band : 1.0924 < r < 1.0924
   95% expected band : 1.0924 < r < 1.0924
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -41636860
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.493397 +/- 0.00308231 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.493397 @ 95%CL (1 toyMC)
median expected limit: r < 0.493397 @ 95%CL (1 toyMC)
   68% expected band : 0.493397 < r < 0.493397
   95% expected band : 0.493397 < r < 0.493397
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -375966340
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.859394 +/- 0.00186663 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.859394 @ 95%CL (1 toyMC)
median expected limit: r < 0.859394 @ 95%CL (1 toyMC)
   68% expected band : 0.859394 < r < 0.859394
   95% expected band : 0.859394 < r < 0.859394
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1328054713
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.428356 +/- 0.0024048 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.428356 @ 95%CL (1 toyMC)
median expected limit: r < 0.428356 @ 95%CL (1 toyMC)
   68% expected band : 0.428356 < r < 0.428356
   95% expected band : 0.428356 < r < 0.428356
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1213576000
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.555658 +/- 0.00237771 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.555658 @ 95%CL (1 toyMC)
median expected limit: r < 0.555658 @ 95%CL (1 toyMC)
   68% expected band : 0.555658 < r < 0.555658
   95% expected band : 0.555658 < r < 0.555658
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1828259761
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.403522 +/- 0.00226981 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.403522 @ 95%CL (1 toyMC)
median expected limit: r < 0.403522 @ 95%CL (1 toyMC)
   68% expected band : 0.403522 < r < 0.403522
   95% expected band : 0.403522 < r < 0.403522
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -713460698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.532751 +/- 0.0028414 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.532751 @ 95%CL (1 toyMC)
median expected limit: r < 0.532751 @ 95%CL (1 toyMC)
   68% expected band : 0.532751 < r < 0.532751
   95% expected band : 0.532751 < r < 0.532751
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1374900491
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.743769 +/- 0.00292821 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.743769 @ 95%CL (1 toyMC)
median expected limit: r < 0.743769 @ 95%CL (1 toyMC)
   68% expected band : 0.743769 < r < 0.743769
   95% expected band : 0.743769 < r < 0.743769
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 166351701
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.333025 +/- 0.00242273 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.333025 @ 95%CL (1 toyMC)
median expected limit: r < 0.333025 @ 95%CL (1 toyMC)
   68% expected band : 0.333025 < r < 0.333025
   95% expected band : 0.333025 < r < 0.333025
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1200260711
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.488752 +/- 0.00287993 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.488752 @ 95%CL (1 toyMC)
median expected limit: r < 0.488752 @ 95%CL (1 toyMC)
   68% expected band : 0.488752 < r < 0.488752
   95% expected band : 0.488752 < r < 0.488752
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 849281954
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.390703 +/- 0.0023233 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.390703 @ 95%CL (1 toyMC)
median expected limit: r < 0.390703 @ 95%CL (1 toyMC)
   68% expected band : 0.390703 < r < 0.390703
   95% expected band : 0.390703 < r < 0.390703
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -597172281
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.495205 +/- 0.0026302 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.495205 @ 95%CL (1 toyMC)
median expected limit: r < 0.495205 @ 95%CL (1 toyMC)
   68% expected band : 0.495205 < r < 0.495205
   95% expected band : 0.495205 < r < 0.495205
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1515337385
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.368885 +/- 0.00254325 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.368885 @ 95%CL (1 toyMC)
median expected limit: r < 0.368885 @ 95%CL (1 toyMC)
   68% expected band : 0.368885 < r < 0.368885
   95% expected band : 0.368885 < r < 0.368885
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -373586904
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.450181 +/- 0.00205072 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.450181 @ 95%CL (1 toyMC)
median expected limit: r < 0.450181 @ 95%CL (1 toyMC)
   68% expected band : 0.450181 < r < 0.450181
   95% expected band : 0.450181 < r < 0.450181
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2131849832
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.254071 +/- 0.00290114 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.254071 @ 95%CL (1 toyMC)
median expected limit: r < 0.254071 @ 95%CL (1 toyMC)
   68% expected band : 0.254071 < r < 0.254071
   95% expected band : 0.254071 < r < 0.254071
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 864760986
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.789604 +/- 0.00315352 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.789604 @ 95%CL (1 toyMC)
median expected limit: r < 0.789604 @ 95%CL (1 toyMC)
   68% expected band : 0.789604 < r < 0.789604
   95% expected band : 0.789604 < r < 0.789604
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 460955398
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.345974 +/- 0.00215696 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.345974 @ 95%CL (1 toyMC)
median expected limit: r < 0.345974 @ 95%CL (1 toyMC)
   68% expected band : 0.345974 < r < 0.345974
   95% expected band : 0.345974 < r < 0.345974
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2010164350
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.367861 +/- 0.00280057 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.367861 @ 95%CL (1 toyMC)
median expected limit: r < 0.367861 @ 95%CL (1 toyMC)
   68% expected band : 0.367861 < r < 0.367861
   95% expected band : 0.367861 < r < 0.367861
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1895728165
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.378265 +/- 0.00253422 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.378265 @ 95%CL (1 toyMC)
median expected limit: r < 0.378265 @ 95%CL (1 toyMC)
   68% expected band : 0.378265 < r < 0.378265
   95% expected band : 0.378265 < r < 0.378265
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1402307520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.516054 +/- 0.00238588 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.516054 @ 95%CL (1 toyMC)
median expected limit: r < 0.516054 @ 95%CL (1 toyMC)
   68% expected band : 0.516054 < r < 0.516054
   95% expected band : 0.516054 < r < 0.516054
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -995656763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.274498 +/- 0.00282775 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.274498 @ 95%CL (1 toyMC)
median expected limit: r < 0.274498 @ 95%CL (1 toyMC)
   68% expected band : 0.274498 < r < 0.274498
   95% expected band : 0.274498 < r < 0.274498
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1994560988
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.598627 +/- 0.00277003 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.598627 @ 95%CL (1 toyMC)
median expected limit: r < 0.598627 @ 95%CL (1 toyMC)
   68% expected band : 0.598627 < r < 0.598627
   95% expected band : 0.598627 < r < 0.598627
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 45765983
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.517821 +/- 0.00267129 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.517821 @ 95%CL (1 toyMC)
median expected limit: r < 0.517821 @ 95%CL (1 toyMC)
   68% expected band : 0.517821 < r < 0.517821
   95% expected band : 0.517821 < r < 0.517821
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -473818010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.673988 +/- 0.00311525 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.673988 @ 95%CL (1 toyMC)
median expected limit: r < 0.673988 @ 95%CL (1 toyMC)
   68% expected band : 0.673988 < r < 0.673988
   95% expected band : 0.673988 < r < 0.673988
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 73874758
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.461536 +/- 0.00217992 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.461536 @ 95%CL (1 toyMC)
median expected limit: r < 0.461536 @ 95%CL (1 toyMC)
   68% expected band : 0.461536 < r < 0.461536
   95% expected band : 0.461536 < r < 0.461536
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 960704797
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.505606 +/- 0.00211925 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.505606 @ 95%CL (1 toyMC)
median expected limit: r < 0.505606 @ 95%CL (1 toyMC)
   68% expected band : 0.505606 < r < 0.505606
   95% expected band : 0.505606 < r < 0.505606
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1907093469
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.683774 +/- 0.00255124 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.683774 @ 95%CL (1 toyMC)
median expected limit: r < 0.683774 @ 95%CL (1 toyMC)
   68% expected band : 0.683774 < r < 0.683774
   95% expected band : 0.683774 < r < 0.683774
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1264804589
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.37672 +/- 0.00235416 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.37672 @ 95%CL (1 toyMC)
median expected limit: r < 0.37672 @ 95%CL (1 toyMC)
   68% expected band : 0.37672 < r < 0.37672
   95% expected band : 0.37672 < r < 0.37672
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1822030245
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.509285 +/- 0.00305579 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.509285 @ 95%CL (1 toyMC)
median expected limit: r < 0.509285 @ 95%CL (1 toyMC)
   68% expected band : 0.509285 < r < 0.509285
   95% expected band : 0.509285 < r < 0.509285
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 378739501
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.326226 +/- 0.00218951 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.326226 @ 95%CL (1 toyMC)
median expected limit: r < 0.326226 @ 95%CL (1 toyMC)
   68% expected band : 0.326226 < r < 0.326226
   95% expected band : 0.326226 < r < 0.326226
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 380442447
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.340093 +/- 0.00300505 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.340093 @ 95%CL (1 toyMC)
median expected limit: r < 0.340093 @ 95%CL (1 toyMC)
   68% expected band : 0.340093 < r < 0.340093
   95% expected band : 0.340093 < r < 0.340093
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1012393447
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.417031 +/- 0.00268225 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.417031 @ 95%CL (1 toyMC)
median expected limit: r < 0.417031 @ 95%CL (1 toyMC)
   68% expected band : 0.417031 < r < 0.417031
   95% expected band : 0.417031 < r < 0.417031
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 944885102
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.251375 +/- 0.00240554 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.251375 @ 95%CL (1 toyMC)
median expected limit: r < 0.251375 @ 95%CL (1 toyMC)
   68% expected band : 0.251375 < r < 0.251375
   95% expected band : 0.251375 < r < 0.251375
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 281310912
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.332825 +/- 0.00272695 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.332825 @ 95%CL (1 toyMC)
median expected limit: r < 0.332825 @ 95%CL (1 toyMC)
   68% expected band : 0.332825 < r < 0.332825
   95% expected band : 0.332825 < r < 0.332825
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2025217258
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.339671 +/- 0.00247483 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.339671 @ 95%CL (1 toyMC)
median expected limit: r < 0.339671 @ 95%CL (1 toyMC)
   68% expected band : 0.339671 < r < 0.339671
   95% expected band : 0.339671 < r < 0.339671
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1574579210
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.505169 +/- 0.00293148 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.505169 @ 95%CL (1 toyMC)
median expected limit: r < 0.505169 @ 95%CL (1 toyMC)
   68% expected band : 0.505169 < r < 0.505169
   95% expected band : 0.505169 < r < 0.505169
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1230400520
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.442383 +/- 0.00326289 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.442383 @ 95%CL (1 toyMC)
median expected limit: r < 0.442383 @ 95%CL (1 toyMC)
   68% expected band : 0.442383 < r < 0.442383
   95% expected band : 0.442383 < r < 0.442383
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 707940319
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.500075 +/- 0.0028294 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.500075 @ 95%CL (1 toyMC)
median expected limit: r < 0.500075 @ 95%CL (1 toyMC)
   68% expected band : 0.500075 < r < 0.500075
   95% expected band : 0.500075 < r < 0.500075
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1656423437
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.331474 +/- 0.00217169 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.331474 @ 95%CL (1 toyMC)
median expected limit: r < 0.331474 @ 95%CL (1 toyMC)
   68% expected band : 0.331474 < r < 0.331474
   95% expected band : 0.331474 < r < 0.331474
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 275366926
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.522641 +/- 0.00222546 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.522641 @ 95%CL (1 toyMC)
median expected limit: r < 0.522641 @ 95%CL (1 toyMC)
   68% expected band : 0.522641 < r < 0.522641
   95% expected band : 0.522641 < r < 0.522641
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1904893764
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.402388 +/- 0.00279315 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.402388 @ 95%CL (1 toyMC)
median expected limit: r < 0.402388 @ 95%CL (1 toyMC)
   68% expected band : 0.402388 < r < 0.402388
   95% expected band : 0.402388 < r < 0.402388
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 174600020
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.550984 +/- 0.00258397 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.550984 @ 95%CL (1 toyMC)
median expected limit: r < 0.550984 @ 95%CL (1 toyMC)
   68% expected band : 0.550984 < r < 0.550984
   95% expected band : 0.550984 < r < 0.550984
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 563220627
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.49515 +/- 0.00221659 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.49515 @ 95%CL (1 toyMC)
median expected limit: r < 0.49515 @ 95%CL (1 toyMC)
   68% expected band : 0.49515 < r < 0.49515
   95% expected band : 0.49515 < r < 0.49515
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -893916246
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.368074 +/- 0.00254002 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.368074 @ 95%CL (1 toyMC)
median expected limit: r < 0.368074 @ 95%CL (1 toyMC)
   68% expected band : 0.368074 < r < 0.368074
   95% expected band : 0.368074 < r < 0.368074
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1103254459
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.334999 +/- 0.00284258 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.334999 @ 95%CL (1 toyMC)
median expected limit: r < 0.334999 @ 95%CL (1 toyMC)
   68% expected band : 0.334999 < r < 0.334999
   95% expected band : 0.334999 < r < 0.334999
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1312458524
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.330322 +/- 0.00235529 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.330322 @ 95%CL (1 toyMC)
median expected limit: r < 0.330322 @ 95%CL (1 toyMC)
   68% expected band : 0.330322 < r < 0.330322
   95% expected band : 0.330322 < r < 0.330322
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1233529344
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.425339 +/- 0.00232537 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.425339 @ 95%CL (1 toyMC)
median expected limit: r < 0.425339 @ 95%CL (1 toyMC)
   68% expected band : 0.425339 < r < 0.425339
   95% expected band : 0.425339 < r < 0.425339
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1542978456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.323667 +/- 0.00242941 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.323667 @ 95%CL (1 toyMC)
median expected limit: r < 0.323667 @ 95%CL (1 toyMC)
   68% expected band : 0.323667 < r < 0.323667
   95% expected band : 0.323667 < r < 0.323667
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1089880839
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.348576 +/- 0.002258 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.348576 @ 95%CL (1 toyMC)
median expected limit: r < 0.348576 @ 95%CL (1 toyMC)
   68% expected band : 0.348576 < r < 0.348576
   95% expected band : 0.348576 < r < 0.348576
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 597088745
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.533194 +/- 0.00229981 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.533194 @ 95%CL (1 toyMC)
median expected limit: r < 0.533194 @ 95%CL (1 toyMC)
   68% expected band : 0.533194 < r < 0.533194
   95% expected band : 0.533194 < r < 0.533194
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine22.MarkovChainMC.mH22.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH22.-1039976935.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH22.-1122067668.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH22.-11450789.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH22.-1203200938.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH22.-1213576000.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH22.-1230400520.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH22.-1264804589.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH22.-1312458524.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH22.-1328054713.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH22.-1345992960.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH22.-1423804181.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH22.-1427748315.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH22.-1461591593.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH22.-1532744791.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH22.-1608085106.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH22.-162780729.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH22.-1655878446.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH22.-169729018.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH22.-1730989298.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH22.-1733354323.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH22.-1749605832.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH22.-1822030245.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH22.-1894202841.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH22.-195817636.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH22.-1980921739.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH22.-2001530994.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH22.-371864432.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH22.-373586904.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH22.-375966340.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH22.-41636860.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH22.-473818010.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH22.-597172281.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH22.-61823886.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH22.-638046461.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH22.-713460698.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH22.-787912481.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH22.-8455618.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH22.-868961673.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH22.-893916246.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH22.-995656763.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH22.1012393447.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH22.1089880839.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH22.1103254459.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH22.1165080146.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH22.1200260711.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH22.1233529344.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH22.1350880646.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH22.136563800.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH22.1374900491.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH22.1402307520.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH22.1496587630.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH22.1515337385.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH22.1520577401.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH22.1541612926.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH22.1542978456.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH22.1574579210.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH22.1592379554.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH22.160812903.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH22.1649199292.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH22.1656423437.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH22.166351701.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH22.174600020.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH22.1805930328.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH22.181566169.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH22.182597373.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH22.1828259761.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH22.1867955482.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH22.1878504979.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH22.1895728165.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH22.1901550794.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH22.1903121009.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH22.1904893764.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH22.1907093469.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH22.1975038929.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH22.1994560988.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH22.2010164350.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH22.2025217258.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH22.2055857783.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH22.2068749050.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH22.2131849832.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH22.275366926.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH22.281310912.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH22.378739501.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH22.380442447.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH22.4509128.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH22.45765983.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH22.460955398.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH22.525636229.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH22.563220627.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH22.597088745.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH22.626023.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH22.679050445.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH22.705419296.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH22.707940319.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH22.73874758.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH22.812380256.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH22.849281954.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH22.864760986.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH22.944885102.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH22.960704797.root
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/
hadd Target path: higgsCombine22.MarkovChainMC.mH22.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -981313171
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2444 +/- 0.00381784 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.2444 @ 95%CL (1 toyMC)
median expected limit: r < 1.2444 @ 95%CL (1 toyMC)
   68% expected band : 1.2444 < r < 1.2444
   95% expected band : 1.2444 < r < 1.2444
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1906688775
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.69397 +/- 0.00270375 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.69397 @ 95%CL (1 toyMC)
median expected limit: r < 0.69397 @ 95%CL (1 toyMC)
   68% expected band : 0.69397 < r < 0.69397
   95% expected band : 0.69397 < r < 0.69397
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 617388188
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08846 +/- 0.00299111 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.08846 @ 95%CL (1 toyMC)
median expected limit: r < 1.08846 @ 95%CL (1 toyMC)
   68% expected band : 1.08846 < r < 1.08846
   95% expected band : 1.08846 < r < 1.08846
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 508515509
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.24112 +/- 0.0034935 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.24112 @ 95%CL (1 toyMC)
median expected limit: r < 1.24112 @ 95%CL (1 toyMC)
   68% expected band : 1.24112 < r < 1.24112
   95% expected band : 1.24112 < r < 1.24112
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1962233879
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.654139 +/- 0.0034548 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.654139 @ 95%CL (1 toyMC)
median expected limit: r < 0.654139 @ 95%CL (1 toyMC)
   68% expected band : 0.654139 < r < 0.654139
   95% expected band : 0.654139 < r < 0.654139
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1862000304
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.820324 +/- 0.00357174 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.820324 @ 95%CL (1 toyMC)
median expected limit: r < 0.820324 @ 95%CL (1 toyMC)
   68% expected band : 0.820324 < r < 0.820324
   95% expected band : 0.820324 < r < 0.820324
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 896599124
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.782385 +/- 0.00362816 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.782385 @ 95%CL (1 toyMC)
median expected limit: r < 0.782385 @ 95%CL (1 toyMC)
   68% expected band : 0.782385 < r < 0.782385
   95% expected band : 0.782385 < r < 0.782385
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1268738004
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04177 +/- 0.00313539 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.04177 @ 95%CL (1 toyMC)
median expected limit: r < 1.04177 @ 95%CL (1 toyMC)
   68% expected band : 1.04177 < r < 1.04177
   95% expected band : 1.04177 < r < 1.04177
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1228665565
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.647711 +/- 0.00367937 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.647711 @ 95%CL (1 toyMC)
median expected limit: r < 0.647711 @ 95%CL (1 toyMC)
   68% expected band : 0.647711 < r < 0.647711
   95% expected band : 0.647711 < r < 0.647711
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 564053507
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.885486 +/- 0.00375568 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.885486 @ 95%CL (1 toyMC)
median expected limit: r < 0.885486 @ 95%CL (1 toyMC)
   68% expected band : 0.885486 < r < 0.885486
   95% expected band : 0.885486 < r < 0.885486
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2129961783
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06067 +/- 0.00393126 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.06067 @ 95%CL (1 toyMC)
median expected limit: r < 1.06067 @ 95%CL (1 toyMC)
   68% expected band : 1.06067 < r < 1.06067
   95% expected band : 1.06067 < r < 1.06067
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -440389982
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.818588 +/- 0.00326969 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.818588 @ 95%CL (1 toyMC)
median expected limit: r < 0.818588 @ 95%CL (1 toyMC)
   68% expected band : 0.818588 < r < 0.818588
   95% expected band : 0.818588 < r < 0.818588
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 681365777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.878823 +/- 0.00358559 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.878823 @ 95%CL (1 toyMC)
median expected limit: r < 0.878823 @ 95%CL (1 toyMC)
   68% expected band : 0.878823 < r < 0.878823
   95% expected band : 0.878823 < r < 0.878823
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1635033410
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.978562 +/- 0.00337496 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.978562 @ 95%CL (1 toyMC)
median expected limit: r < 0.978562 @ 95%CL (1 toyMC)
   68% expected band : 0.978562 < r < 0.978562
   95% expected band : 0.978562 < r < 0.978562
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -889257546
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.54747 +/- 0.00330192 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.54747 @ 95%CL (1 toyMC)
median expected limit: r < 0.54747 @ 95%CL (1 toyMC)
   68% expected band : 0.54747 < r < 0.54747
   95% expected band : 0.54747 < r < 0.54747
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 614393526
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.994101 +/- 0.00351017 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.994101 @ 95%CL (1 toyMC)
median expected limit: r < 0.994101 @ 95%CL (1 toyMC)
   68% expected band : 0.994101 < r < 0.994101
   95% expected band : 0.994101 < r < 0.994101
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1469360517
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.516689 +/- 0.00312732 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.516689 @ 95%CL (1 toyMC)
median expected limit: r < 0.516689 @ 95%CL (1 toyMC)
   68% expected band : 0.516689 < r < 0.516689
   95% expected band : 0.516689 < r < 0.516689
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -114809981
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.822253 +/- 0.00265056 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.822253 @ 95%CL (1 toyMC)
median expected limit: r < 0.822253 @ 95%CL (1 toyMC)
   68% expected band : 0.822253 < r < 0.822253
   95% expected band : 0.822253 < r < 0.822253
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1662230426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08286 +/- 0.00300649 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.08286 @ 95%CL (1 toyMC)
median expected limit: r < 1.08286 @ 95%CL (1 toyMC)
   68% expected band : 1.08286 < r < 1.08286
   95% expected band : 1.08286 < r < 1.08286
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1059157323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.8942 +/- 0.00394001 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.8942 @ 95%CL (1 toyMC)
median expected limit: r < 1.8942 @ 95%CL (1 toyMC)
   68% expected band : 1.8942 < r < 1.8942
   95% expected band : 1.8942 < r < 1.8942
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1418283302
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.11153 +/- 0.00395931 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.11153 @ 95%CL (1 toyMC)
median expected limit: r < 2.11153 @ 95%CL (1 toyMC)
   68% expected band : 2.11153 < r < 2.11153
   95% expected band : 2.11153 < r < 2.11153
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1149062968
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.87931 +/- 0.00308753 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.87931 @ 95%CL (1 toyMC)
median expected limit: r < 0.87931 @ 95%CL (1 toyMC)
   68% expected band : 0.87931 < r < 0.87931
   95% expected band : 0.87931 < r < 0.87931
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1958786167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.7099 +/- 0.003481 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.7099 @ 95%CL (1 toyMC)
median expected limit: r < 0.7099 @ 95%CL (1 toyMC)
   68% expected band : 0.7099 < r < 0.7099
   95% expected band : 0.7099 < r < 0.7099
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -504404817
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31178 +/- 0.00380733 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.31178 @ 95%CL (1 toyMC)
median expected limit: r < 1.31178 @ 95%CL (1 toyMC)
   68% expected band : 1.31178 < r < 1.31178
   95% expected band : 1.31178 < r < 1.31178
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1477094346
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.794172 +/- 0.00285002 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.794172 @ 95%CL (1 toyMC)
median expected limit: r < 0.794172 @ 95%CL (1 toyMC)
   68% expected band : 0.794172 < r < 0.794172
   95% expected band : 0.794172 < r < 0.794172
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 576613818
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.906768 +/- 0.00322575 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.906768 @ 95%CL (1 toyMC)
median expected limit: r < 0.906768 @ 95%CL (1 toyMC)
   68% expected band : 0.906768 < r < 0.906768
   95% expected band : 0.906768 < r < 0.906768
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2038386916
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.768462 +/- 0.00353466 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.768462 @ 95%CL (1 toyMC)
median expected limit: r < 0.768462 @ 95%CL (1 toyMC)
   68% expected band : 0.768462 < r < 0.768462
   95% expected band : 0.768462 < r < 0.768462
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -421037326
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.989937 +/- 0.00353025 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.989937 @ 95%CL (1 toyMC)
median expected limit: r < 0.989937 @ 95%CL (1 toyMC)
   68% expected band : 0.989937 < r < 0.989937
   95% expected band : 0.989937 < r < 0.989937
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1829553998
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.36137 +/- 0.00335987 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.36137 @ 95%CL (1 toyMC)
median expected limit: r < 1.36137 @ 95%CL (1 toyMC)
   68% expected band : 1.36137 < r < 1.36137
   95% expected band : 1.36137 < r < 1.36137
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -542709019
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25009 +/- 0.00402237 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.25009 @ 95%CL (1 toyMC)
median expected limit: r < 1.25009 @ 95%CL (1 toyMC)
   68% expected band : 1.25009 < r < 1.25009
   95% expected band : 1.25009 < r < 1.25009
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -847936068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.58242 +/- 0.00426478 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.58242 @ 95%CL (1 toyMC)
median expected limit: r < 1.58242 @ 95%CL (1 toyMC)
   68% expected band : 1.58242 < r < 1.58242
   95% expected band : 1.58242 < r < 1.58242
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -175142396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.576025 +/- 0.00320273 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.576025 @ 95%CL (1 toyMC)
median expected limit: r < 0.576025 @ 95%CL (1 toyMC)
   68% expected band : 0.576025 < r < 0.576025
   95% expected band : 0.576025 < r < 0.576025
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -538470902
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.868981 +/- 0.00299762 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.868981 @ 95%CL (1 toyMC)
median expected limit: r < 0.868981 @ 95%CL (1 toyMC)
   68% expected band : 0.868981 < r < 0.868981
   95% expected band : 0.868981 < r < 0.868981
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -913258408
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.960772 +/- 0.00243119 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.960772 @ 95%CL (1 toyMC)
median expected limit: r < 0.960772 @ 95%CL (1 toyMC)
   68% expected band : 0.960772 < r < 0.960772
   95% expected band : 0.960772 < r < 0.960772
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1286485327
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.656941 +/- 0.00317328 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.656941 @ 95%CL (1 toyMC)
median expected limit: r < 0.656941 @ 95%CL (1 toyMC)
   68% expected band : 0.656941 < r < 0.656941
   95% expected band : 0.656941 < r < 0.656941
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1113282148
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.67153 +/- 0.00302061 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.67153 @ 95%CL (1 toyMC)
median expected limit: r < 0.67153 @ 95%CL (1 toyMC)
   68% expected band : 0.67153 < r < 0.67153
   95% expected band : 0.67153 < r < 0.67153
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -628598088
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.49146 +/- 0.00318751 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.49146 @ 95%CL (1 toyMC)
median expected limit: r < 2.49146 @ 95%CL (1 toyMC)
   68% expected band : 2.49146 < r < 2.49146
   95% expected band : 2.49146 < r < 2.49146
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1770363176
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07317 +/- 0.00295087 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.07317 @ 95%CL (1 toyMC)
median expected limit: r < 1.07317 @ 95%CL (1 toyMC)
   68% expected band : 1.07317 < r < 1.07317
   95% expected band : 1.07317 < r < 1.07317
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 147800686
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.969267 +/- 0.00342201 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.969267 @ 95%CL (1 toyMC)
median expected limit: r < 0.969267 @ 95%CL (1 toyMC)
   68% expected band : 0.969267 < r < 0.969267
   95% expected band : 0.969267 < r < 0.969267
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 289872632
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21159 +/- 0.00345683 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.21159 @ 95%CL (1 toyMC)
median expected limit: r < 1.21159 @ 95%CL (1 toyMC)
   68% expected band : 1.21159 < r < 1.21159
   95% expected band : 1.21159 < r < 1.21159
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1991827456
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.884005 +/- 0.00286426 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.884005 @ 95%CL (1 toyMC)
median expected limit: r < 0.884005 @ 95%CL (1 toyMC)
   68% expected band : 0.884005 < r < 0.884005
   95% expected band : 0.884005 < r < 0.884005
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2113136264
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.814413 +/- 0.00337603 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.814413 @ 95%CL (1 toyMC)
median expected limit: r < 0.814413 @ 95%CL (1 toyMC)
   68% expected band : 0.814413 < r < 0.814413
   95% expected band : 0.814413 < r < 0.814413
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1549386392
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05671 +/- 0.00297253 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.05671 @ 95%CL (1 toyMC)
median expected limit: r < 1.05671 @ 95%CL (1 toyMC)
   68% expected band : 1.05671 < r < 1.05671
   95% expected band : 1.05671 < r < 1.05671
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -864427397
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20617 +/- 0.00319477 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.20617 @ 95%CL (1 toyMC)
median expected limit: r < 1.20617 @ 95%CL (1 toyMC)
   68% expected band : 1.20617 < r < 1.20617
   95% expected band : 1.20617 < r < 1.20617
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1772875709
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.807094 +/- 0.00315824 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.807094 @ 95%CL (1 toyMC)
median expected limit: r < 0.807094 @ 95%CL (1 toyMC)
   68% expected band : 0.807094 < r < 0.807094
   95% expected band : 0.807094 < r < 0.807094
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -270163011
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.608567 +/- 0.00329579 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.608567 @ 95%CL (1 toyMC)
median expected limit: r < 0.608567 @ 95%CL (1 toyMC)
   68% expected band : 0.608567 < r < 0.608567
   95% expected band : 0.608567 < r < 0.608567
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1160815337
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.08228 +/- 0.00349354 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.08228 @ 95%CL (1 toyMC)
median expected limit: r < 1.08228 @ 95%CL (1 toyMC)
   68% expected band : 1.08228 < r < 1.08228
   95% expected band : 1.08228 < r < 1.08228
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -661060495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.04289 +/- 0.0029939 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.04289 @ 95%CL (1 toyMC)
median expected limit: r < 1.04289 @ 95%CL (1 toyMC)
   68% expected band : 1.04289 < r < 1.04289
   95% expected band : 1.04289 < r < 1.04289
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1759453811
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.73704 +/- 0.00351827 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.73704 @ 95%CL (1 toyMC)
median expected limit: r < 0.73704 @ 95%CL (1 toyMC)
   68% expected band : 0.73704 < r < 0.73704
   95% expected band : 0.73704 < r < 0.73704
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 343510637
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.440969 +/- 0.0023843 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.440969 @ 95%CL (1 toyMC)
median expected limit: r < 0.440969 @ 95%CL (1 toyMC)
   68% expected band : 0.440969 < r < 0.440969
   95% expected band : 0.440969 < r < 0.440969
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1290529114
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09362 +/- 0.00421836 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.09362 @ 95%CL (1 toyMC)
median expected limit: r < 1.09362 @ 95%CL (1 toyMC)
   68% expected band : 1.09362 < r < 1.09362
   95% expected band : 1.09362 < r < 1.09362
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 40120609
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38591 +/- 0.00393822 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.38591 @ 95%CL (1 toyMC)
median expected limit: r < 1.38591 @ 95%CL (1 toyMC)
   68% expected band : 1.38591 < r < 1.38591
   95% expected band : 1.38591 < r < 1.38591
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 170892059
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.826238 +/- 0.0036508 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.826238 @ 95%CL (1 toyMC)
median expected limit: r < 0.826238 @ 95%CL (1 toyMC)
   68% expected band : 0.826238 < r < 0.826238
   95% expected band : 0.826238 < r < 0.826238
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1861770952
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.507533 +/- 0.00305472 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.507533 @ 95%CL (1 toyMC)
median expected limit: r < 0.507533 @ 95%CL (1 toyMC)
   68% expected band : 0.507533 < r < 0.507533
   95% expected band : 0.507533 < r < 0.507533
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 301343384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31486 +/- 0.00268057 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.31486 @ 95%CL (1 toyMC)
median expected limit: r < 1.31486 @ 95%CL (1 toyMC)
   68% expected band : 1.31486 < r < 1.31486
   95% expected band : 1.31486 < r < 1.31486
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -623083317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23083 +/- 0.00268359 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.23083 @ 95%CL (1 toyMC)
median expected limit: r < 1.23083 @ 95%CL (1 toyMC)
   68% expected band : 1.23083 < r < 1.23083
   95% expected band : 1.23083 < r < 1.23083
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2020891103
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.60767 +/- 0.0028675 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.60767 @ 95%CL (1 toyMC)
median expected limit: r < 0.60767 @ 95%CL (1 toyMC)
   68% expected band : 0.60767 < r < 0.60767
   95% expected band : 0.60767 < r < 0.60767
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1879277667
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64798 +/- 0.00479075 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.64798 @ 95%CL (1 toyMC)
median expected limit: r < 1.64798 @ 95%CL (1 toyMC)
   68% expected band : 1.64798 < r < 1.64798
   95% expected band : 1.64798 < r < 1.64798
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1295564737
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.59856 +/- 0.00349264 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.59856 @ 95%CL (1 toyMC)
median expected limit: r < 1.59856 @ 95%CL (1 toyMC)
   68% expected band : 1.59856 < r < 1.59856
   95% expected band : 1.59856 < r < 1.59856
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 155783679
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.22848 +/- 0.00311219 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.22848 @ 95%CL (1 toyMC)
median expected limit: r < 1.22848 @ 95%CL (1 toyMC)
   68% expected band : 1.22848 < r < 1.22848
   95% expected band : 1.22848 < r < 1.22848
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -415032996
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.892548 +/- 0.00228008 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.892548 @ 95%CL (1 toyMC)
median expected limit: r < 0.892548 @ 95%CL (1 toyMC)
   68% expected band : 0.892548 < r < 0.892548
   95% expected band : 0.892548 < r < 0.892548
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -720443306
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.814832 +/- 0.00352557 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.814832 @ 95%CL (1 toyMC)
median expected limit: r < 0.814832 @ 95%CL (1 toyMC)
   68% expected band : 0.814832 < r < 0.814832
   95% expected band : 0.814832 < r < 0.814832
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1931798748
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.79108 +/- 0.00335515 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.79108 @ 95%CL (1 toyMC)
median expected limit: r < 0.79108 @ 95%CL (1 toyMC)
   68% expected band : 0.79108 < r < 0.79108
   95% expected band : 0.79108 < r < 0.79108
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 585577658
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15782 +/- 0.00381065 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.15782 @ 95%CL (1 toyMC)
median expected limit: r < 1.15782 @ 95%CL (1 toyMC)
   68% expected band : 1.15782 < r < 1.15782
   95% expected band : 1.15782 < r < 1.15782
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1934174672
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76049 +/- 0.00407348 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.76049 @ 95%CL (1 toyMC)
median expected limit: r < 1.76049 @ 95%CL (1 toyMC)
   68% expected band : 1.76049 < r < 1.76049
   95% expected band : 1.76049 < r < 1.76049
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1860873654
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.599228 +/- 0.00296644 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.599228 @ 95%CL (1 toyMC)
median expected limit: r < 0.599228 @ 95%CL (1 toyMC)
   68% expected band : 0.599228 < r < 0.599228
   95% expected band : 0.599228 < r < 0.599228
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -915173160
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09493 +/- 0.0030443 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.09493 @ 95%CL (1 toyMC)
median expected limit: r < 1.09493 @ 95%CL (1 toyMC)
   68% expected band : 1.09493 < r < 1.09493
   95% expected band : 1.09493 < r < 1.09493
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 440979399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.878123 +/- 0.00280882 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 0.878123 @ 95%CL (1 toyMC)
median expected limit: r < 0.878123 @ 95%CL (1 toyMC)
   68% expected band : 0.878123 < r < 0.878123
   95% expected band : 0.878123 < r < 0.878123
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 837405600
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.744464 +/- 0.00285269 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.744464 @ 95%CL (1 toyMC)
median expected limit: r < 0.744464 @ 95%CL (1 toyMC)
   68% expected band : 0.744464 < r < 0.744464
   95% expected band : 0.744464 < r < 0.744464
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -83730706
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52 +/- 0.0026472 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.52 @ 95%CL (1 toyMC)
median expected limit: r < 1.52 @ 95%CL (1 toyMC)
   68% expected band : 1.52 < r < 1.52
   95% expected band : 1.52 < r < 1.52
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 860572779
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.900471 +/- 0.00344519 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.900471 @ 95%CL (1 toyMC)
median expected limit: r < 0.900471 @ 95%CL (1 toyMC)
   68% expected band : 0.900471 < r < 0.900471
   95% expected band : 0.900471 < r < 0.900471
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 531772980
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.038 +/- 0.00323845 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.038 @ 95%CL (1 toyMC)
median expected limit: r < 1.038 @ 95%CL (1 toyMC)
   68% expected band : 1.038 < r < 1.038
   95% expected band : 1.038 < r < 1.038
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -477532766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.72074 +/- 0.00281693 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.72074 @ 95%CL (1 toyMC)
median expected limit: r < 0.72074 @ 95%CL (1 toyMC)
   68% expected band : 0.72074 < r < 0.72074
   95% expected band : 0.72074 < r < 0.72074
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -716631528
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.21909 +/- 0.00360296 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.21909 @ 95%CL (1 toyMC)
median expected limit: r < 1.21909 @ 95%CL (1 toyMC)
   68% expected band : 1.21909 < r < 1.21909
   95% expected band : 1.21909 < r < 1.21909
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1790975399
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.936437 +/- 0.00251416 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.936437 @ 95%CL (1 toyMC)
median expected limit: r < 0.936437 @ 95%CL (1 toyMC)
   68% expected band : 0.936437 < r < 0.936437
   95% expected band : 0.936437 < r < 0.936437
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1707551045
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.2495 +/- 0.00330404 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.2495 @ 95%CL (1 toyMC)
median expected limit: r < 1.2495 @ 95%CL (1 toyMC)
   68% expected band : 1.2495 < r < 1.2495
   95% expected band : 1.2495 < r < 1.2495
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1991120699
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.889584 +/- 0.00358072 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.889584 @ 95%CL (1 toyMC)
median expected limit: r < 0.889584 @ 95%CL (1 toyMC)
   68% expected band : 0.889584 < r < 0.889584
   95% expected band : 0.889584 < r < 0.889584
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 329444227
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49684 +/- 0.00306035 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.49684 @ 95%CL (1 toyMC)
median expected limit: r < 1.49684 @ 95%CL (1 toyMC)
   68% expected band : 1.49684 < r < 1.49684
   95% expected band : 1.49684 < r < 1.49684
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1432209865
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00427 +/- 0.00305414 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.00427 @ 95%CL (1 toyMC)
median expected limit: r < 1.00427 @ 95%CL (1 toyMC)
   68% expected band : 1.00427 < r < 1.00427
   95% expected band : 1.00427 < r < 1.00427
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -618994460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.758186 +/- 0.00260635 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.758186 @ 95%CL (1 toyMC)
median expected limit: r < 0.758186 @ 95%CL (1 toyMC)
   68% expected band : 0.758186 < r < 0.758186
   95% expected band : 0.758186 < r < 0.758186
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -669006911
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.759351 +/- 0.00283907 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.759351 @ 95%CL (1 toyMC)
median expected limit: r < 0.759351 @ 95%CL (1 toyMC)
   68% expected band : 0.759351 < r < 0.759351
   95% expected band : 0.759351 < r < 0.759351
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2123587597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09414 +/- 0.00452401 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.09414 @ 95%CL (1 toyMC)
median expected limit: r < 1.09414 @ 95%CL (1 toyMC)
   68% expected band : 1.09414 < r < 1.09414
   95% expected band : 1.09414 < r < 1.09414
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1969848879
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.35912 +/- 0.00396625 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.35912 @ 95%CL (1 toyMC)
median expected limit: r < 1.35912 @ 95%CL (1 toyMC)
   68% expected band : 1.35912 < r < 1.35912
   95% expected band : 1.35912 < r < 1.35912
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 41591753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.701953 +/- 0.00328446 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.701953 @ 95%CL (1 toyMC)
median expected limit: r < 0.701953 @ 95%CL (1 toyMC)
   68% expected band : 0.701953 < r < 0.701953
   95% expected band : 0.701953 < r < 0.701953
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1170125641
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.700871 +/- 0.00388029 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.700871 @ 95%CL (1 toyMC)
median expected limit: r < 0.700871 @ 95%CL (1 toyMC)
   68% expected band : 0.700871 < r < 0.700871
   95% expected band : 0.700871 < r < 0.700871
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1478359274
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.587738 +/- 0.00247986 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.587738 @ 95%CL (1 toyMC)
median expected limit: r < 0.587738 @ 95%CL (1 toyMC)
   68% expected band : 0.587738 < r < 0.587738
   95% expected band : 0.587738 < r < 0.587738
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -472329698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13294 +/- 0.00385011 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.13294 @ 95%CL (1 toyMC)
median expected limit: r < 1.13294 @ 95%CL (1 toyMC)
   68% expected band : 1.13294 < r < 1.13294
   95% expected band : 1.13294 < r < 1.13294
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 124992285
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.849284 +/- 0.00326051 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.849284 @ 95%CL (1 toyMC)
median expected limit: r < 0.849284 @ 95%CL (1 toyMC)
   68% expected band : 0.849284 < r < 0.849284
   95% expected band : 0.849284 < r < 0.849284
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -994869649
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.12558 +/- 0.00329735 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.12558 @ 95%CL (1 toyMC)
median expected limit: r < 2.12558 @ 95%CL (1 toyMC)
   68% expected band : 2.12558 < r < 2.12558
   95% expected band : 2.12558 < r < 2.12558
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1565943708
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.580528 +/- 0.00356659 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.580528 @ 95%CL (1 toyMC)
median expected limit: r < 0.580528 @ 95%CL (1 toyMC)
   68% expected band : 0.580528 < r < 0.580528
   95% expected band : 0.580528 < r < 0.580528
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 821184005
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.683004 +/- 0.00335073 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.683004 @ 95%CL (1 toyMC)
median expected limit: r < 0.683004 @ 95%CL (1 toyMC)
   68% expected band : 0.683004 < r < 0.683004
   95% expected band : 0.683004 < r < 0.683004
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -296739894
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03951 +/- 0.00274685 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.03951 @ 95%CL (1 toyMC)
median expected limit: r < 1.03951 @ 95%CL (1 toyMC)
   68% expected band : 1.03951 < r < 1.03951
   95% expected band : 1.03951 < r < 1.03951
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 995053295
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.953469 +/- 0.00304105 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.953469 @ 95%CL (1 toyMC)
median expected limit: r < 0.953469 @ 95%CL (1 toyMC)
   68% expected band : 0.953469 < r < 0.953469
   95% expected band : 0.953469 < r < 0.953469
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1841028844
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39956 +/- 0.0040447 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.39956 @ 95%CL (1 toyMC)
median expected limit: r < 1.39956 @ 95%CL (1 toyMC)
   68% expected band : 1.39956 < r < 1.39956
   95% expected band : 1.39956 < r < 1.39956
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1150219206
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.788973 +/- 0.00399955 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.788973 @ 95%CL (1 toyMC)
median expected limit: r < 0.788973 @ 95%CL (1 toyMC)
   68% expected band : 0.788973 < r < 0.788973
   95% expected band : 0.788973 < r < 0.788973
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 273992179
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.924807 +/- 0.00354891 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.924807 @ 95%CL (1 toyMC)
median expected limit: r < 0.924807 @ 95%CL (1 toyMC)
   68% expected band : 0.924807 < r < 0.924807
   95% expected band : 0.924807 < r < 0.924807
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1265465568
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81126 +/- 0.0039688 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.81126 @ 95%CL (1 toyMC)
median expected limit: r < 1.81126 @ 95%CL (1 toyMC)
   68% expected band : 1.81126 < r < 1.81126
   95% expected band : 1.81126 < r < 1.81126
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1020318287
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.761865 +/- 0.00340593 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.761865 @ 95%CL (1 toyMC)
median expected limit: r < 0.761865 @ 95%CL (1 toyMC)
   68% expected band : 0.761865 < r < 0.761865
   95% expected band : 0.761865 < r < 0.761865
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1996854388
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.724402 +/- 0.00332459 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.724402 @ 95%CL (1 toyMC)
median expected limit: r < 0.724402 @ 95%CL (1 toyMC)
   68% expected band : 0.724402 < r < 0.724402
   95% expected band : 0.724402 < r < 0.724402
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -605378384
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.691977 +/- 0.00357172 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.691977 @ 95%CL (1 toyMC)
median expected limit: r < 0.691977 @ 95%CL (1 toyMC)
   68% expected band : 0.691977 < r < 0.691977
   95% expected band : 0.691977 < r < 0.691977
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine28.MarkovChainMC.mH28.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH28.-1020318287.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH28.-1059157323.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH28.-1113282148.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH28.-114809981.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH28.-1149062968.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH28.-1150219206.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH28.-1160815337.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH28.-1170125641.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH28.-1268738004.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH28.-1286485327.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH28.-1290529114.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH28.-1295564737.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH28.-1635033410.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH28.-175142396.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH28.-1759453811.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH28.-1770363176.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH28.-1829553998.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH28.-1841028844.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH28.-1862000304.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH28.-1906688775.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH28.-1962233879.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH28.-1991827456.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH28.-2123587597.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH28.-2129961783.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH28.-270163011.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH28.-296739894.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH28.-415032996.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH28.-421037326.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH28.-440389982.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH28.-472329698.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH28.-477532766.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH28.-504404817.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH28.-538470902.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH28.-542709019.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH28.-605378384.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH28.-618994460.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH28.-623083317.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH28.-628598088.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH28.-661060495.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH28.-669006911.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH28.-716631528.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH28.-720443306.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH28.-83730706.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH28.-847936068.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH28.-864427397.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH28.-889257546.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH28.-913258408.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH28.-915173160.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH28.-981313171.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH28.-994869649.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH28.1228665565.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH28.124992285.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH28.1265465568.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH28.1418283302.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH28.1432209865.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH28.1469360517.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH28.1477094346.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH28.147800686.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH28.1478359274.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH28.1549386392.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH28.155783679.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH28.1565943708.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH28.1662230426.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH28.1707551045.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH28.170892059.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH28.1772875709.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH28.1790975399.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH28.1860873654.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH28.1861770952.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH28.1879277667.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH28.1931798748.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH28.1934174672.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH28.1958786167.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH28.1969848879.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH28.1991120699.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH28.1996854388.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH28.2020891103.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH28.2038386916.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH28.2113136264.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH28.273992179.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH28.289872632.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH28.301343384.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH28.329444227.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH28.343510637.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH28.40120609.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH28.41591753.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH28.440979399.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH28.508515509.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH28.531772980.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH28.564053507.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH28.576613818.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH28.585577658.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH28.614393526.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH28.617388188.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH28.681365777.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH28.821184005.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH28.837405600.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH28.860572779.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH28.896599124.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH28.995053295.root
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/
hadd Target path: higgsCombine28.MarkovChainMC.mH28.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -591029765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.16423 +/- 0.00357702 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.16423 @ 95%CL (1 toyMC)
median expected limit: r < 2.16423 @ 95%CL (1 toyMC)
   68% expected band : 2.16423 < r < 2.16423
   95% expected band : 2.16423 < r < 2.16423
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1010485373
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01772 +/- 0.00372266 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.01772 @ 95%CL (1 toyMC)
median expected limit: r < 1.01772 @ 95%CL (1 toyMC)
   68% expected band : 1.01772 < r < 1.01772
   95% expected band : 1.01772 < r < 1.01772
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1502550890
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84473 +/- 0.00419823 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.84473 @ 95%CL (1 toyMC)
median expected limit: r < 1.84473 @ 95%CL (1 toyMC)
   68% expected band : 1.84473 < r < 1.84473
   95% expected band : 1.84473 < r < 1.84473
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2088816657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.02008 +/- 0.00406345 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.02008 @ 95%CL (1 toyMC)
median expected limit: r < 2.02008 @ 95%CL (1 toyMC)
   68% expected band : 2.02008 < r < 2.02008
   95% expected band : 2.02008 < r < 2.02008
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -751574169
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61287 +/- 0.00367552 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.61287 @ 95%CL (1 toyMC)
median expected limit: r < 1.61287 @ 95%CL (1 toyMC)
   68% expected band : 1.61287 < r < 1.61287
   95% expected band : 1.61287 < r < 1.61287
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1720768316
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.6214 +/- 0.00387248 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.6214 @ 95%CL (1 toyMC)
median expected limit: r < 1.6214 @ 95%CL (1 toyMC)
   68% expected band : 1.6214 < r < 1.6214
   95% expected band : 1.6214 < r < 1.6214
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1891106238
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.949229 +/- 0.00454431 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.949229 @ 95%CL (1 toyMC)
median expected limit: r < 0.949229 @ 95%CL (1 toyMC)
   68% expected band : 0.949229 < r < 0.949229
   95% expected band : 0.949229 < r < 0.949229
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 480375765
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.593001 +/- 0.00363444 @ 95% CL (100 tries)
Done in 0.38 min (cpu), 0.38 min (real)
mean   expected limit: r < 0.593001 @ 95%CL (1 toyMC)
median expected limit: r < 0.593001 @ 95%CL (1 toyMC)
   68% expected band : 0.593001 < r < 0.593001
   95% expected band : 0.593001 < r < 0.593001
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -827499761
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.717135 +/- 0.00305897 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.717135 @ 95%CL (1 toyMC)
median expected limit: r < 0.717135 @ 95%CL (1 toyMC)
   68% expected band : 0.717135 < r < 0.717135
   95% expected band : 0.717135 < r < 0.717135
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -425399462
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.46594 +/- 0.00315276 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.46594 @ 95%CL (1 toyMC)
median expected limit: r < 1.46594 @ 95%CL (1 toyMC)
   68% expected band : 1.46594 < r < 1.46594
   95% expected band : 1.46594 < r < 1.46594
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2035374532
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.03722 +/- 0.00404373 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.03722 @ 95%CL (1 toyMC)
median expected limit: r < 2.03722 @ 95%CL (1 toyMC)
   68% expected band : 2.03722 < r < 2.03722
   95% expected band : 2.03722 < r < 2.03722
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1869509695
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.66006 +/- 0.00391761 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.66006 @ 95%CL (1 toyMC)
median expected limit: r < 1.66006 @ 95%CL (1 toyMC)
   68% expected band : 1.66006 < r < 1.66006
   95% expected band : 1.66006 < r < 1.66006
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -775364360
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.05345 +/- 0.00381336 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.05345 @ 95%CL (1 toyMC)
median expected limit: r < 2.05345 @ 95%CL (1 toyMC)
   68% expected band : 2.05345 < r < 2.05345
   95% expected band : 2.05345 < r < 2.05345
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 478610798
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.8968 +/- 0.00321915 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.8968 @ 95%CL (1 toyMC)
median expected limit: r < 0.8968 @ 95%CL (1 toyMC)
   68% expected band : 0.8968 < r < 0.8968
   95% expected band : 0.8968 < r < 0.8968
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -982872753
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32697 +/- 0.00450289 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.32697 @ 95%CL (1 toyMC)
median expected limit: r < 2.32697 @ 95%CL (1 toyMC)
   68% expected band : 2.32697 < r < 2.32697
   95% expected band : 2.32697 < r < 2.32697
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1819608873
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01906 +/- 0.00364721 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.01906 @ 95%CL (1 toyMC)
median expected limit: r < 1.01906 @ 95%CL (1 toyMC)
   68% expected band : 1.01906 < r < 1.01906
   95% expected band : 1.01906 < r < 1.01906
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 289319426
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57345 +/- 0.00433494 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.57345 @ 95%CL (1 toyMC)
median expected limit: r < 1.57345 @ 95%CL (1 toyMC)
   68% expected band : 1.57345 < r < 1.57345
   95% expected band : 1.57345 < r < 1.57345
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 273574719
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.94053 +/- 0.0042231 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.94053 @ 95%CL (1 toyMC)
median expected limit: r < 1.94053 @ 95%CL (1 toyMC)
   68% expected band : 1.94053 < r < 1.94053
   95% expected band : 1.94053 < r < 1.94053
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 868791438
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.894578 +/- 0.00376956 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.894578 @ 95%CL (1 toyMC)
median expected limit: r < 0.894578 @ 95%CL (1 toyMC)
   68% expected band : 0.894578 < r < 0.894578
   95% expected band : 0.894578 < r < 0.894578
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1364040409
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45061 +/- 0.00421965 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 1.45061 @ 95%CL (1 toyMC)
median expected limit: r < 1.45061 @ 95%CL (1 toyMC)
   68% expected band : 1.45061 < r < 1.45061
   95% expected band : 1.45061 < r < 1.45061
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1821166076
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.796169 +/- 0.00282744 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.796169 @ 95%CL (1 toyMC)
median expected limit: r < 0.796169 @ 95%CL (1 toyMC)
   68% expected band : 0.796169 < r < 0.796169
   95% expected band : 0.796169 < r < 0.796169
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1444237396
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.52555 +/- 0.00339228 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.52555 @ 95%CL (1 toyMC)
median expected limit: r < 1.52555 @ 95%CL (1 toyMC)
   68% expected band : 1.52555 < r < 1.52555
   95% expected band : 1.52555 < r < 1.52555
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1426595356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.10034 +/- 0.00310619 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.10034 @ 95%CL (1 toyMC)
median expected limit: r < 1.10034 @ 95%CL (1 toyMC)
   68% expected band : 1.10034 < r < 1.10034
   95% expected band : 1.10034 < r < 1.10034
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1791506813
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20094 +/- 0.00453995 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.20094 @ 95%CL (1 toyMC)
median expected limit: r < 1.20094 @ 95%CL (1 toyMC)
   68% expected band : 1.20094 < r < 1.20094
   95% expected band : 1.20094 < r < 1.20094
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1174963796
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.960952 +/- 0.00347055 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.960952 @ 95%CL (1 toyMC)
median expected limit: r < 0.960952 @ 95%CL (1 toyMC)
   68% expected band : 0.960952 < r < 0.960952
   95% expected band : 0.960952 < r < 0.960952
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 897065172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.13288 +/- 0.00392635 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.13288 @ 95%CL (1 toyMC)
median expected limit: r < 1.13288 @ 95%CL (1 toyMC)
   68% expected band : 1.13288 < r < 1.13288
   95% expected band : 1.13288 < r < 1.13288
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -324976711
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.5445 +/- 0.00345927 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.5445 @ 95%CL (1 toyMC)
median expected limit: r < 1.5445 @ 95%CL (1 toyMC)
   68% expected band : 1.5445 < r < 1.5445
   95% expected band : 1.5445 < r < 1.5445
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1259518002
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.817325 +/- 0.00356304 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.817325 @ 95%CL (1 toyMC)
median expected limit: r < 0.817325 @ 95%CL (1 toyMC)
   68% expected band : 0.817325 < r < 0.817325
   95% expected band : 0.817325 < r < 0.817325
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1335828826
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.01402 +/- 0.00376566 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.01402 @ 95%CL (1 toyMC)
median expected limit: r < 1.01402 @ 95%CL (1 toyMC)
   68% expected band : 1.01402 < r < 1.01402
   95% expected band : 1.01402 < r < 1.01402
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 251059260
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.53527 +/- 0.00410127 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.53527 @ 95%CL (1 toyMC)
median expected limit: r < 1.53527 @ 95%CL (1 toyMC)
   68% expected band : 1.53527 < r < 1.53527
   95% expected band : 1.53527 < r < 1.53527
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1636532644
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32069 +/- 0.00356703 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.32069 @ 95%CL (1 toyMC)
median expected limit: r < 2.32069 @ 95%CL (1 toyMC)
   68% expected band : 2.32069 < r < 2.32069
   95% expected band : 2.32069 < r < 2.32069
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2119709578
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49433 +/- 0.00420072 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.49433 @ 95%CL (1 toyMC)
median expected limit: r < 1.49433 @ 95%CL (1 toyMC)
   68% expected band : 1.49433 < r < 1.49433
   95% expected band : 1.49433 < r < 1.49433
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1016049476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.31695 +/- 0.00370194 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.31695 @ 95%CL (1 toyMC)
median expected limit: r < 1.31695 @ 95%CL (1 toyMC)
   68% expected band : 1.31695 < r < 1.31695
   95% expected band : 1.31695 < r < 1.31695
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2115720457
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.74483 +/- 0.0037096 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.74483 @ 95%CL (1 toyMC)
median expected limit: r < 1.74483 @ 95%CL (1 toyMC)
   68% expected band : 1.74483 < r < 1.74483
   95% expected band : 1.74483 < r < 1.74483
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1401958910
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.45472 +/- 0.00389997 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.45472 @ 95%CL (1 toyMC)
median expected limit: r < 1.45472 @ 95%CL (1 toyMC)
   68% expected band : 1.45472 < r < 1.45472
   95% expected band : 1.45472 < r < 1.45472
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1971374923
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20237 +/- 0.00378974 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.20237 @ 95%CL (1 toyMC)
median expected limit: r < 1.20237 @ 95%CL (1 toyMC)
   68% expected band : 1.20237 < r < 1.20237
   95% expected band : 1.20237 < r < 1.20237
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1386097370
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.605328 +/- 0.00311729 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.605328 @ 95%CL (1 toyMC)
median expected limit: r < 0.605328 @ 95%CL (1 toyMC)
   68% expected band : 0.605328 < r < 0.605328
   95% expected band : 0.605328 < r < 0.605328
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 46703849
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.25267 +/- 0.00427967 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.25267 @ 95%CL (1 toyMC)
median expected limit: r < 1.25267 @ 95%CL (1 toyMC)
   68% expected band : 1.25267 < r < 1.25267
   95% expected band : 1.25267 < r < 1.25267
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 688363079
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.38578 +/- 0.00415205 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.38578 @ 95%CL (1 toyMC)
median expected limit: r < 2.38578 @ 95%CL (1 toyMC)
   68% expected band : 2.38578 < r < 2.38578
   95% expected band : 2.38578 < r < 2.38578
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1738179726
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.00609 +/- 0.00437235 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.00609 @ 95%CL (1 toyMC)
median expected limit: r < 1.00609 @ 95%CL (1 toyMC)
   68% expected band : 1.00609 < r < 1.00609
   95% expected band : 1.00609 < r < 1.00609
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -346953293
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.881348 +/- 0.00314061 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.881348 @ 95%CL (1 toyMC)
median expected limit: r < 0.881348 @ 95%CL (1 toyMC)
   68% expected band : 0.881348 < r < 0.881348
   95% expected band : 0.881348 < r < 0.881348
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2069043677
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.61295 +/- 0.0037357 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.61295 @ 95%CL (1 toyMC)
median expected limit: r < 1.61295 @ 95%CL (1 toyMC)
   68% expected band : 1.61295 < r < 1.61295
   95% expected band : 1.61295 < r < 1.61295
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -117783613
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.38185 +/- 0.00338773 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.38185 @ 95%CL (1 toyMC)
median expected limit: r < 1.38185 @ 95%CL (1 toyMC)
   68% expected band : 1.38185 < r < 1.38185
   95% expected band : 1.38185 < r < 1.38185
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1011965595
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26828 +/- 0.00391605 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.26828 @ 95%CL (1 toyMC)
median expected limit: r < 1.26828 @ 95%CL (1 toyMC)
   68% expected band : 1.26828 < r < 1.26828
   95% expected band : 1.26828 < r < 1.26828
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1808911436
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.63371 +/- 0.00397092 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.63371 @ 95%CL (1 toyMC)
median expected limit: r < 1.63371 @ 95%CL (1 toyMC)
   68% expected band : 1.63371 < r < 1.63371
   95% expected band : 1.63371 < r < 1.63371
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 493459822
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.775976 +/- 0.00353069 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.775976 @ 95%CL (1 toyMC)
median expected limit: r < 0.775976 @ 95%CL (1 toyMC)
   68% expected band : 0.775976 < r < 0.775976
   95% expected band : 0.775976 < r < 0.775976
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -122126991
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.780945 +/- 0.00235276 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.780945 @ 95%CL (1 toyMC)
median expected limit: r < 0.780945 @ 95%CL (1 toyMC)
   68% expected band : 0.780945 < r < 0.780945
   95% expected band : 0.780945 < r < 0.780945
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -466391361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23636 +/- 0.00344094 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.23636 @ 95%CL (1 toyMC)
median expected limit: r < 1.23636 @ 95%CL (1 toyMC)
   68% expected band : 1.23636 < r < 1.23636
   95% expected band : 1.23636 < r < 1.23636
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 149951323
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.78683 +/- 0.00380706 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.78683 @ 95%CL (1 toyMC)
median expected limit: r < 1.78683 @ 95%CL (1 toyMC)
   68% expected band : 1.78683 < r < 1.78683
   95% expected band : 1.78683 < r < 1.78683
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1533079341
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.18132 +/- 0.00339799 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.18132 @ 95%CL (1 toyMC)
median expected limit: r < 1.18132 @ 95%CL (1 toyMC)
   68% expected band : 1.18132 < r < 1.18132
   95% expected band : 1.18132 < r < 1.18132
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1999833433
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.861706 +/- 0.00344988 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.861706 @ 95%CL (1 toyMC)
median expected limit: r < 0.861706 @ 95%CL (1 toyMC)
   68% expected band : 0.861706 < r < 0.861706
   95% expected band : 0.861706 < r < 0.861706
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1879086406
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.41729 +/- 0.00342878 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.41729 @ 95%CL (1 toyMC)
median expected limit: r < 1.41729 @ 95%CL (1 toyMC)
   68% expected band : 1.41729 < r < 1.41729
   95% expected band : 1.41729 < r < 1.41729
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 197354116
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.70597 +/- 0.00300971 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.70597 @ 95%CL (1 toyMC)
median expected limit: r < 1.70597 @ 95%CL (1 toyMC)
   68% expected band : 1.70597 < r < 1.70597
   95% expected band : 1.70597 < r < 1.70597
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -180569510
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.678221 +/- 0.00288863 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.678221 @ 95%CL (1 toyMC)
median expected limit: r < 0.678221 @ 95%CL (1 toyMC)
   68% expected band : 0.678221 < r < 0.678221
   95% expected band : 0.678221 < r < 0.678221
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1441946204
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.32804 +/- 0.00319642 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.32804 @ 95%CL (1 toyMC)
median expected limit: r < 1.32804 @ 95%CL (1 toyMC)
   68% expected band : 1.32804 < r < 1.32804
   95% expected band : 1.32804 < r < 1.32804
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1895428596
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.46271 +/- 0.00482264 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.46271 @ 95%CL (1 toyMC)
median expected limit: r < 2.46271 @ 95%CL (1 toyMC)
   68% expected band : 2.46271 < r < 2.46271
   95% expected band : 2.46271 < r < 2.46271
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2103247251
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.15061 +/- 0.00307058 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.15061 @ 95%CL (1 toyMC)
median expected limit: r < 1.15061 @ 95%CL (1 toyMC)
   68% expected band : 1.15061 < r < 1.15061
   95% expected band : 1.15061 < r < 1.15061
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 219611353
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.53067 +/- 0.00432009 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.53067 @ 95%CL (1 toyMC)
median expected limit: r < 2.53067 @ 95%CL (1 toyMC)
   68% expected band : 2.53067 < r < 2.53067
   95% expected band : 2.53067 < r < 2.53067
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 544916230
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.37654 +/- 0.00373329 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.37654 @ 95%CL (1 toyMC)
median expected limit: r < 1.37654 @ 95%CL (1 toyMC)
   68% expected band : 1.37654 < r < 1.37654
   95% expected band : 1.37654 < r < 1.37654
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2064023473
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.49875 +/- 0.00430873 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.49875 @ 95%CL (1 toyMC)
median expected limit: r < 1.49875 @ 95%CL (1 toyMC)
   68% expected band : 1.49875 < r < 1.49875
   95% expected band : 1.49875 < r < 1.49875
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -181612989
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32775 +/- 0.00496507 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.32775 @ 95%CL (1 toyMC)
median expected limit: r < 2.32775 @ 95%CL (1 toyMC)
   68% expected band : 2.32775 < r < 2.32775
   95% expected band : 2.32775 < r < 2.32775
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1502848989
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.970258 +/- 0.0036742 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.970258 @ 95%CL (1 toyMC)
median expected limit: r < 0.970258 @ 95%CL (1 toyMC)
   68% expected band : 0.970258 < r < 0.970258
   95% expected band : 0.970258 < r < 0.970258
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1233298252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.993187 +/- 0.00357425 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.993187 @ 95%CL (1 toyMC)
median expected limit: r < 0.993187 @ 95%CL (1 toyMC)
   68% expected band : 0.993187 < r < 0.993187
   95% expected band : 0.993187 < r < 0.993187
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1448389790
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.05668 +/- 0.00350529 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.05668 @ 95%CL (1 toyMC)
median expected limit: r < 1.05668 @ 95%CL (1 toyMC)
   68% expected band : 1.05668 < r < 1.05668
   95% expected band : 1.05668 < r < 1.05668
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -236748022
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.07544 +/- 0.00355754 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.07544 @ 95%CL (1 toyMC)
median expected limit: r < 1.07544 @ 95%CL (1 toyMC)
   68% expected band : 1.07544 < r < 1.07544
   95% expected band : 1.07544 < r < 1.07544
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1702963167
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.62106 +/- 0.00313637 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.62106 @ 95%CL (1 toyMC)
median expected limit: r < 1.62106 @ 95%CL (1 toyMC)
   68% expected band : 1.62106 < r < 1.62106
   95% expected band : 1.62106 < r < 1.62106
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1583383800
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.721 +/- 0.00520092 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.721 @ 95%CL (1 toyMC)
median expected limit: r < 1.721 @ 95%CL (1 toyMC)
   68% expected band : 1.721 < r < 1.721
   95% expected band : 1.721 < r < 1.721
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -305898315
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.63956 +/- 0.00412745 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.63956 @ 95%CL (1 toyMC)
median expected limit: r < 2.63956 @ 95%CL (1 toyMC)
   68% expected band : 2.63956 < r < 2.63956
   95% expected band : 2.63956 < r < 2.63956
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1035192032
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.44265 +/- 0.00348591 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.44265 @ 95%CL (1 toyMC)
median expected limit: r < 1.44265 @ 95%CL (1 toyMC)
   68% expected band : 1.44265 < r < 1.44265
   95% expected band : 1.44265 < r < 1.44265
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1209199874
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.898305 +/- 0.00355106 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.898305 @ 95%CL (1 toyMC)
median expected limit: r < 0.898305 @ 95%CL (1 toyMC)
   68% expected band : 0.898305 < r < 0.898305
   95% expected band : 0.898305 < r < 0.898305
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1656020457
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.06623 +/- 0.00349644 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.06623 @ 95%CL (1 toyMC)
median expected limit: r < 1.06623 @ 95%CL (1 toyMC)
   68% expected band : 1.06623 < r < 1.06623
   95% expected band : 1.06623 < r < 1.06623
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -185819227
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.0894 +/- 0.00353146 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.0894 @ 95%CL (1 toyMC)
median expected limit: r < 1.0894 @ 95%CL (1 toyMC)
   68% expected band : 1.0894 < r < 1.0894
   95% expected band : 1.0894 < r < 1.0894
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1779064555
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.43437 +/- 0.00481043 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.43437 @ 95%CL (1 toyMC)
median expected limit: r < 1.43437 @ 95%CL (1 toyMC)
   68% expected band : 1.43437 < r < 1.43437
   95% expected band : 1.43437 < r < 1.43437
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1103305172
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.09355 +/- 0.00362809 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.09355 @ 95%CL (1 toyMC)
median expected limit: r < 1.09355 @ 95%CL (1 toyMC)
   68% expected band : 1.09355 < r < 1.09355
   95% expected band : 1.09355 < r < 1.09355
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -807096870
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.855303 +/- 0.00321647 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.855303 @ 95%CL (1 toyMC)
median expected limit: r < 0.855303 @ 95%CL (1 toyMC)
   68% expected band : 0.855303 < r < 0.855303
   95% expected band : 0.855303 < r < 0.855303
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 860257935
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.02472 +/- 0.0040767 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 1.02472 @ 95%CL (1 toyMC)
median expected limit: r < 1.02472 @ 95%CL (1 toyMC)
   68% expected band : 1.02472 < r < 1.02472
   95% expected band : 1.02472 < r < 1.02472
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -354274845
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.39932 +/- 0.00261634 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.39932 @ 95%CL (1 toyMC)
median expected limit: r < 1.39932 @ 95%CL (1 toyMC)
   68% expected band : 1.39932 < r < 1.39932
   95% expected band : 1.39932 < r < 1.39932
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1073269619
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.26527 +/- 0.00286297 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.26527 @ 95%CL (1 toyMC)
median expected limit: r < 1.26527 @ 95%CL (1 toyMC)
   68% expected band : 1.26527 < r < 1.26527
   95% expected band : 1.26527 < r < 1.26527
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -616134357
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.1387 +/- 0.00332524 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.1387 @ 95%CL (1 toyMC)
median expected limit: r < 1.1387 @ 95%CL (1 toyMC)
   68% expected band : 1.1387 < r < 1.1387
   95% expected band : 1.1387 < r < 1.1387
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1545338227
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03979 +/- 0.00347094 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.03979 @ 95%CL (1 toyMC)
median expected limit: r < 1.03979 @ 95%CL (1 toyMC)
   68% expected band : 1.03979 < r < 1.03979
   95% expected band : 1.03979 < r < 1.03979
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2004277462
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.93079 +/- 0.00311114 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.93079 @ 95%CL (1 toyMC)
median expected limit: r < 0.93079 @ 95%CL (1 toyMC)
   68% expected band : 0.93079 < r < 0.93079
   95% expected band : 0.93079 < r < 0.93079
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1225869667
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.9624 +/- 0.00431762 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.9624 @ 95%CL (1 toyMC)
median expected limit: r < 1.9624 @ 95%CL (1 toyMC)
   68% expected band : 1.9624 < r < 1.9624
   95% expected band : 1.9624 < r < 1.9624
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2040882527
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.32138 +/- 0.00514093 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.32138 @ 95%CL (1 toyMC)
median expected limit: r < 2.32138 @ 95%CL (1 toyMC)
   68% expected band : 2.32138 < r < 2.32138
   95% expected band : 2.32138 < r < 2.32138
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -231156065
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.97256 +/- 0.00422696 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.97256 @ 95%CL (1 toyMC)
median expected limit: r < 0.97256 @ 95%CL (1 toyMC)
   68% expected band : 0.97256 < r < 0.97256
   95% expected band : 0.97256 < r < 0.97256
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 379167585
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.720674 +/- 0.00308416 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.720674 @ 95%CL (1 toyMC)
median expected limit: r < 0.720674 @ 95%CL (1 toyMC)
   68% expected band : 0.720674 < r < 0.720674
   95% expected band : 0.720674 < r < 0.720674
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 433959476
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.998765 +/- 0.00347046 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.998765 @ 95%CL (1 toyMC)
median expected limit: r < 0.998765 @ 95%CL (1 toyMC)
   68% expected band : 0.998765 < r < 0.998765
   95% expected band : 0.998765 < r < 0.998765
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 670025650
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.635968 +/- 0.00316182 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.39 min (real)
mean   expected limit: r < 0.635968 @ 95%CL (1 toyMC)
median expected limit: r < 0.635968 @ 95%CL (1 toyMC)
   68% expected band : 0.635968 < r < 0.635968
   95% expected band : 0.635968 < r < 0.635968
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -65146684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.29693 +/- 0.00411357 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.29693 @ 95%CL (1 toyMC)
median expected limit: r < 1.29693 @ 95%CL (1 toyMC)
   68% expected band : 1.29693 < r < 1.29693
   95% expected band : 1.29693 < r < 1.29693
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -252760380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.724586 +/- 0.00434325 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.724586 @ 95%CL (1 toyMC)
median expected limit: r < 0.724586 @ 95%CL (1 toyMC)
   68% expected band : 0.724586 < r < 0.724586
   95% expected band : 0.724586 < r < 0.724586
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 242730439
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.03877 +/- 0.00427291 @ 95% CL (100 tries)
Done in 0.39 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.03877 @ 95%CL (1 toyMC)
median expected limit: r < 1.03877 @ 95%CL (1 toyMC)
   68% expected band : 1.03877 < r < 1.03877
   95% expected band : 1.03877 < r < 1.03877
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1282688698
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.938259 +/- 0.0033239 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.938259 @ 95%CL (1 toyMC)
median expected limit: r < 0.938259 @ 95%CL (1 toyMC)
   68% expected band : 0.938259 < r < 0.938259
   95% expected band : 0.938259 < r < 0.938259
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 213866256
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.23723 +/- 0.00380343 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.23723 @ 95%CL (1 toyMC)
median expected limit: r < 1.23723 @ 95%CL (1 toyMC)
   68% expected band : 1.23723 < r < 1.23723
   95% expected band : 1.23723 < r < 1.23723
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1972545451
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.64894 +/- 0.0059441 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.64894 @ 95%CL (1 toyMC)
median expected limit: r < 1.64894 @ 95%CL (1 toyMC)
   68% expected band : 1.64894 < r < 1.64894
   95% expected band : 1.64894 < r < 1.64894
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1590293972
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.966444 +/- 0.00379195 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 0.966444 @ 95%CL (1 toyMC)
median expected limit: r < 0.966444 @ 95%CL (1 toyMC)
   68% expected band : 0.966444 < r < 0.966444
   95% expected band : 0.966444 < r < 0.966444
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 942336177
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.20223 +/- 0.00331796 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.20223 @ 95%CL (1 toyMC)
median expected limit: r < 1.20223 @ 95%CL (1 toyMC)
   68% expected band : 1.20223 < r < 1.20223
   95% expected band : 1.20223 < r < 1.20223
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1458083494
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.48166 +/- 0.0034633 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 1.48166 @ 95%CL (1 toyMC)
median expected limit: r < 1.48166 @ 95%CL (1 toyMC)
   68% expected band : 1.48166 < r < 1.48166
   95% expected band : 1.48166 < r < 1.48166
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1804458317
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 0.94587 +/- 0.00365201 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 0.94587 @ 95%CL (1 toyMC)
median expected limit: r < 0.94587 @ 95%CL (1 toyMC)
   68% expected band : 0.94587 < r < 0.94587
   95% expected band : 0.94587 < r < 0.94587
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1789120788
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.19807 +/- 0.0034256 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.19807 @ 95%CL (1 toyMC)
median expected limit: r < 1.19807 @ 95%CL (1 toyMC)
   68% expected band : 1.19807 < r < 1.19807
   95% expected band : 1.19807 < r < 1.19807
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -491681343
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.86772 +/- 0.00448454 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.86772 @ 95%CL (1 toyMC)
median expected limit: r < 1.86772 @ 95%CL (1 toyMC)
   68% expected band : 1.86772 < r < 1.86772
   95% expected band : 1.86772 < r < 1.86772
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1835965972
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.3087 +/- 0.00493876 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.3087 @ 95%CL (1 toyMC)
median expected limit: r < 2.3087 @ 95%CL (1 toyMC)
   68% expected band : 2.3087 < r < 2.3087
   95% expected band : 2.3087 < r < 2.3087
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine32.MarkovChainMC.mH32.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH32.-117783613.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH32.-1209199874.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH32.-122126991.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH32.-1225869667.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH32.-1233298252.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH32.-1335828826.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH32.-1364040409.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH32.-1386097370.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH32.-1441946204.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH32.-1444237396.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH32.-1458083494.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH32.-1502550890.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH32.-1502848989.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH32.-1533079341.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH32.-1636532644.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH32.-1656020457.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH32.-180569510.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH32.-181612989.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH32.-1821166076.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH32.-185819227.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH32.-1879086406.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH32.-1895428596.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH32.-1971374923.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH32.-1972545451.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH32.-1999833433.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH32.-2035374532.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH32.-2040882527.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH32.-2064023473.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH32.-2103247251.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH32.-2115720457.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH32.-2119709578.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH32.-231156065.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH32.-236748022.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH32.-252760380.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH32.-305898315.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH32.-324976711.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH32.-346953293.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH32.-354274845.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH32.-425399462.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH32.-466391361.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH32.-491681343.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH32.-591029765.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH32.-616134357.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH32.-65146684.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH32.-751574169.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH32.-775364360.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH32.-807096870.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH32.-827499761.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH32.-982872753.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH32.1010485373.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH32.1011965595.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH32.1016049476.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH32.1035192032.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH32.1073269619.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH32.1103305172.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH32.1174963796.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH32.1259518002.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH32.1282688698.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH32.1401958910.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH32.1426595356.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH32.1448389790.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH32.149951323.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH32.1545338227.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH32.1583383800.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH32.1590293972.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH32.1702963167.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH32.1720768316.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH32.1738179726.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH32.1779064555.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH32.1789120788.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH32.1791506813.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH32.1804458317.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH32.1808911436.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH32.1819608873.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH32.1835965972.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH32.1869509695.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH32.1891106238.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH32.197354116.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH32.2004277462.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH32.2069043677.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH32.2088816657.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH32.213866256.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH32.219611353.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH32.242730439.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH32.251059260.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH32.273574719.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH32.289319426.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH32.379167585.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH32.433959476.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH32.46703849.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH32.478610798.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH32.480375765.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH32.493459822.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH32.544916230.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH32.670025650.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH32.688363079.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH32.860257935.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH32.868791438.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH32.897065172.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH32.942336177.root
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/
hadd Target path: higgsCombine32.MarkovChainMC.mH32.root:/toys
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 803428797
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.27184 +/- 0.00760989 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 4.27184 @ 95%CL (1 toyMC)
median expected limit: r < 4.27184 @ 95%CL (1 toyMC)
   68% expected band : 4.27184 < r < 4.27184
   95% expected band : 4.27184 < r < 4.27184
>>>> Finished computing CI MCMC with Lambda = 1
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1018373350
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.0487 +/- 0.00509464 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.0487 @ 95%CL (1 toyMC)
median expected limit: r < 2.0487 @ 95%CL (1 toyMC)
   68% expected band : 2.0487 < r < 2.0487
   95% expected band : 2.0487 < r < 2.0487
>>>> Finished computing CI MCMC with Lambda = 2
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 705114684
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.84116 +/- 0.00587205 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.84116 @ 95%CL (1 toyMC)
median expected limit: r < 1.84116 @ 95%CL (1 toyMC)
   68% expected band : 1.84116 < r < 1.84116
   95% expected band : 1.84116 < r < 1.84116
>>>> Finished computing CI MCMC with Lambda = 3
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 749618597
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.84531 +/- 0.00805921 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 3.84531 @ 95%CL (1 toyMC)
median expected limit: r < 3.84531 @ 95%CL (1 toyMC)
   68% expected band : 3.84531 < r < 3.84531
   95% expected band : 3.84531 < r < 3.84531
>>>> Finished computing CI MCMC with Lambda = 4
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 771476496
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.36207 +/- 0.00626314 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.36207 @ 95%CL (1 toyMC)
median expected limit: r < 2.36207 @ 95%CL (1 toyMC)
   68% expected band : 2.36207 < r < 2.36207
   95% expected band : 2.36207 < r < 2.36207
>>>> Finished computing CI MCMC with Lambda = 5
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 948098007
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.94853 +/- 0.00537777 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.94853 @ 95%CL (1 toyMC)
median expected limit: r < 1.94853 @ 95%CL (1 toyMC)
   68% expected band : 1.94853 < r < 1.94853
   95% expected band : 1.94853 < r < 1.94853
>>>> Finished computing CI MCMC with Lambda = 6
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 855048794
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.0866 +/- 0.00699023 @ 95% CL (100 tries)
Done in 0.48 min (cpu), 0.48 min (real)
mean   expected limit: r < 5.0866 @ 95%CL (1 toyMC)
median expected limit: r < 5.0866 @ 95%CL (1 toyMC)
   68% expected band : 5.0866 < r < 5.0866
   95% expected band : 5.0866 < r < 5.0866
>>>> Finished computing CI MCMC with Lambda = 7
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1465294304
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.76387 +/- 0.00727249 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.76387 @ 95%CL (1 toyMC)
median expected limit: r < 2.76387 @ 95%CL (1 toyMC)
   68% expected band : 2.76387 < r < 2.76387
   95% expected band : 2.76387 < r < 2.76387
>>>> Finished computing CI MCMC with Lambda = 8
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1743001202
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16083 +/- 0.00588849 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.16083 @ 95%CL (1 toyMC)
median expected limit: r < 3.16083 @ 95%CL (1 toyMC)
   68% expected band : 3.16083 < r < 3.16083
   95% expected band : 3.16083 < r < 3.16083
>>>> Finished computing CI MCMC with Lambda = 9
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1457116766
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.98712 +/- 0.00461172 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.98712 @ 95%CL (1 toyMC)
median expected limit: r < 1.98712 @ 95%CL (1 toyMC)
   68% expected band : 1.98712 < r < 1.98712
   95% expected band : 1.98712 < r < 1.98712
>>>> Finished computing CI MCMC with Lambda = 10
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1572370483
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.69584 +/- 0.0065436 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.69584 @ 95%CL (1 toyMC)
median expected limit: r < 2.69584 @ 95%CL (1 toyMC)
   68% expected band : 2.69584 < r < 2.69584
   95% expected band : 2.69584 < r < 2.69584
>>>> Finished computing CI MCMC with Lambda = 11
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1766831656
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.41407 +/- 0.00554812 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.41407 @ 95%CL (1 toyMC)
median expected limit: r < 2.41407 @ 95%CL (1 toyMC)
   68% expected band : 2.41407 < r < 2.41407
   95% expected band : 2.41407 < r < 2.41407
>>>> Finished computing CI MCMC with Lambda = 12
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1079780763
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54495 +/- 0.00440691 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.54495 @ 95%CL (1 toyMC)
median expected limit: r < 2.54495 @ 95%CL (1 toyMC)
   68% expected band : 2.54495 < r < 2.54495
   95% expected band : 2.54495 < r < 2.54495
>>>> Finished computing CI MCMC with Lambda = 13
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -151270971
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.55708 +/- 0.00631845 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.55708 @ 95%CL (1 toyMC)
median expected limit: r < 2.55708 @ 95%CL (1 toyMC)
   68% expected band : 2.55708 < r < 2.55708
   95% expected band : 2.55708 < r < 2.55708
>>>> Finished computing CI MCMC with Lambda = 14
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1594360848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.1175 +/- 0.00541527 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.1175 @ 95%CL (1 toyMC)
median expected limit: r < 3.1175 @ 95%CL (1 toyMC)
   68% expected band : 3.1175 < r < 3.1175
   95% expected band : 3.1175 < r < 3.1175
>>>> Finished computing CI MCMC with Lambda = 15
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 902837427
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.76126 +/- 0.00571611 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.76126 @ 95%CL (1 toyMC)
median expected limit: r < 1.76126 @ 95%CL (1 toyMC)
   68% expected band : 1.76126 < r < 1.76126
   95% expected band : 1.76126 < r < 1.76126
>>>> Finished computing CI MCMC with Lambda = 16
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1070729669
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59714 +/- 0.00583026 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.59714 @ 95%CL (1 toyMC)
median expected limit: r < 2.59714 @ 95%CL (1 toyMC)
   68% expected band : 2.59714 < r < 2.59714
   95% expected band : 2.59714 < r < 2.59714
>>>> Finished computing CI MCMC with Lambda = 17
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1639088417
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54979 +/- 0.00511462 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.54979 @ 95%CL (1 toyMC)
median expected limit: r < 2.54979 @ 95%CL (1 toyMC)
   68% expected band : 2.54979 < r < 2.54979
   95% expected band : 2.54979 < r < 2.54979
>>>> Finished computing CI MCMC with Lambda = 18
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1026146531
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.77687 +/- 0.00706136 @ 95% CL (100 tries)
Done in 0.48 min (cpu), 0.48 min (real)
mean   expected limit: r < 4.77687 @ 95%CL (1 toyMC)
median expected limit: r < 4.77687 @ 95%CL (1 toyMC)
   68% expected band : 4.77687 < r < 4.77687
   95% expected band : 4.77687 < r < 4.77687
>>>> Finished computing CI MCMC with Lambda = 19
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1499261798
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64991 +/- 0.00684089 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.64991 @ 95%CL (1 toyMC)
median expected limit: r < 2.64991 @ 95%CL (1 toyMC)
   68% expected band : 2.64991 < r < 2.64991
   95% expected band : 2.64991 < r < 2.64991
>>>> Finished computing CI MCMC with Lambda = 20
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -984826789
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.72667 +/- 0.00537561 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.72667 @ 95%CL (1 toyMC)
median expected limit: r < 3.72667 @ 95%CL (1 toyMC)
   68% expected band : 3.72667 < r < 3.72667
   95% expected band : 3.72667 < r < 3.72667
>>>> Finished computing CI MCMC with Lambda = 21
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1213761068
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.18841 +/- 0.00494276 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.18841 @ 95%CL (1 toyMC)
median expected limit: r < 3.18841 @ 95%CL (1 toyMC)
   68% expected band : 3.18841 < r < 3.18841
   95% expected band : 3.18841 < r < 3.18841
>>>> Finished computing CI MCMC with Lambda = 22
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1317150404
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.38717 +/- 0.00509772 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.38717 @ 95%CL (1 toyMC)
median expected limit: r < 3.38717 @ 95%CL (1 toyMC)
   68% expected band : 3.38717 < r < 3.38717
   95% expected band : 3.38717 < r < 3.38717
>>>> Finished computing CI MCMC with Lambda = 23
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1845380573
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.57585 +/- 0.00814654 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.57585 @ 95%CL (1 toyMC)
median expected limit: r < 3.57585 @ 95%CL (1 toyMC)
   68% expected band : 3.57585 < r < 3.57585
   95% expected band : 3.57585 < r < 3.57585
>>>> Finished computing CI MCMC with Lambda = 24
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1852244454
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.33119 +/- 0.0067318 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.33119 @ 95%CL (1 toyMC)
median expected limit: r < 3.33119 @ 95%CL (1 toyMC)
   68% expected band : 3.33119 < r < 3.33119
   95% expected band : 3.33119 < r < 3.33119
>>>> Finished computing CI MCMC with Lambda = 25
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1875460872
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.32007 +/- 0.00559738 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 4.32007 @ 95%CL (1 toyMC)
median expected limit: r < 4.32007 @ 95%CL (1 toyMC)
   68% expected band : 4.32007 < r < 4.32007
   95% expected band : 4.32007 < r < 4.32007
>>>> Finished computing CI MCMC with Lambda = 26
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 644231291
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.50466 +/- 0.00569361 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.50466 @ 95%CL (1 toyMC)
median expected limit: r < 1.50466 @ 95%CL (1 toyMC)
   68% expected band : 1.50466 < r < 1.50466
   95% expected band : 1.50466 < r < 1.50466
>>>> Finished computing CI MCMC with Lambda = 27
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1341535614
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.69572 +/- 0.00642511 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.69572 @ 95%CL (1 toyMC)
median expected limit: r < 3.69572 @ 95%CL (1 toyMC)
   68% expected band : 3.69572 < r < 3.69572
   95% expected band : 3.69572 < r < 3.69572
>>>> Finished computing CI MCMC with Lambda = 28
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2139194868
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.89357 +/- 0.00627027 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 3.89357 @ 95%CL (1 toyMC)
median expected limit: r < 3.89357 @ 95%CL (1 toyMC)
   68% expected band : 3.89357 < r < 3.89357
   95% expected band : 3.89357 < r < 3.89357
>>>> Finished computing CI MCMC with Lambda = 29
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1822402590
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.90226 +/- 0.00496161 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.90226 @ 95%CL (1 toyMC)
median expected limit: r < 2.90226 @ 95%CL (1 toyMC)
   68% expected band : 2.90226 < r < 2.90226
   95% expected band : 2.90226 < r < 2.90226
>>>> Finished computing CI MCMC with Lambda = 30
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1264258428
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.94696 +/- 0.00530365 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.94696 @ 95%CL (1 toyMC)
median expected limit: r < 2.94696 @ 95%CL (1 toyMC)
   68% expected band : 2.94696 < r < 2.94696
   95% expected band : 2.94696 < r < 2.94696
>>>> Finished computing CI MCMC with Lambda = 31
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -340962681
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42915 +/- 0.00476115 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.42915 @ 95%CL (1 toyMC)
median expected limit: r < 2.42915 @ 95%CL (1 toyMC)
   68% expected band : 2.42915 < r < 2.42915
   95% expected band : 2.42915 < r < 2.42915
>>>> Finished computing CI MCMC with Lambda = 32
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1277149460
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.34689 +/- 0.00553174 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.34689 @ 95%CL (1 toyMC)
median expected limit: r < 2.34689 @ 95%CL (1 toyMC)
   68% expected band : 2.34689 < r < 2.34689
   95% expected band : 2.34689 < r < 2.34689
>>>> Finished computing CI MCMC with Lambda = 33
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 944206151
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.30239 +/- 0.00759715 @ 95% CL (100 tries)
Done in 0.48 min (cpu), 0.48 min (real)
mean   expected limit: r < 5.30239 @ 95%CL (1 toyMC)
median expected limit: r < 5.30239 @ 95%CL (1 toyMC)
   68% expected band : 5.30239 < r < 5.30239
   95% expected band : 5.30239 < r < 5.30239
>>>> Finished computing CI MCMC with Lambda = 34
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1713982163
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.53801 +/- 0.00830169 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 4.53801 @ 95%CL (1 toyMC)
median expected limit: r < 4.53801 @ 95%CL (1 toyMC)
   68% expected band : 4.53801 < r < 4.53801
   95% expected band : 4.53801 < r < 4.53801
>>>> Finished computing CI MCMC with Lambda = 35
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 146749111
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.57919 +/- 0.00705998 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 4.57919 @ 95%CL (1 toyMC)
median expected limit: r < 4.57919 @ 95%CL (1 toyMC)
   68% expected band : 4.57919 < r < 4.57919
   95% expected band : 4.57919 < r < 4.57919
>>>> Finished computing CI MCMC with Lambda = 36
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1845010029
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.26147 +/- 0.00463877 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.26147 @ 95%CL (1 toyMC)
median expected limit: r < 3.26147 @ 95%CL (1 toyMC)
   68% expected band : 3.26147 < r < 3.26147
   95% expected band : 3.26147 < r < 3.26147
>>>> Finished computing CI MCMC with Lambda = 37
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -407273422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88342 +/- 0.0051028 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.88342 @ 95%CL (1 toyMC)
median expected limit: r < 2.88342 @ 95%CL (1 toyMC)
   68% expected band : 2.88342 < r < 2.88342
   95% expected band : 2.88342 < r < 2.88342
>>>> Finished computing CI MCMC with Lambda = 38
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1676693617
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.79228 +/- 0.0071942 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.79228 @ 95%CL (1 toyMC)
median expected limit: r < 3.79228 @ 95%CL (1 toyMC)
   68% expected band : 3.79228 < r < 3.79228
   95% expected band : 3.79228 < r < 3.79228
>>>> Finished computing CI MCMC with Lambda = 39
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1831365942
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.54492 +/- 0.00614812 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.54492 @ 95%CL (1 toyMC)
median expected limit: r < 2.54492 @ 95%CL (1 toyMC)
   68% expected band : 2.54492 < r < 2.54492
   95% expected band : 2.54492 < r < 2.54492
>>>> Finished computing CI MCMC with Lambda = 40
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -895805214
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.31988 +/- 0.0058479 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.31988 @ 95%CL (1 toyMC)
median expected limit: r < 3.31988 @ 95%CL (1 toyMC)
   68% expected band : 3.31988 < r < 3.31988
   95% expected band : 3.31988 < r < 3.31988
>>>> Finished computing CI MCMC with Lambda = 41
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -65542422
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.88544 +/- 0.00661653 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.88544 @ 95%CL (1 toyMC)
median expected limit: r < 2.88544 @ 95%CL (1 toyMC)
   68% expected band : 2.88544 < r < 2.88544
   95% expected band : 2.88544 < r < 2.88544
>>>> Finished computing CI MCMC with Lambda = 42
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1612267855
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06357 +/- 0.00570226 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.06357 @ 95%CL (1 toyMC)
median expected limit: r < 3.06357 @ 95%CL (1 toyMC)
   68% expected band : 3.06357 < r < 3.06357
   95% expected band : 3.06357 < r < 3.06357
>>>> Finished computing CI MCMC with Lambda = 43
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -50946401
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.85508 +/- 0.00656007 @ 95% CL (100 tries)
Done in 0.48 min (cpu), 0.48 min (real)
mean   expected limit: r < 5.85508 @ 95%CL (1 toyMC)
median expected limit: r < 5.85508 @ 95%CL (1 toyMC)
   68% expected band : 5.85508 < r < 5.85508
   95% expected band : 5.85508 < r < 5.85508
>>>> Finished computing CI MCMC with Lambda = 44
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -276448354
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.13993 +/- 0.00505888 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.13993 @ 95%CL (1 toyMC)
median expected limit: r < 2.13993 @ 95%CL (1 toyMC)
   68% expected band : 2.13993 < r < 2.13993
   95% expected band : 2.13993 < r < 2.13993
>>>> Finished computing CI MCMC with Lambda = 45
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2136326591
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.7957 +/- 0.00622704 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.7957 @ 95%CL (1 toyMC)
median expected limit: r < 2.7957 @ 95%CL (1 toyMC)
   68% expected band : 2.7957 < r < 2.7957
   95% expected band : 2.7957 < r < 2.7957
>>>> Finished computing CI MCMC with Lambda = 46
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -179810969
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.555 +/- 0.00539486 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.555 @ 95%CL (1 toyMC)
median expected limit: r < 3.555 @ 95%CL (1 toyMC)
   68% expected band : 3.555 < r < 3.555
   95% expected band : 3.555 < r < 3.555
>>>> Finished computing CI MCMC with Lambda = 47
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1471068356
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.67018 +/- 0.00611608 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.67018 @ 95%CL (1 toyMC)
median expected limit: r < 2.67018 @ 95%CL (1 toyMC)
   68% expected band : 2.67018 < r < 2.67018
   95% expected band : 2.67018 < r < 2.67018
>>>> Finished computing CI MCMC with Lambda = 48
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2106795484
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.74118 +/- 0.0077555 @ 95% CL (100 tries)
Done in 0.48 min (cpu), 0.48 min (real)
mean   expected limit: r < 4.74118 @ 95%CL (1 toyMC)
median expected limit: r < 4.74118 @ 95%CL (1 toyMC)
   68% expected band : 4.74118 < r < 4.74118
   95% expected band : 4.74118 < r < 4.74118
>>>> Finished computing CI MCMC with Lambda = 49
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2125958322
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.00246 +/- 0.00543768 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.00246 @ 95%CL (1 toyMC)
median expected limit: r < 3.00246 @ 95%CL (1 toyMC)
   68% expected band : 3.00246 < r < 3.00246
   95% expected band : 3.00246 < r < 3.00246
>>>> Finished computing CI MCMC with Lambda = 50
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1355762621
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 6.92343 +/- 0.00764009 @ 95% CL (100 tries)
Done in 0.49 min (cpu), 0.49 min (real)
mean   expected limit: r < 6.92343 @ 95%CL (1 toyMC)
median expected limit: r < 6.92343 @ 95%CL (1 toyMC)
   68% expected band : 6.92343 < r < 6.92343
   95% expected band : 6.92343 < r < 6.92343
>>>> Finished computing CI MCMC with Lambda = 51
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1718650010
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.93031 +/- 0.00749939 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.93031 @ 95%CL (1 toyMC)
median expected limit: r < 3.93031 @ 95%CL (1 toyMC)
   68% expected band : 3.93031 < r < 3.93031
   95% expected band : 3.93031 < r < 3.93031
>>>> Finished computing CI MCMC with Lambda = 52
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1295893190
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06339 +/- 0.0055766 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.06339 @ 95%CL (1 toyMC)
median expected limit: r < 3.06339 @ 95%CL (1 toyMC)
   68% expected band : 3.06339 < r < 3.06339
   95% expected band : 3.06339 < r < 3.06339
>>>> Finished computing CI MCMC with Lambda = 53
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1519861994
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.95906 +/- 0.00437239 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.95906 @ 95%CL (1 toyMC)
median expected limit: r < 1.95906 @ 95%CL (1 toyMC)
   68% expected band : 1.95906 < r < 1.95906
   95% expected band : 1.95906 < r < 1.95906
>>>> Finished computing CI MCMC with Lambda = 54
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -281045979
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.64207 +/- 0.00576639 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.64207 @ 95%CL (1 toyMC)
median expected limit: r < 2.64207 @ 95%CL (1 toyMC)
   68% expected band : 2.64207 < r < 2.64207
   95% expected band : 2.64207 < r < 2.64207
>>>> Finished computing CI MCMC with Lambda = 55
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 487685951
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.93495 +/- 0.00515016 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.93495 @ 95%CL (1 toyMC)
median expected limit: r < 2.93495 @ 95%CL (1 toyMC)
   68% expected band : 2.93495 < r < 2.93495
   95% expected band : 2.93495 < r < 2.93495
>>>> Finished computing CI MCMC with Lambda = 56
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -449709380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.97473 +/- 0.00633086 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.97473 @ 95%CL (1 toyMC)
median expected limit: r < 1.97473 @ 95%CL (1 toyMC)
   68% expected band : 1.97473 < r < 1.97473
   95% expected band : 1.97473 < r < 1.97473
>>>> Finished computing CI MCMC with Lambda = 57
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -636851871
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.5349 +/- 0.00667037 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.5349 @ 95%CL (1 toyMC)
median expected limit: r < 3.5349 @ 95%CL (1 toyMC)
   68% expected band : 3.5349 < r < 3.5349
   95% expected band : 3.5349 < r < 3.5349
>>>> Finished computing CI MCMC with Lambda = 58
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2179152
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.60379 +/- 0.00620193 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.60379 @ 95%CL (1 toyMC)
median expected limit: r < 3.60379 @ 95%CL (1 toyMC)
   68% expected band : 3.60379 < r < 3.60379
   95% expected band : 3.60379 < r < 3.60379
>>>> Finished computing CI MCMC with Lambda = 59
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1045731479
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.81708 +/- 0.00577663 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.81708 @ 95%CL (1 toyMC)
median expected limit: r < 1.81708 @ 95%CL (1 toyMC)
   68% expected band : 1.81708 < r < 1.81708
   95% expected band : 1.81708 < r < 1.81708
>>>> Finished computing CI MCMC with Lambda = 60
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 664382046
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.54757 +/- 0.00395656 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.54757 @ 95%CL (1 toyMC)
median expected limit: r < 1.54757 @ 95%CL (1 toyMC)
   68% expected band : 1.54757 < r < 1.54757
   95% expected band : 1.54757 < r < 1.54757
>>>> Finished computing CI MCMC with Lambda = 61
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1299825203
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.2172 +/- 0.00613394 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.2172 @ 95%CL (1 toyMC)
median expected limit: r < 3.2172 @ 95%CL (1 toyMC)
   68% expected band : 3.2172 < r < 3.2172
   95% expected band : 3.2172 < r < 3.2172
>>>> Finished computing CI MCMC with Lambda = 62
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 378348495
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.00467 +/- 0.00610192 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.00467 @ 95%CL (1 toyMC)
median expected limit: r < 2.00467 @ 95%CL (1 toyMC)
   68% expected band : 2.00467 < r < 2.00467
   95% expected band : 2.00467 < r < 2.00467
>>>> Finished computing CI MCMC with Lambda = 63
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1163607113
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.92735 +/- 0.00471841 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.92735 @ 95%CL (1 toyMC)
median expected limit: r < 1.92735 @ 95%CL (1 toyMC)
   68% expected band : 1.92735 < r < 1.92735
   95% expected band : 1.92735 < r < 1.92735
>>>> Finished computing CI MCMC with Lambda = 64
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1698871925
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.16126 +/- 0.00655363 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.16126 @ 95%CL (1 toyMC)
median expected limit: r < 3.16126 @ 95%CL (1 toyMC)
   68% expected band : 3.16126 < r < 3.16126
   95% expected band : 3.16126 < r < 3.16126
>>>> Finished computing CI MCMC with Lambda = 65
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1386423968
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10433 +/- 0.00563555 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.10433 @ 95%CL (1 toyMC)
median expected limit: r < 3.10433 @ 95%CL (1 toyMC)
   68% expected band : 3.10433 < r < 3.10433
   95% expected band : 3.10433 < r < 3.10433
>>>> Finished computing CI MCMC with Lambda = 66
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -412413410
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.29485 +/- 0.0068788 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.29485 @ 95%CL (1 toyMC)
median expected limit: r < 3.29485 @ 95%CL (1 toyMC)
   68% expected band : 3.29485 < r < 3.29485
   95% expected band : 3.29485 < r < 3.29485
>>>> Finished computing CI MCMC with Lambda = 67
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 646564563
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.00003 +/- 0.00570371 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.00003 @ 95%CL (1 toyMC)
median expected limit: r < 3.00003 @ 95%CL (1 toyMC)
   68% expected band : 3.00003 < r < 3.00003
   95% expected band : 3.00003 < r < 3.00003
>>>> Finished computing CI MCMC with Lambda = 68
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1046957391
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.15504 +/- 0.00529598 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.15504 @ 95%CL (1 toyMC)
median expected limit: r < 2.15504 @ 95%CL (1 toyMC)
   68% expected band : 2.15504 < r < 2.15504
   95% expected band : 2.15504 < r < 2.15504
>>>> Finished computing CI MCMC with Lambda = 69
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 590967453
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.04941 +/- 0.00517503 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.04941 @ 95%CL (1 toyMC)
median expected limit: r < 2.04941 @ 95%CL (1 toyMC)
   68% expected band : 2.04941 < r < 2.04941
   95% expected band : 2.04941 < r < 2.04941
>>>> Finished computing CI MCMC with Lambda = 70
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 270111934
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.02442 +/- 0.00512599 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.02442 @ 95%CL (1 toyMC)
median expected limit: r < 3.02442 @ 95%CL (1 toyMC)
   68% expected band : 3.02442 < r < 3.02442
   95% expected band : 3.02442 < r < 3.02442
>>>> Finished computing CI MCMC with Lambda = 71
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2005574474
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.28155 +/- 0.00583813 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 3.28155 @ 95%CL (1 toyMC)
median expected limit: r < 3.28155 @ 95%CL (1 toyMC)
   68% expected band : 3.28155 < r < 3.28155
   95% expected band : 3.28155 < r < 3.28155
>>>> Finished computing CI MCMC with Lambda = 72
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 660693366
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.91082 +/- 0.00575287 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.91082 @ 95%CL (1 toyMC)
median expected limit: r < 2.91082 @ 95%CL (1 toyMC)
   68% expected band : 2.91082 < r < 2.91082
   95% expected band : 2.91082 < r < 2.91082
>>>> Finished computing CI MCMC with Lambda = 73
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2009214543
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.23774 +/- 0.00506375 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.23774 @ 95%CL (1 toyMC)
median expected limit: r < 2.23774 @ 95%CL (1 toyMC)
   68% expected band : 2.23774 < r < 2.23774
   95% expected band : 2.23774 < r < 2.23774
>>>> Finished computing CI MCMC with Lambda = 74
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1195525074
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.50057 +/- 0.00616872 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 4.50057 @ 95%CL (1 toyMC)
median expected limit: r < 4.50057 @ 95%CL (1 toyMC)
   68% expected band : 4.50057 < r < 4.50057
   95% expected band : 4.50057 < r < 4.50057
>>>> Finished computing CI MCMC with Lambda = 75
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -256606450
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.84759 +/- 0.00456746 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.84759 @ 95%CL (1 toyMC)
median expected limit: r < 2.84759 @ 95%CL (1 toyMC)
   68% expected band : 2.84759 < r < 2.84759
   95% expected band : 2.84759 < r < 2.84759
>>>> Finished computing CI MCMC with Lambda = 76
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1417986937
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.06496 +/- 0.00514121 @ 95% CL (100 tries)
Done in 0.46 min (cpu), 0.46 min (real)
mean   expected limit: r < 3.06496 @ 95%CL (1 toyMC)
median expected limit: r < 3.06496 @ 95%CL (1 toyMC)
   68% expected band : 3.06496 < r < 3.06496
   95% expected band : 3.06496 < r < 3.06496
>>>> Finished computing CI MCMC with Lambda = 77
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1346492222
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.44874 +/- 0.00590688 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 4.44874 @ 95%CL (1 toyMC)
median expected limit: r < 4.44874 @ 95%CL (1 toyMC)
   68% expected band : 4.44874 < r < 4.44874
   95% expected band : 4.44874 < r < 4.44874
>>>> Finished computing CI MCMC with Lambda = 78
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1378353913
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.30872 +/- 0.00544426 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.47 min (real)
mean   expected limit: r < 4.30872 @ 95%CL (1 toyMC)
median expected limit: r < 4.30872 @ 95%CL (1 toyMC)
   68% expected band : 4.30872 < r < 4.30872
   95% expected band : 4.30872 < r < 4.30872
>>>> Finished computing CI MCMC with Lambda = 79
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1249330927
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.30691 +/- 0.00576232 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.30691 @ 95%CL (1 toyMC)
median expected limit: r < 2.30691 @ 95%CL (1 toyMC)
   68% expected band : 2.30691 < r < 2.30691
   95% expected band : 2.30691 < r < 2.30691
>>>> Finished computing CI MCMC with Lambda = 80
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 761355798
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.98994 +/- 0.00451373 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 2.98994 @ 95%CL (1 toyMC)
median expected limit: r < 2.98994 @ 95%CL (1 toyMC)
   68% expected band : 2.98994 < r < 2.98994
   95% expected band : 2.98994 < r < 2.98994
>>>> Finished computing CI MCMC with Lambda = 81
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -2147049009
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.5301 +/- 0.00475388 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.5301 @ 95%CL (1 toyMC)
median expected limit: r < 2.5301 @ 95%CL (1 toyMC)
   68% expected band : 2.5301 < r < 2.5301
   95% expected band : 2.5301 < r < 2.5301
>>>> Finished computing CI MCMC with Lambda = 82
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 980943086
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.72348 +/- 0.00662293 @ 95% CL (100 tries)
Done in 0.47 min (cpu), 0.48 min (real)
mean   expected limit: r < 4.72348 @ 95%CL (1 toyMC)
median expected limit: r < 4.72348 @ 95%CL (1 toyMC)
   68% expected band : 4.72348 < r < 4.72348
   95% expected band : 4.72348 < r < 4.72348
>>>> Finished computing CI MCMC with Lambda = 83
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -819973933
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.24765 +/- 0.00487098 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.24765 @ 95%CL (1 toyMC)
median expected limit: r < 2.24765 @ 95%CL (1 toyMC)
   68% expected band : 2.24765 < r < 2.24765
   95% expected band : 2.24765 < r < 2.24765
>>>> Finished computing CI MCMC with Lambda = 84
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 689481351
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.62548 +/- 0.00652813 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.62548 @ 95%CL (1 toyMC)
median expected limit: r < 2.62548 @ 95%CL (1 toyMC)
   68% expected band : 2.62548 < r < 2.62548
   95% expected band : 2.62548 < r < 2.62548
>>>> Finished computing CI MCMC with Lambda = 85
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -949874777
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.42081 +/- 0.00519502 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.42081 @ 95%CL (1 toyMC)
median expected limit: r < 2.42081 @ 95%CL (1 toyMC)
   68% expected band : 2.42081 < r < 2.42081
   95% expected band : 2.42081 < r < 2.42081
>>>> Finished computing CI MCMC with Lambda = 86
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 86091848
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.60193 +/- 0.00575535 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.60193 @ 95%CL (1 toyMC)
median expected limit: r < 2.60193 @ 95%CL (1 toyMC)
   68% expected band : 2.60193 < r < 2.60193
   95% expected band : 2.60193 < r < 2.60193
>>>> Finished computing CI MCMC with Lambda = 87
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 2021928564
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.17679 +/- 0.00581908 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.17679 @ 95%CL (1 toyMC)
median expected limit: r < 2.17679 @ 95%CL (1 toyMC)
   68% expected band : 2.17679 < r < 2.17679
   95% expected band : 2.17679 < r < 2.17679
>>>> Finished computing CI MCMC with Lambda = 88
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 788109252
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.66688 +/- 0.00617004 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.43 min (real)
mean   expected limit: r < 2.66688 @ 95%CL (1 toyMC)
median expected limit: r < 2.66688 @ 95%CL (1 toyMC)
   68% expected band : 2.66688 < r < 2.66688
   95% expected band : 2.66688 < r < 2.66688
>>>> Finished computing CI MCMC with Lambda = 89
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 891469380
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 4.08122 +/- 0.00814124 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 4.08122 @ 95%CL (1 toyMC)
median expected limit: r < 4.08122 @ 95%CL (1 toyMC)
   68% expected band : 4.08122 < r < 4.08122
   95% expected band : 4.08122 < r < 4.08122
>>>> Finished computing CI MCMC with Lambda = 90
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1432196253
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.97108 +/- 0.00518298 @ 95% CL (100 tries)
Done in 0.44 min (cpu), 0.44 min (real)
mean   expected limit: r < 2.97108 @ 95%CL (1 toyMC)
median expected limit: r < 2.97108 @ 95%CL (1 toyMC)
   68% expected band : 2.97108 < r < 2.97108
   95% expected band : 2.97108 < r < 2.97108
>>>> Finished computing CI MCMC with Lambda = 91
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 94907146
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 5.48443 +/- 0.00653224 @ 95% CL (100 tries)
Done in 0.48 min (cpu), 0.48 min (real)
mean   expected limit: r < 5.48443 @ 95%CL (1 toyMC)
median expected limit: r < 5.48443 @ 95%CL (1 toyMC)
   68% expected band : 5.48443 < r < 5.48443
   95% expected band : 5.48443 < r < 5.48443
>>>> Finished computing CI MCMC with Lambda = 92
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1129751345
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.83021 +/- 0.00484649 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 1.83021 @ 95%CL (1 toyMC)
median expected limit: r < 1.83021 @ 95%CL (1 toyMC)
   68% expected band : 1.83021 < r < 1.83021
   95% expected band : 1.83021 < r < 1.83021
>>>> Finished computing CI MCMC with Lambda = 93
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 797976657
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.10536 +/- 0.00724131 @ 95% CL (100 tries)
Done in 0.43 min (cpu), 0.43 min (real)
mean   expected limit: r < 3.10536 @ 95%CL (1 toyMC)
median expected limit: r < 3.10536 @ 95%CL (1 toyMC)
   68% expected band : 3.10536 < r < 3.10536
   95% expected band : 3.10536 < r < 3.10536
>>>> Finished computing CI MCMC with Lambda = 94
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1394082890
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.57925 +/- 0.00426496 @ 95% CL (100 tries)
Done in 0.40 min (cpu), 0.40 min (real)
mean   expected limit: r < 1.57925 @ 95%CL (1 toyMC)
median expected limit: r < 1.57925 @ 95%CL (1 toyMC)
   68% expected band : 1.57925 < r < 1.57925
   95% expected band : 1.57925 < r < 1.57925
>>>> Finished computing CI MCMC with Lambda = 95
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -579764888
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.70258 +/- 0.00682133 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.70258 @ 95%CL (1 toyMC)
median expected limit: r < 3.70258 @ 95%CL (1 toyMC)
   68% expected band : 3.70258 < r < 3.70258
   95% expected band : 3.70258 < r < 3.70258
>>>> Finished computing CI MCMC with Lambda = 96
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1616650120
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.59848 +/- 0.00536947 @ 95% CL (100 tries)
Done in 0.42 min (cpu), 0.42 min (real)
mean   expected limit: r < 2.59848 @ 95%CL (1 toyMC)
median expected limit: r < 2.59848 @ 95%CL (1 toyMC)
   68% expected band : 2.59848 < r < 2.59848
   95% expected band : 2.59848 < r < 2.59848
>>>> Finished computing CI MCMC with Lambda = 97
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1986091768
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 3.14165 +/- 0.0057065 @ 95% CL (100 tries)
Done in 0.45 min (cpu), 0.45 min (real)
mean   expected limit: r < 3.14165 @ 95%CL (1 toyMC)
median expected limit: r < 3.14165 @ 95%CL (1 toyMC)
   68% expected band : 3.14165 < r < 3.14165
   95% expected band : 3.14165 < r < 3.14165
>>>> Finished computing CI MCMC with Lambda = 98
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed -1977723806
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 2.45469 +/- 0.00506613 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 2.45469 @ 95%CL (1 toyMC)
median expected limit: r < 2.45469 @ 95%CL (1 toyMC)
   68% expected band : 2.45469 < r < 2.45469
   95% expected band : 2.45469 < r < 2.45469
>>>> Finished computing CI MCMC with Lambda = 99
 <<< Combine >>> 
>>> including systematics
>>> method used is MarkovChainMC
>>> Used OpenSSL to get a really random seed 1046608361
Generate toy 1/1

 -- MarkovChainMC -- 
Limit: r < 1.99388 +/- 0.00502152 @ 95% CL (100 tries)
Done in 0.41 min (cpu), 0.41 min (real)
mean   expected limit: r < 1.99388 @ 95%CL (1 toyMC)
median expected limit: r < 1.99388 @ 95%CL (1 toyMC)
   68% expected band : 1.99388 < r < 1.99388
   95% expected band : 1.99388 < r < 1.99388
>>>> Finished computing CI MCMC with Lambda = 100
hadd Target file: higgsCombine40.MarkovChainMC.mH40.root
hadd compression setting for all ouput: 1
hadd Source file 1: higgsCombineTest.MarkovChainMC.mH40.-1026146531.root
hadd Source file 2: higgsCombineTest.MarkovChainMC.mH40.-1046957391.root
hadd Source file 3: higgsCombineTest.MarkovChainMC.mH40.-1070729669.root
hadd Source file 4: higgsCombineTest.MarkovChainMC.mH40.-1079780763.root
hadd Source file 5: higgsCombineTest.MarkovChainMC.mH40.-1213761068.root
hadd Source file 6: higgsCombineTest.MarkovChainMC.mH40.-1277149460.root
hadd Source file 7: higgsCombineTest.MarkovChainMC.mH40.-1295893190.root
hadd Source file 8: higgsCombineTest.MarkovChainMC.mH40.-1346492222.root
hadd Source file 9: higgsCombineTest.MarkovChainMC.mH40.-1355762621.root
hadd Source file 10: higgsCombineTest.MarkovChainMC.mH40.-1417986937.root
hadd Source file 11: higgsCombineTest.MarkovChainMC.mH40.-1432196253.root
hadd Source file 12: higgsCombineTest.MarkovChainMC.mH40.-1457116766.root
hadd Source file 13: higgsCombineTest.MarkovChainMC.mH40.-1465294304.root
hadd Source file 14: higgsCombineTest.MarkovChainMC.mH40.-151270971.root
hadd Source file 15: higgsCombineTest.MarkovChainMC.mH40.-1519861994.root
hadd Source file 16: higgsCombineTest.MarkovChainMC.mH40.-1572370483.root
hadd Source file 17: higgsCombineTest.MarkovChainMC.mH40.-1616650120.root
hadd Source file 18: higgsCombineTest.MarkovChainMC.mH40.-1639088417.root
hadd Source file 19: higgsCombineTest.MarkovChainMC.mH40.-1676693617.root
hadd Source file 20: higgsCombineTest.MarkovChainMC.mH40.-1698871925.root
hadd Source file 21: higgsCombineTest.MarkovChainMC.mH40.-1713982163.root
hadd Source file 22: higgsCombineTest.MarkovChainMC.mH40.-1718650010.root
hadd Source file 23: higgsCombineTest.MarkovChainMC.mH40.-1743001202.root
hadd Source file 24: higgsCombineTest.MarkovChainMC.mH40.-1766831656.root
hadd Source file 25: higgsCombineTest.MarkovChainMC.mH40.-179810969.root
hadd Source file 26: higgsCombineTest.MarkovChainMC.mH40.-1845010029.root
hadd Source file 27: higgsCombineTest.MarkovChainMC.mH40.-1845380573.root
hadd Source file 28: higgsCombineTest.MarkovChainMC.mH40.-1852244454.root
hadd Source file 29: higgsCombineTest.MarkovChainMC.mH40.-1875460872.root
hadd Source file 30: higgsCombineTest.MarkovChainMC.mH40.-1977723806.root
hadd Source file 31: higgsCombineTest.MarkovChainMC.mH40.-2009214543.root
hadd Source file 32: higgsCombineTest.MarkovChainMC.mH40.-2106795484.root
hadd Source file 33: higgsCombineTest.MarkovChainMC.mH40.-2139194868.root
hadd Source file 34: higgsCombineTest.MarkovChainMC.mH40.-2147049009.root
hadd Source file 35: higgsCombineTest.MarkovChainMC.mH40.-256606450.root
hadd Source file 36: higgsCombineTest.MarkovChainMC.mH40.-276448354.root
hadd Source file 37: higgsCombineTest.MarkovChainMC.mH40.-281045979.root
hadd Source file 38: higgsCombineTest.MarkovChainMC.mH40.-340962681.root
hadd Source file 39: higgsCombineTest.MarkovChainMC.mH40.-407273422.root
hadd Source file 40: higgsCombineTest.MarkovChainMC.mH40.-412413410.root
hadd Source file 41: higgsCombineTest.MarkovChainMC.mH40.-449709380.root
hadd Source file 42: higgsCombineTest.MarkovChainMC.mH40.-50946401.root
hadd Source file 43: higgsCombineTest.MarkovChainMC.mH40.-579764888.root
hadd Source file 44: higgsCombineTest.MarkovChainMC.mH40.-636851871.root
hadd Source file 45: higgsCombineTest.MarkovChainMC.mH40.-65542422.root
hadd Source file 46: higgsCombineTest.MarkovChainMC.mH40.-819973933.root
hadd Source file 47: higgsCombineTest.MarkovChainMC.mH40.-895805214.root
hadd Source file 48: higgsCombineTest.MarkovChainMC.mH40.-949874777.root
hadd Source file 49: higgsCombineTest.MarkovChainMC.mH40.-984826789.root
hadd Source file 50: higgsCombineTest.MarkovChainMC.mH40.1018373350.root
hadd Source file 51: higgsCombineTest.MarkovChainMC.mH40.1045731479.root
hadd Source file 52: higgsCombineTest.MarkovChainMC.mH40.1046608361.root
hadd Source file 53: higgsCombineTest.MarkovChainMC.mH40.1129751345.root
hadd Source file 54: higgsCombineTest.MarkovChainMC.mH40.1163607113.root
hadd Source file 55: higgsCombineTest.MarkovChainMC.mH40.1195525074.root
hadd Source file 56: higgsCombineTest.MarkovChainMC.mH40.1249330927.root
hadd Source file 57: higgsCombineTest.MarkovChainMC.mH40.1264258428.root
hadd Source file 58: higgsCombineTest.MarkovChainMC.mH40.1299825203.root
hadd Source file 59: higgsCombineTest.MarkovChainMC.mH40.1317150404.root
hadd Source file 60: higgsCombineTest.MarkovChainMC.mH40.1341535614.root
hadd Source file 61: higgsCombineTest.MarkovChainMC.mH40.1378353913.root
hadd Source file 62: higgsCombineTest.MarkovChainMC.mH40.1386423968.root
hadd Source file 63: higgsCombineTest.MarkovChainMC.mH40.1394082890.root
hadd Source file 64: higgsCombineTest.MarkovChainMC.mH40.146749111.root
hadd Source file 65: higgsCombineTest.MarkovChainMC.mH40.1471068356.root
hadd Source file 66: higgsCombineTest.MarkovChainMC.mH40.1499261798.root
hadd Source file 67: higgsCombineTest.MarkovChainMC.mH40.1594360848.root
hadd Source file 68: higgsCombineTest.MarkovChainMC.mH40.1612267855.root
hadd Source file 69: higgsCombineTest.MarkovChainMC.mH40.1822402590.root
hadd Source file 70: higgsCombineTest.MarkovChainMC.mH40.1831365942.root
hadd Source file 71: higgsCombineTest.MarkovChainMC.mH40.1986091768.root
hadd Source file 72: higgsCombineTest.MarkovChainMC.mH40.2005574474.root
hadd Source file 73: higgsCombineTest.MarkovChainMC.mH40.2021928564.root
hadd Source file 74: higgsCombineTest.MarkovChainMC.mH40.2125958322.root
hadd Source file 75: higgsCombineTest.MarkovChainMC.mH40.2136326591.root
hadd Source file 76: higgsCombineTest.MarkovChainMC.mH40.2179152.root
hadd Source file 77: higgsCombineTest.MarkovChainMC.mH40.270111934.root
hadd Source file 78: higgsCombineTest.MarkovChainMC.mH40.378348495.root
hadd Source file 79: higgsCombineTest.MarkovChainMC.mH40.487685951.root
hadd Source file 80: higgsCombineTest.MarkovChainMC.mH40.590967453.root
hadd Source file 81: higgsCombineTest.MarkovChainMC.mH40.644231291.root
hadd Source file 82: higgsCombineTest.MarkovChainMC.mH40.646564563.root
hadd Source file 83: higgsCombineTest.MarkovChainMC.mH40.660693366.root
hadd Source file 84: higgsCombineTest.MarkovChainMC.mH40.664382046.root
hadd Source file 85: higgsCombineTest.MarkovChainMC.mH40.689481351.root
hadd Source file 86: higgsCombineTest.MarkovChainMC.mH40.705114684.root
hadd Source file 87: higgsCombineTest.MarkovChainMC.mH40.749618597.root
hadd Source file 88: higgsCombineTest.MarkovChainMC.mH40.761355798.root
hadd Source file 89: higgsCombineTest.MarkovChainMC.mH40.771476496.root
hadd Source file 90: higgsCombineTest.MarkovChainMC.mH40.788109252.root
hadd Source file 91: higgsCombineTest.MarkovChainMC.mH40.797976657.root
hadd Source file 92: higgsCombineTest.MarkovChainMC.mH40.803428797.root
hadd Source file 93: higgsCombineTest.MarkovChainMC.mH40.855048794.root
hadd Source file 94: higgsCombineTest.MarkovChainMC.mH40.86091848.root
hadd Source file 95: higgsCombineTest.MarkovChainMC.mH40.891469380.root
hadd Source file 96: higgsCombineTest.MarkovChainMC.mH40.902837427.root
hadd Source file 97: higgsCombineTest.MarkovChainMC.mH40.944206151.root
hadd Source file 98: higgsCombineTest.MarkovChainMC.mH40.948098007.root
hadd Source file 99: higgsCombineTest.MarkovChainMC.mH40.94907146.root
hadd Source file 100: higgsCombineTest.MarkovChainMC.mH40.980943086.root
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/
hadd Target path: higgsCombine40.MarkovChainMC.mH40.root:/toys
